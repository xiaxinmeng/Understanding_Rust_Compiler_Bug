{"sha": "9bf386f4c03571c58e6a38267f1008241ea723ef", "node_id": "C_kwDOAAsO6NoAKDliZjM4NmY0YzAzNTcxYzU4ZTZhMzgyNjdmMTAwODI0MWVhNzIzZWY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:43:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:50:13Z"}, "message": "Fix default enum representation not being isize", "tree": {"sha": "20ef418d7c9626e20c58f154e6bece98e4e3fbcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20ef418d7c9626e20c58f154e6bece98e4e3fbcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bf386f4c03571c58e6a38267f1008241ea723ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf386f4c03571c58e6a38267f1008241ea723ef", "html_url": "https://github.com/rust-lang/rust/commit/9bf386f4c03571c58e6a38267f1008241ea723ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bf386f4c03571c58e6a38267f1008241ea723ef/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2119c1f3519ab1f106de30f668cbd19f7c39b40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2119c1f3519ab1f106de30f668cbd19f7c39b40d", "html_url": "https://github.com/rust-lang/rust/commit/2119c1f3519ab1f106de30f668cbd19f7c39b40d"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "14f8629056faf371326ba16fee0aa8771ad83997", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=9bf386f4c03571c58e6a38267f1008241ea723ef", "patch": "@@ -223,7 +223,7 @@ impl EnumData {\n     pub fn variant_body_type(&self) -> Either<BuiltinInt, BuiltinUint> {\n         match self.repr {\n             Some(ReprData { kind: ReprKind::BuiltinInt { builtin, .. }, .. }) => builtin,\n-            _ => Either::Right(BuiltinUint::U32),\n+            _ => Either::Left(BuiltinInt::Isize),\n         }\n     }\n }"}, {"sha": "ebbc5410147c6b8d63e8b4df5623fba06db5b4d5", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=9bf386f4c03571c58e6a38267f1008241ea723ef", "patch": "@@ -461,6 +461,18 @@ fn visit_module(\n                     let body = db.body(def);\n                     visit_body(db, &body, cb);\n                 }\n+                ModuleDefId::AdtId(hir_def::AdtId::EnumId(it)) => {\n+                    db.enum_data(it)\n+                        .variants\n+                        .iter()\n+                        .map(|(id, _)| hir_def::EnumVariantId { parent: it, local_id: id })\n+                        .for_each(|it| {\n+                            let def = it.into();\n+                            cb(def);\n+                            let body = db.body(def);\n+                            visit_body(db, &body, cb);\n+                        });\n+                }\n                 ModuleDefId::TraitId(it) => {\n                     let trait_data = db.trait_data(it);\n                     for &(_, item) in trait_data.items.iter() {"}, {"sha": "1757327b929d02309975659e7070546d485d1c9e", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf386f4c03571c58e6a38267f1008241ea723ef/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=9bf386f4c03571c58e6a38267f1008241ea723ef", "patch": "@@ -1693,16 +1693,16 @@ fn infer_type_param() {\n fn infer_const() {\n     check_infer(\n         r#\"\n-        struct Foo;\n-        impl Foo { const ASSOC_CONST: u32 = 0; }\n-        const GLOBAL_CONST: u32 = 101;\n-        fn test() {\n-            const LOCAL_CONST: u32 = 99;\n-            let x = LOCAL_CONST;\n-            let z = GLOBAL_CONST;\n-            let id = Foo::ASSOC_CONST;\n-        }\n-        \"#,\n+struct Foo;\n+impl Foo { const ASSOC_CONST: u32 = 0; }\n+const GLOBAL_CONST: u32 = 101;\n+fn test() {\n+    const LOCAL_CONST: u32 = 99;\n+    let x = LOCAL_CONST;\n+    let z = GLOBAL_CONST;\n+    let id = Foo::ASSOC_CONST;\n+}\n+\"#,\n         expect![[r#\"\n             48..49 '0': u32\n             79..82 '101': u32\n@@ -1722,17 +1722,17 @@ fn infer_const() {\n fn infer_static() {\n     check_infer(\n         r#\"\n-        static GLOBAL_STATIC: u32 = 101;\n-        static mut GLOBAL_STATIC_MUT: u32 = 101;\n-        fn test() {\n-            static LOCAL_STATIC: u32 = 99;\n-            static mut LOCAL_STATIC_MUT: u32 = 99;\n-            let x = LOCAL_STATIC;\n-            let y = LOCAL_STATIC_MUT;\n-            let z = GLOBAL_STATIC;\n-            let w = GLOBAL_STATIC_MUT;\n-        }\n-        \"#,\n+static GLOBAL_STATIC: u32 = 101;\n+static mut GLOBAL_STATIC_MUT: u32 = 101;\n+fn test() {\n+    static LOCAL_STATIC: u32 = 99;\n+    static mut LOCAL_STATIC_MUT: u32 = 99;\n+    let x = LOCAL_STATIC;\n+    let y = LOCAL_STATIC_MUT;\n+    let z = GLOBAL_STATIC;\n+    let w = GLOBAL_STATIC_MUT;\n+}\n+\"#,\n         expect![[r#\"\n             28..31 '101': u32\n             69..72 '101': u32\n@@ -1751,6 +1751,41 @@ fn infer_static() {\n     );\n }\n \n+#[test]\n+fn infer_enum_variant() {\n+    check_infer(\n+        r#\"\n+enum Foo {\n+    A = 15,\n+    B = Foo::A as isize + 1\n+}\n+\"#,\n+        expect![[r#\"\n+            19..21 '15': isize\n+            31..37 'Foo::A': Foo\n+            31..46 'Foo::A as isize': isize\n+            31..50 'Foo::A...ze + 1': isize\n+            49..50 '1': isize\n+        \"#]],\n+    );\n+    check_infer(\n+        r#\"\n+#[repr(u32)]\n+enum Foo {\n+    A = 15,\n+    B = Foo::A as u32 + 1\n+}\n+\"#,\n+        expect![[r#\"\n+            32..34 '15': u32\n+            44..50 'Foo::A': Foo\n+            44..57 'Foo::A as u32': u32\n+            44..61 'Foo::A...32 + 1': u32\n+            60..61 '1': u32\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn shadowing_primitive() {\n     check_types("}]}