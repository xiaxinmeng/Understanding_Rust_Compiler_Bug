{"sha": "67009d367797870bf8221405d7cab594f45bd5e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDA5ZDM2Nzc5Nzg3MGJmODIyMTQwNWQ3Y2FiNTk0ZjQ1YmQ1ZTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-26T16:56:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-26T16:56:36Z"}, "message": "Rollup merge of #62310 - GuillaumeGomez:add-missing-doc-links-boxed, r=Centril\n\nAdd missing doc links in boxed module\n\nr? @rust-lang/docs", "tree": {"sha": "171b994f9a9ebee8130562d074f14bba619209ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171b994f9a9ebee8130562d074f14bba619209ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67009d367797870bf8221405d7cab594f45bd5e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOzDFCRBK7hj4Ov3rIwAAdHIIAIgLIIWEurSaF801rfAzImU/\n1vHiUgN/TWjgpdCwU9nEr0suLelZH45GsJwymLzb6EH9xhs0sZzq/TwNnD2Rm5DV\nT1iWTk/LHvyNV6BlzGGY8ZpspnchXqFV1zYmbUpEBDejz1sOx0VrxovlO0m8jXBG\nkDrx50zjtUJaujg2ayGTA4yywZ6HsOVpaItKMGro7tZzyKLH3tLgu8mCqvOf0V1c\nkiBhoueTugUiWcSKXD4jJoF0Ur26sycHFNmvl7D9z/mA8fCAq4RRenujn+gffjrG\npJH2C0SOk9OLymEdJWsdPDXe/3DzQ8Tq7Wq0/A0NytFtuDLX23Aii8qiXWXaFbI=\n=3kWd\n-----END PGP SIGNATURE-----\n", "payload": "tree 171b994f9a9ebee8130562d074f14bba619209ef\nparent 58b53d1add5fb7cd6b73ac51e181bf56e41912e9\nparent 63f2c22675bad6de9545d1b225a562debbaa7b4e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564160196 +0200\ncommitter GitHub <noreply@github.com> 1564160196 +0200\n\nRollup merge of #62310 - GuillaumeGomez:add-missing-doc-links-boxed, r=Centril\n\nAdd missing doc links in boxed module\n\nr? @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67009d367797870bf8221405d7cab594f45bd5e7", "html_url": "https://github.com/rust-lang/rust/commit/67009d367797870bf8221405d7cab594f45bd5e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67009d367797870bf8221405d7cab594f45bd5e7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b53d1add5fb7cd6b73ac51e181bf56e41912e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/58b53d1add5fb7cd6b73ac51e181bf56e41912e9", "html_url": "https://github.com/rust-lang/rust/commit/58b53d1add5fb7cd6b73ac51e181bf56e41912e9"}, {"sha": "63f2c22675bad6de9545d1b225a562debbaa7b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f2c22675bad6de9545d1b225a562debbaa7b4e", "html_url": "https://github.com/rust-lang/rust/commit/63f2c22675bad6de9545d1b225a562debbaa7b4e"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "488fda0b24738f8ff87af4e08d2eaf4815348e82", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67009d367797870bf8221405d7cab594f45bd5e7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67009d367797870bf8221405d7cab594f45bd5e7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=67009d367797870bf8221405d7cab594f45bd5e7", "patch": "@@ -1,6 +1,6 @@\n //! A pointer type for heap allocation.\n //!\n-//! `Box<T>`, casually referred to as a 'box', provides the simplest form of\n+//! [`Box<T>`], casually referred to as a 'box', provides the simplest form of\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n //! drop their contents when they go out of scope.\n //!\n@@ -48,7 +48,7 @@\n //!\n //! It wouldn't work. This is because the size of a `List` depends on how many\n //! elements are in the list, and so we don't know how much memory to allocate\n-//! for a `Cons`. By introducing a `Box`, which has a defined size, we know how\n+//! for a `Cons`. By introducing a [`Box<T>`], which has a defined size, we know how\n //! big `Cons` needs to be.\n //!\n //! # Memory layout\n@@ -59,15 +59,19 @@\n //! [`Layout`] used with the allocator is correct for the type. More precisely,\n //! a `value: *mut T` that has been allocated with the [`Global`] allocator\n //! with `Layout::for_value(&*value)` may be converted into a box using\n-//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n-//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n-//! [`Global`] allocator with `Layout::for_value(&*value)`.\n+//! [`Box::<T>::from_raw(value)`]. Conversely, the memory backing a `value: *mut\n+//! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n+//! [`Global`] allocator with [`Layout::for_value(&*value)`].\n //!\n //!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n+//! [`Box<T>`]: struct.Box.html\n+//! [`Box::<T>::from_raw(value)`]: struct.Box.html#method.from_raw\n+//! [`Box::<T>::into_raw`]: struct.Box.html#method.into_raw\n //! [`Global`]: ../alloc/struct.Global.html\n //! [`Layout`]: ../alloc/struct.Layout.html\n+//! [`Layout::for_value(&*value)`]: ../alloc/struct.Layout.html#method.for_value\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}