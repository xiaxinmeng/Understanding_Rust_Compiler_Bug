{"sha": "be50908a5031fee45fcbba97bc0c96187324ea54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNTA5MDhhNTAzMWZlZTQ1ZmNiYmE5N2JjMGM5NjE4NzMyNGVhNTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-30T19:26:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-30T19:26:35Z"}, "message": "Emit macro diagnostics when lowering bodies", "tree": {"sha": "5999fc43c0d54aaa69dcbf22f693cb29addc31d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5999fc43c0d54aaa69dcbf22f693cb29addc31d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be50908a5031fee45fcbba97bc0c96187324ea54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be50908a5031fee45fcbba97bc0c96187324ea54", "html_url": "https://github.com/rust-lang/rust/commit/be50908a5031fee45fcbba97bc0c96187324ea54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be50908a5031fee45fcbba97bc0c96187324ea54/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455a0cfda2121596deb13ca3f40a83c98b32863c", "url": "https://api.github.com/repos/rust-lang/rust/commits/455a0cfda2121596deb13ca3f40a83c98b32863c", "html_url": "https://github.com/rust-lang/rust/commit/455a0cfda2121596deb13ca3f40a83c98b32863c"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "33eb5e78c449f24516b08f45675f3871df16a0ad", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=be50908a5031fee45fcbba97bc0c96187324ea54", "patch": "@@ -14,8 +14,8 @@ use cfg::CfgOptions;\n use drop_bomb::DropBomb;\n use either::Either;\n use hir_expand::{\n-    ast_id_map::AstIdMap, diagnostics::DiagnosticSink, hygiene::Hygiene, AstId, HirFileId, InFile,\n-    MacroDefId,\n+    ast_id_map::AstIdMap, diagnostics::DiagnosticSink, hygiene::Hygiene, AstId, ExpandResult,\n+    HirFileId, InFile, MacroDefId,\n };\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n@@ -102,11 +102,11 @@ impl Expander {\n         db: &dyn DefDatabase,\n         local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n-    ) -> Option<(Mark, T)> {\n+    ) -> ExpandResult<Option<(Mark, T)>> {\n         self.recursion_limit += 1;\n         if self.recursion_limit > EXPANSION_RECURSION_LIMIT {\n             mark::hit!(your_stack_belongs_to_me);\n-            return None;\n+            return ExpandResult::str_err(\"reached recursion limit during macro expansion\".into());\n         }\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n@@ -120,28 +120,55 @@ impl Expander {\n             self.resolve_path_as_macro(db, &path)\n         };\n \n-        if let Some(call_id) = macro_call.as_call_id(db, self.crate_def_map.krate, resolver) {\n-            let file_id = call_id.as_file();\n-            if let Some(node) = db.parse_or_expand(file_id) {\n-                if let Some(expr) = T::cast(node) {\n-                    log::debug!(\"macro expansion {:#?}\", expr.syntax());\n-\n-                    let mark = Mark {\n-                        file_id: self.current_file_id,\n-                        ast_id_map: mem::take(&mut self.ast_id_map),\n-                        bomb: DropBomb::new(\"expansion mark dropped\"),\n-                    };\n-                    self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n-                    self.current_file_id = file_id;\n-                    self.ast_id_map = db.ast_id_map(file_id);\n-                    return Some((mark, expr));\n+        let call_id = match macro_call.as_call_id(db, self.crate_def_map.krate, resolver) {\n+            Some(it) => it,\n+            None => {\n+                // FIXME: this can mean other things too, but `as_call_id` doesn't provide enough\n+                // info.\n+                return ExpandResult::only_err(mbe::ExpandError::Other(\n+                    \"failed to parse or resolve macro invocation\".into(),\n+                ));\n+            }\n+        };\n+\n+        let err = db.macro_expand_error(call_id);\n+\n+        let file_id = call_id.as_file();\n+\n+        let raw_node = match db.parse_or_expand(file_id) {\n+            Some(it) => it,\n+            None => {\n+                // Only `None` if the macro expansion produced no usable AST.\n+                if err.is_none() {\n+                    log::warn!(\"no error despite `parse_or_expand` failing\");\n                 }\n+\n+                return ExpandResult::only_err(err.unwrap_or_else(|| {\n+                    mbe::ExpandError::Other(\"failed to parse macro invocation\".into())\n+                }));\n             }\n-        }\n+        };\n+\n+        let node = match T::cast(raw_node) {\n+            Some(it) => it,\n+            None => {\n+                // This can happen without being an error, so only forward previous errors.\n+                return ExpandResult { value: None, err };\n+            }\n+        };\n+\n+        log::debug!(\"macro expansion {:#?}\", node.syntax());\n+\n+        let mark = Mark {\n+            file_id: self.current_file_id,\n+            ast_id_map: mem::take(&mut self.ast_id_map),\n+            bomb: DropBomb::new(\"expansion mark dropped\"),\n+        };\n+        self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n+        self.current_file_id = file_id;\n+        self.ast_id_map = db.ast_id_map(file_id);\n \n-        // FIXME: Instead of just dropping the error from expansion\n-        // report it\n-        None\n+        ExpandResult { value: Some((mark, node)), err }\n     }\n \n     pub(crate) fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {"}, {"sha": "144c61b175c643fdfec0e0dcd0fe3a96dacf5560", "filename": "crates/hir_def/src/body/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs?ref=be50908a5031fee45fcbba97bc0c96187324ea54", "patch": "@@ -2,11 +2,12 @@\n \n use hir_expand::diagnostics::DiagnosticSink;\n \n-use crate::diagnostics::InactiveCode;\n+use crate::diagnostics::{InactiveCode, MacroError};\n \n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum BodyDiagnostic {\n     InactiveCode(InactiveCode),\n+    MacroError(MacroError),\n }\n \n impl BodyDiagnostic {\n@@ -15,6 +16,9 @@ impl BodyDiagnostic {\n             BodyDiagnostic::InactiveCode(diag) => {\n                 sink.push(diag.clone());\n             }\n+            BodyDiagnostic::MacroError(diag) => {\n+                sink.push(diag.clone());\n+            }\n         }\n     }\n }"}, {"sha": "c0617c1a191bd3ed588e31cb644d41282419982f", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=be50908a5031fee45fcbba97bc0c96187324ea54", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n-    diagnostics::InactiveCode,\n+    diagnostics::{InactiveCode, MacroError},\n     expr::{\n         dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal,\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n@@ -561,7 +561,17 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 } else {\n                     let macro_call = self.expander.to_source(AstPtr::new(&e));\n-                    match self.expander.enter_expand(self.db, Some(&self.body.item_scope), e) {\n+                    let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n+\n+                    if let Some(err) = res.err {\n+                        self.source_map.diagnostics.push(BodyDiagnostic::MacroError(MacroError {\n+                            file: self.expander.current_file_id,\n+                            node: syntax_ptr.clone().into(),\n+                            message: err.to_string(),\n+                        }));\n+                    }\n+\n+                    match res.value {\n                         Some((mark, expansion)) => {\n                             self.source_map\n                                 .expansions"}, {"sha": "146045938323f52c6f89a04bc262e4358e896550", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be50908a5031fee45fcbba97bc0c96187324ea54/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=be50908a5031fee45fcbba97bc0c96187324ea54", "patch": "@@ -257,7 +257,7 @@ fn collect_items(\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n \n-                if let Some((mark, mac)) = expander.enter_expand(db, None, call) {\n+                if let Some((mark, mac)) = expander.enter_expand(db, None, call).value {\n                     let src: InFile<ast::MacroItems> = expander.to_source(mac);\n                     let item_tree = db.item_tree(src.file_id);\n                     let iter ="}]}