{"sha": "82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYmU5ZGM2MDZhZmE4YjM2OTVmNjhlYjA4MmZiM2YzYmZiMGM3YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T06:19:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T06:19:47Z"}, "message": "Auto merge of #5481 - sinkuu:no_as_ref, r=phansch\n\nquestion_mark: don't add `as_ref()` for a call expression\n\nIf a call returns a `!Copy` value, it does so regardless of whether `as_ref()` is added. For example, `foo.into_option().as_ref()?` can be simplified to `foo.into_option()?`.\n\n---\n\nchangelog: Improved `question_mark` lint suggestion so that it doesn't add redundant `as_ref()`", "tree": {"sha": "4044802da8eadbcd18341abc24a1922d4be45fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4044802da8eadbcd18341abc24a1922d4be45fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "html_url": "https://github.com/rust-lang/rust/commit/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae143fcd07258dfc381d26337020253fedd322f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae143fcd07258dfc381d26337020253fedd322f", "html_url": "https://github.com/rust-lang/rust/commit/8ae143fcd07258dfc381d26337020253fedd322f"}, {"sha": "f58bb5b234ec5f0ead463d5ce387771e72aaa865", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58bb5b234ec5f0ead463d5ce387771e72aaa865", "html_url": "https://github.com/rust-lang/rust/commit/f58bb5b234ec5f0ead463d5ce387771e72aaa865"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "ea654467b86687cfc522ff22471572cf9bef39fb", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "patch": "@@ -70,10 +70,12 @@ impl QuestionMark {\n                             replacement = Some(format!(\"Some({}?)\", receiver_str));\n                         }\n                     }\n-                } else if Self::moves_by_default(cx, subject) {\n-                        replacement = Some(format!(\"{}.as_ref()?;\", receiver_str));\n+                } else if Self::moves_by_default(cx, subject)\n+                    && !matches!(subject.kind, ExprKind::Call(..) | ExprKind::MethodCall(..))\n+                {\n+                    replacement = Some(format!(\"{}.as_ref()?;\", receiver_str));\n                 } else {\n-                        replacement = Some(format!(\"{}?;\", receiver_str));\n+                    replacement = Some(format!(\"{}?;\", receiver_str));\n                 }\n \n                 if let Some(replacement_str) = replacement {"}, {"sha": "11dff94a288657d0c662f383616e2e9b5175509b", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "patch": "@@ -93,6 +93,16 @@ impl MoveStruct {\n     }\n }\n \n+fn func() -> Option<i32> {\n+    fn f() -> Option<String> {\n+        Some(String::new())\n+    }\n+\n+    f()?;\n+\n+    Some(0)\n+}\n+\n fn main() {\n     some_func(Some(42));\n     some_func(None);\n@@ -110,4 +120,6 @@ fn main() {\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);\n+\n+    func();\n }"}, {"sha": "1d0ee82b4f7787b5e56445c334b2115066804d67", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "patch": "@@ -121,6 +121,18 @@ impl MoveStruct {\n     }\n }\n \n+fn func() -> Option<i32> {\n+    fn f() -> Option<String> {\n+        Some(String::new())\n+    }\n+\n+    if f().is_none() {\n+        return None;\n+    }\n+\n+    Some(0)\n+}\n+\n fn main() {\n     some_func(Some(42));\n     some_func(None);\n@@ -138,4 +150,6 @@ fn main() {\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);\n+\n+    func();\n }"}, {"sha": "502615fb175a1857b088db3468bccc16d3917992", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=82be9dc606afa8b3695f68eb082fb3f3bfb0c7b4", "patch": "@@ -92,5 +92,13 @@ LL | |             return None;\n LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n-error: aborting due to 10 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:129:5\n+   |\n+LL | /     if f().is_none() {\n+LL | |         return None;\n+LL | |     }\n+   | |_____^ help: replace it with: `f()?;`\n+\n+error: aborting due to 11 previous errors\n "}]}