{"sha": "1282fc80740b5c462a094c45f65cb1ce0c1d7756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODJmYzgwNzQwYjVjNDYyYTA5NGM0NWY2NWNiMWNlMGMxZDc3NTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T23:06:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T23:07:48Z"}, "message": "librustc: Hook borrow check loan checking up to the moves-based-on-type infrastructure. rs=helps-unbreak-the-build", "tree": {"sha": "db00ba38f707047b7e16cce8040aa72a0e7c7a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db00ba38f707047b7e16cce8040aa72a0e7c7a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1282fc80740b5c462a094c45f65cb1ce0c1d7756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1282fc80740b5c462a094c45f65cb1ce0c1d7756", "html_url": "https://github.com/rust-lang/rust/commit/1282fc80740b5c462a094c45f65cb1ce0c1d7756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1282fc80740b5c462a094c45f65cb1ce0c1d7756/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05ba09d904b366f467479cb022c76f287befa43", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05ba09d904b366f467479cb022c76f287befa43", "html_url": "https://github.com/rust-lang/rust/commit/a05ba09d904b366f467479cb022c76f287befa43"}], "stats": {"total": 230, "additions": 143, "deletions": 87}, "files": [{"sha": "0fd30501a4c5e411777916b5727706e07506aea2", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -502,7 +502,7 @@ impl PosixPath : GenericPath {\n         let mut v = copy self.components;\n         let mut ss = str::split_nonempty(s, |c| windows::is_sep(c as u8));\n         unsafe { v.push_all_move(move ss); }\n-        PosixPath { components: move v, ..self }\n+        PosixPath { components: move v, ..copy self }\n     }\n \n     pure fn pop() -> PosixPath {\n@@ -707,7 +707,7 @@ impl WindowsPath : GenericPath {\n         let mut v = copy self.components;\n         let mut ss = str::split_nonempty(s, |c| windows::is_sep(c as u8));\n         unsafe { v.push_all_move(move ss); }\n-        return WindowsPath { components: move v, ..self }\n+        return WindowsPath { components: move v, ..copy self }\n     }\n \n     pure fn pop() -> WindowsPath {"}, {"sha": "7495bf7be4caf262d3c3b5de5bed01ca37a70c28", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -215,25 +215,25 @@ pub type TaskOpts = {\n // the run function move them in.\n \n // FIXME (#3724): Replace the 'consumed' bit with move mode on self\n-pub enum TaskBuilder = {\n+pub struct TaskBuilder {\n     opts: TaskOpts,\n     gen_body: fn@(v: fn~()) -> fn~(),\n     can_not_copy: Option<util::NonCopyable>,\n     mut consumed: bool,\n-};\n+}\n \n /**\n  * Generate the base configuration for spawning a task, off of which more\n  * configuration methods can be chained.\n  * For example, task().unlinked().spawn is equivalent to spawn_unlinked.\n  */\n pub fn task() -> TaskBuilder {\n-    TaskBuilder({\n+    TaskBuilder {\n         opts: default_task_opts(),\n         gen_body: |body| move body, // Identity function\n         can_not_copy: None,\n         mut consumed: false,\n-    })\n+    }\n }\n \n #[doc(hidden)] // FIXME #3538\n@@ -244,7 +244,7 @@ priv impl TaskBuilder {\n         }\n         self.consumed = true;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n@@ -254,7 +254,7 @@ priv impl TaskBuilder {\n             gen_body: self.gen_body,\n             can_not_copy: None,\n             mut consumed: false\n-        })\n+        }\n     }\n }\n \n@@ -265,16 +265,16 @@ impl TaskBuilder {\n      */\n     fn unlinked() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: false,\n                 supervised: self.opts.supervised,\n                 mut notify_chan: move notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n     /**\n      * Unidirectionally link the child task's failure with the parent's. The\n@@ -283,33 +283,33 @@ impl TaskBuilder {\n      */\n     fn supervised() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: false,\n                 supervised: true,\n                 mut notify_chan: move notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n     /**\n      * Link the child task's and parent task's failures. If either fails, the\n      * other will be killed.\n      */\n     fn linked() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: true,\n                 supervised: false,\n                 mut notify_chan: move notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n \n     /**\n@@ -345,30 +345,30 @@ impl TaskBuilder {\n         blk(move notify_pipe_po);\n \n         // Reconfigure self to use a notify channel.\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n                 mut notify_chan: Some(move notify_pipe_ch),\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n     /// Configure a custom scheduler mode for the task.\n     fn sched_mode(mode: SchedMode) -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n                 mut notify_chan: move notify_chan,\n                 sched: Some({ mode: mode, foreign_stack_size: None})\n             },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n \n     /**\n@@ -386,7 +386,7 @@ impl TaskBuilder {\n     fn add_wrapper(wrapper: fn@(v: fn~()) -> fn~()) -> TaskBuilder {\n         let prev_gen_body = self.gen_body;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n-        TaskBuilder({\n+        TaskBuilder {\n             opts: {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n@@ -399,8 +399,8 @@ impl TaskBuilder {\n             gen_body: |move prev_gen_body,\n                        body| { wrapper(prev_gen_body(move body)) },\n             can_not_copy: None,\n-            .. *self.consume()\n-        })\n+            .. self.consume()\n+        }\n     }\n \n     /**\n@@ -782,11 +782,11 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     };\n \n     let b0 = task();\n-    let b1 = TaskBuilder({\n+    let b1 = TaskBuilder {\n         opts: move opts,\n         can_not_copy: None,\n         .. *b0\n-    });\n+    };\n     do b1.spawn { fail; }\n     comm::recv(po); // We should get punted awake\n }\n@@ -802,11 +802,11 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     };\n \n     let b0 = task();\n-    let b1 = TaskBuilder({\n+    let b1 = TaskBuilder {\n         opts: move opts,\n         can_not_copy: None,\n         .. *b0\n-    });\n+    };\n     do b1.spawn { loop { task::yield(); } }\n     fail; // *both* mechanisms would be wrong if this didn't kill the child...\n }"}, {"sha": "8f3a3d1440b85e6266d5e82d40467725be9f58e0", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -17,6 +17,8 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves to dnot affect things loaned out in any way\n \n+use middle::ty::{CopyValue, MoveValue, ReadValue};\n+\n use dvec::DVec;\n \n export check_loans;\n@@ -624,6 +626,12 @@ fn check_loans_in_expr(expr: @ast::expr,\n \n     self.check_for_conflicting_loans(expr.id);\n \n+    // If this is a move, check it.\n+    match self.tcx().value_modes.find(expr.id) {\n+        Some(MoveValue) => self.check_move_out(expr),\n+        Some(ReadValue) | Some(CopyValue) | None => {}\n+    }\n+\n     match expr.node {\n       ast::expr_path(*) if self.bccx.last_use_map.contains_key(expr.id) => {\n         self.check_last_use(expr);"}, {"sha": "c763c9f748910d1065fdfa4894549f3ca4f15003", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -9,7 +9,7 @@ use syntax::ast::{expr_addr_of, expr_assign_op, expr_binary, expr_call};\n use syntax::ast::{expr_copy, expr_field, expr_index, expr_method_call};\n use syntax::ast::{expr_path, expr_swap, expr_unary, node_id, sty_uniq};\n use syntax::ast::{sty_value};\n-use syntax::ast::{box, uniq, deref, not, neg, expr_paren};\n+use syntax::ast::{box, uniq, deref, not, neg, expr_match, expr_paren};\n use syntax::visit;\n use syntax::visit::vt;\n \n@@ -158,6 +158,21 @@ fn compute_modes_for_expr(expr: @expr,\n             compute_modes_for_expr(arg, cx, v);\n             record_mode_for_expr(expr, cx);\n         }\n+        expr_match(head, ref arms) => {\n+            let by_move_bindings_present =\n+                pat_util::arms_have_by_move_bindings(cx.tcx.def_map, *arms);\n+            if by_move_bindings_present {\n+                // Propagate the current mode flag downward.\n+                visit::visit_expr(expr, cx, v);\n+            } else {\n+                // We aren't moving into any pattern, so this is just a read.\n+                let head_cx = VisitContext { mode: ReadValue, ..cx };\n+                compute_modes_for_expr(head, head_cx, v);\n+                for arms.each |arm| {\n+                    (v.visit_arm)(*arm, cx, v);\n+                }\n+            }\n+        }\n         _ => {\n             // XXX: Spell out every expression above so when we add them we\n             // don't forget to update this file."}, {"sha": "467897db9d9eb5a34d06973b12e2354db9e2c97a", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -19,6 +19,7 @@ use std::map::HashMap;\n export pat_binding_ids, pat_bindings, pat_id_map, PatIdMap;\n export pat_is_variant_or_struct, pat_is_binding, pat_is_binding_or_wild;\n export pat_is_const;\n+export arms_have_by_move_bindings;\n \n type PatIdMap = std::map::HashMap<ident, node_id>;\n \n@@ -91,3 +92,22 @@ fn pat_binding_ids(dm: resolve::DefMap, pat: @pat) -> ~[node_id] {\n     pat_bindings(dm, pat, |_bm, b_id, _sp, _pt| found.push(b_id) );\n     return found;\n }\n+\n+fn arms_have_by_move_bindings(dm: resolve::DefMap, +arms: &[arm]) -> bool {\n+    for arms.each |arm| {\n+        for arm.pats.each |pat| {\n+            let mut found = false;\n+            do pat_bindings(dm, *pat) |binding_mode, _node_id, _span, _path| {\n+                match binding_mode {\n+                    bind_by_move => found = true,\n+                    bind_by_implicit_ref |\n+                    bind_by_ref(*) |\n+                    bind_by_value => {}\n+                }\n+            }\n+            if found { return true; }\n+        }\n+    }\n+    return false;\n+}\n+"}, {"sha": "aaffe3bfeaa1543677592f7d531d8593f1c1aefa", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -18,6 +18,7 @@ of the natural-language documentation for a crate.\n \n use doc::ItemUtils;\n use extract::to_str;\n+use fold::Fold;\n use syntax::ast;\n use syntax::ast_map;\n use std::map::HashMap;\n@@ -33,14 +34,14 @@ fn run(\n     srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_crate: fold_crate,\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        .. *fold::default_any_fold(srv)\n-    });\n+        .. fold::default_any_fold(srv)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "fa21366d917cc51b98a277f42a325c740c21a318", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -16,6 +16,7 @@ is interpreted as the brief description.\n */\n \n use doc::ItemUtils;\n+use fold::Fold;\n \n pub fn mk_pass() -> Pass {\n     {\n@@ -28,12 +29,12 @@ fn run(\n     _srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        .. *fold::default_any_fold(())\n-    });\n+        .. fold::default_any_fold(())\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "da276922fe7793d3ffd0c4d12548dcd03bf4db51", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -8,11 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub enum Fold<T> = Fold_<T>;\n+pub struct Fold<T> {\n+    ctxt: T,\n+    fold_doc: FoldDoc<T>,\n+    fold_crate: FoldCrate<T>,\n+    fold_item: FoldItem<T>,\n+    fold_mod: FoldMod<T>,\n+    fold_nmod: FoldNmod<T>,\n+    fold_fn: FoldFn<T>,\n+    fold_const: FoldConst<T>,\n+    fold_enum: FoldEnum<T>,\n+    fold_trait: FoldTrait<T>,\n+    fold_impl: FoldImpl<T>,\n+    fold_type: FoldType<T>,\n+    fold_struct: FoldStruct<T>\n+}\n \n impl<T: Clone> Fold<T>: Clone {\n     fn clone(&self) -> Fold<T> {\n-        Fold({\n+        Fold {\n             ctxt: self.ctxt.clone(),\n             fold_doc: copy self.fold_doc,\n             fold_crate: copy self.fold_crate,\n@@ -26,7 +40,7 @@ impl<T: Clone> Fold<T>: Clone {\n             fold_impl: copy self.fold_impl,\n             fold_type: copy self.fold_type,\n             fold_struct: copy self.fold_struct\n-        })\n+        }\n     }\n }\n \n@@ -44,23 +58,6 @@ type FoldType<T> = fn~(fold: &Fold<T>, +doc: doc::TyDoc) -> doc::TyDoc;\n type FoldStruct<T> = fn~(fold: &Fold<T>,\n                          +doc: doc::StructDoc) -> doc::StructDoc;\n \n-type Fold_<T> = {\n-    ctxt: T,\n-    fold_doc: FoldDoc<T>,\n-    fold_crate: FoldCrate<T>,\n-    fold_item: FoldItem<T>,\n-    fold_mod: FoldMod<T>,\n-    fold_nmod: FoldNmod<T>,\n-    fold_fn: FoldFn<T>,\n-    fold_const: FoldConst<T>,\n-    fold_enum: FoldEnum<T>,\n-    fold_trait: FoldTrait<T>,\n-    fold_impl: FoldImpl<T>,\n-    fold_type: FoldType<T>,\n-    fold_struct: FoldStruct<T>\n-};\n-\n-\n // This exists because fn types don't infer correctly as record\n // initializers, but they do as function arguments\n fn mk_fold<T:Clone>(\n@@ -78,7 +75,7 @@ fn mk_fold<T:Clone>(\n     +fold_type: FoldType<T>,\n     +fold_struct: FoldStruct<T>\n ) -> Fold<T> {\n-    Fold({\n+    Fold {\n         ctxt: move ctxt,\n         fold_doc: move fold_doc,\n         fold_crate: move fold_crate,\n@@ -92,7 +89,7 @@ fn mk_fold<T:Clone>(\n         fold_impl: move fold_impl,\n         fold_type: move fold_type,\n         fold_struct: move fold_struct\n-    })\n+    }\n }\n \n pub fn default_any_fold<T:Send Clone>(+ctxt: T) -> Fold<T> {"}, {"sha": "b1cc778bd1bf3dd832a559d7a09d52c1db315224", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Build indexes as appropriate for the markdown pass\n \n use doc::ItemUtils;\n+use fold::Fold;\n \n pub fn mk_pass(+config: config::Config) -> Pass {\n     {\n@@ -26,11 +27,11 @@ fn run(\n     +doc: doc::Doc,\n     +config: config::Config\n ) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. *fold::default_any_fold(config)\n-    });\n+        .. fold::default_any_fold(config)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "5125f7c1da60a9349968fd17762c19e27266ac65", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -16,6 +16,7 @@ individual modules, pages for the crate, indexes, etc.\n */\n \n use doc::{ItemUtils, PageUtils};\n+use fold::Fold;\n use syntax::ast;\n use util::NominalOp;\n \n@@ -68,12 +69,12 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n }\n \n fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. *fold::default_any_fold(NominalOp { op: page_chan })\n-    });\n+        .. fold::default_any_fold(NominalOp { op: page_chan })\n+    };\n     (fold.fold_doc)(&fold, doc);\n \n     comm::send(page_chan, None);"}, {"sha": "b17f4d67a5c328d01943a896896bfe800dad467f", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Records the full path to items\n \n use doc::ItemUtils;\n+use fold::Fold;\n use syntax::ast;\n \n pub fn mk_pass() -> Pass {\n@@ -35,12 +36,12 @@ fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n         srv: srv,\n         mut path: ~[]\n     };\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_item: fold_item,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. *fold::default_any_fold(move ctxt)\n-    });\n+        .. fold::default_any_fold(move ctxt)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "bfe6f8387041627c04b8d26e03b005ebcd5224c8", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Prunes things with the #[doc(hidden)] attribute\n \n use doc::ItemUtils;\n+use fold::Fold;\n use std::map::HashMap;\n \n pub fn mk_pass() -> Pass {\n@@ -21,10 +22,10 @@ pub fn mk_pass() -> Pass {\n }\n \n fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_mod: fold_mod,\n-        .. *fold::default_any_fold(srv)\n-    });\n+        .. fold::default_any_fold(srv)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "e3dc1553a6392fc37f065774faa5a95c2446ddbd", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -12,6 +12,8 @@\n \n #[legacy_exports];\n \n+use fold::Fold;\n+\n export mk_pass;\n \n fn mk_pass() -> Pass {\n@@ -22,10 +24,10 @@ fn mk_pass() -> Pass {\n }\n \n fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_mod: fold_mod,\n-        .. *fold::default_any_fold(srv)\n-    });\n+        .. fold::default_any_fold(srv)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "2c73d4c478b1208486a04ea528c87c230f804c9e", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Breaks rustdocs into sections according to their headers\n \n use doc::ItemUtils;\n+use fold::Fold;\n \n pub fn mk_pass() -> Pass {\n     {\n@@ -20,12 +21,12 @@ pub fn mk_pass() -> Pass {\n }\n \n fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_item: fold_item,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        .. *fold::default_any_fold(())\n-    });\n+        .. fold::default_any_fold(())\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "a4926e765a7736342d2a3bef7ee691239770d3a4", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! A general sorting pass\n \n use doc::ItemUtils;\n+use fold::Fold;\n use std::sort;\n use util::NominalOp;\n \n@@ -33,10 +34,10 @@ fn run(\n     +doc: doc::Doc,\n     +lteq: ItemLtEq\n ) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_mod: fold_mod,\n-        .. *fold::default_any_fold(move lteq)\n-    });\n+        .. fold::default_any_fold(move lteq)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "9a48822b45360d93bfaf8fa5613e408739e2c7f4", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Generic pass for performing an operation on all descriptions\n \n use doc::ItemUtils;\n+use fold::Fold;\n use util::NominalOp;\n \n pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n@@ -33,13 +34,13 @@ fn run(\n     let op = NominalOp {\n         op: move op\n     };\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        .. *fold::default_any_fold(move op)\n-    });\n+        .. fold::default_any_fold(move op)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "7d5c5b15e55fa6db03a87369488ee3247d39f20a", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -11,6 +11,7 @@\n //! Pulls type information out of the AST and attaches it to the document\n \n use doc::ItemUtils;\n+use fold::Fold;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;\n@@ -28,16 +29,16 @@ fn run(\n     srv: astsrv::Srv,\n     +doc: doc::Doc\n ) -> doc::Doc {\n-    let fold = fold::Fold({\n+    let fold = Fold {\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n         fold_type: fold_type,\n         fold_struct: fold_struct,\n-        .. *fold::default_any_fold(srv)\n-    });\n+        .. fold::default_any_fold(srv)\n+    };\n     (fold.fold_doc)(&fold, doc)\n }\n "}, {"sha": "3e9fe80526000b2e8cdec5684f8f1b38496c4031", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282fc80740b5c462a094c45f65cb1ce0c1d7756/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=1282fc80740b5c462a094c45f65cb1ce0c1d7756", "patch": "@@ -461,7 +461,11 @@ impl printer {\n     fn print(x: token, L: int) {\n         debug!(\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n                self.space);\n-        log(debug, buf_str(self.token, self.size, self.left, self.right, 6u));\n+        log(debug, buf_str(copy self.token,\n+                           copy self.size,\n+                           self.left,\n+                           self.right,\n+                           6u));\n         match x {\n           BEGIN(b) => {\n             if L > self.space {"}]}