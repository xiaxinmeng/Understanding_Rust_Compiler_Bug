{"sha": "941b2e32ade695f7987c229eb1344c35119d6354", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MWIyZTMyYWRlNjk1Zjc5ODdjMjI5ZWIxMzQ0YzM1MTE5ZDYzNTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-05T15:39:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-05T15:39:50Z"}, "message": "slight rewording of labels", "tree": {"sha": "0fab8351b0fa1e7042ce58abaea9cbae6008d42c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fab8351b0fa1e7042ce58abaea9cbae6008d42c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941b2e32ade695f7987c229eb1344c35119d6354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941b2e32ade695f7987c229eb1344c35119d6354", "html_url": "https://github.com/rust-lang/rust/commit/941b2e32ade695f7987c229eb1344c35119d6354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941b2e32ade695f7987c229eb1344c35119d6354/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a74be09b3c3d5ad015be31c51208260aa85007", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a74be09b3c3d5ad015be31c51208260aa85007", "html_url": "https://github.com/rust-lang/rust/commit/d7a74be09b3c3d5ad015be31c51208260aa85007"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "449b395c004019b2aaa76d64d10ad0de92fd2fe4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/941b2e32ade695f7987c229eb1344c35119d6354/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941b2e32ade695f7987c229eb1344c35119d6354/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=941b2e32ade695f7987c229eb1344c35119d6354", "patch": "@@ -197,15 +197,26 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(span, \"use of type variable from outer function\");\n \n             let cm = resolver.session.source_map();\n-            let mut is_self = false;\n             match outer_def {\n-                Def::SelfTy(_, maybe_impl_defid) => {\n-                    if let Some(impl_span) = maybe_impl_defid.map_or(None,\n-                            |def_id| resolver.definitions.opt_span(def_id)) {\n-                        err.span_label(reduce_impl_span_to_impl_keyword(cm, impl_span),\n-                                    \"`Self` type implicitly declared here, on the `impl`\");\n+                Def::SelfTy(maybe_trait_defid, maybe_impl_defid) => {\n+                    if let Some(impl_span) = maybe_impl_defid.and_then(|def_id| {\n+                        resolver.definitions.opt_span(def_id)\n+                    }) {\n+                        err.span_label(\n+                            reduce_impl_span_to_impl_keyword(cm, impl_span),\n+                            \"`Self` type implicitly declared here, on the `impl`\",\n+                        );\n+                    }\n+                    match (maybe_trait_defid, maybe_impl_defid) {\n+                        (Some(_), None) => {\n+                            err.span_label(span, \"can't use `Self` here\");\n+                        }\n+                        (_, Some(_)) => {\n+                            err.span_label(span, \"use a type here instead\");\n+                        }\n+                        (None, None) => bug!(\"`impl` without trait nor type?\"),\n                     }\n-                    is_self = true;\n+                    return err;\n                 },\n                 Def::TyParam(typaram_defid) => {\n                     if let Some(typaram_span) = resolver.definitions.opt_span(typaram_defid) {\n@@ -221,12 +232,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             // Try to retrieve the span of the function signature and generate a new message with\n             // a local type parameter\n             let sugg_msg = \"try using a local type parameter instead\";\n-            if is_self {\n-                // Suggest using the actual type\n-                err.span_label(span, \"use a materialized type here instead\");\n-            } else if let Some(\n-                (sugg_span, new_snippet),\n-            ) = cm.generate_local_type_param_snippet(span) {\n+            if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion_with_applicability(\n                     sugg_span,"}, {"sha": "66cc8795fba208fd598ec40c817b568ffc3b36c4", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=941b2e32ade695f7987c229eb1344c35119d6354", "patch": "@@ -30,7 +30,7 @@ LL |         fn helper(sel: &Self) -> u8 { //~ ERROR E0401\n    |                         ^^^^\n    |                         |\n    |                         use of type variable from outer function\n-   |                         use a materialized type here instead\n+   |                         use a type here instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0c369c6ab9717682cfeb6abd35670687ce13f33e", "filename": "src/test/ui/issues/issue-12796.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12796.stderr?ref=941b2e32ade695f7987c229eb1344c35119d6354", "patch": "@@ -5,7 +5,7 @@ LL |         fn inner(_: &Self) {\n    |                      ^^^^\n    |                      |\n    |                      use of type variable from outer function\n-   |                      use a materialized type here instead\n+   |                      can't use `Self` here\n \n error: aborting due to previous error\n "}, {"sha": "380cb7a2aa27057797808d444c67e2eb61461563", "filename": "src/test/ui/use-self-in-inner-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.rs?ref=941b2e32ade695f7987c229eb1344c35119d6354", "patch": "@@ -16,7 +16,7 @@ impl A {\n         fn peach(this: &Self) {\n         //~^ ERROR can't use type parameters from outer function\n         //~| NOTE use of type variable from outer function\n-        //~| NOTE use a materialized type here instead\n+        //~| NOTE use a type here instead\n         }\n     }\n }"}, {"sha": "26082e5e01b226f7d77503e7057c76988f2e1a37", "filename": "src/test/ui/use-self-in-inner-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/941b2e32ade695f7987c229eb1344c35119d6354/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-self-in-inner-fn.stderr?ref=941b2e32ade695f7987c229eb1344c35119d6354", "patch": "@@ -8,7 +8,7 @@ LL |         fn peach(this: &Self) {\n    |                         ^^^^\n    |                         |\n    |                         use of type variable from outer function\n-   |                         use a materialized type here instead\n+   |                         use a type here instead\n \n error: aborting due to previous error\n "}]}