{"sha": "1373f988fa662aa43a22a9b13300aabe9ce2213b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzNmOTg4ZmE2NjJhYTQzYTIyYTliMTMzMDBhYWJlOWNlMjIxM2I=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-13T06:29:20Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-29T20:37:41Z"}, "message": "Test cases for handling mutable references", "tree": {"sha": "e24e77711245c37122500e2bd70597ae83490dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24e77711245c37122500e2bd70597ae83490dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1373f988fa662aa43a22a9b13300aabe9ce2213b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1373f988fa662aa43a22a9b13300aabe9ce2213b", "html_url": "https://github.com/rust-lang/rust/commit/1373f988fa662aa43a22a9b13300aabe9ce2213b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1373f988fa662aa43a22a9b13300aabe9ce2213b/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34880825828260fad0a74621e4a13fe7da9a4a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/34880825828260fad0a74621e4a13fe7da9a4a9d", "html_url": "https://github.com/rust-lang/rust/commit/34880825828260fad0a74621e4a13fe7da9a4a9d"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "dd018a0defa1b73a00341cb191682c2b2b050bd7", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,21 @@\n+// Test that if we deref an immutable borrow to access a Place,\n+// then we can't mutate the final place.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+fn main() {\n+    let mut x = (format!(\"\"), format!(\"X2\"));\n+    let mut y = (&x, \"Y\");\n+    let z = (&mut y, \"Z\");\n+\n+    // `x.0` is mutable but we access `x` via `z.0.0`, which is an immutable reference and\n+    // therefore can't be mutated.\n+    let mut c = || {\n+    //~^ ERROR: cannot borrow `z.0.0.0` as mutable, as it is behind a `&` reference\n+        z.0.0.0 = format!(\"X1\");\n+        //~^ ERROR: cannot assign to `z`, as it is not declared as mutable\n+    };\n+\n+    c();\n+}"}, {"sha": "948e2b731daf04d734f69bfad2594f7315fb412f", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,31 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/cant-mutate-imm-borrow.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0594]: cannot assign to `z`, as it is not declared as mutable\n+  --> $DIR/cant-mutate-imm-borrow.rs:16:9\n+   |\n+LL |     let z = (&mut y, \"Z\");\n+   |         - help: consider changing this to be mutable: `mut z`\n+...\n+LL |         z.0.0.0 = format!(\"X1\");\n+   |         ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `z.0.0.0` as mutable, as it is behind a `&` reference\n+  --> $DIR/cant-mutate-imm-borrow.rs:14:17\n+   |\n+LL |     let mut c = || {\n+   |                 ^^ cannot borrow as mutable\n+LL |\n+LL |         z.0.0.0 = format!(\"X1\");\n+   |         - mutable borrow occurs due to use of `z.0.0.0` in closure\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "732c47298242a85b6f66f0f6cfd4c0d8d7e9a45d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,40 @@\n+// Test that we can't mutate a place if we need to deref an imm-borrow\n+// to reach it.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+fn imm_mut_ref() {\n+    let mut x = String::new();\n+    let y = String::new();\n+    let mref_x = &mut x;\n+    let ref_mref_x = &mref_x;\n+\n+    let c = || {\n+    //~^ ERROR: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n+        **ref_mref_x = y;\n+        //~^ERROR: cannot assign to `ref_mref_x`, as it is not declared as mutable\n+    };\n+\n+    c();\n+}\n+\n+fn mut_imm_ref() {\n+    let x = String::new();\n+    let y = String::new();\n+    let mut ref_x = &x;\n+    let mref_ref_x = &mut ref_x;\n+\n+    let c = || {\n+    //~^ ERROR: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n+        **mref_ref_x = y;\n+        //~^ERROR: cannot assign to `mref_ref_x`, as it is not declared as mutable\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    imm_mut_ref();\n+    mut_imm_ref();\n+}"}, {"sha": "42b3c5090ac66652c87336c5070f837c74ace844", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,52 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/mut_ref.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0594]: cannot assign to `ref_mref_x`, as it is not declared as mutable\n+  --> $DIR/mut_ref.rs:15:9\n+   |\n+LL |     let ref_mref_x = &mref_x;\n+   |         ---------- help: consider changing this to be mutable: `mut ref_mref_x`\n+...\n+LL |         **ref_mref_x = y;\n+   |         ^^^^^^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n+  --> $DIR/mut_ref.rs:13:13\n+   |\n+LL |     let ref_mref_x = &mref_x;\n+   |                      ------- help: consider changing this to be a mutable reference: `&mut mref_x`\n+LL | \n+LL |     let c = || {\n+   |             ^^ `ref_mref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+LL |\n+LL |         **ref_mref_x = y;\n+   |           ---------- mutable borrow occurs due to use of `**ref_mref_x` in closure\n+\n+error[E0594]: cannot assign to `mref_ref_x`, as it is not declared as mutable\n+  --> $DIR/mut_ref.rs:30:9\n+   |\n+LL |     let mref_ref_x = &mut ref_x;\n+   |         ---------- help: consider changing this to be mutable: `mut mref_ref_x`\n+...\n+LL |         **mref_ref_x = y;\n+   |         ^^^^^^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n+  --> $DIR/mut_ref.rs:28:13\n+   |\n+LL |     let c = || {\n+   |             ^^ cannot borrow as mutable\n+LL |\n+LL |         **mref_ref_x = y;\n+   |           ---------- mutable borrow occurs due to use of `**mref_ref_x` in closure\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "315622443c3cc83da55341277c9cf7a3e66ff6cc", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.rs?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,56 @@\n+// run-pass\n+\n+// Test that we can mutate a place through a mut-borrow\n+// that is captured by the closure\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+// Check that we can mutate when one deref is required\n+fn mut_ref_1() {\n+    let mut x = String::new();\n+    let rx = &mut x;\n+\n+    let mut c = || {\n+        *rx = String::new();\n+    };\n+\n+    c();\n+}\n+\n+// Similar example as mut_ref_1, we don't deref the imm-borrow here,\n+// and so we are allowed to mutate.\n+fn mut_ref_2() {\n+    let x = String::new();\n+    let y = String::new();\n+    let mut ref_x = &x;\n+    let m_ref_x = &mut ref_x;\n+\n+    let mut c = || {\n+        *m_ref_x = &y;\n+    };\n+\n+    c();\n+}\n+\n+// Check that we can mutate when multiple derefs of mut-borrows are required to reach\n+// the target place.\n+// It works because all derefs are mutable, if either of them was an immutable\n+// borrow, then we would not be able to deref.\n+fn mut_mut_ref() {\n+    let mut x = String::new();\n+    let mut mref_x = &mut x;\n+    let m_mref_x = &mut mref_x;\n+\n+    let mut c = || {\n+        **m_mref_x = String::new();\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    mut_ref_1();\n+    mut_ref_2();\n+    mut_mut_ref();\n+}"}, {"sha": "4b37a0b405f5e0a485a8b9c7cfbdaa756e07ce5f", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref.stderr?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/mut_ref.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "82e723cc8256281becbe7b01a8ac6f37791ec6b9", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+// Test that we can mutate a place through a mut-borrow\n+// that is captured by the closure\n+//\n+// More specifically we test that the if the mutable reference isn't root variable of a capture\n+// but rather accessed while acessing the precise capture.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+fn main() {\n+    let mut t = (10, 10);\n+\n+    let t1 = (&mut t, 10);\n+\n+    let mut c = || {\n+        // Mutable because (*t.0) is mutable\n+        t1.0.0 += 10;\n+    };\n+\n+    c();\n+}"}, {"sha": "418ab29098b2a59b89bcf8727446b40cdcb0059b", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1373f988fa662aa43a22a9b13300aabe9ce2213b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.stderr?ref=1373f988fa662aa43a22a9b13300aabe9ce2213b", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/mut_ref_struct_mem.rs:9:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}]}