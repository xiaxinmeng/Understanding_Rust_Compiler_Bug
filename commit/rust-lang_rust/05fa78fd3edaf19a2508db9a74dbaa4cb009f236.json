{"sha": "05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZmE3OGZkM2VkYWYxOWEyNTA4ZGI5YTc0ZGJhYTRjYjAwOWYyMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-31T15:15:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-31T15:15:41Z"}, "message": "Auto merge of #7520 - Jarcho:while_let_7510, r=Manishearth\n\nFix `while_let_on_iterator` - #7510\n\nfixes: #7510\nchangelog: Suggest re-borrowing mutable references in `while_let_on_iterator`", "tree": {"sha": "4dc5e836ba83d56939fddd1abb6a6123b34d389f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc5e836ba83d56939fddd1abb6a6123b34d389f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "html_url": "https://github.com/rust-lang/rust/commit/05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a5889ffad5f819b80f07b40988ba2576f79296", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5889ffad5f819b80f07b40988ba2576f79296", "html_url": "https://github.com/rust-lang/rust/commit/f6a5889ffad5f819b80f07b40988ba2576f79296"}, {"sha": "205aa88921ce63898f7fd3db6e9070c70987be2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/205aa88921ce63898f7fd3db6e9070c70987be2e", "html_url": "https://github.com/rust-lang/rust/commit/205aa88921ce63898f7fd3db6e9070c70987be2e"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "ef822e0cbe540225f9ad4317ecb19110973a70a0", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, MatchSource, Node, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, MatchSource, Mutability, Node, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::{symbol::sym, Span, Symbol};\n \n@@ -48,7 +48,12 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     // borrowed mutably. TODO: If the struct can be partially moved from and the struct isn't used\n     // afterwards a mutable borrow of a field isn't necessary.\n     let ref_mut = if !iter_expr.fields.is_empty() || needs_mutable_borrow(cx, &iter_expr, loop_expr) {\n-        \"&mut \"\n+        if cx.typeck_results().node_type(iter_expr.hir_id).ref_mutability() == Some(Mutability::Mut) {\n+            // Reborrow for mutable references. It may not be possible to get a mutable reference here.\n+            \"&mut *\"\n+        } else {\n+            \"&mut \"\n+        }\n     } else {\n         \"\"\n     };\n@@ -69,6 +74,8 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n struct IterExpr {\n     /// The span of the whole expression, not just the path and fields stored here.\n     span: Span,\n+    /// The HIR id of the whole expression, not just the path and fields stored here.\n+    hir_id: HirId,\n     /// The fields used, in order of child to parent.\n     fields: Vec<Symbol>,\n     /// The path being used.\n@@ -78,12 +85,14 @@ struct IterExpr {\n /// the expression might have side effects.\n fn try_parse_iter_expr(cx: &LateContext<'_>, mut e: &Expr<'_>) -> Option<IterExpr> {\n     let span = e.span;\n+    let hir_id = e.hir_id;\n     let mut fields = Vec::new();\n     loop {\n         match e.kind {\n             ExprKind::Path(ref path) => {\n                 break Some(IterExpr {\n                     span,\n+                    hir_id,\n                     fields,\n                     path: cx.qpath_res(path, e.hir_id),\n                 });\n@@ -137,7 +146,7 @@ fn is_expr_same_child_or_parent_field(cx: &LateContext<'_>, expr: &Expr<'_>, fie\n     match expr.kind {\n         ExprKind::Field(base, name) => {\n             if let Some((head_field, tail_fields)) = fields.split_first() {\n-                if name.name == *head_field && is_expr_same_field(cx, base, fields, path_res) {\n+                if name.name == *head_field && is_expr_same_field(cx, base, tail_fields, path_res) {\n                     return true;\n                 }\n                 // Check if the expression is a parent field"}, {"sha": "cdcdd808c94445f2d33b2771ded4f95db9091644", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "patch": "@@ -334,6 +334,38 @@ fn issue7249() {\n     x();\n }\n \n+fn issue7510() {\n+    let mut it = 0..10;\n+    let it = &mut it;\n+    // Needs to reborrow `it` as the binding isn't mutable\n+    for x in &mut *it {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.next().unwrap());\n+\n+    struct S<T>(T);\n+    let mut it = 0..10;\n+    let it = S(&mut it);\n+    // Needs to reborrow `it.0` as the binding isn't mutable\n+    for x in &mut *it.0 {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.0.next().unwrap());\n+}\n+\n+fn exact_match_with_single_field() {\n+    struct S<T>(T);\n+    let mut s = S(0..10);\n+    // Don't lint. `s.0` is used inside the loop.\n+    while let Some(_) = s.0.next() {\n+        let _ = &mut s.0;\n+    }\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     for _ in it {"}, {"sha": "72f34257d1f46a631cf7596876dded1da71beedd", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "patch": "@@ -334,6 +334,38 @@ fn issue7249() {\n     x();\n }\n \n+fn issue7510() {\n+    let mut it = 0..10;\n+    let it = &mut it;\n+    // Needs to reborrow `it` as the binding isn't mutable\n+    while let Some(x) = it.next() {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.next().unwrap());\n+\n+    struct S<T>(T);\n+    let mut it = 0..10;\n+    let it = S(&mut it);\n+    // Needs to reborrow `it.0` as the binding isn't mutable\n+    while let Some(x) = it.0.next() {\n+        if x % 2 == 0 {\n+            break;\n+        }\n+    }\n+    println!(\"{}\", it.0.next().unwrap());\n+}\n+\n+fn exact_match_with_single_field() {\n+    struct S<T>(T);\n+    let mut s = S(0..10);\n+    // Don't lint. `s.0` is used inside the loop.\n+    while let Some(_) = s.0.next() {\n+        let _ = &mut s.0;\n+    }\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     while let Some(..) = it.next() {"}, {"sha": "ff9b08996da5316dc807b48e9d8175a1370aa05d", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05fa78fd3edaf19a2508db9a74dbaa4cb009f236/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=05fa78fd3edaf19a2508db9a74dbaa4cb009f236", "patch": "@@ -111,10 +111,22 @@ LL |         while let Some(x) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:339:5\n+  --> $DIR/while_let_on_iterator.rs:341:5\n+   |\n+LL |     while let Some(x) = it.next() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:352:5\n+   |\n+LL |     while let Some(x) = it.0.next() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut *it.0`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:371:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 21 previous errors\n "}]}