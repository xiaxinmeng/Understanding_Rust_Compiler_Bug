{"sha": "9eb50d3cde97690f8149f560b70f56f6dafa4da3", "node_id": "C_kwDOAAsO6NoAKDllYjUwZDNjZGU5NzY5MGY4MTQ5ZjU2MGI3MGY1NmY2ZGFmYTRkYTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T16:03:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T16:03:36Z"}, "message": "Make it clearer when the server expects an initialized notification", "tree": {"sha": "9c760e60bbe55dbbc8ca59e51046fd81144d6a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c760e60bbe55dbbc8ca59e51046fd81144d6a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb50d3cde97690f8149f560b70f56f6dafa4da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb50d3cde97690f8149f560b70f56f6dafa4da3", "html_url": "https://github.com/rust-lang/rust/commit/9eb50d3cde97690f8149f560b70f56f6dafa4da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb50d3cde97690f8149f560b70f56f6dafa4da3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33fa38cc912c3b184f63290aaf6ebbd3d0a863e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33fa38cc912c3b184f63290aaf6ebbd3d0a863e", "html_url": "https://github.com/rust-lang/rust/commit/d33fa38cc912c3b184f63290aaf6ebbd3d0a863e"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "beccde40a89789bd9ebc6253edf512f2f649f8e0", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9eb50d3cde97690f8149f560b70f56f6dafa4da3/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb50d3cde97690f8149f560b70f56f6dafa4da3/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=9eb50d3cde97690f8149f560b70f56f6dafa4da3", "patch": "@@ -114,10 +114,8 @@ impl Connection {\n     /// ```\n     pub fn initialize_start(&self) -> Result<(RequestId, serde_json::Value), ProtocolError> {\n         loop {\n-            match self.receiver.recv() {\n-                Ok(Message::Request(req)) if req.is_initialize() => {\n-                    return Ok((req.id, req.params))\n-                }\n+            break match self.receiver.recv() {\n+                Ok(Message::Request(req)) if req.is_initialize() => Ok((req.id, req.params)),\n                 // Respond to non-initialize requests with ServerNotInitialized\n                 Ok(Message::Request(req)) => {\n                     let resp = Response::new_err(\n@@ -126,14 +124,11 @@ impl Connection {\n                         format!(\"expected initialize request, got {req:?}\"),\n                     );\n                     self.sender.send(resp.into()).unwrap();\n+                    continue;\n                 }\n-                Ok(msg) => {\n-                    return Err(ProtocolError(format!(\"expected initialize request, got {msg:?}\")))\n-                }\n+                Ok(msg) => Err(ProtocolError(format!(\"expected initialize request, got {msg:?}\"))),\n                 Err(e) => {\n-                    return Err(ProtocolError(format!(\n-                        \"expected initialize request, got error: {e}\"\n-                    )))\n+                    Err(ProtocolError(format!(\"expected initialize request, got error: {e}\")))\n                 }\n             };\n         }\n@@ -148,17 +143,14 @@ impl Connection {\n         let resp = Response::new_ok(initialize_id, initialize_result);\n         self.sender.send(resp.into()).unwrap();\n         match &self.receiver.recv() {\n-            Ok(Message::Notification(n)) if n.is_initialized() => (),\n+            Ok(Message::Notification(n)) if n.is_initialized() => Ok(()),\n             Ok(msg) => {\n-                return Err(ProtocolError(format!(\"expected Message::Notification, got: {msg:?}\",)))\n+                Err(ProtocolError(format!(r#\"expected initialized notification, got: {msg:?}\"#)))\n             }\n             Err(e) => {\n-                return Err(ProtocolError(format!(\n-                    \"expected initialized notification, got error: {e}\",\n-                )))\n+                Err(ProtocolError(format!(\"expected initialized notification, got error: {e}\",)))\n             }\n         }\n-        Ok(())\n     }\n \n     /// Initialize the connection. Sends the server capabilities"}]}