{"sha": "2d74e9ba1351dd58f333328558ef1246211d818d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzRlOWJhMTM1MWRkNThmMzMzMzI4NTU4ZWYxMjQ2MjExZDgxOGQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-04T18:45:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T10:29:30Z"}, "message": "Allocate inside lower_path_extra.", "tree": {"sha": "c9016d7d07f64fed38a37a2d2c3292998b48ae5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9016d7d07f64fed38a37a2d2c3292998b48ae5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d74e9ba1351dd58f333328558ef1246211d818d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d74e9ba1351dd58f333328558ef1246211d818d", "html_url": "https://github.com/rust-lang/rust/commit/2d74e9ba1351dd58f333328558ef1246211d818d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d74e9ba1351dd58f333328558ef1246211d818d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e569ada528f8664337f700235bc771cbfecbd432", "url": "https://api.github.com/repos/rust-lang/rust/commits/e569ada528f8664337f700235bc771cbfecbd432", "html_url": "https://github.com/rust-lang/rust/commit/e569ada528f8664337f700235bc771cbfecbd432"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "400e22d954157093c584252ecf5b573d46711ca3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2d74e9ba1351dd58f333328558ef1246211d818d", "patch": "@@ -1800,8 +1800,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &Path,\n         param_mode: ParamMode,\n         explicit_owner: Option<NodeId>,\n-    ) -> hir::Path<'hir> {\n-        hir::Path {\n+    ) -> &'hir hir::Path<'hir> {\n+        self.arena.alloc(hir::Path {\n             res,\n             segments: self.arena.alloc_from_iter(p.segments.iter().map(|segment| {\n                 self.lower_path_segment(\n@@ -1815,10 +1815,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )\n             })),\n             span: p.span,\n-        }\n+        })\n     }\n \n-    fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> hir::Path<'hir> {\n+    fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> &'hir hir::Path<'hir> {\n         let res = self.expect_full_res(id);\n         let res = self.lower_res(res);\n         self.lower_path_extra(res, p, param_mode, None)\n@@ -2396,12 +2396,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         });\n \n         // ::std::future::Future<future_params>\n-        let future_path = self.arena.alloc(self.std_path(\n-            span,\n-            &[sym::future, sym::Future],\n-            Some(future_params),\n-            false,\n-        ));\n+        let future_path =\n+            self.std_path(span, &[sym::future, sym::Future], Some(future_params), false);\n \n         hir::GenericBound::Trait(\n             hir::PolyTraitRef {\n@@ -3048,7 +3044,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         subpats: &'hir [&'hir hir::Pat<'hir>],\n     ) -> &'hir hir::Pat<'hir> {\n         let path = self.std_path(span, components, None, true);\n-        let qpath = hir::QPath::Resolved(None, self.arena.alloc(path));\n+        let qpath = hir::QPath::Resolved(None, path);\n         let pt = if subpats.is_empty() {\n             hir::PatKind::Path(qpath)\n         } else {\n@@ -3096,7 +3092,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         components: &[Symbol],\n         params: Option<&'hir hir::GenericArgs<'hir>>,\n         is_value: bool,\n-    ) -> hir::Path<'hir> {\n+    ) -> &'hir hir::Path<'hir> {\n         let ns = if is_value { Namespace::ValueNS } else { Namespace::TypeNS };\n         let (path, res) = self.resolver.resolve_str_path(span, self.crate_root, components, ns);\n \n@@ -3116,11 +3112,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .collect();\n         segments.last_mut().unwrap().args = params;\n \n-        hir::Path {\n+        self.arena.alloc(hir::Path {\n             span,\n             res: res.map_id(|_| panic!(\"unexpected `NodeId`\")),\n             segments: self.arena.alloc_from_iter(segments),\n-        }\n+        })\n     }\n \n     fn ty_path("}, {"sha": "3911f09a227926663a1c7ada6dba9c68c84f06c0", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=2d74e9ba1351dd58f333328558ef1246211d818d", "patch": "@@ -827,7 +827,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let is_unit = fields.is_empty();\n         let struct_path = [sym::ops, path];\n         let struct_path = self.std_path(span, &struct_path, None, is_unit);\n-        let struct_path = hir::QPath::Resolved(None, self.arena.alloc(struct_path));\n+        let struct_path = hir::QPath::Resolved(None, struct_path);\n \n         if is_unit {\n             hir::ExprKind::Path(struct_path)\n@@ -1336,7 +1336,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         assoc_fn_name: &str,\n         args: &'hir [hir::Expr<'hir>],\n     ) -> hir::ExprKind<'hir> {\n-        let ty_path = self.arena.alloc(self.std_path(span, ty_path_components, None, false));\n+        let ty_path = self.std_path(span, ty_path_components, None, false);\n         let ty =\n             self.arena.alloc(self.ty_path(ty_path_id, span, hir::QPath::Resolved(None, ty_path)));\n         let fn_seg = self.arena.alloc(hir::PathSegment::from_ident(Ident::from_str(assoc_fn_name)));\n@@ -1354,11 +1354,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n         let path = self.std_path(span, components, params, true);\n-        self.expr(\n-            span,\n-            hir::ExprKind::Path(hir::QPath::Resolved(None, self.arena.alloc(path))),\n-            attrs,\n-        )\n+        self.expr(span, hir::ExprKind::Path(hir::QPath::Resolved(None, path)), attrs)\n     }\n \n     pub(super) fn expr_ident("}, {"sha": "fea91cf3c44ce96dd85ffdf98dd7c620e8dc3cd3", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d74e9ba1351dd58f333328558ef1246211d818d/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=2d74e9ba1351dd58f333328558ef1246211d818d", "patch": "@@ -507,7 +507,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let new_id = this.lower_node_id(new_node_id);\n                         let res = this.lower_res(res);\n                         let path = this.lower_path_extra(res, &path, ParamMode::Explicit, None);\n-                        let kind = hir::ItemKind::Use(this.arena.alloc(path), hir::UseKind::Single);\n+                        let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n                         let vis = this.rebuild_vis(&vis);\n \n                         this.insert_item(hir::Item {\n@@ -522,15 +522,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n \n                 let path = self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None);\n-                let path = self.arena.alloc(path);\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n-                let path = self.arena.alloc(self.lower_path(\n-                    id,\n-                    &Path { segments, span: path.span },\n-                    ParamMode::Explicit,\n-                ));\n+                let path =\n+                    self.lower_path(id, &Path { segments, span: path.span }, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n@@ -618,7 +614,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n                 let res = self.lower_res(res);\n                 let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit, None);\n-                let path = self.arena.alloc(path);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n         }\n@@ -627,7 +622,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// Paths like the visibility path in `pub(super) use foo::{bar, baz}` are repeated\n     /// many times in the HIR tree; for each occurrence, we need to assign distinct\n     /// `NodeId`s. (See, e.g., #56128.)\n-    fn rebuild_use_path(&mut self, path: &hir::Path<'hir>) -> hir::Path<'hir> {\n+    fn rebuild_use_path(&mut self, path: &hir::Path<'hir>) -> &'hir hir::Path<'hir> {\n         debug!(\"rebuild_use_path(path = {:?})\", path);\n         let segments =\n             self.arena.alloc_from_iter(path.segments.iter().map(|seg| hir::PathSegment {\n@@ -637,7 +632,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 args: None,\n                 infer_args: seg.infer_args,\n             }));\n-        hir::Path { span: path.span, res: path.res, segments }\n+        self.arena.alloc(hir::Path { span: path.span, res: path.res, segments })\n     }\n \n     fn rebuild_vis(&mut self, vis: &hir::Visibility<'hir>) -> hir::Visibility<'hir> {\n@@ -647,7 +642,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n             hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n                 hir::VisibilityKind::Restricted {\n-                    path: self.arena.alloc(self.rebuild_use_path(path)),\n+                    path: self.rebuild_use_path(path),\n                     hir_id: self.next_id(),\n                 }\n             }\n@@ -944,12 +939,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let res = self.expect_full_res(id);\n                 let res = self.lower_res(res);\n                 hir::VisibilityKind::Restricted {\n-                    path: self.arena.alloc(self.lower_path_extra(\n-                        res,\n-                        path,\n-                        ParamMode::Explicit,\n-                        explicit_owner,\n-                    )),\n+                    path: self.lower_path_extra(res, path, ParamMode::Explicit, explicit_owner),\n                     hir_id: lowered_id,\n                 }\n             }"}]}