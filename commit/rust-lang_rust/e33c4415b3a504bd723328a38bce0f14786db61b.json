{"sha": "e33c4415b3a504bd723328a38bce0f14786db61b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2M0NDE1YjNhNTA0YmQ3MjMzMjhhMzhiY2UwZjE0Nzg2ZGI2MWI=", "commit": {"author": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2019-05-20T00:10:48Z"}, "committer": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2019-05-20T00:10:48Z"}, "message": "Add basic CDB support to debuginfo compiletest s, to help catch `*.natvis` regressions, like those fixed in #60687.\n\nSeveral Microsoft debuggers (VS, VS Code, WinDbg, CDB, ...) consume the `*.natvis` files we embed into rust `*.pdb` files.\nWhile this only tests CDB, that test coverage should help for all of them.\n\nCHANGES\n\nsrc\\bootstrap\n  - test.rs:  Run CDB debuginfo tests on MSVC targets\n\nsrc\\test\\debuginfo\n  - issue-13213.rs:  CDB has trouble with this, skip for now (newly discovered regression?)\n  - pretty-std.rs:  Was ignored, re-enable for CDB only to start with, add CDB tests.\n  - should-fail.rs:  Add CDB tests.\n\nsrc\\tools\\compiletest:\n  - Added \"-cdb\" option\n  - Added Mode::DebugInfoCdb (\"debuginfo-cdb\")\n  - Added run_debuginfo_cdb_test[_no_opt]\n  - Renamed Mode::DebugInfoBoth -> DebugInfoGdbLldb (\"debuginfo-gdb+lldb\") since it's no longer clear what \"Both\" means.\n  - Find CDB at the default Win10 SDK install path \"C:\\Program Files (x86)\\Windows Kits\\10\\Debugger\\*\\cdb.exe\"\n  - Ignore CDB tests if CDB not found.\n\nISSUES\n\n  - `compute_stamp_hash`: not sure if there's any point in hashing `%ProgramFiles(x86)%`\n  - `OsString` lacks any `*.natvis` entries (would be nice to add in a followup changelist)\n  - DSTs (array/string slices) which work in VS & VS Code fail in CDB.\n  - I've avoided `Mode::DebugInfoAll` as 3 debuggers leads to pow(2,3)=8 possible combinations.\n\nREFERENCE\n\nCDB is not part of the base Visual Studio install, but can be added via the Windows 10 SDK:\n  https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk\nInstalling just \"Debugging Tools for Windows\" is sufficient.\n\nCDB appears to already be installed on appveyor CI, where this changelist can find it, based on it's use here:\n  https://github.com/rust-lang/rust/blob/0ffc57311030a1930edfa721fe57d0000a063af4/appveyor.yml#L227\n\nCDB commands and command line reference:\n  https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-reference", "tree": {"sha": "982db452475038e31d71f37e7a8f673017c6fb6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/982db452475038e31d71f37e7a8f673017c6fb6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33c4415b3a504bd723328a38bce0f14786db61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33c4415b3a504bd723328a38bce0f14786db61b", "html_url": "https://github.com/rust-lang/rust/commit/e33c4415b3a504bd723328a38bce0f14786db61b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33c4415b3a504bd723328a38bce0f14786db61b/comments", "author": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ab32499c0114ae6e01e76374ae06bcd7a973bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ab32499c0114ae6e01e76374ae06bcd7a973bd", "html_url": "https://github.com/rust-lang/rust/commit/26ab32499c0114ae6e01e76374ae06bcd7a973bd"}], "stats": {"total": 282, "additions": 251, "deletions": 31}, "files": [{"sha": "40105e091173869681bd2ace491a42eaea489f3d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -976,14 +976,10 @@ impl Step for Compiletest {\n         }\n \n         if suite == \"debuginfo\" {\n-            // Skip debuginfo tests on MSVC\n-            if builder.config.build.contains(\"msvc\") {\n-                return;\n-            }\n-\n+            let msvc = builder.config.build.contains(\"msvc\");\n             if mode == \"debuginfo\" {\n                 return builder.ensure(Compiletest {\n-                    mode: \"debuginfo-both\",\n+                    mode: if msvc { \"debuginfo-cdb\" } else { \"debuginfo-gdb+lldb\" },\n                     ..self\n                 });\n             }"}, {"sha": "393478460d48f58bacdf46660eb79dab85d8a521", "filename": "src/test/debuginfo/issue-13213.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fissue-13213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fissue-13213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-13213.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -1,4 +1,5 @@\n // min-lldb-version: 310\n+// ignore-cdb: Fails with exit code 0xc0000135 (\"the application failed to initialize properly\")\n \n // aux-build:issue-13213-aux.rs\n "}, {"sha": "f568371d68a1a97d10499a70bc2e33c023b61733", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -1,6 +1,5 @@\n-// ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n-// ignore-test // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n+// only-cdb // Test temporarily ignored on GDB/LLDB due to debuginfo tests being disabled, see PR 47155\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n // min-gdb-version 7.7\n@@ -63,6 +62,56 @@\n // lldb-check:[...]$5 = None\n \n \n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx slice,d\n+// cdb-check:slice,d [...]\n+// NOTE: While slices have a .natvis entry that works in VS & VS Code, it fails in CDB 10.0.18362.1\n+\n+// cdb-command: dx vec,d\n+// cdb-check:vec,d [...] : { size=4 } [Type: [...]::Vec<u64>]\n+// cdb-check:    [size]           : 4 [Type: [...]]\n+// cdb-check:    [capacity]       : [...] [Type: [...]]\n+// cdb-check:    [0]              : 4 [Type: unsigned __int64]\n+// cdb-check:    [1]              : 5 [Type: unsigned __int64]\n+// cdb-check:    [2]              : 6 [Type: unsigned __int64]\n+// cdb-check:    [3]              : 7 [Type: unsigned __int64]\n+\n+// cdb-command: dx str_slice\n+// cdb-check:str_slice [...]\n+// NOTE: While string slices have a .natvis entry that works in VS & VS Code, it fails in CDB 10.0.18362.1\n+\n+// cdb-command: dx string\n+// cdb-check:string           : \"IAMA string!\" [Type: [...]::String]\n+// cdb-check:    [<Raw View>]     [Type: [...]::String]\n+// cdb-check:    [size]           : 0xc [Type: [...]]\n+// cdb-check:    [capacity]       : 0xc [Type: [...]]\n+// cdb-check:    [0]              : 73 'I' [Type: char]\n+// cdb-check:    [1]              : 65 'A' [Type: char]\n+// cdb-check:    [2]              : 77 'M' [Type: char]\n+// cdb-check:    [3]              : 65 'A' [Type: char]\n+// cdb-check:    [4]              : 32 ' ' [Type: char]\n+// cdb-check:    [5]              : 115 's' [Type: char]\n+// cdb-check:    [6]              : 116 't' [Type: char]\n+// cdb-check:    [7]              : 114 'r' [Type: char]\n+// cdb-check:    [8]              : 105 'i' [Type: char]\n+// cdb-check:    [9]              : 110 'n' [Type: char]\n+// cdb-check:    [10]             : 103 'g' [Type: char]\n+// cdb-check:    [11]             : 33 '!' [Type: char]\n+\n+// cdb-command: dx os_string\n+// cdb-check:os_string        [Type: [...]::OsString]\n+// NOTE: OsString doesn't have a .natvis entry yet.\n+\n+// cdb-command: dx some\n+// cdb-check:some             : { Some 8 } [Type: [...]::Option<i16>]\n+// cdb-command: dx none\n+// cdb-check:none             : { None } [Type: [...]::Option<i64>]\n+// cdb-command: dx some_string\n+// cdb-check:some_string      : { Some \"IAMA optional string!\" } [Type: [...]::Option<[...]::String>]\n+\n #![allow(unused_variables)]\n use std::ffi::OsString;\n "}, {"sha": "1e0d22cbce40453443f465fd7e82ca482514b4fa", "filename": "src/test/debuginfo/should-fail.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -18,6 +18,13 @@\n // lldb-command:print x\n // lldb-check:[...]$0 = 5\n \n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command:g\n+\n+// cdb-command:dx x\n+// cdb-check:string [...] : 5 [Type: [...]]\n+\n fn main() {\n     let x = 1;\n "}, {"sha": "722979c3c1402b3a2ff070401067e2ef6a3f6ad3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -1,5 +1,6 @@\n pub use self::Mode::*;\n \n+use std::ffi::OsString;\n use std::fmt;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n@@ -15,7 +16,8 @@ pub enum Mode {\n     RunPass,\n     RunPassValgrind,\n     Pretty,\n-    DebugInfoBoth,\n+    DebugInfoCdb,\n+    DebugInfoGdbLldb,\n     DebugInfoGdb,\n     DebugInfoLldb,\n     Codegen,\n@@ -33,9 +35,10 @@ impl Mode {\n     pub fn disambiguator(self) -> &'static str {\n         // Run-pass and pretty run-pass tests could run concurrently, and if they do,\n         // they need to keep their output segregated. Same is true for debuginfo tests that\n-        // can be run both on gdb and lldb.\n+        // can be run on cdb, gdb, and lldb.\n         match self {\n             Pretty => \".pretty\",\n+            DebugInfoCdb => \".cdb\",\n             DebugInfoGdb => \".gdb\",\n             DebugInfoLldb => \".lldb\",\n             _ => \"\",\n@@ -52,7 +55,8 @@ impl FromStr for Mode {\n             \"run-pass\" => Ok(RunPass),\n             \"run-pass-valgrind\" => Ok(RunPassValgrind),\n             \"pretty\" => Ok(Pretty),\n-            \"debuginfo-both\" => Ok(DebugInfoBoth),\n+            \"debuginfo-cdb\" => Ok(DebugInfoCdb),\n+            \"debuginfo-gdb+lldb\" => Ok(DebugInfoGdbLldb),\n             \"debuginfo-lldb\" => Ok(DebugInfoLldb),\n             \"debuginfo-gdb\" => Ok(DebugInfoGdb),\n             \"codegen\" => Ok(Codegen),\n@@ -77,7 +81,8 @@ impl fmt::Display for Mode {\n             RunPass => \"run-pass\",\n             RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n-            DebugInfoBoth => \"debuginfo-both\",\n+            DebugInfoCdb => \"debuginfo-cdb\",\n+            DebugInfoGdbLldb => \"debuginfo-gdb+lldb\",\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n             Codegen => \"codegen\",\n@@ -198,6 +203,9 @@ pub struct Config {\n     /// Host triple for the compiler being invoked\n     pub host: String,\n \n+    /// Path to / name of the Microsoft Console Debugger (CDB) executable\n+    pub cdb: Option<OsString>,\n+\n     /// Path to / name of the GDB executable\n     pub gdb: Option<String>,\n "}, {"sha": "ab5594f36050d6ea85acd1dd64240063611da986", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -57,9 +57,9 @@ enum ParsedNameDirective {\n     NoMatch,\n     /// Match.\n     Match,\n-    /// Mode was DebugInfoBoth and this matched gdb.\n+    /// Mode was DebugInfoGdbLldb and this matched gdb.\n     MatchGdb,\n-    /// Mode was DebugInfoBoth and this matched lldb.\n+    /// Mode was DebugInfoGdbLldb and this matched lldb.\n     MatchLldb,\n }\n \n@@ -81,13 +81,17 @@ impl EarlyProps {\n             revisions: vec![],\n         };\n \n-        if config.mode == common::DebugInfoBoth {\n+        if config.mode == common::DebugInfoGdbLldb {\n             if config.lldb_python_dir.is_none() {\n                 props.ignore = props.ignore.no_lldb();\n             }\n             if config.gdb_version.is_none() {\n                 props.ignore = props.ignore.no_gdb();\n             }\n+        } else if config.mode == common::DebugInfoCdb {\n+            if config.cdb.is_none() {\n+                props.ignore = Ignore::Ignore;\n+            }\n         }\n \n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n@@ -133,12 +137,12 @@ impl EarlyProps {\n                 }\n             }\n \n-            if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n+            if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&\n                 props.ignore.can_run_gdb() && ignore_gdb(config, ln) {\n                 props.ignore = props.ignore.no_gdb();\n             }\n \n-            if (config.mode == common::DebugInfoLldb || config.mode == common::DebugInfoBoth) &&\n+            if (config.mode == common::DebugInfoLldb || config.mode == common::DebugInfoGdbLldb) &&\n                 props.ignore.can_run_lldb() && ignore_lldb(config, ln) {\n                 props.ignore = props.ignore.no_lldb();\n             }\n@@ -804,7 +808,7 @@ impl Config {\n                 ParsedNameDirective::Match\n             } else {\n                 match self.mode {\n-                    common::DebugInfoBoth => {\n+                    common::DebugInfoGdbLldb => {\n                         if name == \"gdb\" {\n                             ParsedNameDirective::MatchGdb\n                         } else if name == \"lldb\" {\n@@ -813,6 +817,11 @@ impl Config {\n                             ParsedNameDirective::NoMatch\n                         }\n                     },\n+                    common::DebugInfoCdb => if name == \"cdb\" {\n+                        ParsedNameDirective::Match\n+                    } else {\n+                        ParsedNameDirective::NoMatch\n+                    },\n                     common::DebugInfoGdb => if name == \"gdb\" {\n                         ParsedNameDirective::Match\n                     } else {"}, {"sha": "631ed067c341ace4780f760e34d90505969415a7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -1,5 +1,6 @@\n #![crate_name = \"compiletest\"]\n #![feature(test)]\n+#![feature(path_buf_capacity)]\n #![feature(vec_remove_item)]\n #![deny(warnings, rust_2018_idioms)]\n \n@@ -8,7 +9,7 @@ extern crate test;\n use crate::common::CompareMode;\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{Config, TestPaths};\n-use crate::common::{DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n+use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n use getopts::Options;\n use std::env;\n use std::ffi::OsString;\n@@ -164,6 +165,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\")\n         .optopt(\"\", \"target\", \"the target to build for\", \"TARGET\")\n         .optopt(\"\", \"host\", \"the host to build for\", \"HOST\")\n+        .optopt(\n+            \"\",\n+            \"cdb\",\n+            \"path to CDB to use for CDB debuginfo tests\",\n+            \"PATH\",\n+        )\n         .optopt(\n             \"\",\n             \"gdb\",\n@@ -273,6 +280,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n     let target = opt_str2(matches.opt_str(\"target\"));\n     let android_cross_path = opt_path(matches, \"android-cross-path\");\n+    let cdb = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n     let (gdb, gdb_version, gdb_native_rust) = analyze_gdb(matches.opt_str(\"gdb\"), &target,\n                                                           &android_cross_path);\n     let (lldb_version, lldb_native_rust) = extract_lldb_version(matches.opt_str(\"lldb-version\"));\n@@ -319,6 +327,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n         target: target,\n         host: opt_str2(matches.opt_str(\"host\")),\n+        cdb,\n         gdb,\n         gdb_version,\n         gdb_native_rust,\n@@ -421,7 +430,7 @@ pub fn opt_str2(maybestr: Option<String>) -> String {\n \n pub fn run_tests(config: &Config) {\n     if config.target.contains(\"android\") {\n-        if config.mode == DebugInfoGdb || config.mode == DebugInfoBoth {\n+        if config.mode == DebugInfoGdb || config.mode == DebugInfoGdbLldb {\n             println!(\n                 \"{} debug-info test uses tcp 5039 port.\\\n                  please reserve it\",\n@@ -440,8 +449,8 @@ pub fn run_tests(config: &Config) {\n \n     match config.mode {\n         // Note that we don't need to emit the gdb warning when\n-        // DebugInfoBoth, so it is ok to list that here.\n-        DebugInfoBoth | DebugInfoLldb => {\n+        // DebugInfoGdbLldb, so it is ok to list that here.\n+        DebugInfoGdbLldb | DebugInfoLldb => {\n             if let Some(lldb_version) = config.lldb_version.as_ref() {\n                 if is_blacklisted_lldb_version(&lldb_version[..]) {\n                     println!(\n@@ -470,7 +479,8 @@ pub fn run_tests(config: &Config) {\n                 return;\n             }\n         }\n-        _ => { /* proceed */ }\n+\n+        DebugInfoCdb | _ => { /* proceed */ }\n     }\n \n     // FIXME(#33435) Avoid spurious failures in codegen-units/partitioning tests.\n@@ -667,7 +677,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> Vec<test::TestDescAn\n                     &early_props,\n                     revision.map(|s| s.as_str()),\n                 )\n-                || ((config.mode == DebugInfoBoth ||\n+                || ((config.mode == DebugInfoGdbLldb || config.mode == DebugInfoCdb ||\n                      config.mode == DebugInfoGdb || config.mode == DebugInfoLldb)\n                     && config.target.contains(\"emscripten\"))\n                 || (config.mode == DebugInfoGdb && !early_props.ignore.can_run_gdb())\n@@ -815,7 +825,7 @@ fn make_test_closure(\n     revision: Option<&String>,\n ) -> test::TestFn {\n     let mut config = config.clone();\n-    if config.mode == DebugInfoBoth {\n+    if config.mode == DebugInfoGdbLldb {\n         // If both gdb and lldb were ignored, then the test as a whole\n         // would be ignored.\n         if !ignore.can_run_gdb() {\n@@ -841,6 +851,48 @@ fn is_android_gdb_target(target: &String) -> bool {\n     }\n }\n \n+/// Returns `true` if the given target is a MSVC target for the purpouses of CDB testing.\n+fn is_pc_windows_msvc_target(target: &String) -> bool {\n+    target.ends_with(\"-pc-windows-msvc\")\n+}\n+\n+fn find_cdb(target: &String) -> Option<OsString> {\n+    if cfg!(windows) && is_pc_windows_msvc_target(target) {\n+        let pf86 = env::var_os(\"ProgramFiles(x86)\").or(env::var_os(\"ProgramFiles\"))?;\n+        let cdb_arch = if cfg!(target_arch=\"x86\") {\n+            \"x86\"\n+        } else if cfg!(target_arch=\"x86_64\") {\n+            \"x64\"\n+        } else if cfg!(target_arch=\"aarch64\") {\n+            \"arm64\"\n+        } else if cfg!(target_arch=\"arm\") {\n+            \"arm\"\n+        } else {\n+            return None; // No compatible CDB.exe in the Windows 10 SDK\n+        };\n+\n+        let mut path = PathBuf::with_capacity(64);\n+        path.push(pf86);\n+        path.push(r\"Windows Kits\\10\\Debuggers\"); // We could check more known install locations (8.1?)\n+        path.push(cdb_arch);\n+        path.push(r\"cdb.exe\");\n+\n+        if path.exists() {\n+            Some(path.into_os_string())\n+        } else {\n+            None\n+        }\n+    }\n+    else {\n+        None\n+    }\n+}\n+\n+/// Returns Path to CDB\n+fn analyze_cdb(cdb: Option<String>, target: &String) -> Option<OsString> {\n+    cdb.map(|s| OsString::from(s)).or(find_cdb(target))\n+}\n+\n /// Returns (Path to GDB, GDB Version, GDB has Rust Support)\n fn analyze_gdb(gdb: Option<String>, target: &String, android_cross_path: &PathBuf)\n                -> (Option<String>, Option<u32>, bool) {"}, {"sha": "c0dedccdff8a3dc439d97a870c07389b8cb0a5bc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 104, "deletions": 6, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33c4415b3a504bd723328a38bce0f14786db61b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e33c4415b3a504bd723328a38bce0f14786db61b", "patch": "@@ -3,7 +3,7 @@\n use crate::common::CompareMode;\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n-use crate::common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n+use crate::common::{Codegen, CodegenUnits, DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use crate::common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n@@ -242,15 +242,23 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n     let mut hash = DefaultHasher::new();\n     config.stage_id.hash(&mut hash);\n \n-    if config.mode == DebugInfoGdb || config.mode == DebugInfoBoth {\n+    if config.mode == DebugInfoCdb {\n+        match config.cdb {\n+            None => env::var_os(\"ProgramFiles(x86)\").hash(&mut hash),\n+            Some(ref s) if s.is_empty() => env::var_os(\"ProgramFiles(x86)\").hash(&mut hash),\n+            Some(ref s) => s.hash(&mut hash),\n+        }\n+    }\n+\n+    if config.mode == DebugInfoGdb || config.mode == DebugInfoGdbLldb {\n         match config.gdb {\n             None => env::var_os(\"PATH\").hash(&mut hash),\n             Some(ref s) if s.is_empty() => env::var_os(\"PATH\").hash(&mut hash),\n             Some(ref s) => s.hash(&mut hash),\n         };\n     }\n \n-    if config.mode == DebugInfoLldb || config.mode == DebugInfoBoth {\n+    if config.mode == DebugInfoLldb || config.mode == DebugInfoGdbLldb {\n         env::var_os(\"PATH\").hash(&mut hash);\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n@@ -285,10 +293,11 @@ impl<'test> TestCx<'test> {\n             RunFail => self.run_rfail_test(),\n             RunPassValgrind => self.run_valgrind_test(),\n             Pretty => self.run_pretty_test(),\n-            DebugInfoBoth => {\n+            DebugInfoGdbLldb => {\n                 self.run_debuginfo_gdb_test();\n                 self.run_debuginfo_lldb_test();\n             },\n+            DebugInfoCdb => self.run_debuginfo_cdb_test(),\n             DebugInfoGdb => self.run_debuginfo_gdb_test(),\n             DebugInfoLldb => self.run_debuginfo_lldb_test(),\n             Codegen => self.run_codegen_test(),\n@@ -656,6 +665,95 @@ impl<'test> TestCx<'test> {\n         self.compose_and_run_compiler(rustc, Some(src))\n     }\n \n+    fn run_debuginfo_cdb_test(&self) {\n+        assert!(self.revision.is_none(), \"revisions not relevant here\");\n+\n+        let config = Config {\n+            target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n+            host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n+            mode: DebugInfoCdb,\n+            ..self.config.clone()\n+        };\n+\n+        let test_cx = TestCx {\n+            config: &config,\n+            ..*self\n+        };\n+\n+        test_cx.run_debuginfo_cdb_test_no_opt();\n+    }\n+\n+    fn run_debuginfo_cdb_test_no_opt(&self) {\n+        // compile test file (it should have 'compile-flags:-g' in the header)\n+        let compile_result = self.compile_test();\n+        if !compile_result.status.success() {\n+            self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n+        }\n+\n+        let exe_file = self.make_exe_name();\n+\n+        let prefixes = {\n+            static PREFIXES: &'static [&'static str] = &[\"cdb\", \"cdbg\"];\n+            // No \"native rust support\" variation for CDB yet.\n+            PREFIXES\n+        };\n+\n+        // Parse debugger commands etc from test files\n+        let DebuggerCommands {\n+            commands,\n+            check_lines,\n+            breakpoint_lines,\n+            ..\n+        } = self.parse_debugger_commands(prefixes);\n+\n+        // https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-commands\n+        let mut script_str = String::with_capacity(2048);\n+        script_str.push_str(\"version\\n\"); // List CDB (and more) version info in test output\n+        script_str.push_str(\".nvlist\\n\"); // List loaded `*.natvis` files (bulk of MSVC debugger customizations)\n+\n+        // Set breakpoints on every line that contains the string \"#break\"\n+        let source_file_name = self.testpaths.file.file_name().unwrap().to_string_lossy();\n+        for line in &breakpoint_lines {\n+            script_str.push_str(&format!(\n+                \"bp `{}:{}`\\n\",\n+                source_file_name, line\n+            ));\n+        }\n+\n+        // Append the other `cdb-command:`s\n+        for line in &commands {\n+            script_str.push_str(line);\n+            script_str.push_str(\"\\n\");\n+        }\n+\n+        script_str.push_str(\"\\nqq\\n\"); // Quit the debugger (including remote debugger, if any)\n+\n+        // Write the script into a file\n+        debug!(\"script_str = {}\", script_str);\n+        self.dump_output_file(&script_str, \"debugger.script\");\n+        let debugger_script = self.make_out_name(\"debugger.script\");\n+\n+        let cdb_path = &self.config.cdb.as_ref().unwrap();\n+        let mut cdb = Command::new(cdb_path);\n+        cdb\n+            .arg(\"-lines\") // Enable source line debugging.\n+            .arg(\"-cf\").arg(&debugger_script)\n+            .arg(&exe_file);\n+\n+        let debugger_run_result = self.compose_and_run(\n+            cdb,\n+            self.config.run_lib_path.to_str().unwrap(),\n+            None, // aux_path\n+            None  // input\n+        );\n+\n+        if !debugger_run_result.status.success() {\n+            self.fatal_proc_rec(\"Error while running CDB\", &debugger_run_result);\n+        }\n+\n+        self.check_debugger_output(&debugger_run_result, &check_lines);\n+    }\n+\n     fn run_debuginfo_gdb_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n@@ -1429,7 +1527,7 @@ impl<'test> TestCx<'test> {\n             RunPass | Ui => self.should_run_successfully(),\n             Incremental => self.revision.unwrap().starts_with(\"r\"),\n             RunFail | RunPassValgrind | MirOpt |\n-            DebugInfoBoth | DebugInfoGdb | DebugInfoLldb => true,\n+            DebugInfoCdb | DebugInfoGdbLldb | DebugInfoGdb | DebugInfoLldb => true,\n             _ => false,\n         };\n         let output_file = if will_execute {\n@@ -1870,7 +1968,7 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            RunFail | RunPassValgrind | Pretty | DebugInfoBoth | DebugInfoGdb | DebugInfoLldb\n+            RunFail | RunPassValgrind | Pretty | DebugInfoCdb | DebugInfoGdbLldb | DebugInfoGdb | DebugInfoLldb\n             | Codegen | Rustdoc | RunMake | CodegenUnits | JsDocTest | Assembly => {\n                 // do not use JSON output\n             }"}]}