{"sha": "0a6d1778ffddc6767cc705385d5616fb1fffd961", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNmQxNzc4ZmZkZGM2NzY3Y2M3MDUzODVkNTYxNmZiMWZmZmQ5NjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T23:52:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T23:52:29Z"}, "message": "Rollup merge of #70982 - ldm0:fncoerce, r=eddyb\n\nNormalize function signature in function casting check procedure\n\nFixes #54094\n```rust\ntrait Zoo {\n    type X;\n}\n\nimpl Zoo for u16 {\n    type X = usize;\n}\n\nfn foo(abc: <u16 as Zoo>::X) {}\n\nfn main() {\n    let x: *const u8 = foo as _;\n}\n```\n\nCurrently a `FnDef` need to be checked if it's able to cast to `FnPtr` before it is actually casted. But the signature of `FnPtr` target's associated types are not normalized:\n\nhttps://github.com/rust-lang/rust/blob/96d77f0e5f103612d62b85938aacfb33f5768433/src/librustc_typeck/check/cast.rs#L536-L553\nHowever, during the coercion check, the signature of `FnPtr` target's associated types are normalized (The `<u16 as Zoo>::X` turns into `usize`).\n\nhttps://github.com/rust-lang/rust/blob/96d77f0e5f103612d62b85938aacfb33f5768433/src/librustc_typeck/check/coercion.rs#L687-L729\n\nThis inconsistency leads to the error:`Err(Sorts(ExpectedFound { expected: <u16 as Zoo>::X, found: usize }))`.", "tree": {"sha": "028dba4bd2071a198d45022175f99446a83d5e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/028dba4bd2071a198d45022175f99446a83d5e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6d1778ffddc6767cc705385d5616fb1fffd961", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekQa9CRBK7hj4Ov3rIwAAdHIIAA9+o+vo9yFQmQ810eETkhgM\nGapNoppRd6niKkgImbiE3kNEatxr99dl9dn/vB4wY4HG8Vp8MLbC7glhWrlFMAUa\nWUkGjoPATc5Z0425oyFZXGR2l8hDbO4gN68XwnwhyIh9uz3X28/WuX/mGdBoJFTz\nTuJ+HvmJPpfx0p3YKV1GI8XaP5cmxLo4E/xUVJf2ZVpen12pzolpdR3dMr3TTmCY\nP44RIa5X+tAaTeek+MglpEB8eoOQ2k0eISYEAzWJ7C4OSpzegFOCeXwoG7W3c9vd\nRLZ+AxOLzMx/uQ3VjlJiavcGQluMoBTAvlEvo+F0zCMniyNiHJJyU0H0ILxzqmg=\n=7+SW\n-----END PGP SIGNATURE-----\n", "payload": "tree 028dba4bd2071a198d45022175f99446a83d5e41\nparent 8c097d5c38f906ec1f77685714f7b7f403f5420d\nparent 75cc40335c5ca83ffa636ea6ff249d1934223b8b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586562749 +0200\ncommitter GitHub <noreply@github.com> 1586562749 +0200\n\nRollup merge of #70982 - ldm0:fncoerce, r=eddyb\n\nNormalize function signature in function casting check procedure\n\nFixes #54094\n```rust\ntrait Zoo {\n    type X;\n}\n\nimpl Zoo for u16 {\n    type X = usize;\n}\n\nfn foo(abc: <u16 as Zoo>::X) {}\n\nfn main() {\n    let x: *const u8 = foo as _;\n}\n```\n\nCurrently a `FnDef` need to be checked if it's able to cast to `FnPtr` before it is actually casted. But the signature of `FnPtr` target's associated types are not normalized:\n\nhttps://github.com/rust-lang/rust/blob/96d77f0e5f103612d62b85938aacfb33f5768433/src/librustc_typeck/check/cast.rs#L536-L553\nHowever, during the coercion check, the signature of `FnPtr` target's associated types are normalized (The `<u16 as Zoo>::X` turns into `usize`).\n\nhttps://github.com/rust-lang/rust/blob/96d77f0e5f103612d62b85938aacfb33f5768433/src/librustc_typeck/check/coercion.rs#L687-L729\n\nThis inconsistency leads to the error:`Err(Sorts(ExpectedFound { expected: <u16 as Zoo>::X, found: usize }))`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6d1778ffddc6767cc705385d5616fb1fffd961", "html_url": "https://github.com/rust-lang/rust/commit/0a6d1778ffddc6767cc705385d5616fb1fffd961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6d1778ffddc6767cc705385d5616fb1fffd961/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c097d5c38f906ec1f77685714f7b7f403f5420d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c097d5c38f906ec1f77685714f7b7f403f5420d", "html_url": "https://github.com/rust-lang/rust/commit/8c097d5c38f906ec1f77685714f7b7f403f5420d"}, {"sha": "75cc40335c5ca83ffa636ea6ff249d1934223b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cc40335c5ca83ffa636ea6ff249d1934223b8b", "html_url": "https://github.com/rust-lang/rust/commit/75cc40335c5ca83ffa636ea6ff249d1934223b8b"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "38d0c42e1588baaaccf48df7a14301f36e6b5324", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a6d1778ffddc6767cc705385d5616fb1fffd961/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6d1778ffddc6767cc705385d5616fb1fffd961/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=0a6d1778ffddc6767cc705385d5616fb1fffd961", "patch": "@@ -536,7 +536,10 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 match self.expr_ty.kind {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n-                        let f = self.expr_ty.fn_sig(fcx.tcx);\n+                        let f = fcx.normalize_associated_types_in(\n+                            self.expr.span,\n+                            &self.expr_ty.fn_sig(fcx.tcx),\n+                        );\n                         let res = fcx.try_coerce(\n                             self.expr,\n                             self.expr_ty,"}, {"sha": "ec38dc40e610a8acb6d756763ac5563500437546", "filename": "src/test/ui/issues/issue-54094.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a6d1778ffddc6767cc705385d5616fb1fffd961/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6d1778ffddc6767cc705385d5616fb1fffd961/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs?ref=0a6d1778ffddc6767cc705385d5616fb1fffd961", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+trait Zoo {\n+    type X;\n+}\n+\n+impl Zoo for u16 {\n+    type X = usize;\n+}\n+\n+fn foo(abc: <u16 as Zoo>::X) {}\n+\n+fn main() {\n+    let x: *const u8 = foo as _;\n+}"}]}