{"sha": "70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "node_id": "C_kwDOAAsO6NoAKDcwZjIwYWM0MGVhOTVmNGJiYTMzMDg1ODc1MGU4MWY0YWIyYjhiM2E", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T03:24:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:42:30Z"}, "message": "Move `force_with_dep_node` outside the giant macro", "tree": {"sha": "ff3a0cab22264fe2b5e0002675961fa1e74388cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3a0cab22264fe2b5e0002675961fa1e74388cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "html_url": "https://github.com/rust-lang/rust/commit/70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f20ac40ea95f4bba330858750e81f4ab2b8b3a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "html_url": "https://github.com/rust-lang/rust/commit/375d78012f2e7bdeba942eeb2a85115d1b1a98cb"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "7c6b898751a94049dfe3bc55d60586807075aac6", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/70f20ac40ea95f4bba330858750e81f4ab2b8b3a/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f20ac40ea95f4bba330858750e81f4ab2b8b3a/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "patch": "@@ -10,10 +10,11 @@ use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{self, DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_query_system::dep_graph::HasDepContext;\n+use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n+    force_query, QueryContext, QueryDescription, QueryJobId, QueryMap, QuerySideEffects,\n+    QueryStackFrame,\n };\n use std::any::Any;\n use std::num::NonZeroU64;\n@@ -315,6 +316,27 @@ pub(crate) fn try_load_from_on_disk_cache<'tcx, K, V>(\n     }\n }\n \n+pub(crate) fn force_from_dep_node<'tcx, Q>(\n+    tcx: TyCtxt<'tcx>,\n+    // dep_node: rustc_query_system::dep_graph::DepNode<CTX::DepKind>,\n+    dep_node: DepNode,\n+    recover: fn(TyCtxt<'tcx>, DepNode) -> Option<Q::Key>,\n+) -> bool\n+where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n+    if let Some(key) = recover(tcx, dep_node) {\n+        #[cfg(debug_assertions)]\n+        let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n+        let tcx = QueryCtxt::from_tcx(tcx);\n+        force_query::<Q, _>(tcx, key, dep_node);\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n // NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n // invoked by `rustc_query_append`.\n macro_rules! define_queries {\n@@ -385,7 +407,7 @@ macro_rules! define_queries {\n             use super::*;\n             use rustc_middle::dep_graph::DepNode;\n             use rustc_query_system::dep_graph::DepNodeParams;\n-            use rustc_query_system::query::{force_query, QueryDescription};\n+            use rustc_query_system::query::QueryDescription;\n             use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n@@ -462,23 +484,11 @@ macro_rules! define_queries {\n                     <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n                 }\n \n-                fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool {\n-                    if let Some(key) = recover(tcx, dep_node) {\n-                        #[cfg(debug_assertions)]\n-                        let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n-                        let tcx = QueryCtxt::from_tcx(tcx);\n-                        force_query::<queries::$name<'_>, _>(tcx, key, dep_node);\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n-\n                 DepKindStruct {\n                     is_anon,\n                     is_eval_always,\n                     fingerprint_style,\n-                    force_from_dep_node: Some(force_from_dep_node),\n+                    force_from_dep_node: Some(|tcx, dep_node| $crate::plumbing::force_from_dep_node::<queries::$name<'_>>(tcx, dep_node, recover)),\n                     try_load_from_on_disk_cache: Some(|tcx, key| $crate::plumbing::try_load_from_on_disk_cache(tcx, key, recover, queries::$name::cache_on_disk, TyCtxt::$name)),\n                 }\n             })*"}]}