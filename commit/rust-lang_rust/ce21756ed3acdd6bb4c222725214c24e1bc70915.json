{"sha": "ce21756ed3acdd6bb4c222725214c24e1bc70915", "node_id": "C_kwDOAAsO6NoAKGNlMjE3NTZlZDNhY2RkNmJiNGMyMjI3MjUyMTRjMjRlMWJjNzA5MTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-02T15:35:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-06T17:06:20Z"}, "message": "Access Session while decoding expn_id.", "tree": {"sha": "94c435bd81d6623dda44ac5f6d6ccdf2e14a8641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c435bd81d6623dda44ac5f6d6ccdf2e14a8641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce21756ed3acdd6bb4c222725214c24e1bc70915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce21756ed3acdd6bb4c222725214c24e1bc70915", "html_url": "https://github.com/rust-lang/rust/commit/ce21756ed3acdd6bb4c222725214c24e1bc70915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce21756ed3acdd6bb4c222725214c24e1bc70915/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ec8273855fde2d72ae877b397e054de5300e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ec8273855fde2d72ae877b397e054de5300e10", "html_url": "https://github.com/rust-lang/rust/commit/25ec8273855fde2d72ae877b397e054de5300e10"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "ffb7fdacd2275ce6ce204e0f235ccf28de1b9656", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ce21756ed3acdd6bb4c222725214c24e1bc70915", "patch": "@@ -1624,7 +1624,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.def_path_hash_map.def_path_hash_to_def_index(&hash)\n     }\n \n-    fn expn_hash_to_expn_id(&self, index_guess: u32, hash: ExpnHash) -> ExpnId {\n+    fn expn_hash_to_expn_id(&self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {\n         debug_assert_eq!(ExpnId::from_hash(hash), None);\n         let index_guess = ExpnIndex::from_u32(index_guess);\n         let old_hash = self.root.expn_hashes.get(self, index_guess).map(|lazy| lazy.decode(self));\n@@ -1655,7 +1655,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             map[&hash]\n         };\n \n-        let data = self.root.expn_data.get(self, index).unwrap().decode(self);\n+        let data = self.root.expn_data.get(self, index).unwrap().decode((self, sess));\n         rustc_span::hygiene::register_expn_id(self.cnum, index, data, hash)\n     }\n "}, {"sha": "4e7f85d2c372772dce0c10fd47dfd855edad6268", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ce21756ed3acdd6bb4c222725214c24e1bc70915", "patch": "@@ -506,7 +506,13 @@ impl CrateStore for CStore {\n         DefId { krate: cnum, index: def_index }\n     }\n \n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId {\n-        self.get_crate_data(cnum).expn_hash_to_expn_id(index_guess, hash)\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId {\n+        self.get_crate_data(cnum).expn_hash_to_expn_id(sess, index_guess, hash)\n     }\n }"}, {"sha": "f93623e445c2282126c29352f08996519830b61a", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=ce21756ed3acdd6bb4c222725214c24e1bc70915", "patch": "@@ -667,7 +667,12 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for ExpnId {\n             rustc_span::hygiene::register_local_expn_id(data, hash)\n         } else {\n             let index_guess = decoder.foreign_expn_data[&hash];\n-            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(krate, index_guess, hash)\n+            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(\n+                decoder.tcx.sess,\n+                krate,\n+                index_guess,\n+                hash,\n+            )\n         };\n \n         #[cfg(debug_assertions)]"}, {"sha": "59e7abc2ea3bd5d85be45b2896634440b8c11b68", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce21756ed3acdd6bb4c222725214c24e1bc70915/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=ce21756ed3acdd6bb4c222725214c24e1bc70915", "patch": "@@ -4,6 +4,7 @@\n \n use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n+use crate::Session;\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n@@ -193,7 +194,13 @@ pub trait CrateStore: std::fmt::Debug {\n \n     /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId;\n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId;\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}]}