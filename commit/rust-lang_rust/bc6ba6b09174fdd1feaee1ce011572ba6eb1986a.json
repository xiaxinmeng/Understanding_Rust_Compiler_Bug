{"sha": "bc6ba6b09174fdd1feaee1ce011572ba6eb1986a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNmJhNmIwOTE3NGZkZDFmZWFlZTFjZTAxMTU3MmJhNmViMTk4NmE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-07T21:38:32Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-08T17:28:57Z"}, "message": "Adding some examples for my internship presentation.", "tree": {"sha": "59f54cee7ed3abe725af86438c72126c48057c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f54cee7ed3abe725af86438c72126c48057c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a", "html_url": "https://github.com/rust-lang/rust/commit/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802ea5d57e8cd4cd12e1a0e25c446b90be4a6a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/802ea5d57e8cd4cd12e1a0e25c446b90be4a6a06", "html_url": "https://github.com/rust-lang/rust/commit/802ea5d57e8cd4cd12e1a0e25c446b90be4a6a06"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "96e7d429f9ba2fef67a0979b85d501f89b9c4005", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6ba6b09174fdd1feaee1ce011572ba6eb1986a/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=bc6ba6b09174fdd1feaee1ce011572ba6eb1986a", "patch": "@@ -0,0 +1,169 @@\n+// Examples from Eric's internship final presentation.\n+//\n+// Code is easier to write in emacs, and it's good to be sure all the\n+// code samples compile (or not) as they should.\n+\n+import double_buffer::client::*;\n+import double_buffer::give_buffer;\n+\n+macro_rules! select_if {\n+    {\n+        $index:expr,\n+        $count:expr,\n+        $port:path => [\n+            $($message:path$(($($x: ident),+))dont_type_this*\n+              -> $next:ident $e:expr),+\n+        ],\n+        $( $ports:path => [\n+            $($messages:path$(($($xs: ident),+))dont_type_this*\n+              -> $nexts:ident $es:expr),+\n+        ], )*\n+    } => {\n+        log_syntax!{select_if1};\n+        if $index == $count {\n+            match move pipes::try_recv($port) {\n+              $(some($message($($(copy $x,)+)* next)) => {\n+                // FIXME (#2329) we really want move out of enum here.\n+                let $next = unsafe { let x <- *ptr::addr_of(next); x };\n+                $e\n+              })+\n+              _ => fail\n+            }\n+        } else {\n+            select_if!{\n+                $index,\n+                $count + 1,\n+                $( $ports => [\n+                    $($messages$(($($xs),+))dont_type_this*\n+                      -> $nexts $es),+\n+                ], )*\n+            }\n+        }\n+    };\n+\n+    {\n+        $index:expr,\n+        $count:expr,\n+    } => {\n+        log_syntax!{select_if2};\n+        fail\n+    }\n+}\n+\n+macro_rules! select {\n+    {\n+        $( $port:path => {\n+            $($message:path$(($($x: ident),+))dont_type_this*\n+              -> $next:ident $e:expr),+\n+        } )+\n+    } => {\n+        let index = pipes::selecti([$(($port).header()),+]/_);\n+        log_syntax!{select};\n+        log_syntax!{\n+        select_if!{index, 0, $( $port => [\n+            $($message$(($($x),+))dont_type_this* -> $next $e),+\n+        ], )+}\n+        };\n+        select_if!{index, 0, $( $port => [\n+            $($message$(($($x),+))dont_type_this* -> $next $e),+\n+        ], )+}\n+    }\n+}\n+\n+// Types and protocols\n+struct Buffer {\n+    foo: ();\n+\n+    drop { }\n+}\n+\n+proto! double_buffer {\n+    acquire:send {\n+        request -> wait_buffer\n+    }\n+\n+    wait_buffer:recv {\n+        give_buffer(Buffer) -> release\n+    }\n+\n+    release:send {\n+        release(Buffer) -> acquire\n+    }\n+}\n+\n+// Code examples\n+fn render(_buffer: &Buffer) {\n+    // A dummy function.\n+}\n+\n+fn draw_frame(+channel: double_buffer::client::acquire) {\n+    let channel = request(channel);\n+    select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                release(channel, move buffer)\n+            }\n+        }\n+    };\n+}\n+\n+fn draw_two_frames(+channel: double_buffer::client::acquire) {\n+    let channel = request(channel);\n+    let channel = select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                release(channel, move buffer)\n+            }\n+        }\n+    };\n+    let channel = request(channel);\n+    select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                release(channel, move buffer)\n+            }\n+        }\n+    };\n+}\n+\n+#[cfg(bad1)]\n+fn draw_two_frames_bad1(+channel: double_buffer::client::acquire) {\n+    let channel = request(channel);\n+    let channel = select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                channel\n+            }\n+        }\n+    };\n+    let channel = request(channel);\n+    select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                release(channel, move buffer)\n+            }\n+        }\n+    };\n+}\n+\n+#[cfg(bad2)]\n+fn draw_two_frames_bad2(+channel: double_buffer::client::acquire) {\n+    let channel = request(channel);\n+    select! {\n+        channel => {\n+            give_buffer(buffer) -> channel {\n+                render(&buffer);\n+                release(channel, move buffer);\n+                render(&buffer);\n+                release(channel, move buffer);\n+            }\n+        }\n+    };\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}]}