{"sha": "fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjU0ODU3ZTZhYjlhOTg4MWU3MzUxNDI5ZmNkNGUxNTJhYTlkMGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-21T09:26:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-21T09:26:47Z"}, "message": "Merge #4963\n\n4963: Download artifacts into tmp dir r=matklad a=Veetaha\n\nThis should prevent partially downloaded files in cases when the user closes vsode before the download is complete.\r\nThere is also a new more descriptive error message when the user has multiple vscode windows open and tries to download the server.\r\nRelated: https://github.com/rust-analyzer/rust-analyzer/issues/4938#issuecomment-646738360\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "c7b047f49262cbe06be34c9d3554d71cf962d949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b047f49262cbe06be34c9d3554d71cf962d949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7yfXCRBK7hj4Ov3rIwAAdHIIAFpjjB+592mLR5jMzMVE2uw0\n/zL5BRLRFXKRfaF3FfCp/zaXI1locShd3kqmTjwc7rfWAaEKzFYvJhiVZtJmPZg+\nxlZdSG6RbBCVJ+AiWFL/07ZHmphgwCJQea+dLpk4JoKgE9joimkw3sgj7bnN3Dw+\ngv4YXHyAQ6e9c9CvCJxAJsEOgK87zeqIP7QeYOD+O1kj5HiEo9QJAceTeBzT06xF\n/NRY/Qm5zoWHiCtaQM8SGPuYNDnlrkkL9F45V4aSU1xHvhRj6D4fMWBAHBeFTRCO\nyX33Pf3X62N44EeaILuFTtjZk+egkaSfGPrlj6xety4hONh+HYNDDQMW5NjRnfk=\n=ehLg\n-----END PGP SIGNATURE-----\n", "payload": "tree c7b047f49262cbe06be34c9d3554d71cf962d949\nparent 04d64267de2c9ade61ae9fdbc98114599c11a2d7\nparent dceb81856eebc35856081587fac6339374c6e177\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592731607 +0000\ncommitter GitHub <noreply@github.com> 1592731607 +0000\n\nMerge #4963\n\n4963: Download artifacts into tmp dir r=matklad a=Veetaha\n\nThis should prevent partially downloaded files in cases when the user closes vsode before the download is complete.\r\nThere is also a new more descriptive error message when the user has multiple vscode windows open and tries to download the server.\r\nRelated: https://github.com/rust-analyzer/rust-analyzer/issues/4938#issuecomment-646738360\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "html_url": "https://github.com/rust-lang/rust/commit/fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe254857e6ab9a9881e7351429fcd4e152aa9d0d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04d64267de2c9ade61ae9fdbc98114599c11a2d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04d64267de2c9ade61ae9fdbc98114599c11a2d7", "html_url": "https://github.com/rust-lang/rust/commit/04d64267de2c9ade61ae9fdbc98114599c11a2d7"}, {"sha": "dceb81856eebc35856081587fac6339374c6e177", "url": "https://api.github.com/repos/rust-lang/rust/commits/dceb81856eebc35856081587fac6339374c6e177", "html_url": "https://github.com/rust-lang/rust/commit/dceb81856eebc35856081587fac6339374c6e177"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "670f2ebfd628f2f883a12943eccdfb68981b1236", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe254857e6ab9a9881e7351429fcd4e152aa9d0d/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fe254857e6ab9a9881e7351429fcd4e152aa9d0d/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "patch": "@@ -42,7 +42,16 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n-    const serverPath = await bootstrap(config, state);\n+    const serverPath = await bootstrap(config, state).catch(err => {\n+        let message = \"Failed to bootstrap rust-analyzer.\";\n+        if (err.code === \"EBUSY\" || err.code === \"ETXTBSY\") {\n+            message += \" Other vscode windows might be using rust-analyzer, \" +\n+                \"you should close them and reload this window to retry.\";\n+        }\n+        message += \" Open \\\"Help > Toggle Developer Tools > Console\\\" to see the logs\";\n+        log.error(\"Bootstrap error\", err);\n+        throw new Error(message);\n+    });\n \n     const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n     if (workspaceFolder === undefined) {\n@@ -285,6 +294,11 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     const artifact = release.assets.find(artifact => artifact.name === binaryName);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n+    // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n+    await fs.unlink(dest).catch(err => {\n+        if (err.code !== \"ENOENT\") throw err;\n+    });\n+\n     await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer server\", { mode: 0o755 });\n \n     // Patching executable if that's NixOS."}, {"sha": "0e7dd29c264c55d4a448125aa52ac7cd5e6fdd9b", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fe254857e6ab9a9881e7351429fcd4e152aa9d0d/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fe254857e6ab9a9881e7351429fcd4e152aa9d0d/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=fe254857e6ab9a9881e7351429fcd4e152aa9d0d", "patch": "@@ -1,7 +1,9 @@\n import fetch from \"node-fetch\";\n import * as vscode from \"vscode\";\n-import * as fs from \"fs\";\n import * as stream from \"stream\";\n+import * as fs from \"fs\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n import * as util from \"util\";\n import { log, assert } from \"./util\";\n \n@@ -87,7 +89,7 @@ export async function download(\n }\n \n /**\n- * Downloads file from `url` and stores it at `destFilePath` with `destFilePermissions`.\n+ * Downloads file from `url` and stores it at `destFilePath` with `mode` (unix permissions).\n  * `onProgress` callback is called on recieveing each chunk of bytes\n  * to track the progress of downloading, it gets the already read and total\n  * amount of bytes to read as its parameters.\n@@ -118,13 +120,46 @@ async function downloadFile(\n         onProgress(readBytes, totalBytes);\n     });\n \n-    const destFileStream = fs.createWriteStream(destFilePath, { mode });\n-\n-    await pipeline(res.body, destFileStream);\n-    return new Promise<void>(resolve => {\n-        destFileStream.on(\"close\", resolve);\n-        destFileStream.destroy();\n-        // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n-        // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n+    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n+    await withTempFile(async tempFilePath => {\n+        const destFileStream = fs.createWriteStream(tempFilePath, { mode });\n+        await pipeline(res.body, destFileStream);\n+        await new Promise<void>(resolve => {\n+            destFileStream.on(\"close\", resolve);\n+            destFileStream.destroy();\n+            // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n+            // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n+        });\n+        await moveFile(tempFilePath, destFilePath);\n     });\n }\n+\n+async function withTempFile(scope: (tempFilePath: string) => Promise<void>) {\n+    // Based on the great article: https://advancedweb.hu/secure-tempfiles-in-nodejs-without-dependencies/\n+\n+    // `.realpath()` should handle the cases where os.tmpdir() contains symlinks\n+    const osTempDir = await fs.promises.realpath(os.tmpdir());\n+\n+    const tempDir = await fs.promises.mkdtemp(path.join(osTempDir, \"rust-analyzer\"));\n+\n+    try {\n+        return await scope(path.join(tempDir, \"file\"));\n+    } finally {\n+        // We are good citizens :D\n+        void fs.promises.rmdir(tempDir, { recursive: true }).catch(log.error);\n+    }\n+};\n+\n+async function moveFile(src: fs.PathLike, dest: fs.PathLike) {\n+    try {\n+        await fs.promises.rename(src, dest);\n+    } catch (err) {\n+        if (err.code === 'EXDEV') {\n+            // We are probably moving the file across partitions/devices\n+            await fs.promises.copyFile(src, dest);\n+            await fs.promises.unlink(src);\n+        } else {\n+            log.error(`Failed to rename the file ${src} -> ${dest}`, err);\n+        }\n+    }\n+}"}]}