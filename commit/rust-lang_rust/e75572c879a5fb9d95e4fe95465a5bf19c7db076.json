{"sha": "e75572c879a5fb9d95e4fe95465a5bf19c7db076", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTU3MmM4NzlhNWZiOWQ5NWU0ZmU5NTQ2NWE1YmYxOWM3ZGIwNzY=", "commit": {"author": {"name": "Alexei Sholik", "email": "alcosholik@gmail.com", "date": "2013-06-06T07:38:41Z"}, "committer": {"name": "Alexei Sholik", "email": "alcosholik@gmail.com", "date": "2013-06-06T07:48:27Z"}, "message": "Deduplicate words in code comments", "tree": {"sha": "5e0f82a1394c2acc0429db7b1df8e51794e17a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0f82a1394c2acc0429db7b1df8e51794e17a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75572c879a5fb9d95e4fe95465a5bf19c7db076", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75572c879a5fb9d95e4fe95465a5bf19c7db076", "html_url": "https://github.com/rust-lang/rust/commit/e75572c879a5fb9d95e4fe95465a5bf19c7db076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75572c879a5fb9d95e4fe95465a5bf19c7db076/comments", "author": {"login": "alco", "id": 207748, "node_id": "MDQ6VXNlcjIwNzc0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/207748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alco", "html_url": "https://github.com/alco", "followers_url": "https://api.github.com/users/alco/followers", "following_url": "https://api.github.com/users/alco/following{/other_user}", "gists_url": "https://api.github.com/users/alco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alco/subscriptions", "organizations_url": "https://api.github.com/users/alco/orgs", "repos_url": "https://api.github.com/users/alco/repos", "events_url": "https://api.github.com/users/alco/events{/privacy}", "received_events_url": "https://api.github.com/users/alco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alco", "id": 207748, "node_id": "MDQ6VXNlcjIwNzc0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/207748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alco", "html_url": "https://github.com/alco", "followers_url": "https://api.github.com/users/alco/followers", "following_url": "https://api.github.com/users/alco/following{/other_user}", "gists_url": "https://api.github.com/users/alco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alco/subscriptions", "organizations_url": "https://api.github.com/users/alco/orgs", "repos_url": "https://api.github.com/users/alco/repos", "events_url": "https://api.github.com/users/alco/events{/privacy}", "received_events_url": "https://api.github.com/users/alco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b19b04cbde053f0cf7a15b989bc6546cd2e265", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b19b04cbde053f0cf7a15b989bc6546cd2e265", "html_url": "https://github.com/rust-lang/rust/commit/c7b19b04cbde053f0cf7a15b989bc6546cd2e265"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "0618e7aaf65c98c7d210b14d182c05297427505d", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -96,7 +96,7 @@ impl<'self> Condvar<'self> {\n \n     /**\n      * Wake up all blocked tasks on a specified condvar (as\n-     * sync::cond.broadcast_on). Returns Returns the number of tasks woken.\n+     * sync::cond.broadcast_on). Returns the number of tasks woken.\n      */\n     #[inline(always)]\n     pub fn broadcast_on(&self, condvar_id: uint) -> uint {"}, {"sha": "ebb0cdc120fbba525f1d7e0e9f912ed23ab543fb", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -19,7 +19,7 @@ use core::uint;\n use core::util::{swap, replace};\n \n // This is implemented as an AA tree, which is a simplified variation of\n-// a red-black tree where where red (horizontal) nodes can only be added\n+// a red-black tree where red (horizontal) nodes can only be added\n // as a right child. The time complexity is the same, and re-balancing\n // operations are more frequent but also cheaper.\n "}, {"sha": "30ddab01730720fe44ba921ee90c759830fd0d94", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -76,7 +76,7 @@ impl<'self> CheckLoanCtxt<'self> {\n                             scope_id: ast::node_id,\n                             op: &fn(&Loan) -> bool)\n                             -> bool {\n-        //! Iterates over each loan that that has been issued\n+        //! Iterates over each loan that has been issued\n         //! on entrance to `scope_id`, regardless of whether it is\n         //! actually *in scope* at that point.  Sometimes loans\n         //! are issued for future scopes and thus they may have been\n@@ -219,7 +219,7 @@ impl<'self> CheckLoanCtxt<'self> {\n                     self.bccx.span_err(\n                         new_loan.span,\n                         fmt!(\"cannot borrow `%s` as mutable \\\n-                              more than once at at a time\",\n+                              more than once at a time\",\n                              self.bccx.loan_path_to_str(new_loan.loan_path)));\n                     self.bccx.span_note(\n                         old_loan.span,"}, {"sha": "805d68214c33cf3ec70c7b864f82c61a94dfe911", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -40,7 +40,7 @@ mod gather_moves;\n \n /// Context used while gathering loans:\n ///\n-/// - `bccx`: the the borrow check context\n+/// - `bccx`: the borrow check context\n /// - `item_ub`: the id of the block for the enclosing fn/method item\n /// - `root_ub`: the id of the outermost block for which we can root\n ///   an `@T`.  This is the id of the innermost enclosing"}, {"sha": "3097be242a1ed7f59486fdc07359ba187a32a616", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -1113,7 +1113,7 @@ impl Liveness {\n           }\n \n           expr_again(opt_label) => {\n-              // Find which label this expr continues to to\n+              // Find which label this expr continues to\n               let sc = self.find_loop_scope(opt_label, expr.id, expr.span);\n \n               // Now that we know the label we're going to,"}, {"sha": "f1ebe88db0c6fd4f06b8b5be1314eb9eb40ae5df", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -206,7 +206,7 @@ pub enum RibKind {\n     FunctionRibKind(node_id /* func id */, node_id /* body id */),\n \n     // We passed through an impl or trait and are now in one of its\n-    // methods. Allow references to ty params that that impl or trait\n+    // methods. Allow references to ty params that impl or trait\n     // binds. Disallow any other upvars (including other ty params that are\n     // upvars).\n               // parent;   method itself"}, {"sha": "27d962d6cc7f6f1a10b9b245c2d2ff14fafc1ea0", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -374,7 +374,7 @@ pub fn trans_expr_fn(bcx: block,\n      * - `decl`\n      * - `body`\n      * - `outer_id`: The id of the closure expression with the correct\n-     *   type.  This is usually the same as as `user_id`, but in the\n+     *   type.  This is usually the same as `user_id`, but in the\n      *   case of a `for` loop, the `outer_id` will have the return\n      *   type of boolean, and the `user_id` will have the return type\n      *   of `nil`."}, {"sha": "597063d8fc39d928af9cb7983731fe232982d9ac", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -221,7 +221,7 @@ pub enum AutoRef {\n // implementations.\n //\n // This is a map from ID of each implementation to the method info and trait\n-// method ID of each of the default methods belonging to the trait that that\n+// method ID of each of the default methods belonging to the trait that\n // implementation implements.\n pub type ProvidedMethodsMap = @mut HashMap<def_id,@mut ~[@ProvidedMethodInfo]>;\n "}, {"sha": "18940bb89e14797649d711d4e85f09a3514b12b0", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -369,8 +369,7 @@ impl Coerce {\n \n         // although borrowed ptrs and unsafe ptrs have the same\n         // representation, we still register an AutoDerefRef so that\n-        // regionck knows that that the region for `a` must be valid\n-        // here\n+        // regionck knows that the region for `a` must be valid here\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 1,\n             autoref: Some(ty::AutoUnsafe(mt_b.mutbl))"}, {"sha": "a6334cc0c4964d08824347d77354af58c8ea4392", "filename": "src/libstd/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -33,7 +33,7 @@ if the first line of each crate was\n \n     extern mod core;\n \n-This means that the contents of core can be accessed from from any context\n+This means that the contents of core can be accessed from any context\n with the `core::` path prefix, as in `use core::vec`, `use core::task::spawn`,\n etc.\n "}, {"sha": "80905bdaeab7e32d08f9062217b3547a89b38ba5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -1411,7 +1411,7 @@ pub fn zip_slice<T:Copy,U:Copy>(v: &const [T], u: &const [U])\n /**\n  * Convert two vectors to a vector of pairs.\n  *\n- * Returns a vector of tuples, where the i-th tuple contains contains the\n+ * Returns a vector of tuples, where the i-th tuple contains the\n  * i-th elements from each of the input vectors.\n  */\n pub fn zip<T, U>(mut v: ~[T], mut u: ~[U]) -> ~[(T, U)] {"}, {"sha": "a6b67ccea9d2a171d5234554a91440b6b466f35b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -3093,7 +3093,7 @@ impl Parser {\n \n         self.expect(&token::LPAREN);\n \n-        // A bit of complexity and lookahead is needed here in order to to be\n+        // A bit of complexity and lookahead is needed here in order to be\n         // backwards compatible.\n         let lo = self.span.lo;\n         let explicit_self = match *self.token {"}, {"sha": "e871ee5c9bf88abf440bbae7295e4f4fd91693e2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -1672,7 +1672,7 @@ pub fn print_fn(s: @ps,\n \n pub fn print_fn_args(s: @ps, decl: &ast::fn_decl,\n                  opt_explicit_self: Option<ast::explicit_self_>) {\n-    // It is unfortunate to duplicate the commasep logic, but we we want the\n+    // It is unfortunate to duplicate the commasep logic, but we want the\n     // self type and the args all in the same box.\n     box(s, 0u, inconsistent);\n     let mut first = true;\n@@ -1919,7 +1919,7 @@ pub fn print_ty_fn(s: @ps,\n     zerobreak(s.s);\n \n     popen(s);\n-    // It is unfortunate to duplicate the commasep logic, but we we want the\n+    // It is unfortunate to duplicate the commasep logic, but we want the\n     // self type and the args all in the same box.\n     box(s, 0u, inconsistent);\n     let mut first = true;"}, {"sha": "1b2768208056733e26b657a19bb743a28bce3780", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -20,7 +20,7 @@\n \n \tEach Rust function contains an LLVM-generated prologue that\n \tcompares the stack space required for the current function to\n-\tthe space space remaining in the current stack segment,\n+\tthe space remaining in the current stack segment,\n \tmaintained in a platform-specific TLS slot.  The stack limit\n \tis strategically maintained by the Rust runtime so that it is\n \talways in place whenever a Rust function is running.\n@@ -55,7 +55,7 @@\n \ttiny fraction of a frame (containing just a return pointer\n \tand, on 32-bit, the arguments to __morestack).\n \n-\tWe deal with this by claiming that that little bit of stack\n+\tWe deal with this by claiming that little bit of stack\n \tis actually part of the __morestack frame, encoded as\n \tDWARF call frame instructions (CFI) by .cfi assembler\n \tpseudo-ops.\n@@ -119,7 +119,7 @@ MORESTACK:\n \t// telling the unwinder to consider the Canonical Frame\n \t// Address (CFA) for this frame to be the value of the stack\n \t// pointer prior to entry to the original function, whereas\n-\t// the CFA would typically be the the value of the stack\n+\t// the CFA would typically be the value of the stack\n \t// pointer prior to entry to this function. This will allow\n \t// the unwinder to understand how to skip the tiny partial\n \t// frame that the original function created by calling\n@@ -167,7 +167,7 @@ MORESTACK:\n \t// The arguments to upcall_new_stack\n \n \t// The size of the stack arguments to copy to the new stack,\n-\t// ane of the the arguments to __morestack\n+\t// and of the arguments to __morestack\n \tmovl 40(%esp),%eax\n \tmovl %eax,8(%esp)\n \t// The address of the stack arguments to the original function"}, {"sha": "c1c40222f1a3b096e0ddd828c236bc8e1e99fa9d", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -162,7 +162,7 @@ rust_kernel::release_scheduler_id(rust_sched_id id) {\n }\n \n /*\n-Called by rust_sched_reaper to join every every terminating scheduler thread,\n+Called by rust_sched_reaper to join every terminating scheduler thread,\n so that we can be sure they have completely exited before the process exits.\n If we don't join them then we can see valgrind errors due to un-freed pthread\n memory."}, {"sha": "982102cdde0cd3c2773bd02ccfcd3dfa2db4364a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -614,7 +614,7 @@ rust_task::prev_stack() {\n // The LLVM-generated segmented-stack function prolog compares the amount of\n // stack needed for each frame to the end-of-stack pointer stored in the\n // TCB. As an optimization, when the frame size is less than 256 bytes, it\n-// will simply compare %esp to to the stack limit instead of subtracting the\n+// will simply compare %esp to the stack limit instead of subtracting the\n // frame size. As a result we need our stack limit to account for those 256\n // bytes.\n const unsigned LIMIT_OFFSET = 256;"}, {"sha": "c011219ade8b4438ac67a7fc6ecc60bb38ff7d27", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -191,7 +191,7 @@ upcall_malloc(type_desc *td, uintptr_t size) {\n \n // FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n // autogenerated wrappers for upcall_malloc. Remove this when we fully move\n-// away away from the C upcall path.\n+// away from the C upcall path.\n extern \"C\" CDECL uintptr_t\n rust_upcall_malloc(type_desc *td, uintptr_t size) {\n     return upcall_malloc(td, size);"}, {"sha": "187f898f4ca0a7439718a4af99b6c7faf53615e0", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75572c879a5fb9d95e4fe95465a5bf19c7db076/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=e75572c879a5fb9d95e4fe95465a5bf19c7db076", "patch": "@@ -22,7 +22,7 @@\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n        url = \"http://rust-lang.org/src/extra\")];\n \n-// These are are attributes of the following mod\n+// These are attributes of the following mod\n #[attr1 = \"val\"]\n #[attr2 = \"val\"]\n mod test_first_item_in_file_mod {}"}]}