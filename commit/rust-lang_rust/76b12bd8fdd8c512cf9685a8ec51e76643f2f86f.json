{"sha": "76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjEyYmQ4ZmRkOGM1MTJjZjk2ODVhOGVjNTFlNzY2NDNmMmY4NmY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-20T01:33:22Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-28T20:50:52Z"}, "message": "Support run-fail ui tests", "tree": {"sha": "383aa6c8198fd014c84d3b4ed6545f44eea310af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383aa6c8198fd014c84d3b4ed6545f44eea310af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "html_url": "https://github.com/rust-lang/rust/commit/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "488381ce9ef0ceabe83b73127c659e5d38137df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/488381ce9ef0ceabe83b73127c659e5d38137df0", "html_url": "https://github.com/rust-lang/rust/commit/488381ce9ef0ceabe83b73127c659e5d38137df0"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "2358a065d62d1359d8b08ab67d4fc86fb06a9d83", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "patch": "@@ -100,6 +100,7 @@ pub enum PassMode {\n     Check,\n     Build,\n     Run,\n+    RunFail,\n }\n \n impl FromStr for PassMode {\n@@ -120,6 +121,7 @@ impl fmt::Display for PassMode {\n             PassMode::Check => \"check\",\n             PassMode::Build => \"build\",\n             PassMode::Run => \"run\",\n+            PassMode::RunFail => \"run-fail\",\n         };\n         fmt::Display::fmt(s, f)\n     }"}, {"sha": "df56448dd225df39686f1ef541cb395776f8ee5d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "patch": "@@ -610,6 +610,11 @@ impl TestProps {\n                 panic!(\"`run-pass` header is only supported in UI tests\")\n             }\n             Some(PassMode::Run)\n+        } else if config.parse_name_directive(ln, \"run-fail\") {\n+            if config.mode != Mode::Ui {\n+                panic!(\"`run-fail` header is only supported in UI tests\")\n+            }\n+            Some(PassMode::RunFail)\n         } else {\n             None\n         };"}, {"sha": "ea31f37c7a52b7c44a756d088a9c288b39f481d2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b12bd8fdd8c512cf9685a8ec51e76643f2f86f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=76b12bd8fdd8c512cf9685a8ec51e76643f2f86f", "patch": "@@ -326,6 +326,14 @@ impl<'test> TestCx<'test> {\n         self.props.pass_mode(self.config)\n     }\n \n+    fn should_run(&self) -> bool {\n+        let pass_mode = self.pass_mode();\n+        match self.config.mode {\n+            Ui => pass_mode == Some(PassMode::Run) || pass_mode == Some(PassMode::RunFail),\n+            mode => panic!(\"unimplemented for mode {:?}\", mode),\n+        }\n+    }\n+\n     fn should_run_successfully(&self) -> bool {\n         let pass_mode = self.pass_mode();\n         match self.config.mode {\n@@ -1534,7 +1542,7 @@ impl<'test> TestCx<'test> {\n     fn compile_test(&self) -> ProcRes {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let will_execute = match self.config.mode {\n-            Ui => self.should_run_successfully(),\n+            Ui => self.should_run(),\n             Incremental => self.revision.unwrap().starts_with(\"r\"),\n             RunFail | RunPassValgrind | MirOpt |\n             DebugInfoCdb | DebugInfoGdbLldb | DebugInfoGdb | DebugInfoLldb => true,\n@@ -3107,7 +3115,7 @@ impl<'test> TestCx<'test> {\n \n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n \n-        if self.should_run_successfully() {\n+        if self.should_run() {\n             let proc_res = self.exec_compiled_test();\n             let run_output_errors = if self.props.check_run_results {\n                 self.load_compare_outputs(&proc_res, TestOutput::Run, explicit)\n@@ -3120,8 +3128,14 @@ impl<'test> TestCx<'test> {\n                     &proc_res,\n                 );\n             }\n-            if !proc_res.status.success() {\n-                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+            if self.should_run_successfully() {\n+                if !proc_res.status.success() {\n+                    self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+                }\n+            } else {\n+                if proc_res.status.success() {\n+                    self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n+                }\n             }\n         }\n "}]}