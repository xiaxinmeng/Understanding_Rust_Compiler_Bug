{"sha": "c12b700e87b702691f49393d3b520011995d71f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMmI3MDBlODdiNzAyNjkxZjQ5MzkzZDNiNTIwMDExOTk1ZDcxZjM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-09-05T06:56:10Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-09-05T07:16:57Z"}, "message": "Rustup \"Minimize uses of `LocalInternedString`\"", "tree": {"sha": "e1884b54fc59b4731c2cc0eb4bf85e33c185fd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1884b54fc59b4731c2cc0eb4bf85e33c185fd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12b700e87b702691f49393d3b520011995d71f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12b700e87b702691f49393d3b520011995d71f3", "html_url": "https://github.com/rust-lang/rust/commit/c12b700e87b702691f49393d3b520011995d71f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12b700e87b702691f49393d3b520011995d71f3/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abbb7ee12f9eca4ea21d484c052d7f1cbc73b7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/abbb7ee12f9eca4ea21d484c052d7f1cbc73b7c2", "html_url": "https://github.com/rust-lang/rust/commit/abbb7ee12f9eca4ea21d484c052d7f1cbc73b7c2"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "a4b411d751998ec3f897373929ee52190d40c9f5", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=c12b700e87b702691f49393d3b520011995d71f3", "patch": "@@ -319,7 +319,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n             let name = meta_item.path.segments.last().unwrap().ident.name;\n             if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(\n                 &name.as_str(),\n-                Some(tool_name.as_str()),\n+                Some(tool_name.name),\n             );\n             then {\n                 span_lint_and_then(\n@@ -332,7 +332,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                             let name_lower = name.as_str().to_lowercase();\n                             match lint_store.check_lint_name(\n                                 &name_lower,\n-                                Some(tool_name.as_str())\n+                                Some(tool_name.name)\n                             ) {\n                                 // FIXME: can we suggest similar lint names here?\n                                 // https://github.com/rust-lang/rust/pull/56992"}, {"sha": "b01ce7eeb77d4c8d5d346f0ff750f0ba32a263fa", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=c12b700e87b702691f49393d3b520011995d71f3", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for consecutive `if`s with the same condition.\n@@ -168,8 +168,8 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr) {\n     fn same_bindings<'tcx>(\n         cx: &LateContext<'_, 'tcx>,\n-        lhs: &FxHashMap<LocalInternedString, Ty<'tcx>>,\n-        rhs: &FxHashMap<LocalInternedString, Ty<'tcx>>,\n+        lhs: &FxHashMap<Symbol, Ty<'tcx>>,\n+        rhs: &FxHashMap<Symbol, Ty<'tcx>>,\n     ) -> bool {\n         lhs.len() == rhs.len()\n             && lhs\n@@ -275,12 +275,8 @@ fn if_sequence(mut expr: &Expr) -> (SmallVec<[&Expr; 1]>, SmallVec<[&Block; 1]>)\n }\n \n /// Returns the list of bindings in a pattern.\n-fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalInternedString, Ty<'tcx>> {\n-    fn bindings_impl<'a, 'tcx>(\n-        cx: &LateContext<'a, 'tcx>,\n-        pat: &Pat,\n-        map: &mut FxHashMap<LocalInternedString, Ty<'tcx>>,\n-    ) {\n+fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<Symbol, Ty<'tcx>> {\n+    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut FxHashMap<Symbol, Ty<'tcx>>) {\n         match pat.node {\n             PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => bindings_impl(cx, pat, map),\n             PatKind::TupleStruct(_, ref pats, _) => {\n@@ -289,7 +285,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                 }\n             },\n             PatKind::Binding(.., ident, ref as_pat) => {\n-                if let Entry::Vacant(v) = map.entry(ident.as_str()) {\n+                if let Entry::Vacant(v) = map.entry(ident.name) {\n                     v.insert(cx.tables.pat_ty(pat));\n                 }\n                 if let Some(ref as_pat) = *as_pat {"}, {"sha": "e24d5d72e73ea78543106a6cf125b8a7a0968414", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=c12b700e87b702691f49393d3b520011995d71f3", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::*;\n use syntax::source_map::Span;\n-use syntax::symbol::{InternedString, LocalInternedString};\n+use syntax::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n@@ -102,7 +102,7 @@ declare_clippy_lint! {\n }\n \n pub struct EnumVariantNames {\n-    modules: Vec<(InternedString, String)>,\n+    modules: Vec<(Symbol, String)>,\n     threshold: u64,\n }\n \n@@ -122,10 +122,6 @@ impl_lint_pass!(EnumVariantNames => [\n     MODULE_INCEPTION\n ]);\n \n-fn var2str(var: &Variant) -> LocalInternedString {\n-    var.ident.as_str()\n-}\n-\n /// Returns the number of chars that match from the start\n fn partial_match(pre: &str, name: &str) -> usize {\n     let mut name_iter = name.chars();\n@@ -157,7 +153,7 @@ fn check_variant(\n         return;\n     }\n     for var in &def.variants {\n-        let name = var2str(var);\n+        let name = var.ident.name.as_str();\n         if partial_match(item_name, &name) == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n@@ -168,11 +164,11 @@ fn check_variant(\n             span_lint(cx, lint, var.span, \"Variant name ends with the enum's name\");\n         }\n     }\n-    let first = var2str(&def.variants[0]);\n+    let first = &def.variants[0].ident.name.as_str();\n     let mut pre = &first[..camel_case::until(&*first)];\n     let mut post = &first[camel_case::from(&*first)..];\n     for var in &def.variants {\n-        let name = var2str(var);\n+        let name = var.ident.name.as_str();\n \n         let pre_match = partial_match(pre, &name);\n         pre = &pre[..pre_match];\n@@ -245,14 +241,14 @@ impl EarlyLintPass for EnumVariantNames {\n \n     #[allow(clippy::similar_names)]\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        let item_name = item.ident.as_str();\n+        let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n         if !item.span.from_expansion() && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {\n-                    if mod_name.as_symbol() == item.ident.name {\n+                    if mod_name == &item.ident.name {\n                         if let ItemKind::Mod(..) = item.node {\n                             span_lint(\n                                 cx,\n@@ -299,6 +295,6 @@ impl EarlyLintPass for EnumVariantNames {\n             };\n             check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span, lint);\n         }\n-        self.modules.push((item_name.as_interned_str(), item_camel));\n+        self.modules.push((item.ident.name, item_camel));\n     }\n }"}, {"sha": "8323078df7e9e34fd60cecfe44b4d9c99b12cbc2", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12b700e87b702691f49393d3b520011995d71f3/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=c12b700e87b702691f49393d3b520011995d71f3", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unused labels.\n@@ -28,7 +28,7 @@ declare_clippy_lint! {\n }\n \n struct UnusedLabelVisitor<'a, 'tcx> {\n-    labels: FxHashMap<LocalInternedString, Span>,\n+    labels: FxHashMap<Symbol, Span>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n@@ -65,11 +65,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n         match expr.node {\n             hir::ExprKind::Break(destination, _) | hir::ExprKind::Continue(destination) => {\n                 if let Some(label) = destination.label {\n-                    self.labels.remove(&label.ident.as_str());\n+                    self.labels.remove(&label.ident.name);\n                 }\n             },\n             hir::ExprKind::Loop(_, Some(label), _) => {\n-                self.labels.insert(label.ident.as_str(), expr.span);\n+                self.labels.insert(label.ident.name, expr.span);\n             },\n             _ => (),\n         }"}]}