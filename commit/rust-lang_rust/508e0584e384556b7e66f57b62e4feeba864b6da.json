{"sha": "508e0584e384556b7e66f57b62e4feeba864b6da", "node_id": "C_kwDOAAsO6NoAKDUwOGUwNTg0ZTM4NDU1NmI3ZTY2ZjU3YjYyZTRmZWViYTg2NGI2ZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T13:10:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T13:10:21Z"}, "message": "Auto merge of #96376 - scottmcm:do-yeet, r=oli-obk\n\nAdd `do yeet` expressions to allow experimentation in nightly\n\nTwo main goals for this:\n- Ensure that trait restructuring in https://github.com/rust-lang/rust/issues/84277#issuecomment-1066120333 doesn't accidentally close us off from the possibility of doing this in future, as sketched in https://rust-lang.github.io/rfcs/3058-try-trait-v2.html#possibilities-for-yeet\n- Experiment with the *existence* of syntax for this, to be able to weight the syntax-vs-library tradeoffs better than we can right now.  Notably the syntax (with `do`) and name in this PR are not intended as candidates for stabilization, but they make a good v0 PR for adding this with minimal impact to compiler maintenance or priming one possible name choice over another.\n\nr? `@oli-obk`\nThe lang `second` for doing this: https://github.com/rust-lang/lang-team/issues/160#issuecomment-1107896716\n\nTracking issues\n- Lang, https://github.com/rust-lang/rust/issues/96373\n- Libs-api, https://github.com/rust-lang/rust/issues/96374", "tree": {"sha": "1d17b65bf57ed67312cb5232af75b6d21e72dc65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d17b65bf57ed67312cb5232af75b6d21e72dc65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508e0584e384556b7e66f57b62e4feeba864b6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508e0584e384556b7e66f57b62e4feeba864b6da", "html_url": "https://github.com/rust-lang/rust/commit/508e0584e384556b7e66f57b62e4feeba864b6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508e0584e384556b7e66f57b62e4feeba864b6da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637b3f68079fc81db9bfd2c0f8f306c892680d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/637b3f68079fc81db9bfd2c0f8f306c892680d25", "html_url": "https://github.com/rust-lang/rust/commit/637b3f68079fc81db9bfd2c0f8f306c892680d25"}, {"sha": "b317ec1697fa3d8d095ea99b7180ae6eab9f77af", "url": "https://api.github.com/repos/rust-lang/rust/commits/b317ec1697fa3d8d095ea99b7180ae6eab9f77af", "html_url": "https://github.com/rust-lang/rust/commit/b317ec1697fa3d8d095ea99b7180ae6eab9f77af"}], "stats": {"total": 324, "additions": 303, "deletions": 21}, "files": [{"sha": "1a18d1964c9782edbfb8abff4acb13a1cdc63603", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -1275,6 +1275,7 @@ impl Expr {\n             ExprKind::Paren(..) => ExprPrecedence::Paren,\n             ExprKind::Try(..) => ExprPrecedence::Try,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n+            ExprKind::Yeet(..) => ExprPrecedence::Yeet,\n             ExprKind::Err => ExprPrecedence::Err,\n         }\n     }\n@@ -1462,6 +1463,10 @@ pub enum ExprKind {\n     /// A `yield`, with an optional value to be yielded.\n     Yield(Option<P<Expr>>),\n \n+    /// A `do yeet` (aka `throw`/`fail`/`bail`/`raise`/whatever),\n+    /// with an optional value to be returned.\n+    Yeet(Option<P<Expr>>),\n+\n     /// Placeholder for an expression that wasn't syntactically well formed in some way.\n     Err,\n }"}, {"sha": "4bf3d483f7358f4bb22036df89fd9c14dd362ad0", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -1394,6 +1394,9 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::Ret(expr) => {\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n+        ExprKind::Yeet(expr) => {\n+            visit_opt(expr, |expr| vis.visit_expr(expr));\n+        }\n         ExprKind::InlineAsm(asm) => vis.visit_inline_asm(asm),\n         ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(se) => {"}, {"sha": "74b7fe9e249552eb3519176f0d8f7b6a045d7d61", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -247,6 +247,7 @@ pub enum ExprPrecedence {\n     Continue,\n     Ret,\n     Yield,\n+    Yeet,\n \n     Range,\n \n@@ -299,7 +300,8 @@ impl ExprPrecedence {\n             ExprPrecedence::Break |\n             ExprPrecedence::Continue |\n             ExprPrecedence::Ret |\n-            ExprPrecedence::Yield => PREC_JUMP,\n+            ExprPrecedence::Yield |\n+            ExprPrecedence::Yeet => PREC_JUMP,\n \n             // `Range` claims to have higher precedence than `Assign`, but `x .. x = x` fails to\n             // parse, instead of parsing as `(x .. x) = x`.  Giving `Range` a lower precedence"}, {"sha": "fa26716083f86c3436d7631480cf12eef64ecce7", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -893,6 +893,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n+        ExprKind::Yeet(ref optional_expression) => {\n+            walk_list!(visitor, visit_expr, optional_expression);\n+        }\n         ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(ref asm) => walk_inline_asm(visitor, asm),"}, {"sha": "5c3e3be21167a525df9d53688938e286b7bf4cd0", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -221,6 +221,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let e = e.as_ref().map(|x| self.lower_expr(x));\n                     hir::ExprKind::Ret(e)\n                 }\n+                ExprKind::Yeet(ref sub_expr) => self.lower_expr_yeet(e.span, sub_expr.as_deref()),\n                 ExprKind::InlineAsm(ref asm) => {\n                     hir::ExprKind::InlineAsm(self.lower_inline_asm(e.span, asm))\n                 }\n@@ -1543,6 +1544,44 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         )\n     }\n \n+    /// Desugar `ExprKind::Yeet` from: `do yeet <expr>` into:\n+    /// ```rust\n+    /// // If there is an enclosing `try {...}`:\n+    /// break 'catch_target FromResidual::from_residual(Yeet(residual)),\n+    /// // Otherwise:\n+    /// return FromResidual::from_residual(Yeet(residual)),\n+    /// ```\n+    /// But to simplify this, there's a `from_yeet` lang item function which\n+    /// handles the combined `FromResidual::from_residual(Yeet(residual))`.\n+    fn lower_expr_yeet(&mut self, span: Span, sub_expr: Option<&Expr>) -> hir::ExprKind<'hir> {\n+        // The expression (if present) or `()` otherwise.\n+        let (yeeted_span, yeeted_expr) = if let Some(sub_expr) = sub_expr {\n+            (sub_expr.span, self.lower_expr(sub_expr))\n+        } else {\n+            (self.mark_span_with_reason(DesugaringKind::YeetExpr, span, None), self.expr_unit(span))\n+        };\n+\n+        let unstable_span = self.mark_span_with_reason(\n+            DesugaringKind::YeetExpr,\n+            span,\n+            self.allow_try_trait.clone(),\n+        );\n+\n+        let from_yeet_expr = self.wrap_in_try_constructor(\n+            hir::LangItem::TryTraitFromYeet,\n+            unstable_span,\n+            yeeted_expr,\n+            yeeted_span,\n+        );\n+\n+        if let Some(catch_node) = self.catch_scope {\n+            let target_id = Ok(self.lower_node_id(catch_node));\n+            hir::ExprKind::Break(hir::Destination { label: None, target_id }, Some(from_yeet_expr))\n+        } else {\n+            hir::ExprKind::Ret(Some(from_yeet_expr))\n+        }\n+    }\n+\n     // =========================================================================\n     // Helper methods for building HIR.\n     // ========================================================================="}, {"sha": "5a95e5b084ad42b8ab9daf89c70527bde997dbae", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             task_context: None,\n             current_item: None,\n             captured_lifetimes: None,\n-            allow_try_trait: Some([sym::try_trait_v2][..].into()),\n+            allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),\n             allow_gen_future: Some([sym::gen_future][..].into()),\n             allow_into_future: Some([sym::into_future][..].into()),\n         };"}, {"sha": "0e8af549692fc2f9e42e85125e936edce4cd2e8a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -783,6 +783,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(inline_const, \"inline-const is experimental\");\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n     gate_all!(associated_const_equality, \"associated const equality is incomplete\");\n+    gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "9f44f1b6cc205f927d7825490aff4b69cbd9469c", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -64,7 +64,10 @@ impl<'a> State<'a> {\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`.\n     pub(super) fn cond_needs_par(expr: &ast::Expr) -> bool {\n         match expr.kind {\n-            ast::ExprKind::Break(..) | ast::ExprKind::Closure(..) | ast::ExprKind::Ret(..) => true,\n+            ast::ExprKind::Break(..)\n+            | ast::ExprKind::Closure(..)\n+            | ast::ExprKind::Ret(..)\n+            | ast::ExprKind::Yeet(..) => true,\n             _ => parser::contains_exterior_struct_lit(expr),\n         }\n     }\n@@ -502,6 +505,15 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                 }\n             }\n+            ast::ExprKind::Yeet(ref result) => {\n+                self.word(\"do\");\n+                self.word(\" \");\n+                self.word(\"yeet\");\n+                if let Some(ref expr) = *result {\n+                    self.word(\" \");\n+                    self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n+                }\n+            }\n             ast::ExprKind::InlineAsm(ref a) => {\n                 self.word(\"asm!\");\n                 self.print_inline_asm(a);"}, {"sha": "9159d60463c4c003e5cf8ba0a83db1b441f79b7e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -544,6 +544,8 @@ declare_features! (\n     (active, used_with_arg, \"1.60.0\", Some(93798), None),\n     /// Allows `extern \"wasm\" fn`\n     (active, wasm_abi, \"1.53.0\", Some(83788), None),\n+    /// Allows `do yeet` expressions\n+    (active, yeet_expr, \"1.62.0\", Some(96373), None),\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n     // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!"}, {"sha": "b3c22d4ec213d3864f0aaa3972b0ef6603fecf85", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -293,6 +293,7 @@ language_item_table! {\n     TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;"}, {"sha": "6114e7aaa7bd7bc784c84d5a82502c651763ebae", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -1374,6 +1374,8 @@ impl<'a> Parser<'a> {\n             self.parse_break_expr(attrs)\n         } else if self.eat_keyword(kw::Yield) {\n             self.parse_yield_expr(attrs)\n+        } else if self.is_do_yeet() {\n+            self.parse_yeet_expr(attrs)\n         } else if self.eat_keyword(kw::Let) {\n             self.parse_let_expr(attrs)\n         } else if self.eat_keyword(kw::Underscore) {\n@@ -1605,6 +1607,21 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    /// Parse `\"do\" \"yeet\" expr?`.\n+    fn parse_yeet_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+\n+        self.bump(); // `do`\n+        self.bump(); // `yeet`\n+\n+        let kind = ExprKind::Yeet(self.parse_expr_opt()?);\n+\n+        let span = lo.to(self.prev_token.span);\n+        self.sess.gated_spans.gate(sym::yeet_expr, span);\n+        let expr = self.mk_expr(span, kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Parse `\"break\" (('label (:? expr)?) | expr?)` with `\"break\"` token already eaten.\n     /// If the label is followed immediately by a `:` token, the label and `:` are\n     /// parsed as part of the expression (i.e. a labeled loop). The language team has\n@@ -2676,6 +2693,10 @@ impl<'a> Parser<'a> {\n             && !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n \n+    fn is_do_yeet(&self) -> bool {\n+        self.token.is_keyword(kw::Do) && self.is_keyword_ahead(1, &[kw::Yeet])\n+    }\n+\n     fn is_try_block(&self) -> bool {\n         self.token.is_keyword(kw::Try)\n             && self.look_ahead(1, |t| *t == token::OpenDelim(Delimiter::Brace))"}, {"sha": "447b73fa3c3ce484b5274a7ebaeaf14451b6b89b", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -1132,6 +1132,7 @@ pub enum DesugaringKind {\n     CondTemporary,\n     QuestionMark,\n     TryBlock,\n+    YeetExpr,\n     /// Desugaring of an `impl Trait` in return type position\n     /// to an `type Foo = impl Trait;` and replacing the\n     /// `impl Trait` with `Foo`.\n@@ -1152,6 +1153,7 @@ impl DesugaringKind {\n             DesugaringKind::Await => \"`await` expression\",\n             DesugaringKind::QuestionMark => \"operator `?`\",\n             DesugaringKind::TryBlock => \"`try` block\",\n+            DesugaringKind::YeetExpr => \"`do yeet` expression\",\n             DesugaringKind::OpaqueTy => \"`impl Trait`\",\n             DesugaringKind::ForLoop => \"`for` loop\",\n             DesugaringKind::LetElse => \"`let...else`\","}, {"sha": "c1299c94c4bb395395f04632dd0edc9ed4c3c222", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -101,6 +101,7 @@ symbols! {\n         MacroRules:         \"macro_rules\",\n         Raw:                \"raw\",\n         Union:              \"union\",\n+        Yeet:               \"yeet\",\n     }\n \n     // Pre-interned symbols that can be referred to with `rustc_span::sym::*`.\n@@ -714,6 +715,7 @@ symbols! {\n         from_residual,\n         from_size_align_unchecked,\n         from_usize,\n+        from_yeet,\n         fsub_fast,\n         fundamental,\n         future,\n@@ -1534,6 +1536,8 @@ symbols! {\n         x87_reg,\n         xer,\n         xmm_reg,\n+        yeet_desugar_details,\n+        yeet_expr,\n         ymm_reg,\n         zmm_reg,\n     }"}, {"sha": "31c1a1d099dc6e9852b265200486060ce1be6966", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -187,6 +187,9 @@ pub use self::range::OneSidedRange;\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::{FromResidual, Try};\n \n+#[unstable(feature = \"try_trait_v2_yeet\", issue = \"96374\")]\n+pub use self::try_trait::Yeet;\n+\n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n pub use self::try_trait::Residual;\n "}, {"sha": "3eaee958b69bd730a16f731b63b1665496596b22", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -330,6 +330,22 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"yeet_desugar_details\",\n+    issue = \"none\",\n+    reason = \"just here to simplify the desugaring; will never be stabilized\"\n+)]\n+#[inline]\n+#[track_caller] // because `Result::from_residual` has it\n+#[lang = \"from_yeet\"]\n+pub fn from_yeet<T, Y>(yeeted: Y) -> T\n+where\n+    T: FromResidual<Yeet<Y>>,\n+{\n+    FromResidual::from_residual(Yeet(yeeted))\n+}\n+\n /// Allows retrieving the canonical type implementing [`Try`] that has this type\n /// as its residual and allows it to hold an `O` as its output.\n ///\n@@ -395,3 +411,9 @@ impl<T> FromResidual for NeverShortCircuit<T> {\n impl<T> Residual<T> for NeverShortCircuitResidual {\n     type TryType = NeverShortCircuit<T>;\n }\n+\n+/// Implement `FromResidual<Yeet<T>>` on your type to enable\n+/// `do yeet expr` syntax in functions returning your type.\n+#[unstable(feature = \"try_trait_v2_yeet\", issue = \"96374\")]\n+#[derive(Debug)]\n+pub struct Yeet<T>(pub T);"}, {"sha": "f339b076dd7d083a961a64dae88b806774ff7cc4", "filename": "library/core/src/option.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -2287,6 +2287,14 @@ impl<T> const ops::FromResidual for Option<T> {\n     }\n }\n \n+#[unstable(feature = \"try_trait_v2_yeet\", issue = \"96374\")]\n+impl<T> ops::FromResidual<ops::Yeet<()>> for Option<T> {\n+    #[inline]\n+    fn from_residual(ops::Yeet(()): ops::Yeet<()>) -> Self {\n+        None\n+    }\n+}\n+\n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n impl<T> ops::Residual<T> for Option<convert::Infallible> {\n     type TryType = Option<T>;"}, {"sha": "5e5f8a5ab954388880004cf63f4bb4bd763e9e19", "filename": "library/core/src/result.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -2107,6 +2107,14 @@ impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible\n     }\n }\n \n+#[unstable(feature = \"try_trait_v2_yeet\", issue = \"96374\")]\n+impl<T, E, F: From<E>> ops::FromResidual<ops::Yeet<E>> for Result<T, F> {\n+    #[inline]\n+    fn from_residual(ops::Yeet(e): ops::Yeet<E>) -> Self {\n+        Err(From::from(e))\n+    }\n+}\n+\n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {\n     type TryType = Result<T, E>;"}, {"sha": "bc1ba4c916b64b26f38fbccc6eeba88a1f47dcf1", "filename": "src/doc/unstable-book/src/language-features/yeet-expr.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fyeet-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fyeet-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fyeet-expr.md?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,26 @@\n+# `yeet_expr`\n+\n+The tracking issue for this feature is: [#96373]\n+\n+[#96373]: https://github.com/rust-lang/rust/issues/96373\n+\n+------------------------\n+\n+The `yeet_expr` feature adds support for `do yeet` expressions,\n+which can be used to early-exit from a function or `try` block.\n+\n+These are highly experimental, thus the placeholder syntax.\n+\n+```rust,edition2021\n+#![feature(yeet_expr)]\n+\n+fn foo() -> Result<String, i32> {\n+    do yeet 4;\n+}\n+assert_eq!(foo(), Err(4));\n+\n+fn bar() -> Option<String> {\n+    do yeet;\n+}\n+assert_eq!(bar(), None);\n+```"}, {"sha": "c899f11b7240e57a896e3965d6f82eb37ea6f547", "filename": "src/test/pretty/yeet-expr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fpretty%2Fyeet-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fpretty%2Fyeet-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fyeet-expr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,12 @@\n+// pp-exact\n+#![feature(yeet_expr)]\n+\n+fn yeet_no_expr() -> Option<String> { do yeet }\n+\n+fn yeet_no_expr_with_semicolon() -> Option<String> { do yeet; }\n+\n+fn yeet_with_expr() -> Result<String, i32> { do yeet 1 + 2 }\n+\n+fn yeet_with_expr_with_semicolon() -> Result<String, i32> { do yeet 1 + 2; }\n+\n+fn main() {}"}, {"sha": "a33bd34508c5f63401fefcc530a672bd56a24371", "filename": "src/test/ui/feature-gates/feature-gate-yeet_expr-in-cfg.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: --edition 2021\n+\n+pub fn demo() -> Option<i32> {\n+    #[cfg(nope)]\n+    {\n+        do yeet //~ ERROR `do yeet` expression is experimental\n+    }\n+\n+    Some(1)\n+}\n+\n+#[cfg(nope)]\n+pub fn alternative() -> Result<(), String> {\n+    do yeet \"hello\"; //~ ERROR `do yeet` expression is experimental\n+}\n+\n+fn main() {\n+    demo();\n+}"}, {"sha": "f90c379bdafe3efeeb3818ddcd7f54f8b051e4f5", "filename": "src/test/ui/feature-gates/feature-gate-yeet_expr-in-cfg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr-in-cfg.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `do yeet` expression is experimental\n+  --> $DIR/feature-gate-yeet_expr-in-cfg.rs:6:9\n+   |\n+LL |         do yeet\n+   |         ^^^^^^^\n+   |\n+   = note: see issue #96373 <https://github.com/rust-lang/rust/issues/96373> for more information\n+   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable\n+\n+error[E0658]: `do yeet` expression is experimental\n+  --> $DIR/feature-gate-yeet_expr-in-cfg.rs:14:5\n+   |\n+LL |     do yeet \"hello\";\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96373 <https://github.com/rust-lang/rust/issues/96373> for more information\n+   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "978a84cf6e5f04774951110f926ba9da4b9ad3cf", "filename": "src/test/ui/feature-gates/feature-gate-yeet_expr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --edition 2018\n+\n+pub fn demo() -> Option<i32> {\n+    do yeet //~ ERROR `do yeet` expression is experimental\n+}\n+\n+pub fn main() -> Result<(), String> {\n+    do yeet \"hello\"; //~ ERROR `do yeet` expression is experimental\n+}"}, {"sha": "8d1b92370fbe2a0cbe44b273b9a45ec3a27355cc", "filename": "src/test/ui/feature-gates/feature-gate-yeet_expr.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-yeet_expr.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `do yeet` expression is experimental\n+  --> $DIR/feature-gate-yeet_expr.rs:4:5\n+   |\n+LL |     do yeet\n+   |     ^^^^^^^\n+   |\n+   = note: see issue #96373 <https://github.com/rust-lang/rust/issues/96373> for more information\n+   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable\n+\n+error[E0658]: `do yeet` expression is experimental\n+  --> $DIR/feature-gate-yeet_expr.rs:8:5\n+   |\n+LL |     do yeet \"hello\";\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96373 <https://github.com/rust-lang/rust/issues/96373> for more information\n+   = help: add `#![feature(yeet_expr)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9b822714f828a71a446fb169782482e6a0deb58c", "filename": "src/test/ui/inference/question-mark-type-infer.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fquestion-mark-type-infer.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -1,15 +1,9 @@\n-error[E0284]: type annotations needed\n-  --> $DIR/question-mark-type-infer.rs:10:21\n+error[E0282]: type annotations needed\n+  --> $DIR/question-mark-type-infer.rs:10:30\n    |\n LL |     l.iter().map(f).collect()?\n-   |                     ^^^^^^^ cannot infer type\n-   |\n-   = note: cannot satisfy `<_ as Try>::Residual == _`\n-help: consider specifying the type argument in the method call\n-   |\n-LL |     l.iter().map(f).collect::<B>()?\n-   |                            +++++\n+   |                              ^ cannot infer type\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0284`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "112cb3359322383d564ee0659ab910ccaf6b3574", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -7,7 +7,9 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n \n error: aborting due to previous error"}, {"sha": "1dbf3ebdf827cea0f6d3d28958194a40fa600213", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -31,7 +31,9 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n \n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n@@ -44,7 +46,9 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n@@ -57,7 +61,9 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n-   = help: the trait `FromResidual` is implemented for `Option<T>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Option<T> as FromResidual<Yeet<()>>>\n+             <Option<T> as FromResidual>\n \n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n@@ -70,7 +76,9 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n-   = help: the trait `FromResidual` is implemented for `Option<T>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Option<T> as FromResidual<Yeet<()>>>\n+             <Option<T> as FromResidual>\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39"}, {"sha": "ae5c3ad628281c3968e19bcbf79b15b1a32f23f0", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -10,7 +10,9 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n@@ -24,7 +26,9 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n-   = help: the trait `FromResidual` is implemented for `Option<T>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Option<T> as FromResidual<Yeet<()>>>\n+             <Option<T> as FromResidual>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba85a7cada2329668ec3bebd3a3f3bb3a4fb05ba", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -10,7 +10,9 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:11:6"}, {"sha": "753fbc1dee7d7c2adf1070264543864945f59331", "filename": "src/test/ui/try-trait/yeet-for-option.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-option.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(yeet_expr)]\n+\n+fn always_yeet() -> Option<String> {\n+    do yeet;\n+}\n+\n+fn main() {\n+    assert_eq!(always_yeet(), None);\n+}"}, {"sha": "b7b113797cde4590babb6118719c232c368edd0c", "filename": "src/test/ui/try-trait/yeet-for-result.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fyeet-for-result.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(yeet_expr)]\n+\n+fn always_yeet() -> Result<i32, String> {\n+    do yeet \"hello\";\n+}\n+\n+fn main() {\n+    assert_eq!(always_yeet(), Err(\"hello\".to_string()));\n+}"}, {"sha": "794d2e1026f8c7013de5515b02b2610ddace3365", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -214,6 +214,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Path(..)\n             | ast::ExprKind::Repeat(..)\n             | ast::ExprKind::Ret(..)\n+            | ast::ExprKind::Yeet(..)\n             | ast::ExprKind::Struct(..)\n             | ast::ExprKind::Try(..)\n             | ast::ExprKind::TryBlock(..)"}, {"sha": "e4cc93026f10bb552b89514ce87d5098d87352ed", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -225,6 +225,10 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Ret(Some(ref expr)) => {\n             rewrite_unary_prefix(context, \"return \", &**expr, shape)\n         }\n+        ast::ExprKind::Yeet(None) => Some(\"do yeet\".to_owned()),\n+        ast::ExprKind::Yeet(Some(ref expr)) => {\n+            rewrite_unary_prefix(context, \"do yeet \", &**expr, shape)\n+        }\n         ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n         ast::ExprKind::AddrOf(borrow_kind, mutability, ref expr) => {\n             rewrite_expr_addrof(context, borrow_kind, mutability, expr, shape)"}, {"sha": "ed418fb1fece6afcf6464d67cb2d020a646eb5e7", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508e0584e384556b7e66f57b62e4feeba864b6da/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=508e0584e384556b7e66f57b62e4feeba864b6da", "patch": "@@ -512,6 +512,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Range(..)\n         | ast::ExprKind::Repeat(..)\n         | ast::ExprKind::Ret(..)\n+        | ast::ExprKind::Yeet(..)\n         | ast::ExprKind::Tup(..)\n         | ast::ExprKind::Type(..)\n         | ast::ExprKind::Yield(None)"}]}