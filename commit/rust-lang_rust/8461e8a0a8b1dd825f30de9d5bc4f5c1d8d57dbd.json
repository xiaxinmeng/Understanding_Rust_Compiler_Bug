{"sha": "8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NjFlOGEwYThiMWRkODI1ZjMwZGU5ZDViYzRmNWMxZDhkNTdkYmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-24T21:51:59Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-24T21:51:59Z"}, "message": "Merge pull request #147 from marcusklaas/even-more-expr\n\nFormat if expressions & loops", "tree": {"sha": "388f10a44cff5b08f803549aa78eae35c06caad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388f10a44cff5b08f803549aa78eae35c06caad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "html_url": "https://github.com/rust-lang/rust/commit/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa24f5962ddfcef3028463f42cf55c047c4e26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa24f5962ddfcef3028463f42cf55c047c4e26d", "html_url": "https://github.com/rust-lang/rust/commit/4aa24f5962ddfcef3028463f42cf55c047c4e26d"}, {"sha": "c4101de53d8a0707907cb03c67a9224ab9943d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4101de53d8a0707907cb03c67a9224ab9943d37", "html_url": "https://github.com/rust-lang/rust/commit/c4101de53d8a0707907cb03c67a9224ab9943d37"}], "stats": {"total": 625, "additions": 580, "deletions": 45}, "files": [{"sha": "46c698ecbbb942b8176a8881e5e5d2ee8d312812", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -17,9 +17,11 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let s = orig.trim();\n \n     // Edge case: block comments. Let's not trim their lines (for now).\n-    let opener = if block_style { \"/* \" } else { \"// \" };\n-    let closer = if block_style { \" */\" } else { \"\" };\n-    let line_start = if block_style { \" * \" } else { \"// \" };\n+    let (opener, closer, line_start) = if block_style {\n+        (\"/* \", \" */\", \" * \")\n+    } else {\n+        (\"// \", \"\", \"// \")\n+    };\n \n     let max_chars = width.checked_sub(closer.len()).unwrap_or(1)\n                          .checked_sub(opener.len()).unwrap_or(1);"}, {"sha": "3d41b51661e7e9c5b36743ea98a345f6bea4df45", "filename": "src/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -14,6 +14,18 @@ use {NewlineStyle, BraceStyle, ReturnIndent, StructLitStyle};\n use lists::SeparatorTactic;\n use issues::ReportTactic;\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum BlockIndentStyle {\n+    // Same level as parent.\n+    Inherit,\n+    // One level deeper than parent.\n+    Tabbed,\n+    // Aligned with block open.\n+    Visual,\n+}\n+\n+impl_enum_decodable!(BlockIndentStyle, Inherit, Tabbed, Visual);\n+\n #[derive(RustcDecodable, Clone)]\n pub struct Config {\n     pub max_width: usize,\n@@ -31,6 +43,7 @@ pub struct Config {\n     pub report_todo: ReportTactic,\n     pub report_fixme: ReportTactic,\n     pub reorder_imports: bool, // Alphabetically, case sensitive.\n+    pub expr_indent_style: BlockIndentStyle,\n }\n \n impl Config {"}, {"sha": "035fa21e9173cb322b61ff2f53815daf3253ca3b", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "1f92ed5d71967245527800688390d55d1a363989", "filename": "src/expr.rs", "status": "modified", "additions": 274, "deletions": 14, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -14,6 +14,7 @@ use string::{StringFormat, rewrite_string};\n use StructLitStyle;\n use utils::{span_after, make_indent};\n use visitor::FmtVisitor;\n+use config::BlockIndentStyle;\n \n use syntax::{ast, ptr};\n use syntax::codemap::{Pos, Span, BytePos, mk_sp};\n@@ -56,12 +57,47 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprTup(ref items) => {\n                 rewrite_tuple_lit(context, items, self.span, width, offset)\n             }\n-            ast::Expr_::ExprLoop(ref block, _) => {\n-                // FIXME: this drops any comment between \"loop\" and the block.\n-                // TODO: format label\n-                block.rewrite(context, width, offset).map(|result| {\n-                    format!(\"loop {}\", result)\n-                })\n+            ast::Expr_::ExprWhile(ref cond, ref block, label) => {\n+                Loop::new_while(None, cond, block, label).rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprWhileLet(ref pat, ref cond, ref block, label) => {\n+                Loop::new_while(Some(pat), cond, block, label).rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprForLoop(ref pat, ref cond, ref block, label) => {\n+                Loop::new_for(pat, cond, block, label).rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprLoop(ref block, label) => {\n+                Loop::new_loop(block, label).rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprBlock(ref block) => {\n+                block.rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprIf(ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                None,\n+                                width,\n+                                offset)\n+            }\n+            ast::Expr_::ExprIfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                Some(pat),\n+                                width,\n+                                offset)\n+            }\n+            // We reformat it ourselves because rustc gives us a bad span\n+            // for ranges, see rust#27162\n+            ast::Expr_::ExprRange(ref left, ref right) => {\n+                rewrite_range(context,\n+                              left.as_ref().map(|e| &**e),\n+                              right.as_ref().map(|e| &**e),\n+                              width,\n+                              offset)\n             }\n             _ => context.codemap.span_to_snippet(self.span).ok()\n         }\n@@ -88,6 +124,217 @@ impl Rewrite for ast::Block {\n     }\n }\n \n+// TODO(#18): implement pattern formatting\n+impl Rewrite for ast::Pat {\n+    fn rewrite(&self, context: &RewriteContext, _: usize, _: usize) -> Option<String> {\n+        context.codemap.span_to_snippet(self.span).ok()\n+    }\n+}\n+\n+// Abstraction over for, while and loop expressions\n+struct Loop<'a> {\n+    cond: Option<&'a ast::Expr>,\n+    block: &'a ast::Block,\n+    label: Option<ast::Ident>,\n+    pat: Option<&'a ast::Pat>,\n+    keyword: &'a str,\n+    matcher: &'a str,\n+    connector: &'a str,\n+}\n+\n+impl<'a> Loop<'a> {\n+    fn new_loop(block: &'a ast::Block, label: Option<ast::Ident>) -> Loop<'a> {\n+        Loop {\n+            cond: None,\n+            block: block,\n+            label: label,\n+            pat: None,\n+            keyword: \"loop\",\n+            matcher: \"\",\n+            connector: \"\",\n+        }\n+    }\n+\n+    fn new_while(pat: Option<&'a ast::Pat>,\n+                 cond: &'a ast::Expr,\n+                 block: &'a ast::Block,\n+                 label: Option<ast::Ident>)\n+                 -> Loop<'a> {\n+        Loop {\n+            cond: Some(cond),\n+            block: block,\n+            label: label,\n+            pat: pat,\n+            keyword: \"while \",\n+            matcher: match pat {\n+                Some(..) => \"let \",\n+                None => \"\"\n+            },\n+            connector: \" =\",\n+        }\n+    }\n+\n+    fn new_for(pat: &'a ast::Pat,\n+               cond: &'a ast::Expr,\n+               block: &'a ast::Block,\n+               label: Option<ast::Ident>)\n+               -> Loop<'a> {\n+        Loop {\n+            cond: Some(cond),\n+            block: block,\n+            label: label,\n+            pat: Some(pat),\n+            keyword: \"for \",\n+            matcher: \"\",\n+            connector: \" in\",\n+        }\n+    }\n+}\n+\n+impl<'a> Rewrite for Loop<'a> {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        let label_string = rewrite_label(self.label);\n+        // 2 = \" {\".len()\n+        let inner_width = width - self.keyword.len() - 2 - label_string.len();\n+        let inner_offset = offset + self.keyword.len() + label_string.len();\n+\n+        let pat_expr_string = match self.cond {\n+            Some(cond) => try_opt!(rewrite_pat_expr(context,\n+                                                    self.pat,\n+                                                    cond,\n+                                                    self.matcher,\n+                                                    self.connector,\n+                                                    inner_width,\n+                                                    inner_offset)),\n+            None => String::new()\n+        };\n+\n+        // FIXME: this drops any comment between \"loop\" and the block.\n+        self.block.rewrite(context, width, offset).map(|result| {\n+            format!(\"{}{}{} {}\", label_string, self.keyword, pat_expr_string, result)\n+        })\n+    }\n+}\n+\n+fn rewrite_label(label: Option<ast::Ident>) -> String {\n+    match label {\n+        Some(ident) => format!(\"{}: \", ident),\n+        None => \"\".to_owned()\n+    }\n+}\n+\n+// FIXME: this doesn't play well with line breaks\n+fn rewrite_range(context: &RewriteContext,\n+                 left: Option<&ast::Expr>,\n+                 right: Option<&ast::Expr>,\n+                 width: usize,\n+                 offset: usize)\n+                 -> Option<String> {\n+    let left_string = match left {\n+        // 2 = ..\n+        Some(expr) => try_opt!(expr.rewrite(context, width - 2, offset)),\n+        None => String::new()\n+    };\n+\n+    let right_string = match right {\n+        Some(expr) => {\n+            // 2 = ..\n+            let max_width = (width - 2).checked_sub(left_string.len()).unwrap_or(0);\n+            try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n+        }\n+        None => String::new()\n+    };\n+\n+    Some(format!(\"{}..{}\", left_string, right_string))\n+}\n+\n+// Rewrites if-else blocks. If let Some(_) = pat, the expression is\n+// treated as an if-let-else expression.\n+fn rewrite_if_else(context: &RewriteContext,\n+                   cond: &ast::Expr,\n+                   if_block: &ast::Block,\n+                   else_block: Option<&ast::Expr>,\n+                   pat: Option<&ast::Pat>,\n+                   width: usize,\n+                   offset: usize)\n+                   -> Option<String> {\n+    // 3 = \"if \", 2 = \" {\"\n+    let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n+                                                    pat,\n+                                                    cond,\n+                                                    \"let \",\n+                                                    \" =\",\n+                                                    width - 3 - 2,\n+                                                    offset + 3));\n+\n+    let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n+    let mut result = format!(\"if {} {}\", pat_expr_string, if_block_string);\n+\n+    if let Some(else_block) = else_block {\n+        let else_block_string = try_opt!(else_block.rewrite(context, width, offset));\n+\n+        result.push_str(\" else \");\n+        result.push_str(&else_block_string);\n+    }\n+\n+    Some(result)\n+}\n+\n+fn rewrite_pat_expr(context: &RewriteContext,\n+                    pat: Option<&ast::Pat>,\n+                    expr: &ast::Expr,\n+                    matcher: &str,\n+                    connector: &str,\n+                    width: usize,\n+                    offset: usize)\n+                    -> Option<String> {\n+    let pat_offset = offset + matcher.len();\n+    let mut result = match pat {\n+        Some(pat) => {\n+            let pat_string = try_opt!(pat.rewrite(context,\n+                                                  width - connector.len() - matcher.len(),\n+                                                  pat_offset));\n+            format!(\"{}{}{}\", matcher, pat_string, connector)\n+        }\n+        None => String::new()\n+    };\n+\n+    // Consider only the last line of the pat string.\n+    let extra_offset = match result.rfind('\\n') {\n+        // 1 for newline character\n+        Some(idx) => result.len() - idx - 1 - offset,\n+        None => result.len()\n+    };\n+\n+    // The expression may (partionally) fit on the current line.\n+    if width > extra_offset + 1 {\n+        let mut corrected_offset = extra_offset;\n+\n+        if pat.is_some() {\n+            result.push(' ');\n+            corrected_offset += 1;\n+        }\n+\n+        let expr_rewrite = expr.rewrite(context,\n+                                        width - corrected_offset,\n+                                        offset + corrected_offset);\n+\n+        if let Some(expr_string) = expr_rewrite {\n+            result.push_str(&expr_string);\n+            return Some(result);\n+        }\n+    }\n+\n+    // The expression won't fit on the current line, jump to next.\n+    result.push('\\n');\n+    result.push_str(&make_indent(pat_offset));\n+\n+    let expr_rewrite = expr.rewrite(context, context.config.max_width - pat_offset, pat_offset);\n+    result.push_str(&&try_opt!(expr_rewrite));\n+\n+    Some(result)\n+}\n+\n fn rewrite_string_lit(context: &RewriteContext,\n                       s: &str,\n                       span: Span,\n@@ -134,6 +381,8 @@ fn rewrite_call(context: &RewriteContext,\n     // 2 is for parens.\n     let remaining_width = try_opt!(width.checked_sub(callee_str.len() + 2));\n     let offset = callee_str.len() + 1 + offset;\n+    let block_indent = expr_block_indent(context, offset);\n+    let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n \n     let items = itemize_list(context.codemap,\n                              Vec::new(),\n@@ -143,7 +392,7 @@ fn rewrite_call(context: &RewriteContext,\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n                              // Take old span when rewrite fails.\n-                             |item| item.rewrite(context, remaining_width, offset)\n+                             |item| item.rewrite(inner_context, remaining_width, offset)\n                                         .unwrap_or(context.codemap.span_to_snippet(item.span)\n                                                                   .unwrap()),\n                              callee.span.hi + BytePos(1),\n@@ -162,6 +411,14 @@ fn rewrite_call(context: &RewriteContext,\n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n }\n \n+fn expr_block_indent(context: &RewriteContext, offset: usize) -> usize {\n+    match context.config.expr_indent_style {\n+        BlockIndentStyle::Inherit => context.block_indent,\n+        BlockIndentStyle::Tabbed => context.block_indent + context.config.tab_spaces,\n+        BlockIndentStyle::Visual => offset,\n+    }\n+}\n+\n fn rewrite_paren(context: &RewriteContext,\n                  subexpr: &ast::Expr,\n                  width: usize,\n@@ -192,23 +449,26 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     }\n \n     let path_str = pprust::path_to_string(path);\n-    let (indent, h_budget, v_budget) = match context.config.struct_lit_style {\n+    // Foo { a: Foo } - indent is +3, width is -5.\n+    let h_budget = width.checked_sub(path_str.len() + 5).unwrap_or(0);\n+    let (indent, v_budget) = match context.config.struct_lit_style {\n         StructLitStyle::VisualIndent => {\n-            // Foo { a: Foo } - indent is +3, width is -5.\n-            let budget = width - (path_str.len() + 5);\n-            (offset + path_str.len() + 3, budget, budget)\n+            (offset + path_str.len() + 3, h_budget)\n         }\n         StructLitStyle::BlockIndent => {\n             // If we are all on one line, then we'll ignore the indent, and we\n             // have a smaller budget.\n             let indent = context.block_indent + context.config.tab_spaces;\n-            (indent, width - (path_str.len() + 5), width - indent)\n+            let v_budget = context.config.max_width.checked_sub(indent).unwrap_or(0);\n+            (indent, v_budget)\n         }\n     };\n \n     let field_iter = fields.into_iter().map(StructLitField::Regular)\n                            .chain(base.into_iter().map(StructLitField::Base));\n \n+    let inner_context = &RewriteContext { block_indent: indent, ..*context };\n+\n     let items = itemize_list(context.codemap,\n                              Vec::new(),\n                              field_iter,\n@@ -230,13 +490,13 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              |item| {\n                                  match *item {\n                                      StructLitField::Regular(ref field) => {\n-                                         rewrite_field(context, &field, h_budget, indent)\n+                                         rewrite_field(inner_context, &field, h_budget, indent)\n                                             .unwrap_or(context.codemap.span_to_snippet(field.span)\n                                                                       .unwrap())\n                                      },\n                                      StructLitField::Base(ref expr) => {\n                                          // 2 = ..\n-                                         expr.rewrite(context, h_budget - 2, indent + 2)\n+                                         expr.rewrite(inner_context, h_budget - 2, indent + 2)\n                                              .map(|s| format!(\"..{}\", s))\n                                              .unwrap_or(context.codemap.span_to_snippet(expr.span)\n                                                                        .unwrap())"}, {"sha": "12ce3368eb31be49205ea15c690fe2f711e56910", "filename": "src/imports.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -60,7 +60,11 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         // 2 = ::\n-        let path_separation_w = if path_str.len() > 0 { 2 } else { 0 };\n+        let path_separation_w = if path_str.len() > 0 {\n+            2\n+        } else {\n+            0\n+        };\n         // 5 = \"use \" + {\n         let indent = path_str.len() + 5 + path_separation_w + vis.len();\n \n@@ -106,7 +110,11 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: Make more efficient by using a linked list? That would\n         // require changes to the signatures of itemize_list and write_list.\n         let has_self = move_self_to_front(&mut items);\n-        let first_index = if has_self { 0 } else { 1 };\n+        let first_index = if has_self {\n+            0\n+        } else {\n+            1\n+        };\n \n         if self.config.reorder_imports {\n             items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n@@ -115,10 +123,10 @@ impl<'a> FmtVisitor<'a> {\n         let list = write_list(&items[first_index..], &fmt);\n \n         Some(if path_str.len() == 0 {\n-            format!(\"{}use {{{}}};\", vis, list)\n-        } else {\n-            format!(\"{}use {}::{{{}}};\", vis, path_str, list)\n-        })\n+                format!(\"{}use {{{}}};\", vis, list)\n+            } else {\n+                format!(\"{}use {}::{{{}}};\", vis, path_str, list)\n+            })\n     }\n }\n "}, {"sha": "34d5b8ab2c440b7aaabd0791dff06f1d9778991d", "filename": "src/issues.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -70,7 +70,11 @@ impl fmt::Display for Issue {\n             IssueType::Todo => \"TODO\",\n             IssueType::Fixme => \"FIXME\",\n         };\n-        let details = if self.missing_number { \" without issue number\" } else { \"\" };\n+        let details = if self.missing_number {\n+            \" without issue number\"\n+        } else {\n+            \"\"\n+        };\n \n         write!(fmt, \"{}{}\", msg, details)\n     }\n@@ -177,7 +181,7 @@ impl BadIssueSeeker {\n                       issue: Issue,\n                       mut part: NumberPart)\n                       -> IssueClassification {\n-        if ! issue.missing_number || c == '\\n' {\n+        if !issue.missing_number || c == '\\n' {\n             return IssueClassification::Bad(issue);\n         } else if c == ')' {\n             return if let NumberPart::CloseParen = part {"}, {"sha": "866dad65c8538c32f8695494ed85959180e22a4c", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -446,7 +446,11 @@ impl<'a> FmtVisitor<'a> {\n                                  + field.node.name.to_string().len()\n                                  + 1; // Open paren\n \n-                    let comma_cost = if self.config.enum_trailing_comma { 1 } else { 0 };\n+                    let comma_cost = if self.config.enum_trailing_comma {\n+                        1\n+                    } else {\n+                        0\n+                    };\n                     let budget = self.config.ideal_width - indent - comma_cost - 1; // 1 = )\n \n                     let fmt = ListFormatting {\n@@ -520,7 +524,11 @@ impl<'a> FmtVisitor<'a> {\n             ast::StructFieldKind::UnnamedField(..) => true\n         };\n \n-        let (opener, terminator) = if is_tuple { (\"(\", \")\") } else { (\" {\", \"}\") };\n+        let (opener, terminator) = if is_tuple {\n+            (\"(\", \")\")\n+        } else {\n+            (\" {\", \"}\")\n+        };\n \n         let generics_str = match generics {\n             Some(g) => self.format_generics(g,\n@@ -565,7 +573,11 @@ impl<'a> FmtVisitor<'a> {\n             result.push_str(&indentation);\n         }\n \n-        let tactic = if break_line { ListTactic::Vertical } else { ListTactic::Horizontal };\n+        let tactic = if break_line {\n+            ListTactic::Vertical\n+        } else {\n+            ListTactic::Horizontal\n+        };\n \n         // 1 = ,\n         let budget = self.config.ideal_width - offset + self.config.tab_spaces - 1;"}, {"sha": "93b66f45b565fd92288204972372d14cf152eb3b", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -49,10 +49,9 @@ use changes::ChangeSet;\n use visitor::FmtVisitor;\n use config::Config;\n \n-#[macro_use]\n-mod config;\n #[macro_use]\n mod utils;\n+pub mod config;\n mod changes;\n mod visitor;\n mod items;\n@@ -218,11 +217,12 @@ fn fmt_lines(changes: &mut ChangeSet, config: &Config) -> FormatReport {\n         let mut cur_line = 1;\n         let mut newline_count = 0;\n         let mut errors = vec![];\n-        let mut issue_seeker = BadIssueSeeker::new(config.report_todo,\n-                                                   config.report_fixme);\n+        let mut issue_seeker = BadIssueSeeker::new(config.report_todo, config.report_fixme);\n \n         for (c, b) in text.chars() {\n-            if c == '\\r' { continue; }\n+            if c == '\\r' {\n+                continue;\n+            }\n \n             // Add warnings for bad todos/ fixmes\n             if let Some(issue) = issue_seeker.inspect(c) {"}, {"sha": "13c0cf763e331de57bb285e842a504e212618827", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -136,7 +136,11 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n         let first = i == 0;\n         let last = i == items.len() - 1;\n         let separate = !last || trailing_separator;\n-        let item_sep_len = if separate { sep_len } else { 0 };\n+        let item_sep_len = if separate {\n+            sep_len\n+        } else {\n+            0\n+        };\n         let item_width = item.item.len() + item_sep_len;\n \n         match tactic {\n@@ -208,8 +212,7 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             let comment = item.post_comment.as_ref().unwrap();\n             // Use block-style only for the last item or multiline comments.\n             let block_style = formatting.ends_with_newline && last ||\n-                              comment.trim().contains('\\n') ||\n-                              comment.trim().len() > width;\n+                              comment.trim().contains('\\n') || comment.trim().len() > width;\n \n             let formatted_comment = rewrite_comment(comment, block_style, width, offset);\n "}, {"sha": "246f7cb2dc3d9649085dc2b9cd9177629d6b6ddd", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -24,7 +24,9 @@ pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n \n #[inline]\n pub fn prev_char(s: &str, mut i: usize) -> usize {\n-    if i == 0 { return 0; }\n+    if i == 0 {\n+        return 0;\n+    }\n \n     i -= 1;\n     while !s.is_char_boundary(i) {\n@@ -35,7 +37,9 @@ pub fn prev_char(s: &str, mut i: usize) -> usize {\n \n #[inline]\n pub fn next_char(s: &str, mut i: usize) -> usize {\n-    if i >= s.len() { return s.len(); }\n+    if i >= s.len() {\n+        return s.len();\n+    }\n \n     while !s.is_char_boundary(i) {\n         i += 1;"}, {"sha": "594d3328595297dc54487d87058d10309f940557", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -351,7 +351,7 @@ impl<'a> FmtVisitor<'a> {\n \n             result.push_str(&a_str);\n \n-            if i < attrs.len() -1 {\n+            if i < attrs.len() - 1 {\n                 result.push('\\n');\n             }\n         }"}, {"sha": "38a099e3bedcaf503d6544cc3264af38fa0b35eb", "filename": "tests/config/expr_visual_indent.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fexpr_visual_indent.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fexpr_visual_indent.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fexpr_visual_indent.toml?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -0,0 +1,16 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true\n+report_todo = \"Always\"\n+report_fixme = \"Never\"\n+reorder_imports = false\n+expr_indent_style = \"Visual\""}, {"sha": "5b1ce49a2f23a053593bd65dd93b8d8c615f8843", "filename": "tests/config/reorder_imports.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = true\n+expr_indent_style = \"Tabbed\""}, {"sha": "b2c7f5fc43f655aee957ae0982abc480969a9848", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "61bf4b0aee56f5f3e930c87191f101d811b69a94", "filename": "tests/config/visual_struct_lits.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fvisual_struct_lits.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fconfig%2Fvisual_struct_lits.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fvisual_struct_lits.toml?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "c173d7bd7c4b69d929643cf4da4d42b5586e9e4d", "filename": "tests/source/expr-visual-indent.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-visual-indent.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-config: expr_visual_indent.toml\n+\n+// Visual level block indentation.\n+\n+fn matcher() {\n+    Some(while true {\n+        test();\n+    })\n+}\n\\ No newline at end of file"}, {"sha": "74538c13597ea754213581c02ca9f9d9e7969ab9", "filename": "tests/source/expr.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -17,5 +17,54 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n                                                      - 50000 * sqrt(-1),\n                                                      trivial_value);\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a +\n-             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))))\n+             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))));\n+\n+    { for _ in 0..10 {} }\n+\n+    {{{{}}}}\n+\n+     if  1  + 2 > 0  { let result = 5; result } else { 4};\n+\n+    if  let   Some(x)  =  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n+        // Nothing\n+    }\n+\n+    if  let   Some(x)  =  (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1\n+        + 2 + 3 {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 + 2222 {}\n+\n+    if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1\n+ + 2 + 3 {\n+    }\n+\n+    if cond() {\n+        something();\n+    } else  if different_cond() {\n+        something_else();\n+    } else {\n+        // Check subformatting\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    }\n+}\n+\n+fn bar() {\n+    let range = (   111111111 + 333333333333333333 + 1111 +   400000000000000000) .. (2222 +  2333333333333333);\n+\n+    let another_range = 5..some_func( a , b /* comment */);\n+\n+    for _  in  1 ..{ call_forever(); }\n+\n+    syntactically_correct(loop { sup( '?'); }, if cond { 0 } else { 1 });\n+\n+    let third = ..10;\n+    let infi_range = ..;\n+    let foo = 1..;\n+    let bar = 5;\n+    let nonsense = (10 .. 0)..(0..10);\n }"}, {"sha": "36e6ab43de861f6cc09b1619536837397e8a34f3", "filename": "tests/source/loop.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Floop.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -5,7 +5,21 @@ fn main() {\n \n let x = loop { do_forever(); };\n \n-         loop {\n+       'label :  loop {\n         // Just comments\n     }\n+\n+    'a: while loooooooooooooooooooooooooooooooooong_variable_name + another_value > some_other_value{}\n+\n+   while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb {\n+   }\n+\n+    'b: for xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx in some_iter(arg1, arg2) {\n+        // do smth\n+    }\n+\n+    while let  Some(i) =     x.find('s')\n+    {\n+        x.update();\n+    }\n }"}, {"sha": "54f2ea5441bf28f2f8050e80b3016b017ee296f9", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     Foo { a:Bar,\n           b:foo() };\n \n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n     A { \n     // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n     first: item(),\n@@ -37,3 +39,12 @@ fn main() {\n                *             o o o   o */\n               graph: G, }\n }\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+        pattern: b\"<HTML\",\n+        mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+    },\n+    };\n+}"}, {"sha": "f14a56397ec834fd2d5177d31596c91228a4fe97", "filename": "tests/source/struct_lits_visual.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     Foo { a:Bar,\n           b:foo() };\n \n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n     A { \n     // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n     first: item(),"}, {"sha": "3488e8c93c04642ecd5d604e1c65e6df08393e94", "filename": "tests/target/expr-visual-indent.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-visual-indent.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-config: expr_visual_indent.toml\n+\n+// Visual level block indentation.\n+\n+fn matcher() {\n+    Some(while true {\n+             test();\n+         })\n+}"}, {"sha": "a52ad51b0c6e4416ad671f3e06c995b83e26b02d", "filename": "tests/target/expr.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -19,5 +19,83 @@ fn foo() -> bool {\n                                                          trivial_value);\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n              a + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-             aaaaa)))))))))\n+             aaaaa)))))))));\n+\n+    {\n+        for _ in 0..10 {\n+        }\n+    }\n+\n+    {\n+        {\n+            {\n+                {\n+                }\n+            }\n+        }\n+    }\n+\n+    if 1 + 2 > 0 {\n+        let result = 5;\n+        result\n+    } else {\n+        4\n+    };\n+\n+    if let Some(x) = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n+        // Nothing\n+    }\n+\n+    if let Some(x) = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+                      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 +\n+                                                                                         2222 {\n+    }\n+\n+    if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n+           1 + 2 + 3 {\n+    }\n+\n+    if cond() {\n+        something();\n+    } else if different_cond() {\n+        something_else();\n+    } else {\n+        // Check subformatting\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    }\n+}\n+\n+fn bar() {\n+    let range = (111111111 + 333333333333333333 + 1111 + 400000000000000000)..(2222 +\n+                                                                               2333333333333333);\n+\n+    let another_range = 5..some_func(a, b /* comment */);\n+\n+    for _ in 1.. {\n+        call_forever();\n+    }\n+\n+    syntactically_correct(loop {\n+            sup('?');\n+        },\n+                          if cond {\n+            0\n+        } else {\n+            1\n+        });\n+\n+    let third = ..10;\n+    let infi_range = ..;\n+    let foo = 1..;\n+    let bar = 5;\n+    let nonsense = (10..0)..(0..10);\n }"}, {"sha": "e1f2ccc91a4285b429b5e5a18356631436832cd4", "filename": "tests/target/loop.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Floop.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -8,7 +8,23 @@ fn main() {\n         do_forever();\n     };\n \n-    loop {\n+    'label: loop {\n         // Just comments\n     }\n+\n+    'a: while loooooooooooooooooooooooooooooooooong_variable_name + another_value >\n+              some_other_value {\n+    }\n+\n+    while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb {\n+    }\n+\n+    'b: for xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx in some_iter(arg1,\n+                                                                                        arg2) {\n+        // do smth\n+    }\n+\n+    while let Some(i) = x.find('s') {\n+        x.update();\n+    }\n }"}, {"sha": "9f7ab5cb428772b162505c09daa4a83f18963ec5", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -29,9 +29,16 @@ fn main() {\n \n     Foo { a: Bar, b: foo() };\n \n+    Quux {\n+        x: if cond {\n+            bar();\n+        },\n+        y: baz(),\n+    };\n+\n     A {\n-        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed\n-        // sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor.\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n@@ -48,3 +55,12 @@ fn main() {\n         graph: G,\n     }\n }\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+            pattern: b\"<HTML\",\n+            mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+        },\n+    };\n+}"}, {"sha": "248839cb8698bcee85cfeb7db08f261674657388", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=8461e8a0a8b1dd825f30de9d5bc4f5c1d8d57dbd", "patch": "@@ -35,6 +35,11 @@ fn main() {\n \n     Foo { a: Bar, b: foo() };\n \n+    Quux { x: if cond {\n+               bar();\n+           },\n+           y: baz(), };\n+\n     A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n         // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor."}]}