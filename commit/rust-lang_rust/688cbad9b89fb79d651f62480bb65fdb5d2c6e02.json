{"sha": "688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OGNiYWQ5Yjg5ZmI3OWQ2NTFmNjI0ODBiYjY1ZmRiNWQyYzZlMDI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-25T21:28:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Lookup region variable origin instead of choosing one", "tree": {"sha": "6553b341e8c1e8562c6665d8c2c43ecf3535724f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6553b341e8c1e8562c6665d8c2c43ecf3535724f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "html_url": "https://github.com/rust-lang/rust/commit/688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d48ffa9c63255eafa25639142f3b5601d42ae05", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d48ffa9c63255eafa25639142f3b5601d42ae05", "html_url": "https://github.com/rust-lang/rust/commit/2d48ffa9c63255eafa25639142f3b5601d42ae05"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "c19507c2f3c3eb87a5aef36ee16f8eb35b29fd80", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "patch": "@@ -50,13 +50,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// unified.\n     pub fn fudge_inference_if_ok<T, E, F>(\n         &self,\n-        origin: &RegionVariableOrigin,\n         f: F,\n     ) -> Result<T, E> where\n         F: FnOnce() -> Result<T, E>,\n         T: TypeFoldable<'tcx>,\n     {\n-        debug!(\"fudge_inference_if_ok(origin={:?})\", origin);\n+        debug!(\"fudge_inference_if_ok()\");\n \n         let (mut fudger, value) = self.probe(|snapshot| {\n             match f() {\n@@ -88,7 +87,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         int_vars,\n                         float_vars,\n                         region_vars,\n-                        origin,\n                     };\n \n                     Ok((fudger, value))\n@@ -120,8 +118,7 @@ pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     type_vars: FxHashMap<TyVid, TypeVariableOrigin>,\n     int_vars: Range<IntVid>,\n     float_vars: Range<FloatVid>,\n-    region_vars: Range<RegionVid>,\n-    origin: &'a RegionVariableOrigin,\n+    region_vars: FxHashMap<RegionVid, RegionVariableOrigin>,\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx> {\n@@ -167,11 +164,11 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        match *r {\n-            ty::ReVar(vid) if self.region_vars.contains(&vid) => {\n-                self.infcx.next_region_var(self.origin.clone())\n+        if let ty::ReVar(vid) = r {\n+            if let Some(&origin) = self.region_vars.get(&vid) {\n+                return self.infcx.next_region_var(origin);\n             }\n-            _ => r,\n         }\n+        r\n     }\n }"}, {"sha": "c3c4e724c695648b08c98bb9c002cc8c05429f16", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "patch": "@@ -16,7 +16,6 @@ use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n-use std::ops::Range;\n \n mod leak_check;\n \n@@ -841,8 +840,16 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn vars_since_snapshot(&self, mark: &RegionSnapshot) -> Range<RegionVid> {\n-        self.unification_table.vars_since_snapshot(&mark.region_snapshot)\n+    pub fn vars_since_snapshot(\n+        &self,\n+        mark: &RegionSnapshot,\n+    ) -> FxHashMap<RegionVid, RegionVariableOrigin> {\n+        let range = self.unification_table.vars_since_snapshot(&mark.region_snapshot);\n+        (range.start.index()..range.end.index()).map(|index| {\n+            let vid = ty::RegionVid::from(index);\n+            let origin = self.var_infos[vid].origin.clone();\n+            (vid, origin)\n+        }).collect()\n     }\n \n     /// See [`RegionInference::region_constraints_added_in_snapshot`]."}, {"sha": "ec4fc2a3bfb88d6a329141f960d29d1285688648", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688cbad9b89fb79d651f62480bb65fdb5d2c6e02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "patch": "@@ -92,7 +92,7 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n-use rustc::infer::{self, InferCtxt, InferOk, InferResult, RegionVariableOrigin};\n+use rustc::infer::{self, InferCtxt, InferOk, InferResult};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n@@ -3229,8 +3229,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Some(ret) => ret,\n             None => return Vec::new()\n         };\n-        let origin = RegionVariableOrigin::Coercion(call_span);\n-        let expect_args = self.fudge_inference_if_ok(&origin, || {\n+        let expect_args = self.fudge_inference_if_ok(|| {\n             // Attempt to apply a subtyping relationship between the formal\n             // return type (likely containing type variables if the function\n             // is polymorphic) and the expected return type."}]}