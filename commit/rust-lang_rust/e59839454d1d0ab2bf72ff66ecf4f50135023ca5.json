{"sha": "e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "node_id": "C_kwDOAAsO6NoAKGU1OTgzOTQ1NGQxZDBhYjJiZjcyZmY2NmVjZjRmNTAxMzUwMjNjYTU", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-04T08:20:37Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-14T09:10:19Z"}, "message": "Support more projections in custom mir", "tree": {"sha": "37cb1d9b109644813db28d103f5680f85e75a813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37cb1d9b109644813db28d103f5680f85e75a813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "html_url": "https://github.com/rust-lang/rust/commit/e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409f4d2adb6c70dff7512395d7ae4c9475db8b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/409f4d2adb6c70dff7512395d7ae4c9475db8b28", "html_url": "https://github.com/rust-lang/rust/commit/409f4d2adb6c70dff7512395d7ae4c9475db8b28"}], "stats": {"total": 216, "additions": 210, "deletions": 6}, "files": [{"sha": "2f26499a3b6e937c8acc0a1bfb2bdc48ba855b05", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n+use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::{mir::*, thir::*, ty};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -118,12 +119,42 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     }\n \n     fn parse_place(&self, expr_id: ExprId) -> PResult<Place<'tcx>> {\n-        parse_by_kind!(self, expr_id, _, \"place\",\n-            ExprKind::Deref { arg } => Ok(\n-                self.parse_place(*arg)?.project_deeper(&[PlaceElem::Deref], self.tcx)\n-            ),\n-            _ => self.parse_local(expr_id).map(Place::from),\n-        )\n+        self.parse_place_inner(expr_id).map(|(x, _)| x)\n+    }\n+\n+    fn parse_place_inner(&self, expr_id: ExprId) -> PResult<(Place<'tcx>, PlaceTy<'tcx>)> {\n+        let (parent, proj) = parse_by_kind!(self, expr_id, expr, \"place\",\n+            @call(\"mir_field\", args) => {\n+                let (parent, ty) = self.parse_place_inner(args[0])?;\n+                let field = Field::from_u32(self.parse_integer_literal(args[1])? as u32);\n+                let field_ty = ty.field_ty(self.tcx, field);\n+                let proj = PlaceElem::Field(field, field_ty);\n+                let place = parent.project_deeper(&[proj], self.tcx);\n+                return Ok((place, PlaceTy::from_ty(field_ty)));\n+            },\n+            @call(\"mir_variant\", args) => {\n+                (args[0], PlaceElem::Downcast(\n+                    None,\n+                    VariantIdx::from_u32(self.parse_integer_literal(args[1])? as u32)\n+                ))\n+            },\n+            ExprKind::Deref { arg } => {\n+                parse_by_kind!(self, *arg, _, \"does not matter\",\n+                    @call(\"mir_make_place\", args) => return self.parse_place_inner(args[0]),\n+                    _ => (*arg, PlaceElem::Deref),\n+                )\n+            },\n+            ExprKind::Index { lhs, index } => (*lhs, PlaceElem::Index(self.parse_local(*index)?)),\n+            ExprKind::Field { lhs, name: field, .. } => (*lhs, PlaceElem::Field(*field, expr.ty)),\n+            _ => {\n+                let place = self.parse_local(expr_id).map(Place::from)?;\n+                return Ok((place, PlaceTy::from_ty(expr.ty)))\n+            },\n+        );\n+        let (parent, ty) = self.parse_place_inner(parent)?;\n+        let place = parent.project_deeper(&[proj], self.tcx);\n+        let ty = ty.projection_ty(self.tcx, proj);\n+        Ok((place, ty))\n     }\n \n     fn parse_local(&self, expr_id: ExprId) -> PResult<Local> {"}, {"sha": "7d7c61b1180897972c8b2610f17541dc73e54541", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -88,6 +88,9 @@ define!(\n     fn Discriminant<T>(place: T) -> <T as ::core::marker::DiscriminantKind>::Discriminant\n );\n define!(\"mir_set_discriminant\", fn SetDiscriminant<T>(place: T, index: u32));\n+define!(\"mir_field\", fn Field<F>(place: (), field: u32) -> F);\n+define!(\"mir_variant\", fn Variant<T>(place: T, index: u32) -> ());\n+define!(\"mir_make_place\", fn __internal_make_place<T>(place: T) -> *mut T);\n \n /// Convenience macro for generating custom MIR.\n ///\n@@ -145,6 +148,25 @@ pub macro mir {\n     }}\n }\n \n+/// Helper macro that allows you to treat a value expression like a place expression.\n+///\n+/// This is necessary in combination with the [`Field`] and [`Variant`] methods. Specifically,\n+/// something like this won't compile on its own, reporting an error about not being able to assign\n+/// to such an expression:\n+///\n+/// ```rust,ignore(syntax-highlighting-only)\n+/// Field(something, 0) = 5;\n+/// ```\n+///\n+/// Instead, you'll need to write\n+///\n+/// ```rust,ignore(syntax-highlighting-only)\n+/// place!(Field(something, 0)) = 5;\n+/// ```\n+pub macro place($e:expr) {\n+    (*::core::intrinsics::mir::__internal_make_place($e))\n+}\n+\n /// Helper macro that extracts the `let` declarations out of a bunch of statements.\n ///\n /// This macro is written using the \"statement muncher\" strategy. Each invocation parses the first"}, {"sha": "5e472e531c742d56869289e03865383f8dd817f5", "filename": "src/test/mir-opt/building/custom/projections.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,85 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+union U {\n+    a: i32,\n+    b: u32,\n+}\n+\n+// EMIT_MIR projections.unions.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn unions(u: U) -> i32 {\n+    mir!({\n+        RET = u.a;\n+        Return()\n+    })\n+}\n+\n+// EMIT_MIR projections.tuples.built.after.mir\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn tuples(i: (u32, i32)) -> (u32, i32) {\n+    mir!(\n+        // FIXME(JakobDegen): This is necessary because we can't give type hints for `RET`\n+        let temp: (u32, i32);\n+        {\n+            temp.0 = i.0;\n+            temp.1 = i.1;\n+\n+            RET = temp;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR projections.unwrap.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn unwrap(opt: Option<i32>) -> i32 {\n+    mir!({\n+        RET = Field(Variant(opt, 1), 0);\n+        Return()\n+    })\n+}\n+\n+// EMIT_MIR projections.unwrap_deref.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn unwrap_deref(opt: Option<&i32>) -> i32 {\n+    mir!({\n+        RET = *Field::<&i32>(Variant(opt, 1), 0);\n+        Return()\n+    })\n+}\n+\n+// EMIT_MIR projections.set.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn set(opt: &mut Option<i32>) {\n+    mir!({\n+        place!(Field(Variant(*opt, 1), 0)) = 10;\n+        Return()\n+    })\n+}\n+\n+// EMIT_MIR projections.simple_index.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn simple_index(a: [i32; 10], b: &[i32]) -> i32 {\n+    mir!({\n+        let temp = 3;\n+        RET = a[temp];\n+        RET = (*b)[temp];\n+        Return()\n+    })\n+}\n+\n+fn main() {\n+    assert_eq!(unions(U { a: 5 }), 5);\n+    assert_eq!(tuples((5, 6)), (5, 6));\n+\n+    assert_eq!(unwrap(Some(5)), 5);\n+    assert_eq!(unwrap_deref(Some(&5)), 5);\n+    let mut o = Some(5);\n+    set(&mut o);\n+    assert_eq!(o, Some(10));\n+\n+    assert_eq!(simple_index([0; 10], &[0; 10]), 0);\n+}"}, {"sha": "2f15176a61f20d9ceefced59daa89519772a1c50", "filename": "src/test/mir-opt/building/custom/projections.set.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `set` after built\n+\n+fn set(_1: &mut Option<i32>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/projections.rs:+0:31: +0:31\n+\n+    bb0: {\n+        (((*_1) as variant#1).0: i32) = const 10_i32; // scope 0 at $DIR/projections.rs:+2:9: +2:48\n+        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+    }\n+}"}, {"sha": "fc422e4b3f01f27d39397d09ebcb125338244503", "filename": "src/test/mir-opt/building/custom/projections.simple_index.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `simple_index` after built\n+\n+fn simple_index(_1: [i32; 10], _2: &[i32]) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:45: +0:48\n+    let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _3 = const 3_usize;              // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _0 = _1[_3];                     // scope 0 at $DIR/projections.rs:+3:9: +3:22\n+        _0 = (*_2)[_3];                  // scope 0 at $DIR/projections.rs:+4:9: +4:25\n+        return;                          // scope 0 at $DIR/projections.rs:+5:9: +5:17\n+    }\n+}"}, {"sha": "65487d3c9ed4f03d5194eb9b72c82968949c791f", "filename": "src/test/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `tuples` after built\n+\n+fn tuples(_1: (u32, i32)) -> (u32, i32) {\n+    let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n+    let mut _2: (u32, i32);              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        (_2.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+5:13: +5:25\n+        (_2.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+6:13: +6:25\n+        _0 = _2;                         // scope 0 at $DIR/projections.rs:+8:13: +8:23\n+        return;                          // scope 0 at $DIR/projections.rs:+9:13: +9:21\n+    }\n+}"}, {"sha": "922538a5f17be93c0fc605b20e7efd2d7b18d044", "filename": "src/test/mir-opt/building/custom/projections.unions.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `unions` after built\n+\n+fn unions(_1: U) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:20: +0:23\n+\n+    bb0: {\n+        _0 = (_1.0: i32);                // scope 0 at $DIR/projections.rs:+2:9: +2:18\n+        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+    }\n+}"}, {"sha": "75b03a3c3930b7651af4bad29e01dde183a108eb", "filename": "src/test/mir-opt/building/custom/projections.unwrap.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `unwrap` after built\n+\n+fn unwrap(_1: Option<i32>) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:32: +0:35\n+\n+    bb0: {\n+        _0 = ((_1 as variant#1).0: i32); // scope 0 at $DIR/projections.rs:+2:9: +2:40\n+        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+    }\n+}"}, {"sha": "c6b0f7efa9ba0eb3edf939160552e088c4b4f924", "filename": "src/test/mir-opt/building/custom/projections.unwrap_deref.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e59839454d1d0ab2bf72ff66ecf4f50135023ca5/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir?ref=e59839454d1d0ab2bf72ff66ecf4f50135023ca5", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `unwrap_deref` after built\n+\n+fn unwrap_deref(_1: Option<&i32>) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:39: +0:42\n+\n+    bb0: {\n+        _0 = (*((_1 as variant#1).0: &i32)); // scope 0 at $DIR/projections.rs:+2:9: +2:49\n+        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+    }\n+}"}]}