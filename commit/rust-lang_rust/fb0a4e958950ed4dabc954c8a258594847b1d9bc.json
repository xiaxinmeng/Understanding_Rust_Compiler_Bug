{"sha": "fb0a4e958950ed4dabc954c8a258594847b1d9bc", "node_id": "C_kwDOAAsO6NoAKGZiMGE0ZTk1ODk1MGVkNGRhYmM5NTRjOGEyNTg1OTQ4NDdiMWQ5YmM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-20T19:42:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-22T14:02:28Z"}, "message": "Move relationships::update to Inherited::update_infer_var_info", "tree": {"sha": "22057af6fb604830aee4cd1dd1f3be2881069266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22057af6fb604830aee4cd1dd1f3be2881069266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0a4e958950ed4dabc954c8a258594847b1d9bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPNQfQACgkQgTGiTgx5\n76+iLw//X4tF9iovirdKMfabOvjqCpROMt8EmUaxiVd5aZI9a3/PD3Nfif9m0mPd\nsicwPHyEXnSYJwN3CWJRUDMPi5kplBt63+170Uetb9QpE1MTVjSxZSHQUB6af+Eq\n78JKxGSSMtYrtnEj0EUwxPOKyo9bezY91BJcRHFahx2x0rN2o43jKfEzwCsn7n+k\n4KDIy0kfA7B3BG16xsgm3HRI9FvTNW193HMXcl+xr8whaUzRdmYqF+0Mu5prC5HQ\nJDss7vJG6BK6TP4817TM2WSNmuDX1fzLRBsjGRvNTxX0w2DZrIzq7+hCg9aaemfD\n/2srtHiUHBDVMurgHOHTCzZIvzGmDYkR3yswP2ABeK7oe53Xpcn7ayVIxT7k1NbJ\nHUTNRDXChiMJbOiebVI87HJ9umQWuWBBpFmZW20QTyMJqnJEulXsCQWc+AIx3v5k\nQs2/kinTpp4BN+JApbLVZmcf3u+WZmwqVmCZkpIqDJ0Dnmok7D+qyq/V2Xu2/1ZJ\nO6bDVNd34YoVma3C84ajgdAgjZmBYSZGYvDECq2gdqkOZFiEETJZKbs28xZiAWo3\nGg2ZTOVWutsQGWEBi9lHE8JkgfKYOm7ZWKdtTkHRin1i3MnwI1hnyJ/xRoXT6MDQ\nJilq/SgL88fw4ctcfoCIr1rZqbPDYGzAnOk9OH7/lK3idFNAB60=\n=0iyu\n-----END PGP SIGNATURE-----", "payload": "tree 22057af6fb604830aee4cd1dd1f3be2881069266\nparent 7fe472223e4bcdd960d73e323979d15168ce4e39\nauthor Santiago Pastorino <spastorino@gmail.com> 1674243742 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1674396148 -0300\n\nMove relationships::update to Inherited::update_infer_var_info\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0a4e958950ed4dabc954c8a258594847b1d9bc", "html_url": "https://github.com/rust-lang/rust/commit/fb0a4e958950ed4dabc954c8a258594847b1d9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0a4e958950ed4dabc954c8a258594847b1d9bc/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe472223e4bcdd960d73e323979d15168ce4e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe472223e4bcdd960d73e323979d15168ce4e39", "html_url": "https://github.com/rust-lang/rust/commit/7fe472223e4bcdd960d73e323979d15168ce4e39"}], "stats": {"total": 95, "additions": 42, "deletions": 53}, "files": [{"sha": "ce7e5caaefc539d637d0ab43cf54d753f97ebe3e", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fb0a4e958950ed4dabc954c8a258594847b1d9bc/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0a4e958950ed4dabc954c8a258594847b1d9bc/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=fb0a4e958950ed4dabc954c8a258594847b1d9bc", "patch": "@@ -10,7 +10,8 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{self, TraitEngine, TraitEngineExt as _};\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{self, PredicateObligation, TraitEngine, TraitEngineExt as _};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -140,11 +141,7 @@ impl<'tcx> Inherited<'tcx> {\n             span_bug!(obligation.cause.span, \"escaping bound vars in predicate {:?}\", obligation);\n         }\n \n-        super::relationships::update(\n-            &self.infcx,\n-            &mut self.relationships.borrow_mut(),\n-            &obligation,\n-        );\n+        self.update_infer_var_info(&obligation);\n \n         self.fulfillment_cx.borrow_mut().register_predicate_obligation(self, obligation);\n     }\n@@ -162,4 +159,43 @@ impl<'tcx> Inherited<'tcx> {\n         self.register_predicates(infer_ok.obligations);\n         infer_ok.value\n     }\n+\n+    pub fn update_infer_var_info(&self, obligation: &PredicateObligation<'tcx>) {\n+        let relationships = &mut self.relationships.borrow_mut();\n+\n+        // (*) binder skipped\n+        if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n+            && let Some(ty) = self.shallow_resolve(tpred.self_ty()).ty_vid().map(|t| self.root_var(t))\n+            && self.tcx.lang_items().sized_trait().map_or(false, |st| st != tpred.trait_ref.def_id)\n+        {\n+            let new_self_ty = self.tcx.types.unit;\n+\n+            // Then construct a new obligation with Self = () added\n+            // to the ParamEnv, and see if it holds.\n+            let o = obligation.with(self.tcx,\n+                obligation\n+                    .predicate\n+                    .kind()\n+                    .rebind(\n+                        // (*) binder moved here\n+                        ty::PredicateKind::Clause(ty::Clause::Trait(tpred.with_self_ty(self.tcx, new_self_ty)))\n+                    ),\n+            );\n+            // Don't report overflow errors. Otherwise equivalent to may_hold.\n+            if let Ok(result) = self.probe(|_| self.evaluate_obligation(&o)) && result.may_apply() {\n+                relationships.entry(ty).or_default().self_in_trait = true;\n+            }\n+        }\n+\n+        if let ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) =\n+            obligation.predicate.kind().skip_binder()\n+        {\n+            // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n+            // we need to make it into one.\n+            if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n+                debug!(\"relationships: {:?}.output = true\", vid);\n+                relationships.entry(vid).or_default().output = true;\n+            }\n+        }\n+    }\n }"}, {"sha": "7ddf9eaa4d8995463fa730d5ad653c536b174d2b", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb0a4e958950ed4dabc954c8a258594847b1d9bc/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0a4e958950ed4dabc954c8a258594847b1d9bc/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=fb0a4e958950ed4dabc954c8a258594847b1d9bc", "patch": "@@ -40,7 +40,6 @@ mod method;\n mod op;\n mod pat;\n mod place_op;\n-mod relationships;\n mod rvalue_scopes;\n mod upvar;\n mod writeback;"}, {"sha": "66aba084974575003d7fa55c0c79a97e39e936bf", "filename": "compiler/rustc_hir_typeck/src/relationships.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe472223e4bcdd960d73e323979d15168ce4e39/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Frelationships.rs?ref=7fe472223e4bcdd960d73e323979d15168ce4e39", "patch": "@@ -1,46 +0,0 @@\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty;\n-use rustc_trait_selection::infer::InferCtxt;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n-use rustc_trait_selection::traits::PredicateObligation;\n-\n-pub fn update<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n-    relationships: &mut FxHashMap<ty::TyVid, ty::FoundRelationships>,\n-    obligation: &PredicateObligation<'tcx>,\n-) {\n-    // (*) binder skipped\n-    if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n-        && let Some(ty) = infcx.shallow_resolve(tpred.self_ty()).ty_vid().map(|t| infcx.root_var(t))\n-        && infcx.tcx.lang_items().sized_trait().map_or(false, |st| st != tpred.trait_ref.def_id)\n-    {\n-        let new_self_ty = infcx.tcx.types.unit;\n-\n-        // Then construct a new obligation with Self = () added\n-        // to the ParamEnv, and see if it holds.\n-        let o = obligation.with(infcx.tcx,\n-            obligation\n-                .predicate\n-                .kind()\n-                .rebind(\n-                    // (*) binder moved here\n-                    ty::PredicateKind::Clause(ty::Clause::Trait(tpred.with_self_ty(infcx.tcx, new_self_ty)))\n-                ),\n-        );\n-        // Don't report overflow errors. Otherwise equivalent to may_hold.\n-        if let Ok(result) = infcx.probe(|_| infcx.evaluate_obligation(&o)) && result.may_apply() {\n-            relationships.entry(ty).or_default().self_in_trait = true;\n-        }\n-    }\n-\n-    if let ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) =\n-        obligation.predicate.kind().skip_binder()\n-    {\n-        // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n-        // we need to make it into one.\n-        if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n-            debug!(\"relationship: {:?}.output = true\", vid);\n-            relationships.entry(vid).or_default().output = true;\n-        }\n-    }\n-}"}]}