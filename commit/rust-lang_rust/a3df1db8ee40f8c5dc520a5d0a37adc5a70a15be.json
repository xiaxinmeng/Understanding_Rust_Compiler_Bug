{"sha": "a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZGYxZGI4ZWU0MGY4YzVkYzUyMGE1ZDBhMzdhZGM1YTcwYTE1YmU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-30T17:34:16Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-30T17:34:16Z"}, "message": "update tests, improve variable names", "tree": {"sha": "216baa0968a882095c9bd11caf89b7aed9d400b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216baa0968a882095c9bd11caf89b7aed9d400b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "html_url": "https://github.com/rust-lang/rust/commit/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c5eefdcde3a8696881643faeb7e2619ea0322f", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c5eefdcde3a8696881643faeb7e2619ea0322f", "html_url": "https://github.com/rust-lang/rust/commit/40c5eefdcde3a8696881643faeb7e2619ea0322f"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "c2a71ca5669a130b62c96eb4dd17e59d8e06acf3", "filename": "src/librustc_error_codes/error_codes/E0730.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0730.md?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -7,8 +7,8 @@ Example of erroneous code:\n \n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {\n-        [1, 2, 3] => true, // error: cannot pattern-match on an\n-                           //        array without a fixed length\n+        [1, 2, ..] => true, // error: cannot pattern-match on an\n+                            //        array without a fixed length\n         _ => false\n     }\n }"}, {"sha": "b3cace8298a923852fc9198b3285cbecd3e175a1", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -1355,7 +1355,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let err = self.tcx.types.err;\n         let expected = self.structurally_resolved_type(span, expected);\n-        let (element_ty, slice_ty, expected) = match expected.kind {\n+        let (element_ty, slice_ty, inferred) = match expected.kind {\n             // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(element_ty, len) => {\n                 let min = before.len() as u64 + after.len() as u64;\n@@ -1385,7 +1385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for elt in after {\n             self.check_pat(&elt, element_ty, def_bm, ti);\n         }\n-        expected\n+        inferred\n     }\n \n     /// Type check the length of an array pattern."}, {"sha": "7f3da75ddcbe8525b7cc439b30bc0d329c3098b0", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn is_123<const N: usize>(x: [u32; N]) -> bool {\n+    match x {\n+        [1, 2] => true, //~ ERROR mismatched types\n+        _ => false\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9edb139028b7250e32679423d9c4571f1a040f27", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/match_arr_unknown_len.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/match_arr_unknown_len.rs:6:9\n+   |\n+LL |         [1, 2] => true,\n+   |         ^^^^^^ expected `2usize`, found `N`\n+   |\n+   = note: expected array `[u32; 2]`\n+              found array `[u32; _]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "66a6e1c817a37afe2a5108e4866f40dc9cf59a85", "filename": "src/test/ui/error-codes/E0730.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -3,7 +3,7 @@\n \n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {\n-        [1, 2, 3] => true, //~ ERROR mismatched types\n+        [1, 2, ..] => true, //~ ERROR cannot pattern-match on an array without a fixed length\n         _ => false\n     }\n }"}, {"sha": "fb53ae31c0b428a0bf9b9335db2ab84266937afd", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=a3df1db8ee40f8c5dc520a5d0a37adc5a70a15be", "patch": "@@ -6,15 +6,12 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0308]: mismatched types\n+error[E0730]: cannot pattern-match on an array without a fixed length\n   --> $DIR/E0730.rs:6:9\n    |\n-LL |         [1, 2, 3] => true,\n-   |         ^^^^^^^^^ expected `3usize`, found `N`\n-   |\n-   = note: expected array `[u32; 3]`\n-              found array `[u32; _]`\n+LL |         [1, 2, ..] => true,\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0730`."}]}