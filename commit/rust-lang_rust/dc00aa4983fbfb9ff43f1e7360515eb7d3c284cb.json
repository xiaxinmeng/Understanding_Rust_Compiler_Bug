{"sha": "dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDBhYTQ5ODNmYmZiOWZmNDNmMWU3MzYwNTE1ZWI3ZDNjMjg0Y2I=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:50Z"}, "message": "Rollup merge of #46820 - nodakai:simplify-int-impl, r=alexcrichton\n\nlibcore/num/mod.rs: simplify the int_impl! macro.\n\nWe can simply use generic intrinsics since cd1848a1a6 by @alexcrichton\n\nAlso, minimize unsafe blocks.", "tree": {"sha": "d2ad7e9fdf9e3ab6d7a2e0ebaf7e183b7e2ab578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ad7e9fdf9e3ab6d7a2e0ebaf7e183b7e2ab578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb", "html_url": "https://github.com/rust-lang/rust/commit/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee069c70a20da4bebbe630d316481bfffa7ab42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee069c70a20da4bebbe630d316481bfffa7ab42", "html_url": "https://github.com/rust-lang/rust/commit/0ee069c70a20da4bebbe630d316481bfffa7ab42"}, {"sha": "6bce6acebb9b62791034e821e6215f53a8bf2002", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bce6acebb9b62791034e821e6215f53a8bf2002", "html_url": "https://github.com/rust-lang/rust/commit/6bce6acebb9b62791034e821e6215f53a8bf2002"}], "stats": {"total": 203, "additions": 52, "deletions": 151}, "files": [{"sha": "379dcd017e0036be94d0c45ade5f0b107baab78b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 52, "deletions": 151, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=dc00aa4983fbfb9ff43f1e7360515eb7d3c284cb", "patch": "@@ -98,10 +98,7 @@ pub mod diy_float;\n \n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n-    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr,\n-     $add_with_overflow:path,\n-     $sub_with_overflow:path,\n-     $mul_with_overflow:path) => {\n+    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr) => {\n         /// Returns the smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -865,11 +862,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::add_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates `self` - `rhs`\n@@ -891,11 +888,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::sub_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the multiplication of `self` and `rhs`.\n@@ -915,11 +912,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $mul_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::mul_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the divisor when `self` is divided by `rhs`.\n@@ -1207,82 +1204,50 @@ macro_rules! int_impl {\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i8, i8, u8, 8 }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i16, i16, u16, 16 }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i32, i32, u32, 32 }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    int_impl! { i64, i64, u64, 64,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i64, i64, u64, 64 }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n-    int_impl! { i128, i128, u128, 128,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i128, i128, u128, 128 }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i16, u16, 16 }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i32, u32, 32 }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, u64, 64,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i64, u64, 64 }\n }\n \n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ty, $BITS:expr,\n-     $ctpop:path,\n-     $ctlz:path,\n-     $ctlz_nonzero:path,\n-     $cttz:path,\n-     $bswap:path,\n-     $add_with_overflow:path,\n-     $sub_with_overflow:path,\n-     $mul_with_overflow:path) => {\n+    ($SelfT:ty, $ActualT:ty, $BITS:expr) => {\n         /// Returns the smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -1346,7 +1311,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn count_ones(self) -> u32 {\n-            unsafe { $ctpop(self as $ActualT) as u32 }\n+            unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n         }\n \n         /// Returns the number of zeros in the binary representation of `self`.\n@@ -1381,7 +1346,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn leading_zeros(self) -> u32 {\n-            unsafe { $ctlz(self as $ActualT) as u32 }\n+            unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n         }\n \n         /// Returns the number of trailing zeros in the binary representation\n@@ -1480,7 +1445,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn swap_bytes(self) -> Self {\n-            unsafe { $bswap(self as $ActualT) as Self }\n+            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n         }\n \n         /// Converts an integer from big endian to the target's endianness.\n@@ -1984,11 +1949,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::add_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates `self` - `rhs`\n@@ -2010,11 +1975,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::sub_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the multiplication of `self` and `rhs`.\n@@ -2034,11 +1999,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $mul_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::mul_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the divisor when `self` is divided by `rhs`.\n@@ -2223,7 +2188,7 @@ macro_rules! uint_impl {\n             // (such as intel pre-haswell) have more efficient ctlz\n             // intrinsics when the argument is non-zero.\n             let p = self - 1;\n-            let z = unsafe { $ctlz_nonzero(p) };\n+            let z = unsafe { intrinsics::ctlz_nonzero(p) };\n             <$SelfT>::max_value() >> z\n         }\n \n@@ -2270,15 +2235,7 @@ macro_rules! uint_impl {\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u8, u8, 8 }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -2824,95 +2781,39 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u16, u16, 16 }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u32, u32, 32 }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u64, u64, 64 }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u128, u128, 128 }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u16, 16 }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u32, 32 }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u64, 64 }\n }\n \n /// A classification of floating point numbers."}]}