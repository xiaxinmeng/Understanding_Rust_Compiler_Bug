{"sha": "3a69435af7a1e6273744085cb251adb2b9c30a03", "node_id": "C_kwDOAAsO6NoAKDNhNjk0MzVhZjdhMWU2MjczNzQ0MDg1Y2IyNTFhZGIyYjljMzBhMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T08:36:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T08:36:18Z"}, "message": "Auto merge of #13333 - feniljain:fix_assists, r=Veykril\n\nfix(generate_method): correct method indentation inside generated impl and change gen loc\n\nshould fix #10619", "tree": {"sha": "d94ce98733a7627ced13140ddd2b8bffd97bac03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94ce98733a7627ced13140ddd2b8bffd97bac03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a69435af7a1e6273744085cb251adb2b9c30a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a69435af7a1e6273744085cb251adb2b9c30a03", "html_url": "https://github.com/rust-lang/rust/commit/3a69435af7a1e6273744085cb251adb2b9c30a03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a69435af7a1e6273744085cb251adb2b9c30a03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf1d71bb88de3aae13dc38c8c89ba5b29fffc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf1d71bb88de3aae13dc38c8c89ba5b29fffc86", "html_url": "https://github.com/rust-lang/rust/commit/dcf1d71bb88de3aae13dc38c8c89ba5b29fffc86"}, {"sha": "37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "html_url": "https://github.com/rust-lang/rust/commit/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "8b67982f9158234b91afa04bf28c691b543b2d10", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 52, "deletions": 61, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3a69435af7a1e6273744085cb251adb2b9c30a03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a69435af7a1e6273744085cb251adb2b9c30a03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=3a69435af7a1e6273744085cb251adb2b9c30a03", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay, Module, Semantics, TypeInfo};\n+use hir::{Adt, HasSource, HirDisplay, Module, Semantics, TypeInfo};\n use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n@@ -145,7 +145,8 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n         return None;\n     }\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n-    let (target, insert_offset) = get_method_target(ctx, &target_module, &impl_)?;\n+    let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n+\n     let function_builder =\n         FunctionBuilder::from_method_call(ctx, &call, &fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n@@ -174,10 +175,11 @@ fn add_func_to_accumulator(\n     label: String,\n ) -> Option<()> {\n     acc.add(AssistId(\"generate_function\", AssistKind::Generate), label, text_range, |builder| {\n-        let function_template = function_builder.render();\n+        let indent = IndentLevel::from_node(function_builder.target.syntax());\n+        let function_template = function_builder.render(adt_name.is_some());\n         let mut func = function_template.to_string(ctx.config.snippet_cap);\n         if let Some(name) = adt_name {\n-            func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n+            func = format!(\"\\n{}impl {} {{\\n{}\\n{}}}\", indent, name, func, indent);\n         }\n         builder.edit_file(file);\n         match ctx.config.snippet_cap {\n@@ -307,7 +309,7 @@ impl FunctionBuilder {\n         })\n     }\n \n-    fn render(self) -> FunctionTemplate {\n+    fn render(self, is_method: bool) -> FunctionTemplate {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n@@ -325,8 +327,14 @@ impl FunctionBuilder {\n \n         match self.target {\n             GeneratedFunctionTarget::BehindItem(it) => {\n-                let indent = IndentLevel::from_node(&it);\n-                leading_ws = format!(\"\\n\\n{}\", indent);\n+                let mut indent = IndentLevel::from_node(&it);\n+                if is_method {\n+                    indent = indent + 1;\n+                    leading_ws = format!(\"{}\", indent);\n+                } else {\n+                    leading_ws = format!(\"\\n\\n{}\", indent);\n+                }\n+\n                 fn_def = fn_def.indent(indent);\n                 trailing_ws = String::new();\n             }\n@@ -411,14 +419,13 @@ fn get_fn_target(\n \n fn get_method_target(\n     ctx: &AssistContext<'_>,\n-    target_module: &Module,\n     impl_: &Option<ast::Impl>,\n+    adt: &Adt,\n ) -> Option<(GeneratedFunctionTarget, TextSize)> {\n     let target = match impl_ {\n         Some(impl_) => next_space_for_fn_in_impl(impl_)?,\n         None => {\n-            next_space_for_fn_in_module(ctx.sema.db, &target_module.definition_source(ctx.sema.db))?\n-                .1\n+            GeneratedFunctionTarget::BehindItem(adt.source(ctx.sema.db)?.syntax().value.clone())\n         }\n     };\n     Some((target.clone(), get_insert_offset(&target)))\n@@ -437,7 +444,7 @@ fn assoc_fn_target_info(\n         return None;\n     }\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n-    let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n+    let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n     let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n     Some(TargetInfo::new(target_module, adt_name, target, file, insert_offset))\n }\n@@ -1468,14 +1475,12 @@ fn foo() {S.bar$0();}\n \",\n             r\"\n struct S;\n-fn foo() {S.bar();}\n impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n }\n+fn foo() {S.bar();}\n \",\n         )\n     }\n@@ -1516,14 +1521,12 @@ fn foo() {s::S.bar$0();}\n             r\"\n mod s {\n     pub struct S;\n-impl S {\n-\n-\n-    pub(crate) fn bar(&self) ${0:-> _} {\n-        todo!()\n+    impl S {\n+        pub(crate) fn bar(&self) ${0:-> _} {\n+            todo!()\n+        }\n     }\n }\n-}\n fn foo() {s::S.bar();}\n \",\n         )\n@@ -1544,18 +1547,16 @@ mod s {\n \",\n             r\"\n struct S;\n+impl S {\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n+}\n mod s {\n     fn foo() {\n         super::S.bar();\n     }\n }\n-impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n-}\n \n \",\n         )\n@@ -1571,14 +1572,12 @@ fn foo() {$0S.bar();}\n \",\n             r\"\n struct S;\n-fn foo() {S.bar();}\n impl S {\n-\n-\n-fn bar(&self) ${0:-> _} {\n-    todo!()\n-}\n+    fn bar(&self) ${0:-> _} {\n+        todo!()\n+    }\n }\n+fn foo() {S.bar();}\n \",\n         )\n     }\n@@ -1593,14 +1592,12 @@ fn foo() {S::bar$0();}\n \",\n             r\"\n struct S;\n-fn foo() {S::bar();}\n impl S {\n-\n-\n-fn bar() ${0:-> _} {\n-    todo!()\n-}\n+    fn bar() ${0:-> _} {\n+        todo!()\n+    }\n }\n+fn foo() {S::bar();}\n \",\n         )\n     }\n@@ -1641,14 +1638,12 @@ fn foo() {s::S::bar$0();}\n             r\"\n mod s {\n     pub struct S;\n-impl S {\n-\n-\n-    pub(crate) fn bar() ${0:-> _} {\n-        todo!()\n+    impl S {\n+        pub(crate) fn bar() ${0:-> _} {\n+            todo!()\n+        }\n     }\n }\n-}\n fn foo() {s::S::bar();}\n \",\n         )\n@@ -1664,14 +1659,12 @@ fn foo() {$0S::bar();}\n \",\n             r\"\n struct S;\n-fn foo() {S::bar();}\n impl S {\n-\n-\n-fn bar() ${0:-> _} {\n-    todo!()\n-}\n+    fn bar() ${0:-> _} {\n+        todo!()\n+    }\n }\n+fn foo() {S::bar();}\n \",\n         )\n     }\n@@ -1841,15 +1834,13 @@ fn main() {\n \",\n             r\"\n enum Foo {}\n-fn main() {\n-    Foo::new();\n-}\n impl Foo {\n-\n-\n-fn new() ${0:-> _} {\n-    todo!()\n+    fn new() ${0:-> _} {\n+        todo!()\n+    }\n }\n+fn main() {\n+    Foo::new();\n }\n \",\n         )"}]}