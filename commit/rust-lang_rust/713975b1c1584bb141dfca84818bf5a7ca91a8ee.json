{"sha": "713975b1c1584bb141dfca84818bf5a7ca91a8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMzk3NWIxYzE1ODRiYjE0MWRmY2E4NDgxOGJmNWE3Y2E5MWE4ZWU=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T12:21:56Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Properly support the case when the cursor is inside an empty block or outside", "tree": {"sha": "54a7769270157fffdb5ce2bd86a321b4f3079277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a7769270157fffdb5ce2bd86a321b4f3079277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713975b1c1584bb141dfca84818bf5a7ca91a8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713975b1c1584bb141dfca84818bf5a7ca91a8ee", "html_url": "https://github.com/rust-lang/rust/commit/713975b1c1584bb141dfca84818bf5a7ca91a8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713975b1c1584bb141dfca84818bf5a7ca91a8ee/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38eece97ecc801811a8847cfd230e97d838398cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/38eece97ecc801811a8847cfd230e97d838398cd", "html_url": "https://github.com/rust-lang/rust/commit/38eece97ecc801811a8847cfd230e97d838398cd"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "f121dafb21ad1a4df687e6840ccdb40b851b847d", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/713975b1c1584bb141dfca84818bf5a7ca91a8ee/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713975b1c1584bb141dfca84818bf5a7ca91a8ee/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=713975b1c1584bb141dfca84818bf5a7ca91a8ee", "patch": "@@ -4,7 +4,7 @@ use crate::{Assist, AssistId, AssistCtx};\n \n use hir::Resolver;\n use hir::db::HirDatabase;\n-use ra_syntax::{SmolStr, SyntaxKind, SyntaxNode, TextUnit, TreeArc};\n+use ra_syntax::{SmolStr, SyntaxKind, TextRange, TextUnit, TreeArc};\n use ra_syntax::ast::{self, AstNode, FnDef, ImplItem, ImplItemKind, NameOwner};\n use ra_db::FilePosition;\n use ra_fmt::{leading_indent, reindent};\n@@ -42,17 +42,13 @@ pub(crate) fn build_func_body(def: &ast::FnDef) -> String {\n }\n \n pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    use SyntaxKind::{IMPL_BLOCK, ITEM_LIST, WHITESPACE};\n-\n     let node = ctx.covering_node();\n-    let kinds = node.ancestors().take(3).map(SyntaxNode::kind);\n-    // Only suggest this in `impl Foo for S { [Item...] <|> }` cursor position\n-    if !Iterator::eq(kinds, [WHITESPACE, ITEM_LIST, IMPL_BLOCK].iter().cloned()) {\n-        return None;\n-    }\n-\n     let impl_node = node.ancestors().find_map(ast::ImplBlock::cast)?;\n     let impl_item_list = impl_node.item_list()?;\n+    // Don't offer the assist when cursor is at the end, outside the block itself.\n+    if node.range().end() == impl_node.syntax().range().end() {\n+        return None;\n+    }\n \n     let trait_def = {\n         let db = ctx.db;\n@@ -82,14 +78,10 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         .cloned()\n         .filter(|t| def_name(t).map(|n| missing_fn_names.contains(&n)).unwrap_or(false))\n         .collect();\n-\n     if missing_fns.is_empty() {\n         return None;\n     }\n \n-    let last_whitespace_node =\n-        impl_item_list.syntax().children().filter_map(ast::Whitespace::cast).last()?.syntax();\n-\n     ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add missing impl members\", |edit| {\n         let indent = {\n             // FIXME: Find a way to get the indent already used in the file.\n@@ -109,7 +101,16 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         let func_bodies = String::from(\"\\n\") + &func_bodies;\n         let func_bodies = reindent(&func_bodies, &indent) + \"\\n\";\n \n-        let changed_range = last_whitespace_node.range();\n+        let changed_range = {\n+            let last_whitespace = impl_item_list.syntax().children();\n+            let last_whitespace = last_whitespace.filter_map(ast::Whitespace::cast).last();\n+            let last_whitespace = last_whitespace.map(|w| w.syntax());\n+\n+            let cursor_range = TextRange::from_to(node.range().end(), node.range().end());\n+\n+            last_whitespace.map(|x| x.range()).unwrap_or(cursor_range)\n+        };\n+\n         let replaced_text_range = TextUnit::of_str(&func_bodies);\n \n         edit.replace(changed_range, func_bodies);\n@@ -122,7 +123,7 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{ check_assist };\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn test_add_missing_impl_members() {\n@@ -157,4 +158,32 @@ impl Foo for S {\n }\",\n         );\n     }\n+\n+    #[test]\n+    fn test_empty_impl_block() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S {<|>}\",\n+            \"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S {\n+    fn foo(&self) { unimplemented!() }<|>\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_cursor_after_empty_impl_block() {\n+        check_assist_not_applicable(\n+            add_missing_impl_members,\n+            \"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S {}<|>\",\n+        )\n+    }\n }"}]}