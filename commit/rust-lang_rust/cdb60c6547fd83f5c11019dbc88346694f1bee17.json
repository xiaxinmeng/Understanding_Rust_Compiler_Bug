{"sha": "cdb60c6547fd83f5c11019dbc88346694f1bee17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjYwYzY1NDdmZDgzZjVjMTEwMTlkYmM4ODM0NjY5NGYxYmVlMTc=", "commit": {"author": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-05T08:30:07Z"}, "committer": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-05T08:30:07Z"}, "message": "Make `redundant_field_name` not care range expressions\n\nHand-written `Range` struct family are treated normally.", "tree": {"sha": "fa40f292877305514199f0bef5ede5a89dde7619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa40f292877305514199f0bef5ede5a89dde7619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb60c6547fd83f5c11019dbc88346694f1bee17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb60c6547fd83f5c11019dbc88346694f1bee17", "html_url": "https://github.com/rust-lang/rust/commit/cdb60c6547fd83f5c11019dbc88346694f1bee17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb60c6547fd83f5c11019dbc88346694f1bee17/comments", "author": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b48b03375e11421490d23a7ea36ef05181e3842", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b48b03375e11421490d23a7ea36ef05181e3842", "html_url": "https://github.com/rust-lang/rust/commit/5b48b03375e11421490d23a7ea36ef05181e3842"}], "stats": {"total": 113, "additions": 72, "deletions": 41}, "files": [{"sha": "885e1aa9f8d192842215ccd5f256f2d674376f3e", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cdb60c6547fd83f5c11019dbc88346694f1bee17/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb60c6547fd83f5c11019dbc88346694f1bee17/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=cdb60c6547fd83f5c11019dbc88346694f1bee17", "patch": "@@ -1,8 +1,6 @@\n-use syntax::ast::Name;\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{match_qpath, match_var, span_lint_and_sugg};\n-use utils::paths;\n+use utils::{is_range_expression, match_var, span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -42,7 +40,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n             for field in fields {\n                 let name = field.name.node;\n \n-                if is_range_struct_field(path, &name) {\n+                // Do not care about range expressions.\n+                // They could have redundant field name when desugared to structs.\n+                // e.g. `start..end` is desugared to `Range { start: start, end: end }`\n+                if is_range_expression(expr.span) {\n                     continue;\n                 }\n \n@@ -60,27 +61,3 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n         }\n     }\n }\n-\n-/// ```rust\n-/// let start = 0;\n-/// let _ = start..;\n-///\n-/// let end = 0;\n-/// let _ = ..end;\n-///\n-/// let _ = start..end;\n-/// ```\n-fn is_range_struct_field(path: &QPath, name: &Name) -> bool {\n-    match name.as_str().as_ref() {\n-        \"start\" => {\n-            match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE_FROM_STD)\n-                || match_qpath(path, &paths::RANGE_INCLUSIVE_STD)\n-        },\n-        \"end\" => {\n-            match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE_TO_STD)\n-                || match_qpath(path, &paths::RANGE_INCLUSIVE_STD)\n-                || match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD)\n-        },\n-        _ => false,\n-    }\n-}"}, {"sha": "2f2f0c04054f916223de4202c97a8dd6e9ae4994", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdb60c6547fd83f5c11019dbc88346694f1bee17/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb60c6547fd83f5c11019dbc88346694f1bee17/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cdb60c6547fd83f5c11019dbc88346694f1bee17", "patch": "@@ -64,6 +64,16 @@ pub fn in_macro(span: Span) -> bool {\n     })\n }\n \n+/// Returns true if `expn_info` was expanded by range expressions.\n+pub fn is_range_expression(span: Span) -> bool {\n+    span.ctxt().outer().expn_info().map_or(false, |info| {\n+        match info.callee.format {\n+            ExpnFormat::CompilerDesugaring(CompilerDesugaringKind::DotFill) => true,\n+            _ => false,\n+        }\n+    })\n+}\n+\n /// Returns true if the macro that expanded the crate was outside of the\n /// current crate or was a\n /// compiler plugin."}, {"sha": "cb49283010ba0ca03c78b0a626f9a727369eb246", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cdb60c6547fd83f5c11019dbc88346694f1bee17/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb60c6547fd83f5c11019dbc88346694f1bee17/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=cdb60c6547fd83f5c11019dbc88346694f1bee17", "patch": "@@ -1,6 +1,8 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n-#![feature(inclusive_range,inclusive_range_syntax)]\n+#![feature(inclusive_range, inclusive_range_syntax)]\n+\n+use std::ops::{Range, RangeFrom, RangeTo, RangeInclusive, RangeToInclusive};\n \n mod foo {\n     pub const BAR: u8 = 0;\n@@ -29,7 +31,7 @@ fn main() {\n         foo: foo::BAR, //should be ok\n     };\n \n-    // Range syntax\n+    // Range expressions\n     let (start, end) = (0, 0);\n \n     let _ = start..;\n@@ -39,10 +41,10 @@ fn main() {\n     let _ = ..=end;\n     let _ = start..=end;\n \n-    // TODO: the following should be linted\n-    let _ = ::std::ops::RangeFrom { start: start };\n-    let _ = ::std::ops::RangeTo { end: end };\n-    let _ = ::std::ops::Range { start: start, end: end };\n-    let _ = ::std::ops::RangeInclusive { start: start, end: end };\n-    let _ = ::std::ops::RangeToInclusive { end: end };\n+    // hand-written Range family structs are linted\n+    let _ = RangeFrom { start: start };\n+    let _ = RangeTo { end: end };\n+    let _ = Range { start: start, end: end };\n+    let _ = RangeInclusive { start: start, end: end };\n+    let _ = RangeToInclusive { end: end };\n }"}, {"sha": "40315c6ffac2b3b48664c867d9ff377bef22dc16", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cdb60c6547fd83f5c11019dbc88346694f1bee17/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb60c6547fd83f5c11019dbc88346694f1bee17/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=cdb60c6547fd83f5c11019dbc88346694f1bee17", "patch": "@@ -1,16 +1,58 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:24:9\n+  --> $DIR/redundant_field_names.rs:26:9\n    |\n-24 |         gender: gender,\n+26 |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:25:9\n+  --> $DIR/redundant_field_names.rs:27:9\n    |\n-25 |         age: age,\n+27 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n-error: aborting due to 2 previous errors\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:45:25\n+   |\n+45 |     let _ = RangeFrom { start: start };\n+   |                         ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:46:23\n+   |\n+46 |     let _ = RangeTo { end: end };\n+   |                       ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:47:21\n+   |\n+47 |     let _ = Range { start: start, end: end };\n+   |                     ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:47:35\n+   |\n+47 |     let _ = Range { start: start, end: end };\n+   |                                   ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:48:30\n+   |\n+48 |     let _ = RangeInclusive { start: start, end: end };\n+   |                              ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:48:44\n+   |\n+48 |     let _ = RangeInclusive { start: start, end: end };\n+   |                                            ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:49:32\n+   |\n+49 |     let _ = RangeToInclusive { end: end };\n+   |                                ^^^^^^^^ help: replace it with: `end`\n+\n+error: aborting due to 9 previous errors\n "}]}