{"sha": "8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmN2ZjZWViOWNlYWI2MzgzZGVhZTg4OTVjODhiM2JhNTNmOGRhYmU=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-07T04:41:31Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-07T04:41:31Z"}, "message": "fix cargo check config with custom command", "tree": {"sha": "141457681118671f58c055321b6a8f80f713224a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141457681118671f58c055321b6a8f80f713224a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "html_url": "https://github.com/rust-lang/rust/commit/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c859a6480af7baece2eec38c19f71cb714db9e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c859a6480af7baece2eec38c19f71cb714db9e3b", "html_url": "https://github.com/rust-lang/rust/commit/c859a6480af7baece2eec38c19f71cb714db9e3b"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "4734df16ac3b4974162c1e53ae993c4d7db921a4", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "patch": "@@ -131,37 +131,47 @@ impl Config {\n         set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n         set(value, \"/cargo/features\", &mut self.cargo.features);\n         set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n-        if let Some(mut args) = get::<Vec<String>>(value, \"/rustfmt/overrideCommand\") {\n-            if !args.is_empty() {\n+        match get::<Vec<String>>(value, \"/rustfmt/overrideCommand\") {\n+            Some(mut args) if !args.is_empty() => {\n                 let command = args.remove(0);\n                 self.rustfmt = RustfmtConfig::CustomCommand {\n                     command,\n                     args,\n                 }\n             }\n-        } else if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"/rustfmt/extraArgs\", extra_args);\n-        }\n+            _ => {\n+                if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n+                    set(value, \"/rustfmt/extraArgs\", extra_args);\n+                }\n+            }\n+        };\n \n         if let Some(false) = get(value, \"/checkOnSave/enable\") {\n+            // check is disabled\n             self.check = None;\n         } else {\n-            if let Some(mut args) = get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\") {\n-                if !args.is_empty() {\n+            // check is enabled\n+            match get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\") {\n+                // first see if the user has completely overridden the command\n+                Some(mut args) if !args.is_empty() => {\n                     let command = args.remove(0);\n                     self.check = Some(FlycheckConfig::CustomCommand {\n                         command,\n                         args,\n                     });\n                 }\n-\n-            } else if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n-            {\n-                set(value, \"/checkOnSave/extraArgs\", extra_args);\n-                set(value, \"/checkOnSave/command\", command);\n-                set(value, \"/checkOnSave/allTargets\", all_targets);\n-            }\n-        };\n+                // otherwise configure command customizations\n+                _ => {\n+                    if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets })\n+                        = &mut self.check\n+                    {\n+                        set(value, \"/checkOnSave/extraArgs\", extra_args);\n+                        set(value, \"/checkOnSave/command\", command);\n+                        set(value, \"/checkOnSave/allTargets\", all_targets);\n+                    }\n+                }\n+            };\n+        }\n \n         set(value, \"/inlayHints/typeHints\", &mut self.inlay_hints.type_hints);\n         set(value, \"/inlayHints/parameterHints\", &mut self.inlay_hints.parameter_hints);"}]}