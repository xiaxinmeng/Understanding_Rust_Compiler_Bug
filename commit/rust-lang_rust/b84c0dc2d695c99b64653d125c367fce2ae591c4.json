{"sha": "b84c0dc2d695c99b64653d125c367fce2ae591c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NGMwZGMyZDY5NWM5OWI2NDY1M2QxMjVjMzY3ZmNlMmFlNTkxYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T05:09:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-16T18:41:27Z"}, "message": "doc: Remove all uses of `~str` from the documentation.", "tree": {"sha": "6c0d148b80dceac896282f983d31ed0b05249738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0d148b80dceac896282f983d31ed0b05249738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84c0dc2d695c99b64653d125c367fce2ae591c4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84c0dc2d695c99b64653d125c367fce2ae591c4", "html_url": "https://github.com/rust-lang/rust/commit/b84c0dc2d695c99b64653d125c367fce2ae591c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84c0dc2d695c99b64653d125c367fce2ae591c4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb08f11b75259ad4f208e25fab6c7acc1bccd89", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb08f11b75259ad4f208e25fab6c7acc1bccd89", "html_url": "https://github.com/rust-lang/rust/commit/1fb08f11b75259ad4f208e25fab6c7acc1bccd89"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "4670a2922cf8c6100bb51f6a4cf6548bc658484c", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -8,7 +8,7 @@ Use [`ToStr`](http://static.rust-lang.org/doc/master/std/to_str/trait.ToStr.html\n \n ~~~\n let x: int = 42;\n-let y: ~str = x.to_str();\n+let y: StrBuf = x.to_str().to_strbuf();\n ~~~\n \n **String to int**\n@@ -22,14 +22,14 @@ let y: int = x.unwrap();\n \n **Int to string, in non-base-10**\n \n-Use the `format!` syntax extension.\n+Use the `format_strbuf!` syntax extension.\n \n ~~~\n let x: int = 42;\n-let y: ~str = format!(\"{:t}\", x);   // binary\n-let y: ~str = format!(\"{:o}\", x);   // octal\n-let y: ~str = format!(\"{:x}\", x);   // lowercase hexadecimal\n-let y: ~str = format!(\"{:X}\", x);   // uppercase hexadecimal\n+let y: StrBuf = format_strbuf!(\"{:t}\", x);   // binary\n+let y: StrBuf = format_strbuf!(\"{:o}\", x);   // octal\n+let y: StrBuf = format_strbuf!(\"{:x}\", x);   // lowercase hexadecimal\n+let y: StrBuf = format_strbuf!(\"{:X}\", x);   // uppercase hexadecimal\n ~~~\n \n **String to int, in non-base-10**\n@@ -55,13 +55,14 @@ let x: Option<&str> = str::from_utf8(bytes);\n let y: &str = x.unwrap();\n ~~~\n \n-To return an Owned String (~str) use the str helper function [`from_utf8_owned`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8_owned.html).\n+To return an Owned String (StrBuf) use the str helper function [`from_utf8_owned`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8_owned.html).\n \n ~~~\n use std::str;\n \n-let x: Result<~str,~[u8]> = str::from_utf8_owned(~[104u8,105u8]);\n-let y: ~str = x.unwrap();\n+let x: Result<StrBuf,~[u8]> =\n+    str::from_utf8_owned(~[104u8,105u8]).map(|x| x.to_strbuf());\n+let y: StrBuf = x.unwrap();\n ~~~\n \n To return a [`MaybeOwned`](http://static.rust-lang.org/doc/master/std/str/enum.MaybeOwned.html) use the str helper function [`from_utf8_lossy`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8_owned.html).  This function also replaces non-valid utf-8 sequences with U+FFFD replacement character.\n@@ -181,7 +182,7 @@ enum Closed {}\n Phantom types are useful for enforcing state at compile time. For example:\n \n ~~~\n-struct Door<State>(~str);\n+struct Door<State>(StrBuf);\n \n struct Open;\n struct Closed;\n@@ -194,13 +195,13 @@ fn open(Door(name): Door<Closed>) -> Door<Open> {\n     Door::<Open>(name)\n }\n \n-let _ = close(Door::<Open>(\"front\".to_owned()));\n+let _ = close(Door::<Open>(\"front\".to_strbuf()));\n ~~~\n \n Attempting to close a closed door is prevented statically:\n \n ~~~ {.ignore}\n-let _ = close(Door::<Closed>(\"front\".to_owned())); // error: mismatched types: expected `main::Door<main::Open>` but found `main::Door<main::Closed>`\n+let _ = close(Door::<Closed>(\"front\".to_strbuf())); // error: mismatched types: expected `main::Door<main::Open>` but found `main::Door<main::Closed>`\n ~~~\n \n # FFI (Foreign Function Interface)"}, {"sha": "66935300f18d9ccc2bd5ec1855075cc85d32accf", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -85,7 +85,7 @@ To take as an argument a fragment of Rust code, write `$` followed by a name\n   `foo`.)\n * `expr` (an expression. Examples: `2 + 2`; `if true then { 1 } else { 2 }`;\n   `f(42)`.)\n-* `ty` (a type. Examples: `int`, `~[(char, ~str)]`, `&T`.)\n+* `ty` (a type. Examples: `int`, `~[(char, StrBuf)]`, `&T`.)\n * `pat` (a pattern, usually appearing in a `match` or on the left-hand side of\n   a declaration. Examples: `Some(t)`; `(17, 'a')`; `_`.)\n * `block` (a sequence of actions. Example: `{ log(error, \"hi\"); return 12; }`)"}, {"sha": "8df11c59f60ef8271a0f0b25add20389feb311b4", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -463,11 +463,11 @@ Here is the function that implements the child task:\n ~~~\n extern crate sync;\n # fn main() {\n-fn stringifier(channel: &sync::DuplexStream<~str, uint>) {\n+fn stringifier(channel: &sync::DuplexStream<StrBuf, uint>) {\n     let mut value: uint;\n     loop {\n         value = channel.recv();\n-        channel.send(value.to_str());\n+        channel.send(value.to_str().to_strbuf());\n         if value == 0 { break; }\n     }\n }\n@@ -488,11 +488,11 @@ Here is the code for the parent task:\n extern crate sync;\n # use std::task::spawn;\n # use sync::DuplexStream;\n-# fn stringifier(channel: &sync::DuplexStream<~str, uint>) {\n+# fn stringifier(channel: &sync::DuplexStream<StrBuf, uint>) {\n #     let mut value: uint;\n #     loop {\n #         value = channel.recv();\n-#         channel.send(value.to_str());\n+#         channel.send(value.to_str().to_strbuf());\n #         if value == 0u { break; }\n #     }\n # }\n@@ -505,13 +505,13 @@ spawn(proc() {\n });\n \n from_child.send(22);\n-assert!(from_child.recv() == \"22\".to_owned());\n+assert!(from_child.recv().as_slice() == \"22\");\n \n from_child.send(23);\n from_child.send(0);\n \n-assert!(from_child.recv() == \"23\".to_owned());\n-assert!(from_child.recv() == \"0\".to_owned());\n+assert!(from_child.recv().as_slice() == \"23\");\n+assert!(from_child.recv().as_slice() == \"0\");\n \n # }\n ~~~"}, {"sha": "4ce4d1697be0bd94f1dfe21285fe96ad890a7c2d", "filename": "src/doc/po/ja/complement-cheatsheet.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -34,7 +34,7 @@ msgstr \"\"\n #, fuzzy\n #| msgid \"\"\n #| \"~~~~ let x: f64 = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n-msgid \"~~~ let x: int = 42; let y: ~str = x.to_str(); ~~~\"\n+msgid \"~~~ let x: int = 42; let y: StrBuf = x.to_str(); ~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n \"let x: f64 = 4.0;\\n\"\n@@ -96,7 +96,7 @@ msgstr \"\"\n #, fuzzy\n #| msgid \"\"\n #| \"~~~~ let x: f64 = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n-msgid \"let x: int = 42; let y: ~str = x.to_str_radix(16); ~~~\"\n+msgid \"let x: int = 42; let y: StrBuf = x.to_str_radix(16); ~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n \"let x: f64 = 4.0;\\n\""}, {"sha": "b23f130f2663887d0f5402d8448c294c13a726dd", "filename": "src/doc/po/ja/rust.md.po", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Frust.md.po?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -1641,7 +1641,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Printable {\\n\"\n-\"  fn to_string(&self) -> ~str;\\n\"\n+\"  fn to_string(&self) -> StrBuf;\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n@@ -1656,7 +1656,7 @@ msgstr \"\"\n #| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Printable for int {\\n\"\n-\"  fn to_string(&self) -> ~str { self.to_str() }\\n\"\n+\"  fn to_string(&self) -> StrBuf { self.to_str() }\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n@@ -1702,7 +1702,7 @@ msgstr \"# \u30af\u30ed\u30fc\u30b8\u30e3\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Printable {\\n\"\n-\"  fn make_string(&self) -> ~str;\\n\"\n+\"  fn make_string(&self) -> StrBuf;\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n@@ -1716,8 +1716,8 @@ msgstr \"\"\n #, fuzzy, no-wrap\n #| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n-\"impl Printable for ~str {\\n\"\n-\"    fn make_string(&self) -> ~str {\\n\"\n+\"impl Printable for StrBuf {\\n\"\n+\"    fn make_string(&self) -> StrBuf {\\n\"\n \"        (*self).clone()\\n\"\n \"    }\\n\"\n \"}\\n\""}, {"sha": "96514e99b86b1682eeda44ca65db46cdf524907d", "filename": "src/doc/po/ja/tutorial.md.po", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -3755,15 +3755,15 @@ msgstr \"\"\n #| msgid \"\"\n #| \"Traits may be implemented for specific types with [impls]. An impl that \"\n #| \"implements a trait includes the name of the trait at the start of the \"\n-#| \"definition, as in the following impls of `Printable` for `int` and `~str`.\"\n+#| \"definition, as in the following impls of `Printable` for `int` and `StrBuf`.\"\n msgid \"\"\n \"Traits may be implemented for specific types with [impls]. An impl for a \"\n \"particular trait gives an implementation of the methods that trait \"\n \"provides.  For instance, the following impls of `Printable` for `int` and \"\n-\"`~str` give implementations of the `print` method.\"\n+\"`StrBuf` give implementations of the `print` method.\"\n msgstr \"\"\n \"[impl][impls] \u306b\u3088\u308a\u7279\u5b9a\u306e\u578b\u306b\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\"\n-\"\u88c5\u3059\u308b impl \u306f\u3001\u4ee5\u4e0b\u306e `Printable` \u306e `int` \u3068 `~str` \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u306e\u3088\u3046\u306b\u3001\"\n+\"\u88c5\u3059\u308b impl \u306f\u3001\u4ee5\u4e0b\u306e `Printable` \u306e `int` \u3068 `StrBuf` \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u306e\u3088\u3046\u306b\u3001\"\n \"\u5b9a\u7fa9\u306e\u5148\u982d\u306b\u30c8\u30ec\u30a4\u30c8\u306e\u540d\u524d\u3092\u542b\u307f\u307e\u3059\u3002\"\n \n #. type: Plain text\n@@ -3776,7 +3776,7 @@ msgstr \"[impls]: #\u30e1\u30bd\u30c3\u30c9\"\n #, fuzzy, no-wrap\n #| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n-\"impl Printable for ~str {\\n\"\n+\"impl Printable for StrBuf {\\n\"\n \"    fn print(&self) { println!(\\\"{}\\\", *self) }\\n\"\n \"}\\n\"\n msgstr \"\""}, {"sha": "4986ad1ba99f55809a4d11b13bed018fd2ca909d", "filename": "src/doc/rust.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -473,7 +473,7 @@ Two examples of paths with type arguments:\n # struct HashMap<K, V>;\n # fn f() {\n # fn id<T>(t: T) -> T { t }\n-type T = HashMap<int,~str>;  // Type arguments used in a type expression\n+type T = HashMap<int,StrBuf>;  // Type arguments used in a type expression\n let x = id::<int>(10);       // Type arguments used in a call expression\n # }\n ~~~~\n@@ -1259,12 +1259,12 @@ Enumeration constructors can have either named or unnamed fields:\n \n ~~~~\n enum Animal {\n-    Dog (~str, f64),\n-    Cat { name: ~str, weight: f64 }\n+    Dog (StrBuf, f64),\n+    Cat { name: StrBuf, weight: f64 }\n }\n \n-let mut a: Animal = Dog(\"Cocoa\".to_owned(), 37.2);\n-a = Cat{ name: \"Spotty\".to_owned(), weight: 2.7 };\n+let mut a: Animal = Dog(\"Cocoa\".to_strbuf(), 37.2);\n+a = Cat { name: \"Spotty\".to_strbuf(), weight: 2.7 };\n ~~~~\n \n In this example, `Cat` is a _struct-like enum variant_,\n@@ -2081,7 +2081,7 @@ These are functions:\n * `str_eq`\n   : Compare two strings (`&str`) for equality.\n * `uniq_str_eq`\n-  : Compare two owned strings (`~str`) for equality.\n+  : Compare two owned strings (`StrBuf`) for equality.\n * `strdup_uniq`\n   : Return a new unique string\n     containing a copy of the contents of a unique string.\n@@ -3309,7 +3309,7 @@ A value of type `str` is a Unicode string,\n represented as a vector of 8-bit unsigned bytes holding a sequence of UTF-8 codepoints.\n Since `str` is of unknown size, it is not a _first class_ type,\n but can only be instantiated through a pointer type,\n-such as `&str` or `~str`.\n+such as `&str` or `StrBuf`.\n \n ### Tuple types\n \n@@ -3573,11 +3573,11 @@ An example of an object type:\n \n ~~~~\n trait Printable {\n-  fn to_string(&self) -> ~str;\n+  fn to_string(&self) -> StrBuf;\n }\n \n impl Printable for int {\n-  fn to_string(&self) -> ~str { self.to_str() }\n+  fn to_string(&self) -> StrBuf { self.to_str().to_strbuf() }\n }\n \n fn print(a: Box<Printable>) {\n@@ -3618,17 +3618,17 @@ example, in:\n \n ~~~~\n trait Printable {\n-  fn make_string(&self) -> ~str;\n+  fn make_string(&self) -> StrBuf;\n }\n \n-impl Printable for ~str {\n-    fn make_string(&self) -> ~str {\n+impl Printable for StrBuf {\n+    fn make_string(&self) -> StrBuf {\n         (*self).clone()\n     }\n }\n ~~~~\n \n-`self` refers to the value of type `~str` that is the receiver for a\n+`self` refers to the value of type `StrBuf` that is the receiver for a\n call to the method `make_string`.\n \n ## Type kinds"}, {"sha": "3b7f4e1bf5013940cbd34d081116dc8263abd2b8", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -26,7 +26,7 @@ comments\":\n pub struct Widget {\n \t/// All widgets have a purpose (this is a doc comment, and will show up\n \t/// the field's documentation).\n-\tpurpose: ~str,\n+\tpurpose: StrBuf,\n \t/// Humans are not allowed to understand some widgets\n \tunderstandable: bool\n }"}, {"sha": "ad77b90e79b7023110ca784fc020158c4dc7b47b", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b84c0dc2d695c99b64653d125c367fce2ae591c4/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=b84c0dc2d695c99b64653d125c367fce2ae591c4", "patch": "@@ -2213,7 +2213,7 @@ don't provide any methods.\n Traits may be implemented for specific types with [impls]. An impl for\n a particular trait gives an implementation of the methods that\n trait provides.  For instance, the following impls of\n-`Printable` for `int` and `~str` give implementations of the `print`\n+`Printable` for `int` and `StrBuf` give implementations of the `print`\n method.\n \n [impls]: #methods\n@@ -2224,12 +2224,12 @@ impl Printable for int {\n     fn print(&self) { println!(\"{:?}\", *self) }\n }\n \n-impl Printable for ~str {\n+impl Printable for StrBuf {\n     fn print(&self) { println!(\"{}\", *self) }\n }\n \n # 1.print();\n-# (\"foo\".to_owned()).print();\n+# (\"foo\".to_strbuf()).print();\n ~~~~\n \n Methods defined in an impl for a trait may be called just like\n@@ -2270,7 +2270,7 @@ trait Printable {\n \n impl Printable for int {}\n \n-impl Printable for ~str {\n+impl Printable for StrBuf {\n     fn print(&self) { println!(\"{}\", *self) }\n }\n \n@@ -2279,7 +2279,7 @@ impl Printable for bool {}\n impl Printable for f32 {}\n \n # 1.print();\n-# (\"foo\".to_owned()).print();\n+# (\"foo\".to_strbuf()).print();\n # true.print();\n # 3.14159.print();\n ~~~~\n@@ -2291,7 +2291,7 @@ provided in the trait definition.  Depending on the trait, default\n methods can save a great deal of boilerplate code from having to be\n written in impls.  Of course, individual impls can still override the\n default method for `print`, as is being done above in the impl for\n-`~str`.\n+`StrBuf`.\n \n ## Type-parameterized traits\n "}]}