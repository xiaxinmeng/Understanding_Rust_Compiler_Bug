{"sha": "0156a538089828340a823ed02da8970bf4f1175b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNTZhNTM4MDg5ODI4MzQwYTgyM2VkMDJkYTg5NzBiZjRmMTE3NWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-12T07:52:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-12T07:52:38Z"}, "message": "Merge #276\n\n276: Extract and rename AtomEdit and Edit into ra_text_edit r=matklad a=vemoo\n\nAs discused in #105\r\n\r\n\n\nCo-authored-by: Bernardo <berublan@gmail.com>", "tree": {"sha": "07c4eacaad717ea802ab26972f45223281f2c9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c4eacaad717ea802ab26972f45223281f2c9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0156a538089828340a823ed02da8970bf4f1175b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0156a538089828340a823ed02da8970bf4f1175b", "html_url": "https://github.com/rust-lang/rust/commit/0156a538089828340a823ed02da8970bf4f1175b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0156a538089828340a823ed02da8970bf4f1175b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f655f993fe6d9faa81b0e776b9b24308d2ea1c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/f655f993fe6d9faa81b0e776b9b24308d2ea1c68", "html_url": "https://github.com/rust-lang/rust/commit/f655f993fe6d9faa81b0e776b9b24308d2ea1c68"}, {"sha": "0527e3b283af0153cf13fa64fe73862a5b7655c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0527e3b283af0153cf13fa64fe73862a5b7655c8", "html_url": "https://github.com/rust-lang/rust/commit/0527e3b283af0153cf13fa64fe73862a5b7655c8"}], "stats": {"total": 266, "additions": 156, "deletions": 110}, "files": [{"sha": "56d5c65b9cd3c94bb2b4549d5080215b07088967", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -610,6 +610,7 @@ dependencies = [\n  \"ra_editor 0.1.0\",\n  \"ra_hir 0.1.0\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_text_edit 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -649,6 +650,7 @@ dependencies = [\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_text_edit 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n@@ -687,6 +689,7 @@ dependencies = [\n  \"ra_analysis 0.1.0\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n+ \"ra_text_edit 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -710,13 +713,22 @@ dependencies = [\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_text_edit 0.1.0\",\n  \"rowan 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_text_edit\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"test_utils 0.1.0\",\n+ \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand\"\n version = \"0.4.3\""}, {"sha": "4a7b99947e164395f57c3aca9749bd38e06c88b0", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -14,6 +14,7 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.6.4\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "f480af61161a6b1ff9d7db1963006689df41e238", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,10 +1,11 @@\n mod reference_completion;\n \n use ra_editor::find_node_at_offset;\n+use ra_text_edit::AtomTextEdit;\n use ra_syntax::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n     ast,\n-    AstNode, AtomEdit,\n+    AstNode,\n     SyntaxNodeRef,\n };\n use ra_db::SyntaxDatabase;\n@@ -33,7 +34,7 @@ pub(crate) fn completions(\n     let original_file = db.source_file(position.file_id);\n     // Insert a fake ident to get a valid parse tree\n     let file = {\n-        let edit = AtomEdit::insert(position.offset, \"intellijRulezz\".to_string());\n+        let edit = AtomTextEdit::insert(position.offset, \"intellijRulezz\".to_string());\n         original_file.reparse(&edit)\n     };\n "}, {"sha": "22fff71abb42af935e23ff11adb71bbff631a6b5", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -18,7 +18,8 @@ pub mod mock_analysis;\n \n use std::{fmt, sync::Arc};\n \n-use ra_syntax::{AtomEdit, SourceFileNode, TextRange, TextUnit};\n+use ra_syntax::{SourceFileNode, TextRange, TextUnit};\n+use ra_text_edit::AtomTextEdit;\n use ra_db::FileResolverImp;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n@@ -120,7 +121,7 @@ pub struct SourceChange {\n #[derive(Debug)]\n pub struct SourceFileNodeEdit {\n     pub file_id: FileId,\n-    pub edits: Vec<AtomEdit>,\n+    pub edits: Vec<AtomTextEdit>,\n }\n \n #[derive(Debug)]"}, {"sha": "c29be13509a5ab66b67a3405101712fa3a4bdd15", "filename": "crates/ra_editor/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2FCargo.toml?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -12,6 +12,7 @@ join_to_string = \"0.1.1\"\n rustc-hash = \"1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "688a89c3dc497d76a09c7f8a156688b9fda9f5a3", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -8,11 +8,11 @@ use ra_syntax::{\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n \n-use crate::{find_node_at_offset, Edit, EditBuilder};\n+use crate::{find_node_at_offset, TextEdit, TextEditBuilder};\n \n #[derive(Debug)]\n pub struct LocalEdit {\n-    pub edit: Edit,\n+    pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n }\n \n@@ -26,7 +26,7 @@ pub fn flip_comma<'a>(\n     let prev = non_trivia_sibling(comma, Direction::Prev)?;\n     let next = non_trivia_sibling(comma, Direction::Next)?;\n     Some(move || {\n-        let mut edit = EditBuilder::new();\n+        let mut edit = TextEditBuilder::new();\n         edit.replace(prev.range(), next.text().to_string());\n         edit.replace(next.range(), prev.text().to_string());\n         LocalEdit {\n@@ -49,7 +49,7 @@ pub fn add_derive<'a>(\n             .filter(|(name, _arg)| name == \"derive\")\n             .map(|(_name, arg)| arg)\n             .next();\n-        let mut edit = EditBuilder::new();\n+        let mut edit = TextEditBuilder::new();\n         let offset = match derive_attr {\n             None => {\n                 edit.insert(node_start, \"#[derive()]\\n\".to_string());\n@@ -82,7 +82,7 @@ pub fn add_impl<'a>(\n \n     Some(move || {\n         let type_params = nominal.type_param_list();\n-        let mut edit = EditBuilder::new();\n+        let mut edit = TextEditBuilder::new();\n         let start_offset = nominal.syntax().range().end();\n         let mut buf = String::new();\n         buf.push_str(\"\\n\\nimpl\");\n@@ -129,7 +129,7 @@ pub fn introduce_variable<'a>(\n     }\n     return Some(move || {\n         let mut buf = String::new();\n-        let mut edit = EditBuilder::new();\n+        let mut edit = TextEditBuilder::new();\n \n         buf.push_str(\"let var_name = \");\n         expr.syntax().text().push_to(&mut buf);"}, {"sha": "36cabed25906df1cd45d95963e80fb0309153374", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,5 +1,4 @@\n mod code_actions;\n-mod edit;\n mod extend_selection;\n mod folding_ranges;\n mod line_index;\n@@ -10,14 +9,13 @@ mod typing;\n \n pub use self::{\n     code_actions::{add_derive, add_impl, flip_comma, introduce_variable, LocalEdit},\n-    edit::{Edit, EditBuilder},\n     extend_selection::extend_selection,\n     folding_ranges::{folding_ranges, Fold, FoldKind},\n     line_index::{LineCol, LineIndex},\n     symbols::{file_structure, file_symbols, FileSymbol, StructureNode},\n     typing::{join_lines, on_enter, on_eq_typed},\n };\n-pub use ra_syntax::AtomEdit;\n+use ra_text_edit::{TextEdit, TextEditBuilder};\n use ra_syntax::{\n     algo::find_leaf_at_offset,\n     ast::{self, AstNode, NameOwner},"}, {"sha": "46a6e2d62e86d9a80f4d58d9226a3d762ee02706", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -3,13 +3,14 @@ use std::mem;\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n     ast,\n-    text_utils::{contains_offset_nonstrict, intersect},\n+    text_utils::intersect,\n     AstNode, SourceFileNode, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n+use ra_text_edit::text_utils::contains_offset_nonstrict;\n \n-use crate::{find_node_at_offset, EditBuilder, LocalEdit};\n+use crate::{find_node_at_offset, TextEditBuilder, LocalEdit};\n \n pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     let range = if range.is_empty() {\n@@ -18,7 +19,7 @@ pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n         let pos = match text.find('\\n') {\n             None => {\n                 return LocalEdit {\n-                    edit: EditBuilder::new().finish(),\n+                    edit: TextEditBuilder::new().finish(),\n                     cursor_position: None,\n                 };\n             }\n@@ -30,7 +31,7 @@ pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     };\n \n     let node = find_covering_node(file.syntax(), range);\n-    let mut edit = EditBuilder::new();\n+    let mut edit = TextEditBuilder::new();\n     for node in node.descendants() {\n         let text = match node.leaf_text() {\n             Some(text) => text,\n@@ -72,7 +73,7 @@ pub fn on_enter(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n     let indent = node_indent(file, comment.syntax())?;\n     let inserted = format!(\"\\n{}{} \", indent, prefix);\n     let cursor_position = offset + TextUnit::of_str(&inserted);\n-    let mut edit = EditBuilder::new();\n+    let mut edit = TextEditBuilder::new();\n     edit.insert(offset, inserted);\n     Some(LocalEdit {\n         edit: edit.finish(),\n@@ -122,15 +123,20 @@ pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit>\n         return None;\n     }\n     let offset = let_stmt.syntax().range().end();\n-    let mut edit = EditBuilder::new();\n+    let mut edit = TextEditBuilder::new();\n     edit.insert(offset, \";\".to_string());\n     Some(LocalEdit {\n         edit: edit.finish(),\n         cursor_position: None,\n     })\n }\n \n-fn remove_newline(edit: &mut EditBuilder, node: SyntaxNodeRef, node_text: &str, offset: TextUnit) {\n+fn remove_newline(\n+    edit: &mut TextEditBuilder,\n+    node: SyntaxNodeRef,\n+    node_text: &str,\n+    offset: TextUnit,\n+) {\n     if node.kind() != WHITESPACE || node_text.bytes().filter(|&b| b == b'\\n').count() != 1 {\n         // The node is either the first or the last in the file\n         let suff = &node_text[TextRange::from_to(\n@@ -191,7 +197,7 @@ fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     }\n }\n \n-fn join_single_expr_block(edit: &mut EditBuilder, node: SyntaxNodeRef) -> Option<()> {\n+fn join_single_expr_block(edit: &mut TextEditBuilder, node: SyntaxNodeRef) -> Option<()> {\n     let block = ast::Block::cast(node.parent()?)?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n     let expr = single_expr(block)?;\n@@ -269,14 +275,14 @@ fn foo() {\n     fn test_join_lines_lambda_block() {\n         check_join_lines(\n             r\"\n-pub fn reparse(&self, edit: &AtomEdit) -> File {\n+pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n     <|>self.incremental_reparse(edit).unwrap_or_else(|| {\n         self.full_reparse(edit)\n     })\n }\n \",\n             r\"\n-pub fn reparse(&self, edit: &AtomEdit) -> File {\n+pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n     <|>self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n }\n \","}, {"sha": "133decc525783d0a9b9bc2dac8d188fb1c610721", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -28,6 +28,7 @@ rustc-hash = \"1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n ra_analysis = { path = \"../ra_analysis\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n "}, {"sha": "7467f472cb4fb552cd3da7f7aa95c56423594873", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,9 +1,10 @@\n use languageserver_types::{\n-    Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n-    TextDocumentItem, TextDocumentPositionParams, TextEdit, Url, VersionedTextDocumentIdentifier,\n+    self, Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n+    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n };\n use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileNodeEdit, FilePosition};\n-use ra_editor::{AtomEdit, Edit, LineCol, LineIndex};\n+use ra_editor::{LineCol, LineIndex};\n+use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n \n use crate::{req, server_world::ServerWorld, Result};\n@@ -91,24 +92,24 @@ impl ConvWith for Range {\n     }\n }\n \n-impl ConvWith for Edit {\n+impl ConvWith for TextEdit {\n     type Ctx = LineIndex;\n-    type Output = Vec<TextEdit>;\n+    type Output = Vec<languageserver_types::TextEdit>;\n \n-    fn conv_with(self, line_index: &LineIndex) -> Vec<TextEdit> {\n+    fn conv_with(self, line_index: &LineIndex) -> Vec<languageserver_types::TextEdit> {\n         self.into_atoms()\n             .into_iter()\n             .map_conv_with(line_index)\n             .collect()\n     }\n }\n \n-impl ConvWith for AtomEdit {\n+impl ConvWith for AtomTextEdit {\n     type Ctx = LineIndex;\n-    type Output = TextEdit;\n+    type Output = languageserver_types::TextEdit;\n \n-    fn conv_with(self, line_index: &LineIndex) -> TextEdit {\n-        TextEdit {\n+    fn conv_with(self, line_index: &LineIndex) -> languageserver_types::TextEdit {\n+        languageserver_types::TextEdit {\n             range: self.delete.conv_with(line_index),\n             new_text: self.insert,\n         }\n@@ -228,7 +229,7 @@ impl TryConvWith for SourceChange {\n fn translate_offset_with_edit(\n     pre_edit_index: &LineIndex,\n     offset: TextUnit,\n-    edits: &[AtomEdit],\n+    edits: &[AtomTextEdit],\n ) -> LineCol {\n     let fallback = pre_edit_index.line_col(offset);\n     let edit = match edits.first() {"}, {"sha": "21ca22c5c4d3e3e6f369ac9345734b5933df690e", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -9,7 +9,8 @@ use languageserver_types::{\n     WorkspaceEdit, ParameterInformation, SignatureInformation, Hover, HoverContents,\n };\n use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FilePosition};\n-use ra_syntax::{TextUnit, text_utils::{contains_offset_nonstrict, intersect}};\n+use ra_syntax::{TextUnit, text_utils::intersect};\n+use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n use serde_json::to_value;\n "}, {"sha": "8c9a7e238b6aa0fd95bc82bde140221751fe8be4", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -15,6 +15,7 @@ drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n rowan = \"0.1.2\"\n text_unit = \"0.1.5\"\n+ra_text_edit = { path = \"../ra_text_edit\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "34a3aabef87c301f67a20cc09fae9fb71b11be1c", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -41,13 +41,13 @@ pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use crate::{\n     ast::AstNode,\n     lexer::{tokenize, Token},\n-    reparsing::AtomEdit,\n     syntax_kinds::SyntaxKind,\n     yellow::{\n         Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent, Location,\n     },\n };\n \n+use ra_text_edit::AtomTextEdit;\n use crate::yellow::GreenNode;\n \n /// `SourceFileNode` represents a parse tree for a single Rust file.\n@@ -68,15 +68,15 @@ impl SourceFileNode {\n             parser_impl::parse_with(yellow::GreenBuilder::new(), text, &tokens, grammar::root);\n         SourceFileNode::new(green, errors)\n     }\n-    pub fn reparse(&self, edit: &AtomEdit) -> SourceFileNode {\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> SourceFileNode {\n         self.incremental_reparse(edit)\n             .unwrap_or_else(|| self.full_reparse(edit))\n     }\n-    pub fn incremental_reparse(&self, edit: &AtomEdit) -> Option<SourceFileNode> {\n+    pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<SourceFileNode> {\n         reparsing::incremental_reparse(self.syntax(), edit, self.errors())\n             .map(|(green_node, errors)| SourceFileNode::new(green_node, errors))\n     }\n-    fn full_reparse(&self, edit: &AtomEdit) -> SourceFileNode {\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> SourceFileNode {\n         let text =\n             text_utils::replace_range(self.syntax().text().to_string(), edit.delete, &edit.insert);\n         SourceFileNode::parse(&text)"}, {"sha": "208cae5c8f85a23acc4c0ffe650f63135e9040fd", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -6,33 +6,11 @@ use crate::parser_impl;\n use crate::text_utils::replace_range;\n use crate::yellow::{self, GreenNode, SyntaxError, SyntaxNodeRef};\n use crate::{SyntaxKind::*, TextRange, TextUnit};\n-\n-#[derive(Debug, Clone)]\n-pub struct AtomEdit {\n-    pub delete: TextRange,\n-    pub insert: String,\n-}\n-\n-impl AtomEdit {\n-    pub fn replace(range: TextRange, replace_with: String) -> AtomEdit {\n-        AtomEdit {\n-            delete: range,\n-            insert: replace_with,\n-        }\n-    }\n-\n-    pub fn delete(range: TextRange) -> AtomEdit {\n-        AtomEdit::replace(range, String::new())\n-    }\n-\n-    pub fn insert(offset: TextUnit, text: String) -> AtomEdit {\n-        AtomEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n-    }\n-}\n+use ra_text_edit::AtomTextEdit;\n \n pub(crate) fn incremental_reparse(\n     node: SyntaxNodeRef,\n-    edit: &AtomEdit,\n+    edit: &AtomTextEdit,\n     errors: Vec<SyntaxError>,\n ) -> Option<(GreenNode, Vec<SyntaxError>)> {\n     let (node, green, new_errors) =\n@@ -44,7 +22,7 @@ pub(crate) fn incremental_reparse(\n \n fn reparse_leaf<'node>(\n     node: SyntaxNodeRef<'node>,\n-    edit: &AtomEdit,\n+    edit: &AtomTextEdit,\n ) -> Option<(SyntaxNodeRef<'node>, GreenNode, Vec<SyntaxError>)> {\n     let node = algo::find_covering_node(node, edit.delete);\n     match node.kind() {\n@@ -70,7 +48,7 @@ fn reparse_leaf<'node>(\n \n fn reparse_block<'node>(\n     node: SyntaxNodeRef<'node>,\n-    edit: &AtomEdit,\n+    edit: &AtomTextEdit,\n ) -> Option<(SyntaxNodeRef<'node>, GreenNode, Vec<SyntaxError>)> {\n     let (node, reparser) = find_reparsable_node(node, edit.delete)?;\n     let text = get_text_after_edit(node, &edit);\n@@ -83,7 +61,7 @@ fn reparse_block<'node>(\n     Some((node, green, new_errors))\n }\n \n-fn get_text_after_edit(node: SyntaxNodeRef, edit: &AtomEdit) -> String {\n+fn get_text_after_edit(node: SyntaxNodeRef, edit: &AtomTextEdit) -> String {\n     replace_range(\n         node.text().to_string(),\n         edit.delete - node.range().start(),\n@@ -161,7 +139,7 @@ fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n     old_node: SyntaxNodeRef,\n-    edit: &AtomEdit,\n+    edit: &AtomTextEdit,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n     for e in old_errors {\n@@ -188,7 +166,7 @@ mod tests {\n     where\n         for<'a> F: Fn(\n             SyntaxNodeRef<'a>,\n-            &AtomEdit,\n+            &AtomTextEdit,\n         ) -> Option<(SyntaxNodeRef<'a>, GreenNode, Vec<SyntaxError>)>,\n     {\n         let (range, before) = extract_range(before);\n@@ -197,7 +175,7 @@ mod tests {\n         let fully_reparsed = SourceFileNode::parse(&after);\n         let incrementally_reparsed = {\n             let f = SourceFileNode::parse(&before);\n-            let edit = AtomEdit {\n+            let edit = AtomTextEdit {\n                 delete: range,\n                 insert: replace_with.to_string(),\n             };"}, {"sha": "417d43e1ba0e5b488efd2c99e7ec3dfc12bd2638", "filename": "crates/ra_syntax/src/text_utils.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftext_utils.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,8 +1,4 @@\n-use crate::{TextRange, TextUnit};\n-\n-pub fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n-    range.start() <= offset && offset <= range.end()\n-}\n+use crate::TextRange;\n \n pub fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n     let start = r1.start().max(r2.start());"}, {"sha": "46bde9a086bc0aa9fa26d2fec182ff608c955f7e", "filename": "crates/ra_syntax/src/yellow/syntax_text.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,7 +1,8 @@\n use std::{fmt, ops};\n \n+use ra_text_edit::text_utils::contains_offset_nonstrict;\n use crate::{\n-    text_utils::{contains_offset_nonstrict, intersect},\n+    text_utils::intersect,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n "}, {"sha": "59cd1149531934da86f6d87d5346436b2bd35700", "filename": "crates/ra_syntax/tests/data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ffuzz-failures%2F0000.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -10,10 +10,10 @@\n         );\n         File::new(green, errors)\n     }\n-    pub fn reparse(&self, edit: &AtomEdit) -> File {\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n         self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n     }\n-    pub fn incremental_reparse(&self, edit: &AtomEdit) -> Option<File> {\n+    pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<File> {\n         let (node, reparser) = find_reparsable_node(self.syntax(), edit.delete)?;\n         let text = replace_range(\n             node.text().to_string(),\n@@ -31,7 +31,7 @@\n         let errors = merge_errors(self.errors(), new_errors, node, edit);\n         Some(File::new(green_root, errors))\n     }\n-    fn full_reparse(&self, edit: &AtomEdit) -> File {\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> File {\n         let text = replace_range(self.syntax().text().to_string(), edit.delete, &edit.insert);\n         File::parse(&text)\n     }\n@@ -58,22 +58,22 @@\n }\n \n #[derive(Debug, Clone)]\n-pub struct AtomEdit {\n+pub struct AtomTextEdit {\n     pub delete: TextRange,\n     pub insert: String,\n }\n \n-impl AtomEdit {\n-    pub fn replace(range: TextRange, replace_with: String) -> AtomEdit {\n-        AtomEdit { delete: range, insert: replace_with }\n+impl AtomTextEdit {\n+    pub fn replace(range: TextRange, replace_with: String) -> AtomTextEdit {\n+        AtomTextEdit { delete: range, insert: replace_with }\n     }\n \n-    pub fn delete(range: TextRange) -> AtomEdit {\n-        AtomEdit::replace(range, String::new())\n+    pub fn delete(range: TextRange) -> AtomTextEdit {\n+        AtomTextEdit::replace(range, String::new())\n     }\n \n-    pub fn insert(offset: TextUnit, text: String) -> AtomEdit {\n-        AtomEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n+    pub fn insert(offset: TextUnit, text: String) -> AtomTextEdit {\n+        AtomTextEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n     }\n }\n \n@@ -114,17 +114,17 @@ fn is_balanced(tokens: &[Token]) -> bool {\n     pub insert: String,\n }\n \n-impl AtomEdit {\n-    pub fn replace(range: TextRange, replace_with: String) -> AtomEdit {\n-        AtomEdit { delete: range, insert: replace_with }\n+impl AtomTextEdit {\n+    pub fn replace(range: TextRange, replace_with: String) -> AtomTextEdit {\n+        AtomTextEdit { delete: range, insert: replace_with }\n     }\n \n-    pub fn delete(range: TextRange) -> AtomEdit {\n-        AtomEdit::replace(range, String::new())\n+    pub fn delete(range: TextRange) -> AtomTextEdit {\n+        AtomTextEdit::replace(range, String::new())\n     }\n \n-    pub fn insert(offset: TextUnit, text: String) -> AtomEdit {\n-        AtomEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n+    pub fn insert(offset: TextUnit, text: String) -> AtomTextEdit {\n+        AtomTextEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n     }\n }\n \n@@ -176,7 +176,7 @@ fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n     old_node: SyntaxNodeRef,\n-    edit: &AtomEdit,\n+    edit: &AtomTextEdit,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n     for e in old_errors {"}, {"sha": "3c4157a4e721b210778edfdf4cc7032aade1ca80", "filename": "crates/ra_text_edit/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2FCargo.toml?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_text_edit\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+publish = false\n+\n+[dependencies]\n+text_unit = \"0.1.5\"\n+\n+[dev-dependencies]\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "13e20f6fb05dd3750364de911013b22eee91ae41", "filename": "crates/ra_text_edit/src/lib.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -0,0 +1,29 @@\n+mod text_edit;\n+pub mod text_utils;\n+\n+pub use crate::text_edit::{TextEdit, TextEditBuilder};\n+\n+use text_unit::{TextRange, TextUnit};\n+\n+#[derive(Debug, Clone)]\n+pub struct AtomTextEdit {\n+    pub delete: TextRange,\n+    pub insert: String,\n+}\n+\n+impl AtomTextEdit {\n+    pub fn replace(range: TextRange, replace_with: String) -> AtomTextEdit {\n+        AtomTextEdit {\n+            delete: range,\n+            insert: replace_with,\n+        }\n+    }\n+\n+    pub fn delete(range: TextRange) -> AtomTextEdit {\n+        AtomTextEdit::replace(range, String::new())\n+    }\n+\n+    pub fn insert(offset: TextUnit, text: String) -> AtomTextEdit {\n+        AtomTextEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n+    }\n+}"}, {"sha": "fb46f046d8441afdd01e51035b42d674a7248763", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "renamed", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -1,36 +1,37 @@\n-use crate::{TextRange, TextUnit};\n-use ra_syntax::{text_utils::contains_offset_nonstrict, AtomEdit};\n+use crate::AtomTextEdit;\n+use crate::text_utils::contains_offset_nonstrict;\n+use text_unit::{TextRange, TextUnit};\n \n #[derive(Debug, Clone)]\n-pub struct Edit {\n-    atoms: Vec<AtomEdit>,\n+pub struct TextEdit {\n+    atoms: Vec<AtomTextEdit>,\n }\n \n #[derive(Debug)]\n-pub struct EditBuilder {\n-    atoms: Vec<AtomEdit>,\n+pub struct TextEditBuilder {\n+    atoms: Vec<AtomTextEdit>,\n }\n \n-impl EditBuilder {\n-    pub fn new() -> EditBuilder {\n-        EditBuilder { atoms: Vec::new() }\n+impl TextEditBuilder {\n+    pub fn new() -> TextEditBuilder {\n+        TextEditBuilder { atoms: Vec::new() }\n     }\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n-        self.atoms.push(AtomEdit::replace(range, replace_with))\n+        self.atoms.push(AtomTextEdit::replace(range, replace_with))\n     }\n     pub fn delete(&mut self, range: TextRange) {\n-        self.atoms.push(AtomEdit::delete(range))\n+        self.atoms.push(AtomTextEdit::delete(range))\n     }\n     pub fn insert(&mut self, offset: TextUnit, text: String) {\n-        self.atoms.push(AtomEdit::insert(offset, text))\n+        self.atoms.push(AtomTextEdit::insert(offset, text))\n     }\n-    pub fn finish(self) -> Edit {\n+    pub fn finish(self) -> TextEdit {\n         let mut atoms = self.atoms;\n         atoms.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n         for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n             assert!(a1.delete.end() <= a2.delete.start())\n         }\n-        Edit { atoms }\n+        TextEdit { atoms }\n     }\n     pub fn invalidates_offset(&self, offset: TextUnit) -> bool {\n         self.atoms\n@@ -39,8 +40,8 @@ impl EditBuilder {\n     }\n }\n \n-impl Edit {\n-    pub fn into_atoms(self) -> Vec<AtomEdit> {\n+impl TextEdit {\n+    pub fn into_atoms(self) -> Vec<AtomTextEdit> {\n         self.atoms\n     }\n ", "previous_filename": "crates/ra_editor/src/edit.rs"}, {"sha": "e3b4dc4fe35552b9bfce0d3eac6844a4c39af98e", "filename": "crates/ra_text_edit/src/text_utils.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Ftext_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0156a538089828340a823ed02da8970bf4f1175b/crates%2Fra_text_edit%2Fsrc%2Ftext_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_utils.rs?ref=0156a538089828340a823ed02da8970bf4f1175b", "patch": "@@ -0,0 +1,5 @@\n+use text_unit::{TextRange, TextUnit};\n+\n+pub fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n+    range.start() <= offset && offset <= range.end()\n+}"}]}