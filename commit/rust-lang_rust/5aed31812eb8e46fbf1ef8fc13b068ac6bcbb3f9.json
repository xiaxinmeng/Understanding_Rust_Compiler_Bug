{"sha": "5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWQzMTgxMmViOGU0NmZiZjFlZjhmYzEzYjA2OGFjNmJjYmIzZjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-03T18:39:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-03T18:39:30Z"}, "message": "Merge pull request #281 from RalfJung/unsized\n\nfix size_of_val on unsized tuples", "tree": {"sha": "1d0fc69af693d05c245379c9ddb2d3ea73945a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0fc69af693d05c245379c9ddb2d3ea73945a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "html_url": "https://github.com/rust-lang/rust/commit/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8deb9387e96256f29f6b335e8d38c467ccc26961", "url": "https://api.github.com/repos/rust-lang/rust/commits/8deb9387e96256f29f6b335e8d38c467ccc26961", "html_url": "https://github.com/rust-lang/rust/commit/8deb9387e96256f29f6b335e8d38c467ccc26961"}, {"sha": "5d27b94b04b87f6ca65c770e8e788c17f7af7a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d27b94b04b87f6ca65c770e8e788c17f7af7a13", "html_url": "https://github.com/rust-lang/rust/commit/5d27b94b04b87f6ca65c770e8e788c17f7af7a13"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "16015c4bf3a2c438d73589f92a6292a3e6402272", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "patch": "@@ -277,6 +277,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         self.tcx.erase_regions(&value)\n     }\n \n+    /// Return the size and aligment of the value at the given type.\n+    /// Note that the value does not matter if the type is sized. For unsized types,\n+    /// the value has to be a fat pointer, and we only care about the \"extra\" data in it.\n     pub fn size_and_align_of_dst(\n         &mut self,\n         ty: ty::Ty<'tcx>,\n@@ -286,7 +289,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Ok((size as u64, self.type_align(ty)? as u64))\n         } else {\n             match ty.sty {\n-                ty::TyAdt(def, substs) => {\n+                ty::TyAdt(..) | ty::TyTuple(..) => {\n                     // First get the size of all statically known fields.\n                     // Don't use type_of::sizing_type_of because that expects t to be sized,\n                     // and it also rounds up to alignment, which we want to avoid,\n@@ -309,9 +312,19 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n                     // Recurse to get the size of the dynamically sized field (must be\n                     // the last field).\n-                    let last_field = def.struct_variant().fields.last().unwrap();\n-                    let field_ty = self.field_ty(substs, last_field);\n-                    let (unsized_size, unsized_align) = self.size_and_align_of_dst(field_ty, value)?;\n+                    let (unsized_size, unsized_align) = match ty.sty {\n+                        ty::TyAdt(def, substs) => {\n+                            let last_field = def.struct_variant().fields.last().unwrap();\n+                            let field_ty = self.field_ty(substs, last_field);\n+                            self.size_and_align_of_dst(field_ty, value)?\n+                        }\n+                        ty::TyTuple(ref types, _) => {\n+                            let field_ty = types.last().unwrap();\n+                            let field_ty = self.tcx.normalize_associated_type(field_ty);\n+                            self.size_and_align_of_dst(field_ty, value)?\n+                        }\n+                        _ => bug!(\"We already checked that we know this type\"),\n+                    };\n \n                     // FIXME (#26403, #27023): We should be adding padding\n                     // to `sized_size` (to accommodate the `unsized_align`"}, {"sha": "ccb6883e8733a5b8d660c2b6e8f3fac2ceb22238", "filename": "tests/run-pass-fullmir/unsized-tuple-impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs?ref=5aed31812eb8e46fbf1ef8fc13b068ac6bcbb3f9", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(unsized_tuple_coercion)]\n+use std::mem;\n \n fn main() {\n     let x : &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n@@ -18,4 +19,5 @@ fn main() {\n     assert_eq!(a, [x, y]);\n \n     assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n+    assert_eq!(mem::size_of_val(x), 16);\n }"}]}