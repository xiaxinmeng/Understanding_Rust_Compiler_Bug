{"sha": "b67f695956e17314b16f262cce9884f6d99c50dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2N2Y2OTU5NTZlMTczMTRiMTZmMjYyY2NlOTg4NGY2ZDk5YzUwZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-29T14:35:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T14:35:28Z"}, "message": "Merge #2942\n\n2942: Properly select a target for auto importing r=matklad a=SomeoneToIgnore\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/2932\r\n\r\nThe corresponding test has the caret placed in the beggining of the document despite the import inserted, but I don't thing I should fix it here:\r\n* in real life, there's some text written before the import and for those cases the caret behaves normally\r\n* it's a separate functionality that needs to be refactored anyway later (the `auto_import_text_edit`)\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "5b0a4d636639a6df2d079975590b14b0ae9afdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b0a4d636639a6df2d079975590b14b0ae9afdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67f695956e17314b16f262cce9884f6d99c50dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMZgwCRBK7hj4Ov3rIwAAdHIIAD4dGm4aKCg/qjVV844yttlW\n7QeRUP6PIsU88t4Wtwa3+3wHRH/21RdKcCpe0ESPSSDLoBw+aMAWB/4RbQBxE0oM\nEpqD3SFmJ63HDPL+W9xueZW5xENtOHugbtfTMlfZgvJntj7mSYkGu+w0jMZc1uBP\nw9YqfxCGWr+WyOxUeDSkDiGvdQ9GvWSIMNp58H+CI/LuZWWuXF13j3F+cgM0D4q8\n0k7V/2NksXClV1y0H3XPwXZjKUD9ikJctS6whROp4meOiSc7P3OwA0d89HGoPGCi\n8euA9YklWbeXve+Bxnloryh5YNigMjxCJfL+gutP2LadAv/FNnBCataCyr57gMU=\n=WZAM\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b0a4d636639a6df2d079975590b14b0ae9afdec\nparent e3c81b67ffb97f5ac34af54d7c42033f7830bf2f\nparent 6d219c9a10a99e480c39c2382053105028d33247\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580308528 +0000\ncommitter GitHub <noreply@github.com> 1580308528 +0000\n\nMerge #2942\n\n2942: Properly select a target for auto importing r=matklad a=SomeoneToIgnore\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/2932\r\n\r\nThe corresponding test has the caret placed in the beggining of the document despite the import inserted, but I don't thing I should fix it here:\r\n* in real life, there's some text written before the import and for those cases the caret behaves normally\r\n* it's a separate functionality that needs to be refactored anyway later (the `auto_import_text_edit`)\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67f695956e17314b16f262cce9884f6d99c50dc", "html_url": "https://github.com/rust-lang/rust/commit/b67f695956e17314b16f262cce9884f6d99c50dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67f695956e17314b16f262cce9884f6d99c50dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "html_url": "https://github.com/rust-lang/rust/commit/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f"}, {"sha": "6d219c9a10a99e480c39c2382053105028d33247", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d219c9a10a99e480c39c2382053105028d33247", "html_url": "https://github.com/rust-lang/rust/commit/6d219c9a10a99e480c39c2382053105028d33247"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "69126a1c93230a65502dbc2d980bce15b6b7efad", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b67f695956e17314b16f262cce9884f6d99c50dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67f695956e17314b16f262cce9884f6d99c50dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=b67f695956e17314b16f262cce9884f6d99c50dc", "patch": "@@ -1,8 +1,8 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n-    SmolStr, SyntaxElement,\n-    SyntaxKind::{NAME_REF, USE_ITEM},\n+    SmolStr,\n+    SyntaxKind::USE_ITEM,\n     SyntaxNode,\n };\n \n@@ -32,25 +32,28 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n     ctx: AssistCtx<impl HirDatabase>,\n     imports_locator: &mut F,\n ) -> Option<Assist> {\n-    let path: ast::Path = ctx.find_node_at_offset()?;\n-    let module = path.syntax().ancestors().find_map(ast::Module::cast);\n+    let path_to_import: ast::Path = ctx.find_node_at_offset()?;\n+    let path_to_import_syntax = path_to_import.syntax();\n+    if path_to_import_syntax.ancestors().find(|ancestor| ancestor.kind() == USE_ITEM).is_some() {\n+        return None;\n+    }\n+\n+    let module = path_to_import_syntax.ancestors().find_map(ast::Module::cast);\n     let position = match module.and_then(|it| it.item_list()) {\n         Some(item_list) => item_list.syntax().clone(),\n         None => {\n-            let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n+            let current_file = path_to_import_syntax.ancestors().find_map(ast::SourceFile::cast)?;\n             current_file.syntax().clone()\n         }\n     };\n     let source_analyzer = ctx.source_analyzer(&position, None);\n     let module_with_name_to_import = source_analyzer.module()?;\n-    let path_to_import = ctx.covering_element().ancestors().find_map(ast::Path::cast)?;\n     if source_analyzer.resolve_path(ctx.db, &path_to_import).is_some() {\n         return None;\n     }\n \n-    let name_to_import = &find_applicable_name_ref(ctx.covering_element())?.syntax().to_string();\n     let proposed_imports = imports_locator\n-        .find_imports(&name_to_import.to_string())\n+        .find_imports(&path_to_import_syntax.to_string())\n         .into_iter()\n         .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n         .filter(|use_path| !use_path.segments.is_empty())\n@@ -64,26 +67,11 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n     ctx.add_assist_group(AssistId(\"auto_import\"), \"auto import\", || {\n         proposed_imports\n             .into_iter()\n-            .map(|import| import_to_action(import, &position, &path_to_import.syntax()))\n+            .map(|import| import_to_action(import, &position, &path_to_import_syntax))\n             .collect()\n     })\n }\n \n-fn find_applicable_name_ref(element: SyntaxElement) -> Option<ast::NameRef> {\n-    if element.ancestors().find(|ancestor| ancestor.kind() == USE_ITEM).is_some() {\n-        None\n-    } else if element.kind() == NAME_REF {\n-        Some(element.as_node().cloned().and_then(ast::NameRef::cast)?)\n-    } else {\n-        let parent = element.parent()?;\n-        if parent.kind() == NAME_REF {\n-            Some(ast::NameRef::cast(parent)?)\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n fn import_to_action(import: String, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n     let mut action_builder = ActionBuilder::default();\n     action_builder.label(format!(\"Import `{}`\", &import));\n@@ -110,16 +98,16 @@ mod tests {\n             auto_import,\n             TestImportsLocator::new,\n             r\"\n-            PubStruct<|>\n+            <|>PubStruct\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n             }\n             \",\n             r\"\n-            use PubMod::PubStruct;\n+            <|>use PubMod::PubStruct;\n \n-            PubStruct<|>\n+            PubStruct\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -134,7 +122,7 @@ mod tests {\n             auto_import,\n             TestImportsLocator::new,\n             r\"\n-            PubStruct<|>\n+            PubSt<|>ruct\n \n             pub mod PubMod1 {\n                 pub struct PubStruct;\n@@ -149,7 +137,7 @@ mod tests {\n             r\"\n             use PubMod1::PubStruct;\n \n-            PubStruct<|>\n+            PubSt<|>ruct\n \n             pub mod PubMod1 {\n                 pub struct PubStruct;"}]}