{"sha": "19f8a9db7d2eca9f693827b1437108e9cc830a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZjhhOWRiN2QyZWNhOWY2OTM4MjdiMTQzNzEwOGU5Y2M4MzBhNmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T11:35:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T11:35:58Z"}, "message": "Boxes can also use the fast path", "tree": {"sha": "0d96fa17ffdca9090d1fcefe1ddd4c987f456427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d96fa17ffdca9090d1fcefe1ddd4c987f456427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f8a9db7d2eca9f693827b1437108e9cc830a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f8a9db7d2eca9f693827b1437108e9cc830a6b", "html_url": "https://github.com/rust-lang/rust/commit/19f8a9db7d2eca9f693827b1437108e9cc830a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f8a9db7d2eca9f693827b1437108e9cc830a6b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c847071355eef7c8a1555d9c25d95e8fa9eccabf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c847071355eef7c8a1555d9c25d95e8fa9eccabf", "html_url": "https://github.com/rust-lang/rust/commit/c847071355eef7c8a1555d9c25d95e8fa9eccabf"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "0da130260df2729b6d61360daa5626f67f25ff3b", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19f8a9db7d2eca9f693827b1437108e9cc830a6b/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f8a9db7d2eca9f693827b1437108e9cc830a6b/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=19f8a9db7d2eca9f693827b1437108e9cc830a6b", "patch": "@@ -623,18 +623,19 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         // We need a visitor to visit all references.  However, that requires\n         // a `MemPlace`, so we have a fast path for reference types that\n         // avoids allocating.\n-        match place.layout.ty.sty {\n-            // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n-            // making it useless.\n-            ty::Ref(_, _, mutbl) => {\n-                // fast path\n-                let val = self.read_immediate(self.place_to_op(place)?)?;\n-                let val = self.retag_reference(val, mutbl)?;\n-                self.write_immediate(val, place)?;\n-                return Ok(());\n-            }\n-            _ => {}, // handled with the general case below\n-        };\n+        // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n+        // making it useless.\n+        if let Some(mutbl) = match place.layout.ty.sty {\n+            ty::Ref(_, _, mutbl) => Some(mutbl),\n+            ty::Adt(..) if place.layout.ty.is_box() => Some(MutMutable),\n+            _ => None, // handled with the general case below\n+        } {\n+            // fast path\n+            let val = self.read_immediate(self.place_to_op(place)?)?;\n+            let val = self.retag_reference(val, mutbl)?;\n+            self.write_immediate(val, place)?;\n+            return Ok(());\n+        }\n         let place = self.force_allocation(place)?;\n \n         let mut visitor = RetagVisitor { ecx: self };"}]}