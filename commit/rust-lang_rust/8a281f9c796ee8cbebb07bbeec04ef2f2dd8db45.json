{"sha": "8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "node_id": "C_kwDOAAsO6NoAKDhhMjgxZjljNzk2ZWU4Y2JlYmIwN2JiZWVjMDRlZjJmMmRkOGRiNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T14:50:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T14:50:42Z"}, "message": "Auto merge of #107060 - ibraheemdev:poll-ready, r=joshtriplett\n\nRemove unstable `Poll::ready`\n\nBased on the discussion in https://github.com/rust-lang/rust/issues/89780, this API is problematic and would likely require changes over an edition. Now that `task::ready!` is stabilized, this seems unlikely to happen, so I think we should just go ahead and remove it.\n\nACP: https://github.com/rust-lang/libs-team/issues/214", "tree": {"sha": "884bf4eeb8c0a8288afb3a61addebfaff6058422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884bf4eeb8c0a8288afb3a61addebfaff6058422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "html_url": "https://github.com/rust-lang/rust/commit/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a681000b98d58d6e54cecc3e33d978c34ede32", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a681000b98d58d6e54cecc3e33d978c34ede32", "html_url": "https://github.com/rust-lang/rust/commit/17a681000b98d58d6e54cecc3e33d978c34ede32"}, {"sha": "4fbca2e1d500c1a39d0f5eb822faec2a49cdc071", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbca2e1d500c1a39d0f5eb822faec2a49cdc071", "html_url": "https://github.com/rust-lang/rust/commit/4fbca2e1d500c1a39d0f5eb822faec2a49cdc071"}], "stats": {"total": 98, "additions": 3, "deletions": 95}, "files": [{"sha": "3f35179ddc29b2fffaddef11c97b14658f7cd233", "filename": "library/core/src/future/join.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs?ref=8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "patch": "@@ -4,7 +4,7 @@ use crate::cell::UnsafeCell;\n use crate::future::{poll_fn, Future};\n use crate::mem;\n use crate::pin::Pin;\n-use crate::task::{Context, Poll};\n+use crate::task::{ready, Context, Poll};\n \n /// Polls multiple futures simultaneously, returning a tuple\n /// of all results once complete.\n@@ -118,7 +118,7 @@ macro join_internal {\n                             fut\n                         })\n                     };\n-                    // Despite how tempting it may be to `let () = fut.poll(cx).ready()?;`\n+                    // Despite how tempting it may be to `let () = ready!(fut.poll(cx));`\n                     // doing so would defeat the point of `join!`: to start polling eagerly all\n                     // of the futures, to allow parallelizing the waits.\n                     done &= fut.poll(cx).is_ready();\n@@ -180,7 +180,7 @@ impl<F: Future> Future for MaybeDone<F> {\n             // Do not mix match ergonomics with unsafe.\n             match *self.as_mut().get_unchecked_mut() {\n                 MaybeDone::Future(ref mut f) => {\n-                    let val = Pin::new_unchecked(f).poll(cx).ready()?;\n+                    let val = ready!(Pin::new_unchecked(f).poll(cx));\n                     self.set(Self::Done(val));\n                 }\n                 MaybeDone::Done(_) => {}"}, {"sha": "3f0080e3832e197202683111b20a5d8217a76ebb", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "patch": "@@ -13,5 +13,3 @@ pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n mod ready;\n #[stable(feature = \"ready_macro\", since = \"1.64.0\")]\n pub use ready::ready;\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-pub use ready::Ready;"}, {"sha": "0a0f702f6fb75391527f0790569a59f8bbe8d3cd", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "patch": "@@ -3,7 +3,6 @@\n use crate::convert;\n use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n-use crate::task::Ready;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n@@ -95,38 +94,6 @@ impl<T> Poll<T> {\n     pub const fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n-\n-    /// Extracts the successful type of a [`Poll<T>`].\n-    ///\n-    /// When combined with the `?` operator, this function will\n-    /// propagate any [`Poll::Pending`] values to the caller, and\n-    /// extract the `T` from [`Poll::Ready`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// #![feature(poll_ready)]\n-    ///\n-    /// use std::task::{Context, Poll};\n-    /// use std::future::{self, Future};\n-    /// use std::pin::Pin;\n-    ///\n-    /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n-    ///     let mut fut = future::ready(42);\n-    ///     let fut = Pin::new(&mut fut);\n-    ///\n-    ///     let num = fut.poll(cx).ready()?;\n-    ///     # let _ = num; // to silence unused warning\n-    ///     // ... use num\n-    ///\n-    ///     Poll::Ready(())\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-    pub fn ready(self) -> Ready<T> {\n-        Ready(self)\n-    }\n }\n \n impl<T, E> Poll<Result<T, E>> {"}, {"sha": "495d72fd14be27af2f36842ccdca3ff87cb684a3", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "patch": "@@ -1,8 +1,3 @@\n-use core::convert;\n-use core::fmt;\n-use core::ops::{ControlFlow, FromResidual, Try};\n-use core::task::Poll;\n-\n /// Extracts the successful type of a [`Poll<T>`].\n ///\n /// This macro bakes in propagation of [`Pending`] signals by returning early.\n@@ -60,55 +55,3 @@ pub macro ready($e:expr) {\n         }\n     }\n }\n-\n-/// Extracts the successful type of a [`Poll<T>`].\n-///\n-/// See [`Poll::ready`] for details.\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-pub struct Ready<T>(pub(crate) Poll<T>);\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> Try for Ready<T> {\n-    type Output = T;\n-    type Residual = Ready<convert::Infallible>;\n-\n-    #[inline]\n-    fn from_output(output: Self::Output) -> Self {\n-        Ready(Poll::Ready(output))\n-    }\n-\n-    #[inline]\n-    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n-        match self.0 {\n-            Poll::Ready(v) => ControlFlow::Continue(v),\n-            Poll::Pending => ControlFlow::Break(Ready(Poll::Pending)),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> FromResidual for Ready<T> {\n-    #[inline]\n-    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n-        match residual.0 {\n-            Poll::Pending => Ready(Poll::Pending),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> FromResidual<Ready<convert::Infallible>> for Poll<T> {\n-    #[inline]\n-    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n-        match residual.0 {\n-            Poll::Pending => Poll::Pending,\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"poll_ready\", issue = \"89780\")]\n-impl<T> fmt::Debug for Ready<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_tuple(\"Ready\").finish()\n-    }\n-}"}]}