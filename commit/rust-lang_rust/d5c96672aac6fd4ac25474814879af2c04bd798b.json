{"sha": "d5c96672aac6fd4ac25474814879af2c04bd798b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Yzk2NjcyYWFjNmZkNGFjMjU0NzQ4MTQ4NzlhZjJjMDRiZDc5OGI=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-21T06:27:41Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-21T06:29:24Z"}, "message": "Test `fill_match_arms` for lazy computation.\n\nThis also adds `ide_assists::tests::check_assist_unresolved` function.", "tree": {"sha": "b09c3978d4d040c51b50dd44ac9f7e2546254bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09c3978d4d040c51b50dd44ac9f7e2546254bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c96672aac6fd4ac25474814879af2c04bd798b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c96672aac6fd4ac25474814879af2c04bd798b", "html_url": "https://github.com/rust-lang/rust/commit/d5c96672aac6fd4ac25474814879af2c04bd798b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c96672aac6fd4ac25474814879af2c04bd798b/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570eff655208b5f7d28d2e0a587ee514b91b4a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/570eff655208b5f7d28d2e0a587ee514b91b4a42", "html_url": "https://github.com/rust-lang/rust/commit/570eff655208b5f7d28d2e0a587ee514b91b4a42"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "97435f021137e5279a4a8cbdaddfac3927999924", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5c96672aac6fd4ac25474814879af2c04bd798b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c96672aac6fd4ac25474814879af2c04bd798b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d5c96672aac6fd4ac25474814879af2c04bd798b", "patch": "@@ -105,6 +105,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         let missing_pats = variants_of_enums\n             .into_iter()\n             .multi_cartesian_product()\n+            .inspect(|_| cov_mark::hit!(fill_match_arms_lazy_computation))\n             .map(|variants| {\n                 let patterns =\n                     variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n@@ -279,7 +280,9 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: ExtendedVariant) -> Op\n mod tests {\n     use ide_db::helpers::FamousDefs;\n \n-    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+    use crate::tests::{\n+        check_assist, check_assist_not_applicable, check_assist_target, check_assist_unresolved,\n+    };\n \n     use super::fill_match_arms;\n \n@@ -1058,4 +1061,19 @@ fn foo(t: Test) {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn lazy_computation() {\n+        // Computing a single missing arm is enough to determine applicability of the assist.\n+        cov_mark::check_count!(fill_match_arms_lazy_computation, 1);\n+        check_assist_unresolved(\n+            fill_match_arms,\n+            r#\"\n+enum A { One, Two, }\n+fn foo(tuple: (A, A)) {\n+    match $0tuple {};\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "b091ab91aee6a9825552366695d9388c1647b67f", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5c96672aac6fd4ac25474814879af2c04bd798b/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c96672aac6fd4ac25474814879af2c04bd798b/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=d5c96672aac6fd4ac25474814879af2c04bd798b", "patch": "@@ -61,6 +61,12 @@ pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n     check(assist, ra_fixture, ExpectedResult::NotApplicable, None);\n }\n \n+/// Check assist in unresolved state. Useful to check assists for lazy computation.\n+#[track_caller]\n+pub(crate) fn check_assist_unresolved(assist: Handler, ra_fixture: &str) {\n+    check(assist, ra_fixture, ExpectedResult::Unresolved, None);\n+}\n+\n #[track_caller]\n fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let after = trim_indent(after);\n@@ -97,6 +103,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n \n enum ExpectedResult<'a> {\n     NotApplicable,\n+    Unresolved,\n     After(&'a str),\n     Target(&'a str),\n }\n@@ -111,7 +118,11 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n     let sema = Semantics::new(&db);\n     let config = TEST_CONFIG;\n     let ctx = AssistContext::new(sema, &config, frange);\n-    let mut acc = Assists::new(&ctx, AssistResolveStrategy::All);\n+    let resolve = match expected {\n+        ExpectedResult::Unresolved => AssistResolveStrategy::None,\n+        _ => AssistResolveStrategy::All,\n+    };\n+    let mut acc = Assists::new(&ctx, resolve);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish();\n \n@@ -159,8 +170,14 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n             let range = assist.target;\n             assert_eq_text!(&text_without_caret[range], target);\n         }\n+        (Some(assist), ExpectedResult::Unresolved) => assert!(\n+            assist.source_change.is_none(),\n+            \"unresolved assist should not contain source changes\"\n+        ),\n         (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n-        (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {\n+        (None, ExpectedResult::After(_))\n+        | (None, ExpectedResult::Target(_))\n+        | (None, ExpectedResult::Unresolved) => {\n             panic!(\"code action is not applicable\")\n         }\n         (None, ExpectedResult::NotApplicable) => (),"}]}