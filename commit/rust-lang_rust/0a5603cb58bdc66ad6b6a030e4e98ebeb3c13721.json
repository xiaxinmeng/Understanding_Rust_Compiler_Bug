{"sha": "0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTYwM2NiNThiZGM2NmFkNmI2YTAzMGU0ZTk4ZWJlYjNjMTM3MjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T04:50:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T03:39:56Z"}, "message": "rt: Make linked failure less prone to deadlock\n\nStill a mess.", "tree": {"sha": "1092b7474081dfc2de16104edf9131e06a3b7329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1092b7474081dfc2de16104edf9131e06a3b7329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "html_url": "https://github.com/rust-lang/rust/commit/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "html_url": "https://github.com/rust-lang/rust/commit/cc276fe3c96965ba39b9fba3b588a1eaa3941d86"}], "stats": {"total": 89, "additions": 58, "deletions": 31}, "files": [{"sha": "bbfa737adec3b751d46fff7a80d6f7b13b8e3f85", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "patch": "@@ -88,6 +88,11 @@ void rust_port::receive(void *dptr, uintptr_t *yield) {\n     task->rendezvous_ptr = (uintptr_t*) dptr;\n     task->block(this, \"waiting for rendezvous data\");\n \n+    // Blocking the task might fail if the task has already been killed, but\n+    // in the event of both failure and success the task needs to yield. On\n+    // success, it yields and waits to be unblocked. On failure it yields and\n+    // is then fails the task.\n+\n     *yield = true;\n }\n "}, {"sha": "319b6fb579d93497e02b2c4a9b6bf52f096306e4", "filename": "src/rt/rust_port_selector.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "patch": "@@ -48,8 +48,14 @@ rust_port_selector::select(rust_task *task, rust_port **dptr,\n         this->n_ports = n_ports;\n         I(task->thread, task->rendezvous_ptr == NULL);\n         task->rendezvous_ptr = (uintptr_t*)dptr;\n-        *yield = true;\n         task->block(this, \"waiting for select rendezvous\");\n+\n+\t// Blocking the task might fail if the task has already been\n+\t// killed, but in the event of both failure and success the\n+\t// task needs to yield. On success, it yields and waits to be\n+\t// unblocked. On failure it yields and is then fails the task.\n+\n+        *yield = true;\n     }\n \n     for (size_t i = 0; i < locks_taken; i++) {"}, {"sha": "878bf099689e6d205f89d681ff9c37ab9be1135c", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "patch": "@@ -246,13 +246,20 @@ void rust_task::start()\n bool\n rust_task::must_fail_from_being_killed() {\n     scoped_lock with(kill_lock);\n+    return must_fail_from_being_killed_unlocked();\n+}\n+\n+bool\n+rust_task::must_fail_from_being_killed_unlocked() {\n+    I(thread, kill_lock.lock_held_by_current_thread());\n     return killed && !reentered_rust_stack;\n }\n \n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n     if (must_fail_from_being_killed()) {\n+        I(thread, !blocked());\n         *killed = true;\n     }\n \n@@ -266,26 +273,26 @@ rust_task::yield(bool *killed) {\n \n void\n rust_task::kill() {\n+    scoped_lock with(kill_lock);\n+\n     if (dead()) {\n         // Task is already dead, can't kill what's already dead.\n         fail_parent();\n-        return;\n     }\n \n     // Note the distinction here: kill() is when you're in an upcall\n     // from task A and want to force-fail task B, you do B->kill().\n     // If you want to fail yourself you do self->fail().\n     LOG(this, task, \"killing task %s @0x%\" PRIxPTR, name, this);\n     // When the task next goes to yield or resume it will fail\n-    {\n-        scoped_lock with(kill_lock);\n-        killed = true;\n-    }\n+    killed = true;\n     // Unblock the task so it can unwind.\n-    unblock();\n+\n+    if (blocked()) {\n+        wakeup(cond);\n+    }\n \n     LOG(this, task, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n-    // run_on_resume(rust_unwind_glue);\n }\n \n extern \"C\" CDECL\n@@ -324,7 +331,6 @@ rust_task::fail_parent() {\n              name, this, supervisor->name, supervisor);\n         supervisor->kill();\n     }\n-    // FIXME: implement unwinding again.\n     if (NULL == supervisor && propagate_failure)\n         thread->fail();\n }\n@@ -411,14 +417,23 @@ rust_task::set_state(rust_task_list *state,\n     this->cond_name = cond_name;\n }\n \n-void\n+bool\n rust_task::block(rust_cond *on, const char* name) {\n+    scoped_lock with(kill_lock);\n+\n+    if (must_fail_from_being_killed_unlocked()) {\n+        // We're already going to die. Don't block. Tell the task to fail\n+        return false;\n+    }\n+\n     LOG(this, task, \"Blocking on 0x%\" PRIxPTR \", cond: 0x%\" PRIxPTR,\n                          (uintptr_t) on, (uintptr_t) cond);\n     A(thread, cond == NULL, \"Cannot block an already blocked task.\");\n     A(thread, on != NULL, \"Cannot block on a NULL object.\");\n \n     transition(&thread->running_tasks, &thread->blocked_tasks, on, name);\n+\n+    return true;\n }\n \n void\n@@ -436,15 +451,6 @@ rust_task::die() {\n     transition(&thread->running_tasks, &thread->dead_tasks, NULL, \"none\");\n }\n \n-void\n-rust_task::unblock() {\n-    if (blocked()) {\n-        // FIXME: What if another thread unblocks the task between when\n-        // we checked and here?\n-        wakeup(cond);\n-    }\n-}\n-\n rust_crate_cache *\n rust_task::get_crate_cache()\n {"}, {"sha": "f822c109510501a0d9dfbcad1dd594a4e7c7d17c", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "patch": "@@ -140,6 +140,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void transition(rust_task_list *src, rust_task_list *dst,\n                     rust_cond *cond, const char* cond_name);\n \n+    bool must_fail_from_being_killed_unlocked();\n+\n     friend void task_start_wrapper(spawn_args *a);\n     friend void cleanup_task(cleanup_args *a);\n     friend void reset_stack_limit_on_c_stack(reset_args *a);\n@@ -169,10 +171,9 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void set_state(rust_task_list *state,\n                    rust_cond *cond, const char* cond_name);\n \n-    void block(rust_cond *on, const char* name);\n+    bool block(rust_cond *on, const char* name);\n     void wakeup(rust_cond *from);\n     void die();\n-    void unblock();\n \n     // Print a backtrace, if the \"bt\" logging option is on.\n     void backtrace();"}, {"sha": "e108a21f3a935d38b2f5a5a102bb2fcd37674448", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=0a5603cb58bdc66ad6b6a030e4e98ebeb3c13721", "patch": "@@ -2,6 +2,7 @@\n #include <stdarg.h>\n #include <cassert>\n #include <pthread.h>\n+#include <vector>\n #include \"rust_internal.h\"\n #include \"rust_util.h\"\n #include \"globals.h\"\n@@ -95,19 +96,27 @@ rust_task_thread::fail() {\n \n void\n rust_task_thread::kill_all_tasks() {\n-    I(this, !lock.lock_held_by_current_thread());\n-    scoped_lock with(lock);\n+    std::vector<rust_task*> all_tasks;\n \n-    for (size_t i = 0; i < running_tasks.length(); i++) {\n-        // We don't want the failure of these tasks to propagate back\n-        // to the kernel again since we're already failing everything\n-        running_tasks[i]->unsupervise();\n-        running_tasks[i]->kill();\n+    {\n+        scoped_lock with(lock);\n+\n+        for (size_t i = 0; i < running_tasks.length(); i++) {\n+            all_tasks.push_back(running_tasks[i]);\n+        }\n+\n+        for (size_t i = 0; i < blocked_tasks.length(); i++) {\n+            all_tasks.push_back(blocked_tasks[i]);\n+        }\n     }\n \n-    for (size_t i = 0; i < blocked_tasks.length(); i++) {\n-        blocked_tasks[i]->unsupervise();\n-        blocked_tasks[i]->kill();\n+    while (!all_tasks.empty()) {\n+        rust_task *task = all_tasks.back();\n+        all_tasks.pop_back();\n+        // We don't want the failure of these tasks to propagate back\n+        // to the kernel again since we're already failing everything\n+        task->unsupervise();\n+        task->kill();\n     }\n }\n "}]}