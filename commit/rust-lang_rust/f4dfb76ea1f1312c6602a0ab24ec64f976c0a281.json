{"sha": "f4dfb76ea1f1312c6602a0ab24ec64f976c0a281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZGZiNzZlYTFmMTMxMmM2NjAyYTBhYjI0ZWM2NGY5NzZjMGEyODE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T19:09:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T19:09:33Z"}, "message": "Rollup merge of #87609 - LukasKalbertodt:improve-array-map-docs, r=m-ou-se\n\nAdd docs about performance and `Iterator::map` to `[T; N]::map`\n\nThis suboptimal code gen for some usages of array::map got a bit of\nattention by multiple people throughout the community. Some cases:\n\n- https://github.com/rust-lang/rust/issues/75243#issuecomment-866051086\n- https://github.com/rust-lang/rust/issues/75243#issuecomment-874732134\n- https://www.reddit.com/r/rust/comments/oeqqf7/unexpected_high_stack_usage/\n\nMy *guess* is that this gets the attention it gets because in JavaScript\n(and potentially other languages), a `map` function on arrays is very\ncommonly used since in those languages, arrays basically take the role\nof Rust's iterator. I considered explicitly naming JavaScript in the\nfirst paragraph I added, but I couldn't find precedence of mentioning\nother languages in standard library doc, so I didn't add it.\n\nWhen array::map was stabilized, we still wanted to add docs, but that\nsomehow did not happen in time. So here we are. Not sure if this sounds\ncrazy but maybe it is worth considering beta backporting this? Only if\nit's not a lot of work, of course! But yeah, stabilized array::map is\nalready in beta and if this problem is really as big as it sometimes seems,\nmight be worth having the docs in place when 1.55 is released.\n\nCC ``@CryZe``\n\nr? ``@m-ou-se`` (since you were involved in that discussion and the stabilization)", "tree": {"sha": "78fda86889c9eeb6838a38c45ed9b7197c621d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78fda86889c9eeb6838a38c45ed9b7197c621d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBE5tCRBK7hj4Ov3rIwAAF9QIAFRKycEAR/QRG4omEFKvAWwk\ndNdwnm2IG4l8IhAhgSFEb8c7PtScQaMKGjEdRs46rBs5FHyVWbGbiWT7YoQH3L62\n76CSz1WfniCZhjW75j5uZJ5oxeRmtxf4DC3JmkYvR5fLbQx30OdAIjP7jRUMZls4\nnFEqvHTmw+H5EBTNb2DNMVJ2HL7OZWhAH/UFVGj/3WpR8ha/59G8GLFaeXIyMcc+\njcLuHoTJLdHfkStKymzswACVU9Jq0zoiy2Bvt+o79fmmFUTzbyoozuNOCAcrt70D\nyXzr8yBtyTD+OmwwrM9GKeQszOHVCvc60wGcBs+823uBKjWiAQsg62ve+Sdxlv8=\n=7i5K\n-----END PGP SIGNATURE-----\n", "payload": "tree 78fda86889c9eeb6838a38c45ed9b7197c621d04\nparent 2bdc54fb4570a8bb82019bb00049feefdf8ac585\nparent 5cc7702bde47716c66734c488432850fab1a83dd\nauthor Yuki Okushi <jtitor@2k36.org> 1627672173 +0900\ncommitter GitHub <noreply@github.com> 1627672173 +0900\n\nRollup merge of #87609 - LukasKalbertodt:improve-array-map-docs, r=m-ou-se\n\nAdd docs about performance and `Iterator::map` to `[T; N]::map`\n\nThis suboptimal code gen for some usages of array::map got a bit of\nattention by multiple people throughout the community. Some cases:\n\n- https://github.com/rust-lang/rust/issues/75243#issuecomment-866051086\n- https://github.com/rust-lang/rust/issues/75243#issuecomment-874732134\n- https://www.reddit.com/r/rust/comments/oeqqf7/unexpected_high_stack_usage/\n\nMy *guess* is that this gets the attention it gets because in JavaScript\n(and potentially other languages), a `map` function on arrays is very\ncommonly used since in those languages, arrays basically take the role\nof Rust's iterator. I considered explicitly naming JavaScript in the\nfirst paragraph I added, but I couldn't find precedence of mentioning\nother languages in standard library doc, so I didn't add it.\n\nWhen array::map was stabilized, we still wanted to add docs, but that\nsomehow did not happen in time. So here we are. Not sure if this sounds\ncrazy but maybe it is worth considering beta backporting this? Only if\nit's not a lot of work, of course! But yeah, stabilized array::map is\nalready in beta and if this problem is really as big as it sometimes seems,\nmight be worth having the docs in place when 1.55 is released.\n\nCC ``@CryZe``\n\nr? ``@m-ou-se`` (since you were involved in that discussion and the stabilization)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281", "html_url": "https://github.com/rust-lang/rust/commit/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bdc54fb4570a8bb82019bb00049feefdf8ac585", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdc54fb4570a8bb82019bb00049feefdf8ac585", "html_url": "https://github.com/rust-lang/rust/commit/2bdc54fb4570a8bb82019bb00049feefdf8ac585"}, {"sha": "5cc7702bde47716c66734c488432850fab1a83dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc7702bde47716c66734c488432850fab1a83dd", "html_url": "https://github.com/rust-lang/rust/commit/5cc7702bde47716c66734c488432850fab1a83dd"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "3bc9f71375cb84bef9f0c1b42b2c5d0b753199bf", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4dfb76ea1f1312c6602a0ab24ec64f976c0a281/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=f4dfb76ea1f1312c6602a0ab24ec64f976c0a281", "patch": "@@ -293,6 +293,28 @@ impl<T, const N: usize> [T; N] {\n     /// Returns an array of the same size as `self`, with function `f` applied to each element\n     /// in order.\n     ///\n+    /// If you don't necessarily need a new fixed-size array, consider using\n+    /// [`Iterator::map`] instead.\n+    ///\n+    ///\n+    /// # Note on performance and stack usage\n+    ///\n+    /// Unfortunately, usages of this method are currently not always optimized\n+    /// as well as they could be. This mainly concerns large arrays, as mapping\n+    /// over small arrays seem to be optimized just fine. Also note that in\n+    /// debug mode (i.e. without any optimizations), this method can use a lot\n+    /// of stack space (a few times the size of the array or more).\n+    ///\n+    /// Therefore, in performance-critical code, try to avoid using this method\n+    /// on large arrays or check the emitted code. Also try to avoid chained\n+    /// maps (e.g. `arr.map(...).map(...)`).\n+    ///\n+    /// In many cases, you can instead use [`Iterator::map`] by calling `.iter()`\n+    /// or `.into_iter()` on your array. `[T; N]::map` is only necessary if you\n+    /// really need a new array of the same size as the result. Rust's lazy\n+    /// iterators tend to get optimized very well.\n+    ///\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}