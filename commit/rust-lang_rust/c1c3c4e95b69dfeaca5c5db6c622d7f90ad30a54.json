{"sha": "c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzNjNGU5NWI2OWRmZWFjYTVjNWRiNmM2MjJkN2Y5MGFkMzBhNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T19:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T19:40:51Z"}, "message": "Auto merge of #57808 - gnzlbg:ustdsimd, r=gnzlbg\n\nUpdate stdsimd\n\nThis is the companion PR to https://github.com/rust-lang-nursery/stdsimd/pull/640\n\nr? @alexcrichton", "tree": {"sha": "d2a40a3d863cfc4c25c0860eb9e0f7053ab012ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a40a3d863cfc4c25c0860eb9e0f7053ab012ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "html_url": "https://github.com/rust-lang/rust/commit/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74256630117fedf479edbd1145cac47c88036aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/74256630117fedf479edbd1145cac47c88036aec", "html_url": "https://github.com/rust-lang/rust/commit/74256630117fedf479edbd1145cac47c88036aec"}, {"sha": "938a814e87878e2ff718935f5c7a12f120758c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/938a814e87878e2ff718935f5c7a12f120758c05", "html_url": "https://github.com/rust-lang/rust/commit/938a814e87878e2ff718935f5c7a12f120758c05"}], "stats": {"total": 151, "additions": 125, "deletions": 26}, "files": [{"sha": "6f364eb970965feac11324e81d3b9dd8b303808a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "patch": "@@ -221,11 +221,12 @@ pub mod alloc;\n mod tuple;\n mod unit;\n \n-// Pull in the `coresimd` crate directly into libcore. This is where all the\n-// architecture-specific (and vendor-specific) intrinsics are defined. AKA\n-// things like SIMD and such. Note that the actual source for all this lies in a\n-// different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n-// a bit wonky.\n+// Pull in the `core_arch` crate directly into libcore. The contents of\n+// `core_arch` are in a different repository: rust-lang-nursery/stdsimd.\n+//\n+// `core_arch` depends on libcore, but the contents of this module are\n+// set up in such a way that directly pulling it here works such that the\n+// crate uses the this crate as its libcore.\n #[allow(unused_macros)]\n macro_rules! test_v16 { ($item:item) => {}; }\n #[allow(unused_macros)]\n@@ -240,10 +241,10 @@ macro_rules! test_v256 { ($item:item) => {}; }\n macro_rules! test_v512 { ($item:item) => {}; }\n #[allow(unused_macros)]\n macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n-#[path = \"../stdsimd/coresimd/mod.rs\"]\n+#[path = \"../stdsimd/crates/core_arch/src/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-mod coresimd;\n+mod core_arch;\n \n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-pub use coresimd::arch;\n+pub use core_arch::arch;"}, {"sha": "244caf28ec7cd8075e94296f5ac3cfd6144bcf83", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "patch": "@@ -358,6 +358,9 @@ pub mod prelude;\n // Public module declarations and re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+#[doc(no_inline)]\n+pub use core::arch;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::cell;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -489,29 +492,22 @@ mod memchr;\n // compiler\n pub mod rt;\n \n-// Pull in the `stdsimd` crate directly into libstd. This is the same as\n-// libcore's arch/simd modules where the source of truth here is in a different\n-// repository, but we pull things in here manually to get it into libstd.\n+// Pull in the `std_detect` crate directly into libstd. The contents of\n+// `std_detect` are in a different repository: rust-lang-nursery/stdsimd.\n //\n-// Note that the #[cfg] here is intended to do two things. First it allows us to\n-// change the rustc implementation of intrinsics in stage0 by not compiling simd\n-// intrinsics in stage0. Next it doesn't compile anything in test mode as\n-// stdsimd has tons of its own tests which we don't want to run.\n-#[path = \"../stdsimd/stdsimd/mod.rs\"]\n+// `std_detect` depends on libstd, but the contents of this module are\n+// set up in such a way that directly pulling it here works such that the\n+// crate uses the this crate as its libstd.\n+#[path = \"../stdsimd/crates/std_detect/src/mod.rs\"]\n #[allow(missing_debug_implementations, missing_docs, dead_code)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(not(test))]\n-mod stdsimd;\n-\n-// A \"fake\" module needed by the `stdsimd` module to compile, not actually\n-// exported though.\n-mod coresimd {\n-    pub use core::arch;\n-}\n+mod std_detect;\n \n-#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+#[doc(hidden)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(not(test))]\n-pub use stdsimd::arch;\n+pub use std_detect::detect;\n \n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`"}, {"sha": "eacce1e568211e09ce5b1389e2dd0c230595ca7a", "filename": "src/libstd/tests/run-time-detect.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Flibstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftests%2Frun-time-detect.rs?ref=c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "patch": "@@ -0,0 +1,100 @@\n+//! These tests just check that the macros are available in libstd.\n+\n+#![cfg_attr(\n+    any(\n+        all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")),\n+        all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")),\n+        all(target_arch = \"powerpc\", target_os = \"linux\"),\n+        all(target_arch = \"powerpc64\", target_os = \"linux\"),\n+    ),\n+    feature(stdsimd)\n+)]\n+\n+#[test]\n+#[cfg(all(target_arch = \"arm\",\n+          any(target_os = \"linux\", target_os = \"android\")))]\n+fn arm_linux() {\n+    println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n+    println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n+}\n+\n+#[test]\n+#[cfg(all(\n+    target_arch = \"aarch64\",\n+    any(target_os = \"linux\", target_os = \"android\")\n+))]\n+fn aarch64_linux() {\n+    println!(\"fp: {}\", is_aarch64_feature_detected!(\"fp\"));\n+    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n+    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n+    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));\n+    println!(\"crypto: {}\", is_aarch64_feature_detected!(\"crypto\"));\n+    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n+    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n+    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n+    println!(\"dotprod: {}\", is_aarch64_feature_detected!(\"dotprod\"));\n+}\n+\n+#[test]\n+#[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n+fn powerpc_linux() {\n+    println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n+    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n+    println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n+}\n+\n+#[test]\n+#[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n+fn powerpc64_linux() {\n+    println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n+    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n+    println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n+}\n+\n+#[test]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn x86_all() {\n+    println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n+    println!(\"pcmulqdq: {:?}\", is_x86_feature_detected!(\"pclmulqdq\"));\n+    println!(\"rdrand: {:?}\", is_x86_feature_detected!(\"rdrand\"));\n+    println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n+    println!(\"tsc: {:?}\", is_x86_feature_detected!(\"tsc\"));\n+    println!(\"mmx: {:?}\", is_x86_feature_detected!(\"mmx\"));\n+    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n+    println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n+    println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n+    println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n+    println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n+    println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n+    println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n+    println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n+    println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n+    println!(\"avx512f {:?}\", is_x86_feature_detected!(\"avx512f\"));\n+    println!(\"avx512cd {:?}\", is_x86_feature_detected!(\"avx512cd\"));\n+    println!(\"avx512er {:?}\", is_x86_feature_detected!(\"avx512er\"));\n+    println!(\"avx512pf {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n+    println!(\"avx512bw {:?}\", is_x86_feature_detected!(\"avx512bw\"));\n+    println!(\"avx512dq {:?}\", is_x86_feature_detected!(\"avx512dq\"));\n+    println!(\"avx512vl {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n+    println!(\"avx512_ifma {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n+    println!(\"avx512_vbmi {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n+    println!(\n+        \"avx512_vpopcntdq {:?}\",\n+        is_x86_feature_detected!(\"avx512vpopcntdq\")\n+    );\n+    println!(\"fma: {:?}\", is_x86_feature_detected!(\"fma\"));\n+    println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n+    println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n+    println!(\"abm: {:?}\", is_x86_feature_detected!(\"abm\"));\n+    println!(\"lzcnt: {:?}\", is_x86_feature_detected!(\"lzcnt\"));\n+    println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n+    println!(\"popcnt: {:?}\", is_x86_feature_detected!(\"popcnt\"));\n+    println!(\"fxsr: {:?}\", is_x86_feature_detected!(\"fxsr\"));\n+    println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n+    println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n+    println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n+    println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n+}"}, {"sha": "b23541340b5941749e5fbb1930e666bbd1375244", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "patch": "@@ -1 +1 @@\n-Subproject commit 269d0ba959f70e9b692e528311c78b8f9601d4af\n+Subproject commit b23541340b5941749e5fbb1930e666bbd1375244"}, {"sha": "0f722945c49e635a17ba7b8e510a93a43923c838", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=c1c3c4e95b69dfeaca5c5db6c622d7f90ad30a54", "patch": "@@ -52,6 +52,8 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"src/libstd/path.rs\",\n     \"src/libstd/f32.rs\",\n     \"src/libstd/f64.rs\",\n+    // Integration test for platform-specific run-time feature detection:\n+    \"src/libstd/tests/run-time-detect.rs\" ,\n     \"src/libstd/sys_common/mod.rs\",\n     \"src/libstd/sys_common/net.rs\",\n     \"src/libterm\", // Not sure how to make this crate portable, but test crate needs it."}]}