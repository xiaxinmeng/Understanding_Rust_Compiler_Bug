{"sha": "50600c302e3573e10e7b9b70ea7b570eefea1171", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjAwYzMwMmUzNTczZTEwZTdiOWI3MGVhN2I1NzBlZWZlYTExNzE=", "commit": {"author": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2013-07-08T13:03:20Z"}, "committer": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2013-07-08T13:03:20Z"}, "message": "Updated rustpkg man page to match 0.7", "tree": {"sha": "a8bedbb045f318c48ffbbf827317bbf0e703c384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8bedbb045f318c48ffbbf827317bbf0e703c384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50600c302e3573e10e7b9b70ea7b570eefea1171", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50600c302e3573e10e7b9b70ea7b570eefea1171", "html_url": "https://github.com/rust-lang/rust/commit/50600c302e3573e10e7b9b70ea7b570eefea1171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50600c302e3573e10e7b9b70ea7b570eefea1171/comments", "author": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6143419ee1b9c38a33e8507c318f7906377bda03", "url": "https://api.github.com/repos/rust-lang/rust/commits/6143419ee1b9c38a33e8507c318f7906377bda03", "html_url": "https://github.com/rust-lang/rust/commit/6143419ee1b9c38a33e8507c318f7906377bda03"}], "stats": {"total": 214, "additions": 118, "deletions": 96}, "files": [{"sha": "a3178e616c6739536a141afd37552db037d5c2be", "filename": "man/rustpkg.1", "status": "modified", "additions": 118, "deletions": 96, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/50600c302e3573e10e7b9b70ea7b570eefea1171/man%2Frustpkg.1", "raw_url": "https://github.com/rust-lang/rust/raw/50600c302e3573e10e7b9b70ea7b570eefea1171/man%2Frustpkg.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustpkg.1?ref=50600c302e3573e10e7b9b70ea7b570eefea1171", "patch": "@@ -15,146 +15,168 @@ install and test Rust programs.\n \n .TP\n \\fBbuild\\fR\n-Build all targets described in the package script in the current\n-directory.\n+Searches for a package with the specified name and builds it in the workspace in\n+which it is found.\n .TP\n \\fBclean\\fR\n-Remove all build files in the work cache for the package in the current\n-directory.\n-.TP\n-\\fBdo\\fR\n-Runs a command in the package script.\n-.TP\n-\\fBinfo\\fR\n-Probe the package script in the current directory for information.\n+Remove all generated files from the \\fIbuild\\fR directory in the target's workspace.\n .TP\n \\fBinstall\\fR\n-Install a package given a local archive or a remote URI or VCS.\n-.TP\n-\\fBprefer\\fR\n-Specify which version of a binary to use.\n+Builds the specified target, and all its dependencies, and then installs the\n+build products into the \\fIlib\\fR and \\fIbin\\fR directories of their respective\n+workspaces.\n .TP\n \\fBtest\\fR\n-Build all targets described in the package script in the current directory\n-with the test flag.\n-.TP\n-\\fBuninstall\\fR\n-Remove a package by id or name and optionally version.\n-.TP\n-\\fBunprefer\\fR\n-Remove links to the versioned binary.\n-.TP\n-\\fBhelp\\fR\n-show detailed usage of a command\n+Builds the module called \\fItest.rs\\fR in the specified workspace, and then runs\n+the resulting executable in test mode.\n \n-.SH \"BUILD COMMAND\"\n+.SS \"BUILD COMMAND\"\n \n-The \\fBbuild\\fR command builds all targets described in the package script in\n-the current directory.\n+    rustpkg build \\fI[pkgname]\\fR\n \n-.TP\n--c, --cfg\n-Pass a cfg flag to the package script\n+The \\fBbuild\\fR command searches for a package with specified package name and\n+builds it in any workspace(s) where it finds one. Any dependent packages are\n+also built. The output files produced by the build phase are stored in the\n+\\fIbuild\\fR subdirectories of each package. The executables and libraries are\n+not copied to the 'bin' or 'lib' directories; that is the purpose of the\n+\\fBinstall\\fR command.\n \n-.SH \"DO COMMAND\"\n+.SS \"CLEAN COMMAND\"\n \n-The \\fBdo\\fR command runs a command in the package script. You can listen to a\n-command by tagging a function with the attribute `#[pkg_do(cmd)]`.\n+    rustpkg clean \\fI[pkgname]\\fR\n \n-.SH \"TEST COMMAND\"\n+deletes the contents of package's build directory.\n \n-The test command is an shortcut for the command line:\n+.SS \"INSTALL COMMAND\"\n \n-    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+    rustpkg install \\fI[url]\\fR\n+\n+builds the libraries and/or executables that are targets for the specified\n+package name or URL, and then installs them either into package's \\fIlib\\fR\n+and \\fIbin\\fR directories, or into the \\fIlib\\fR and \\fIbin\\fR subdirectories\n+of the first entry in RUST_PATH.\n+\n+Examples:\n+\n+    $ rustpkg install git://github.com/mozilla/servo.git#1.2\n+    $ rustpkg install rust-glfw\n \n-Note the trailing tilde on the output filename, which should ensure the\n-file does not clash with a user-generated files.\n+.SS \"TEST COMMAND\"\n \n-.SH \"INFO COMMAND\"\n+    rustpkg test \\fI[pkgname]\\fR\n \n-Probe the package script in the current directory for information.\n+The test command is a shortcut for the command line:\n \n-Options:\n+    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+\n+Note the suffix on the output filename (the word \"test\" followed by a tilde),\n+which should ensure the file does not clash with a user-generated files.\n+\n+.SH \"ENVIRONMENT\"\n \n .TP\n--j, --json\n-Output the result as JSON\n+RUST_PATH\n+A colon-separated (semicolon-separated) list of paths denoting workspaces\n+to search for Rust source files. See the section \\fBPATHS\\fR for full details.\n \n-.SH \"INSTALL COMMAND\"\n+.SH \"PATHS\"\n \n-    rustpkg [options..] install [url] [target]\n+The \\fBrustpkg\\fR tool searches for packages in the folders specified by the\n+\\fBRUST_PATH\\fR environment variable. Each folder constitutes a\n+\\fIworkspace\\fR, which contains one or more modules available to import.\n \n-Install a package from a URL by Git or cURL (FTP, HTTP, etc.).  If target is\n-provided, Git will checkout the branch or tag before continuing. If the URL\n-is a TAR file (with or without compression), extract it before\n-installing. If a URL isn't provided, the package will be built and installed\n-from the current directory (which is functionally the same as `rustpkg\n-build` and installing the result).\n+In addition to the RUST_PATH settings, the following implicit paths are\n+\\fIalways\\fR searched, in the following order:\n \n-Examples:\n+1. Any folders named \".rust\" in the current directory, \\fIand every parent\\fR\n+of the curent directory, up to the filesystem root;\n \n-    rustpkg install\n-    rustpkg install git://github.com/mozilla/servo.git\n-    rustpkg install git://github.com/mozilla/servo.git v0.1.2\n-    rustpkg install http://rust-lang.org/servo-0.1.2.tar.gz\n+2. The system path \"/usr/local\" on Unix-style systems, or the equivalent on\n+Windows; and\n \n-Options:\n+3. A folder named \".rust\" in the user's home directory (ie. \"~/.rust\" on Unix-\n+style systems or the equivalent on Windows).\n \n+.SH \"PACKAGE STRUCTURE\"\n+\n+A valid workspace must contain each of the following subdirectories:\n+\n+.TP\n+\\fBsrc/\\fR\n+Contains the Rust source code, with one subdirectory per package. Each\n+subdirectory contains source files for a given package.\n .TP\n--c, --cfg\n-Pass a cfg flag to the package script\n+\\fBlib/\\fR\n+\"rustpkg install\" installs libraries into a target-specific subdirectory of this directory.\n+.TP\n+\\fBbin/\\fR\n+\"rustpkg install\" installs executable binaries into a target-specific subdirectory of this directory.\n+.TP\n+\\fBbuild/\\fR\n+\"rustpkg build\" stores temporary build artifacts in a target-specific subdirectory of this directory.\n \n-.SH \"PREFER COMMAND\"\n+For example, if \"foo\" is a workspace containing the package \"bar\", then\n+\"foo/src/bar/main.rs\" would be the \"main\" entry point for building a \"bar\"\n+executable.\n \n-By default all binaries are given a unique name so that multiple versions\n-can coexist. The prefer command will symlink the uniquely named binary to\n-the binary directory under its bare name. If version is not supplied, the\n-latest version of the package will be preferred.\n+.SH \"PACKAGE IDENTIFIERS\"\n \n-Example:\n+A package identifier uniquely identifies a package. A package can be stored in\n+a workspace on the local file system, or on a remote Web server, in which case\n+the package ID resembles a URL.\n \n-    export PATH=$PATH:/home/user/.rustpkg/bin\n-    rustpkg prefer machine@1.2.4\n-    machine -v\n-    ==> v1.2.4\n-    rustpkg prefer machine@0.4.6\n-    machine -v\n-    ==> v0.4.6\n+For example, \\fIgithub.com/mozilla/rust\\fR is a package ID\n+that would refer to the git repository browsable at \\fIhttp://github.com/mozilla/rust\\fR.\n \n-.SH \"TEST COMMAND\"\n+A package ID can also specify a version, like:\n+\\fIgithub.com/mozilla/rust#0.3\\fR. In this case, \\fBrustpkg\\fR will check that\n+the repository \\fIgithub.com/mozilla/rust\\fR has a tag named \\fI0.3\\fR, and\n+report an error otherwise.\n \n-Build all targets described in the package script in the current directory\n-with the test flag. The test bootstraps will be run afterwards and the output\n-and exit code will be redirected.\n+.SH \"SPECIAL MODULES\"\n \n-Options:\n+\\fBrustpkg\\fR searches for four different known filenames in the src directory\n+in order to determine which crates to build:\n \n .TP\n--c, --cfg\n-Pass a cfg flag to the package script\n-\n-.SH \"UNINSTALL COMMAND\"\n+\\fBmain.rs\\fR\n+Assumed to be a main entry point for building an executable (install destination is 'bin' directory).\n+.TP\n+\\fBlib.rs\\fR\n+Assumed to be a library crate (install destination is 'lib' directory).\n+.TP\n+\\fBtest.rs\\fR\n+Assumed to contain tests declared with the \\fI#[test]\\fR attribute.\n+.TP\n+\\fBbench.rs\\fR\n+Assumed to contain benchmarks declared with the \\fI#[bench]\\fR attribute.\n \n-Remove a package by id or name and optionally version. If the package(s)\n-is/are depended on by another package then they cannot be removed.\n+.SH \"CRATE VERSIONS\"\n \n-.SH \"UNPREFER COMMAND\"\n+\\fBrustpkg\\fR packages do not need to declare their versions with an attribute\n+inside one of the source files, because rustpkg infers it from the version\n+control system. When building a package that is in a git repository,\n+rustpkg assumes that the most recent tag specifies the current version. When\n+building a package that is not under version control, or that has no tags,\n+rustpkg defaults the version to 0.1.\n \n-    $ rustpkg [options..] unprefer <id|name>[@version]\n+.SH \"DEPENDENCIES\"\n \n-Remove all symlinks from the store to the binary directory for a package\n-name and optionally version. If version is not supplied, the latest version\n-of the package will be unpreferred. See `rustpkg prefer -h` for more\n-information.\n+rustpkg infers dependencies from \"extern mod\" directives. Thus, there should\n+be no need to pass a \"-L\" flag to rustpkg to tell it where to find a library.\n+(In the future, it will also be possible to write an \"extern mod\" directive\n+referring to a remote package.)\n \n-.SH \"EXAMPLES\"\n+.SH \"CUSTOM BUILD SCRIPTS\"\n \n-To clone, build and install a specific version of the Servo engine from\n-its git repository on Github:\n-    $ rustpkg install git://github.com/mozilla/servo.git v0.1.2\n+A file called \\fIpkg.rs\\fR at the root level in a workspace is called a \\fIpackage\n+script\\fR. If a package script exists, rustpkg executes it to build the\n+package rather than inferring crates as described previously.\n \n-To download the archive and install Servo from a tarball:\n-    $ rustpkg install http://rust-lang.org/servo-0.1.2.tar.gz\n+Inside \\fIpkg.rs\\fR, it's possible to call back into rustpkg to finish up the\n+build. The \\fIrustpkg::api\\fR module contains functions to build, install, or\n+clean libraries and executables in the way rustpkg normally would without\n+custom build logic.\n \n .SH \"SEE ALSO\"\n "}]}