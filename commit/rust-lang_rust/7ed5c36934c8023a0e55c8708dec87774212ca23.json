{"sha": "7ed5c36934c8023a0e55c8708dec87774212ca23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDVjMzY5MzRjODAyM2EwZTU1Yzg3MDhkZWM4Nzc3NDIxMmNhMjM=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T15:18:14Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "Add UWP mingw targets", "tree": {"sha": "4161f4a20cf5cd749b474faaca84e9a6f424de38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4161f4a20cf5cd749b474faaca84e9a6f424de38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed5c36934c8023a0e55c8708dec87774212ca23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed5c36934c8023a0e55c8708dec87774212ca23", "html_url": "https://github.com/rust-lang/rust/commit/7ed5c36934c8023a0e55c8708dec87774212ca23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed5c36934c8023a0e55c8708dec87774212ca23/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88a4cee52ba62aef0632d6d61d12584be30f84f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88a4cee52ba62aef0632d6d61d12584be30f84f", "html_url": "https://github.com/rust-lang/rust/commit/e88a4cee52ba62aef0632d6d61d12584be30f84f"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "3ad77525eb37d4c88f514c04790e18c09fd6612c", "filename": "src/librustc_target/spec/i686_uwp_windows_gnu.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=7ed5c36934c8023a0e55c8708dec87774212ca23", "patch": "@@ -0,0 +1,27 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.eliminate_frame_pointer = false; // Required for backtraces\n+\n+    // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n+    // space available to x86 Windows binaries on x86_64.\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--large-address-aware\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"i686-pc-windows-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "f80e58f9538990e6ba8ba1506013c808a11f810e", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7ed5c36934c8023a0e55c8708dec87774212ca23", "patch": "@@ -60,6 +60,7 @@ mod solaris_base;\n mod uefi_base;\n mod windows_base;\n mod windows_msvc_base;\n+mod windows_uwp_base;\n mod thumb_base;\n mod l4re_base;\n mod fuchsia_base;\n@@ -434,6 +435,8 @@ supported_targets! {\n \n     (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),\n     (\"i686-pc-windows-gnu\", i686_pc_windows_gnu),\n+    (\"i686-uwp-windows-gnu\", i686_uwp_windows_gnu),\n+    (\"x86_64-uwp-windows-gnu\", x86_64_uwp_windows_gnu),\n \n     (\"aarch64-pc-windows-msvc\", aarch64_pc_windows_msvc),\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),"}, {"sha": "108dbc417cbb307ccc563993cc042b18790785e2", "filename": "src/librustc_target/spec/windows_uwp_base.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs?ref=7ed5c36934c8023a0e55c8708dec87774212ca23", "patch": "@@ -0,0 +1,64 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Gcc, vec![\n+            // Tell GCC to avoid linker plugins, because we are not bundling\n+            // them with Windows installer, and Rust does its own LTO anyways.\n+            \"-fno-use-linker-plugin\".to_string(),\n+\n+            // Always enable DEP (NX bit) when it is available\n+            \"-Wl,--nxcompat\".to_string(),\n+        ]);\n+\n+    let mut late_link_args = LinkArgs::new();\n+    late_link_args.insert(LinkerFlavor::Gcc, vec![\n+        //\"-lwinstorecompat\".to_string(),\n+        //\"-lmingwex\".to_string(),\n+        //\"-lwinstorecompat\".to_string(),\n+        \"-lwinstorecompat\".to_string(),\n+        \"-lruntimeobject\".to_string(),\n+        \"-lsynchronization\".to_string(),\n+        \"-lvcruntime140_app\".to_string(),\n+        \"-lucrt\".to_string(),\n+        \"-lwindowsapp\".to_string(),\n+        \"-lmingwex\".to_string(),\n+        \"-lmingw32\".to_string(),\n+    ]);\n+\n+    TargetOptions {\n+        // FIXME(#13846) this should be enabled for windows\n+        function_sections: false,\n+        linker: Some(\"gcc\".to_string()),\n+        dynamic_linking: true,\n+        executables: false,\n+        dll_prefix: String::new(),\n+        dll_suffix: \".dll\".to_string(),\n+        exe_suffix: \".exe\".to_string(),\n+        staticlib_prefix: \"lib\".to_string(),\n+        staticlib_suffix: \".a\".to_string(),\n+        no_default_libraries: true,\n+        target_family: Some(\"windows\".to_string()),\n+        is_like_windows: true,\n+        allows_weak_linkage: false,\n+        pre_link_args,\n+        pre_link_objects_exe: vec![\n+            \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n+        ],\n+        pre_link_objects_dll: vec![\n+            \"rsbegin.o\".to_string(),\n+        ],\n+        late_link_args,\n+        post_link_objects: vec![\n+            \"rsend.o\".to_string(),\n+        ],\n+        custom_unwind_resume: true,\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+        requires_uwtable: true,\n+        limit_rdylib_exports: false,\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "da0c324e4861873d1647a32e8abb2dbb964a9e5e", "filename": "src/librustc_target/spec/x86_64_uwp_windows_gnu.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed5c36934c8023a0e55c8708dec87774212ca23/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=7ed5c36934c8023a0e55c8708dec87774212ca23", "patch": "@@ -0,0 +1,22 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}]}