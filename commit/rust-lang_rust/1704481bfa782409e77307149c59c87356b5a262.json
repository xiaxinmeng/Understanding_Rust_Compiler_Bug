{"sha": "1704481bfa782409e77307149c59c87356b5a262", "node_id": "C_kwDOAAsO6NoAKDE3MDQ0ODFiZmE3ODI0MDllNzczMDcxNDljNTljODczNTZiNWEyNjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-16T00:23:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-17T03:32:45Z"}, "message": "Remove some ImplSource candidates", "tree": {"sha": "013d8c6ef740234f46874048a7cc3208b8da36c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013d8c6ef740234f46874048a7cc3208b8da36c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1704481bfa782409e77307149c59c87356b5a262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1704481bfa782409e77307149c59c87356b5a262", "html_url": "https://github.com/rust-lang/rust/commit/1704481bfa782409e77307149c59c87356b5a262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1704481bfa782409e77307149c59c87356b5a262/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc541e4b2eb957e71490cf44df1ac09f6d18132", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc541e4b2eb957e71490cf44df1ac09f6d18132", "html_url": "https://github.com/rust-lang/rust/commit/0cc541e4b2eb957e71490cf44df1ac09f6d18132"}], "stats": {"total": 76, "additions": 26, "deletions": 50}, "files": [{"sha": "a9d85ca506c56cca84d6a9f4be4c97d2c3c7de1a", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1704481bfa782409e77307149c59c87356b5a262", "patch": "@@ -662,10 +662,10 @@ pub enum ImplSource<'tcx, N> {\n     Object(ImplSourceObjectData<'tcx, N>),\n \n     /// Successful resolution for a builtin trait.\n-    Builtin(ImplSourceBuiltinData<N>),\n+    Builtin(Vec<N>),\n \n     /// ImplSource for trait upcasting coercion\n-    TraitUpcasting(ImplSourceTraitUpcastingData<'tcx, N>),\n+    TraitUpcasting(ImplSourceTraitUpcastingData<N>),\n \n     /// ImplSource automatically generated for a closure. The `DefId` is the ID\n     /// of the closure expression. This is an `ImplSource::UserDefined` in spirit, but the\n@@ -692,8 +692,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n             ImplSource::UserDefined(i) => i.nested,\n-            ImplSource::Param(n, _) => n,\n-            ImplSource::Builtin(i) => i.nested,\n+            ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n             ImplSource::AutoImpl(d) => d.nested,\n             ImplSource::Closure(c) => c.nested,\n             ImplSource::Generator(c) => c.nested,\n@@ -709,8 +708,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match self {\n             ImplSource::UserDefined(i) => &i.nested,\n-            ImplSource::Param(n, _) => n,\n-            ImplSource::Builtin(i) => &i.nested,\n+            ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n             ImplSource::AutoImpl(d) => &d.nested,\n             ImplSource::Closure(c) => &c.nested,\n             ImplSource::Generator(c) => &c.nested,\n@@ -726,8 +724,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn borrow_nested_obligations_mut(&mut self) -> &mut [N] {\n         match self {\n             ImplSource::UserDefined(i) => &mut i.nested,\n-            ImplSource::Param(n, _) => n,\n-            ImplSource::Builtin(i) => &mut i.nested,\n+            ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n             ImplSource::AutoImpl(d) => &mut d.nested,\n             ImplSource::Closure(c) => &mut c.nested,\n             ImplSource::Generator(c) => &mut c.nested,\n@@ -751,9 +748,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n             ImplSource::Param(n, ct) => ImplSource::Param(n.into_iter().map(f).collect(), ct),\n-            ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {\n-                nested: i.nested.into_iter().map(f).collect(),\n-            }),\n+            ImplSource::Builtin(n) => ImplSource::Builtin(n.into_iter().map(f).collect()),\n             ImplSource::Object(o) => ImplSource::Object(ImplSourceObjectData {\n                 upcast_trait_ref: o.upcast_trait_ref,\n                 vtable_base: o.vtable_base,\n@@ -789,7 +784,6 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             }),\n             ImplSource::TraitUpcasting(d) => {\n                 ImplSource::TraitUpcasting(ImplSourceTraitUpcastingData {\n-                    upcast_trait_ref: d.upcast_trait_ref,\n                     vtable_vptr_slot: d.vtable_vptr_slot,\n                     nested: d.nested.into_iter().map(f).collect(),\n                 })\n@@ -860,10 +854,7 @@ pub struct ImplSourceAutoImplData<N> {\n \n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n-pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n-    /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n-    pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n-\n+pub struct ImplSourceTraitUpcastingData<N> {\n     /// The vtable is formed by concatenating together the method lists of\n     /// the base object trait and all supertraits, pointers to supertrait vtable will\n     /// be provided when necessary; this is the position of `upcast_trait_ref`'s vtable\n@@ -873,12 +864,6 @@ pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n-#[derive(TypeFoldable, TypeVisitable)]\n-pub struct ImplSourceBuiltinData<N> {\n-    pub nested: Vec<N>,\n-}\n-\n #[derive(PartialEq, Eq, Clone, TyEncodable, TyDecodable, HashStable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceObjectData<'tcx, N> {"}, {"sha": "311d3d1f1e8edf404b36b598d6d71fc17a244578", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=1704481bfa782409e77307149c59c87356b5a262", "patch": "@@ -76,18 +76,12 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceClosureData<'tcx, N>\n     }\n }\n \n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceBuiltinData<N> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"ImplSourceBuiltinData(nested={:?})\", self.nested)\n-    }\n-}\n-\n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"ImplSourceTraitUpcastingData(upcast={:?}, vtable_vptr_slot={:?}, nested={:?})\",\n-            self.upcast_trait_ref, self.vtable_vptr_slot, self.nested\n+            \"ImplSourceTraitUpcastingData(vtable_vptr_slot={:?}, nested={:?})\",\n+            self.vtable_vptr_slot, self.nested\n         )\n     }\n }"}, {"sha": "dd2bd45c07da6b5880bada8f8daca618e3b49535", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1704481bfa782409e77307149c59c87356b5a262", "patch": "@@ -30,7 +30,6 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::infer::DefineOpaqueTypes;\n-use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n@@ -2106,7 +2105,7 @@ fn confirm_future_candidate<'cx, 'tcx>(\n fn confirm_builtin_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    data: ImplSourceBuiltinData<PredicateObligation<'tcx>>,\n+    data: Vec<PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let self_ty = obligation.predicate.self_ty();\n@@ -2154,7 +2153,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n         .with_addl_obligations(obligations)\n-        .with_addl_obligations(data.nested)\n+        .with_addl_obligations(data)\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'tcx>("}, {"sha": "277367fe27570b557d018a34b3d6ed42bfd200ef", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1704481bfa782409e77307149c59c87356b5a262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1704481bfa782409e77307149c59c87356b5a262", "patch": "@@ -27,12 +27,11 @@ use crate::traits::vtable::{\n };\n use crate::traits::{\n     BuiltinDerivedObligation, ImplDerivedObligation, ImplDerivedObligationCause, ImplSource,\n-    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n-    ImplSourceConstDestructData, ImplSourceFnPointerData, ImplSourceFutureData,\n-    ImplSourceGeneratorData, ImplSourceObjectData, ImplSourceTraitAliasData,\n-    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, Obligation,\n-    ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection, SelectionError,\n-    TraitNotObjectSafe, TraitObligation, Unimplemented,\n+    ImplSourceAutoImplData, ImplSourceClosureData, ImplSourceConstDestructData,\n+    ImplSourceFnPointerData, ImplSourceFutureData, ImplSourceGeneratorData, ImplSourceObjectData,\n+    ImplSourceTraitAliasData, ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized,\n+    Obligation, ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection,\n+    SelectionError, TraitNotObjectSafe, TraitObligation, Unimplemented,\n };\n \n use super::BuiltinImplConditions;\n@@ -114,7 +113,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                ImplSource::Param(Vec::new(), ty::BoundConstness::NotConst)\n+                ImplSource::Builtin(Vec::new())\n             }\n \n             BuiltinUnsizeCandidate => {\n@@ -244,7 +243,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         has_nested: bool,\n-    ) -> ImplSourceBuiltinData<PredicateObligation<'tcx>> {\n+    ) -> Vec<PredicateObligation<'tcx>> {\n         debug!(?obligation, ?has_nested, \"confirm_builtin_candidate\");\n \n         let lang_items = self.tcx().lang_items();\n@@ -277,14 +276,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?obligations);\n \n-        ImplSourceBuiltinData { nested: obligations }\n+        obligations\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn confirm_transmutability_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-    ) -> Result<ImplSourceBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+    ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         use rustc_transmute::{Answer, Condition};\n         #[instrument(level = \"debug\", skip(tcx, obligation, predicate))]\n         fn flatten_answer_tree<'tcx>(\n@@ -369,7 +368,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         debug!(?fully_flattened);\n-        Ok(ImplSourceBuiltinData { nested: fully_flattened })\n+        Ok(fully_flattened)\n     }\n \n     /// This handles the case where an `auto trait Foo` impl is being used.\n@@ -912,8 +911,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         idx: usize,\n-    ) -> Result<ImplSourceTraitUpcastingData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n-    {\n+    ) -> Result<ImplSourceTraitUpcastingData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         let tcx = self.tcx();\n \n         // `assemble_candidates_for_unsizing` should ensure there are no late-bound\n@@ -1010,13 +1008,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let vtable_vptr_slot =\n             prepare_vtable_segments(tcx, source_trait_ref, vtable_segment_callback).unwrap();\n \n-        Ok(ImplSourceTraitUpcastingData { upcast_trait_ref, vtable_vptr_slot, nested })\n+        Ok(ImplSourceTraitUpcastingData { vtable_vptr_slot, nested })\n     }\n \n     fn confirm_builtin_unsize_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-    ) -> Result<ImplSourceBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+    ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         let tcx = self.tcx();\n \n         // `assemble_candidates_for_unsizing` should ensure there are no late-bound\n@@ -1217,7 +1215,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"source: {source}, target: {target}\"),\n         };\n \n-        Ok(ImplSourceBuiltinData { nested })\n+        Ok(nested)\n     }\n \n     fn confirm_const_destruct_candidate("}]}