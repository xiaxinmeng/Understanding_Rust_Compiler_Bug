{"sha": "9c499ccfcded4f5be76d70f441a5c7c9d1260226", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDk5Y2NmY2RlZDRmNWJlNzZkNzBmNDQxYTVjN2M5ZDEyNjAyMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T14:42:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T14:42:47Z"}, "message": "Auto merge of #57018 - dcreager:redundant-linker, r=alexcrichton\n\nKeep last redundant linker flag, not first\n\nWhen a library (L1) is passed to the linker multiple times, this is sometimes purposeful: there might be several other libraries in the linker command (L2 and L3) that all depend on L1.  You'd end up with a (simplified) linker command that looks like:\n\n```\n-l2 -l1 -l3 -l1\n```\n\nWith the previous behavior, when rustc encountered a redundant library, it would keep the first instance, and remove the later ones, resulting in:\n\n```\n-l2 -l1 -l3\n```\n\nThis can cause a linker error, because on some platforms (e.g. Linux), the linker will only include symbols from L1 that are needed *at the point it's referenced in the command line*.  So if L3 depends on additional symbols from L1, which aren't needed by L2, the linker won't know to include them, and you'll end up with \"undefined symbols\" errors.\n\nA better behavior is to keep the *last* instance of the library:\n\n```\n-l2 -l3 -l1\n```\n\nThis ensures that all \"downstream\" libraries have been included in the linker command before the \"upstream\" library is referenced.\n\nFixes rust-lang#47989", "tree": {"sha": "9063904dc28814baf22ebf3280b30c00539414ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9063904dc28814baf22ebf3280b30c00539414ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c499ccfcded4f5be76d70f441a5c7c9d1260226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c499ccfcded4f5be76d70f441a5c7c9d1260226", "html_url": "https://github.com/rust-lang/rust/commit/9c499ccfcded4f5be76d70f441a5c7c9d1260226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c499ccfcded4f5be76d70f441a5c7c9d1260226/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8700b9d50a1e3d31f7b6c0956df555279ac441", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8700b9d50a1e3d31f7b6c0956df555279ac441", "html_url": "https://github.com/rust-lang/rust/commit/0c8700b9d50a1e3d31f7b6c0956df555279ac441"}, {"sha": "32d99efa403a5c3ba93d3389110cd9f4226591d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d99efa403a5c3ba93d3389110cd9f4226591d2", "html_url": "https://github.com/rust-lang/rust/commit/32d99efa403a5c3ba93d3389110cd9f4226591d2"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "14416b5ce075950573f843416fe02e6c99f2d20a", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,6 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n+#![feature(drain_filter)]\n #![feature(libc)]\n #![feature(nll)]\n #![feature(proc_macro_internals)]"}, {"sha": "314c95a42bed096444527101ccd9a2e5766570bd", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -199,34 +199,31 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n         }\n \n         // Update kind and, optionally, the name of all native libraries\n-        // (there may be more than one) with the specified name.\n+        // (there may be more than one) with the specified name.  If any\n+        // library is mentioned more than once, keep the latest mention\n+        // of it, so that any possible dependent libraries appear before\n+        // it.  (This ensures that the linker is able to see symbols from\n+        // all possible dependent libraries before linking in the library\n+        // in question.)\n         for &(ref name, ref new_name, kind) in &self.tcx.sess.opts.libs {\n-            let mut found = false;\n-            for lib in self.libs.iter_mut() {\n-                let lib_name = match lib.name {\n-                    Some(n) => n,\n-                    None => continue,\n-                };\n-                if lib_name == name as &str {\n-                    let mut changed = false;\n-                    if let Some(k) = kind {\n-                        lib.kind = k;\n-                        changed = true;\n-                    }\n-                    if let &Some(ref new_name) = new_name {\n-                        lib.name = Some(Symbol::intern(new_name));\n-                        changed = true;\n-                    }\n-                    if !changed {\n-                        let msg = format!(\"redundant linker flag specified for \\\n-                                           library `{}`\", name);\n-                        self.tcx.sess.warn(&msg);\n+            // If we've already added any native libraries with the same\n+            // name, they will be pulled out into `existing`, so that we\n+            // can move them to the end of the list below.\n+            let mut existing = self.libs.drain_filter(|lib| {\n+                if let Some(lib_name) = lib.name {\n+                    if lib_name == name as &str {\n+                        if let Some(k) = kind {\n+                            lib.kind = k;\n+                        }\n+                        if let &Some(ref new_name) = new_name {\n+                            lib.name = Some(Symbol::intern(new_name));\n+                        }\n+                        return true;\n                     }\n-\n-                    found = true;\n                 }\n-            }\n-            if !found {\n+                false\n+            }).collect::<Vec<_>>();\n+            if existing.is_empty() {\n                 // Add if not found\n                 let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLibrary {\n@@ -237,6 +234,10 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n                     wasm_import_module: None,\n                 };\n                 self.register_native_lib(None, lib);\n+            } else {\n+                // Move all existing libraries with the same name to the\n+                // end of the command line.\n+                self.libs.append(&mut existing);\n             }\n         }\n     }"}, {"sha": "9486e07d21bf7c4e093db574e8d42da6b1d3aae7", "filename": "src/test/run-make-fulldeps/redundant-libs/Makefile", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2FMakefile?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -0,0 +1,27 @@\n+-include ../tools.mk\n+\n+ifdef IS_WINDOWS\n+all:\n+else\n+\n+# rustc will remove one of the two redundant references to foo below.  Depending\n+# on which one gets removed, we'll get a linker error on SOME platforms (like\n+# Linux).  On these platforms, when a library is referenced, the linker will\n+# only pull in the symbols needed _at that point in time_.  If a later library\n+# depends on additional symbols from the library, they will not have been pulled\n+# in, and you'll get undefined symbols errors.\n+#\n+# So in this example, we need to ensure that rustc keeps the _later_ reference\n+# to foo, and not the former one.\n+RUSTC_FLAGS = \\\n+    -l static=bar \\\n+    -l foo \\\n+    -l static=baz \\\n+    -l foo \\\n+    -Z print-link-args\n+\n+all: $(call DYLIB,foo) $(call STATICLIB,bar) $(call STATICLIB,baz)\n+\t$(RUSTC) $(RUSTC_FLAGS) main.rs\n+\t$(call RUN,main)\n+\n+endif"}, {"sha": "e42599986781fe984a2c1427a3373cf439a34f60", "filename": "src/test/run-make-fulldeps/redundant-libs/bar.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbar.c?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -0,0 +1 @@\n+void bar() {}"}, {"sha": "a4e2c2b717fdbeddb398c8753330e7b50c5540c9", "filename": "src/test/run-make-fulldeps/redundant-libs/baz.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbaz.c", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbaz.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fbaz.c?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -0,0 +1,7 @@\n+extern void foo1();\n+extern void foo2();\n+\n+void baz() {\n+  foo1();\n+  foo2();\n+}"}, {"sha": "339ee86c99eaecec44f7c2c50cb15b3ef350b319", "filename": "src/test/run-make-fulldeps/redundant-libs/foo.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Ffoo.c?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -0,0 +1,2 @@\n+void foo1() {}\n+void foo2() {}"}, {"sha": "90d185ff51dbdbd691db4689785b71322352f2cf", "filename": "src/test/run-make-fulldeps/redundant-libs/main.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fredundant-libs%2Fmain.rs?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -0,0 +1,11 @@\n+extern \"C\" {\n+    fn bar();\n+    fn baz();\n+}\n+\n+fn main() {\n+    unsafe {\n+        bar();\n+        baz();\n+    }\n+}"}]}