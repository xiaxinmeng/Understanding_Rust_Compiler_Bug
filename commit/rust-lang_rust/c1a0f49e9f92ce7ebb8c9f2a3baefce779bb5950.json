{"sha": "c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "node_id": "C_kwDOAAsO6NoAKGMxYTBmNDllOWY5MmNlN2ViYjhjOWYyYTNiYWVmY2U3NzliYjU5NTA", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-07T10:17:11Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-09T15:54:11Z"}, "message": "keep the same config values in stage0 between invocations\n\nThis commit allows users to change the contents of the \"config\" key in\nsrc/stage0.json without having it overridden the next time the\nbump-stage0 tool is executed.", "tree": {"sha": "b6d0de13d7edf608670699eed6d85e66d5653fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d0de13d7edf608670699eed6d85e66d5653fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKiF6MACgkQzXazX3c0\ndp4oHg//aGcgJmc10RMC0ySYXHYY3mwnc6Ks8lViTi/E12DVCd83SR3TICRn2mqX\nLgIhteULcMCdI2VBH/Nm2tDp9a0m7Mu/WRjcc7YTGoMdAnBR34x22IU5uGIfu9mC\nYA+sQ+IPTpOWcxN6s58YHezQ234yl/z65Sr2gUf+rTzKAyU0IJyM/fAeQtOcXMPN\nV852P3JYq4pksDgV3JaqhHym2BRoNCAQ4LK956NFNfAtG+t43ZnPPWflYDhuZ6NH\nu3VN7+k+x4GrVMSllqxdcBDzEYGqjVuv5O4PmDaZqruBWQnLT348x3zOAiCMIMGu\nVw8IAIOGFSK2HGv9TlFMTMH8oMZR7aWXpgpJtvxqdB3m014TSRRczmTN6+QRTEuT\nlBgaB/1oKONyq15ZT7og2PHMPmismY+OU+PEpKYPYruun1xgkXJAXciSTSUK46sb\nCwV3H5tNOUB/PBAmdbrmyBgDUUx78XftYzk3zGw90JZ226UBtthzO4cqxqfey7lz\ny4nNlg+icHIDFrbWlN4BXqo46zsiG/w1zj3r25YuStSbryIXpPFfpJGhz3wJc9Hb\nJvNTThqPzUT3M8BsfXSvsvWbFMLifxgqunrg+4+DLjcLgOEx26AlMTZGuw0FIXtq\nXSflncflCPQDJsVXhsJq1PNFEoz2xXc9gXnWERRF3nQwe7IGf7c=\n=uSoW\n-----END PGP SIGNATURE-----", "payload": "tree b6d0de13d7edf608670699eed6d85e66d5653fca\nparent a0411e2bfe1fb939757aa96603f0a10d1d9eb029\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654597031 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1654790051 +0200\n\nkeep the same config values in stage0 between invocations\n\nThis commit allows users to change the contents of the \"config\" key in\nsrc/stage0.json without having it overridden the next time the\nbump-stage0 tool is executed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "html_url": "https://github.com/rust-lang/rust/commit/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "html_url": "https://github.com/rust-lang/rust/commit/a0411e2bfe1fb939757aa96603f0a10d1d9eb029"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "3b2b507b062371a3c8e68d285cfd5d7d4d9ac5aa", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "patch": "@@ -1043,7 +1043,7 @@ def bootstrap(help_triggered):\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n \n-    build.set_dist_environment(data[\"dist_server\"])\n+    build.set_dist_environment(data[\"config\"][\"dist_server\"])\n \n     build.build = args.build or build.build_triple()\n "}, {"sha": "5af6d7d824f2240881c03023b36cfc708c850bab", "filename": "src/stage0.json", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "patch": "@@ -1,6 +1,8 @@\n {\n   \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n-  \"dist_server\": \"https://static.rust-lang.org\",\n+  \"config\": {\n+    \"dist_server\": \"https://static.rust-lang.org\"\n+  },\n   \"compiler\": {\n     \"date\": \"2022-05-20\",\n     \"version\": \"beta\""}, {"sha": "e9ae1fe272f29b91b769df9a05d40d6c77185173", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "patch": "@@ -4,11 +4,12 @@ use indexmap::IndexMap;\n use std::collections::HashMap;\n use std::convert::TryInto;\n \n-const DIST_SERVER: &str = \"https://static.rust-lang.org\";\n+const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];\n const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\"];\n \n struct Tool {\n+    config: Config,\n     channel: Channel,\n     version: [u16; 3],\n     checksums: IndexMap<String, String>,\n@@ -32,26 +33,29 @@ impl Tool {\n             .try_into()\n             .map_err(|_| anyhow::anyhow!(\"failed to parse version\"))?;\n \n-        Ok(Self { channel, version, checksums: IndexMap::new() })\n+        let existing: Stage0 = serde_json::from_slice(&std::fs::read(PATH)?)?;\n+\n+        Ok(Self { channel, version, config: existing.config, checksums: IndexMap::new() })\n     }\n \n     fn update_json(mut self) -> Result<(), Error> {\n         std::fs::write(\n-            \"src/stage0.json\",\n+            PATH,\n             format!(\n                 \"{}\\n\",\n                 serde_json::to_string_pretty(&Stage0 {\n                     comment: \"Generated by `./x.py run src/tools/bump-stage0`. \\\n-                              Run that command again to update the bootstrap compiler.\",\n-                    dist_server: DIST_SERVER.into(),\n+                              Run that command again to update the bootstrap compiler.\"\n+                        .into(),\n                     compiler: self.detect_compiler()?,\n                     rustfmt: self.detect_rustfmt()?,\n                     checksums_sha256: {\n                         // Keys are sorted here instead of beforehand because values in this map\n                         // are added while filling the other struct fields just above this block.\n                         self.checksums.sort_keys();\n                         self.checksums\n-                    }\n+                    },\n+                    config: self.config,\n                 })?\n             ),\n         )?;\n@@ -74,7 +78,7 @@ impl Tool {\n             Channel::Nightly => \"beta\".to_string(),\n         };\n \n-        let manifest = fetch_manifest(&channel)?;\n+        let manifest = fetch_manifest(&self.config, &channel)?;\n         self.collect_checksums(&manifest, COMPILER_COMPONENTS)?;\n         Ok(Stage0Toolchain {\n             date: manifest.date,\n@@ -100,13 +104,13 @@ impl Tool {\n             return Ok(None);\n         }\n \n-        let manifest = fetch_manifest(\"nightly\")?;\n+        let manifest = fetch_manifest(&self.config, \"nightly\")?;\n         self.collect_checksums(&manifest, RUSTFMT_COMPONENTS)?;\n         Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n     }\n \n     fn collect_checksums(&mut self, manifest: &Manifest, components: &[&str]) -> Result<(), Error> {\n-        let prefix = format!(\"{}/\", DIST_SERVER);\n+        let prefix = format!(\"{}/\", self.config.dist_server);\n         for component in components {\n             let pkg = manifest\n                 .pkg\n@@ -136,10 +140,10 @@ fn main() -> Result<(), Error> {\n     Ok(())\n }\n \n-fn fetch_manifest(channel: &str) -> Result<Manifest, Error> {\n+fn fetch_manifest(config: &Config, channel: &str) -> Result<Manifest, Error> {\n     Ok(toml::from_slice(&http_get(&format!(\n         \"{}/dist/channel-rust-{}.toml\",\n-        DIST_SERVER, channel\n+        config.dist_server, channel\n     ))?)?)\n }\n \n@@ -166,35 +170,40 @@ enum Channel {\n     Nightly,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0 {\n     #[serde(rename = \"__comment\")]\n-    comment: &'static str,\n-    dist_server: String,\n+    comment: String,\n+    config: Config,\n     compiler: Stage0Toolchain,\n     rustfmt: Option<Stage0Toolchain>,\n     checksums_sha256: IndexMap<String, String>,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n+struct Config {\n+    dist_server: String,\n+}\n+\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0Toolchain {\n     date: String,\n     version: String,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Manifest {\n     date: String,\n     pkg: HashMap<String, ManifestPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestPackage {\n     version: String,\n     target: HashMap<String, ManifestTargetPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestTargetPackage {\n     url: Option<String>,\n     hash: Option<String>,"}]}