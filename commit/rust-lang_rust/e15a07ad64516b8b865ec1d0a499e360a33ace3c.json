{"sha": "e15a07ad64516b8b865ec1d0a499e360a33ace3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWEwN2FkNjQ1MTZiOGI4NjVlYzFkMGE0OTllMzYwYTMzYWNlM2M=", "commit": {"author": {"name": "Chris Stankus", "email": "cdstankus@gmail.com", "date": "2017-08-18T17:20:04Z"}, "committer": {"name": "Chris Stankus", "email": "cdstankus@gmail.com", "date": "2017-08-30T17:02:25Z"}, "message": "Remove Borrow bound from SliceExt::binary_search", "tree": {"sha": "ccffd4469542dfd50ecb4e9219a1234a8fcc7680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccffd4469542dfd50ecb4e9219a1234a8fcc7680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15a07ad64516b8b865ec1d0a499e360a33ace3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15a07ad64516b8b865ec1d0a499e360a33ace3c", "html_url": "https://github.com/rust-lang/rust/commit/e15a07ad64516b8b865ec1d0a499e360a33ace3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15a07ad64516b8b865ec1d0a499e360a33ace3c/comments", "author": {"login": "circuitfox", "id": 6395282, "node_id": "MDQ6VXNlcjYzOTUyODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6395282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/circuitfox", "html_url": "https://github.com/circuitfox", "followers_url": "https://api.github.com/users/circuitfox/followers", "following_url": "https://api.github.com/users/circuitfox/following{/other_user}", "gists_url": "https://api.github.com/users/circuitfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/circuitfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/circuitfox/subscriptions", "organizations_url": "https://api.github.com/users/circuitfox/orgs", "repos_url": "https://api.github.com/users/circuitfox/repos", "events_url": "https://api.github.com/users/circuitfox/events{/privacy}", "received_events_url": "https://api.github.com/users/circuitfox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "circuitfox", "id": 6395282, "node_id": "MDQ6VXNlcjYzOTUyODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6395282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/circuitfox", "html_url": "https://github.com/circuitfox", "followers_url": "https://api.github.com/users/circuitfox/followers", "following_url": "https://api.github.com/users/circuitfox/following{/other_user}", "gists_url": "https://api.github.com/users/circuitfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/circuitfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/circuitfox/subscriptions", "organizations_url": "https://api.github.com/users/circuitfox/orgs", "repos_url": "https://api.github.com/users/circuitfox/repos", "events_url": "https://api.github.com/users/circuitfox/events{/privacy}", "received_events_url": "https://api.github.com/users/circuitfox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9cf3594ab25d2809ac576dfc9defb8e87b45b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9cf3594ab25d2809ac576dfc9defb8e87b45b8", "html_url": "https://github.com/rust-lang/rust/commit/ca9cf3594ab25d2809ac576dfc9defb8e87b45b8"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "dacc014955a902f3d79a32f63c71f9ee57a7cb94", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e15a07ad64516b8b865ec1d0a499e360a33ace3c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15a07ad64516b8b865ec1d0a499e360a33ace3c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e15a07ad64516b8b865ec1d0a499e360a33ace3c", "patch": "@@ -35,7 +35,6 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-use borrow::Borrow;\n use cmp::Ordering::{self, Less, Equal, Greater};\n use cmp;\n use fmt;\n@@ -122,19 +121,17 @@ pub trait SliceExt {\n     fn as_ptr(&self) -> *const Self::Item;\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn binary_search<Q: ?Sized>(&self, x: &Q) -> Result<usize, usize>\n-        where Self::Item: Borrow<Q>,\n-              Q: Ord;\n+    fn binary_search(&self, x: &Self::Item) -> Result<usize, usize>\n+        where Self::Item: Ord;\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> Ordering;\n \n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n-    fn binary_search_by_key<'a, B, F, Q: ?Sized>(&'a self, b: &Q, f: F) -> Result<usize, usize>\n+    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> B,\n-              B: Borrow<Q>,\n-              Q: Ord;\n+              B: Ord;\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len(&self) -> usize;\n@@ -635,11 +632,10 @@ impl<T> SliceExt for [T] {\n         m >= n && needle == &self[m-n..]\n     }\n \n-    fn binary_search<Q: ?Sized>(&self, x: &Q) -> Result<usize, usize>\n-        where T: Borrow<Q>,\n-              Q: Ord\n+    fn binary_search(&self, x: &T) -> Result<usize, usize>\n+        where T: Ord\n     {\n-        self.binary_search_by(|p| p.borrow().cmp(x))\n+        self.binary_search_by(|p| p.cmp(x))\n     }\n \n     fn rotate(&mut self, mid: usize) {\n@@ -687,12 +683,11 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn binary_search_by_key<'a, B, F, Q: ?Sized>(&'a self, b: &Q, mut f: F) -> Result<usize, usize>\n+    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> B,\n-              B: Borrow<Q>,\n-              Q: Ord\n+              B: Ord\n     {\n-        self.binary_search_by(|k| f(k).borrow().cmp(b))\n+        self.binary_search_by(|k| f(k).cmp(b))\n     }\n \n     #[inline]"}]}