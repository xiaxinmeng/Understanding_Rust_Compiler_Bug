{"sha": "a581c82bdc2c13a398b091878d7353bc3d097d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ODFjODJiZGMyYzEzYTM5OGIwOTE4NzhkNzM1M2JjM2QwOTdkNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-13T10:10:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-13T10:10:46Z"}, "message": "Auto merge of #33541 - eddyb:promote-only-temps, r=arielb1\n\nmir: don't attempt to promote Unpromotable constant temps.\n\nFixes #33537. This was a non-problem in regular functions, but we also promote in `const fn`s.\nThere we always qualify temps so you can't depend on `Unpromotable` temps being `NOT_CONST`.", "tree": {"sha": "258da1aa36b7771eae1b1fb036df3f385aed7364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/258da1aa36b7771eae1b1fb036df3f385aed7364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a581c82bdc2c13a398b091878d7353bc3d097d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a581c82bdc2c13a398b091878d7353bc3d097d59", "html_url": "https://github.com/rust-lang/rust/commit/a581c82bdc2c13a398b091878d7353bc3d097d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a581c82bdc2c13a398b091878d7353bc3d097d59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709e5c5fdefb26500bf1b6a1e7eff7a6dfb8596a", "url": "https://api.github.com/repos/rust-lang/rust/commits/709e5c5fdefb26500bf1b6a1e7eff7a6dfb8596a", "html_url": "https://github.com/rust-lang/rust/commit/709e5c5fdefb26500bf1b6a1e7eff7a6dfb8596a"}, {"sha": "e5a91b7ba1a22e34c7d09105e7a115e696ffcd0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a91b7ba1a22e34c7d09105e7a115e696ffcd0f", "html_url": "https://github.com/rust-lang/rust/commit/e5a91b7ba1a22e34c7d09105e7a115e696ffcd0f"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "4eda1ed23b757e5f21b7835c168561365f5ff435", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a581c82bdc2c13a398b091878d7353bc3d097d59/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a581c82bdc2c13a398b091878d7353bc3d097d59/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a581c82bdc2c13a398b091878d7353bc3d097d59", "patch": "@@ -64,13 +64,18 @@ bitflags! {\n         // pointer comparisons, ptr-to-int casts, etc.\n         const NOT_CONST         = 1 << 6,\n \n+        // Refers to temporaries which cannot be promoted as\n+        // promote_consts decided they weren't simple enough.\n+        const NOT_PROMOTABLE    = 1 << 7,\n+\n         // Borrows of temporaries can be promoted only\n         // if they have none of the above qualifications.\n-        const UNPROMOTABLE      = !0,\n+        const NEVER_PROMOTE     = !0,\n \n         // Const items can only have MUTABLE_INTERIOR\n-        // without producing an error.\n-        const CONST_ERROR       = !Qualif::MUTABLE_INTERIOR.bits\n+        // and NOT_PROMOTABLE without producing an error.\n+        const CONST_ERROR       = !Qualif::MUTABLE_INTERIOR.bits &\n+                                  !Qualif::NOT_PROMOTABLE.bits\n     }\n }\n \n@@ -503,6 +508,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 self.add(Qualif::NOT_CONST);\n             }\n             Lvalue::Temp(index) => {\n+                if !self.temp_promotion_state[index as usize].is_promotable() {\n+                    self.add(Qualif::NOT_PROMOTABLE);\n+                }\n+\n                 if let Some(qualif) = self.temp_qualif[index as usize] {\n                     self.add(qualif);\n                 } else {\n@@ -688,8 +697,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // We might have a candidate for promotion.\n                 let candidate = Candidate::Ref(self.location);\n                 if self.mode == Mode::Fn || self.mode == Mode::ConstFn {\n-                    if !self.qualif.intersects(Qualif::UNPROMOTABLE) {\n-                        self.promotion_candidates.push(candidate);\n+                    if !self.qualif.intersects(Qualif::NEVER_PROMOTE) {\n+                        // We can only promote direct borrows of temps.\n+                        if let Lvalue::Temp(_) = *lvalue {\n+                            self.promotion_candidates.push(candidate);\n+                        }\n                     }\n                 }\n             }\n@@ -781,7 +793,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.visit_operand(arg);\n                     if is_shuffle && i == 2 && this.mode == Mode::Fn {\n                         let candidate = Candidate::ShuffleIndices(bb);\n-                        if !this.qualif.intersects(Qualif::UNPROMOTABLE) {\n+                        if !this.qualif.intersects(Qualif::NEVER_PROMOTE) {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,"}, {"sha": "24f4c9f590b11341a74997d5e574989e5385aefe", "filename": "src/test/run-pass/issue-33537.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a581c82bdc2c13a398b091878d7353bc3d097d59/src%2Ftest%2Frun-pass%2Fissue-33537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a581c82bdc2c13a398b091878d7353bc3d097d59/src%2Ftest%2Frun-pass%2Fissue-33537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33537.rs?ref=a581c82bdc2c13a398b091878d7353bc3d097d59", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+const fn foo() -> *const i8 {\n+    b\"foo\" as *const _ as *const i8\n+}\n+\n+const fn bar() -> i32 {\n+    *&{(1, 2, 3).1}\n+}\n+\n+fn main() {\n+    assert_eq!(foo(), b\"foo\" as *const _ as *const i8);\n+    assert_eq!(bar(), 2);\n+}"}]}