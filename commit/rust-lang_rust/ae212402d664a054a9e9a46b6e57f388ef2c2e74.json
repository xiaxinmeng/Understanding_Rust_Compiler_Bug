{"sha": "ae212402d664a054a9e9a46b6e57f388ef2c2e74", "node_id": "C_kwDOAAsO6NoAKGFlMjEyNDAyZDY2NGEwNTRhOWU5YTQ2YjZlNTdmMzg4ZWYyYzJlNzQ", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2022-02-12T06:43:21Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2022-02-16T03:58:36Z"}, "message": "Make implementation generic", "tree": {"sha": "b90da4c8490581aa07889cf53af1feeab360dfe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b90da4c8490581aa07889cf53af1feeab360dfe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae212402d664a054a9e9a46b6e57f388ef2c2e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae212402d664a054a9e9a46b6e57f388ef2c2e74", "html_url": "https://github.com/rust-lang/rust/commit/ae212402d664a054a9e9a46b6e57f388ef2c2e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae212402d664a054a9e9a46b6e57f388ef2c2e74/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8610edd01451e16d4fcb66324a27890c559fbf7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8610edd01451e16d4fcb66324a27890c559fbf7b", "html_url": "https://github.com/rust-lang/rust/commit/8610edd01451e16d4fcb66324a27890c559fbf7b"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "7f9f1a3270185ee0c4fba536e9cc22bd4002951b", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ae212402d664a054a9e9a46b6e57f388ef2c2e74/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae212402d664a054a9e9a46b6e57f388ef2c2e74/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ae212402d664a054a9e9a46b6e57f388ef2c2e74", "patch": "@@ -1196,35 +1196,43 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(adt) if adt.did.is_local() => adt,\n                 _ => continue,\n             };\n-            let diagnostic_name = self.tcx.get_diagnostic_name(trait_pred.def_id());\n-            let can_derive = match diagnostic_name {\n-                Some(sym::Default) => !adt.is_enum(),\n-                Some(\n+            if let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n+                let can_derive = match diagnostic_name {\n+                    sym::Default => !adt.is_enum(),\n                     sym::Eq\n                     | sym::PartialEq\n                     | sym::Ord\n                     | sym::PartialOrd\n                     | sym::Clone\n                     | sym::Copy\n                     | sym::Hash\n-                    | sym::Debug,\n-                ) => true,\n-                _ => false,\n-            };\n-            if can_derive {\n-                let self_name = trait_pred.self_ty().to_string();\n-                let self_span = self.tcx.def_span(adt.did);\n-                if let Some(sym::Ord) = diagnostic_name {\n-                    derives.push((self_name.clone(), self_span.clone(), \"PartialOrd\".to_string()));\n-                }\n-                if let Some(sym::Eq) = diagnostic_name {\n-                    derives.push((self_name.clone(), self_span.clone(), \"PartialEq\".to_string()));\n+                    | sym::Debug => true,\n+                    _ => false,\n+                };\n+                if can_derive {\n+                    let self_name = trait_pred.self_ty().to_string();\n+                    let self_span = self.tcx.def_span(adt.did);\n+                    use crate::rustc_middle::ty::ToPolyTraitRef;\n+                    if let Some(poly_trait_ref) = pred.to_opt_poly_trait_pred() {\n+                        for super_trait in rustc_middle::traits::util::supertraits(\n+                            self.tcx,\n+                            poly_trait_ref.to_poly_trait_ref(),\n+                        ) {\n+                            if let Some(parent_diagnostic_name) =\n+                                self.tcx.get_diagnostic_name(super_trait.def_id())\n+                            {\n+                                derives.push((\n+                                    self_name.clone(),\n+                                    self_span.clone(),\n+                                    parent_diagnostic_name.to_string(),\n+                                ));\n+                            }\n+                        }\n+                    }\n+                    derives.push((self_name, self_span, diagnostic_name.to_string()));\n+                } else {\n+                    traits.push(self.tcx.def_span(trait_pred.def_id()));\n                 }\n-                derives.push((\n-                    self_name,\n-                    self_span,\n-                    trait_pred.trait_ref.print_only_trait_name().to_string(),\n-                ));\n             } else {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }"}, {"sha": "1875ea06a06d5adf1f83b98c059b94a4a8d46f43", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=ae212402d664a054a9e9a46b6e57f388ef2c2e74", "patch": "@@ -272,9 +272,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n@@ -290,9 +290,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n@@ -308,9 +308,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n@@ -326,9 +326,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error: aborting due to 15 previous errors"}, {"sha": "bf4b7c7da0d50b319271bd7f3dfb7f65c7e34ef0", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=ae212402d664a054a9e9a46b6e57f388ef2c2e74", "patch": "@@ -51,9 +51,9 @@ LL |     foo.use_ord();\n    |\n    = note: the following trait bounds were not satisfied:\n            `NoDerives: Ord`\n-help: consider annotating `NoDerives` with `#[derive(Ord, PartialOrd)]`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(Ord, PartialOrd)]\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n    |\n \n error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n@@ -74,9 +74,9 @@ LL |     foo.use_ord_and_partial_ord();\n    = note: the following trait bounds were not satisfied:\n            `NoDerives: Ord`\n            `NoDerives: PartialOrd`\n-help: consider annotating `NoDerives` with `#[derive(Ord, PartialOrd)]`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(Ord, PartialOrd)]\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=ae212402d664a054a9e9a46b6e57f388ef2c2e74", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae212402d664a054a9e9a46b6e57f388ef2c2e74/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=ae212402d664a054a9e9a46b6e57f388ef2c2e74", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}]}