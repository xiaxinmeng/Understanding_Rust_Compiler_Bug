{"sha": "f040208d533e1d6d9ee0e0408ee74e26e14d1284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDAyMDhkNTMzZTFkNmQ5ZWUwZTA0MDhlZTc0ZTI2ZTE0ZDEyODQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-08-17T16:01:41Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-08-29T15:34:02Z"}, "message": "Implement TryFrom<u32> for char\n\nFor symmetry with From<char> for u32.", "tree": {"sha": "5592063ace04a7f2016e6398094b66b7e4ad521b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5592063ace04a7f2016e6398094b66b7e4ad521b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f040208d533e1d6d9ee0e0408ee74e26e14d1284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f040208d533e1d6d9ee0e0408ee74e26e14d1284", "html_url": "https://github.com/rust-lang/rust/commit/f040208d533e1d6d9ee0e0408ee74e26e14d1284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f040208d533e1d6d9ee0e0408ee74e26e14d1284/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d0a89e3ad99a9fdf700ea7d15750fe1cbfab14", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d0a89e3ad99a9fdf700ea7d15750fe1cbfab14", "html_url": "https://github.com/rust-lang/rust/commit/41d0a89e3ad99a9fdf700ea7d15750fe1cbfab14"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "ad492c81bd38ac2d1e4eb8dcb7289c835bb4367d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=f040208d533e1d6d9ee0e0408ee74e26e14d1284", "patch": "@@ -16,6 +16,8 @@\n #![stable(feature = \"core_char\", since = \"1.2.0\")]\n \n use char_private::is_printable;\n+use convert::TryFrom;\n+use fmt;\n use iter::FusedIterator;\n use mem::transmute;\n \n@@ -122,12 +124,7 @@ pub const MAX: char = '\\u{10ffff}';\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_u32(i: u32) -> Option<char> {\n-    // catch out-of-bounds and surrogates\n-    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n-        None\n-    } else {\n-        Some(unsafe { from_u32_unchecked(i) })\n-    }\n+    char::try_from(i).ok()\n }\n \n /// Converts a `u32` to a `char`, ignoring validity.\n@@ -209,6 +206,32 @@ impl From<u8> for char {\n     }\n }\n \n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl TryFrom<u32> for char {\n+    type Err = CharTryFromError;\n+\n+    #[inline]\n+    fn try_from(i: u32) -> Result<Self, Self::Err> {\n+        if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+            Err(CharTryFromError(()))\n+        } else {\n+            Ok(unsafe { from_u32_unchecked(i) })\n+        }\n+    }\n+}\n+\n+/// The error type returned when a conversion from u32 to char fails.\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct CharTryFromError(());\n+\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl fmt::Display for CharTryFromError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        \"converted integer out of range for `char`\".fmt(f)\n+    }\n+}\n+\n /// Converts a digit in the given radix to a `char`.\n ///\n /// A 'radix' here is sometimes also called a 'base'. A radix of two"}, {"sha": "199437a431eeea6c298947f6640b00c3921d71a1", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=f040208d533e1d6d9ee0e0408ee74e26e14d1284", "patch": "@@ -9,13 +9,23 @@\n // except according to those terms.\n \n use std::char;\n+use std::convert::TryFrom;\n \n #[test]\n fn test_convert() {\n     assert_eq!(u32::from('a'), 0x61);\n     assert_eq!(char::from(b'\\0'), '\\0');\n     assert_eq!(char::from(b'a'), 'a');\n     assert_eq!(char::from(b'\\xFF'), '\\u{FF}');\n+    assert_eq!(char::try_from(0_u32), Ok('\\0'));\n+    assert_eq!(char::try_from(0x61_u32), Ok('a'));\n+    assert_eq!(char::try_from(0xD7FF_u32), Ok('\\u{D7FF}'));\n+    assert!(char::try_from(0xD800_u32).is_err());\n+    assert!(char::try_from(0xDFFF_u32).is_err());\n+    assert_eq!(char::try_from(0xE000_u32), Ok('\\u{E000}'));\n+    assert_eq!(char::try_from(0x10FFFF_u32), Ok('\\u{10FFFF}'));\n+    assert!(char::try_from(0x110000_u32).is_err());\n+    assert!(char::try_from(0xFFFF_FFFF_u32).is_err());\n }\n \n #[test]"}, {"sha": "5a0c27d9c609f4cc5b0b09e4081a0707669d0c21", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=f040208d533e1d6d9ee0e0408ee74e26e14d1284", "patch": "@@ -40,6 +40,8 @@ pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n pub use core::char::{EncodeUtf16, EncodeUtf8, EscapeDebug, EscapeDefault, EscapeUnicode};\n \n // unstable reexports\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n pub use core::char::{DecodeUtf8, decode_utf8};\n #[unstable(feature = \"unicode\", issue = \"27783\")]"}, {"sha": "65bd717e01a8232df3ff044f1d41ecafc37107f9", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=f040208d533e1d6d9ee0e0408ee74e26e14d1284", "patch": "@@ -38,6 +38,7 @@\n #![feature(fused)]\n #![feature(lang_items)]\n #![feature(staged_api)]\n+#![feature(try_from)]\n #![feature(unicode)]\n \n mod tables;"}, {"sha": "16290620010035f554d1f7985f0fb551b0b36de3", "filename": "src/libstd/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f040208d533e1d6d9ee0e0408ee74e26e14d1284", "patch": "@@ -302,6 +302,13 @@ impl<'a, T: ?Sized + Reflect> Error for cell::BorrowMutError<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl Error for char::CharTryFromError {\n+    fn description(&self) -> &str {\n+        \"converted integer out of range for `char`\"\n+    }\n+}\n+\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}]}