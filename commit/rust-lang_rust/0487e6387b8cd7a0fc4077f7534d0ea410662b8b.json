{"sha": "0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODdlNjM4N2I4Y2Q3YTBmYzQwNzdmNzUzNGQwZWE0MTA2NjJiOGI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-07-10T18:17:40Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-07-11T03:51:35Z"}, "message": "Bug fixes for stability tracking\n\nThis commit adds correct stability tracking for struct fields and\ncorrects some places where rustdoc was not pulling the stability data.", "tree": {"sha": "343a4eb3e8d75887444491f7f9df22b6332a75d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343a4eb3e8d75887444491f7f9df22b6332a75d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "html_url": "https://github.com/rust-lang/rust/commit/0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d16de01d0beb84dc4a351022ea5cb587b4ab557", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d16de01d0beb84dc4a351022ea5cb587b4ab557", "html_url": "https://github.com/rust-lang/rust/commit/4d16de01d0beb84dc4a351022ea5cb587b4ab557"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "425db5e4dc07b02cda6a4a0320eace2deae94d00", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "patch": "@@ -693,6 +693,10 @@ fn encode_info_for_struct(ecx: &EncodeContext,\n         encode_name(ebml_w, nm);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n         encode_def_id(ebml_w, local_def(id));\n+\n+        let stab = stability::lookup(ecx.tcx, field.id);\n+        encode_stability(ebml_w, stab);\n+\n         ebml_w.end_tag();\n     }\n     index"}, {"sha": "a3fa5a5f85ba4cd5237d3d43d37ebb49bffbd148", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "patch": "@@ -14,9 +14,10 @@\n use util::nodemap::{NodeMap, DefIdMap};\n use syntax::codemap::Span;\n use syntax::{attr, visit};\n+use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n use syntax::ast::{Item, Required, Provided, TraitMethod, TypeMethod, Method};\n-use syntax::ast::{Generics, StructDef, Ident};\n+use syntax::ast::{Generics, StructDef, StructField, Ident};\n use syntax::ast_util::is_local;\n use syntax::attr::Stability;\n use syntax::visit::{FnKind, FkMethod, Visitor};\n@@ -91,6 +92,11 @@ impl Visitor<Option<Stability>> for Annotator {\n         s.ctor_id.map(|id| self.annotate(id, &[], parent.clone()));\n         visit::walk_struct_def(self, s, parent)\n     }\n+\n+    fn visit_struct_field(&mut self, s: &StructField, parent: Option<Stability>) {\n+        let stab = self.annotate(s.node.id, s.node.attrs.as_slice(), parent);\n+        visit::walk_struct_field(self, s, stab)\n+    }\n }\n \n impl Index {\n@@ -102,8 +108,8 @@ impl Index {\n                 extern_cache: DefIdMap::new()\n             }\n         };\n-        visit::walk_crate(&mut annotator, krate,\n-                          attr::find_stability(krate.attrs.as_slice()));\n+        let stab = annotator.annotate(ast::CRATE_NODE_ID, krate.attrs.as_slice(), None);\n+        visit::walk_crate(&mut annotator, krate, stab);\n         annotator.index\n     }\n }"}, {"sha": "24f23761286f024f295809942c6d00321fa1e580", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487e6387b8cd7a0fc4077f7534d0ea410662b8b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0487e6387b8cd7a0fc4077f7534d0ea410662b8b", "patch": "@@ -1461,12 +1461,15 @@ impl Clean<Item> for ty::VariantInfo {\n                             name: Some(name.clean()),\n                             attrs: Vec::new(),\n                             visibility: Some(ast::Public),\n-                            stability: get_stability(self.id),\n                             // FIXME: this is not accurate, we need an id for\n                             //        the specific field but we're using the id\n-                            //        for the whole variant. Nothing currently\n-                            //        uses this so we should be good for now.\n+                            //        for the whole variant. Thus we read the\n+                            //        stability from the whole variant as well.\n+                            //        Struct variants are experimental and need\n+                            //        more infrastructure work before we can get\n+                            //        at the needed information here.\n                             def_id: self.id,\n+                            stability: get_stability(self.id),\n                             inner: StructFieldItem(\n                                 TypedStructField(ty.clean())\n                             )\n@@ -1482,7 +1485,7 @@ impl Clean<Item> for ty::VariantInfo {\n             visibility: Some(ast::Public),\n             def_id: self.id,\n             inner: VariantItem(Variant { kind: kind }),\n-            stability: None,\n+            stability: get_stability(self.id),\n         }\n     }\n }\n@@ -1890,7 +1893,7 @@ impl Clean<Item> for ast::ForeignItem {\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.vis.clean(),\n-            stability: None,\n+            stability: get_stability(ast_util::local_def(self.id)),\n             inner: inner,\n         }\n     }"}]}