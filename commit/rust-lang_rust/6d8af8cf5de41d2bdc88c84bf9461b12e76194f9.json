{"sha": "6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGFmOGNmNWRlNDFkMmJkYzg4Yzg0YmY5NDYxYjEyZTc2MTk0Zjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-14T17:29:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T17:29:48Z"}, "message": "Rollup merge of #35447 - frewsxcv:vec-into-iter-as-slice, r=alexcrichton\n\nIntroduce `as_slice`/`as_mut_slice` methods on `std::vec::IntoIter` struct.\n\nSimilar to the `as_slice` method on `core::slice::Iter` struct.", "tree": {"sha": "8d1d616e1b93d9143dd6b60e924691a5b274c6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1d616e1b93d9143dd6b60e924691a5b274c6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "html_url": "https://github.com/rust-lang/rust/commit/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e0f2d5e3422c57e94457228bf4943ddbd26ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e0f2d5e3422c57e94457228bf4943ddbd26ce4", "html_url": "https://github.com/rust-lang/rust/commit/41e0f2d5e3422c57e94457228bf4943ddbd26ce4"}, {"sha": "01a766e5210157546a2b6c673700b9959289eff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a766e5210157546a2b6c673700b9959289eff9", "html_url": "https://github.com/rust-lang/rust/commit/01a766e5210157546a2b6c673700b9959289eff9"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "a6f817a89624cfeb0c9e9cff55b3ed3c0f9227c9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "patch": "@@ -1446,13 +1446,12 @@ impl<T> IntoIterator for Vec<T> {\n     #[inline]\n     fn into_iter(mut self) -> IntoIter<T> {\n         unsafe {\n-            let ptr = self.as_mut_ptr();\n-            assume(!ptr.is_null());\n-            let begin = ptr as *const T;\n+            let begin = self.as_mut_ptr();\n+            assume(!begin.is_null());\n             let end = if mem::size_of::<T>() == 0 {\n-                arith_offset(ptr as *const i8, self.len() as isize) as *const T\n+                arith_offset(begin as *const i8, self.len() as isize) as *const T\n             } else {\n-                ptr.offset(self.len() as isize) as *const T\n+                begin.offset(self.len() as isize) as *const T\n             };\n             let buf = ptr::read(&self.buf);\n             mem::forget(self);\n@@ -1710,10 +1709,52 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     _buf: RawVec<T>,\n-    ptr: *const T,\n+    ptr: *mut T,\n     end: *const T,\n }\n \n+impl<T> IntoIter<T> {\n+    /// Returns the remaining items of this iterator as a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(vec_into_iter_as_slice)]\n+    /// let vec = vec!['a', 'b', 'c'];\n+    /// let mut into_iter = vec.into_iter();\n+    /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    /// let _ = into_iter.next().unwrap();\n+    /// assert_eq!(into_iter.as_slice(), &['b', 'c']);\n+    /// ```\n+    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        unsafe {\n+            slice::from_raw_parts(self.ptr, self.len())\n+        }\n+    }\n+\n+    /// Returns the remaining items of this iterator as a mutable slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(vec_into_iter_as_slice)]\n+    /// let vec = vec!['a', 'b', 'c'];\n+    /// let mut into_iter = vec.into_iter();\n+    /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    /// into_iter.as_mut_slice()[2] = 'z';\n+    /// assert_eq!(into_iter.next().unwrap(), 'a');\n+    /// assert_eq!(into_iter.next().unwrap(), 'b');\n+    /// assert_eq!(into_iter.next().unwrap(), 'z');\n+    /// ```\n+    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    pub fn as_mut_slice(&self) -> &mut [T] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self.ptr, self.len())\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for IntoIter<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1726,14 +1767,14 @@ impl<T> Iterator for IntoIter<T> {\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         unsafe {\n-            if self.ptr == self.end {\n+            if self.ptr as *const _ == self.end {\n                 None\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // purposefully don't use 'ptr.offset' because for\n                     // vectors with 0-size elements this would return the\n                     // same pointer.\n-                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *const T;\n+                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))\n@@ -1776,7 +1817,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // See above for why 'ptr.offset' isn't used\n-                    self.end = arith_offset(self.end as *const i8, -1) as *const T;\n+                    self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))\n@@ -1796,9 +1837,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone> Clone for IntoIter<T> {\n     fn clone(&self) -> IntoIter<T> {\n-        unsafe {\n-            slice::from_raw_parts(self.ptr, self.len()).to_owned().into_iter()\n-        }\n+        self.as_slice().to_owned().into_iter()\n     }\n }\n "}, {"sha": "ab3231b2b9955e693540cd5f111a5961b934c632", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "patch": "@@ -28,6 +28,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(vec_deque_contains)]\n+#![feature(vec_into_iter_as_slice)]\n \n extern crate collections;\n extern crate test;"}, {"sha": "9556174bd2294dadef86b45edaa6d220d87f2be9", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8af8cf5de41d2bdc88c84bf9461b12e76194f9/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=6d8af8cf5de41d2bdc88c84bf9461b12e76194f9", "patch": "@@ -478,6 +478,29 @@ fn test_split_off() {\n     assert_eq!(vec2, [5, 6]);\n }\n \n+#[test]\n+fn test_into_iter_as_slice() {\n+    let vec = vec!['a', 'b', 'c'];\n+    let mut into_iter = vec.into_iter();\n+    assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    let _ = into_iter.next().unwrap();\n+    assert_eq!(into_iter.as_slice(), &['b', 'c']);\n+    let _ = into_iter.next().unwrap();\n+    let _ = into_iter.next().unwrap();\n+    assert_eq!(into_iter.as_slice(), &[]);\n+}\n+\n+#[test]\n+fn test_into_iter_as_mut_slice() {\n+    let vec = vec!['a', 'b', 'c'];\n+    let mut into_iter = vec.into_iter();\n+    assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    into_iter.as_mut_slice()[0] = 'x';\n+    into_iter.as_mut_slice()[1] = 'y';\n+    assert_eq!(into_iter.next().unwrap(), 'x');\n+    assert_eq!(into_iter.as_slice(), &['y', 'c']);\n+}\n+\n #[test]\n fn test_into_iter_count() {\n     assert_eq!(vec![1, 2, 3].into_iter().count(), 3);"}]}