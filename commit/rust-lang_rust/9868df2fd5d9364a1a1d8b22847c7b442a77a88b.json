{"sha": "9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjhkZjJmZDVkOTM2NGExYTFkOGIyMjg0N2M3YjQ0MmE3N2E4OGI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-16T12:56:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T12:16:20Z"}, "message": "Non-parametric dropck; instead trust an unsafe attribute (RFC 1238).\n\nImplement cannot-assume-parametricity (CAP) from RFC 1238, and add the\nUGEH attribute.\n\n----\n\nNote that we check for the attribute attached to the dtor method, not\nthe Drop impl.\n\n(This is just to match the specification of RFC and the tests; I am\nnot wedded to this approach.)", "tree": {"sha": "67ad36060ecf2da46c67c3d515c660363264ed8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67ad36060ecf2da46c67c3d515c660363264ed8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "html_url": "https://github.com/rust-lang/rust/commit/9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d", "html_url": "https://github.com/rust-lang/rust/commit/c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d"}], "stats": {"total": 112, "additions": 87, "deletions": 25}, "files": [{"sha": "5be180007f99be2b3c48b78afdb9b3bb218a6d17", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "patch": "@@ -2022,6 +2022,20 @@ macro scope.\n - `simd` - on certain tuple structs, derive the arithmetic operators, which\n   lower to the target's SIMD instructions, if any; the `simd` feature gate\n   is necessary to use this attribute.\n+- `unsafe_destructor_blind_to_params` - on `Drop::drop` method, asserts that the\n+  destructor code (and all potential specializations of that code) will\n+  never attempt to read from nor write to any references with lifetimes\n+  that come in via generic parameters. This is a constraint we cannot\n+  currently express via the type system, and therefore we rely on the\n+  programmer to assert that it holds. Adding this to a Drop impl causes\n+  the associated destructor to be considered \"uninteresting\" by the\n+  Drop-Check rule, and thus it can help sidestep data ordering\n+  constraints that would otherwise be introduced by the Drop-Check\n+  rule. Such sidestepping of the constraints, if done incorrectly, can\n+  lead to undefined behavior (in the form of reading or writing to data\n+  outside of its dynamic extent), and thus this attribute has the word\n+  \"unsafe\" in its name. To use this, the\n+  `unsafe_destructor_blind_to_params` feature gate must be enabled.\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute. To use this, the `unsafe_no_drop_flag` feature"}, {"sha": "43757df3d3da256d6fede771f3cd9593f281862c", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "patch": "@@ -578,6 +578,16 @@ impl<'tcx> ty::ctxt<'tcx> {\n         });\n         let generics = adt.type_scheme(self).generics;\n \n+        // RFC 1238: if the destructor method is tagged with the\n+        // attribute `unsafe_destructor_blind_to_params`, then the\n+        // compiler is being instructed to *assume* that the\n+        // destructor will not access borrowed data via a type\n+        // parameter, even if such data is otherwise reachable.\n+        if self.has_attr(dtor_method, \"unsafe_destructor_blind_to_params\") {\n+            debug!(\"typ: {:?} assumed blind and thus is dtorck-safe\", adt);\n+            return false;\n+        }\n+\n         // In `impl<'a> Drop ...`, we automatically assume\n         // `'a` is meaningful and thus represents a bound\n         // through which we could reach borrowed data.\n@@ -592,6 +602,14 @@ impl<'tcx> ty::ctxt<'tcx> {\n             return true;\n         }\n \n+        // RFC 1238: *any* type parameter at all makes this a dtor of\n+        // interest (i.e. cannot-assume-parametricity from RFC 1238.)\n+        if generics.has_type_params(subst::TypeSpace) {\n+            debug!(\"typ: {:?} has interesting dtor due to type params\",\n+                   adt);\n+            return true;\n+        }\n+\n         let mut seen_items = Vec::new();\n         let mut items_to_inspect = vec![impl_did];\n         while let Some(item_def_id) = items_to_inspect.pop() {"}, {"sha": "941fa5f991080f8ae88e49e6f50430feac8b558b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "patch": "@@ -217,26 +217,52 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n ///\n /// ----\n ///\n-/// The Drop Check Rule is the following:\n+/// The simplified (*) Drop Check Rule is the following:\n ///\n /// Let `v` be some value (either temporary or named) and 'a be some\n /// lifetime (scope). If the type of `v` owns data of type `D`, where\n ///\n-/// * (1.) `D` has a lifetime- or type-parametric Drop implementation, and\n-/// * (2.) the structure of `D` can reach a reference of type `&'a _`, and\n-/// * (3.) either:\n-///   * (A.) the Drop impl for `D` instantiates `D` at 'a directly,\n-///          i.e. `D<'a>`, or,\n-///   * (B.) the Drop impl for `D` has some type parameter with a\n-///          trait bound `T` where `T` is a trait that has at least\n-///          one method,\n+/// * (1.) `D` has a lifetime- or type-parametric Drop implementation,\n+///        (where that `Drop` implementation does not opt-out of\n+///         this check via the `unsafe_destructor_blind_to_params`\n+///         attribute), and\n+/// * (2.) the structure of `D` can reach a reference of type `&'a _`,\n ///\n /// then 'a must strictly outlive the scope of v.\n ///\n /// ----\n ///\n /// This function is meant to by applied to the type for every\n /// expression in the program.\n+///\n+/// ----\n+///\n+/// (*) The qualifier \"simplified\" is attached to the above\n+/// definition of the Drop Check Rule, because it is a simplification\n+/// of the original Drop Check rule, which attempted to prove that\n+/// some `Drop` implementations could not possibly access data even if\n+/// it was technically reachable, due to parametricity.\n+///\n+/// However, (1.) parametricity on its own turned out to be a\n+/// necessary but insufficient condition, and (2.)  future changes to\n+/// the language are expected to make it impossible to ensure that a\n+/// `Drop` implementation is actually parametric with respect to any\n+/// particular type parameter. (In particular, impl specialization is\n+/// expected to break the needed parametricity property beyond\n+/// repair.)\n+///\n+/// Therefore we have scaled back Drop-Check to a more conservative\n+/// rule that does not attempt to deduce whether a `Drop`\n+/// implementation could not possible access data of a given lifetime;\n+/// instead Drop-Check now simply assumes that if a destructor has\n+/// access (direct or indirect) to a lifetime parameter, then that\n+/// lifetime must be forced to outlive that destructor's dynamic\n+/// extent. We then provide the `unsafe_destructor_blind_to_params`\n+/// attribute as a way for destructor implementations to opt-out of\n+/// this conservative assumption (and thus assume the obligation of\n+/// ensuring that they do not access data nor invoke methods of\n+/// values that have been previously dropped).\n+///\n pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n                                                          typ: ty::Ty<'tcx>,\n                                                          span: Span,\n@@ -356,30 +382,25 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n     // borrowed data reachable via `typ` must outlive the parent\n     // of `scope`. This is handled below.\n     //\n-    // However, there is an important special case: by\n-    // parametricity, any generic type parameters have *no* trait\n-    // bounds in the Drop impl can not be used in any way (apart\n-    // from being dropped), and thus we can treat data borrowed\n-    // via such type parameters remains unreachable.\n+    // However, there is an important special case: for any Drop\n+    // impl that is tagged as \"blind\" to their parameters,\n+    // we assume that data borrowed via such type parameters\n+    // remains unreachable via that Drop impl.\n+    //\n+    // For example, consider:\n+    //\n+    // ```rust\n+    // #[unsafe_destructor_blind_to_params]\n+    // impl<T> Drop for Vec<T> { ... }\n+    // ```\n     //\n-    // For example, consider `impl<T> Drop for Vec<T> { ... }`,\n     // which does have to be able to drop instances of `T`, but\n     // otherwise cannot read data from `T`.\n     //\n     // Of course, for the type expression passed in for any such\n     // unbounded type parameter `T`, we must resume the recursive\n     // analysis on `T` (since it would be ignored by\n     // type_must_outlive).\n-    //\n-    // FIXME (pnkfelix): Long term, we could be smart and actually\n-    // feed which generic parameters can be ignored *into* `fn\n-    // type_must_outlive` (or some generalization thereof). But\n-    // for the short term, it probably covers most cases of\n-    // interest to just special case Drop impls where: (1.) there\n-    // are no generic lifetime parameters and (2.)  *all* generic\n-    // type parameters are unbounded.  If both conditions hold, we\n-    // simply skip the `type_must_outlive` call entirely (but\n-    // resume the recursive checking of the type-substructure).\n     if has_dtor_of_interest(tcx, ty) {\n         debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n                 {}ty: {} - is a dtorck type!\","}, {"sha": "e364716bdf290bffa9b44fe1965e1f49e3c846b3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9868df2fd5d9364a1a1d8b22847c7b442a77a88b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "patch": "@@ -136,6 +136,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     // switch to Accepted; see RFC 320)\n     (\"unsafe_no_drop_flag\", \"1.0.0\", None, Active),\n \n+    // Allows using the unsafe_destructor_blind_to_params attribute\n+    // (Needs an RFC link)\n+    (\"unsafe_destructor_blind_to_params\", \"1.3.0\", Some(28498), Active),\n+\n     // Allows the use of custom attributes; RFC 572\n     (\"custom_attribute\", \"1.0.0\", None, Active),\n \n@@ -339,6 +343,11 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"unsafe_no_drop_flag\", Whitelisted, Gated(\"unsafe_no_drop_flag\",\n                                                \"unsafe_no_drop_flag has unstable semantics \\\n                                                 and may be removed in the future\")),\n+    (\"unsafe_destructor_blind_to_params\",\n+     Normal,\n+     Gated(\"unsafe_destructor_blind_to_params\",\n+           \"unsafe_destructor_blind_to_params has unstable semantics \\\n+            and may be removed in the future\")),\n     (\"unwind\", Whitelisted, Gated(\"unwind_attributes\", \"#[unwind] is experimental\")),\n \n     // used in resolve"}]}