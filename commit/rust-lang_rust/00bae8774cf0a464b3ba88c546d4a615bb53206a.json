{"sha": "00bae8774cf0a464b3ba88c546d4a615bb53206a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYmFlODc3NGNmMGE0NjRiM2JhODhjNTQ2ZDRhNjE1YmI1MzIwNmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-12T21:23:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-14T08:47:32Z"}, "message": "note some safety concerns of raw-ptr-to-ref casts", "tree": {"sha": "3f14608e803db9dfe8d67ca2b772e47ffe77a3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f14608e803db9dfe8d67ca2b772e47ffe77a3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00bae8774cf0a464b3ba88c546d4a615bb53206a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00bae8774cf0a464b3ba88c546d4a615bb53206a", "html_url": "https://github.com/rust-lang/rust/commit/00bae8774cf0a464b3ba88c546d4a615bb53206a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00bae8774cf0a464b3ba88c546d4a615bb53206a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55cee44671ecb0869cc7fbac0ad62f6236893d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/55cee44671ecb0869cc7fbac0ad62f6236893d06", "html_url": "https://github.com/rust-lang/rust/commit/55cee44671ecb0869cc7fbac0ad62f6236893d06"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "8f026a5b7d8dd0906ea19285c101e91a33333c0f", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/00bae8774cf0a464b3ba88c546d4a615bb53206a/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bae8774cf0a464b3ba88c546d4a615bb53206a/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=00bae8774cf0a464b3ba88c546d4a615bb53206a", "patch": "@@ -984,8 +984,17 @@ impl<T: ?Sized> *const T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data.\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n     ///\n     /// # Examples\n     ///\n@@ -1610,8 +1619,17 @@ impl<T: ?Sized> *mut T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data.\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n     ///\n     /// # Examples\n     ///\n@@ -1755,10 +1773,24 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// As with `as_ref`, this is unsafe because it cannot verify the validity\n+    /// As with [`as_ref`], this is unsafe because it cannot verify the validity\n     /// of the returned pointer, nor can it ensure that the lifetime `'a`\n     /// returned is indeed a valid lifetime for the contained data.\n     ///\n+    /// When calling this method, you have to ensure that if the pointer is\n+    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// size of `T`) and points to an initialized instance of `T`. This applies\n+    /// even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n+    /// not necessarily reflect the actual lifetime of the data. It is up to the\n+    /// caller to ensure that for the duration of this lifetime, the memory this\n+    /// pointer points to does not get accessed through any other pointer.\n+    ///\n+    /// [`as_ref`]: #method.as_ref\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}]}