{"sha": "d77e34f35ba276b514459b1669818605c9fbf416", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3N2UzNGYzNWJhMjc2YjUxNDQ1OWIxNjY5ODE4NjA1YzlmYmY0MTY=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-07T22:39:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Generalized memset and memcpy", "tree": {"sha": "f4a1b08094b7dd4f1720ccf99ce3265c2e4fb474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a1b08094b7dd4f1720ccf99ce3265c2e4fb474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77e34f35ba276b514459b1669818605c9fbf416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77e34f35ba276b514459b1669818605c9fbf416", "html_url": "https://github.com/rust-lang/rust/commit/d77e34f35ba276b514459b1669818605c9fbf416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77e34f35ba276b514459b1669818605c9fbf416/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "html_url": "https://github.com/rust-lang/rust/commit/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb"}], "stats": {"total": 812, "additions": 444, "deletions": 368}, "files": [{"sha": "c990b76eb493892c56683246ae4a7b99f59d5c50", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -18,7 +18,7 @@ use type_::Type;\n use type_of::{LayoutLlvmExt, PointerKind};\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods};\n \n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TyLayout, Abi as LayoutAbi};\n use rustc::ty::{self, Ty};"}, {"sha": "1174003266493244a94302f6f60ea43de11a810d", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -15,7 +15,7 @@ use builder::Builder;\n use value::Value;\n \n use rustc::hir;\n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods};\n \n use mir::place::PlaceRef;\n use mir::operand::OperandValue;"}, {"sha": "1578a63efbfda6bcf35360c51fd4350e509e1d53", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -73,7 +73,9 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{\n+    BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, DerivedIntrinsicMethods,\n+};\n \n use std::any::Any;\n use std::cmp;\n@@ -431,13 +433,13 @@ pub fn to_immediate_scalar<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n     val\n }\n \n-pub fn call_memcpy(\n-    bx: &Builder<'_, 'll, '_>,\n-    dst: &'ll Value,\n+pub fn call_memcpy<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    dst: Builder::Value,\n     dst_align: Align,\n-    src: &'ll Value,\n+    src: Builder::Value,\n     src_align: Align,\n-    n_bytes: &'ll Value,\n+    n_bytes: Builder::Value,\n     flags: MemFlags,\n ) {\n     if flags.contains(MemFlags::NONTEMPORAL) {\n@@ -450,16 +452,16 @@ pub fn call_memcpy(\n     let cx = bx.cx();\n     let src_ptr = bx.pointercast(src, cx.type_i8p());\n     let dst_ptr = bx.pointercast(dst, cx.type_i8p());\n-    let size = bx.intcast(n_bytes, cx.isize_ty, false);\n+    let size = bx.intcast(n_bytes, cx.type_isize(), false);\n     let volatile = flags.contains(MemFlags::VOLATILE);\n     bx.memcpy(dst_ptr, dst_align.abi(), src_ptr, src_align.abi(), size, volatile);\n }\n \n-pub fn memcpy_ty(\n-    bx: &Builder<'_, 'll, '_>,\n-    dst: &'ll Value,\n+pub fn memcpy_ty<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    dst: Builder::Value,\n     dst_align: Align,\n-    src: &'ll Value,\n+    src: Builder::Value,\n     src_align: Align,\n     layout: TyLayout<'tcx>,\n     flags: MemFlags,\n@@ -472,15 +474,15 @@ pub fn memcpy_ty(\n     call_memcpy(bx, dst, dst_align, src, src_align, bx.cx().const_usize(size), flags);\n }\n \n-pub fn call_memset(\n-    bx: &Builder<'_, 'll, '_>,\n-    ptr: &'ll Value,\n-    fill_byte: &'ll Value,\n-    size: &'ll Value,\n-    align: &'ll Value,\n+pub fn call_memset<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    ptr: Builder::Value,\n+    fill_byte: Builder::Value,\n+    size: Builder::Value,\n+    align: Builder::Value,\n     volatile: bool,\n-) -> &'ll Value {\n-    let ptr_width = &bx.cx().sess().target.target.target_pointer_width;\n+) -> Builder::Value {\n+    let ptr_width = &bx.sess().target.target.target_pointer_width;\n     let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n     let llintrinsicfn = bx.cx().get_intrinsic(&intrinsic_key);\n     let volatile = bx.cx().const_bool(volatile);"}, {"sha": "3b71502d7c40720cd32910d94f34724a4538c2fa", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -19,7 +19,10 @@ use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::{config, Session};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use interfaces::{BuilderMethods, Backend, ConstMethods, TypeMethods};\n+use interfaces::{\n+    Backend,\n+    BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, DerivedIntrinsicMethods,\n+};\n use syntax;\n \n use std::borrow::Cow;"}, {"sha": "1162573a3f641298cde736562614927e5c3b1b73", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -22,7 +22,7 @@ use llvm;\n use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::TypeMethods;\n+use interfaces::BaseTypeMethods;\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};"}, {"sha": "fde834a2481ad8230caa0585168ce79d6594e3a4", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -23,7 +23,7 @@ use declare;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n-use interfaces::{Backend, ConstMethods, TypeMethods};\n+use interfaces::{Backend, ConstMethods, BaseTypeMethods};\n \n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};"}, {"sha": "d36b790761c4d7cd07213236011c87e1f3f19a19", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -24,7 +24,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n use rustc::ty::{self, Ty};\n-use interfaces::TypeMethods;\n+use interfaces::{BaseTypeMethods, DerivedTypeMethods};\n \n use rustc::ty::layout::{Align, LayoutOf};\n "}, {"sha": "fb0175465b7010010cc6fc56094fc266af7340c8", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 322, "deletions": 316, "changes": 638, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -23,7 +23,8 @@ use value::Value;\n use monomorphize::partitioning::CodegenUnit;\n use type_::Type;\n use type_of::PointeeInfo;\n-use interfaces::TypeMethods;\n+use interfaces::{BaseTypeMethods, DerivedTypeMethods,\n+    IntrinsicMethods, BaseIntrinsicMethods, DerivedIntrinsicMethods};\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -320,16 +321,334 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n     pub fn sess<'a>(&'a self) -> &'a Session {\n         &self.tcx.sess\n     }\n+}\n+\n+impl BaseIntrinsicMethods for CodegenCx<'_, '_> {}\n \n-    pub fn get_intrinsic(&self, key: &str) -> &'b Value {\n+impl DerivedIntrinsicMethods for CodegenCx<'b, 'tcx> {\n+    fn get_intrinsic(&self, key: &str) -> &'b Value {\n         if let Some(v) = self.intrinsics.borrow().get(key).cloned() {\n             return v;\n         }\n \n-        declare_intrinsic(self, key).unwrap_or_else(|| bug!(\"unknown intrinsic '{}'\", key))\n+        self.declare_intrinsic(key).unwrap_or_else(|| bug!(\"unknown intrinsic '{}'\", key))\n+    }\n+\n+    /// Declare any llvm intrinsics that you might need\n+    fn declare_intrinsic(\n+        &self,\n+        key: &str\n+    ) -> Option<&'b Value> {\n+        macro_rules! ifn {\n+            ($name:expr, fn() -> $ret:expr) => (\n+                if key == $name {\n+                    let f = declare::declare_cfn(&self, $name, &self.type_func(&[], $ret));\n+                    llvm::SetUnnamedAddr(f, false);\n+                    &self.intrinsics.borrow_mut().insert($name, f.clone());\n+                    return Some(f);\n+                }\n+            );\n+            ($name:expr, fn(...) -> $ret:expr) => (\n+                if key == $name {\n+                    let f = declare::declare_cfn(&self, $name, &self.type_variadic_func(&[], $ret));\n+                    llvm::SetUnnamedAddr(f, false);\n+                    &self.intrinsics.borrow_mut().insert($name, f.clone());\n+                    return Some(f);\n+                }\n+            );\n+            ($name:expr, fn($($arg:expr),*) -> $ret:expr) => (\n+                if key == $name {\n+                    let f = declare::declare_cfn(&self, $name, &self.type_func(&[$($arg),*], $ret));\n+                    llvm::SetUnnamedAddr(f, false);\n+                    &self.intrinsics.borrow_mut().insert($name, f.clone());\n+                    return Some(f);\n+                }\n+            );\n+        }\n+        macro_rules! mk_struct {\n+            ($($field_ty:expr),*) => (&self.type_struct( &[$($field_ty),*], false))\n+        }\n+\n+        let i8p = &self.type_i8p();\n+        let void = &self.type_void();\n+        let i1 = &self.type_i1();\n+        let t_i8 = &self.type_i8();\n+        let t_i16 = &self.type_i16();\n+        let t_i32 = &self.type_i32();\n+        let t_i64 = &self.type_i64();\n+        let t_i128 = &self.type_i128();\n+        let t_f32 = &self.type_f32();\n+        let t_f64 = &self.type_f64();\n+\n+        let t_v2f32 = &self.type_vector(t_f32, 2);\n+        let t_v4f32 = &self.type_vector(t_f32, 4);\n+        let t_v8f32 = &self.type_vector(t_f32, 8);\n+        let t_v16f32 = &self.type_vector(t_f32, 16);\n+\n+        let t_v2f64 = &self.type_vector(t_f64, 2);\n+        let t_v4f64 = &self.type_vector(t_f64, 4);\n+        let t_v8f64 = &self.type_vector(t_f64, 8);\n+\n+        ifn!(\"llvm.memset.p0i8.i16\", fn(i8p, t_i8, t_i16, t_i32, i1) -> void);\n+        ifn!(\"llvm.memset.p0i8.i32\", fn(i8p, t_i8, t_i32, t_i32, i1) -> void);\n+        ifn!(\"llvm.memset.p0i8.i64\", fn(i8p, t_i8, t_i64, t_i32, i1) -> void);\n+\n+        ifn!(\"llvm.trap\", fn() -> void);\n+        ifn!(\"llvm.debugtrap\", fn() -> void);\n+        ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);\n+\n+        ifn!(\"llvm.powi.f32\", fn(t_f32, t_i32) -> t_f32);\n+        ifn!(\"llvm.powi.v2f32\", fn(t_v2f32, t_i32) -> t_v2f32);\n+        ifn!(\"llvm.powi.v4f32\", fn(t_v4f32, t_i32) -> t_v4f32);\n+        ifn!(\"llvm.powi.v8f32\", fn(t_v8f32, t_i32) -> t_v8f32);\n+        ifn!(\"llvm.powi.v16f32\", fn(t_v16f32, t_i32) -> t_v16f32);\n+        ifn!(\"llvm.powi.f64\", fn(t_f64, t_i32) -> t_f64);\n+        ifn!(\"llvm.powi.v2f64\", fn(t_v2f64, t_i32) -> t_v2f64);\n+        ifn!(\"llvm.powi.v4f64\", fn(t_v4f64, t_i32) -> t_v4f64);\n+        ifn!(\"llvm.powi.v8f64\", fn(t_v8f64, t_i32) -> t_v8f64);\n+\n+        ifn!(\"llvm.pow.f32\", fn(t_f32, t_f32) -> t_f32);\n+        ifn!(\"llvm.pow.v2f32\", fn(t_v2f32, t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.pow.v4f32\", fn(t_v4f32, t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.pow.v8f32\", fn(t_v8f32, t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.pow.v16f32\", fn(t_v16f32, t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.pow.f64\", fn(t_f64, t_f64) -> t_f64);\n+        ifn!(\"llvm.pow.v2f64\", fn(t_v2f64, t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.pow.v4f64\", fn(t_v4f64, t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.pow.v8f64\", fn(t_v8f64, t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.sqrt.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.sqrt.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.sqrt.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.sqrt.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.sqrt.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.sqrt.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.sqrt.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.sqrt.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.sqrt.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.sin.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.sin.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.sin.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.sin.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.sin.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.sin.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.sin.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.sin.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.sin.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.cos.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.cos.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.cos.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.cos.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.cos.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.cos.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.cos.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.cos.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.cos.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.exp.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.exp.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.exp.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.exp.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.exp.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.exp.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.exp.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.exp.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.exp.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.exp2.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.exp2.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.exp2.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.exp2.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.exp2.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.exp2.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.exp2.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.exp2.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.exp2.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.log.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.log.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.log.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.log.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.log.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.log.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.log.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.log.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.log.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.log10.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.log10.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.log10.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.log10.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.log10.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.log10.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.log10.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.log10.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.log10.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.log2.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.log2.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.log2.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.log2.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.log2.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.log2.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.log2.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.log2.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.log2.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.fma.f32\", fn(t_f32, t_f32, t_f32) -> t_f32);\n+        ifn!(\"llvm.fma.v2f32\", fn(t_v2f32, t_v2f32, t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.fma.v4f32\", fn(t_v4f32, t_v4f32, t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.fma.v8f32\", fn(t_v8f32, t_v8f32, t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.fma.v16f32\", fn(t_v16f32, t_v16f32, t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.fma.f64\", fn(t_f64, t_f64, t_f64) -> t_f64);\n+        ifn!(\"llvm.fma.v2f64\", fn(t_v2f64, t_v2f64, t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.fma.v4f64\", fn(t_v4f64, t_v4f64, t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.fma.v8f64\", fn(t_v8f64, t_v8f64, t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.fabs.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.fabs.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.fabs.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.fabs.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.fabs.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.fabs.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.fabs.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.fabs.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.fabs.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.floor.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.floor.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.floor.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.floor.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.floor.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.floor.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.floor.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.floor.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.floor.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.ceil.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.ceil.v2f32\", fn(t_v2f32) -> t_v2f32);\n+        ifn!(\"llvm.ceil.v4f32\", fn(t_v4f32) -> t_v4f32);\n+        ifn!(\"llvm.ceil.v8f32\", fn(t_v8f32) -> t_v8f32);\n+        ifn!(\"llvm.ceil.v16f32\", fn(t_v16f32) -> t_v16f32);\n+        ifn!(\"llvm.ceil.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.ceil.v2f64\", fn(t_v2f64) -> t_v2f64);\n+        ifn!(\"llvm.ceil.v4f64\", fn(t_v4f64) -> t_v4f64);\n+        ifn!(\"llvm.ceil.v8f64\", fn(t_v8f64) -> t_v8f64);\n+\n+        ifn!(\"llvm.trunc.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.trunc.f64\", fn(t_f64) -> t_f64);\n+\n+        ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n+        ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n+        ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n+\n+        ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n+        ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.nearbyint.f64\", fn(t_f64) -> t_f64);\n+\n+        ifn!(\"llvm.ctpop.i8\", fn(t_i8) -> t_i8);\n+        ifn!(\"llvm.ctpop.i16\", fn(t_i16) -> t_i16);\n+        ifn!(\"llvm.ctpop.i32\", fn(t_i32) -> t_i32);\n+        ifn!(\"llvm.ctpop.i64\", fn(t_i64) -> t_i64);\n+        ifn!(\"llvm.ctpop.i128\", fn(t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.ctlz.i8\", fn(t_i8 , i1) -> t_i8);\n+        ifn!(\"llvm.ctlz.i16\", fn(t_i16, i1) -> t_i16);\n+        ifn!(\"llvm.ctlz.i32\", fn(t_i32, i1) -> t_i32);\n+        ifn!(\"llvm.ctlz.i64\", fn(t_i64, i1) -> t_i64);\n+        ifn!(\"llvm.ctlz.i128\", fn(t_i128, i1) -> t_i128);\n+\n+        ifn!(\"llvm.cttz.i8\", fn(t_i8 , i1) -> t_i8);\n+        ifn!(\"llvm.cttz.i16\", fn(t_i16, i1) -> t_i16);\n+        ifn!(\"llvm.cttz.i32\", fn(t_i32, i1) -> t_i32);\n+        ifn!(\"llvm.cttz.i64\", fn(t_i64, i1) -> t_i64);\n+        ifn!(\"llvm.cttz.i128\", fn(t_i128, i1) -> t_i128);\n+\n+        ifn!(\"llvm.bswap.i16\", fn(t_i16) -> t_i16);\n+        ifn!(\"llvm.bswap.i32\", fn(t_i32) -> t_i32);\n+        ifn!(\"llvm.bswap.i64\", fn(t_i64) -> t_i64);\n+        ifn!(\"llvm.bswap.i128\", fn(t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.bitreverse.i8\", fn(t_i8) -> t_i8);\n+        ifn!(\"llvm.bitreverse.i16\", fn(t_i16) -> t_i16);\n+        ifn!(\"llvm.bitreverse.i32\", fn(t_i32) -> t_i32);\n+        ifn!(\"llvm.bitreverse.i64\", fn(t_i64) -> t_i64);\n+        ifn!(\"llvm.bitreverse.i128\", fn(t_i128) -> t_i128);\n+\n+    ifn!(\"llvm.fshl.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n+    ifn!(\"llvm.fshl.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n+    ifn!(\"llvm.fshl.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n+    ifn!(\"llvm.fshl.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n+    ifn!(\"llvm.fshl.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n+\n+    ifn!(\"llvm.fshr.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n+    ifn!(\"llvm.fshr.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n+    ifn!(\"llvm.fshr.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n+    ifn!(\"llvm.fshr.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n+    ifn!(\"llvm.fshr.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.sadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.sadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.sadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.sadd.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.sadd.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.uadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.uadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.uadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.uadd.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.uadd.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.ssub.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.ssub.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.ssub.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.ssub.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.ssub.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.usub.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.usub.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.usub.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.usub.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.usub.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.smul.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.smul.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.smul.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.smul.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.smul.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.umul.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n+        ifn!(\"llvm.umul.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n+        ifn!(\"llvm.umul.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n+        ifn!(\"llvm.umul.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n+        ifn!(\"llvm.umul.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n+\n+        ifn!(\"llvm.lifetime.start\", fn(t_i64,i8p) -> void);\n+        ifn!(\"llvm.lifetime.end\", fn(t_i64, i8p) -> void);\n+\n+        ifn!(\"llvm.expect.i1\", fn(i1, i1) -> i1);\n+        ifn!(\"llvm.eh.typeid.for\", fn(i8p) -> t_i32);\n+        ifn!(\"llvm.localescape\", fn(...) -> void);\n+        ifn!(\"llvm.localrecover\", fn(i8p, i8p, t_i32) -> i8p);\n+        ifn!(\"llvm.x86.seh.recoverfp\", fn(i8p, i8p) -> i8p);\n+\n+        ifn!(\"llvm.assume\", fn(i1) -> void);\n+        ifn!(\"llvm.prefetch\", fn(i8p, t_i32, t_i32, t_i32) -> void);\n+\n+        if self.sess().opts.debuginfo != DebugInfo::None {\n+            ifn!(\"llvm.dbg.declare\", fn(&self.type_metadata(), &self.type_metadata()) -> void);\n+            ifn!(\"llvm.dbg.value\", fn(&self.type_metadata(), t_i64, &self.type_metadata()) -> void);\n+        }\n+        return None;\n     }\n }\n \n+impl IntrinsicMethods for CodegenCx<'a, 'tcx> {}\n+\n impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n     /// Generate a new symbol name with the given prefix. This symbol name must\n     /// only be used for definitions with `internal` or `private` linkage.\n@@ -479,316 +798,3 @@ impl LayoutOf for CodegenCx<'ll, 'tcx> {\n             })\n     }\n }\n-\n-/// Declare any llvm intrinsics that you might need\n-fn declare_intrinsic(\n-    cx: &CodegenCx<'ll, '_>,\n-    key: &str\n-) -> Option<&'ll Value> {\n-    macro_rules! ifn {\n-        ($name:expr, fn() -> $ret:expr) => (\n-            if key == $name {\n-                let f = declare::declare_cfn(cx, $name, cx.type_func(&[], $ret));\n-                llvm::SetUnnamedAddr(f, false);\n-                cx.intrinsics.borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n-        );\n-        ($name:expr, fn(...) -> $ret:expr) => (\n-            if key == $name {\n-                let f = declare::declare_cfn(cx, $name, cx.type_variadic_func(&[], $ret));\n-                llvm::SetUnnamedAddr(f, false);\n-                cx.intrinsics.borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n-        );\n-        ($name:expr, fn($($arg:expr),*) -> $ret:expr) => (\n-            if key == $name {\n-                let f = declare::declare_cfn(cx, $name, cx.type_func(&[$($arg),*], $ret));\n-                llvm::SetUnnamedAddr(f, false);\n-                cx.intrinsics.borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n-        );\n-    }\n-    macro_rules! mk_struct {\n-        ($($field_ty:expr),*) => (cx.type_struct( &[$($field_ty),*], false))\n-    }\n-\n-    let i8p = cx.type_i8p();\n-    let void = cx.type_void();\n-    let i1 = cx.type_i1();\n-    let t_i8 = cx.type_i8();\n-    let t_i16 = cx.type_i16();\n-    let t_i32 = cx.type_i32();\n-    let t_i64 = cx.type_i64();\n-    let t_i128 = cx.type_i128();\n-    let t_f32 = cx.type_f32();\n-    let t_f64 = cx.type_f64();\n-\n-    let t_v2f32 = cx.type_vector(t_f32, 2);\n-    let t_v4f32 = cx.type_vector(t_f32, 4);\n-    let t_v8f32 = cx.type_vector(t_f32, 8);\n-    let t_v16f32 = cx.type_vector(t_f32, 16);\n-\n-    let t_v2f64 = cx.type_vector(t_f64, 2);\n-    let t_v4f64 = cx.type_vector(t_f64, 4);\n-    let t_v8f64 = cx.type_vector(t_f64, 8);\n-\n-    ifn!(\"llvm.memset.p0i8.i16\", fn(i8p, t_i8, t_i16, t_i32, i1) -> void);\n-    ifn!(\"llvm.memset.p0i8.i32\", fn(i8p, t_i8, t_i32, t_i32, i1) -> void);\n-    ifn!(\"llvm.memset.p0i8.i64\", fn(i8p, t_i8, t_i64, t_i32, i1) -> void);\n-\n-    ifn!(\"llvm.trap\", fn() -> void);\n-    ifn!(\"llvm.debugtrap\", fn() -> void);\n-    ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);\n-\n-    ifn!(\"llvm.powi.f32\", fn(t_f32, t_i32) -> t_f32);\n-    ifn!(\"llvm.powi.v2f32\", fn(t_v2f32, t_i32) -> t_v2f32);\n-    ifn!(\"llvm.powi.v4f32\", fn(t_v4f32, t_i32) -> t_v4f32);\n-    ifn!(\"llvm.powi.v8f32\", fn(t_v8f32, t_i32) -> t_v8f32);\n-    ifn!(\"llvm.powi.v16f32\", fn(t_v16f32, t_i32) -> t_v16f32);\n-    ifn!(\"llvm.powi.f64\", fn(t_f64, t_i32) -> t_f64);\n-    ifn!(\"llvm.powi.v2f64\", fn(t_v2f64, t_i32) -> t_v2f64);\n-    ifn!(\"llvm.powi.v4f64\", fn(t_v4f64, t_i32) -> t_v4f64);\n-    ifn!(\"llvm.powi.v8f64\", fn(t_v8f64, t_i32) -> t_v8f64);\n-\n-    ifn!(\"llvm.pow.f32\", fn(t_f32, t_f32) -> t_f32);\n-    ifn!(\"llvm.pow.v2f32\", fn(t_v2f32, t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.pow.v4f32\", fn(t_v4f32, t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.pow.v8f32\", fn(t_v8f32, t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.pow.v16f32\", fn(t_v16f32, t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.pow.f64\", fn(t_f64, t_f64) -> t_f64);\n-    ifn!(\"llvm.pow.v2f64\", fn(t_v2f64, t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.pow.v4f64\", fn(t_v4f64, t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.pow.v8f64\", fn(t_v8f64, t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.sqrt.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.sqrt.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.sqrt.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.sqrt.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.sqrt.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.sqrt.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.sqrt.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.sqrt.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.sqrt.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.sin.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.sin.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.sin.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.sin.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.sin.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.sin.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.sin.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.sin.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.sin.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.cos.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.cos.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.cos.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.cos.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.cos.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.cos.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.cos.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.cos.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.cos.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.exp.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.exp.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.exp.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.exp.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.exp.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.exp.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.exp.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.exp.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.exp.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.exp2.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.exp2.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.exp2.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.exp2.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.exp2.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.exp2.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.exp2.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.exp2.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.exp2.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.log.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.log.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.log.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.log.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.log.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.log.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.log.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.log.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.log.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.log10.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.log10.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.log10.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.log10.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.log10.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.log10.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.log10.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.log10.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.log10.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.log2.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.log2.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.log2.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.log2.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.log2.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.log2.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.log2.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.log2.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.log2.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.fma.f32\", fn(t_f32, t_f32, t_f32) -> t_f32);\n-    ifn!(\"llvm.fma.v2f32\", fn(t_v2f32, t_v2f32, t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.fma.v4f32\", fn(t_v4f32, t_v4f32, t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.fma.v8f32\", fn(t_v8f32, t_v8f32, t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.fma.v16f32\", fn(t_v16f32, t_v16f32, t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.fma.f64\", fn(t_f64, t_f64, t_f64) -> t_f64);\n-    ifn!(\"llvm.fma.v2f64\", fn(t_v2f64, t_v2f64, t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.fma.v4f64\", fn(t_v4f64, t_v4f64, t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.fma.v8f64\", fn(t_v8f64, t_v8f64, t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.fabs.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.fabs.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.fabs.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.fabs.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.fabs.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.fabs.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.fabs.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.fabs.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.fabs.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.floor.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.floor.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.floor.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.floor.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.floor.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.floor.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.floor.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.floor.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.floor.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.ceil.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.ceil.v2f32\", fn(t_v2f32) -> t_v2f32);\n-    ifn!(\"llvm.ceil.v4f32\", fn(t_v4f32) -> t_v4f32);\n-    ifn!(\"llvm.ceil.v8f32\", fn(t_v8f32) -> t_v8f32);\n-    ifn!(\"llvm.ceil.v16f32\", fn(t_v16f32) -> t_v16f32);\n-    ifn!(\"llvm.ceil.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.ceil.v2f64\", fn(t_v2f64) -> t_v2f64);\n-    ifn!(\"llvm.ceil.v4f64\", fn(t_v4f64) -> t_v4f64);\n-    ifn!(\"llvm.ceil.v8f64\", fn(t_v8f64) -> t_v8f64);\n-\n-    ifn!(\"llvm.trunc.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.trunc.f64\", fn(t_f64) -> t_f64);\n-\n-    ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n-    ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n-    ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n-\n-    ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n-    ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);\n-    ifn!(\"llvm.nearbyint.f64\", fn(t_f64) -> t_f64);\n-\n-    ifn!(\"llvm.ctpop.i8\", fn(t_i8) -> t_i8);\n-    ifn!(\"llvm.ctpop.i16\", fn(t_i16) -> t_i16);\n-    ifn!(\"llvm.ctpop.i32\", fn(t_i32) -> t_i32);\n-    ifn!(\"llvm.ctpop.i64\", fn(t_i64) -> t_i64);\n-    ifn!(\"llvm.ctpop.i128\", fn(t_i128) -> t_i128);\n-\n-    ifn!(\"llvm.ctlz.i8\", fn(t_i8 , i1) -> t_i8);\n-    ifn!(\"llvm.ctlz.i16\", fn(t_i16, i1) -> t_i16);\n-    ifn!(\"llvm.ctlz.i32\", fn(t_i32, i1) -> t_i32);\n-    ifn!(\"llvm.ctlz.i64\", fn(t_i64, i1) -> t_i64);\n-    ifn!(\"llvm.ctlz.i128\", fn(t_i128, i1) -> t_i128);\n-\n-    ifn!(\"llvm.cttz.i8\", fn(t_i8 , i1) -> t_i8);\n-    ifn!(\"llvm.cttz.i16\", fn(t_i16, i1) -> t_i16);\n-    ifn!(\"llvm.cttz.i32\", fn(t_i32, i1) -> t_i32);\n-    ifn!(\"llvm.cttz.i64\", fn(t_i64, i1) -> t_i64);\n-    ifn!(\"llvm.cttz.i128\", fn(t_i128, i1) -> t_i128);\n-\n-    ifn!(\"llvm.bswap.i16\", fn(t_i16) -> t_i16);\n-    ifn!(\"llvm.bswap.i32\", fn(t_i32) -> t_i32);\n-    ifn!(\"llvm.bswap.i64\", fn(t_i64) -> t_i64);\n-    ifn!(\"llvm.bswap.i128\", fn(t_i128) -> t_i128);\n-\n-    ifn!(\"llvm.bitreverse.i8\", fn(t_i8) -> t_i8);\n-    ifn!(\"llvm.bitreverse.i16\", fn(t_i16) -> t_i16);\n-    ifn!(\"llvm.bitreverse.i32\", fn(t_i32) -> t_i32);\n-    ifn!(\"llvm.bitreverse.i64\", fn(t_i64) -> t_i64);\n-    ifn!(\"llvm.bitreverse.i128\", fn(t_i128) -> t_i128);\n-\n-    ifn!(\"llvm.fshl.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n-    ifn!(\"llvm.fshl.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n-    ifn!(\"llvm.fshl.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n-    ifn!(\"llvm.fshl.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n-    ifn!(\"llvm.fshl.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n-\n-    ifn!(\"llvm.fshr.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n-    ifn!(\"llvm.fshr.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n-    ifn!(\"llvm.fshr.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n-    ifn!(\"llvm.fshr.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n-    ifn!(\"llvm.fshr.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n-\n-    ifn!(\"llvm.sadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.sadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.sadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.sadd.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.sadd.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.uadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.uadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.uadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.uadd.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.uadd.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.ssub.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.ssub.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.ssub.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.ssub.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.ssub.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.usub.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.usub.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.usub.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.usub.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.usub.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.smul.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.smul.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.smul.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.smul.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.smul.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.umul.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n-    ifn!(\"llvm.umul.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n-    ifn!(\"llvm.umul.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n-    ifn!(\"llvm.umul.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n-    ifn!(\"llvm.umul.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n-\n-    ifn!(\"llvm.lifetime.start\", fn(t_i64,i8p) -> void);\n-    ifn!(\"llvm.lifetime.end\", fn(t_i64, i8p) -> void);\n-\n-    ifn!(\"llvm.expect.i1\", fn(i1, i1) -> i1);\n-    ifn!(\"llvm.eh.typeid.for\", fn(i8p) -> t_i32);\n-    ifn!(\"llvm.localescape\", fn(...) -> void);\n-    ifn!(\"llvm.localrecover\", fn(i8p, i8p, t_i32) -> i8p);\n-    ifn!(\"llvm.x86.seh.recoverfp\", fn(i8p, i8p) -> i8p);\n-\n-    ifn!(\"llvm.assume\", fn(i1) -> void);\n-    ifn!(\"llvm.prefetch\", fn(i8p, t_i32, t_i32, t_i32) -> void);\n-\n-    if cx.sess().opts.debuginfo != DebugInfo::None {\n-        ifn!(\"llvm.dbg.declare\", fn(cx.type_metadata(), cx.type_metadata()) -> void);\n-        ifn!(\"llvm.dbg.value\", fn(cx.type_metadata(), t_i64, cx.type_metadata()) -> void);\n-    }\n-\n-    None\n-}"}, {"sha": "f0ff8cd188f8dbb5fab3090d9d5314d0ffea9872", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -17,7 +17,7 @@ use builder::Builder;\n use declare;\n use rustc::session::config::DebugInfo;\n use value::Value;\n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods};\n \n use syntax::attr;\n "}, {"sha": "65ce0ac4efb9a70fd135b4ed50dc1a29635ad1d8", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -17,14 +17,15 @@ use builder::MemFlags;\n use super::backend::Backend;\n use super::type_::TypeMethods;\n use super::consts::ConstMethods;\n+use super::intrinsic::IntrinsicMethods;\n \n use std::borrow::Cow;\n use std::ops::Range;\n use syntax::ast::AsmDialect;\n \n \n pub trait BuilderMethods<'a, 'tcx: 'a>: Backend {\n-    type CodegenCx: 'a + TypeMethods + ConstMethods + Backend<\n+    type CodegenCx: 'a + TypeMethods + ConstMethods + IntrinsicMethods + Backend<\n         Value = Self::Value,\n         BasicBlock = Self::BasicBlock,\n         Type = Self::Type,"}, {"sha": "2d4f4c3028d0ac29c7cb4e82c95792349e945cc8", "filename": "src/librustc_codegen_llvm/interfaces/intrinsic.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::backend::Backend;\n+\n+pub trait BaseIntrinsicMethods: Backend {\n+\n+}\n+\n+pub trait DerivedIntrinsicMethods: Backend {\n+    fn get_intrinsic(&self, key: &str) -> Self::Value;\n+    fn declare_intrinsic(\n+        &self,\n+        key: &str\n+    ) -> Option<Self::Value>;\n+}\n+\n+pub trait IntrinsicMethods: BaseIntrinsicMethods + DerivedIntrinsicMethods {}"}, {"sha": "def4b49f27d659ea08d96e47b8e9b7a5bed61d2a", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -12,8 +12,10 @@ mod builder;\n mod backend;\n mod consts;\n mod type_;\n+mod intrinsic;\n \n pub use self::builder::BuilderMethods;\n pub use self::backend::Backend;\n pub use self::consts::ConstMethods;\n-pub use self::type_::TypeMethods;\n+pub use self::type_::{TypeMethods, BaseTypeMethods, DerivedTypeMethods};\n+pub use self::intrinsic::{IntrinsicMethods, BaseIntrinsicMethods, DerivedIntrinsicMethods};"}, {"sha": "ff594c40095e1b111441a2cdcc798aa9afffa56b", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -10,8 +10,10 @@\n \n use super::backend::Backend;\n use common::TypeKind;\n+use syntax::ast;\n+use rustc::ty::layout::{self, Align, Size};\n \n-pub trait TypeMethods: Backend {\n+pub trait BaseTypeMethods: Backend {\n     fn type_void(&self) -> Self::Type;\n     fn type_metadata(&self) -> Self::Type;\n     fn type_i1(&self) -> Self::Type;\n@@ -42,3 +44,31 @@ pub trait TypeMethods: Backend {\n \n     fn val_ty(&self, v: Self::Value) -> Self::Type;\n }\n+\n+pub trait DerivedTypeMethods: Backend {\n+    fn type_bool(&self) -> Self::Type;\n+    fn type_i8p(&self) -> Self::Type;\n+    fn type_isize(&self) -> Self::Type;\n+    fn type_int(&self) -> Self::Type;\n+    fn type_int_from_ty(\n+        &self,\n+        t: ast::IntTy\n+    ) -> Self::Type;\n+    fn type_uint_from_ty(\n+        &self,\n+        t: ast::UintTy\n+    ) -> Self::Type;\n+    fn type_float_from_ty(\n+        &self,\n+        t: ast::FloatTy\n+    ) -> Self::Type;\n+    fn type_from_integer(&self, i: layout::Integer) -> Self::Type;\n+    fn type_pointee_for_abi_align(&self, align: Align) -> Self::Type;\n+    fn type_padding_filler(\n+        &self,\n+        size: Size,\n+        align: Align\n+    ) -> Self::Type;\n+}\n+\n+pub trait TypeMethods: BaseTypeMethods + DerivedTypeMethods {}"}, {"sha": "b1709f96d1079adbe2a0345dc4719774f3d174d6", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -32,7 +32,9 @@ use syntax::symbol::Symbol;\n use builder::Builder;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{\n+    BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, DerivedIntrinsicMethods,\n+};\n \n use rustc::session::Session;\n use syntax_pos::Span;"}, {"sha": "466f8b8ac522d8c1ac443eb86ea36ca1c81df451", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -16,7 +16,7 @@ use consts;\n use monomorphize;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods};\n \n use rustc::ty::{self, Ty};\n use rustc::ty::layout::HasDataLayout;"}, {"sha": "0fd1e28d5a65c9b5cc9f2639549be7934fe725da", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -26,7 +26,9 @@ use type_of::LayoutLlvmExt;\n use type_::Type;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{\n+    BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, DerivedIntrinsicMethods,\n+};\n \n use syntax::symbol::Symbol;\n use syntax_pos::Pos;"}, {"sha": "d9be3fbfb2af32d7365899f0b54178f04e165423", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -25,7 +25,7 @@ use type_::Type;\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n use value::Value;\n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods};\n \n use super::super::callee;\n use super::FunctionCx;"}, {"sha": "94f25aa082bfdeef2b2ed410f2ee2b25a1b4fb79", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -24,7 +24,7 @@ use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebug\n use monomorphize::Instance;\n use abi::{ArgTypeExt, FnType, FnTypeExt, PassMode};\n use value::Value;\n-use interfaces::{BuilderMethods, ConstMethods};\n+use interfaces::{BuilderMethods, ConstMethods, DerivedTypeMethods};\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n use syntax::symbol::keywords;"}, {"sha": "81d2b02263ea5174087a5fd2920b305b95b246ba", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -20,7 +20,7 @@ use value::Value;\n use type_of::LayoutLlvmExt;\n use glue;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedIntrinsicMethods};\n \n use std::fmt;\n "}, {"sha": "1c119f6a0a311193bb9393b9f56febb019f66481", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -22,7 +22,9 @@ use value::Value;\n use glue;\n use mir::constant::const_alloc_to_llvm;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{\n+    BuilderMethods, ConstMethods, BaseTypeMethods, DerivedTypeMethods, DerivedIntrinsicMethods,\n+};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "56e3aa56e604d9b550762856a6a9367b14688d14", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -26,7 +26,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, TypeMethods};\n+use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, DerivedIntrinsicMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "21c815784a4b53dedaa29e00a66c8b6dc516e719", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -15,7 +15,7 @@ pub use llvm::Type;\n use llvm;\n use llvm::{Bool, False, True};\n use context::CodegenCx;\n-use interfaces::TypeMethods;\n+use interfaces::{BaseTypeMethods, DerivedTypeMethods, TypeMethods};\n use value::Value;\n \n \n@@ -42,8 +42,7 @@ impl fmt::Debug for Type {\n     }\n }\n \n-impl TypeMethods for CodegenCx<'ll, 'tcx> {\n-\n+impl BaseTypeMethods for CodegenCx<'ll, 'tcx> {\n     fn type_void(&self) -> &'ll Type {\n         unsafe {\n             llvm::LLVMVoidTypeInContext(self.llcx)\n@@ -265,20 +264,20 @@ impl Type {\n     }\n }\n \n-impl CodegenCx<'ll, 'tcx> {\n-    pub fn type_bool(&self) -> &'ll Type {\n+impl DerivedTypeMethods for CodegenCx<'ll, 'tcx> {\n+    fn type_bool(&self) -> &'ll Type {\n         self.type_i8()\n     }\n \n-    pub fn type_i8p(&self) -> &'ll Type {\n+    fn type_i8p(&self) -> &'ll Type {\n         self.type_ptr_to(self.type_i8())\n     }\n \n-    pub fn type_isize(&self) -> &'ll Type {\n+    fn type_isize(&self) -> &'ll Type {\n         self.isize_ty\n     }\n \n-    pub fn type_int(&self) -> &'ll Type {\n+    fn type_int(&self) -> &'ll Type {\n         match &self.sess().target.target.target_c_int_width[..] {\n             \"16\" => self.type_i16(),\n             \"32\" => self.type_i32(),\n@@ -287,7 +286,7 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn type_int_from_ty(\n+    fn type_int_from_ty(\n         &self,\n         t: ast::IntTy\n     ) -> &'ll Type {\n@@ -301,7 +300,7 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn type_uint_from_ty(\n+    fn type_uint_from_ty(\n         &self,\n         t: ast::UintTy\n     ) -> &'ll Type {\n@@ -315,7 +314,7 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn type_float_from_ty(\n+    fn type_float_from_ty(\n         &self,\n         t: ast::FloatTy\n     ) -> &'ll Type {\n@@ -325,7 +324,7 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn type_from_integer(&self, i: layout::Integer) -> &'ll Type {\n+    fn type_from_integer(&self, i: layout::Integer) -> &'ll Type {\n         use rustc::ty::layout::Integer::*;\n         match i {\n             I8 => self.type_i8(),\n@@ -338,15 +337,15 @@ impl CodegenCx<'ll, 'tcx> {\n \n     /// Return a LLVM type that has at most the required alignment,\n     /// as a conservative approximation for unknown pointee types.\n-    pub fn type_pointee_for_abi_align(&self, align: Align) -> &'ll Type {\n+    fn type_pointee_for_abi_align(&self, align: Align) -> &'ll Type {\n         // FIXME(eddyb) We could find a better approximation if ity.align < align.\n         let ity = layout::Integer::approximate_abi_align(self, align);\n         self.type_from_integer(ity)\n     }\n \n     /// Return a LLVM type that has at most the required alignment,\n     /// and exactly the required size, as a best-effort padding array.\n-    pub fn type_padding_filler(\n+    fn type_padding_filler(\n         &self,\n         size: Size,\n         align: Align\n@@ -358,3 +357,5 @@ impl CodegenCx<'ll, 'tcx> {\n         self.type_array(self.type_from_integer(unit), size / unit_size)\n     }\n }\n+\n+impl TypeMethods for CodegenCx<'ll, 'tcx> {}"}, {"sha": "e3be6c991d526d3457b2f7a7e64fe3901ecd8bb4", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77e34f35ba276b514459b1669818605c9fbf416/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=d77e34f35ba276b514459b1669818605c9fbf416", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc_target::abi::FloatTy;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use type_::Type;\n-use interfaces::TypeMethods;\n+use interfaces::{BaseTypeMethods, DerivedTypeMethods};\n \n use std::fmt::Write;\n "}]}