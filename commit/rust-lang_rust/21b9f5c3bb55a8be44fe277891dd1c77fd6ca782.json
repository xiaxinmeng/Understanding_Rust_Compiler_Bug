{"sha": "21b9f5c3bb55a8be44fe277891dd1c77fd6ca782", "node_id": "C_kwDOAAsO6NoAKDIxYjlmNWMzYmI1NWE4YmU0NGZlMjc3ODkxZGQxYzc3ZmQ2Y2E3ODI", "commit": {"author": {"name": "whtahy", "email": "whtahy@users.noreply.github.com", "date": "2023-04-27T00:48:38Z"}, "committer": {"name": "whtahy", "email": "whtahy@users.noreply.github.com", "date": "2023-04-27T02:34:39Z"}, "message": "add known-bug test for unsound issue 74629", "tree": {"sha": "97f1d3440a13f30dcb46537e5363347a6c4272fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97f1d3440a13f30dcb46537e5363347a6c4272fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782", "html_url": "https://github.com/rust-lang/rust/commit/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782/comments", "author": {"login": "whtahy", "id": 19783477, "node_id": "MDQ6VXNlcjE5NzgzNDc3", "avatar_url": "https://avatars.githubusercontent.com/u/19783477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whtahy", "html_url": "https://github.com/whtahy", "followers_url": "https://api.github.com/users/whtahy/followers", "following_url": "https://api.github.com/users/whtahy/following{/other_user}", "gists_url": "https://api.github.com/users/whtahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/whtahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whtahy/subscriptions", "organizations_url": "https://api.github.com/users/whtahy/orgs", "repos_url": "https://api.github.com/users/whtahy/repos", "events_url": "https://api.github.com/users/whtahy/events{/privacy}", "received_events_url": "https://api.github.com/users/whtahy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whtahy", "id": 19783477, "node_id": "MDQ6VXNlcjE5NzgzNDc3", "avatar_url": "https://avatars.githubusercontent.com/u/19783477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whtahy", "html_url": "https://github.com/whtahy", "followers_url": "https://api.github.com/users/whtahy/followers", "following_url": "https://api.github.com/users/whtahy/following{/other_user}", "gists_url": "https://api.github.com/users/whtahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/whtahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whtahy/subscriptions", "organizations_url": "https://api.github.com/users/whtahy/orgs", "repos_url": "https://api.github.com/users/whtahy/repos", "events_url": "https://api.github.com/users/whtahy/events{/privacy}", "received_events_url": "https://api.github.com/users/whtahy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a87359d7c98790e75e71587058cfea9defee78c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a87359d7c98790e75e71587058cfea9defee78c7", "html_url": "https://github.com/rust-lang/rust/commit/a87359d7c98790e75e71587058cfea9defee78c7"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "cd1df53a5288942ca378ba035dff5ef2efc46959", "filename": "tests/ui/coherence/coherence-overlap-negative-impls.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b9f5c3bb55a8be44fe277891dd1c77fd6ca782/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs?ref=21b9f5c3bb55a8be44fe277891dd1c77fd6ca782", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+// known-bug: #74629\n+\n+// Should fail. The `0` and `1` impls overlap, violating coherence. Eg, with\n+// `T = Test, F = ()`, all bounds are true, making both impls applicable.\n+// `Test: Fold<Nil>`, `Test: Fold<()>` are true because of `2`.\n+// `Is<Test>: NotNil` is true because of `auto trait` and lack of negative impl.\n+\n+#![feature(negative_impls)]\n+#![feature(auto_traits)]\n+\n+struct Nil;\n+struct Cons<H>(H);\n+struct Test;\n+\n+trait Fold<F> {}\n+\n+impl<T, F> Fold<F> for Cons<T> // 0\n+where\n+    T: Fold<Nil>,\n+{}\n+\n+impl<T, F> Fold<F> for Cons<T> // 1\n+where\n+    T: Fold<F>,\n+    private::Is<T>: private::NotNil,\n+{}\n+\n+impl<F> Fold<F> for Test {} // 2\n+\n+mod private {\n+    use crate::Nil;\n+\n+    pub struct Is<T>(T);\n+    pub auto trait NotNil {}\n+\n+    #[allow(suspicious_auto_trait_impls)]\n+    impl !NotNil for Is<Nil> {}\n+}\n+\n+fn main() {}"}]}