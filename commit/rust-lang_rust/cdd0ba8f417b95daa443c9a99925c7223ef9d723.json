{"sha": "cdd0ba8f417b95daa443c9a99925c7223ef9d723", "node_id": "C_kwDOAAsO6NoAKGNkZDBiYThmNDE3Yjk1ZGFhNDQzYzlhOTk5MjVjNzIyM2VmOWQ3MjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T17:12:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T17:12:17Z"}, "message": "Rollup merge of #102569 - eduardosm:from_str-example, r=joshtriplett\n\nImprove `FromStr` example\n\nThe `from_str` implementation from the example had an `unwrap` that would make it panic on invalid input strings. Instead of panicking, it nows returns an error to better reflect the intented behavior of the `FromStr` trait.", "tree": {"sha": "1688788b2254ec630be28a04fa97348a56558cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1688788b2254ec630be28a04fa97348a56558cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd0ba8f417b95daa443c9a99925c7223ef9d723", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOxfxCRBK7hj4Ov3rIwAAxrkIAA1c6UzSkkSx5mW9sp3bDLyo\nEvCbYTIQuglkmQ8tgmZS8pUNvVKylmk1nwNQUnve6xW4kDe1rra9e3GbB8ny4PrL\nVtBTkN+kypOy9jAYgvOrZsjupPNvc6+fDDIicICFJD5TcPzkzY7J1roE88HiuY1T\nx5LlxMb3w603JJLqngMZ8MggnOS0L0r7nmNw8vLymBn2dxYGLGrkJ/7ki2gTai2L\nynpeq3tXSLNZCjBeaak7cVrCK2q3HkgZwdZBCnNpIziL1KVH5skGfRoyDjJ8IJz1\ncYmIbFIuJQROcN1WMP1PIRa4BHnLoOCB4XbYDpVVSUd1e6S6Ep4FLGLPMKjrDWM=\n=TeMw\n-----END PGP SIGNATURE-----\n", "payload": "tree 1688788b2254ec630be28a04fa97348a56558cfb\nparent 2e7e17a84abea8f4c3e2d95ce432ef784af06bef\nparent 9c7c232a50819ef2bfb59eae283a5e7ed70dd952\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664817137 +0200\ncommitter GitHub <noreply@github.com> 1664817137 +0200\n\nRollup merge of #102569 - eduardosm:from_str-example, r=joshtriplett\n\nImprove `FromStr` example\n\nThe `from_str` implementation from the example had an `unwrap` that would make it panic on invalid input strings. Instead of panicking, it nows returns an error to better reflect the intented behavior of the `FromStr` trait.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd0ba8f417b95daa443c9a99925c7223ef9d723", "html_url": "https://github.com/rust-lang/rust/commit/cdd0ba8f417b95daa443c9a99925c7223ef9d723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd0ba8f417b95daa443c9a99925c7223ef9d723/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7e17a84abea8f4c3e2d95ce432ef784af06bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e17a84abea8f4c3e2d95ce432ef784af06bef", "html_url": "https://github.com/rust-lang/rust/commit/2e7e17a84abea8f4c3e2d95ce432ef784af06bef"}, {"sha": "9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "html_url": "https://github.com/rust-lang/rust/commit/9c7c232a50819ef2bfb59eae283a5e7ed70dd952"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "d3ed811b1575bc03e221a7086fc4d4507f9d36a2", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdd0ba8f417b95daa443c9a99925c7223ef9d723/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd0ba8f417b95daa443c9a99925c7223ef9d723/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=cdd0ba8f417b95daa443c9a99925c7223ef9d723", "patch": "@@ -507,26 +507,28 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///\n /// ```\n /// use std::str::FromStr;\n-/// use std::num::ParseIntError;\n ///\n /// #[derive(Debug, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32\n /// }\n ///\n+/// #[derive(Debug, PartialEq, Eq)]\n+/// struct ParsePointError;\n+///\n /// impl FromStr for Point {\n-///     type Err = ParseIntError;\n+///     type Err = ParsePointError;\n ///\n ///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n ///         let (x, y) = s\n ///             .strip_prefix('(')\n ///             .and_then(|s| s.strip_suffix(')'))\n ///             .and_then(|s| s.split_once(','))\n-///             .unwrap();\n+///             .ok_or(ParsePointError)?;\n ///\n-///         let x_fromstr = x.parse::<i32>()?;\n-///         let y_fromstr = y.parse::<i32>()?;\n+///         let x_fromstr = x.parse::<i32>().map_err(|_| ParsePointError)?;\n+///         let y_fromstr = y.parse::<i32>().map_err(|_| ParsePointError)?;\n ///\n ///         Ok(Point { x: x_fromstr, y: y_fromstr })\n ///     }\n@@ -538,6 +540,8 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n /// // Implicit calls, through parse\n /// assert_eq!(\"(1,2)\".parse(), expected);\n /// assert_eq!(\"(1,2)\".parse::<Point>(), expected);\n+/// // Invalid input string\n+/// assert!(Point::from_str(\"(1 2)\").is_err());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {"}]}