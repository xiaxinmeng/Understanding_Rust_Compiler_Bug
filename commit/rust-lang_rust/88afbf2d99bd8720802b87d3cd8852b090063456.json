{"sha": "88afbf2d99bd8720802b87d3cd8852b090063456", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YWZiZjJkOTliZDg3MjA4MDJiODdkM2NkODg1MmIwOTAwNjM0NTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-11T12:04:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:19Z"}, "message": "Make uninhabitedness checking more intelligent", "tree": {"sha": "35c918f73bdd0685b22be2b98e3e68166320a484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c918f73bdd0685b22be2b98e3e68166320a484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88afbf2d99bd8720802b87d3cd8852b090063456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88afbf2d99bd8720802b87d3cd8852b090063456", "html_url": "https://github.com/rust-lang/rust/commit/88afbf2d99bd8720802b87d3cd8852b090063456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88afbf2d99bd8720802b87d3cd8852b090063456/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b359094f0dcebdb03e4bbc0e4934ce38d8623a", "html_url": "https://github.com/rust-lang/rust/commit/62b359094f0dcebdb03e4bbc0e4934ce38d8623a"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "1521b7a69ab0386572a485bc0ed05c1f0044ea5a", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             args: I) -> CFGIndex {\n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n         let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n-        if self.tables.expr_ty(call_expr).conservative_is_uninhabited() {\n+        if self.tables.expr_ty(call_expr).conservative_is_uninhabited(self.tcx) {\n             self.add_unreachable_node()\n         } else {\n             ret"}, {"sha": "2b9a44429a0a634aa8c6a7b452333ff6c9d6d927", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited() {\n+                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited(self.ir.tcx) {\n                     self.s.exit_ln\n                 } else {\n                     succ\n@@ -1207,7 +1207,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited() {\n+                let succ = if self.tables.expr_ty(expr).conservative_is_uninhabited(self.ir.tcx) {\n                     self.s.exit_ln\n                 } else {\n                     succ"}, {"sha": "152d9a323031ba81d7ee6afdde6153e6f8da9cf9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -1543,14 +1543,40 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn conservative_is_uninhabited(&self) -> bool {\n+    pub fn conservative_is_uninhabited(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         // Checks whether a type is definitely uninhabited. This is\n         // conservative: for some types that are uninhabited we return `false`,\n         // but we only return `true` for types that are definitely uninhabited.\n         match self.sty {\n             ty::Never => true,\n-            ty::Adt(def, _) => def.variants.is_empty(),\n-            _ => false\n+            ty::Adt(def, _) => {\n+                // Any ADT is uninhabited if:\n+                // (a) It has no variants (i.e. an empty `enum`);\n+                // (b) Each of its variants (a single one in the case of a `struct`) has at least\n+                //     one uninhabited field.\n+                def.variants.iter().all(|var| {\n+                    var.fields.iter().any(|field| {\n+                        tcx.type_of(field.did).conservative_is_uninhabited(tcx)\n+                    })\n+                })\n+            }\n+            ty::Tuple(tys) => tys.iter().any(|ty| ty.conservative_is_uninhabited(tcx)),\n+            ty::Array(ty, len) => {\n+                match len.val.try_to_scalar() {\n+                    // If the array is definitely non-empty, it's uninhabited if\n+                    // the type of its elements is uninhabited.\n+                    Some(n) if !n.is_null() => ty.conservative_is_uninhabited(tcx),\n+                    _ => false\n+                }\n+            }\n+            ty::Ref(..) => {\n+                // Though references to uninhabited types are trivially uninhabited\n+                // theoretically, null references are permitted in unsafe code (as\n+                // long as the value is not dereferenced), so we treat all references\n+                // as inhabited.\n+                false\n+            }\n+            _ => false,\n         }\n     }\n "}, {"sha": "aea48ead428a4aa8235425919cbe626910bf6631", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -1546,7 +1546,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             None => {\n-                if !sig.output().conservative_is_uninhabited() {\n+                if !sig.output().conservative_is_uninhabited(self.tcx()) {\n                     span_mirbug!(self, term, \"call to converging function {:?} w/o dest\", sig);\n                 }\n             }"}, {"sha": "4b12562887ae0f9b4fa0e0c8e38fb6d86e206e1e", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             func: fun,\n                             args,\n                             cleanup: Some(cleanup),\n-                            destination: if expr.ty.conservative_is_uninhabited() {\n+                            destination: if expr.ty.conservative_is_uninhabited(this.hir.tcx()) {\n                                 None\n                             } else {\n                                 Some((destination.clone(), success))"}, {"sha": "5a83fe76d7c537c8a720a51656f1dc6bd2dbc352", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88afbf2d99bd8720802b87d3cd8852b090063456/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=88afbf2d99bd8720802b87d3cd8852b090063456", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n-                    pat_ty.conservative_is_uninhabited()\n+                    pat_ty.conservative_is_uninhabited(self.tcx)\n                 };\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong"}]}