{"sha": "360f3efce8743d1eee6395881591cec52edb6934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MGYzZWZjZTg3NDNkMWVlZTYzOTU4ODE1OTFjZWM1MmVkYjY5MzQ=", "commit": {"author": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-16T01:21:43Z"}, "committer": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-12-16T01:21:43Z"}, "message": "Replace `locate-project` with `read-manifest`\n\nUse `cargo read-manifest` instead of `cargo locate-project` to get\na list of files to be formatted.", "tree": {"sha": "99ccfb2063d2548992b562ed02c324bee056acf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99ccfb2063d2548992b562ed02c324bee056acf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360f3efce8743d1eee6395881591cec52edb6934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360f3efce8743d1eee6395881591cec52edb6934", "html_url": "https://github.com/rust-lang/rust/commit/360f3efce8743d1eee6395881591cec52edb6934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360f3efce8743d1eee6395881591cec52edb6934/comments", "author": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d1c067399dca9923089c29b7f26534370ec904", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d1c067399dca9923089c29b7f26534370ec904", "html_url": "https://github.com/rust-lang/rust/commit/f5d1c067399dca9923089c29b7f26534370ec904"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "14afd0912485aba38a6f50430fce2613fec07610", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/360f3efce8743d1eee6395881591cec52edb6934/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/360f3efce8743d1eee6395881591cec52edb6934/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=360f3efce8743d1eee6395881591cec52edb6934", "patch": "@@ -13,7 +13,6 @@ dependencies = [\n  \"term 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -146,15 +145,6 @@ name = \"unicode-xid\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"walkdir\"\n-version = \"0.1.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"winapi\"\n version = \"0.2.5\""}, {"sha": "af6c6b059a05fad25e727fd2624b7ab7a77ef23b", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 60, "deletions": 32, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/360f3efce8743d1eee6395881591cec52edb6934/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360f3efce8743d1eee6395881591cec52edb6934/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=360f3efce8743d1eee6395881591cec52edb6934", "patch": "@@ -14,7 +14,6 @@\n #![cfg(feature=\"cargo-fmt\")]\n \n extern crate getopts;\n-extern crate walkdir;\n extern crate rustc_serialize;\n \n use std::path::PathBuf;\n@@ -23,7 +22,6 @@ use std::env;\n use std::str;\n \n use getopts::Options;\n-use walkdir::{WalkDir, DirEntry};\n use rustc_serialize::json::Json;\n \n fn main() {\n@@ -47,61 +45,91 @@ fn main() {\n \n fn print_usage(opts: &Options, reason: &str) {\n     let msg = format!(\"{}\\nusage: cargo fmt [options]\", reason);\n-    println!(\"{}\\nThis utility formats all readable .rs files in the src directory of the \\\n-              current crate using rustfmt.\",\n+    println!(\"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt.\",\n              opts.usage(&msg));\n }\n \n fn format_crate(opts: &Options) {\n-    let mut root = match locate_root() {\n-        Ok(r) => r,\n+    let targets = match get_targets() {\n+        Ok(t) => t,\n         Err(e) => {\n             print_usage(opts, &e.to_string());\n             return;\n         }\n     };\n \n-    // Currently only files in [root]/src can be formatted\n-    root.push(\"src\");\n-    // All unreadable or non .rs files are skipped\n-    let files: Vec<_> = WalkDir::new(root)\n-                            .into_iter()\n-                            .filter(is_rs_file)\n-                            .filter_map(|f| f.ok())\n-                            .map(|e| e.path().to_owned())\n-                            .collect();\n+    // Currently only bin and lib files get formatted\n+    let files: Vec<_> = targets.into_iter()\n+                               .filter(|t| t.kind.is_lib() | t.kind.is_bin())\n+                               .map(|t| t.path)\n+                               .collect();\n \n     format_files(&files).unwrap_or_else(|e| print_usage(opts, &e.to_string()));\n }\n \n-fn locate_root() -> Result<PathBuf, std::io::Error> {\n-    // This seems adequate, as cargo-fmt can only be used systems that have Cargo installed\n-    let output = try!(Command::new(\"cargo\").arg(\"locate-project\").output());\n+#[derive(Debug)]\n+enum TargetKind {\n+    Lib, // dylib, staticlib, lib\n+    Bin, // bin\n+    Other, // test, plugin,...\n+}\n+\n+impl TargetKind {\n+    fn is_lib(&self) -> bool {\n+        match self {\n+            &TargetKind::Lib => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn is_bin(&self) -> bool {\n+        match self {\n+            &TargetKind::Bin => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct Target {\n+    path: PathBuf,\n+    kind: TargetKind,\n+}\n+\n+// Returns a vector of all compile targets of a crate\n+fn get_targets() -> Result<Vec<Target>, std::io::Error> {\n+    let mut targets: Vec<Target> = vec![];\n+    let output = try!(Command::new(\"cargo\").arg(\"read-manifest\").output());\n     if output.status.success() {\n-        // We assume cargo locate-project is not broken and\n-        // it will output a valid json document\n+        // None of the unwraps should fail if output of `cargo read-manifest` is correct\n         let data = &String::from_utf8(output.stdout).unwrap();\n         let json = Json::from_str(data).unwrap();\n-        let root = PathBuf::from(json.find(\"root\").unwrap().as_string().unwrap());\n+        let jtargets = json.find(\"targets\").unwrap().as_array().unwrap();\n+        for jtarget in jtargets {\n+            targets.push(target_from_json(jtarget));\n+        }\n \n-        // root.parent() should never fail if locate-project's output is correct\n-        Ok(root.parent().unwrap().to_owned())\n+        Ok(targets)\n     } else {\n         // This happens when cargo-fmt is not used inside a crate\n         Err(std::io::Error::new(std::io::ErrorKind::NotFound,\n                                 str::from_utf8(&output.stderr).unwrap()))\n     }\n }\n \n-fn is_rs_file(entry: &Result<walkdir::DirEntry, walkdir::Error>) -> bool {\n-    match *entry {\n-        Ok(ref file) => {\n-            match file.path().extension() {\n-                Some(ext) => ext == \"rs\",\n-                None => false,\n-            }\n-        }\n-        Err(_) => false,\n+fn target_from_json(jtarget: &Json) -> Target {\n+    let jtarget = jtarget.as_object().unwrap();\n+    let path = PathBuf::from(jtarget.get(\"src_path\").unwrap().as_string().unwrap());\n+    let kinds = jtarget.get(\"kind\").unwrap().as_array().unwrap();\n+    let kind = match kinds[0].as_string().unwrap() {\n+        \"bin\" => TargetKind::Bin,\n+        \"lib\" | \"dylib\" | \"staticlib\" => TargetKind::Lib,\n+        _ => TargetKind::Other,\n+    };\n+\n+    Target {\n+        path: path,\n+        kind: kind,\n     }\n }\n "}]}