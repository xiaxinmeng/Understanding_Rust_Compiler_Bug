{"sha": "1a5e2d8c92ce1341fcf1632be981f78a3a8d635b", "node_id": "C_kwDOAAsO6NoAKDFhNWUyZDhjOTJjZTEzNDFmY2YxNjMyYmU5ODFmNzhhM2E4ZDYzNWI", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-06T08:35:29Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-13T12:38:00Z"}, "message": "account for simulated remap-debuginfo when resolving remapped paths", "tree": {"sha": "9f616181467df212a6eeb24fad9aae434ea9a3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f616181467df212a6eeb24fad9aae434ea9a3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKnL64ACgkQzXazX3c0\ndp4Z3g//Rl2ws9FpOpCxq8ugkoS8Ij7QLsCvkoF6ZtAdzlGk3zMCVjTfPL0oq9gv\nfJ0Mh/x0RHrzV83pJ3NDKWopPa+BureYIRBDZXCzleqotQolPIeL5jBxTdRmm0Ns\naRdp87MUbHRmP7+jEO9t2FfzdsWj2Tf35vYbZEHpEmIf0mtcTwt+H4825B8pIAhn\nAxkFYTqwRbZhJ7/CDTbs7Y9woDGJXfD7ZE2+xz+H82TLnsQ3jSrL1n3K1K6evHJ4\nBp6pwe27DkJotfOCiBexbVnEKEytCrRRCc+Fb3Wufrqgp8l6fS57TnvZwa926eom\nHPFZNhBuWoFpQ/obVe+y8oGDXTm5XaYK4S+f/sOufca5JicllxSdmfboVyjQ4ZNZ\naQ6p5eKS+DfIIaK91gumDR0bcJiABHMbkh9nT2kdDEmjUAKKX+WpjYdBJZ/LlJMA\nFUYNuyMXWAHxFCgjaarqEnzjkKFMlLF3PmiV+P+07ecCAIlNf2FhUg5a970vVdAg\nHnivo837tHRQRNhKrMzas9ldkAlqt0qPZMvbuhZwUh5rRA19ccmuICjBQjw55Sn6\nfdI5DWMsSF3A84ARVjaNnX8Aa3QkuPbIreYXpILkN96ctTr9Lg1aFatkFK5UJDk8\ngsWFVt/vnATbFMTbtMzkfQ7EQAdYQPLVvB4Lrobxpac9y9an9lk=\n=SbWz\n-----END PGP SIGNATURE-----", "payload": "tree 9f616181467df212a6eeb24fad9aae434ea9a3d8\nparent 083721a1a7365d3afe1521cd2661b2201aac0450\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654504529 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1655123880 +0200\n\naccount for simulated remap-debuginfo when resolving remapped paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b", "html_url": "https://github.com/rust-lang/rust/commit/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083721a1a7365d3afe1521cd2661b2201aac0450", "url": "https://api.github.com/repos/rust-lang/rust/commits/083721a1a7365d3afe1521cd2661b2201aac0450", "html_url": "https://github.com/rust-lang/rust/commit/083721a1a7365d3afe1521cd2661b2201aac0450"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "3b6ed1d834518fcfc47a1be5f1f073c509a82503", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5e2d8c92ce1341fcf1632be981f78a3a8d635b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1a5e2d8c92ce1341fcf1632be981f78a3a8d635b", "patch": "@@ -41,7 +41,7 @@ use std::io;\n use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n-use std::path::Path;\n+use std::path::PathBuf;\n use tracing::debug;\n \n pub(super) use cstore_impl::provide;\n@@ -1472,28 +1472,34 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         //\n         // NOTE: if you update this, you might need to also update bootstrap's code for generating\n         // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.\n-        let virtual_rust_source_base_dir = option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\")\n-            .map(Path::new)\n-            .filter(|_| {\n-                // Only spend time on further checks if we have what to translate *to*.\n-                sess.opts.real_rust_source_base_dir.is_some()\n-                    // Some tests need the translation to be always skipped.\n-                    && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n-            })\n-            .filter(|virtual_dir| {\n-                // Don't translate away `/rustc/$hash` if we're still remapping to it,\n-                // since that means we're still building `std`/`rustc` that need it,\n-                // and we don't want the real path to leak into codegen/debuginfo.\n-                !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n-            });\n+        let virtual_rust_source_base_dir = [\n+            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n+            sess.opts.debugging_opts.simulate_remapped_rust_src_base.clone(),\n+        ]\n+        .into_iter()\n+        .filter(|_| {\n+            // Only spend time on further checks if we have what to translate *to*.\n+            sess.opts.real_rust_source_base_dir.is_some()\n+                // Some tests need the translation to be always skipped.\n+                && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n+        })\n+        .flatten()\n+        .filter(|virtual_dir| {\n+            // Don't translate away `/rustc/$hash` if we're still remapping to it,\n+            // since that means we're still building `std`/`rustc` that need it,\n+            // and we don't want the real path to leak into codegen/debuginfo.\n+            !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n+        })\n+        .collect::<Vec<_>>();\n+\n         let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {\n             debug!(\n                 \"try_to_translate_virtual_to_real(name={:?}): \\\n                  virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}\",\n                 name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,\n             );\n \n-            if let Some(virtual_dir) = virtual_rust_source_base_dir {\n+            for virtual_dir in &virtual_rust_source_base_dir {\n                 if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                     if let rustc_span::FileName::Real(old_name) = name {\n                         if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } ="}]}