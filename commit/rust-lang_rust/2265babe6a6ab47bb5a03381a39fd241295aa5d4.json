{"sha": "2265babe6a6ab47bb5a03381a39fd241295aa5d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjViYWJlNmE2YWI0N2JiNWEwMzM4MWEzOWZkMjQxMjk1YWE1ZDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-13T10:40:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-13T10:40:02Z"}, "message": "Merge remote-tracking branch 'origin/master' into clonedCollect", "tree": {"sha": "be9f6c59cb762f520a2c8d6e52f29efb71bd981c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9f6c59cb762f520a2c8d6e52f29efb71bd981c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2265babe6a6ab47bb5a03381a39fd241295aa5d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlihjQUACgkQpp+NIls6\n19nvaBAAn1cEnyHMmnUDBaeBCdji+O5UqcWphbfrHcBO+rnL6VQ16m1JW8E+3uzp\ndjRv+L8LyVAwZmADIS30kCtXKo72cxNm5WT0I4wR8aT4wnS7FGXQfFrAeipAHj9r\ncfh6VnYnuLMOOpRzkhLgffxACJro3YiJcYS7At5aiKCDxmN+DIqZ6Uwl0G60ixGb\n9PfWywChvG3wZiXaMBpJpYDZEWxsebzy9GTX3DPPFhiNOXS8dEHYINtAP+ayg8CH\nblGZGSa3Qmp+TyVxX7N9L2jdoY9Evq7JQdSfskucourHZPXYZyjmo7mKxZbQjdv1\njFxU4i8+FSOpbW6OlEHhEp3c7BrADiVQI6kq+dDWnWJdDmr1MwVA+em/iYYpO3HJ\nWykd/IJ3UCrtIGmY7cdylLutU5AuZlhWk9nLtFWB4IkCoZDV7L8jbUPFpPBB54KZ\nHaxhDZdZNxxnOGFcPvT2krVNPffCytuxMtINDBhL4I5EzMuJMp8VQ9ffbY2QkCuV\nV+HBVh7CCSsEzU6n+po/1fVQET0AiYbbUqUTNe1HQzJer6K+SQHXGEl4VhshE8CD\n41ctXhGCSYMs5AMTSLNHKIGyDrDgN9cGVogKzDVMcLIJBlHklW6j50CUYAAhvJR0\narPluBHCinYZX+G+q9kE6OWCNMz1xcfATsmncQQo4EHiajL0VzE=\n=IAWD\n-----END PGP SIGNATURE-----", "payload": "tree be9f6c59cb762f520a2c8d6e52f29efb71bd981c\nparent b13d206a2271b202d15f739f2a02085210fe9787\nparent 628df79757057f6ba29ad1ef56b94f886e121bd4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486982402 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486982402 +0100\n\nMerge remote-tracking branch 'origin/master' into clonedCollect\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2265babe6a6ab47bb5a03381a39fd241295aa5d4", "html_url": "https://github.com/rust-lang/rust/commit/2265babe6a6ab47bb5a03381a39fd241295aa5d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2265babe6a6ab47bb5a03381a39fd241295aa5d4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13d206a2271b202d15f739f2a02085210fe9787", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d206a2271b202d15f739f2a02085210fe9787", "html_url": "https://github.com/rust-lang/rust/commit/b13d206a2271b202d15f739f2a02085210fe9787"}, {"sha": "628df79757057f6ba29ad1ef56b94f886e121bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/628df79757057f6ba29ad1ef56b94f886e121bd4", "html_url": "https://github.com/rust-lang/rust/commit/628df79757057f6ba29ad1ef56b94f886e121bd4"}], "stats": {"total": 332, "additions": 326, "deletions": 6}, "files": [{"sha": "8fdc1487bcc08be1f9ac8e20b946d49591d8fd10", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -1,6 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+* New [`mut_from_ref`] lint\n+\n ## 0.0.114 \u2014 2017-02-08\n * Rustup to rustc 1.17.0-nightly (c49d10207 2017-02-07)\n * Tests are now ui tests (testing the exact output of rustc)\n@@ -362,13 +364,15 @@ All notable changes to this project will be documented in this file.\n [`match_overlapping_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm\n [`match_ref_pats`]: https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats\n [`match_same_arms`]: https://github.com/Manishearth/rust-clippy/wiki#match_same_arms\n+[`match_wild_err_arm`]: https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm\n [`mem_forget`]: https://github.com/Manishearth/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/Manishearth/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op\n [`missing_docs_in_private_items`]: https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items\n [`mixed_case_hex_literals`]: https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals\n [`module_inception`]: https://github.com/Manishearth/rust-clippy/wiki#module_inception\n [`modulo_one`]: https://github.com/Manishearth/rust-clippy/wiki#modulo_one\n+[`mut_from_ref`]: https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref\n [`mut_mut`]: https://github.com/Manishearth/rust-clippy/wiki#mut_mut\n [`mutex_atomic`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic\n [`mutex_integer`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_integer"}, {"sha": "3660937262af7c1c80fde4430d7ee3b721d0d87b", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 186 lints included in this crate:\n+There are 188 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -271,13 +271,15 @@ name\n [match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                         | warn    | a match with overlapping arms\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                       | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n [match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                     | warn    | `match` with identical arm bodies\n+[match_wild_err_arm](https://github.com/Manishearth/rust-clippy/wiki#match_wild_err_arm)                               | warn    | a match with `Err(_)` arm and take drastic actions\n [mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                               | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                     | warn    | having a variable on both sides of an assign op\n [missing_docs_in_private_items](https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items)         | allow   | detects missing documentation for public and private members\n [mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                     | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                   | warn    | modules that have the same name as their parent module\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                               | warn    | taking a number modulo 1, which always returns 0\n+[mut_from_ref](https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref)                                           | warn    | fns that create mutable refs from immutable ref args\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n [mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                           | warn    | using a mutex where an atomic value could be used instead\n [mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type"}, {"sha": "de5945df81ffc66859dd5dbb42eca2f277015fbf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -15,6 +15,7 @@\n #![allow(needless_lifetimes)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n@@ -412,6 +413,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,\n         matches::MATCH_REF_PATS,\n+        matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,\n@@ -464,6 +466,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n         ptr::CMP_NULL,\n+        ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,"}, {"sha": "66b55c48455c33eebe43bd2f6c6619862d30a7ce", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -10,7 +10,8 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block, walk_ptrs_ty,\n+            is_expn_of};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -121,6 +122,28 @@ declare_lint! {\n     \"a match with overlapping arms\"\n }\n \n+/// **What it does:** Checks for arm which matches all errors with `Err(_)`\n+/// and take drastic actions like `panic!`.\n+///\n+/// **Why is this bad?** It is generally a bad practice, just like\n+/// catching all exceptions in java with `catch(Exception)`\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x : Result(i32, &str) = Ok(3);\n+/// match x {\n+///     Ok(_) => println!(\"ok\"),\n+///     Err(_) => panic!(\"err\"),\n+/// }\n+/// ```\n+declare_lint! {\n+    pub MATCH_WILD_ERR_ARM,\n+    Warn,\n+    \"a match with `Err(_)` arm and take drastic actions\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n@@ -130,7 +153,8 @@ impl LintPass for MatchPass {\n                     MATCH_REF_PATS,\n                     MATCH_BOOL,\n                     SINGLE_MATCH_ELSE,\n-                    MATCH_OVERLAPPING_ARM)\n+                    MATCH_OVERLAPPING_ARM,\n+                    MATCH_WILD_ERR_ARM)\n     }\n }\n \n@@ -143,6 +167,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_single_match(cx, ex, arms, expr);\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n+            check_wild_err_arm(cx, ex, arms);\n         }\n         if let ExprMatch(ref ex, ref arms, source) = expr.node {\n             check_match_ref_pats(cx, ex, arms, source, expr);\n@@ -322,6 +347,45 @@ fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n+fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n+    let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n+    if match_type(cx, ex_ty, &paths::RESULT) {\n+        for arm in arms {\n+            if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pats[0].node {\n+                let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n+                if_let_chain! {[\n+                    path_str == \"Err\",\n+                    inner.iter().any(|pat| pat.node == PatKind::Wild),\n+                    let ExprBlock(ref block) = arm.body.node,\n+                    is_panic_block(cx, block)\n+                ], {\n+                    // `Err(_)` arm with `panic!` found\n+                    span_note_and_lint(cx,\n+                                       MATCH_WILD_ERR_ARM,\n+                                       arm.pats[0].span,\n+                                       \"Err(_) will match all errors, maybe not a good idea\",\n+                                       arm.pats[0].span,\n+                                       \"to remove this warning, match each error seperately \\\n+                                        or use unreachable macro\");\n+                }}\n+            }\n+        }\n+    }\n+}\n+\n+// If the block contains only a `panic!` macro (as expression or statement)\n+fn is_panic_block(cx: &LateContext, block: &Block) -> bool {\n+    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+        (&Some(ref exp), 0, _) => {\n+            is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none()\n+        },\n+        (&None, 1, Some(stmt)) => {\n+            is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none()\n+        },\n+        _ => false,\n+    }\n+}\n+\n fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: MatchSource, expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {"}, {"sha": "e9176372ebce97a217d123e9fe89867111e7e559", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -5,7 +5,9 @@ use rustc::hir::map::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::NodeId;\n-use utils::{match_path, match_type, paths, span_lint};\n+use syntax::codemap::Span;\n+use syntax_pos::MultiSpan;\n+use utils::{match_path, match_type, paths, span_lint, span_lint_and_then};\n \n /// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless\n /// the references are mutable.\n@@ -44,13 +46,32 @@ declare_lint! {\n     \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n }\n \n+/// **What it does:** This lint checks for functions that take immutable references and return\n+/// mutable ones.\n+///\n+/// **Why is this bad?** This is trivially unsound, as one can create two mutable references\n+/// from the same (immutable!) source. This [error](https://github.com/rust-lang/rust/issues/39465)\n+/// actually lead to an interim Rust release 1.15.1.\n+///\n+/// **Known problems:** To be on the conservative side, if there's at least one mutable reference\n+/// with the output lifetime, this lint will not trigger. In practice, this case is unlikely anyway.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(&Foo) -> &mut Bar { .. }\n+/// ```\n+declare_lint! {\n+    pub MUT_FROM_REF,\n+    Warn,\n+    \"fns that create mutable refs from immutable ref args\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct PointerPass;\n \n impl LintPass for PointerPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PTR_ARG, CMP_NULL)\n+        lint_array!(PTR_ARG, CMP_NULL, MUT_FROM_REF)\n     }\n }\n \n@@ -111,6 +132,37 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n             }\n         }\n     }\n+\n+    if let FunctionRetTy::Return(ref ty) = decl.output {\n+        if let Some((out, MutMutable, _)) = get_rptr_lm(ty) {\n+            let mut immutables = vec![];\n+            for (_, ref mutbl, ref argspan) in\n+                decl.inputs\n+                    .iter()\n+                    .filter_map(|ty| get_rptr_lm(ty))\n+                    .filter(|&(lt, _, _)| lt.name == out.name) {\n+                if *mutbl == MutMutable {\n+                    return;\n+                }\n+                immutables.push(*argspan);\n+            }\n+            if immutables.is_empty() {\n+                return;\n+            }\n+            span_lint_and_then(cx, MUT_FROM_REF, ty.span, \"mutable borrow from immutable input(s)\", |db| {\n+                let ms = MultiSpan::from_spans(immutables);\n+                db.span_note(ms, \"immutable borrow here\");\n+            });\n+        }\n+    }\n+}\n+\n+fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability, Span)> {\n+    if let Ty_::TyRptr(ref lt, ref m) = ty.node {\n+        Some((lt, m.mutbl, ty.span))\n+    } else {\n+        None\n+    }\n }\n \n fn is_null_path(expr: &Expr) -> bool {"}, {"sha": "46a99293a354442eab9c1b3fb1156b62fbba9c32", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -283,5 +283,53 @@ fn overlapping() {\n     }\n }\n \n+fn match_wild_err_arm() {\n+    let x: Result<i32, &str> = Ok(3);\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => panic!(\"err\")\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {panic!()}\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {panic!();}\n+    }\n+\n+    // allowed when not with `panic!` block\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    // allowed when used with `unreachable!`\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!()}\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => unreachable!()\n+    }\n+\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => {unreachable!();}\n+    }\n+}\n+\n fn main() {\n }"}, {"sha": "bc8584b858722d2510f6ea8c2431e2e3e0ffd335", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -388,5 +388,37 @@ note: overlaps with this\n 275 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:292:9\n+    |\n+292 |         Err(_) => panic!(\"err\")\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:298:9\n+    |\n+298 |         Err(_) => {panic!()}\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:304:9\n+    |\n+304 |         Err(_) => {panic!();}\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "35bff9371d9e2fdb697184260ce0baee3f3abcbe", "filename": "tests/ui/mut_from_ref.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -0,0 +1,48 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+#![deny(mut_from_ref)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+trait Ouch {\n+    fn ouch(x: &Foo) -> &mut Foo;\n+}\n+\n+impl Ouch for Foo {\n+    fn ouch(x: &Foo) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+fn fail(x: &u32) -> &mut u16 {\n+    unimplemented!()\n+}\n+\n+fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+// this is OK, because the result borrows y\n+fn works<'a>(x: &u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+// this is also OK, because the result could borrow y\n+fn also_works<'a>(x: &'a u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    //TODO\n+}"}, {"sha": "5098d7d0ab562c573d11cf071cf6c09ed17c06c2", "filename": "tests/ui/mut_from_ref.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2265babe6a6ab47bb5a03381a39fd241295aa5d4/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=2265babe6a6ab47bb5a03381a39fd241295aa5d4", "patch": "@@ -0,0 +1,67 @@\n+error: mutable borrow from immutable input(s)\n+ --> $DIR/mut_from_ref.rs:9:39\n+  |\n+9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+  |                                       ^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/mut_from_ref.rs:4:9\n+  |\n+4 | #![deny(mut_from_ref)]\n+  |         ^^^^^^^^^^^^\n+note: immutable borrow here\n+ --> $DIR/mut_from_ref.rs:9:29\n+  |\n+9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+  |                             ^^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:15:25\n+   |\n+15 |     fn ouch(x: &Foo) -> &mut Foo;\n+   |                         ^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:15:16\n+   |\n+15 |     fn ouch(x: &Foo) -> &mut Foo;\n+   |                ^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:24:21\n+   |\n+24 | fn fail(x: &u32) -> &mut u16 {\n+   |                     ^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:24:12\n+   |\n+24 | fn fail(x: &u32) -> &mut u16 {\n+   |            ^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:28:50\n+   |\n+28 | fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+   |                                                  ^^^^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:28:25\n+   |\n+28 | fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+   |                         ^^^^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:32:67\n+   |\n+32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+   |                                                                   ^^^^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:32:27\n+   |\n+32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+   |                           ^^^^^^^     ^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}