{"sha": "e033d8c2a24ce7670d03054e7b932e387d32dcec", "node_id": "C_kwDOAAsO6NoAKGUwMzNkOGMyYTI0Y2U3NjcwZDAzMDU0ZTdiOTMyZTM4N2QzMmRjZWM", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T13:48:50Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T13:48:50Z"}, "message": "make navigation target go to original file location", "tree": {"sha": "fce3504590b5ae5c6f3bee4463fefc8fcc9c134c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce3504590b5ae5c6f3bee4463fefc8fcc9c134c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e033d8c2a24ce7670d03054e7b932e387d32dcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e033d8c2a24ce7670d03054e7b932e387d32dcec", "html_url": "https://github.com/rust-lang/rust/commit/e033d8c2a24ce7670d03054e7b932e387d32dcec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e033d8c2a24ce7670d03054e7b932e387d32dcec/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "html_url": "https://github.com/rust-lang/rust/commit/a7370c57256d2f4e9f32454e6e95ec3a311eb8be"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "a566a7589376b7ffdd78bb9c216b0ceda4b7ca36", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=e033d8c2a24ce7670d03054e7b932e387d32dcec", "patch": "@@ -170,7 +170,7 @@ impl NavigationTarget {\n impl ToNav for FileSymbol {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         NavigationTarget {\n-            file_id: self.file_id.original_file(db),\n+            file_id: self.original_file_id,\n             name: self.name.clone(),\n             kind: Some(match self.kind {\n                 FileSymbolKind::Function => SymbolKind::Function,\n@@ -517,7 +517,7 @@ impl TryToNav for hir::ConstParam {\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let sema = Semantics::new(db);\n-    let syntax = sema.parse_or_expand(symbol.file_id)?;\n+    let syntax = sema.parse_or_expand(symbol.hir_file_id)?;\n     let node = symbol.ptr.to_node(&syntax);\n \n     match_ast! {"}, {"sha": "fb62d2e7d70228a10be05891184235a5d42d3d5e", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=e033d8c2a24ce7670d03054e7b932e387d32dcec", "patch": "@@ -133,7 +133,7 @@ fn get_name_definition(\n     import_candidate: &FileSymbol,\n ) -> Option<Definition> {\n     let _p = profile::span(\"get_name_definition\");\n-    let file_id = import_candidate.file_id;\n+    let file_id = import_candidate.hir_file_id;\n \n     let candidate_node = import_candidate.ptr.to_node(&sema.parse_or_expand(file_id)?);\n     let candidate_name_node = if candidate_node.kind() != NAME {"}, {"sha": "401056aaaf3befcb3f44eed05a7fc63f2725f0a7", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e033d8c2a24ce7670d03054e7b932e387d32dcec/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=e033d8c2a24ce7670d03054e7b932e387d32dcec", "patch": "@@ -371,7 +371,8 @@ impl Query {\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FileSymbol {\n-    pub file_id: HirFileId,\n+    pub hir_file_id: HirFileId,\n+    pub original_file_id: FileId,\n     pub name: SmolStr,\n     pub kind: FileSymbolKind,\n     pub range: TextRange,\n@@ -478,7 +479,8 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n         },\n         range: node.text_range(),\n         ptr,\n-        file_id: file_id.into(),\n+        hir_file_id: file_id.into(),\n+        original_file_id: file_id,\n         name_range: Some(name_range),\n         container_name: None,\n     })\n@@ -505,10 +507,11 @@ fn collect_symbols_from_item_scope(\n     {\n         let loc = id.lookup(db);\n         let source = loc.source(db);\n+\n         let name = source.value.name()?;\n-        let file_id = loc.id.file_id();\n+        let name_range = source.with_value(name.syntax()).original_file_range(db.upcast());\n+        let hir_file_id = loc.id.file_id();\n \n-        let name_range = name.syntax().text_range();\n         let name = name.text().into();\n         let ptr = SyntaxNodePtr::new(source.value.syntax());\n \n@@ -532,10 +535,11 @@ fn collect_symbols_from_item_scope(\n         Some(FileSymbol {\n             name,\n             kind,\n-            range: source.value.syntax().text_range(),\n+            range: source.with_value(source.value.syntax()).original_file_range(db.upcast()).range,\n             container_name,\n-            file_id,\n-            name_range: Some(name_range),\n+            hir_file_id,\n+            original_file_id: name_range.file_id,\n+            name_range: Some(name_range.range),\n             ptr,\n         })\n     }\n@@ -548,18 +552,19 @@ fn collect_symbols_from_item_scope(\n         let loc = id.lookup(db);\n         let source = loc.source(db);\n         let name = source.value.name()?;\n-        let file_id = loc.id.file_id();\n-        let name_range = name.syntax().text_range();\n+        let name_range = source.with_value(name.syntax()).original_file_range(db.upcast());\n+        let hir_file_id = loc.id.file_id();\n         let name = name.text().into();\n         let ptr = SyntaxNodePtr::new(source.value.syntax());\n \n         Some(FileSymbol {\n             name,\n             kind,\n-            range: source.value.syntax().text_range(),\n+            range: source.with_value(source.value.syntax()).original_file_range(db.upcast()).range,\n             container_name: None,\n-            file_id,\n-            name_range: Some(name_range),\n+            hir_file_id,\n+            original_file_id: name_range.file_id,\n+            name_range: Some(name_range.range),\n             ptr,\n         })\n     }\n@@ -568,21 +573,22 @@ fn collect_symbols_from_item_scope(\n         let def_map = module_id.def_map(db);\n         let module_data = &def_map[module_id.local_id];\n         let declaration = module_data.origin.declaration()?;\n-        let file_id = declaration.file_id;\n+        let hir_file_id = declaration.file_id;\n \n         let module = declaration.to_node(db.upcast());\n         let name = module.name()?;\n-        let name_range = name.syntax().text_range();\n+        let name_range = declaration.with_value(name.syntax()).original_file_range(db.upcast());\n         let name = name.text().into();\n         let ptr = SyntaxNodePtr::new(module.syntax());\n \n         Some(FileSymbol {\n             name,\n             kind: FileSymbolKind::Module,\n-            range: module.syntax().text_range(),\n+            range: declaration.with_value(module.syntax()).original_file_range(db.upcast()).range,\n             container_name: None,\n-            file_id,\n-            name_range: Some(name_range),\n+            hir_file_id,\n+            original_file_id: name_range.file_id,\n+            name_range: Some(name_range.range),\n             ptr,\n         })\n     }"}]}