{"sha": "896f558f2b8e0bd29cc08f5af5e0edfe07783042", "node_id": "C_kwDOAAsO6NoAKDg5NmY1NThmMmI4ZTBiZDI5Y2MwOGY1YWY1ZTBlZGZlMDc3ODMwNDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T01:50:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T01:50:10Z"}, "message": "with isolation we want to be fully deterministic", "tree": {"sha": "831c9faf0bebc6d1f16322b93f4bf70178027e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831c9faf0bebc6d1f16322b93f4bf70178027e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/896f558f2b8e0bd29cc08f5af5e0edfe07783042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/896f558f2b8e0bd29cc08f5af5e0edfe07783042", "html_url": "https://github.com/rust-lang/rust/commit/896f558f2b8e0bd29cc08f5af5e0edfe07783042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/896f558f2b8e0bd29cc08f5af5e0edfe07783042/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "html_url": "https://github.com/rust-lang/rust/commit/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1420279247f46d39465f3babe61cfeb7316fb48a", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/896f558f2b8e0bd29cc08f5af5e0edfe07783042/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896f558f2b8e0bd29cc08f5af5e0edfe07783042/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=896f558f2b8e0bd29cc08f5af5e0edfe07783042", "patch": "@@ -1694,7 +1694,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn isatty(&mut self, miri_fd: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         #[cfg(unix)]\n-        {\n+        if matches!(this.machine.isolated_op, IsolatedOp::Allow) {\n             let miri_fd = this.read_scalar(miri_fd)?.to_i32()?;\n             if let Some(host_fd) =\n                 this.machine.file_handler.handles.get(&miri_fd).and_then(|fd| fd.as_unix_host_fd())\n@@ -1714,7 +1714,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n         // We are attemping to use a Unix interface on a non-Unix platform, or we are on a Unix\n-        // platform and the passed file descriptor is not open.\n+        // platform and the passed file descriptor is not open, or isolation is enabled\n         // FIXME: It should be possible to emulate this at least on Windows by using\n         // GetConsoleMode.\n         let enotty = this.eval_libc(\"ENOTTY\")?;"}]}