{"sha": "2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMGM4ZmZmOGEwNGRkOTk1ZGIwYWZhYWZiYTJhZDlhNWVmZjZmYzE=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-16T15:30:23Z"}, "committer": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T18:24:39Z"}, "message": "Various pattern cleanups", "tree": {"sha": "57eb0f1a236da2c1575f0824b4a67a0ccea87db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57eb0f1a236da2c1575f0824b4a67a0ccea87db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "html_url": "https://github.com/rust-lang/rust/commit/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde1b76b4b1d0d84f5691f4785906b31bb91f38d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde1b76b4b1d0d84f5691f4785906b31bb91f38d", "html_url": "https://github.com/rust-lang/rust/commit/fde1b76b4b1d0d84f5691f4785906b31bb91f38d"}], "stats": {"total": 115, "additions": 47, "deletions": 68}, "files": [{"sha": "fb4db6005aca5b9c22aa274e1275f8338017d1f5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -1179,13 +1179,10 @@ fn noop_visit_inline_asm<T: MutVisitor>(asm: &mut InlineAsm, vis: &mut T) {\n     for (op, _) in &mut asm.operands {\n         match op {\n             InlineAsmOperand::In { expr, .. }\n+            | InlineAsmOperand::Out { expr: Some(expr), .. }\n             | InlineAsmOperand::InOut { expr, .. }\n             | InlineAsmOperand::Sym { expr, .. } => vis.visit_expr(expr),\n-            InlineAsmOperand::Out { expr, .. } => {\n-                if let Some(expr) = expr {\n-                    vis.visit_expr(expr);\n-                }\n-            }\n+            InlineAsmOperand::Out { expr: None, .. } => {}\n             InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                 vis.visit_expr(in_expr);\n                 if let Some(out_expr) = out_expr {"}, {"sha": "cc699b237c21512427dabf68d257d7fc4de8fd66", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -714,13 +714,10 @@ fn walk_inline_asm<'a, V: Visitor<'a>>(visitor: &mut V, asm: &'a InlineAsm) {\n     for (op, _) in &asm.operands {\n         match op {\n             InlineAsmOperand::In { expr, .. }\n+            | InlineAsmOperand::Out { expr: Some(expr), .. }\n             | InlineAsmOperand::InOut { expr, .. }\n             | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n-            InlineAsmOperand::Out { expr, .. } => {\n-                if let Some(expr) = expr {\n-                    visitor.visit_expr(expr);\n-                }\n-            }\n+            InlineAsmOperand::Out { expr: None, .. } => {}\n             InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                 visitor.visit_expr(in_expr);\n                 if let Some(out_expr) = out_expr {"}, {"sha": "aaded7ba23bbdf65168ec3d0c85955123b4d2f74", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -1,3 +1,4 @@\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]"}, {"sha": "00c2f0a0299a1cf478ae2c356cf5d68ac87ec667", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -1664,13 +1664,10 @@ impl Debug for Statement<'_> {\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }\n-            Coverage(box ref coverage) => {\n-                if let Some(rgn) = &coverage.code_region {\n-                    write!(fmt, \"Coverage::{:?} for {:?}\", coverage.kind, rgn)\n-                } else {\n-                    write!(fmt, \"Coverage::{:?}\", coverage.kind)\n-                }\n+            Coverage(box self::Coverage { ref kind, code_region: Some(ref rgn) }) => {\n+                write!(fmt, \"Coverage::{:?} for {:?}\", kind, rgn)\n             }\n+            Coverage(box ref coverage) => write!(fmt, \"Coverage::{:?}\", coverage.kind),\n             CopyNonOverlapping(box crate::mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,"}, {"sha": "af7f7796522606a536f190e10ec748270c45b745", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -587,14 +587,12 @@ macro_rules! make_mir_visitor {\n                                 InlineAsmOperand::In { value, .. } => {\n                                     self.visit_operand(value, location);\n                                 }\n-                                InlineAsmOperand::Out { place, .. } => {\n-                                    if let Some(place) = place {\n-                                        self.visit_place(\n-                                            place,\n-                                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n-                                            location,\n-                                        );\n-                                    }\n+                                InlineAsmOperand::Out { place: Some(place), .. } => {\n+                                    self.visit_place(\n+                                        place,\n+                                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                                        location,\n+                                    );\n                                 }\n                                 InlineAsmOperand::InOut { in_value, out_place, .. } => {\n                                     self.visit_operand(in_value, location);\n@@ -610,7 +608,8 @@ macro_rules! make_mir_visitor {\n                                 | InlineAsmOperand::SymFn { value } => {\n                                     self.visit_constant(value, location);\n                                 }\n-                                InlineAsmOperand::SymStatic { def_id: _ } => {}\n+                                InlineAsmOperand::Out { place: None, .. }\n+                                | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                             }\n                         }\n                     }"}, {"sha": "b88bce844fa1992c31a64b9f64ead2cb9f68730b", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n use rustc_index::newtype_index;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::{\n@@ -716,17 +716,9 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                     PatKind::Variant { adt_def, variant_index, .. } => {\n                         Some(&adt_def.variants[variant_index])\n                     }\n-                    _ => {\n-                        if let ty::Adt(adt, _) = self.ty.kind() {\n-                            if !adt.is_enum() {\n-                                Some(&adt.variants[VariantIdx::new(0)])\n-                            } else {\n-                                None\n-                            }\n-                        } else {\n-                            None\n-                        }\n-                    }\n+                    _ => self.ty.ty_adt_def().and_then(|adt| {\n+                        if !adt.is_enum() { Some(adt.non_enum_variant()) } else { None }\n+                    }),\n                 };\n \n                 if let Some(variant) = variant {"}, {"sha": "4befeb1d827cfe74556cfd3709168f0a1cf63dfd", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -927,27 +927,29 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                if let Some(promoted) = promoted {\n-                    p!(print_value_path(def.did, substs));\n-                    p!(write(\"::{:?}\", promoted));\n-                } else {\n-                    match self.tcx().def_kind(def.did) {\n-                        DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n-                            p!(print_value_path(def.did, substs))\n-                        }\n-                        _ => {\n-                            if def.is_local() {\n-                                let span = self.tcx().def_span(def.did);\n-                                if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n-                                {\n-                                    p!(write(\"{}\", snip))\n-                                } else {\n-                                    print_underscore!()\n-                                }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                def,\n+                substs,\n+                promoted: Some(promoted),\n+            }) => {\n+                p!(print_value_path(def.did, substs));\n+                p!(write(\"::{:?}\", promoted));\n+            }\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n+                match self.tcx().def_kind(def.did) {\n+                    DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n+                        p!(print_value_path(def.did, substs))\n+                    }\n+                    _ => {\n+                        if def.is_local() {\n+                            let span = self.tcx().def_span(def.did);\n+                            if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n+                                p!(write(\"{}\", snip))\n                             } else {\n                                 print_underscore!()\n                             }\n+                        } else {\n+                            print_underscore!()\n                         }\n                     }\n                 }"}, {"sha": "ab927b794422303a44dea46e7a416f5a443728ac", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -2164,14 +2164,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::InlineAsmOperand::In { expr, .. } => {\n                     self.check_expr_asm_operand(expr, true);\n                 }\n-                hir::InlineAsmOperand::Out { expr, .. } => {\n-                    if let Some(expr) = expr {\n-                        self.check_expr_asm_operand(expr, false);\n-                    }\n-                }\n-                hir::InlineAsmOperand::InOut { expr, .. } => {\n+                hir::InlineAsmOperand::Out { expr: Some(expr), .. }\n+                | hir::InlineAsmOperand::InOut { expr, .. } => {\n                     self.check_expr_asm_operand(expr, false);\n                 }\n+                hir::InlineAsmOperand::Out { expr: None, .. } => {}\n                 hir::InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     self.check_expr_asm_operand(in_expr, true);\n                     if let Some(out_expr) = out_expr {"}, {"sha": "024370f8d3711e887b6711a4232994237ea22643", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=2b0c8fff8a04dd995db0afaafba2ad9a5eff6fc1", "patch": "@@ -334,12 +334,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n                         | hir::InlineAsmOperand::Sym { expr, .. } => self.consume_expr(expr),\n-                        hir::InlineAsmOperand::Out { expr, .. } => {\n-                            if let Some(expr) = expr {\n-                                self.mutate_expr(expr);\n-                            }\n-                        }\n-                        hir::InlineAsmOperand::InOut { expr, .. } => {\n+                        hir::InlineAsmOperand::Out { expr: Some(expr), .. }\n+                        | hir::InlineAsmOperand::InOut { expr, .. } => {\n                             self.mutate_expr(expr);\n                         }\n                         hir::InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n@@ -348,7 +344,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 self.mutate_expr(out_expr);\n                             }\n                         }\n-                        hir::InlineAsmOperand::Const { .. } => {}\n+                        hir::InlineAsmOperand::Out { expr: None, .. }\n+                        | hir::InlineAsmOperand::Const { .. } => {}\n                     }\n                 }\n             }"}]}