{"sha": "b7093e51c9352c22e780a5a5039da59297c4e846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MDkzZTUxYzkzNTJjMjJlNzgwYTVhNTAzOWRhNTkyOTdjNGU4NDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:49Z"}, "message": "Rollup merge of #57454 - sinkuu:fmt_cleanup, r=joshtriplett\n\nSome cleanups for core::fmt", "tree": {"sha": "af6e2e561365f1718094d0d0e37598c443ab10a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6e2e561365f1718094d0d0e37598c443ab10a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7093e51c9352c22e780a5a5039da59297c4e846", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4JCRBK7hj4Ov3rIwAAdHIIAKdJRK9uVYrQcoRJuK9T5E8r\nBzJZUjc9N1D8El9TaSqbUR0XXEAVrcYe4II1VJbv2raWDl+Vi2yQvvyRDsO2/3wB\n3F+VKGT6lxXAug90QLNSQKQUP4YL3o/hBF5n8b9UrjHyTdlPPrKifAG9/V1hEPrs\nCK6l9nhf12j9NlfJh9UteABnN16Pglz/6GVO6dqEUClToigiQhJzi2EpV/DOivUo\nzGAH3ZnPvnWN5lM2Lmgnc6XGZR9iQq0xALFRsKeByL4O7YMabTb/54mo2zHhkbL5\nFyA6X9dfekuLzVMBrTL6XM5qBHnvDgFE8Ppe+LCnD0j/GFslBy5koCqZ5FdBf04=\n=kY5a\n-----END PGP SIGNATURE-----\n", "payload": "tree af6e2e561365f1718094d0d0e37598c443ab10a2\nparent 36c7cde9e080af5b5bc4b0591f39f7f44c3e04de\nparent 12ae3651f891d22f804c67923d02cbdfa10fa60d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353609 +0100\ncommitter GitHub <noreply@github.com> 1547353609 +0100\n\nRollup merge of #57454 - sinkuu:fmt_cleanup, r=joshtriplett\n\nSome cleanups for core::fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7093e51c9352c22e780a5a5039da59297c4e846", "html_url": "https://github.com/rust-lang/rust/commit/b7093e51c9352c22e780a5a5039da59297c4e846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7093e51c9352c22e780a5a5039da59297c4e846/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c7cde9e080af5b5bc4b0591f39f7f44c3e04de", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c7cde9e080af5b5bc4b0591f39f7f44c3e04de", "html_url": "https://github.com/rust-lang/rust/commit/36c7cde9e080af5b5bc4b0591f39f7f44c3e04de"}, {"sha": "12ae3651f891d22f804c67923d02cbdfa10fa60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ae3651f891d22f804c67923d02cbdfa10fa60d", "html_url": "https://github.com/rust-lang/rust/commit/12ae3651f891d22f804c67923d02cbdfa10fa60d"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "214b5d3a84f24c4bb3f88af4cb8063eea18545a0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b7093e51c9352c22e780a5a5039da59297c4e846/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7093e51c9352c22e780a5a5039da59297c4e846/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b7093e51c9352c22e780a5a5039da59297c4e846", "patch": "@@ -191,29 +191,8 @@ pub trait Write {\n     /// assert_eq!(&buf, \"world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n-        // This Adapter is needed to allow `self` (of type `&mut\n-        // Self`) to be cast to a Write (below) without\n-        // requiring a `Sized` bound.\n-        struct Adapter<'a,T: ?Sized +'a>(&'a mut T);\n-\n-        impl<T: ?Sized> Write for Adapter<'_, T>\n-            where T: Write\n-        {\n-            fn write_str(&mut self, s: &str) -> Result {\n-                self.0.write_str(s)\n-            }\n-\n-            fn write_char(&mut self, c: char) -> Result {\n-                self.0.write_char(c)\n-            }\n-\n-            fn write_fmt(&mut self, args: Arguments) -> Result {\n-                self.0.write_fmt(args)\n-            }\n-        }\n-\n-        write(&mut Adapter(self), args)\n+    fn write_fmt(mut self: &mut Self, args: Arguments) -> Result {\n+        write(&mut self, args)\n     }\n }\n \n@@ -268,7 +247,7 @@ struct Void {\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n            issue = \"0\")]\n@@ -278,14 +257,6 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n-           issue = \"0\")]\n-impl Clone for ArgumentV1<'_> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n     fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n@@ -1105,7 +1076,7 @@ impl<'a> Formatter<'a> {\n                 self.args[i].as_usize()\n             }\n             rt::v1::Count::NextParam => {\n-                self.curarg.next().and_then(|arg| arg.as_usize())\n+                self.curarg.next()?.as_usize()\n             }\n         }\n     }\n@@ -1171,15 +1142,15 @@ impl<'a> Formatter<'a> {\n             sign = Some('+'); width += 1;\n         }\n \n-        let mut prefixed = false;\n-        if self.alternate() {\n-            prefixed = true; width += prefix.chars().count();\n+        let prefixed = self.alternate();\n+        if prefixed {\n+            width += prefix.chars().count();\n         }\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n         let write_prefix = |f: &mut Formatter| {\n             if let Some(c) = sign {\n-                f.buf.write_str(c.encode_utf8(&mut [0; 4]))?;\n+                f.buf.write_char(c)?;\n             }\n             if prefixed { f.buf.write_str(prefix) }\n             else { Ok(()) }\n@@ -1341,7 +1312,7 @@ impl<'a> Formatter<'a> {\n \n                 // remove the sign from the formatted parts\n                 formatted.sign = b\"\";\n-                width = if width < sign.len() { 0 } else { width - sign.len() };\n+                width = width.saturating_sub(sign.len());\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n                 self.align = rt::v1::Alignment::Right;"}, {"sha": "55a7ba181e5271d5a4e7f8188ba3714934e765d1", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7093e51c9352c22e780a5a5039da59297c4e846/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7093e51c9352c22e780a5a5039da59297c4e846/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=b7093e51c9352c22e780a5a5039da59297c4e846", "patch": "@@ -425,8 +425,7 @@ impl<'a> Pattern<'a> for char {\n     #[inline]\n     fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n         let mut utf8_encoded = [0; 4];\n-        self.encode_utf8(&mut utf8_encoded);\n-        let utf8_size = self.len_utf8();\n+        let utf8_size = self.encode_utf8(&mut utf8_encoded).len();\n         CharSearcher {\n             haystack,\n             finger: 0,"}]}