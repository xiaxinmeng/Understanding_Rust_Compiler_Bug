{"sha": "d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjM4ZDZiM2M5ZDFlZTUyYTM2MGMzY2U2MWU1NGI3YWE5MWQ0MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T21:38:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T21:38:53Z"}, "message": "Auto merge of #82341 - GuillaumeGomez:rollup-t7y7tyg, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #80595 (`impl PartialEq<Punct> for char`; symmetry for #78636)\n - #81991 (Fix panic in 'remove semicolon' when types are not local)\n - #82176 (fix MIR fn-ptr pretty-printing)\n - #82244 (Keep consistency in example for Stdin StdinLock)\n - #82260 (rustc: Show ``@path`` usage in stable)\n - #82316 (Fix minor mistake in LTO docs.)\n - #82332 (Don't generate src link on dummy spans)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "33ce45d4d6fd685e3fbd9b02da5eaff94090a872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ce45d4d6fd685e3fbd9b02da5eaff94090a872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "html_url": "https://github.com/rust-lang/rust/commit/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b30a639d5abd1270ade35d9bd92271f5a5ba18", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b30a639d5abd1270ade35d9bd92271f5a5ba18", "html_url": "https://github.com/rust-lang/rust/commit/83b30a639d5abd1270ade35d9bd92271f5a5ba18"}, {"sha": "fc0cb5d5eb58135cde86f28895e8c282bb2e77d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0cb5d5eb58135cde86f28895e8c282bb2e77d3", "html_url": "https://github.com/rust-lang/rust/commit/fc0cb5d5eb58135cde86f28895e8c282bb2e77d3"}], "stats": {"total": 142, "additions": 117, "deletions": 25}, "files": [{"sha": "79bb21b29fc9b47cc3b4a4fe0a30975355c7716e", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -812,7 +812,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n     } else {\n         \"\\n    --help -v           Print the full set of options rustc accepts\"\n     };\n-    let at_path = if verbose && nightly_build {\n+    let at_path = if verbose {\n         \"    @path               Read newline separated options from `path`\\n\"\n     } else {\n         \"\""}, {"sha": "53c164d44b3e159cb772dc31129a90d68663ff4e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -1018,7 +1018,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"{:?}\", char::try_from(int).unwrap()))\n             }\n             // Raw pointers\n-            (Scalar::Int(int), ty::RawPtr(_)) => {\n+            (Scalar::Int(int), ty::RawPtr(_) | ty::FnPtr(_)) => {\n                 let data = int.assert_bits(self.tcx().data_layout.pointer_size);\n                 self = self.typed_value(\n                     |mut this| {\n@@ -1030,15 +1030,18 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n-                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n-                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // FIXME: We should probably have a helper method to share code with the \"Byte strings\"\n                 // printing above (which also has to handle pointers to all sorts of things).\n-                let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n-                self = self.typed_value(\n-                    |this| this.print_value_path(instance.def_id(), instance.substs),\n-                    |this| this.print_type(ty),\n-                    \" as \",\n-                )?;\n+                match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                    Some(GlobalAlloc::Function(instance)) => {\n+                        self = self.typed_value(\n+                            |this| this.print_value_path(instance.def_id(), instance.substs),\n+                            |this| this.print_type(ty),\n+                            \" as \",\n+                        )?;\n+                    }\n+                    _ => self = self.pretty_print_const_pointer(ptr, ty, print_ty)?,\n+                }\n             }\n             // For function type zsts just printing the path is enough\n             (Scalar::Int(int), ty::FnDef(d, s)) if int == ScalarInt::ZST => {"}, {"sha": "46ecd33cc5b35d76826c38e8bf67289dd468d608", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -112,7 +112,7 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n                 }\n                 ScalarMaybeUninit::Uninit => cx.typed_value(\n                     |mut this| {\n-                        this.write_str(\"{uninit \")?;\n+                        this.write_str(\"uninit \")?;\n                         Ok(this)\n                     },\n                     |this| this.print_type(ty),"}, {"sha": "f5e9cc1efcc45d9dbc544f0dd1a9e41a41293261", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -1074,13 +1074,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);\n         let needs_box = match (last_expr_ty.kind(), expected_ty.kind()) {\n+            (ty::Opaque(last_def_id, _), ty::Opaque(exp_def_id, _))\n+                if last_def_id == exp_def_id =>\n+            {\n+                StatementAsExpression::CorrectType\n+            }\n             (ty::Opaque(last_def_id, last_bounds), ty::Opaque(exp_def_id, exp_bounds)) => {\n                 debug!(\n                     \"both opaque, likely future {:?} {:?} {:?} {:?}\",\n                     last_def_id, last_bounds, exp_def_id, exp_bounds\n                 );\n-                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_def_id.expect_local());\n-                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_def_id.expect_local());\n+\n+                let (last_local_id, exp_local_id) =\n+                    match (last_def_id.as_local(), exp_def_id.as_local()) {\n+                        (Some(last_hir_id), Some(exp_hir_id)) => (last_hir_id, exp_hir_id),\n+                        (_, _) => return None,\n+                    };\n+\n+                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_local_id);\n+                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_local_id);\n+\n                 match (\n                     &self.tcx.hir().expect_item(last_hir_id).kind,\n                     &self.tcx.hir().expect_item(exp_hir_id).kind,"}, {"sha": "5f1f7d8cac418f89481ca5049fb320068c141ded", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -842,13 +842,20 @@ impl fmt::Debug for Punct {\n     }\n }\n \n-#[stable(feature = \"proc_macro_punct_eq\", since = \"1.49.0\")]\n+#[stable(feature = \"proc_macro_punct_eq\", since = \"1.50.0\")]\n impl PartialEq<char> for Punct {\n     fn eq(&self, rhs: &char) -> bool {\n         self.as_char() == *rhs\n     }\n }\n \n+#[stable(feature = \"proc_macro_punct_eq_flipped\", since = \"1.52.0\")]\n+impl PartialEq<Punct> for char {\n+    fn eq(&self, rhs: &Punct) -> bool {\n+        *self == rhs.as_char()\n+    }\n+}\n+\n /// An identifier (`ident`).\n #[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]"}, {"sha": "d1f9049c8fabbb9dcee67a72748c74a9718ae290", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -251,8 +251,8 @@ pub struct Stdin {\n ///     let mut buffer = String::new();\n ///     let stdin = io::stdin(); // We get `Stdin` here.\n ///     {\n-///         let mut stdin_lock = stdin.lock(); // We get `StdinLock` here.\n-///         stdin_lock.read_to_string(&mut buffer)?;\n+///         let mut handle = stdin.lock(); // We get `StdinLock` here.\n+///         handle.read_to_string(&mut buffer)?;\n ///     } // `StdinLock` is dropped here.\n ///     Ok(())\n /// }"}, {"sha": "1883346430be024e7adc725d1496857fde0068b7", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -299,9 +299,9 @@ opt-level=0`](#opt-level)). That is:\n * When `-C lto` is not specified:\n   * `codegen-units=1`: disable LTO.\n   * `opt-level=0`: disable LTO.\n-* When `-C lto=true`:\n-  * `lto=true`: 16 codegen units, perform fat LTO across crates.\n-  * `codegen-units=1` + `lto=true`: 1 codegen unit, fat LTO across crates.\n+* When `-C lto` is specified:\n+  * `lto`: 16 codegen units, perform fat LTO across crates.\n+  * `codegen-units=1` + `lto`: 1 codegen unit, fat LTO across crates.\n \n See also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n "}, {"sha": "9a2319f6e379d83d249a268db20260c7578b4562", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -1852,6 +1852,10 @@ impl Span {\n         self.0\n     }\n \n+    crate fn is_dummy(&self) -> bool {\n+        self.0.is_dummy()\n+    }\n+\n     crate fn filename(&self, sess: &Session) -> FileName {\n         sess.source_map().span_to_filename(self.0)\n     }"}, {"sha": "7ca355ed11cc78994e224584d10238a55839c63a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -1638,6 +1638,9 @@ impl Context<'_> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     fn src_href(&self, item: &clean::Item) -> Option<String> {\n+        if item.source.is_dummy() {\n+            return None;\n+        }\n         let mut root = self.root_path();\n         let mut path = String::new();\n         let cnum = item.source.cnum(self.sess());"}, {"sha": "a1d183df0f1f287e7fbfe1b1795409849b0a22eb", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -0,0 +1,12 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Unsized.html\n+// @has - '//h3[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n+// @!has - '//h3[@id=\"impl-Sized\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//h3[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n+// @!has - '//h3[@id=\"impl-Sync\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//h3[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n+// @has - '//h3[@id=\"impl-Any\"]/a[@class=\"srclink\"]' '[src]'\n+pub struct Unsized {\n+    data: [u8],\n+}"}, {"sha": "5683c45adf26d0c07c1b54e042e6cf228bd4ea6a", "filename": "src/test/ui/suggestions/auxiliary/issue-81839.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+pub struct Test {}\n+\n+impl Test {\n+    pub async fn answer_str(&self, _s: &str) -> Test {\n+        Test {}\n+    }\n+}"}, {"sha": "0b9b7aefe735dd123727de92e2503756812ca259", "filename": "src/test/ui/suggestions/issue-81839.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:issue-81839.rs\n+// edition:2018\n+\n+extern crate issue_81839;\n+\n+async fn test(ans: &str, num: i32, cx: &issue_81839::Test) -> u32 {\n+    match num {\n+        1 => {\n+            cx.answer_str(\"hi\");\n+        }\n+        _ => cx.answer_str(\"hi\"), //~ `match` arms have incompatible types\n+    }\n+\n+    1\n+}\n+\n+fn main() {}"}, {"sha": "1a289d39e446786d16a0f254c4ca7754d3d91fee", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/issue-81839.rs:11:14\n+   |\n+LL | /     match num {\n+LL | |         1 => {\n+LL | |             cx.answer_str(\"hi\");\n+   | |             --------------------\n+   | |             |                  |\n+   | |             |                  help: consider removing this semicolon\n+   | |             this is found to be of type `()`\n+LL | |         }\n+LL | |         _ => cx.answer_str(\"hi\"),\n+   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+   | \n+  ::: $DIR/auxiliary/issue-81839.rs:6:49\n+   |\n+LL |       pub async fn answer_str(&self, _s: &str) -> Test {\n+   |                                                   ---- the `Output` of this `async fn`'s found opaque type\n+   |\n+   = note:     expected type `()`\n+           found opaque type `impl Future`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fae0c498b440a0e57d3a7621dac8f7d5194447b5", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=d2b38d6b3c9d1ee52a360c3ce61e54b7aa91d405", "patch": "@@ -24,13 +24,10 @@ help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n    |                               ^^^^^^\n-help: consider removing this semicolon and boxing the expressions\n-   |\n-LL |             Box::new(async_dummy())\n-LL |\n-LL |         }\n-LL |         false => Box::new(async_dummy()),\n+help: consider removing this semicolon\n    |\n+LL |             async_dummy()\n+   |                         --\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:39:18"}]}