{"sha": "0895590c53919bb235771947ae395ab0d1751b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTU1OTBjNTM5MTliYjIzNTc3MTk0N2FlMzk1YWIwZDE3NTFiNGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-29T14:37:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:30:10Z"}, "message": "rustc: rename mir::LocalDecl's source_info to visibility_source_info.", "tree": {"sha": "6ffe281ae3a2d00d090c51cb06180d3039b657cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ffe281ae3a2d00d090c51cb06180d3039b657cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0895590c53919bb235771947ae395ab0d1751b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0895590c53919bb235771947ae395ab0d1751b4d", "html_url": "https://github.com/rust-lang/rust/commit/0895590c53919bb235771947ae395ab0d1751b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0895590c53919bb235771947ae395ab0d1751b4d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10c157bd860c7d6baad56aeee550a84927e1e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10c157bd860c7d6baad56aeee550a84927e1e29", "html_url": "https://github.com/rust-lang/rust/commit/b10c157bd860c7d6baad56aeee550a84927e1e29"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "e5d28fdf785fcea08460ccfc85d3638206bbcb11", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -25,8 +25,8 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     mutability,\n     ty,\n     name,\n-    source_info,\n     syntactic_source_info,\n+    visibility_source_info,\n     internal,\n     is_user_variable\n });"}, {"sha": "2251d4a4b60998d4a84f50587b4ec2e9ad4a9384", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -505,10 +505,6 @@ pub struct LocalDecl<'tcx> {\n     /// to generate better debuginfo.\n     pub name: Option<Name>,\n \n-    /// Source info of the local. The `SourceScope` is the *visibility* one,\n-    /// not the the *syntactic* one (see `syntactic_source_info` for more details).\n-    pub source_info: SourceInfo,\n-\n     /// The *syntactic* (i.e. not visibility) source scope the local is defined\n     /// in. If the local was defined in a let-statement, this\n     /// is *within* the let-statement, rather than outside\n@@ -562,7 +558,7 @@ pub struct LocalDecl<'tcx> {\n     /// To allow both uses to work, we need to have more than a single scope\n     /// for a local. We have the `syntactic_source_info.scope` represent the\n     /// \"syntactic\" lint scope (with a variable being under its let\n-    /// block) while the `source_info.scope` represents the \"local variable\"\n+    /// block) while the `visibility_source_info.scope` represents the \"local variable\"\n     /// scope (where the \"rest\" of a block is under all prior let-statements).\n     ///\n     /// The end result looks like this:\n@@ -581,14 +577,18 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502 \u2502{ let y: u32 }\n     ///  \u2502 \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.source_info.scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.visibility_source_info.scope\n     ///  \u2502 \u2502 \u2502\u2190 `y + 2`\n     ///  \u2502\n     ///  \u2502 \u2502{ let x: u32 }\n-    ///  \u2502 \u2502\u2190 x.source_info.scope\n+    ///  \u2502 \u2502\u2190 x.visibility_source_info.scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n     /// ```\n     pub syntactic_source_info: SourceInfo,\n+\n+    /// Source info of the local. The `SourceScope` is the *visibility* one,\n+    /// not the the *syntactic* one (see `syntactic_source_info` for more details).\n+    pub visibility_source_info: SourceInfo,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -599,11 +599,11 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty,\n             name: None,\n-            source_info: SourceInfo {\n+            syntactic_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_source_info: SourceInfo {\n+            visibility_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -619,11 +619,11 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty,\n             name: None,\n-            source_info: SourceInfo {\n+            syntactic_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_source_info: SourceInfo {\n+            visibility_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -640,11 +640,11 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n-            source_info: SourceInfo {\n+            syntactic_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_source_info: SourceInfo {\n+            visibility_source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n@@ -2200,8 +2200,8 @@ BraceStructTypeFoldableImpl! {\n         internal,\n         ty,\n         name,\n-        source_info,\n         syntactic_source_info,\n+        visibility_source_info,\n     }\n }\n "}, {"sha": "3aec9f10e3d5e17694ae22f2da9337af997ac858", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -714,18 +714,18 @@ macro_rules! make_mir_visitor {\n                     mutability: _,\n                     ref $($mutability)* ty,\n                     name: _,\n-                    ref $($mutability)* source_info,\n-                    internal: _,\n                     ref $($mutability)* syntactic_source_info,\n+                    ref $($mutability)* visibility_source_info,\n+                    internal: _,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty, TyContext::LocalDecl {\n                     local,\n-                    source_info: *source_info,\n+                    source_info: *visibility_source_info,\n                 });\n                 self.visit_source_info(syntactic_source_info);\n-                self.visit_source_info(source_info);\n+                self.visit_source_info(visibility_source_info);\n             }\n \n             fn super_source_scope(&mut self,"}, {"sha": "81d8e510d11ea293c5ab3449239e2c6944386368", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -65,7 +65,7 @@ pub fn create_mir_scopes(cx: &CodegenCx, mir: &Mir, debug_context: &FunctionDebu\n     let mut has_variables = BitVector::new(mir.source_scopes.len());\n     for var in mir.vars_iter() {\n         let decl = &mir.local_decls[var];\n-        has_variables.insert(decl.source_info.scope.index());\n+        has_variables.insert(decl.visibility_source_info.scope.index());\n     }\n \n     // Instantiate all scopes."}, {"sha": "8dd8cc3f4bc610b67d4bb8a72b53526a999dac45", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -265,7 +265,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n \n             if let Some(name) = decl.name {\n                 // User variable\n-                let debug_scope = fx.scopes[decl.source_info.scope];\n+                let debug_scope = fx.scopes[decl.visibility_source_info.scope];\n                 let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo;\n \n                 if !memory_locals.contains(local.index()) && !dbg {\n@@ -276,7 +276,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n                 debug!(\"alloc: {:?} ({}) -> place\", local, name);\n                 let place = PlaceRef::alloca(&bx, layout, &name.as_str());\n                 if dbg {\n-                    let (scope, span) = fx.debug_loc(decl.source_info);\n+                    let (scope, span) = fx.debug_loc(decl.visibility_source_info);\n                     declare_local(&bx, &fx.debug_context, name, layout.ty, scope,\n                         VariableAccess::DirectVariable { alloca: place.llval },\n                         VariableKind::LocalVariable, span);"}, {"sha": "eedf8decd168dbc4cf5d2b25490a10aa078b86b2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -398,7 +398,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let borrow_span = self.mir.source_info(borrow.reserve_location).span;\n         let proper_span = match *root_place {\n-            Place::Local(local) => self.mir.local_decls[local].source_info.span,\n+            Place::Local(local) => self.mir.local_decls[local].visibility_source_info.span,\n             _ => drop_span,\n         };\n "}, {"sha": "7b6bec06fa65ccb43fc8e448d556c45f288b3fc2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -306,7 +306,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                 None => continue,\n             }\n \n-            let source_info = local_decl.source_info;\n+            let source_info = local_decl.visibility_source_info;\n             let mut_span = tcx.sess.codemap().span_until_non_whitespace(source_info.span);\n \n             tcx.struct_span_lint_node("}, {"sha": "88b9afbd138627e6eb238c1f973fc92faad40a5d", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                             None => {\n                                 err.span_label(\n-                                    mir.local_decls[local].source_info.span,\n+                                    mir.local_decls[local].visibility_source_info.span,\n                                     \"borrow may end up in a temporary, created here\",\n                                 );\n "}, {"sha": "f8a0eb3749c0b64cf4009d0b4bb7e2f19d3a02fc", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -1201,7 +1201,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        let span = local_decl.source_info.span;\n+        let span = local_decl.visibility_source_info.span;\n         let ty = local_decl.ty;\n \n         // Erase the regions from `ty` to get a global type.  The"}, {"sha": "049d4340193af68d3b3bf7fa82a077bada0eb9f0", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -246,8 +246,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         mutability: Mutability::Mut,\n                         ty: ptr_ty,\n                         name: None,\n-                        source_info,\n                         syntactic_source_info: source_info,\n+                        visibility_source_info: source_info,\n                         internal: true,\n                         is_user_variable: false\n                     });"}, {"sha": "e6ad36f3034bb5ae156d86815e4f4c23a5b7fc66", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -294,22 +294,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         block.unit()\n     }\n \n-    /// Declares the bindings of the given pattern and returns the source scope\n+    /// Declares the bindings of the given pattern and returns the visibility scope\n     /// for the bindings in this patterns, if such a scope had to be created.\n     /// NOTE: Declaring the bindings should always be done in their drop scope.\n     pub fn declare_bindings(&mut self,\n-                            mut var_scope: Option<SourceScope>,\n+                            mut visibility_scope: Option<SourceScope>,\n                             scope_span: Span,\n                             lint_level: LintLevel,\n                             pattern: &Pattern<'tcx>,\n                             has_guard: ArmHasGuard)\n                             -> Option<SourceScope> {\n-        assert!(!(var_scope.is_some() && lint_level.is_explicit()),\n-                \"can't have both a var and a lint scope at the same time\");\n+        assert!(!(visibility_scope.is_some() && lint_level.is_explicit()),\n+                \"can't have both a visibility and a lint scope at the same time\");\n         let mut syntactic_scope = self.source_scope;\n         self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n-            if var_scope.is_none() {\n-                var_scope = Some(this.new_source_scope(scope_span,\n+            if visibility_scope.is_none() {\n+                visibility_scope = Some(this.new_source_scope(scope_span,\n                                                            LintLevel::Inherited,\n                                                            None));\n                 // If we have lints, create a new source scope\n@@ -320,18 +320,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         this.new_source_scope(scope_span, lint_level, None);\n                 }\n             }\n-            let source_info = SourceInfo {\n-                span,\n-                scope: var_scope.unwrap()\n-            };\n             let syntactic_source_info = SourceInfo {\n                 span,\n                 scope: syntactic_scope,\n             };\n-            this.declare_binding(source_info, syntactic_source_info, mutability, name, var,\n+            let visibility_source_info = SourceInfo {\n+                span,\n+                scope: visibility_scope.unwrap()\n+            };\n+            this.declare_binding(syntactic_source_info, visibility_source_info, mutability, name, var,\n                                  ty, has_guard);\n         });\n-        var_scope\n+        visibility_scope\n     }\n \n     pub fn storage_live_binding(&mut self,\n@@ -1117,25 +1117,25 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// `&T`. The second local is a binding for occurrences of `var`\n     /// in the arm body, which will have type `T`.\n     fn declare_binding(&mut self,\n-                       source_info: SourceInfo,\n                        syntactic_source_info: SourceInfo,\n+                       visibility_source_info: SourceInfo,\n                        mutability: Mutability,\n                        name: Name,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard)\n     {\n-        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, source_info={:?}, \\\n+        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_source_info={:?}, \\\n                 syntactic_source_info={:?})\",\n-               var_id, name, var_ty, source_info, syntactic_source_info);\n+               var_id, name, var_ty, visibility_source_info, syntactic_source_info);\n \n         let tcx = self.hir.tcx();\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n-            source_info,\n             syntactic_source_info,\n+            visibility_source_info,\n             internal: false,\n             is_user_variable: true,\n         };\n@@ -1146,8 +1146,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 mutability,\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n                 name: Some(name),\n-                source_info,\n                 syntactic_source_info,\n+                visibility_source_info,\n                 internal: false,\n                 is_user_variable: true,\n             });"}, {"sha": "527e605a16ac1f16ab5160e1d0d2c669acea139c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -664,8 +664,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n-                source_info,\n                 syntactic_source_info: source_info,\n+                visibility_source_info: source_info,\n                 name,\n                 internal: false,\n                 is_user_variable: false,"}, {"sha": "321f307a43c74069385c23285e94d8ee3ab8f36f", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     fn gather_args(&mut self) {\n         for arg in self.mir.args_iter() {\n             let path = self.data.rev_lookup.locals[arg];\n-            let span = self.mir.local_decls[arg].source_info.span;\n+            let span = self.mir.local_decls[arg].visibility_source_info.span;\n \n             let init = self.data.inits.push(Init {\n                 path, span, kind: InitKind::Deep"}, {"sha": "f168292897ea90aa40c9ed2195fabc0935e51745", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -141,8 +141,8 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability, ty, name: None,\n-        source_info,\n         syntactic_source_info: source_info,\n+        visibility_source_info: source_info,\n         internal: false,\n         is_user_variable: false\n     }"}, {"sha": "48de30f1ff18a3e0a04eaf262007baeb144be7b4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         // Internal locals are used in the `move_val_init` desugaring.\n                         // We want to check unsafety against the source info of the\n                         // desugaring, rather than the source info of the RHS.\n-                        self.source_info = self.mir.local_decls[local].source_info;\n+                        self.source_info = self.mir.local_decls[local].visibility_source_info;\n                     }\n                 }\n                 let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);"}, {"sha": "940a13a42df9f1a131c38c93ef4d3558f2eb82ec", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -300,8 +300,8 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n         name: None,\n-        source_info,\n         syntactic_source_info: source_info,\n+        visibility_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -641,8 +641,8 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         mutability: Mutability::Mut,\n         ty: tcx.mk_nil(),\n         name: None,\n-        source_info,\n         syntactic_source_info: source_info,\n+        visibility_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -657,8 +657,8 @@ fn create_generator_drop_shim<'a, 'tcx>(\n             mutbl: hir::Mutability::MutMutable,\n         }),\n         name: None,\n-        source_info,\n         syntactic_source_info: source_info,\n+        visibility_source_info: source_info,\n         internal: false,\n         is_user_variable: false,\n     };"}, {"sha": "868d7cadde4ac90a6810d3b762d19fdf0ccd057e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -398,11 +398,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 for loc in callee_mir.vars_and_temps_iter() {\n                     let mut local = callee_mir.local_decls[loc].clone();\n \n-                    local.source_info.scope = scope_map[local.source_info.scope];\n-                    local.source_info.span = callsite.location.span;\n                     local.syntactic_source_info.scope =\n                         scope_map[local.syntactic_source_info.scope];\n                     local.syntactic_source_info.span = callsite.location.span;\n+                    local.visibility_source_info.scope =\n+                        scope_map[local.visibility_source_info.scope];\n+                    local.visibility_source_info.span = callsite.location.span;\n \n                     let idx = caller_mir.local_decls.push(local);\n                     local_map.push(idx);"}, {"sha": "98cc0ed8234a054d33583501499e979f0ebf0dba", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let no_stmts = self.source[loc.block].statements.len();\n         let new_temp = self.promoted.local_decls.push(\n             LocalDecl::new_temp(self.source.local_decls[temp].ty,\n-                                self.source.local_decls[temp].source_info.span));\n+                                self.source.local_decls[temp].visibility_source_info.span));\n \n         debug!(\"promote({:?} @ {:?}/{:?}, {:?})\",\n                temp, loc, no_stmts, self.keep_original);\n@@ -334,8 +334,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // This is because `*r` requires `r` to be a local,\n                             // otherwise we would use the `promoted` directly.\n                             let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n-                            promoted_ref.source_info = statement.source_info;\n                             promoted_ref.syntactic_source_info = statement.source_info;\n+                            promoted_ref.visibility_source_info = statement.source_info;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n                             self.extra_statements.push((loc, Statement {"}, {"sha": "05e232753d716d2291652dd9317426ab56a509fa", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -1046,7 +1046,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n                     if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n-                        Some(self.mir.local_decls[local].source_info.span)\n+                        Some(self.mir.local_decls[local].visibility_source_info.span)\n                     } else {\n                         None\n                     }\n@@ -1102,7 +1102,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     let mut err = feature_err(\n                         &self.tcx.sess.parse_sess,\n                         \"const_let\",\n-                        decl.source_info.span,\n+                        decl.visibility_source_info.span,\n                         GateIssue::Language,\n                         \"arguments of constant functions can only be immutable by-value bindings\"\n                     );"}, {"sha": "bf01619d5b0b53ef45f31d8e1b1f4662e6b4eb4f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0895590c53919bb235771947ae395ab0d1751b4d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0895590c53919bb235771947ae395ab0d1751b4d", "patch": "@@ -467,8 +467,8 @@ fn write_scope_tree(\n         // User variable types (including the user's name in a comment).\n         for local in mir.vars_iter() {\n             let var = &mir.local_decls[local];\n-            let (name, source_info) = if var.source_info.scope == child {\n-                (var.name.unwrap(), var.source_info)\n+            let (name, source_info) = if var.visibility_source_info.scope == child {\n+                (var.name.unwrap(), var.visibility_source_info)\n             } else {\n                 // Not a variable or not declared in this scope.\n                 continue;"}]}