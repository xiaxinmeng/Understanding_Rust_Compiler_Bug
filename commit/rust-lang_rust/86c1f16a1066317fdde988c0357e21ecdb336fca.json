{"sha": "86c1f16a1066317fdde988c0357e21ecdb336fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YzFmMTZhMTA2NjMxN2ZkZGU5ODhjMDM1N2UyMWVjZGIzMzZmY2E=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-21T08:25:42Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-21T08:25:42Z"}, "message": "Fix bad interaction between last-use finding and references\n\nThe last-use pass now takes input from the alias pass to not mark things\nas last uses that are still accessed through a reference.\n\nIssue #925", "tree": {"sha": "2fdcbf1297b5d18c3f25e82b0bc514507565d5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fdcbf1297b5d18c3f25e82b0bc514507565d5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c1f16a1066317fdde988c0357e21ecdb336fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c1f16a1066317fdde988c0357e21ecdb336fca", "html_url": "https://github.com/rust-lang/rust/commit/86c1f16a1066317fdde988c0357e21ecdb336fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c1f16a1066317fdde988c0357e21ecdb336fca/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff04cb1eb02083641c6a960581fe857ef95b6cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff04cb1eb02083641c6a960581fe857ef95b6cc2", "html_url": "https://github.com/rust-lang/rust/commit/ff04cb1eb02083641c6a960581fe857ef95b6cc2"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "32dd652b0596206b4f1ca70c9ab8947bcb3be83b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=86c1f16a1066317fdde988c0357e21ecdb336fca", "patch": "@@ -139,8 +139,6 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n              bind freevars::annotate_freevars(def_map, crate));\n     let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, ast_map, freevars);\n     time(time_passes, \"typechecking\", bind typeck::check_crate(ty_cx, crate));\n-    let last_uses = time(time_passes, \"last use finding\",\n-        bind last_use::find_last_uses(crate, def_map, ty_cx));\n     time(time_passes, \"function usage\",\n          bind fn_usage::check_crate_fn_usage(ty_cx, crate));\n     time(time_passes, \"alt checking\",\n@@ -150,9 +148,11 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let mut_map =\n         time(time_passes, \"mutability checking\",\n              bind middle::mut::check_crate(ty_cx, crate));\n-    let copy_map =\n+    let (copy_map, ref_map) =\n         time(time_passes, \"alias checking\",\n              bind middle::alias::check_crate(ty_cx, crate));\n+    let last_uses = time(time_passes, \"last use finding\",\n+        bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, last_uses, crate));\n     time(time_passes, \"const checking\","}, {"sha": "7322583a92628f50527769d744c23eadcd5f6d24", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=86c1f16a1066317fdde988c0357e21ecdb336fca", "patch": "@@ -36,6 +36,10 @@ type scope = {bs: [binding],\n \n fn mk_binding(cx: ctx, id: node_id, span: span, root_var: option::t<node_id>,\n               unsafe_tys: [unsafe_ty]) -> binding {\n+    alt root_var {\n+      some(r_id) { cx.ref_map.insert(id, r_id); }\n+      _ {}\n+    }\n     ret @{node_id: id, span: span, root_var: root_var,\n           local_id: local_id_of_node(cx, id),\n           unsafe_tys: unsafe_tys,\n@@ -45,16 +49,19 @@ fn mk_binding(cx: ctx, id: node_id, span: span, root_var: option::t<node_id>,\n tag local_info { local(uint); }\n \n type copy_map = std::map::hashmap<node_id, ()>;\n+type ref_map = std::map::hashmap<node_id, node_id>;\n \n type ctx = {tcx: ty::ctxt,\n             copy_map: copy_map,\n+            ref_map: ref_map,\n             mutable silent: bool};\n \n-fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> (copy_map, ref_map) {\n     // Stores information about object fields and function\n     // arguments that's otherwise not easily available.\n     let cx = @{tcx: tcx,\n                copy_map: std::map::new_int_hash(),\n+               ref_map: std::map::new_int_hash(),\n                mutable silent: false};\n     let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n@@ -63,7 +70,7 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n     let sc = {bs: [], ret_info: other, invalid: @mutable list::nil};\n     visit::visit_crate(*crate, sc, visit::mk_vt(v));\n     tcx.sess.abort_if_errors();\n-    ret cx.copy_map;\n+    ret (cx.copy_map, cx.ref_map);\n }\n \n fn visit_fn(cx: @ctx, f: ast::_fn, _tp: [ast::ty_param], sp: span,"}, {"sha": "4b0ff3c7b382aea171f294220da1165500b1a881", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=86c1f16a1066317fdde988c0357e21ecdb336fca", "patch": "@@ -32,18 +32,20 @@ type bl = @{type: block_type, mutable second: bool, mutable exits: [set]};\n \n type ctx = {last_uses: std::map::hashmap<node_id, bool>,\n             def_map: resolve::def_map,\n+            ref_map: alias::ref_map,\n             tcx: ty::ctxt,\n             // The current set of local last uses\n             mutable current: set,\n             mutable blocks: list<bl>};\n \n-fn find_last_uses(c: @crate, def_map: resolve::def_map, tcx: ty::ctxt)\n-    -> last_uses {\n+fn find_last_uses(c: @crate, def_map: resolve::def_map,\n+                  ref_map: alias::ref_map, tcx: ty::ctxt) -> last_uses {\n     let v = visit::mk_vt(@{visit_expr: visit_expr,\n                            visit_fn: visit_fn\n                            with *visit::default_visitor()});\n     let cx = {last_uses: std::map::new_int_hash(),\n               def_map: def_map,\n+              ref_map: ref_map,\n               tcx: tcx,\n               mutable current: [],\n               mutable blocks: nil};\n@@ -99,11 +101,17 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         cx.current = join_branches([cur, cx.current]);\n       }\n       expr_path(_) {\n-        alt clear_if_path(cx, ex, v, false) {\n-          option::some(my_def) {\n-            cx.current += [{def: my_def, exprs: cons(ex.id, @nil)}];\n+        let my_def = ast_util::def_id_of_def(cx.def_map.get(ex.id)).node;\n+        alt cx.ref_map.find(my_def) {\n+          option::some(root_id) { clear_in_current(cx, root_id, false); }\n+          _ {\n+            alt clear_if_path(cx, ex, v, false) {\n+              option::some(my_def) {\n+                cx.current += [{def: my_def, exprs: cons(ex.id, @nil)}];\n+              }\n+              _ {}\n+            }\n           }\n-          _ {}\n         }\n       }\n       expr_swap(lhs, rhs) {"}, {"sha": "d20794b15df528c28318661091b2168963d9a00e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c1f16a1066317fdde988c0357e21ecdb336fca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=86c1f16a1066317fdde988c0357e21ecdb336fca", "patch": "@@ -4524,10 +4524,12 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n \n fn init_ref_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     let init_expr = option::get(local.node.init).expr;\n-    let val = trans_lval(bcx, init_expr);\n-    assert val.kind == owned;\n-    ret trans_alt::bind_irrefutable_pat(val.bcx, local.node.pat, val.val,\n-                                        false);\n+    let {bcx, val, kind} = trans_lval(bcx, init_expr);\n+    alt kind {\n+      owned_imm. { val = do_spill_noroot(bcx, val); }\n+      owned. {}\n+    }\n+    ret trans_alt::bind_irrefutable_pat(bcx, local.node.pat, val, false);\n }\n \n fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)"}]}