{"sha": "e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjgyYTU2YzVhOWRkNWM0MGYyYWJlOGVlNTM5OGZjOGFjZGQ0YjQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-01T12:30:16Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-13T20:53:51Z"}, "message": "allow concrete self types in consts", "tree": {"sha": "987e2c50203ad929ef51fd6d4691b6290ff595c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987e2c50203ad929ef51fd6d4691b6290ff595c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "html_url": "https://github.com/rust-lang/rust/commit/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7402a394471a6738a40fea7d4f1891666e5a80c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7402a394471a6738a40fea7d4f1891666e5a80c5", "html_url": "https://github.com/rust-lang/rust/commit/7402a394471a6738a40fea7d4f1891666e5a80c5"}], "stats": {"total": 159, "additions": 141, "deletions": 18}, "files": [{"sha": "730059e7eceb5dc755a40a59a024ca24b035d236", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -199,7 +199,14 @@ pub enum Res<Id = hir::HirId> {\n \n     // Type namespace\n     PrimTy(hir::PrimTy),\n-    SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n+    /// `Self`, with both an optional trait and impl `DefId`.\n+    ///\n+    /// HACK: impl self types also have an optional requirement to not mention\n+    /// any generic parameters to allow the following with `min_const_generics`.\n+    /// `impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()]`.\n+    ///\n+    /// Once `lazy_normalization_consts` is stable, this bodge can be removed again.\n+    SelfTy(Option<DefId> /* trait */, Option<(DefId, bool)> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n \n     // Value namespace"}, {"sha": "fe6653e98da89cb0d72ff77dfaed2e37be78fdbf", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 if let Some(t) = t {\n                     self.check_def_id(t);\n                 }\n-                if let Some(i) = i {\n+                if let Some((i, _)) = i {\n                     self.check_def_id(i);\n                 }\n             }"}, {"sha": "b80da64149150e0f67a759b441aec7355d5c98c4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -112,7 +112,7 @@ impl<'a> Resolver<'a> {\n                 match outer_res {\n                     Res::SelfTy(maybe_trait_defid, maybe_impl_defid) => {\n                         if let Some(impl_span) =\n-                            maybe_impl_defid.and_then(|def_id| self.opt_span(def_id))\n+                            maybe_impl_defid.and_then(|(def_id, _)| self.opt_span(def_id))\n                         {\n                             err.span_label(\n                                 reduce_impl_span_to_impl_keyword(sm, impl_span),"}, {"sha": "6788df9be7820489bbcdb694f4c5debc6517ded9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -110,6 +110,9 @@ crate enum RibKind<'a> {\n     ItemRibKind(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n+    ///\n+    /// The `bool` indicates if this constant may reference generic parameters\n+    /// and is used to only allow generic parameters to be used in trivial constant expressions.\n     ConstantItemRibKind(bool),\n \n     /// We passed through a module.\n@@ -848,7 +851,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                 let item_def_id = this.r.local_def_id(item.id).to_def_id();\n-                this.with_self_rib(Res::SelfTy(None, Some(item_def_id)), |this| {\n+                this.with_self_rib(Res::SelfTy(None, Some((item_def_id, false))), |this| {\n                     visit::walk_item(this, item);\n                 });\n             });\n@@ -1215,7 +1218,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n                     let item_def_id = this.r.local_def_id(item_id).to_def_id();\n-                    this.with_self_rib(Res::SelfTy(trait_id, Some(item_def_id)), |this| {\n+                    this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path.\n                             visit::walk_trait_ref(this, trait_ref);"}, {"sha": "1922f0d566e977575a4a9cd0369a323e94877033", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -2539,7 +2539,7 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         rib_index: usize,\n         rib_ident: Ident,\n-        res: Res,\n+        mut res: Res,\n         record_used: bool,\n         span: Span,\n         all_ribs: &[Rib<'a>],\n@@ -2627,15 +2627,26 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                         ConstantItemRibKind(trivial) => {\n-                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !trivial && self.session.features_untracked().min_const_generics {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n-                                    );\n+                            if self.session.features_untracked().min_const_generics {\n+                                // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                                if !trivial {\n+                                    // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n+                                    // we can't easily tell if it's generic at this stage, so we instead remember\n+                                    // this and then enforce the self type to be concrete later on.\n+                                    if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {\n+                                        res = Res::SelfTy(trait_def, Some((impl_def, true)));\n+                                    } else {\n+                                        if record_used {\n+                                            self.report_error(\n+                                                span,\n+                                                ResolutionError::ParamInNonTrivialAnonConst(\n+                                                    rib_ident.name,\n+                                                ),\n+                                            );\n+                                        }\n+                                        return Res::Err;\n+                                    }\n                                 }\n-                                return Res::Err;\n                             }\n \n                             if in_ty_param_default {"}, {"sha": "66d9d49d93fac9961bbb02409e136fec1f27a410", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -1460,7 +1460,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n         let bound = match (&qself_ty.kind(), qself_res) {\n-            (_, Res::SelfTy(Some(_), Some(impl_def_id))) => {\n+            (_, Res::SelfTy(Some(_), Some((impl_def_id, _)))) => {\n                 // `Self` in an impl of a trait -- we have a concrete self type and a\n                 // trait reference.\n                 let trait_ref = match tcx.impl_trait_ref(impl_def_id) {\n@@ -1917,12 +1917,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments);\n                 tcx.types.self_param\n             }\n-            Res::SelfTy(_, Some(def_id)) => {\n+            Res::SelfTy(_, Some((def_id, forbid_generic))) => {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n-                self.normalize_ty(span, tcx.at(span).type_of(def_id))\n+                let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n+                if forbid_generic && normalized_ty.needs_subst() {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            path.span,\n+                            \"generic `Self` types are currently not permitted in anonymous constants\"\n+                        )\n+                        .span_note(tcx.def_span(def_id), \"not a concrete type\")\n+                        .emit();\n+                    tcx.ty_error()\n+                } else {\n+                    normalized_ty\n+                }\n             }\n             Res::Def(DefKind::AssocTy, def_id) => {\n                 debug_assert!(path.segments.len() >= 2);"}, {"sha": "58b76d24a5bdbb94405ed4fe6e4bf62b4ae08d9c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -601,7 +601,7 @@ pub fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {\n         },\n         Res::Def(DefKind::TraitAlias, i) => (i, TypeKind::TraitAlias),\n         Res::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n-        Res::SelfTy(_, Some(impl_def_id)) => return impl_def_id,\n+        Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n         _ => return res.def_id(),\n     };\n     if did.is_local() {"}, {"sha": "0973b373c122c6cc42b5862f4cb2f3d13b080f51", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -0,0 +1,27 @@\n+#![feature(min_const_generics)]\n+\n+trait Foo {\n+    fn t1() -> [u8; std::mem::size_of::<Self>()]; //~ERROR generic parameters\n+}\n+\n+struct Bar<T>(T);\n+\n+impl Bar<u8> {\n+    fn t2() -> [u8; std::mem::size_of::<Self>()] { todo!() } // ok\n+}\n+\n+impl<T> Bar<T> {\n+    fn t3() -> [u8; std::mem::size_of::<Self>()] {} //~ERROR generic `Self`\n+}\n+\n+trait Baz {\n+    fn hey();\n+}\n+\n+impl Baz for u16 {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; // ok\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "94f67735fca443b7408471fc666e2197b98d6537", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -0,0 +1,24 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/self-ty-in-const-1.rs:4:41\n+   |\n+LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n+   |                                         ^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/self-ty-in-const-1.rs:14:41\n+   |\n+LL |     fn t3() -> [u8; std::mem::size_of::<Self>()] {}\n+   |                                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/self-ty-in-const-1.rs:13:1\n+   |\n+LL | / impl<T> Bar<T> {\n+LL | |     fn t3() -> [u8; std::mem::size_of::<Self>()] {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e7f80d50082b367755cd94feab63b2aa64f780be", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -0,0 +1,21 @@\n+#![feature(min_const_generics)]\n+\n+struct Bar<T>(T);\n+\n+trait Baz {\n+    fn hey();\n+}\n+\n+impl Baz for u16 {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; // ok\n+    }\n+}\n+\n+impl<T> Baz for Bar<T> {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; //~ERROR generic `Self`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "70f44e7de6337189a0557244fe60ef8b78de766f", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr?ref=e5b82a56c5a9dd5c40f2abe8ee5398fc8acdd4b4", "patch": "@@ -0,0 +1,18 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/self-ty-in-const-2.rs:17:41\n+   |\n+LL |         let _: [u8; std::mem::size_of::<Self>()];\n+   |                                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/self-ty-in-const-2.rs:15:1\n+   |\n+LL | / impl<T> Baz for Bar<T> {\n+LL | |     fn hey() {\n+LL | |         let _: [u8; std::mem::size_of::<Self>()];\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}