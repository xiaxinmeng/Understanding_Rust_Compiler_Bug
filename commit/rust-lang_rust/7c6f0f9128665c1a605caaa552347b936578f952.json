{"sha": "7c6f0f9128665c1a605caaa552347b936578f952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNmYwZjkxMjg2NjVjMWE2MDVjYWFhNTUyMzQ3YjkzNjU3OGY5NTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T12:34:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T12:34:11Z"}, "message": "G: shebang", "tree": {"sha": "e46900ddc24786364a767b35c78c0df588ab0541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46900ddc24786364a767b35c78c0df588ab0541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6f0f9128665c1a605caaa552347b936578f952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6f0f9128665c1a605caaa552347b936578f952", "html_url": "https://github.com/rust-lang/rust/commit/7c6f0f9128665c1a605caaa552347b936578f952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6f0f9128665c1a605caaa552347b936578f952/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4052cc2ee12751ba94909ff479bd03df141ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4052cc2ee12751ba94909ff479bd03df141ac4", "html_url": "https://github.com/rust-lang/rust/commit/9e4052cc2ee12751ba94909ff479bd03df141ac4"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "f26cbc4f668fe14f14a9612e08e0e1a668233bb5", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -6,7 +6,7 @@ use syntax_kinds::*;\n \n pub fn file(p: &mut Parser) {\n     node(p, FILE, |p| {\n-        shebang(p);\n+        p.optional(SHEBANG);\n         inner_attributes(p);\n         many(p, |p| {\n             skip_to_first(\n@@ -17,11 +17,6 @@ pub fn file(p: &mut Parser) {\n     })\n }\n \n-\n-fn shebang(_: &mut Parser) {\n-    //TODO\n-}\n-\n fn inner_attributes(_: &mut Parser) {\n     //TODO\n }\n@@ -136,4 +131,10 @@ impl<'p> Parser<'p> {\n             false\n         }\n     }\n+\n+    pub(crate) fn optional(&mut self, kind: SyntaxKind) {\n+        if self.current_is(kind) {\n+            self.bump();\n+        }\n+    }\n }\n\\ No newline at end of file"}, {"sha": "48a3a3980baed91a768f649178ab0b78a7d6738b", "filename": "tests/data/parser/err/0002_duplicate_shebang.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -0,0 +1,2 @@\n+#!/use/bin/env rusti\n+#!/use/bin/env rusti"}, {"sha": "e7cf7187d0aa0f5259b683720faaf19d7306c7f0", "filename": "tests/data/parser/err/0002_duplicate_shebang.txt", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -0,0 +1,7 @@\n+FILE@[0; 42)\n+  SHEBANG@[0; 20)\n+  ERROR@[20; 42)\n+  err: `expected item`\n+    WHITESPACE@[20; 21)\n+    SHEBANG@[21; 41)\n+    WHITESPACE@[41; 42)"}, {"sha": "53dc9e6173375f427c707fcb64754fe878bf8ea5", "filename": "tests/data/parser/ok/0004_file_shebang.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -0,0 +1 @@\n+#!/use/bin/env rusti\n\\ No newline at end of file"}, {"sha": "33055cf3d23ce1747d17d83a20a6a9a5ccc53d9a", "filename": "tests/data/parser/ok/0004_file_shebang.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0004_file_shebang.txt?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -0,0 +1,2 @@\n+FILE@[0; 20)\n+  SHEBANG@[0; 20)"}, {"sha": "20840f4560ab666eaee69f180c9a2436f2f838ac", "filename": "tests/lexer.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flexer.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -2,30 +2,20 @@ extern crate file;\n extern crate libsyntax2;\n extern crate testutils;\n \n-use std::path::{Path};\n use std::fmt::Write;\n \n use libsyntax2::{Token, tokenize};\n-use testutils::{assert_equal_text, collect_tests};\n+use testutils::dir_tests;\n \n #[test]\n fn lexer_tests() {\n-    for test_case in collect_tests(&[\"lexer\"]) {\n-        lexer_test_case(&test_case);\n-    }\n-}\n-\n-fn lexer_test_case(path: &Path) {\n-    let actual = {\n-        let text = file::get_text(path).unwrap();\n-        let tokens = tokenize(&text);\n-        dump_tokens(&tokens, &text)\n-    };\n-    let path = path.with_extension(\"txt\");\n-    let expected = file::get_text(&path).unwrap();\n-    let expected = expected.as_str();\n-    let actual = actual.as_str();\n-    assert_equal_text(expected, actual, &path)\n+    dir_tests(\n+        &[\"lexer\"],\n+        |text| {\n+            let tokens = tokenize(text);\n+            dump_tokens(&tokens, text)\n+        }\n+    )\n }\n \n fn dump_tokens(tokens: &[Token], text: &str) -> String {"}, {"sha": "02cef938d369871838a520febf5b93bc30dd3f54", "filename": "tests/parser.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -2,33 +2,21 @@ extern crate file;\n extern crate libsyntax2;\n extern crate testutils;\n \n-use std::path::{Path};\n use std::fmt::Write;\n \n use libsyntax2::{tokenize, parse, Node, File};\n-use testutils::{collect_tests, assert_equal_text};\n+use testutils::dir_tests;\n \n #[test]\n fn parser_tests() {\n-    for test_case in collect_tests(&[\"parser/ok\", \"parser/err\"]) {\n-        parser_test_case(&test_case);\n-    }\n-}\n-\n-fn parser_test_case(path: &Path) {\n-    let actual = {\n-        let text = file::get_text(path).unwrap();\n-        let tokens = tokenize(&text);\n-        let file = parse(text, &tokens);\n-        dump_tree(&file)\n-    };\n-    let expected_path = path.with_extension(\"txt\");\n-    let expected = file::get_text(&expected_path).expect(\n-        &format!(\"Can't read {}\", expected_path.display())\n-    );\n-    let expected = expected.as_str();\n-    let actual = actual.as_str();\n-    assert_equal_text(expected, actual, &expected_path);\n+    dir_tests(\n+        &[\"parser/ok\", \"parser/err\"],\n+        |text| {\n+            let tokens = tokenize(text);\n+            let file = parse(text.to_string(), &tokens);\n+            dump_tree(&file)\n+        }\n+    )\n }\n \n fn dump_tree(file: &File) -> String {"}, {"sha": "b34517c5f7c3e4cb6996d19501e15d076ba03e02", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6f0f9128665c1a605caaa552347b936578f952/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=7c6f0f9128665c1a605caaa552347b936578f952", "patch": "@@ -6,7 +6,33 @@ use std::fs::read_dir;\n \n use difference::Changeset;\n \n-pub fn assert_equal_text(\n+pub fn dir_tests<F>(\n+    paths: &[&str],\n+    f: F\n+)\n+where\n+    F: Fn(&str) -> String\n+{\n+    for path in collect_tests(paths) {\n+        let actual = {\n+            let text = file::get_text(&path).unwrap();\n+            f(&text)\n+        };\n+        let path = path.with_extension(\"txt\");\n+        if !path.exists() {\n+            println!(\"\\nfile: {}\", path.display());\n+            println!(\"No .txt file with expected result, creating...\");\n+            file::put_text(&path, actual).unwrap();\n+            panic!(\"No expected result\")\n+        }\n+        let expected = file::get_text(&path).unwrap();\n+        let expected = expected.as_str();\n+        let actual = actual.as_str();\n+        assert_equal_text(expected, actual, &path);\n+    }\n+}\n+\n+fn assert_equal_text(\n     expected: &str,\n     actual: &str,\n     path: &Path\n@@ -16,7 +42,7 @@ pub fn assert_equal_text(\n     }\n }\n \n-pub fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {\n+fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {\n     paths.iter().flat_map(|path|  {\n         let path = test_data_dir().join(path);\n         test_from_dir(&path).into_iter()"}]}