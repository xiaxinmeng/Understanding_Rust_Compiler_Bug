{"sha": "7088c45ef4078e0be54d4353b2c11146e25b2906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwODhjNDVlZjQwNzhlMGJlNTRkNDM1M2IyYzExMTQ2ZTI1YjI5MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-22T07:07:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-22T07:07:09Z"}, "message": "auto merge of #18141 : phildawes/rust/master, r=brson\n\nHello! I noticed spans are wrong for the PatIdents of self args. (I use spans a lot in racer)", "tree": {"sha": "48268c53733ca2bfa58336f9a5cd2a4dfd0b5f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48268c53733ca2bfa58336f9a5cd2a4dfd0b5f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7088c45ef4078e0be54d4353b2c11146e25b2906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7088c45ef4078e0be54d4353b2c11146e25b2906", "html_url": "https://github.com/rust-lang/rust/commit/7088c45ef4078e0be54d4353b2c11146e25b2906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7088c45ef4078e0be54d4353b2c11146e25b2906/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "html_url": "https://github.com/rust-lang/rust/commit/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d"}, {"sha": "9c7865fa6fad826d7bf542a2cb36f63d0ae2410b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7865fa6fad826d7bf542a2cb36f63d0ae2410b", "html_url": "https://github.com/rust-lang/rust/commit/9c7865fa6fad826d7bf542a2cb36f63d0ae2410b"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "2d7d32cd9eaccdcdf189b1f82cc5d699575fa1af", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7088c45ef4078e0be54d4353b2c11146e25b2906/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7088c45ef4078e0be54d4353b2c11146e25b2906/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7088c45ef4078e0be54d4353b2c11146e25b2906", "patch": "@@ -721,7 +721,7 @@ pub fn integer_lit(s: &str, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n mod test {\n     use super::*;\n     use serialize::json;\n-    use codemap::{Span, BytePos, Spanned, NO_EXPANSION};\n+    use codemap::{Span, BytePos, Pos, Spanned, NO_EXPANSION};\n     use owned_slice::OwnedSlice;\n     use ast;\n     use abi;\n@@ -1121,6 +1121,46 @@ mod test {\n                             span: sp(0,21)})));\n     }\n \n+    fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n+        let item = string_to_item(src.to_string()).unwrap();\n+\n+        struct PatIdentVisitor {\n+            spans: Vec<Span>\n+        }\n+        impl<'v> ::visit::Visitor<'v> for PatIdentVisitor {\n+            fn visit_pat(&mut self, p: &'v ast::Pat) {\n+                match p.node {\n+                    ast::PatIdent(_ , ref spannedident, _) => {\n+                        self.spans.push(spannedident.span.clone());\n+                    }\n+                    _ => {\n+                        ::visit::walk_pat(self, p);\n+                    }\n+                }\n+            }\n+        }\n+        let mut v = PatIdentVisitor { spans: Vec::new() };\n+        ::visit::walk_item(&mut v, &*item);\n+        return v.spans;\n+    }\n+\n+    #[test] fn span_of_self_arg_pat_idents_are_correct() {\n+\n+        let srcs = [\"impl z { fn a (&self, &myarg: int) {} }\",\n+                    \"impl z { fn a (&mut self, &myarg: int) {} }\",\n+                    \"impl z { fn a (&'a self, &myarg: int) {} }\",\n+                    \"impl z { fn a (self, &myarg: int) {} }\",\n+                    \"impl z { fn a (self: Foo, &myarg: int) {} }\",\n+                    ];\n+\n+        for &src in srcs.iter() {\n+            let spans = get_spans_of_pat_idents(src);\n+            let Span{lo:lo,hi:hi,..} = spans[0];\n+            assert!(\"self\" == src.slice(lo.to_uint(), hi.to_uint()),\n+                    \"\\\"{}\\\" != \\\"self\\\". src=\\\"{}\\\"\",\n+                    src.slice(lo.to_uint(), hi.to_uint()), src)\n+        }\n+    }\n \n     #[test] fn parse_exprs () {\n         // just make sure that they parse...."}, {"sha": "ed806ad803ab14666501826da129e665b7aab885", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7088c45ef4078e0be54d4353b2c11146e25b2906/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7088c45ef4078e0be54d4353b2c11146e25b2906/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7088c45ef4078e0be54d4353b2c11146e25b2906", "patch": "@@ -4165,10 +4165,16 @@ impl<'a> Parser<'a> {\n         // A bit of complexity and lookahead is needed here in order to be\n         // backwards compatible.\n         let lo = self.span.lo;\n+        let mut self_ident_lo = self.span.lo;\n+        let mut self_ident_hi = self.span.hi;\n+\n         let mut mutbl_self = MutImmutable;\n         let explicit_self = match self.token {\n             token::BINOP(token::AND) => {\n-                maybe_parse_borrowed_explicit_self(self)\n+                let eself = maybe_parse_borrowed_explicit_self(self);\n+                self_ident_lo = self.last_span.lo;\n+                self_ident_hi = self.last_span.hi;\n+                eself\n             }\n             token::TILDE => {\n                 // We need to make sure it isn't a type\n@@ -4240,7 +4246,7 @@ impl<'a> Parser<'a> {\n             _ => SelfStatic,\n         };\n \n-        let explicit_self_sp = mk_sp(lo, self.span.hi);\n+        let explicit_self_sp = mk_sp(self_ident_lo, self_ident_hi);\n \n         // shared fall-through for the three cases below. borrowing prevents simply\n         // writing this as a closure"}]}