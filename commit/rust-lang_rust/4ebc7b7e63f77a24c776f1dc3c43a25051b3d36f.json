{"sha": "4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYmM3YjdlNjNmNzdhMjRjNzc2ZjFkYzNjNDNhMjUwNTFiM2QzNmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:12Z"}, "message": "Rollup merge of #57053 - nikic:fix-gep-align, r=nagisa\n\nFix alignment for array indexing\n\nWe need to reduce the alignment with the used offset. If the offset isn't known, use the element size, as this will yield the minimum possible alignment.\n\nThis handles both direct array indexing, and array repeat expressions.\n\nFixes #56927.\n\nr? @nagisa", "tree": {"sha": "5db306879e515aa3d5ab1e58138a513a43c0d520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db306879e515aa3d5ab1e58138a513a43c0d520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAeICRBK7hj4Ov3rIwAAdHIIAE1mVaRozCUqCEYBeF52740i\n19BJNWQodyGc91FGwLqu5VWKY+HftwwRN0ewBmsPQtga0yXReUWvyxPyLGsprmOi\nDcGA3g2XD5T8WfGCX9uXQ8IQU33+EvExD8agotQ9R8fVdGIbv7SJkADAPocFd3hO\nS5Z+yE6Ird7w7hEg4UBRub400TX6i6S0Zt35s/FwR0QUrZf6HZVWVCk7/El5pVXv\nN1H+91lBlj9vs0e/O79NLv0G72GLNt65aKRkU6BL+5kMphdHzNPAx3gmA/3yTh83\n9WiKj3CF7MfAU3Pg4BOsk3iyAqONYl40MQKcJN3So/kX+j23oqtJ3FtES9d7Gfk=\n=sw8P\n-----END PGP SIGNATURE-----\n", "payload": "tree 5db306879e515aa3d5ab1e58138a513a43c0d520\nparent 93bc72f19f3aae7d48c5a88e7b6d60d244a2dd67\nparent 097d39d8ecb2d8aa828393c66e85716081188793\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602952 +0100\ncommitter GitHub <noreply@github.com> 1545602952 +0100\n\nRollup merge of #57053 - nikic:fix-gep-align, r=nagisa\n\nFix alignment for array indexing\n\nWe need to reduce the alignment with the used offset. If the offset isn't known, use the element size, as this will yield the minimum possible alignment.\n\nThis handles both direct array indexing, and array repeat expressions.\n\nFixes #56927.\n\nr? @nagisa\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "html_url": "https://github.com/rust-lang/rust/commit/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93bc72f19f3aae7d48c5a88e7b6d60d244a2dd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/93bc72f19f3aae7d48c5a88e7b6d60d244a2dd67", "html_url": "https://github.com/rust-lang/rust/commit/93bc72f19f3aae7d48c5a88e7b6d60d244a2dd67"}, {"sha": "097d39d8ecb2d8aa828393c66e85716081188793", "url": "https://api.github.com/repos/rust-lang/rust/commits/097d39d8ecb2d8aa828393c66e85716081188793", "html_url": "https://github.com/rust-lang/rust/commit/097d39d8ecb2d8aa828393c66e85716081188793"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "5fad4a24b262e342f5d6bb8d56baf4796aec01a9", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "patch": "@@ -335,11 +335,20 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n         bx: &mut Bx,\n         llindex: V\n     ) -> Self {\n+        // Statically compute the offset if we can, otherwise just use the element size,\n+        // as this will yield the lowest alignment.\n+        let layout = self.layout.field(bx, 0);\n+        let offset = if bx.is_const_integral(llindex) {\n+            layout.size.checked_mul(bx.const_to_uint(llindex), bx).unwrap_or(layout.size)\n+        } else {\n+            layout.size\n+        };\n+\n         PlaceRef {\n             llval: bx.inbounds_gep(self.llval, &[bx.cx().const_usize(0), llindex]),\n             llextra: None,\n-            layout: self.layout.field(bx.cx(), 0),\n-            align: self.align\n+            layout,\n+            align: self.align.restrict_for_offset(offset),\n         }\n     }\n "}, {"sha": "052342dd7597bf18bb6c0f0dd2efd227ff7c7268", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "patch": "@@ -131,8 +131,9 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let keep_going = header_bx.icmp(IntPredicate::IntNE, current, end);\n                 header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n \n+                let align = dest.align.restrict_for_offset(dest.layout.field(bx.cx(), 0).size);\n                 cg_elem.val.store(&mut body_bx,\n-                    PlaceRef::new_sized(current, cg_elem.layout, dest.align));\n+                    PlaceRef::new_sized(current, cg_elem.layout, align));\n \n                 let next = body_bx.inbounds_gep(current, &[bx.cx().const_usize(1)]);\n                 body_bx.br(header_bx.llbb());"}, {"sha": "0544ff86aacfa2bb9cd17ab0b5c5c49f442b899c", "filename": "src/test/codegen/issue-56927.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56927.rs?ref=4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "patch": "@@ -0,0 +1,44 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type=\"rlib\"]\n+use std::usize;\n+\n+#[repr(align(16))]\n+pub struct S {\n+    arr: [u32; 4],\n+}\n+\n+// CHECK-LABEL: @test1\n+// CHECK: store i32 0, i32* %{{.+}}, align 16\n+// CHECK: store i32 1, i32* %{{.+}}, align 4\n+// CHECK: store i32 2, i32* %{{.+}}, align 8\n+// CHECK: store i32 3, i32* %{{.+}}, align 4\n+#[no_mangle]\n+pub fn test1(s: &mut S) {\n+    s.arr[0] = 0;\n+    s.arr[1] = 1;\n+    s.arr[2] = 2;\n+    s.arr[3] = 3;\n+}\n+\n+// CHECK-LABEL: @test2\n+// CHECK: store i32 4, i32* %{{.+}}, align 4\n+#[allow(const_err)]\n+#[no_mangle]\n+pub fn test2(s: &mut S) {\n+    s.arr[usize::MAX / 4 + 1] = 4;\n+}\n+\n+// CHECK-LABEL: @test3\n+// CHECK: store i32 5, i32* %{{.+}}, align 4\n+#[no_mangle]\n+pub fn test3(s: &mut S, i: usize) {\n+    s.arr[i] = 5;\n+}\n+\n+// CHECK-LABEL: @test4\n+// CHECK: store i32 6, i32* %{{.+}}, align 4\n+#[no_mangle]\n+pub fn test4(s: &mut S) {\n+    s.arr = [6; 4];\n+}"}, {"sha": "3b4e89f12e0ad923fe345f5385ef720cb82bae21", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=4ebc7b7e63f77a24c776f1dc3c43a25051b3d36f", "patch": "@@ -83,6 +83,42 @@ pub fn call_pkd2(f: fn() -> Array) -> BigPacked2 {\n     BigPacked2 { dealign: 0, data: f() }\n }\n \n+// CHECK-LABEL: @write_packed_array1\n+// CHECK: store i32 0, i32* %{{.+}}, align 1\n+// CHECK: store i32 1, i32* %{{.+}}, align 1\n+// CHECK: store i32 2, i32* %{{.+}}, align 1\n+#[no_mangle]\n+pub fn write_packed_array1(p: &mut BigPacked1) {\n+    p.data.0[0] = 0;\n+    p.data.0[1] = 1;\n+    p.data.0[2] = 2;\n+}\n+\n+// CHECK-LABEL: @write_packed_array2\n+// CHECK: store i32 0, i32* %{{.+}}, align 2\n+// CHECK: store i32 1, i32* %{{.+}}, align 2\n+// CHECK: store i32 2, i32* %{{.+}}, align 2\n+#[no_mangle]\n+pub fn write_packed_array2(p: &mut BigPacked2) {\n+    p.data.0[0] = 0;\n+    p.data.0[1] = 1;\n+    p.data.0[2] = 2;\n+}\n+\n+// CHECK-LABEL: @repeat_packed_array1\n+// CHECK: store i32 42, i32* %{{.+}}, align 1\n+#[no_mangle]\n+pub fn repeat_packed_array1(p: &mut BigPacked1) {\n+    p.data.0 = [42; 8];\n+}\n+\n+// CHECK-LABEL: @repeat_packed_array2\n+// CHECK: store i32 42, i32* %{{.+}}, align 2\n+#[no_mangle]\n+pub fn repeat_packed_array2(p: &mut BigPacked2) {\n+    p.data.0 = [42; 8];\n+}\n+\n #[repr(packed)]\n #[derive(Copy, Clone)]\n pub struct Packed1Pair(u8, u32);"}]}