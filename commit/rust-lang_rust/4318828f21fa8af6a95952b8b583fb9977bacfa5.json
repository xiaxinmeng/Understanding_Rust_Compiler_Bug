{"sha": "4318828f21fa8af6a95952b8b583fb9977bacfa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTg4MjhmMjFmYThhZjZhOTU5NTJiOGI1ODNmYjk5NzdiYWNmYTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-02T11:08:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-02T11:13:59Z"}, "message": "Document doer object anti-pattern", "tree": {"sha": "f57360c8f844820880375eeba1611d2d00a1634f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57360c8f844820880375eeba1611d2d00a1634f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4318828f21fa8af6a95952b8b583fb9977bacfa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4318828f21fa8af6a95952b8b583fb9977bacfa5", "html_url": "https://github.com/rust-lang/rust/commit/4318828f21fa8af6a95952b8b583fb9977bacfa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4318828f21fa8af6a95952b8b583fb9977bacfa5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "html_url": "https://github.com/rust-lang/rust/commit/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "720231c2dad31d89efe05506f62f179d049857ec", "filename": "docs/dev/style.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4318828f21fa8af6a95952b8b583fb9977bacfa5/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/4318828f21fa8af6a95952b8b583fb9977bacfa5/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=4318828f21fa8af6a95952b8b583fb9977bacfa5", "patch": "@@ -211,6 +211,60 @@ impl Foo {\n \n Prefer `Default` even it has to be implemented manually.\n \n+## Functions Over Objects\n+\n+Avoid creating \"doer\" objects.\n+That is, objects which are created only to execute a single action.\n+\n+```rust\n+// Good\n+do_thing(arg1, arg2);\n+\n+// Not as good\n+ThingDoer::new(arg1, arg2).do();\n+```\n+\n+Note that this concerns only outward API.\n+When implementing `do_thing`, it might be very useful to create a context object.\n+\n+```rust\n+pub fn do_thing(arg1: Arg1, arg2: Arg2) -> Res {\n+    let mut ctx = Ctx { arg1, arg2 }\n+    ctx.run()\n+}\n+\n+struct Ctx {\n+    arg1: Arg1, arg2: Arg2\n+}\n+\n+impl Ctx {\n+    fn run(self) -> Res {\n+        ...\n+    }\n+}\n+```\n+\n+The difference is that `Ctx` is an impl detail here.\n+\n+Sometimes a middle ground is acceptable if this can safe some busywork:\n+\n+```rust\n+ThingDoer::do(arg1, arg2);\n+\n+pub struct ThingDoer {\n+    arg1: Arg1, arg2: Arg2,\n+}\n+\n+impl ThingDoer {\n+    pub fn do(arg1: Arg1, arg2: Arg2) -> Res {\n+        ThingDoer { arg1, arg2 }.run()\n+    }\n+    fn run(self) -> Res {\n+        ...\n+    }\n+}\n+```\n+\n ## Avoid Monomorphization\n \n Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*."}]}