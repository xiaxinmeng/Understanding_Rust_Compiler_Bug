{"sha": "a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "node_id": "C_kwDOAAsO6NoAKGEyNzRlN2U5YTJkNjM3M2QxOTg5ZDE4N2NkZjg0NzVlNTViZTlmNmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:21:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:34:44Z"}, "message": "ProjectionTy.item_def_id -> ProjectionTy.def_id", "tree": {"sha": "153edff68469e8107249324eefed4b3fa190011b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153edff68469e8107249324eefed4b3fa190011b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "html_url": "https://github.com/rust-lang/rust/commit/a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad55e4c9721f3283205f1518facaae5e66380e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad55e4c9721f3283205f1518facaae5e66380e45", "html_url": "https://github.com/rust-lang/rust/commit/ad55e4c9721f3283205f1518facaae5e66380e45"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "ad5a1b2beb70c854c5eed46bdaf386523e3578ad", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "patch": "@@ -1330,7 +1330,7 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let item_def_id = projection_predicate.projection_ty.item_def_id;\n+                    let item_def_id = projection_predicate.projection_ty.def_id;\n                     let assoc_item = cx.tcx.associated_item(item_def_id);\n                     let projection = cx.tcx\n                         .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));"}, {"sha": "982f99c2716399366dd5b7db65e451d5af5e8bc4", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "patch": "@@ -493,7 +493,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n-        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n+        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did()),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,\n         _ => false,"}, {"sha": "f4d3ef3b742509f40debe7616bb272b7f295f274", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "patch": "@@ -151,7 +151,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n         && let Some(into_iter_item_proj) = make_projection(cx.tcx, into_iter_trait, item, [collect_ty])\n         && let Ok(into_iter_item_ty) = cx.tcx.try_normalize_erasing_regions(\n             cx.param_env,\n-            cx.tcx.mk_projection(into_iter_item_proj.item_def_id, into_iter_item_proj.substs)\n+            cx.tcx.mk_projection(into_iter_item_proj.def_id, into_iter_item_proj.substs)\n         )\n     {\n         iter_item_ty == into_iter_item_ty"}, {"sha": "11e41d1958ce6431b7d8def6c7590733dd3282d3", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a274e7e9a2d6373d1989d187cdf8475e55be9f6f/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=a274e7e9a2d6373d1989d187cdf8475e55be9f6f", "patch": "@@ -685,7 +685,7 @@ fn sig_from_bounds<'tcx>(\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output()\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output()\n                     && p.projection_ty.self_ty() == ty =>\n             {\n                 if output.is_some() {\n@@ -708,7 +708,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.item_def_id)\n+        .bound_explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {\n@@ -726,7 +726,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() =>\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output() =>\n             {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -1041,7 +1041,7 @@ pub fn make_projection<'tcx>(\n \n         Some(ProjectionTy {\n             substs,\n-            item_def_id: assoc_item.def_id,\n+            def_id: assoc_item.def_id,\n         })\n     }\n     helper(\n@@ -1081,7 +1081,7 @@ pub fn make_normalized_projection<'tcx>(\n             );\n             return None;\n         }\n-        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.item_def_id, ty.substs)) {\n+        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.def_id, ty.substs)) {\n             Ok(ty) => Some(ty),\n             Err(e) => {\n                 debug_assert!(false, \"failed to normalize type `{ty}`: {e:#?}\");"}]}