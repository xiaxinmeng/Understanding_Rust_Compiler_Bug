{"sha": "2462a2de8c72e70fca250abe29255519b5fb892d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjJhMmRlOGM3MmU3MGZjYTI1MGFiZTI5MjU1NTE5YjVmYjg5MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-14T09:28:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-14T09:28:19Z"}, "message": "Auto merge of #55015 - dsciarra:underscores-constant-names, r=petrochenkov\n\nSupport underscore as constant name\n\nIssue: #54912", "tree": {"sha": "4502c09777231e9c10d1baabfcaec2de88a68dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4502c09777231e9c10d1baabfcaec2de88a68dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2462a2de8c72e70fca250abe29255519b5fb892d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2462a2de8c72e70fca250abe29255519b5fb892d", "html_url": "https://github.com/rust-lang/rust/commit/2462a2de8c72e70fca250abe29255519b5fb892d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2462a2de8c72e70fca250abe29255519b5fb892d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ebcb215fc1e9c2907529aae57fe49db4ac50e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebcb215fc1e9c2907529aae57fe49db4ac50e71", "html_url": "https://github.com/rust-lang/rust/commit/1ebcb215fc1e9c2907529aae57fe49db4ac50e71"}, {"sha": "406cbf1a39c99ef7b7f329a44f1d1c7af7a8ecda", "url": "https://api.github.com/repos/rust-lang/rust/commits/406cbf1a39c99ef7b7f329a44f1d1c7af7a8ecda", "html_url": "https://github.com/rust-lang/rust/commit/406cbf1a39c99ef7b7f329a44f1d1c7af7a8ecda"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "84122688c83d26d1ff089d96d83646edc04f2447", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2462a2de8c72e70fca250abe29255519b5fb892d", "patch": "@@ -499,6 +499,9 @@ declare_features! (\n \n     // #[cfg_attr(predicate, multiple, attributes, here)]\n     (active, cfg_attr_multi, \"1.31.0\", Some(54881), None),\n+\n+    // Allows `const _: TYPE = VALUE`\n+    (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n );\n \n declare_features! (\n@@ -1583,6 +1586,13 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Const(_,_) => {\n+                if i.ident.name == \"_\" {\n+                    gate_feature_post!(&self, underscore_const_names, i.span,\n+                                        \"naming constants with `_` is unstable\");\n+                }\n+            }\n+\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n                 self.check_abi(foreign_module.abi, i.span);\n             }"}, {"sha": "c7089a295fc3dca4787d0b8b40e0f4ca0fde56ff", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2462a2de8c72e70fca250abe29255519b5fb892d", "patch": "@@ -6346,7 +6346,13 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n-        let id = self.parse_ident()?;\n+        let id = match self.token {\n+                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n+                    self.bump(); // `_`\n+                    ident.gensym()\n+                    },\n+                _ => self.parse_ident()?,\n+            };\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         self.expect(&token::Eq)?;"}, {"sha": "b283e28651487c427bec09e160c8ab4806bcbd94", "filename": "src/test/ui/feature-gate-underscore_const_names.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.rs?ref=2462a2de8c72e70fca250abe29255519b5fb892d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(const_let)]\n+\n+trait Trt {}\n+struct Str {}\n+\n+impl Trt for Str {}\n+\n+const _ : () = {\n+    use std::marker::PhantomData;\n+    struct ImplementsTrait<T: Trt>(PhantomData<T>);\n+    let _ = ImplementsTrait::<Str>(PhantomData);\n+    ()\n+};\n+\n+fn main() {}"}, {"sha": "ab90ef8f11f7cf22bcc5ef847013210b9ff5bb59", "filename": "src/test/ui/feature-gate-underscore_const_names.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore_const_names.stderr?ref=2462a2de8c72e70fca250abe29255519b5fb892d", "patch": "@@ -0,0 +1,16 @@\n+error[E0658]: naming constants with `_` is unstable (see issue #54912)\n+  --> $DIR/feature-gate-underscore_const_names.rs:17:1\n+   |\n+LL | / const _ : () = {\n+LL | |     use std::marker::PhantomData;\n+LL | |     struct ImplementsTrait<T: Trt>(PhantomData<T>);\n+LL | |     let _ = ImplementsTrait::<Str>(PhantomData);\n+LL | |     ()\n+LL | | };\n+   | |__^\n+   |\n+   = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8d31fd0b1e93d6dd415804ba2dfa4309e99bef8d", "filename": "src/test/ui/underscore_const_names.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2462a2de8c72e70fca250abe29255519b5fb892d/src%2Ftest%2Fui%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore_const_names.rs?ref=2462a2de8c72e70fca250abe29255519b5fb892d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(const_let)]\n+#![feature(underscore_const_names)]\n+\n+trait Trt {}\n+struct Str {}\n+impl Trt for Str {}\n+\n+macro_rules! check_impl {\n+    ($struct:ident,$trait:ident) => {\n+        const _ : () = {\n+            use std::marker::PhantomData;\n+            struct ImplementsTrait<T: $trait>(PhantomData<T>);\n+            let _ = ImplementsTrait::<$struct>(PhantomData);\n+            ()\n+        };\n+    }\n+}\n+\n+#[deny(unused)]\n+const _ : () = ();\n+\n+const _ : i32 = 42;\n+const _ : Str = Str{};\n+\n+check_impl!(Str, Trt);\n+check_impl!(Str, Trt);\n+\n+fn main() {\n+  check_impl!(Str, Trt);\n+  check_impl!(Str, Trt);\n+}"}]}