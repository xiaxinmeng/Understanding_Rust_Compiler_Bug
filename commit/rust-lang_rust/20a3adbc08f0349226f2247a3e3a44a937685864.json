{"sha": "20a3adbc08f0349226f2247a3e3a44a937685864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTNhZGJjMDhmMDM0OTIyNmYyMjQ3YTNlM2E0NGE5Mzc2ODU4NjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-18T02:16:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-18T02:16:18Z"}, "message": "Revert \"Add setenv to standard library\"\n\nThis reverts commit 6fb168b3dbd733f6fccebd01c2e5416f800a5566.", "tree": {"sha": "e90375a9d77f2d867b3393f6eda2c8c72db8e231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e90375a9d77f2d867b3393f6eda2c8c72db8e231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a3adbc08f0349226f2247a3e3a44a937685864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a3adbc08f0349226f2247a3e3a44a937685864", "html_url": "https://github.com/rust-lang/rust/commit/20a3adbc08f0349226f2247a3e3a44a937685864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a3adbc08f0349226f2247a3e3a44a937685864/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52507f406ee0dab26681227266ddce7c8ae6d37f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52507f406ee0dab26681227266ddce7c8ae6d37f", "html_url": "https://github.com/rust-lang/rust/commit/52507f406ee0dab26681227266ddce7c8ae6d37f"}], "stats": {"total": 115, "additions": 2, "deletions": 113}, "files": [{"sha": "0fb8d79378f9a8b04dd3849564e0a6fc1a743125", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=20a3adbc08f0349226f2247a3e3a44a937685864", "patch": "@@ -1,53 +1,8 @@\n \n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n fn getenv(str n) -> option::t[str] {\n     auto s = os::libc::getenv(str::buf(n));\n     ret if (s as int == 0) {\n             option::none[str]\n         } else { option::some[str](str::str_from_cstr(s)) };\n-}\n-\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-fn setenv(str n, str v) {\n-    auto nbuf = str::buf(n);\n-    auto vbuf = str::buf(v);\n-    os::libc::setenv(nbuf, vbuf, 1);\n-}\n-\n-#[cfg(target_os = \"win32\")]\n-fn getenv(str n) -> option::t[str]{\n-    auto nbuf = str::buf(n);\n-    auto nsize = 256u;\n-    while (true) {\n-        auto vstr = str::alloc(nsize - 1u);\n-        auto vbuf = str::buf(vstr);\n-        auto res = os::rustrt::rust_GetEnvironmentVariable(nbuf, vbuf, nsize);\n-        if (res == 0u) {\n-            ret option::none;\n-        } else if (res < nsize) {\n-            ret option::some(str::str_from_cstr(vbuf));\n-        } else {\n-            nsize = res;\n-        }\n-    }\n-    fail;\n-}\n-\n-#[cfg(target_os = \"win32\")]\n-fn setenv(str n, str v) {\n-    auto nbuf = str::buf(n);\n-    auto vbuf = str::buf(v);\n-    os::rustrt::rust_SetEnvironmentVariable(nbuf, vbuf);\n-}\n-\n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n+}\n\\ No newline at end of file"}, {"sha": "25ad71cecab18efd346b607ee71334f98241f095", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=20a3adbc08f0349226f2247a3e3a44a937685864", "patch": "@@ -18,6 +18,7 @@ native \"cdecl\" mod libc = \"\" {\n     fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;\n     fn ftell(FILE f) -> int;\n+    fn getenv(sbuf n) -> sbuf;\n     fn _pipe(*mutable int fds, uint size, int mode) -> int;\n }\n \n@@ -66,8 +67,6 @@ fn fd_FILE(int fd) -> libc::FILE { ret libc::_fdopen(fd, str::buf(\"r\")); }\n native \"rust\" mod rustrt {\n     fn rust_process_wait(int handle) -> int;\n     fn rust_getcwd() -> str;\n-    fn rust_SetEnvironmentVariable(sbuf n, sbuf v) -> int;\n-    fn rust_GetEnvironmentVariable(sbuf n, sbuf v, uint nsize) -> uint;\n }\n \n fn waitpid(int pid) -> int { ret rustrt::rust_process_wait(pid); }"}, {"sha": "df7b1cfc6d3afd702e6f305f484da1a40c936668", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=20a3adbc08f0349226f2247a3e3a44a937685864", "patch": "@@ -650,20 +650,6 @@ rust_ptr_eq(rust_task *task, type_desc *t, rust_box *a, rust_box *b) {\n     return a == b;\n }\n \n-#if defined(__WIN32__)\n-extern \"C\" CDECL int32_t\n-rust_SetEnvironmentVariable(rust_task *task,\n-                            const char *name, const char *val) {\n-     return SetEnvironmentVariable(name, val);\n-}\n-\n-extern \"C\" CDECL uint32_t\n-rust_GetEnvironmentVariable(rust_task *task,\n-                            const char *name, char *buf, uint32_t size) {\n-    return GetEnvironmentVariable(name, buf, size);\n-}\n-#endif\n-\n #if defined(__WIN32__)\n extern \"C\" CDECL void\n get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {"}, {"sha": "f762f4a9be3c98401105d77edfc5bb912ccabfcd", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/20a3adbc08f0349226f2247a3e3a44a937685864/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=20a3adbc08f0349226f2247a3e3a44a937685864", "patch": "@@ -35,8 +35,6 @@ rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n-rust_SetEnvironmentVariable\n-rust_GetEnvironmentVariable\n size_of\n squareroot\n str_alloc"}, {"sha": "c3dc3e08dad158c1954f13104f7aaddd6942225d", "filename": "src/test/run-pass/lib-os.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/52507f406ee0dab26681227266ddce7c8ae6d37f/src%2Ftest%2Frun-pass%2Flib-os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52507f406ee0dab26681227266ddce7c8ae6d37f/src%2Ftest%2Frun-pass%2Flib-os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-os.rs?ref=52507f406ee0dab26681227266ddce7c8ae6d37f", "patch": "@@ -1,49 +0,0 @@\n-// xfail-stage0\n-\n-use std;\n-\n-import std::generic_os::setenv;\n-import std::generic_os::getenv;\n-import std::option;\n-\n-#[test]\n-fn test_setenv() {\n-    setenv(\"NAME\", \"VALUE\");\n-    assert getenv(\"NAME\") == option::some(\"VALUE\");\n-}\n-\n-#[test]\n-fn test_setenv_overwrite() {\n-    setenv(\"NAME\", \"1\");\n-    setenv(\"NAME\", \"2\");\n-    assert getenv(\"NAME\") == option::some(\"2\");\n-}\n-\n-// Windows GetEnvironmentVariable requires some extra work to make sure\n-// the buffer the variable is copied into is the right size\n-#[test]\n-fn test_getenv_big() {\n-    auto s = \"\";\n-    auto i = 0;\n-    while (i < 100) {\n-        s += \"aaaaaaaaaa\";\n-        i += 1;\n-    }\n-    setenv(\"NAME\", s);\n-    assert getenv(\"NAME\") == option::some(s);\n-}\n-\n-fn main() {\n-    test_setenv();\n-    test_setenv_overwrite();\n-    test_getenv_big();\n-}\n-\n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}]}