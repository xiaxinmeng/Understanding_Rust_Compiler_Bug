{"sha": "9740050726d8184b614b3150c7efbb63ea2288d9", "node_id": "C_kwDOAAsO6NoAKDk3NDAwNTA3MjZkODE4NGI2MTRiMzE1MGM3ZWZiYjYzZWEyMjg4ZDk", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-26T20:55:01Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-15T01:28:30Z"}, "message": "Add self ty to pick", "tree": {"sha": "27040a1ba1884339e03ff47fabfa73d937be7132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27040a1ba1884339e03ff47fabfa73d937be7132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9740050726d8184b614b3150c7efbb63ea2288d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9740050726d8184b614b3150c7efbb63ea2288d9", "html_url": "https://github.com/rust-lang/rust/commit/9740050726d8184b614b3150c7efbb63ea2288d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9740050726d8184b614b3150c7efbb63ea2288d9/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad442399756573dccacb314b6bf8079964bcc72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad442399756573dccacb314b6bf8079964bcc72a", "html_url": "https://github.com/rust-lang/rust/commit/ad442399756573dccacb314b6bf8079964bcc72a"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "8265887f614a036fa3ea5a242302cf948a3ccb93", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9740050726d8184b614b3150c7efbb63ea2288d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9740050726d8184b614b3150c7efbb63ea2288d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=9740050726d8184b614b3150c7efbb63ea2288d9", "patch": "@@ -204,6 +204,7 @@ pub struct Pick<'tcx> {\n     /// Indicates that we want to add an autoref (and maybe also unsize it), or if the receiver is\n     /// `*mut T`, convert it to `*const T`.\n     pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment<'tcx>>,\n+    pub self_ty: Ty<'tcx>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -1241,7 +1242,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         //\n                         // We suppress warning if we're picking the method only because it is a\n                         // suggestion.\n-                        self.emit_unstable_name_collision_hint(p, &unstable_candidates, self_ty);\n+                        self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n                     }\n                 }\n                 return Some(pick);\n@@ -1285,7 +1286,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         debug!(\"applicable_candidates: {:?}\", applicable_candidates);\n \n         if applicable_candidates.len() > 1 {\n-            if let Some(pick) = self.collapse_candidates_to_trait_pick(&applicable_candidates[..]) {\n+            if let Some(pick) =\n+                self.collapse_candidates_to_trait_pick(self_ty, &applicable_candidates[..])\n+            {\n                 return Some(Ok(pick));\n             }\n         }\n@@ -1309,7 +1312,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         applicable_candidates.pop().map(|(probe, status)| {\n             if status == ProbeResult::Match {\n-                Ok(probe.to_unadjusted_pick())\n+                Ok(probe.to_unadjusted_pick(self_ty))\n             } else {\n                 Err(MethodError::BadReturnType)\n             }\n@@ -1320,7 +1323,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         stable_pick: &Pick<'_>,\n         unstable_candidates: &[(&Candidate<'tcx>, Symbol)],\n-        self_ty: Ty<'tcx>,\n     ) {\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n@@ -1351,7 +1353,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             \"use the fully qualified path to the associated const\",\n                             format!(\n                                 \"<{} as {}>::{}\",\n-                                self_ty,\n+                                stable_pick.self_ty,\n                                 self.tcx.def_path_str(def_id),\n                                 stable_pick.item.ident\n                             ),\n@@ -1591,6 +1593,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// use, so it's ok to just commit to \"using the method from the trait Foo\".\n     fn collapse_candidates_to_trait_pick(\n         &self,\n+        self_ty: Ty<'tcx>,\n         probes: &[(&Candidate<'tcx>, ProbeResult)],\n     ) -> Option<Pick<'tcx>> {\n         // Do all probes correspond to the same trait?\n@@ -1610,6 +1613,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             import_ids: probes[0].0.import_ids.clone(),\n             autoderefs: 0,\n             autoref_or_ptr_adjustment: None,\n+            self_ty,\n         })\n     }\n \n@@ -1828,7 +1832,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n }\n \n impl<'tcx> Candidate<'tcx> {\n-    fn to_unadjusted_pick(&self) -> Pick<'tcx> {\n+    fn to_unadjusted_pick(&self, self_ty: Ty<'tcx>) -> Pick<'tcx> {\n         Pick {\n             item: self.item,\n             kind: match self.kind {\n@@ -1852,6 +1856,7 @@ impl<'tcx> Candidate<'tcx> {\n             import_ids: self.import_ids.clone(),\n             autoderefs: 0,\n             autoref_or_ptr_adjustment: None,\n+            self_ty,\n         }\n     }\n }"}]}