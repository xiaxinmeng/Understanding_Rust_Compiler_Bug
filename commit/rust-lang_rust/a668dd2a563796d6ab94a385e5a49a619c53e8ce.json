{"sha": "a668dd2a563796d6ab94a385e5a49a619c53e8ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjhkZDJhNTYzNzk2ZDZhYjk0YTM4NWU1YTQ5YTYxOWM1M2U4Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T10:17:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-14T10:17:30Z"}, "message": "Auto merge of #28827 - thepowersgang:unsafe-const-fn-2, r=Aatch\n\nThis is the original test implementation, which works according to the tests I wrote, but might need a review.", "tree": {"sha": "726278c05db10bb72cfc71ca388c5f1530d18847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726278c05db10bb72cfc71ca388c5f1530d18847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a668dd2a563796d6ab94a385e5a49a619c53e8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a668dd2a563796d6ab94a385e5a49a619c53e8ce", "html_url": "https://github.com/rust-lang/rust/commit/a668dd2a563796d6ab94a385e5a49a619c53e8ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a668dd2a563796d6ab94a385e5a49a619c53e8ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294ef5b158601b09e2a3ca49af124c63a9cf9528", "url": "https://api.github.com/repos/rust-lang/rust/commits/294ef5b158601b09e2a3ca49af124c63a9cf9528", "html_url": "https://github.com/rust-lang/rust/commit/294ef5b158601b09e2a3ca49af124c63a9cf9528"}, {"sha": "4c88bf2885d91f9aa0c4aeab619542a50a278f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c88bf2885d91f9aa0c4aeab619542a50a278f33", "html_url": "https://github.com/rust-lang/rust/commit/4c88bf2885d91f9aa0c4aeab619542a50a278f33"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "b4c052eb1817f38352f43e306fe30bdb143289dc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a668dd2a563796d6ab94a385e5a49a619c53e8ce", "patch": "@@ -4380,11 +4380,11 @@ impl<'a> Parser<'a> {\n     /// - `extern fn`\n     /// - etc\n     pub fn parse_fn_front_matter(&mut self) -> PResult<(ast::Constness, ast::Unsafety, abi::Abi)> {\n+        let unsafety = try!(self.parse_unsafety());\n         let is_const_fn = try!(self.eat_keyword(keywords::Const));\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (Constness::Const, Unsafety::Normal, abi::Rust)\n+            (Constness::Const, unsafety, abi::Rust)\n         } else {\n-            let unsafety = try!(self.parse_unsafety());\n             let abi = if try!(self.eat_keyword(keywords::Extern)) {\n                 try!(self.parse_opt_abi()).unwrap_or(abi::C)\n             } else {\n@@ -5378,9 +5378,14 @@ impl<'a> Parser<'a> {\n             } else {\n                 abi::Rust\n             };\n+            let constness = if abi == abi::Rust && try!(self.eat_keyword(keywords::Const) ){\n+                Constness::Const\n+            } else {\n+                Constness::NotConst\n+            };\n             try!(self.expect_keyword(keywords::Fn));\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi));\n+                try!(self.parse_item_fn(Unsafety::Unsafe, constness, abi));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "0bbfe4c720a5d302d11fc82273c72fee1868fd6a", "filename": "src/test/compile-fail/unsafe-const-fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs?ref=a668dd2a563796d6ab94a385e5a49a619c53e8ce", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A quick test of 'unsafe const fn' functionality\n+\n+#![feature(const_fn)]\n+\n+unsafe const fn dummy(v: u32) -> u32 {\n+    !v\n+}\n+\n+const VAL: u32 = dummy(0xFFFF); //~ ERROR E0133\n+\n+fn main() {\n+    assert_eq!(VAL, 0xFFFF0000);\n+}\n+"}, {"sha": "2ba113127b985d912481a0d8987459a8b503c45d", "filename": "src/test/run-pass/unsafe-const-fn.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a668dd2a563796d6ab94a385e5a49a619c53e8ce/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs?ref=a668dd2a563796d6ab94a385e5a49a619c53e8ce", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A quick test of 'unsafe const fn' functionality\n+\n+#![feature(const_fn)]\n+\n+unsafe const fn dummy(v: u32) -> u32 {\n+    !v\n+}\n+\n+struct Type;\n+impl Type {\n+    unsafe const fn new() -> Type {\n+        Type\n+    }\n+}\n+\n+const VAL: u32 = unsafe { dummy(0xFFFF) };\n+const TYPE_INST: Type = unsafe { Type::new() };\n+\n+fn main() {\n+    assert_eq!(VAL, 0xFFFF0000);\n+}"}]}