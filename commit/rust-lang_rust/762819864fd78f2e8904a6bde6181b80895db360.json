{"sha": "762819864fd78f2e8904a6bde6181b80895db360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjgxOTg2NGZkNzhmMmU4OTA0YTZiZGU2MTgxYjgwODk1ZGIzNjA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-19T11:33:29Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-19T11:33:29Z"}, "message": "add block matcher", "tree": {"sha": "1cade2d6eb97a52785a91258cfd3f03c57fba027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cade2d6eb97a52785a91258cfd3f03c57fba027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762819864fd78f2e8904a6bde6181b80895db360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762819864fd78f2e8904a6bde6181b80895db360", "html_url": "https://github.com/rust-lang/rust/commit/762819864fd78f2e8904a6bde6181b80895db360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762819864fd78f2e8904a6bde6181b80895db360/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8092b6487f301bf9219c55fc714744fa2616fb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8092b6487f301bf9219c55fc714744fa2616fb9a", "html_url": "https://github.com/rust-lang/rust/commit/8092b6487f301bf9219c55fc714744fa2616fb9a"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "d7462d09df8a70fa56f5e2fd02c9fdf79b6b8625", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -743,4 +743,23 @@ MACRO_ITEMS@[0; 40)\n         );\n         assert_expansion(&rules, \"foo! { { 1; } }\", \"fn foo () {1 ;}\");\n     }\n+\n+    #[test]\n+    fn test_meta() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ i:meta) => (\n+                #[$ i]\n+                fn bar() {}\n+            )\n+        }\n+\"#,\n+        );\n+        assert_expansion(\n+            &rules,\n+            r#\"foo! { cfg(target_os = \"windows\") }\"#,\n+            r#\"# [cfg (target_os = \"windows\")] fn bar () {}\"#,\n+        );\n+    }\n }"}, {"sha": "6ada580ccb0983d1157aa854108a3397c0b5f5bd", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -166,6 +166,11 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                                 input.eat_block().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(block.into()));\n                         }\n+                        \"meta\" => {\n+                            let meta =\n+                                input.eat_meta().ok_or(ExpandError::UnexpectedToken)?.clone();\n+                            res.inner.insert(text.clone(), Binding::Simple(meta.into()));\n+                        }\n                         \"item\" => {\n                             let item =\n                                 input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();"}, {"sha": "5d5557113e65ee5522e34ca917fa13456c52318a", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -50,6 +50,10 @@ impl<'a> Parser<'a> {\n         self.parse(ra_parser::parse_block)\n     }\n \n+    pub fn parse_meta(self) -> Option<tt::TokenTree> {\n+        self.parse(ra_parser::parse_meta)\n+    }\n+\n     pub fn parse_item(self) -> Option<tt::TokenTree> {\n         self.parse(ra_parser::parse_item)\n     }"}, {"sha": "04bb6b5631852b980297891d1042e85036dda7d5", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -109,6 +109,11 @@ impl<'a> TtCursor<'a> {\n         parser.parse_block()\n     }\n \n+    pub(crate) fn eat_meta(&mut self) -> Option<tt::TokenTree> {\n+        let parser = Parser::new(&mut self.pos, self.subtree);\n+        parser.parse_meta()\n+    }\n+\n     pub(crate) fn eat_item(&mut self) -> Option<tt::TokenTree> {\n         let parser = Parser::new(&mut self.pos, self.subtree);\n         parser.parse_item()"}, {"sha": "13c50c79c1b3ee035dd23a72778a25c969a5dc09", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -99,6 +99,33 @@ pub(crate) fn block(p: &mut Parser) {\n     expressions::block(p);\n }\n \n+// Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n+pub(crate) fn meta_item(p: &mut Parser) {\n+    fn is_delimiter(p: &mut Parser) -> bool {\n+        match p.current() {\n+            L_CURLY | L_PAREN | L_BRACK => true,\n+            _ => false,\n+        }\n+    }\n+\n+    if is_delimiter(p) {\n+        items::token_tree(p);\n+        return;\n+    }\n+\n+    let m = p.start();\n+    while !p.at(EOF) {\n+        if is_delimiter(p) {\n+            items::token_tree(p);\n+            break;\n+        } else {\n+            p.bump();\n+        }\n+    }\n+\n+    m.complete(p, TOKEN_TREE);\n+}\n+\n pub(crate) fn item(p: &mut Parser) {\n     items::item_or_macro(p, true, items::ItemFlavor::Mod)\n }"}, {"sha": "4787b5b9ead9ac200b2d629e1a701f5e5b020460", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762819864fd78f2e8904a6bde6181b80895db360/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=762819864fd78f2e8904a6bde6181b80895db360", "patch": "@@ -98,6 +98,10 @@ pub fn parse_block(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink)\n     parse_from_tokens(token_source, tree_sink, grammar::block);\n }\n \n+pub fn parse_meta(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n+    parse_from_tokens(token_source, tree_sink, grammar::meta_item);\n+}\n+\n /// Parse given tokens into the given sink as an item\n pub fn parse_item(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n     parse_from_tokens(token_source, tree_sink, grammar::item);"}]}