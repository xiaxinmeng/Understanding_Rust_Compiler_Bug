{"sha": "e99eff172a11816f335153147dd0800fc4877bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OWVmZjE3MmExMTgxNmYzMzUxNTMxNDdkZDA4MDBmYzQ4NzdiZWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-07T06:03:31Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:12Z"}, "message": "Forbid `priv` where it has no effect\n\nThis is everywhere except struct fields and enum variants.", "tree": {"sha": "5579273b59f513437a40cd0f47205b49df434559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5579273b59f513437a40cd0f47205b49df434559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99eff172a11816f335153147dd0800fc4877bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99eff172a11816f335153147dd0800fc4877bee", "html_url": "https://github.com/rust-lang/rust/commit/e99eff172a11816f335153147dd0800fc4877bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99eff172a11816f335153147dd0800fc4877bee/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8964fcc5ac9cefcc55ea071142c3c81d623a52be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8964fcc5ac9cefcc55ea071142c3c81d623a52be", "html_url": "https://github.com/rust-lang/rust/commit/8964fcc5ac9cefcc55ea071142c3c81d623a52be"}], "stats": {"total": 145, "additions": 81, "deletions": 64}, "files": [{"sha": "14b02688cffcfc1481ff2927727b3ab5c0981a1e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -129,27 +129,27 @@ struct FileInput_ {\n     `Some(path)` is the file represented by `path`, `None` is\n     `stdin`. Consumed as the files are read.\n     */\n-    priv files: ~[Option<Path>],\n+    files: ~[Option<Path>],\n     /**\n     The current file: `Some(r)` for an open file, `None` before\n     starting and after reading everything.\n     */\n-    priv current_reader: Option<@io::Reader>,\n-    priv state: FileInputState,\n+    current_reader: Option<@io::Reader>,\n+    state: FileInputState,\n \n     /**\n     Used to keep track of whether we need to insert the newline at the\n     end of a file that is missing it, which is needed to separate the\n     last and first lines.\n     */\n-    priv previous_was_newline: bool\n+    previous_was_newline: bool\n }\n \n // XXX: remove this when Reader has &mut self. Should be removable via\n // \"self.fi.\" -> \"self.\" and renaming FileInput_. Documentation above\n // will likely have to be updated to use `let mut in = ...`.\n pub struct FileInput  {\n-    priv fi: @mut FileInput_\n+    fi: @mut FileInput_\n }\n \n impl FileInput {\n@@ -198,7 +198,7 @@ impl FileInput {\n         FileInput::from_vec(pathed)\n     }\n \n-    priv fn current_file_eof(&self) -> bool {\n+    fn current_file_eof(&self) -> bool {\n         match self.fi.current_reader {\n             None => false,\n             Some(r) => r.eof()\n@@ -240,7 +240,7 @@ impl FileInput {\n     Returns `true` if it had to move to the next file and did\n     so successfully.\n     */\n-    priv fn next_file_if_eof(&self) -> bool {\n+    fn next_file_if_eof(&self) -> bool {\n         match self.fi.current_reader {\n             None => self.next_file(),\n             Some(r) => {"}, {"sha": "cc65c49d73a9c2b569619591a145df84c8036d3f", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -46,7 +46,7 @@ impl<A> Drop for Future<A> {\n     fn drop(&self) {}\n }\n \n-priv enum FutureState<A> {\n+enum FutureState<A> {\n     Pending(~fn() -> A),\n     Evaluating,\n     Forced(A)"}, {"sha": "8bd9d857d6957135724c0acf978926dd61bc0647", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -708,9 +708,9 @@ pub mod groups {\n      *  Fails during iteration if the string contains a non-whitespace\n      *  sequence longer than the limit.\n      */\n-    priv fn each_split_within<'a>(ss: &'a str,\n-                                lim: uint,\n-                                it: &fn(&'a str) -> bool) -> bool {\n+    fn each_split_within<'a>(ss: &'a str,\n+                             lim: uint,\n+                             it: &fn(&'a str) -> bool) -> bool {\n         // Just for fun, let's write this as an state machine:\n \n         enum SplitWithinState {\n@@ -778,7 +778,7 @@ pub mod groups {\n     }\n \n     #[test]\n-    priv fn test_split_within() {\n+    fn test_split_within() {\n         fn t(s: &str, i: uint, u: &[~str]) {\n             let mut v = ~[];\n             do each_split_within(s, i) |s| { v.push(s.to_owned()); true };"}, {"sha": "0c8701bd0b515b1db16a6dc7dc5f0b958cdb0558", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -59,13 +59,13 @@ pub mod BigDigit {\n     pub static bits: uint = 32;\n \n     pub static base: uint = 1 << bits;\n-    priv static hi_mask: uint = (-1 as uint) << bits;\n-    priv static lo_mask: uint = (-1 as uint) >> bits;\n+    static hi_mask: uint = (-1 as uint) << bits;\n+    static lo_mask: uint = (-1 as uint) >> bits;\n \n \n-    priv fn get_hi(n: uint) -> BigDigit { (n >> bits) as BigDigit }\n+    fn get_hi(n: uint) -> BigDigit { (n >> bits) as BigDigit }\n \n-    priv fn get_lo(n: uint) -> BigDigit { (n & lo_mask) as BigDigit }\n+    fn get_lo(n: uint) -> BigDigit { (n & lo_mask) as BigDigit }\n \n     /// Split one machine sized unsigned integer into two BigDigits.\n \n@@ -613,15 +613,15 @@ impl BigUint {\n     }\n \n \n-    priv fn shl_unit(&self, n_unit: uint) -> BigUint {\n+    fn shl_unit(&self, n_unit: uint) -> BigUint {\n         if n_unit == 0 || self.is_zero() { return (*self).clone(); }\n \n         return BigUint::new(vec::from_elem(n_unit, ZERO_BIG_DIGIT)\n                             + self.data);\n     }\n \n \n-    priv fn shl_bits(&self, n_bits: uint) -> BigUint {\n+    fn shl_bits(&self, n_bits: uint) -> BigUint {\n         if n_bits == 0 || self.is_zero() { return (*self).clone(); }\n \n         let mut carry = 0;\n@@ -637,7 +637,7 @@ impl BigUint {\n     }\n \n \n-    priv fn shr_unit(&self, n_unit: uint) -> BigUint {\n+    fn shr_unit(&self, n_unit: uint) -> BigUint {\n         if n_unit == 0 { return (*self).clone(); }\n         if self.data.len() < n_unit { return Zero::zero(); }\n         return BigUint::from_slice(\n@@ -646,7 +646,7 @@ impl BigUint {\n     }\n \n \n-    priv fn shr_bits(&self, n_bits: uint) -> BigUint {\n+    fn shr_bits(&self, n_bits: uint) -> BigUint {\n         if n_bits == 0 || self.data.is_empty() { return (*self).clone(); }\n \n         let mut borrow = 0;\n@@ -661,7 +661,7 @@ impl BigUint {\n \n #[cfg(target_arch = \"x86_64\")]\n \n-priv fn get_radix_base(radix: uint) -> (uint, uint) {\n+fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert!(1 < radix && radix <= 16);\n     match radix {\n         2  => (4294967296, 32),\n@@ -687,7 +687,7 @@ priv fn get_radix_base(radix: uint) -> (uint, uint) {\n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"mips\")]\n \n-priv fn get_radix_base(radix: uint) -> (uint, uint) {\n+fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert!(1 < radix && radix <= 16);\n     match radix {\n         2  => (65536, 16),"}, {"sha": "881d931fe0acc21749287991d5826564c8ded3c8", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -223,7 +223,7 @@ impl<'self> Stats for &'self [f64] {\n \n // Helper function: extract a value representing the `pct` percentile of a sorted sample-set, using\n // linear interpolation. If samples are not sorted, return nonsensical value.\n-priv fn percentile_of_sorted(sorted_samples: &[f64],\n+fn percentile_of_sorted(sorted_samples: &[f64],\n                              pct: f64) -> f64 {\n     assert!(sorted_samples.len() != 0);\n     if sorted_samples.len() == 1 {"}, {"sha": "d0412b8954db2abc963e43f87979ca96503709c8", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -75,7 +75,7 @@ pub mod attr {\n }\n \n #[cfg(not(target_os = \"win32\"))]\n-priv fn cap_for_attr(attr: attr::Attr) -> &'static str {\n+fn cap_for_attr(attr: attr::Attr) -> &'static str {\n     match attr {\n         attr::Bold               => \"bold\",\n         attr::Dim                => \"dim\",\n@@ -234,7 +234,7 @@ impl Terminal {\n         }\n     }\n \n-    priv fn dim_if_necessary(&self, color: color::Color) -> color::Color {\n+    fn dim_if_necessary(&self, color: color::Color) -> color::Color {\n         if color >= self.num_colors && color >= 8 && color < 16 {\n             color-8\n         } else { color }"}, {"sha": "0929575ee9e70bc1eb089e56b0d248d0f70f360c", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -430,7 +430,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n }\n \n #[deriving(Eq)]\n-priv struct Flags {\n+struct Flags {\n     width: uint,\n     precision: uint,\n     alternate: bool,\n@@ -440,13 +440,13 @@ priv struct Flags {\n }\n \n impl Flags {\n-    priv fn new() -> Flags {\n+    fn new() -> Flags {\n         Flags{ width: 0, precision: 0, alternate: false,\n                left: false, sign: false, space: false }\n     }\n }\n \n-priv enum FormatOp {\n+enum FormatOp {\n     FormatDigit,\n     FormatOctal,\n     FormatHex,\n@@ -455,7 +455,7 @@ priv enum FormatOp {\n }\n \n impl FormatOp {\n-    priv fn from_char(c: char) -> FormatOp {\n+    fn from_char(c: char) -> FormatOp {\n         match c {\n             'd' => FormatDigit,\n             'o' => FormatOctal,\n@@ -465,7 +465,7 @@ impl FormatOp {\n             _ => fail!(\"bad FormatOp char\")\n         }\n     }\n-    priv fn to_char(self) -> char {\n+    fn to_char(self) -> char {\n         match self {\n             FormatDigit => 'd',\n             FormatOctal => 'o',\n@@ -476,7 +476,7 @@ impl FormatOp {\n     }\n }\n \n-priv fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n+fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n     let mut s = match val {\n         Number(d) => {\n             match op {"}, {"sha": "f6a5fd98234b58aabab5898bdc13b9137c500ee3", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -254,7 +254,7 @@ impl Tm {\n     }\n }\n \n-priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n+fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     fn match_str(s: &str, pos: uint, needle: &str) -> bool {\n         let mut i = pos;\n         for ch in needle.byte_iter() {\n@@ -687,7 +687,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     }\n }\n \n-priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n+fn do_strftime(format: &str, tm: &Tm) -> ~str {\n     fn parse_type(ch: char, tm: &Tm) -> ~str {\n         //FIXME (#2350): Implement missing types.\n       let die = || fmt!(\"strftime: can't understand this format %c \", ch);"}, {"sha": "c9e2b8dd37b9dfb02d6a3fdc83bccc19ea0b9cfa", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -215,7 +215,7 @@ impl region_scope for MethodRscope {\n pub struct type_rscope(Option<RegionParameterization>);\n \n impl type_rscope {\n-    priv fn replacement(&self) -> ty::Region {\n+    fn replacement(&self) -> ty::Region {\n         if self.is_some() {\n             ty::re_bound(ty::br_self)\n         } else {"}, {"sha": "a4de10f8c7760aae76a718f95a74aab086ad7cb7", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -314,7 +314,7 @@ mod pipesy {\n \n     #[allow(non_camel_case_types)]\n     pub mod oneshot {\n-        priv use std::kinds::Send;\n+        use std::kinds::Send;\n         use ptr::to_mut_unsafe_ptr;\n \n         pub fn init<T: Send>() -> (server::Oneshot<T>, client::Oneshot<T>) {\n@@ -341,7 +341,7 @@ mod pipesy {\n         #[allow(non_camel_case_types)]\n         pub mod client {\n \n-            priv use std::kinds::Send;\n+            use std::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n             pub fn try_send<T: Send>(pipe: Oneshot<T>, x_0: T) ->\n@@ -489,7 +489,7 @@ mod pipesy {\n \n     #[allow(non_camel_case_types)]\n     pub mod streamp {\n-        priv use std::kinds::Send;\n+        use std::kinds::Send;\n \n         pub fn init<T: Send>() -> (server::Open<T>, client::Open<T>) {\n             pub use std::pipes::HasBuffer;\n@@ -501,7 +501,7 @@ mod pipesy {\n \n         #[allow(non_camel_case_types)]\n         pub mod client {\n-            priv use std::kinds::Send;\n+            use std::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n             pub fn try_data<T: Send>(pipe: Open<T>, x_0: T) ->"}, {"sha": "1f22343ad9c36063b8dc392120a4b3c451c15e45", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -422,9 +422,9 @@ pub fn float_to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Float+Round+\n \n // Some constants for from_str_bytes_common's input validation,\n // they define minimum radix values for which the character is a valid digit.\n-priv static DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n-priv static DIGIT_I_RADIX: uint = ('i' as uint) - ('a' as uint) + 11u;\n-priv static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n+static DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n+static DIGIT_I_RADIX: uint = ('i' as uint) - ('a' as uint) + 11u;\n+static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n \n /**\n  * Parses a byte slice as a number. This is meant to"}, {"sha": "99cf96eaae2fff4be0fcdd9d72a4714c5ff2f06b", "filename": "src/libstd/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -761,14 +761,14 @@ fn with_dirp<T>(d: Option<&Path>,\n }\n \n #[cfg(windows)]\n-priv fn free_handle(handle: *()) {\n+fn free_handle(handle: *()) {\n     unsafe {\n         libc::funcs::extra::kernel32::CloseHandle(cast::transmute(handle));\n     }\n }\n \n #[cfg(unix)]\n-priv fn free_handle(_handle: *()) {\n+fn free_handle(_handle: *()) {\n     // unix has no process handle object, just a pid\n }\n \n@@ -823,7 +823,7 @@ pub fn process_output(prog: &str, args: &[~str]) -> ProcessOutput {\n  * operate on a none-existant process or, even worse, on a newer process\n  * with the same id.\n  */\n-priv fn waitpid(pid: pid_t) -> int {\n+fn waitpid(pid: pid_t) -> int {\n     return waitpid_os(pid);\n \n     #[cfg(windows)]"}, {"sha": "fa75916fb8640e10785c53b3e70c6c69aab93a89", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -738,7 +738,7 @@ pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-priv static UTF8_CHAR_WIDTH: [u8, ..256] = [\n+static UTF8_CHAR_WIDTH: [u8, ..256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n@@ -781,15 +781,15 @@ macro_rules! utf8_acc_cont_byte(\n )\n \n // UTF-8 tags and ranges\n-priv static TAG_CONT_U8: u8 = 128u8;\n-priv static TAG_CONT: uint = 128u;\n-priv static MAX_ONE_B: uint = 128u;\n-priv static TAG_TWO_B: uint = 192u;\n-priv static MAX_TWO_B: uint = 2048u;\n-priv static TAG_THREE_B: uint = 224u;\n-priv static MAX_THREE_B: uint = 65536u;\n-priv static TAG_FOUR_B: uint = 240u;\n-priv static MAX_UNICODE: uint = 1114112u;\n+static TAG_CONT_U8: u8 = 128u8;\n+static TAG_CONT: uint = 128u;\n+static MAX_ONE_B: uint = 128u;\n+static TAG_TWO_B: uint = 192u;\n+static MAX_TWO_B: uint = 2048u;\n+static TAG_THREE_B: uint = 224u;\n+static MAX_THREE_B: uint = 65536u;\n+static TAG_FOUR_B: uint = 240u;\n+static MAX_UNICODE: uint = 1114112u;\n \n /// Unsafe operations\n pub mod raw {"}, {"sha": "6ededb02107d497bb77a2d0b91e1b11d70b84978", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -274,7 +274,7 @@ pub fn to_ascii_lower(string: &str) -> ~str {\n }\n \n #[inline]\n-priv fn map_bytes(string: &str, map: &'static [u8]) -> ~str {\n+fn map_bytes(string: &str, map: &'static [u8]) -> ~str {\n     let len = string.len();\n     let mut result = str::with_capacity(len);\n     unsafe {\n@@ -298,7 +298,7 @@ pub fn eq_ignore_ascii_case(a: &str, b: &str) -> bool {\n         |(byte_a, byte_b)| ASCII_LOWER_MAP[*byte_a] == ASCII_LOWER_MAP[*byte_b])\n }\n \n-priv static ASCII_LOWER_MAP: &'static [u8] = &[\n+static ASCII_LOWER_MAP: &'static [u8] = &[\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n@@ -333,7 +333,7 @@ priv static ASCII_LOWER_MAP: &'static [u8] = &[\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-priv static ASCII_UPPER_MAP: &'static [u8] = &[\n+static ASCII_UPPER_MAP: &'static [u8] = &[\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "dda5e990221eccf066d42a502637108f17bad179", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -64,6 +64,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteMutWithMultipleBindings,\n     ObsoleteExternVisibility,\n     ObsoleteUnsafeExternFn,\n+    ObsoletePrivVisibility,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -253,6 +254,10 @@ impl ParserObsoleteMethods for Parser {\n                 \"external functions are always unsafe; remove the `unsafe` \\\n                  keyword\"\n             ),\n+            ObsoletePrivVisibility => (\n+                \"`priv` not necessary\",\n+                \"an item without a visibility qualifier is private by default\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "7d6dce22fb7b423553d034f8f718c373860d68c8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -85,7 +85,7 @@ use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n use parse::obsolete::{ObsoleteExternVisibility, ObsoleteUnsafeExternFn};\n-use parse::obsolete::{ParserObsoleteMethods};\n+use parse::obsolete::{ParserObsoleteMethods, ObsoletePrivVisibility};\n use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident};\n use parse::token::{is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents};\n@@ -814,7 +814,7 @@ impl Parser {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n \n-            let vis = p.parse_visibility();\n+            let vis = p.parse_non_priv_visibility();\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n@@ -3608,7 +3608,7 @@ impl Parser {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n-        let visa = self.parse_visibility();\n+        let visa = self.parse_non_priv_visibility();\n         let pur = self.parse_fn_purity();\n         let ident = self.parse_ident();\n         let generics = self.parse_generics();\n@@ -3871,6 +3871,18 @@ impl Parser {\n         else { inherited }\n     }\n \n+    // parse visibility, but emits an obsolete error if it's private\n+    fn parse_non_priv_visibility(&self) -> visibility {\n+        match self.parse_visibility() {\n+            public => public,\n+            inherited => inherited,\n+            private => {\n+                self.obsolete(*self.last_span, ObsoletePrivVisibility);\n+                inherited\n+            }\n+        }\n+    }\n+\n     fn parse_staticness(&self) -> bool {\n         if self.eat_keyword(keywords::Static) {\n             self.obsolete(*self.last_span, ObsoleteStaticMethod);\n@@ -4063,7 +4075,7 @@ impl Parser {\n     // parse a function declaration from a foreign module\n     fn parse_item_foreign_fn(&self,  attrs: ~[Attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility();\n+        let vis = self.parse_non_priv_visibility();\n \n         // Parse obsolete purity.\n         let purity = self.parse_fn_purity();\n@@ -4443,7 +4455,7 @@ impl Parser {\n         maybe_whole!(iovi self, nt_item);\n         let lo = self.span.lo;\n \n-        let visibility = self.parse_visibility();\n+        let visibility = self.parse_non_priv_visibility();\n \n         // must be a view item:\n         if self.eat_keyword(keywords::Use) {\n@@ -4575,7 +4587,7 @@ impl Parser {\n         maybe_whole!(iovi self, nt_item);\n         let lo = self.span.lo;\n \n-        let visibility = self.parse_visibility();\n+        let visibility = self.parse_non_priv_visibility();\n \n         if (self.is_keyword(keywords::Const) || self.is_keyword(keywords::Static)) {\n             // FOREIGN CONST ITEM"}, {"sha": "a134ffe49fd02f4f1ee2e75808ae0a8c2fbff2c5", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99eff172a11816f335153147dd0800fc4877bee/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99eff172a11816f335153147dd0800fc4877bee/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=e99eff172a11816f335153147dd0800fc4877bee", "patch": "@@ -21,7 +21,7 @@ struct dog {\n }\n \n impl dog {\n-    priv fn bark(&self) -> int {\n+    fn bark(&self) -> int {\n       info!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n       if *self.barks % 3u == 0u {"}]}