{"sha": "1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTY3NjJiMWYyYjljYjE5NmNjODc5ZjBjZTI2ZDI4YTNjNDUwYzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-07T13:35:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-07T13:35:02Z"}, "message": "Merge #3048\n\n3048: Remove irrelevant distinction r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e17cb26eb6da4c1832f4ae4fca10c57f100b546b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17cb26eb6da4c1832f4ae4fca10c57f100b546b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePWeGCRBK7hj4Ov3rIwAAdHIIADn67VHvY0AL+PEqS246sNe3\nZ/9nj5wUYBQeE27QV6kqWTi9oh4fxogIyn//OUrQpOQotBTAAUX5+lGFcIvmO2yE\nPMlnyzZXUYGE5rXEGvmm8fLVxM7QFQP2YtfJflQoIAtCV2wymDvei8F7vYaIPngJ\nzYuuqgBYrr7yZ9mgcy3i64eh1khvFGW2ETFN8B9XMCLjFIhUng3ITbN1NUAd1EOT\njO4It2zorg1mXCJB/IDyaRoIs4R7LiMyHgFQH/87RHlg+R/8Gx8cl1kk/6363TVk\nGCgZW3ZtWnQEeC6aQAMe0ins/hz1NzzdZg+pccgE6eUsD0uQuk9LZNHLSBMAuv8=\n=vhQ1\n-----END PGP SIGNATURE-----\n", "payload": "tree e17cb26eb6da4c1832f4ae4fca10c57f100b546b\nparent 8337dcd9e277feac8e9cff621c752a3e86ba19e6\nparent ae70d072374f3c4d14abdccbe61661cf02b41b33\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581082502 +0000\ncommitter GitHub <noreply@github.com> 1581082502 +0000\n\nMerge #3048\n\n3048: Remove irrelevant distinction r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "html_url": "https://github.com/rust-lang/rust/commit/1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8337dcd9e277feac8e9cff621c752a3e86ba19e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8337dcd9e277feac8e9cff621c752a3e86ba19e6", "html_url": "https://github.com/rust-lang/rust/commit/8337dcd9e277feac8e9cff621c752a3e86ba19e6"}, {"sha": "ae70d072374f3c4d14abdccbe61661cf02b41b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae70d072374f3c4d14abdccbe61661cf02b41b33", "html_url": "https://github.com/rust-lang/rust/commit/ae70d072374f3c4d14abdccbe61661cf02b41b33"}], "stats": {"total": 116, "additions": 45, "deletions": 71}, "files": [{"sha": "de5551a4c75df791e9d5436b54c255259c17332a", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -76,11 +76,10 @@ pub(crate) fn reference_definition(\n     let name_kind = classify_name_ref(sb, name_ref).map(|d| d.kind);\n     match name_kind {\n         Some(Macro(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(Field(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(StructField(it)) => return Exact(it.to_nav(sb.db)),\n         Some(TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(AssocItem(it)) => return Exact(it.to_nav(sb.db)),\n         Some(Local(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(Def(def)) => match NavigationTarget::from_def(sb.db, def) {\n+        Some(ModuleDef(def)) => match NavigationTarget::from_def(sb.db, def) {\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },"}, {"sha": "3f88bb260681dc2a768c3b56821f37f86d393645", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -98,19 +98,14 @@ fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<S\n             let src = it.source(db);\n             hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n         }\n-        Field(it) => {\n+        StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n                 hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n                 _ => None,\n             }\n         }\n-        AssocItem(it) => match it {\n-            hir::AssocItem::Function(it) => from_def_source(db, it),\n-            hir::AssocItem::Const(it) => from_def_source(db, it),\n-            hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n-        },\n-        Def(it) => match it {\n+        ModuleDef(it) => match it {\n             hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n                 hir::ModuleSource::Module(it) => {\n                     hover_text(it.doc_comment_text(), it.short_label())"}, {"sha": "a6320bd2f5701b93fae09f31001cb4b483f92ec8", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -127,9 +127,8 @@ pub(crate) fn find_all_refs(\n \n     let declaration = match def.kind {\n         NameKind::Macro(mac) => mac.to_nav(db),\n-        NameKind::Field(field) => field.to_nav(db),\n-        NameKind::AssocItem(assoc) => assoc.to_nav(db),\n-        NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n+        NameKind::StructField(field) => field.to_nav(db),\n+        NameKind::ModuleDef(def) => NavigationTarget::from_def(db, def)?,\n         NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),\n         NameKind::TypeParam(_) => return None,\n@@ -240,7 +239,7 @@ fn decl_access(\n     range: TextRange,\n ) -> Option<ReferenceAccess> {\n     match kind {\n-        NameKind::Local(_) | NameKind::Field(_) => {}\n+        NameKind::Local(_) | NameKind::StructField(_) => {}\n         _ => return None,\n     };\n \n@@ -260,7 +259,7 @@ fn decl_access(\n fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n     match kind {\n-        NameKind::Local(_) | NameKind::Field(_) => {}\n+        NameKind::Local(_) | NameKind::StructField(_) => {}\n         _ => return None,\n     };\n "}, {"sha": "d0f03d8a89a88aa2284f1a4ee6e58eb6dd401ab9", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -8,7 +8,7 @@ use test_utils::tested_by;\n use super::{NameDefinition, NameKind};\n use ra_ide_db::RootDatabase;\n \n-pub use ra_ide_db::defs::{classify_name, from_assoc_item, from_module_def, from_struct_field};\n+pub use ra_ide_db::defs::{classify_name, from_module_def, from_struct_field};\n \n pub(crate) fn classify_name_ref(\n     sb: &mut SourceBinder<RootDatabase>,\n@@ -22,7 +22,7 @@ pub(crate) fn classify_name_ref(\n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n         tested_by!(goto_def_for_methods);\n         if let Some(func) = analyzer.resolve_method_call(&method_call) {\n-            return Some(from_assoc_item(sb.db, func.into()));\n+            return Some(from_module_def(sb.db, func.into(), None));\n         }\n     }\n \n@@ -57,27 +57,35 @@ pub(crate) fn classify_name_ref(\n \n     let path = name_ref.value.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = analyzer.resolve_path(sb.db, &path)?;\n-    match resolved {\n-        PathResolution::Def(def) => Some(from_module_def(sb.db, def, Some(container))),\n-        PathResolution::AssocItem(item) => Some(from_assoc_item(sb.db, item)),\n+    let res = match resolved {\n+        PathResolution::Def(def) => from_module_def(sb.db, def, Some(container)),\n+        PathResolution::AssocItem(item) => {\n+            let def = match item {\n+                hir::AssocItem::Function(it) => it.into(),\n+                hir::AssocItem::Const(it) => it.into(),\n+                hir::AssocItem::TypeAlias(it) => it.into(),\n+            };\n+            from_module_def(sb.db, def, Some(container))\n+        }\n         PathResolution::Local(local) => {\n             let kind = NameKind::Local(local);\n             let container = local.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility: None })\n+            NameDefinition { kind, container, visibility: None }\n         }\n         PathResolution::TypeParam(par) => {\n             let kind = NameKind::TypeParam(par);\n             let container = par.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n         PathResolution::Macro(def) => {\n             let kind = NameKind::Macro(def);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n         PathResolution::SelfType(impl_block) => {\n             let kind = NameKind::SelfType(impl_block);\n             let container = impl_block.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n-    }\n+    };\n+    Some(res)\n }"}, {"sha": "174e135951a34f438880a2f623ff120d24550643", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -320,19 +320,16 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n         Macro(_) => tags::MACRO,\n-        Field(_) => tags::FIELD,\n-        AssocItem(hir::AssocItem::Function(_)) => tags::FUNCTION,\n-        AssocItem(hir::AssocItem::Const(_)) => tags::CONSTANT,\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::Module(_)) => tags::MODULE,\n-        Def(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n-        Def(hir::ModuleDef::Adt(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Trait(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        StructField(_) => tags::FIELD,\n+        ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n         SelfType(_) => tags::TYPE_SELF,\n         TypeParam(_) => tags::TYPE_PARAM,\n         Local(local) => {"}, {"sha": "030f44f8649ddc1b0f0e4eb5ce3bcec8ee0bfd80", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, AssocItem, HasSource, ImplBlock, InFile, Local, MacroDef, Module, ModuleDef, SourceBinder,\n+    Adt, HasSource, ImplBlock, InFile, Local, MacroDef, Module, ModuleDef, SourceBinder,\n     StructField, TypeParam, VariantDef,\n };\n use ra_prof::profile;\n@@ -20,9 +20,8 @@ use crate::RootDatabase;\n #[derive(Debug, PartialEq, Eq)]\n pub enum NameKind {\n     Macro(MacroDef),\n-    Field(StructField),\n-    AssocItem(AssocItem),\n-    Def(ModuleDef),\n+    StructField(StructField),\n+    ModuleDef(ModuleDef),\n     SelfType(ImplBlock),\n     Local(Local),\n     TypeParam(TypeParam),\n@@ -92,29 +91,17 @@ pub fn classify_name(\n             ast::FnDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Function = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).map_or(false, |it| it.syntax().parent().and_then(ast::Module::cast).is_none()) {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::ConstDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Const = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::TypeAliasDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::TypeAlias = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::MacroCall(it) => {\n                 let src = name.with_value(it);\n@@ -142,19 +129,8 @@ pub fn classify_name(\n     }\n }\n \n-pub fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinition {\n-    let container = item.module(db);\n-    let visibility = match item {\n-        AssocItem::Function(f) => f.source(db).value.visibility(),\n-        AssocItem::Const(c) => c.source(db).value.visibility(),\n-        AssocItem::TypeAlias(a) => a.source(db).value.visibility(),\n-    };\n-    let kind = NameKind::AssocItem(item);\n-    NameDefinition { kind, container, visibility }\n-}\n-\n pub fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDefinition {\n-    let kind = NameKind::Field(field);\n+    let kind = NameKind::StructField(field);\n     let parent = field.parent_def(db);\n     let container = parent.module(db);\n     let visibility = match parent {\n@@ -170,7 +146,7 @@ pub fn from_module_def(\n     def: ModuleDef,\n     module: Option<Module>,\n ) -> NameDefinition {\n-    let kind = NameKind::Def(def);\n+    let kind = NameKind::ModuleDef(def);\n     let (container, visibility) = match def {\n         ModuleDef::Module(it) => {\n             let container = it.parent(db).or_else(|| Some(it)).unwrap();"}, {"sha": "86383bcd03c9e6ca63bb189454561ae9396b2516", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1996762b1f2b9cb196cc879f0ce26d28a3c450c8/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=1996762b1f2b9cb196cc879f0ce26d28a3c450c8", "patch": "@@ -44,7 +44,7 @@ impl<'a> ImportsLocator<'a> {\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(db, &import_candidate))\n             .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                NameKind::Def(module_def) => Some(module_def),\n+                NameKind::ModuleDef(module_def) => Some(module_def),\n                 _ => None,\n             })\n             .collect()"}]}