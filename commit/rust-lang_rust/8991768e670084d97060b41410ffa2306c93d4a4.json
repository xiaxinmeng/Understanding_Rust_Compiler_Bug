{"sha": "8991768e670084d97060b41410ffa2306c93d4a4", "node_id": "C_kwDOAAsO6NoAKDg5OTE3NjhlNjcwMDg0ZDk3MDYwYjQxNDEwZmZhMjMwNmM5M2Q0YTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T00:05:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T00:05:59Z"}, "message": "Auto merge of #110736 - matthiaskrgr:rollup-gorv8zp, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110661 (rustdoc: clean up settings.css and settings.js)\n - #110663 (Add note about change in bootstrap defaults)\n - #110664 (stop `x fmt` formatting untracked directories)\n - #110668 (Fix printing native CPU on cross-compiled compiler.)\n - #110689 (Fix grammar in core::hint::unreachable_unchecked() docs)\n - #110700 (Don't infer fn return type to return itself)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9fa4c6b76f911ba883220f497c85bacf77515d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa4c6b76f911ba883220f497c85bacf77515d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8991768e670084d97060b41410ffa2306c93d4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8991768e670084d97060b41410ffa2306c93d4a4", "html_url": "https://github.com/rust-lang/rust/commit/8991768e670084d97060b41410ffa2306c93d4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8991768e670084d97060b41410ffa2306c93d4a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f94b314cead7059a71a265a8b64905ef2511796", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f94b314cead7059a71a265a8b64905ef2511796", "html_url": "https://github.com/rust-lang/rust/commit/7f94b314cead7059a71a265a8b64905ef2511796"}, {"sha": "12858d9a6154e92c6f739c00a80f021515e9b7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/12858d9a6154e92c6f739c00a80f021515e9b7bb", "html_url": "https://github.com/rust-lang/rust/commit/12858d9a6154e92c6f739c00a80f021515e9b7bb"}], "stats": {"total": 106, "additions": 68, "deletions": 38}, "files": [{"sha": "e72905c15bd256864b7ad67419a0c66295baf4c5", "filename": "RELEASES.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -88,7 +88,11 @@ Compatibility Notes\n - [When `default-features` is set to false of a workspace dependency, and an inherited dependency of a member has `default-features = true`, Cargo will enable default features of that dependency.](https://github.com/rust-lang/cargo/pull/11409/)\n - [Cargo denies `CARGO_HOME` in the `[env]` configuration table. Cargo itself doesn't pick up this value, but recursive calls to cargo would, which was not intended.](https://github.com/rust-lang/cargo/pull/11644/)\n - [Debuginfo for build dependencies is now off if not explicitly set. This is expected to improve the overall build time.](https://github.com/rust-lang/cargo/pull/11252/)\n-\n+- [The Rust distribution no longer always includes rustdoc](https://github.com/rust-lang/rust/pull/106886)\n+  If `tools = [...]` is set in config.toml, we will respect a missing rustdoc in that list. By\n+  default rustdoc remains included. To retain the prior behavior explicitly add `\"rustdoc\"` to the\n+  list.\n+  \n <a id=\"1.69.0-Internal-Changes\"></a>\n \n Internal Changes"}, {"sha": "9fe0c07814ed8c06b7e53dcc1f1c3bf1f01840cb", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -1146,24 +1146,22 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n \n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_ty(ty);\n+\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.output();\n+            // Don't leak types into signatures unless they're nameable!\n+            // For example, if a function returns itself, we don't want that\n+            // recursive function definition to leak out into the fn sig.\n+            let mut should_recover = false;\n+\n             if let Some(ret_ty) = ret_ty.make_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n                     ret_ty,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if matches!(ret_ty.kind(), ty::FnDef(..))\n-                && let Some(fn_sig) = ret_ty.fn_sig(tcx).make_suggestable(tcx, false)\n-            {\n-                diag.span_suggestion(\n-                    ty.span,\n-                    \"replace with the correct return type\",\n-                    fn_sig,\n-                    Applicability::MachineApplicable,\n-                );\n+                should_recover = true;\n             } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n@@ -1181,9 +1179,20 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                      https://doc.rust-lang.org/book/ch13-01-closures.html\",\n                 );\n             }\n-            diag.emit();\n \n-            ty::Binder::dummy(fn_sig)\n+            let guar = diag.emit();\n+\n+            if should_recover {\n+                ty::Binder::dummy(fn_sig)\n+            } else {\n+                ty::Binder::dummy(tcx.mk_fn_sig(\n+                    fn_sig.inputs().iter().copied(),\n+                    tcx.ty_error(guar),\n+                    fn_sig.c_variadic,\n+                    fn_sig.unsafety,\n+                    fn_sig.abi,\n+                ))\n+            }\n         }\n         None => icx.astconv().ty_of_fn(\n             hir_id,"}, {"sha": "90cce9a8650daecf92602950826ff361172dbe2d", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -310,12 +310,14 @@ static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n-  const Triple::ArchType HostArch = Triple(sys::getProcessTriple()).getArch();\n+  const Triple::ArchType HostArch = Triple(sys::getDefaultTargetTriple()).getArch();\n   const Triple::ArchType TargetArch = Target->getTargetTriple().getArch();\n   const ArrayRef<SubtargetSubTypeKV> CPUTable = MCInfo->getCPUTable();\n   unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n \n   printf(\"Available CPUs for this target:\\n\");\n+  // Don't print the \"native\" entry when the user specifies --target with a\n+  // different arch since that could be wrong or misleading.\n   if (HostArch == TargetArch) {\n     const StringRef HostCPU = sys::getHostCPUName();\n     printf(\"    %-*s - Select the CPU of the current host (currently %.*s).\\n\","}, {"sha": "f6698589ccd92b0d1e2c2c416aa952462d96e607", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -73,8 +73,8 @@ use crate::intrinsics;\n /// ```\n ///\n /// While using `unreachable_unchecked()` is perfectly sound in the following\n-/// example, the compiler is able to prove that a division by zero is not\n-/// possible. Benchmarking reveals that `unreachable_unchecked()` provides\n+/// example, as the compiler is able to prove that a division by zero is not\n+/// possible, benchmarking reveals that `unreachable_unchecked()` provides\n /// no benefit over using [`unreachable!`], while the latter does not introduce\n /// the possibility of Undefined Behavior.\n ///"}, {"sha": "d8d3f300a3500b99c8ebc7c86451cc9720e825c8", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -145,10 +145,8 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n             let untracked_paths = untracked_paths_output\n                 .lines()\n                 .filter(|entry| entry.starts_with(\"??\"))\n-                .filter_map(|entry| {\n-                    let path =\n-                        entry.split(' ').nth(1).expect(\"every git status entry should list a path\");\n-                    path.ends_with(\".rs\").then_some(path)\n+                .map(|entry| {\n+                    entry.split(' ').nth(1).expect(\"every git status entry should list a path\")\n                 });\n             for untracked_path in untracked_paths {\n                 println!(\"skip untracked path {} during rustfmt invocations\", untracked_path);"}, {"sha": "99cf8e443f03257381524d8d257cc63caafadbb4", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -7,7 +7,6 @@\n \tmargin-right: 0.3em;\n \theight: 1.2rem;\n \twidth: 1.2rem;\n-\tcolor: inherit;\n \tborder: 2px solid var(--settings-input-border-color);\n \toutline: none;\n \t-webkit-appearance: none;"}, {"sha": "2cba32c1b507accad9f5b0d607fae49e857dea4f", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -1,5 +1,5 @@\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, updateLocalStorage, updateTheme */\n+/* global getSettingValue, updateLocalStorage, updateTheme */\n /* global addClass, removeClass, onEach, onEachLazy, blurHandler, elemIsInParent */\n /* global MAIN_ID, getVar, getSettingsButton */\n \n@@ -32,21 +32,6 @@\n         }\n     }\n \n-    function handleKey(ev) {\n-        // Don't interfere with browser shortcuts\n-        if (ev.ctrlKey || ev.altKey || ev.metaKey) {\n-            return;\n-        }\n-        switch (getVirtualKey(ev)) {\n-            case \"Enter\":\n-            case \"Return\":\n-            case \"Space\":\n-                ev.target.checked = !ev.target.checked;\n-                ev.preventDefault();\n-                break;\n-        }\n-    }\n-\n     function showLightAndDark() {\n         removeClass(document.getElementById(\"preferred-light-theme\"), \"hidden\");\n         removeClass(document.getElementById(\"preferred-dark-theme\"), \"hidden\");\n@@ -77,8 +62,6 @@\n             toggle.onchange = function() {\n                 changeSetting(this.id, this.checked);\n             };\n-            toggle.onkeyup = handleKey;\n-            toggle.onkeyrelease = handleKey;\n         });\n         onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), elem => {\n             const settingId = elem.name;"}, {"sha": "a44ff9d3e4a9d01f6af19b20f89f19dd88ad0c0d", "filename": "tests/rustdoc-gui/settings.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsettings.goml?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -256,6 +256,15 @@ set-local-storage: {\"rustdoc-disable-shortcuts\": \"false\"}\n click: \".setting-line:last-child .setting-check span\"\n assert-local-storage: {\"rustdoc-disable-shortcuts\": \"true\"}\n \n+// We now check that focusing a toggle and pressing Space is like clicking on it.\n+assert-local-storage: {\"rustdoc-disable-shortcuts\": \"true\"}\n+focus: \".setting-line:last-child .setting-check input\"\n+press-key: \"Space\"\n+assert-local-storage: {\"rustdoc-disable-shortcuts\": \"false\"}\n+focus: \".setting-line:last-child .setting-check input\"\n+press-key: \"Space\"\n+assert-local-storage: {\"rustdoc-disable-shortcuts\": \"true\"}\n+\n // Make sure that \"Disable keyboard shortcuts\" actually took effect.\n press-key: \"Escape\"\n press-key: \"?\""}, {"sha": "9812d8c381117d96620eb2ed17eb9a5f3da3b382", "filename": "tests/ui/typeck/bad-recursive-type-sig-infer.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.rs?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -0,0 +1,11 @@\n+fn a() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    &a\n+}\n+\n+fn b() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    &a\n+}\n+\n+fn main() {}"}, {"sha": "e145da5623ac0c0a98e6c9855e03d0d3ab15f78d", "filename": "tests/ui/typeck/bad-recursive-type-sig-infer.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8991768e670084d97060b41410ffa2306c93d4a4/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-recursive-type-sig-infer.stderr?ref=8991768e670084d97060b41410ffa2306c93d4a4", "patch": "@@ -0,0 +1,15 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/bad-recursive-type-sig-infer.rs:1:11\n+   |\n+LL | fn a() -> _ {\n+   |           ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/bad-recursive-type-sig-infer.rs:6:11\n+   |\n+LL | fn b() -> _ {\n+   |           ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}]}