{"sha": "545c21923e2bc8daee889b26919256bb2ba55282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NWMyMTkyM2UyYmM4ZGFlZTg4OWIyNjkxOTI1NmJiMmJhNTUyODI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-19T17:53:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-19T17:53:27Z"}, "message": "Merge #2291\n\n2291: Show expanded macro in vscode r=matklad a=edwin0cheng\n\n*Edited*\r\n\r\n![new_screen_shot](https://user-images.githubusercontent.com/11014119/69169852-00550c00-0b34-11ea-9c40-8ecebdca0621.gif)\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "ba089b257e57e066ba190bfc9ea228ef8366a07d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba089b257e57e066ba190bfc9ea228ef8366a07d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545c21923e2bc8daee889b26919256bb2ba55282", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1CwXCRBK7hj4Ov3rIwAAdHIIAH/9mhoijPN2Afh1rpbFhgDt\nnWB6kH6v5eEzW9D2qM26/K/tcDClPItGwyMFPo/W0bkrtWVAww1N49mL7Gae1wUH\nsgauY4aWiGMpWBVDutpmT0VpK+0h0qv/9y+Nk7aQ05RPhQ4Xmn3sBYo60F7CWpcW\nucKSHE0A80elsM85qO/qWN7nxaaaDDirDnp2z7DzXebFtKmUZXh6nnWdrnjV6Uax\nM5MydAnUuaObKuFIB/5eAVvY73lEfVIUVHgoLt7lMnvNn5vIato6Vf/l7BK1n+Gg\n76IgqLonTQAT26cPxeu7UfOIMRA4QYSigAE+QqW44yK1Jrp4YGYLlhsz3fgcbxw=\n=Qz9e\n-----END PGP SIGNATURE-----\n", "payload": "tree ba089b257e57e066ba190bfc9ea228ef8366a07d\nparent d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12\nparent 1d56b80250d43a7d263d2e9583871c85081261b6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574186007 +0000\ncommitter GitHub <noreply@github.com> 1574186007 +0000\n\nMerge #2291\n\n2291: Show expanded macro in vscode r=matklad a=edwin0cheng\n\n*Edited*\r\n\r\n![new_screen_shot](https://user-images.githubusercontent.com/11014119/69169852-00550c00-0b34-11ea-9c40-8ecebdca0621.gif)\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545c21923e2bc8daee889b26919256bb2ba55282", "html_url": "https://github.com/rust-lang/rust/commit/545c21923e2bc8daee889b26919256bb2ba55282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545c21923e2bc8daee889b26919256bb2ba55282/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12", "html_url": "https://github.com/rust-lang/rust/commit/d2782ab1c1ec0b9f2ac2131859a9ee880f97bc12"}, {"sha": "1d56b80250d43a7d263d2e9583871c85081261b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d56b80250d43a7d263d2e9583871c85081261b6", "html_url": "https://github.com/rust-lang/rust/commit/1d56b80250d43a7d263d2e9583871c85081261b6"}], "stats": {"total": 333, "additions": 332, "deletions": 1}, "files": [{"sha": "5d3196c2a2e1d0850535f4c10e404c864f010cde", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -140,7 +140,7 @@ impl Expansion {\n         exp_info.map_token_down(token)\n     }\n \n-    fn file_id(&self) -> HirFileId {\n+    pub fn file_id(&self) -> HirFileId {\n         self.macro_call_id.as_file(MacroFileKind::Items)\n     }\n }"}, {"sha": "e9eb2a7fb8eb14e58383a9b357989552cabce162", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -0,0 +1,178 @@\n+//! This modules implements \"expand macro\" functionality in the IDE\n+\n+use crate::{db::RootDatabase, FilePosition};\n+use hir::db::AstDatabase;\n+use ra_db::SourceDatabase;\n+use rustc_hash::FxHashMap;\n+\n+use ra_syntax::{\n+    algo::{find_node_at_offset, replace_descendants},\n+    ast::{self},\n+    AstNode, NodeOrToken, SyntaxKind, SyntaxNode, WalkEvent, T,\n+};\n+\n+pub struct ExpandedMacro {\n+    pub name: String,\n+    pub expansion: String,\n+}\n+\n+pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<ExpandedMacro> {\n+    let parse = db.parse(position.file_id);\n+    let file = parse.tree();\n+    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)?;\n+    let mac = name_ref.syntax().ancestors().find_map(ast::MacroCall::cast)?;\n+\n+    let source = hir::Source::new(position.file_id.into(), mac.syntax());\n+    let expanded = expand_macro_recur(db, source, &mac)?;\n+\n+    // FIXME:\n+    // macro expansion may lose all white space information\n+    // But we hope someday we can use ra_fmt for that\n+    let expansion = insert_whitespaces(expanded);\n+    Some(ExpandedMacro { name: name_ref.text().to_string(), expansion })\n+}\n+\n+fn expand_macro_recur(\n+    db: &RootDatabase,\n+    source: hir::Source<&SyntaxNode>,\n+    macro_call: &ast::MacroCall,\n+) -> Option<SyntaxNode> {\n+    let analyzer = hir::SourceAnalyzer::new(db, source, None);\n+    let expansion = analyzer.expand(db, &macro_call)?;\n+    let macro_file_id = expansion.file_id();\n+    let expanded: SyntaxNode = db.parse_or_expand(macro_file_id)?;\n+\n+    let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n+    let mut replaces = FxHashMap::default();\n+\n+    for child in children.into_iter() {\n+        let source = hir::Source::new(macro_file_id, source.ast);\n+        let new_node = expand_macro_recur(db, source, &child)?;\n+\n+        replaces.insert(child.syntax().clone().into(), new_node.into());\n+    }\n+\n+    Some(replace_descendants(&expanded, &replaces))\n+}\n+\n+// FIXME: It would also be cool to share logic here and in the mbe tests,\n+// which are pretty unreadable at the moment.\n+fn insert_whitespaces(syn: SyntaxNode) -> String {\n+    use SyntaxKind::*;\n+\n+    let mut res = String::new();\n+    let mut token_iter = syn\n+        .preorder_with_tokens()\n+        .filter_map(|event| {\n+            if let WalkEvent::Enter(NodeOrToken::Token(token)) = event {\n+                Some(token)\n+            } else {\n+                None\n+            }\n+        })\n+        .peekable();\n+\n+    let mut indent = 0;\n+    let mut last: Option<SyntaxKind> = None;\n+\n+    while let Some(token) = token_iter.next() {\n+        let mut is_next = |f: fn(SyntaxKind) -> bool, default| -> bool {\n+            token_iter.peek().map(|it| f(it.kind())).unwrap_or(default)\n+        };\n+        let is_last = |f: fn(SyntaxKind) -> bool, default| -> bool {\n+            last.map(|it| f(it)).unwrap_or(default)\n+        };\n+\n+        res += &match token.kind() {\n+            k @ _\n+                if (k.is_keyword() || k.is_literal() || k == IDENT)\n+                    && is_next(|it| !it.is_punct(), true) =>\n+            {\n+                token.text().to_string() + \" \"\n+            }\n+            L_CURLY if is_next(|it| it != R_CURLY, true) => {\n+                indent += 1;\n+                format!(\" {{\\n{}\", \"  \".repeat(indent))\n+            }\n+            R_CURLY if is_last(|it| it != L_CURLY, true) => {\n+                indent = indent.checked_sub(1).unwrap_or(0);\n+                format!(\"\\n}}{}\", \"  \".repeat(indent))\n+            }\n+            R_CURLY => {\n+                indent = indent.checked_sub(1).unwrap_or(0);\n+                format!(\"}}\\n{}\", \"  \".repeat(indent))\n+            }\n+            T![;] => format!(\";\\n{}\", \"  \".repeat(indent)),\n+            T![->] => \" -> \".to_string(),\n+            T![=] => \" = \".to_string(),\n+            T![=>] => \" => \".to_string(),\n+            _ => token.text().to_string(),\n+        };\n+\n+        last = Some(token.kind());\n+    }\n+\n+    res\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::mock_analysis::analysis_and_position;\n+    use insta::assert_snapshot;\n+\n+    fn check_expand_macro(fixture: &str) -> ExpandedMacro {\n+        let (analysis, pos) = analysis_and_position(fixture);\n+        analysis.expand_macro(pos).unwrap().unwrap()\n+    }\n+\n+    #[test]\n+    fn macro_expand_recursive_expansion() {\n+        let res = check_expand_macro(\n+            r#\"\n+        //- /lib.rs\n+        macro_rules! bar {\n+            () => { fn  b() {} }\n+        }\n+        macro_rules! foo {\n+            () => { bar!(); }\n+        }\n+        macro_rules! baz {\n+            () => { foo!(); }\n+        }        \n+        f<|>oo!();\n+        \"#,\n+        );\n+\n+        assert_eq!(res.name, \"foo\");\n+        assert_snapshot!(res.expansion, @r###\"\n+fn b(){}\n+\"###);\n+    }\n+\n+    #[test]\n+    fn macro_expand_multiple_lines() {\n+        let res = check_expand_macro(\n+            r#\"\n+        //- /lib.rs\n+        macro_rules! foo {\n+            () => { \n+                fn some_thing() -> u32 {\n+                    let a = 0;\n+                    a + 10\n+                }\n+            }\n+        }\n+        f<|>oo!();\n+        \"#,\n+        );\n+\n+        assert_eq!(res.name, \"foo\");\n+        assert_snapshot!(res.expansion, @r###\"\n+fn some_thing() -> u32 {\n+  let a = 0;\n+  a+10\n+}        \n+\"###);\n+    }\n+}"}, {"sha": "57ed9714706b5ee79b33526ed5007f9f720b711a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -42,6 +42,7 @@ mod display;\n mod inlay_hints;\n mod wasm_shims;\n mod expand;\n+mod expand_macro;\n \n #[cfg(test)]\n mod marks;\n@@ -65,6 +66,7 @@ pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n+    expand_macro::ExpandedMacro,\n     feature_flags::FeatureFlags,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n@@ -296,6 +298,10 @@ impl Analysis {\n         self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n+    pub fn expand_macro(&self, position: FilePosition) -> Cancelable<Option<ExpandedMacro>> {\n+        self.with_db(|db| expand_macro::expand_macro(db, position))\n+    }\n+\n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> Cancelable<SourceChange> {"}, {"sha": "f828efdee5b1092f334df6035ab2ec7e5bfc8751", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -436,6 +436,7 @@ fn on_request(\n         })?\n         .on::<req::AnalyzerStatus>(handlers::handle_analyzer_status)?\n         .on::<req::SyntaxTree>(handlers::handle_syntax_tree)?\n+        .on::<req::ExpandMacro>(handlers::handle_expand_macro)?\n         .on::<req::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<req::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<req::WorkspaceSymbol>(handlers::handle_workspace_symbol)?"}, {"sha": "0461bf385422e31eac8ffbf702c1e080da4f818d", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -47,6 +47,24 @@ pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -\n     Ok(res)\n }\n \n+pub fn handle_expand_macro(\n+    world: WorldSnapshot,\n+    params: req::ExpandMacroParams,\n+) -> Result<Option<req::ExpandedMacro>> {\n+    let _p = profile(\"handle_expand_macro\");\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let offset = params.position.map(|p| p.conv_with(&line_index));\n+\n+    match offset {\n+        None => Ok(None),\n+        Some(offset) => {\n+            let res = world.analysis().expand_macro(FilePosition { file_id, offset })?;\n+            Ok(res.map(|it| req::ExpandedMacro { name: it.name, expansion: it.expansion }))\n+        }\n+    }\n+}\n+\n pub fn handle_selection_range(\n     world: WorldSnapshot,\n     params: req::SelectionRangeParams,"}, {"sha": "39361b7e8fd32ed57200fd1e164f83a8b0104ca8", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -45,6 +45,28 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExpandedMacro {\n+    pub name: String,\n+    pub expansion: String,\n+}\n+\n+pub enum ExpandMacro {}\n+\n+impl Request for ExpandMacro {\n+    type Params = ExpandMacroParams;\n+    type Result = Option<ExpandedMacro>;\n+    const METHOD: &'static str = \"rust-analyzer/expandMacro\";\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExpandMacroParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: Option<Position>,\n+}\n+\n pub enum SelectionRangeRequest {}\n \n impl Request for SelectionRangeRequest {"}, {"sha": "309d2775d5d9dc54061bdb4d9f0b2940a60b4596", "filename": "docs/user/features.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -81,6 +81,10 @@ Join selected lines into one, smartly fixing up whitespace and trailing commas.\n Shows the parse tree of the current file. It exists mostly for debugging\n rust-analyzer itself.\n \n+#### Expand Macro Recursively\n+\n+Shows the full macro expansion of the macro at current cursor.\n+\n #### Status\n \n Shows internal statistic about memory usage of rust-analyzer"}, {"sha": "94887674ba3309ad5d28352c285d28c1c2f7e7b5", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -90,6 +90,11 @@\n                 \"title\": \"Show Syntax Tree\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.expandMacro\",\n+                \"title\": \"Expand macro recursively\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.matchingBrace\",\n                 \"title\": \"Find matching brace\","}, {"sha": "34e0c8fb337a84cced6878c3f584bbe75bb59041", "filename": "editors/code/src/commands/expand_macro.ts", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -0,0 +1,83 @@\n+import * as vscode from 'vscode';\n+import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+export const expandMacroUri = vscode.Uri.parse(\n+    'rust-analyzer://expandMacro/[EXPANSION].rs'\n+);\n+\n+export class ExpandMacroContentProvider\n+    implements vscode.TextDocumentContentProvider {\n+    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n+    public provideTextDocumentContent(\n+        uri: vscode.Uri\n+    ): vscode.ProviderResult<string> {\n+        async function handle() {\n+            const editor = vscode.window.activeTextEditor;\n+            if (editor == null) {\n+                return '';\n+            }\n+\n+            const position = editor.selection.active;\n+            const request: MacroExpandParams = {\n+                textDocument: { uri: editor.document.uri.toString() },\n+                position\n+            };\n+            const expanded = await Server.client.sendRequest<ExpandedMacro>(\n+                'rust-analyzer/expandMacro',\n+                request\n+            );\n+\n+            if (expanded == null) {\n+                return 'Not available';\n+            }\n+\n+            return code_format(expanded);\n+        }\n+\n+        return handle();\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function createHandle(provider: ExpandMacroContentProvider) {\n+    return async () => {\n+        const uri = expandMacroUri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        provider.eventEmitter.fire(uri);\n+\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true\n+        );\n+    };\n+}\n+\n+interface MacroExpandParams {\n+    textDocument: TextDocumentIdentifier;\n+    position: Position;\n+}\n+\n+interface ExpandedMacro {\n+    name: string;\n+    expansion: string;\n+}\n+\n+function code_format(expanded: ExpandedMacro): string {\n+    let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n+    result += '// ' + '='.repeat(result.length - 3);\n+    result += '\\n\\n';\n+    result += expanded.expansion;\n+\n+    return result;\n+}"}, {"sha": "2ade6d331a76ef6cac0c721a024dcfac041165dd", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -1,5 +1,6 @@\n import * as analyzerStatus from './analyzer_status';\n import * as applySourceChange from './apply_source_change';\n+import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n import * as joinLines from './join_lines';\n import * as matchingBrace from './matching_brace';\n@@ -11,6 +12,7 @@ import * as syntaxTree from './syntaxTree';\n export {\n     analyzerStatus,\n     applySourceChange,\n+    expandMacro,\n     joinLines,\n     matchingBrace,\n     parentModule,"}, {"sha": "683497dfd4dc9d7e3911b47b5f835c3049cd40af", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/545c21923e2bc8daee889b26919256bb2ba55282/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=545c21923e2bc8daee889b26919256bb2ba55282", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n import { CargoWatchProvider } from './commands/cargo_watch';\n+import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n import {\n     interactivelyStartCargoWatch,\n@@ -97,6 +98,7 @@ export function activate(context: vscode.ExtensionContext) {\n         ]\n     ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n+    const expandMacroContentProvider = new ExpandMacroContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n@@ -109,11 +111,21 @@ export function activate(context: vscode.ExtensionContext) {\n             syntaxTreeContentProvider\n         )\n     );\n+    disposeOnDeactivation(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            expandMacroContentProvider\n+        )\n+    );\n \n     registerCommand(\n         'rust-analyzer.syntaxTree',\n         commands.syntaxTree.createHandle(syntaxTreeContentProvider)\n     );\n+    registerCommand(\n+        'rust-analyzer.expandMacro',\n+        commands.expandMacro.createHandle(expandMacroContentProvider)\n+    );\n \n     vscode.workspace.onDidChangeTextDocument(\n         events.changeTextDocument.createHandler(syntaxTreeContentProvider),"}]}