{"sha": "55ec93a3370d4c801a74272128e6d696108e9cb1", "node_id": "C_kwDOAAsO6NoAKDU1ZWM5M2EzMzcwZDRjODAxYTc0MjcyMTI4ZTZkNjk2MTA4ZTljYjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:19:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:19:53Z"}, "message": "Remove unnecessary macro_declarations from ItemScope", "tree": {"sha": "3429f370c90c1ed242080f6d45f4572ece43e00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3429f370c90c1ed242080f6d45f4572ece43e00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ec93a3370d4c801a74272128e6d696108e9cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ec93a3370d4c801a74272128e6d696108e9cb1", "html_url": "https://github.com/rust-lang/rust/commit/55ec93a3370d4c801a74272128e6d696108e9cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ec93a3370d4c801a74272128e6d696108e9cb1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbada38b617b114a575c7a06dd69c2617d6af651", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbada38b617b114a575c7a06dd69c2617d6af651", "html_url": "https://github.com/rust-lang/rust/commit/dbada38b617b114a575c7a06dd69c2617d6af651"}], "stats": {"total": 82, "additions": 25, "deletions": 57}, "files": [{"sha": "25138fcabcb171e20fde4e77ed2e8455c046d699", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -1767,11 +1767,13 @@ impl Macro {\n     }\n \n     pub fn name(self, _db: &dyn HirDatabase) -> Option<Name> {\n-        match self.id {\n-            MacroId::Macro2Id(_id) => todo!(),\n-            MacroId::MacroRulesId(_id) => todo!(),\n-            MacroId::ProcMacroId(_id) => todo!(),\n-        }\n+        // match self.id {\n+        //     MacroId::Macro2Id(id) => db.macro2_data(id).name.clone(),\n+        //     MacroId::MacroRulesId(id) => db.macro_rules_data(id).name.clone(),\n+        //     MacroId::ProcMacroId(id) => db.proc_macro_data(id).name.clone(),\n+        // }\n+        // FIXME\n+        None\n     }\n \n     pub fn kind(&self, db: &dyn HirDatabase) -> MacroKind {"}, {"sha": "a84ca0e0a17b71b35d03de74e5e3161eaa8a86c7", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -1,7 +1,6 @@\n //! File symbol extraction.\n \n use base_db::FileRange;\n-use either::Either;\n use hir_def::{\n     item_tree::ItemTreeNode, src::HasSource, AdtId, AssocItemId, AssocItemLoc, DefWithBodyId,\n     ImplId, ItemContainerId, Lookup, MacroId, ModuleDefId, ModuleId, TraitId,\n@@ -10,7 +9,7 @@ use hir_expand::{HirFileId, InFile};\n use hir_ty::db::HirDatabase;\n use syntax::{ast::HasName, AstNode, SmolStr, SyntaxNode, SyntaxNodePtr};\n \n-use crate::{HasSource as _, Macro, Module, Semantics};\n+use crate::{Module, Semantics};\n \n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n@@ -175,10 +174,6 @@ impl<'a> SymbolCollector<'a> {\n         for const_id in scope.unnamed_consts() {\n             self.collect_from_body(const_id);\n         }\n-\n-        for macro_def_id in scope.macro_declarations() {\n-            self.push_decl_macro(macro_def_id.into());\n-        }\n     }\n \n     fn collect_from_body(&mut self, body_id: impl Into<DefWithBodyId>) {\n@@ -333,29 +328,6 @@ impl<'a> SymbolCollector<'a> {\n         })\n     }\n \n-    fn push_decl_macro(&mut self, macro_def: Macro) {\n-        self.push_file_symbol(|s| {\n-            let name = macro_def.name(s.db)?.as_text()?;\n-            let source = macro_def.source(s.db)?;\n-\n-            let (ptr, name_ptr) = match source.value {\n-                Either::Left(m) => {\n-                    (SyntaxNodePtr::new(m.syntax()), SyntaxNodePtr::new(m.name()?.syntax()))\n-                }\n-                Either::Right(f) => {\n-                    (SyntaxNodePtr::new(f.syntax()), SyntaxNodePtr::new(f.name()?.syntax()))\n-                }\n-            };\n-\n-            Some(FileSymbol {\n-                name,\n-                kind: FileSymbolKind::Macro,\n-                container_name: s.current_container_name(),\n-                loc: DeclarationLocation { hir_file_id: source.file_id, name_ptr, ptr },\n-            })\n-        })\n-    }\n-\n     fn push_file_symbol(&mut self, f: impl FnOnce(&Self) -> Option<FileSymbol>) {\n         if let Some(file_symbol) = f(self) {\n             self.symbols.push(file_symbol);"}, {"sha": "e31517551a97e5b78b7a8379ca6f528f2886befa", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -93,6 +93,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n \n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;\n+\n     #[salsa::invoke(StructData::union_data_query)]\n     fn union_data(&self, id: UnionId) -> Arc<StructData>;\n "}, {"sha": "dea3b36e6c8e4dcc897ed1f67648d9770172f435", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -45,7 +45,6 @@ pub struct ItemScope {\n     /// The defs declared in this scope. Each def has a single scope where it is\n     /// declared.\n     declarations: Vec<ModuleDefId>,\n-    macro_declarations: Vec<MacroId>,\n \n     impls: Vec<ImplId>,\n     unnamed_consts: Vec<ConstId>,\n@@ -109,10 +108,6 @@ impl ItemScope {\n         self.declarations.iter().copied()\n     }\n \n-    pub fn macro_declarations(&self) -> impl Iterator<Item = MacroId> + '_ {\n-        self.macro_declarations.iter().copied()\n-    }\n-\n     pub fn impls(&self) -> impl Iterator<Item = ImplId> + ExactSizeIterator + '_ {\n         self.impls.iter().copied()\n     }\n@@ -177,10 +172,6 @@ impl ItemScope {\n         self.declarations.push(def)\n     }\n \n-    pub(crate) fn declare_macro(&mut self, def: MacroId) {\n-        self.macro_declarations.push(def);\n-    }\n-\n     pub(crate) fn get_legacy_macro(&self, name: &Name) -> Option<MacroRulesId> {\n         self.legacy_macros.get(name).copied()\n     }\n@@ -380,7 +371,6 @@ impl ItemScope {\n             macros,\n             unresolved,\n             declarations,\n-            macro_declarations,\n             impls,\n             unnamed_consts,\n             unnamed_trait_imports,\n@@ -393,7 +383,6 @@ impl ItemScope {\n         macros.shrink_to_fit();\n         unresolved.shrink_to_fit();\n         declarations.shrink_to_fit();\n-        macro_declarations.shrink_to_fit();\n         impls.shrink_to_fit();\n         unnamed_consts.shrink_to_fit();\n         unnamed_trait_imports.shrink_to_fit();"}, {"sha": "065922841a25927e8d9821d5cf9a4bbf2d01ab69", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -448,7 +448,7 @@ pub enum ModuleDefId {\n     MacroId(MacroId),\n }\n impl_from!(\n-    MacroId,\n+    MacroId(Macro2Id, MacroRulesId, ProcMacroId),\n     ModuleId,\n     FunctionId,\n     AdtId(StructId, EnumId, UnionId),"}, {"sha": "59ed617888c2681a1049afd48d08e2a71c837b32", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec93a3370d4c801a74272128e6d696108e9cb1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=55ec93a3370d4c801a74272128e6d696108e9cb1", "patch": "@@ -606,16 +606,16 @@ impl DefCollector<'_> {\n     ) {\n         // Textual scoping\n         self.define_legacy_macro(module_id, name.clone(), macro_);\n-        let macro_ = macro_.into();\n-        self.def_map.modules[module_id].scope.declare_macro(macro_);\n \n         // Module scoping\n         // In Rust, `#[macro_export]` macros are unconditionally visible at the\n         // crate root, even if the parent modules is **not** visible.\n         if export {\n+            let module_id = self.def_map.root;\n+            self.def_map.modules[module_id].scope.declare(macro_.into());\n             self.update(\n-                self.def_map.root,\n-                &[(Some(name), PerNs::macros(macro_, Visibility::Public))],\n+                module_id,\n+                &[(Some(name), PerNs::macros(macro_.into(), Visibility::Public))],\n                 Visibility::Public,\n                 ImportType::Named,\n             );\n@@ -646,21 +646,25 @@ impl DefCollector<'_> {\n     ) {\n         let vis =\n             self.def_map.resolve_visibility(self.db, module_id, vis).unwrap_or(Visibility::Public);\n-        let macro_ = macro_.into();\n-        self.def_map.modules[module_id].scope.declare_macro(macro_);\n-        self.update(module_id, &[(Some(name), PerNs::macros(macro_, vis))], vis, ImportType::Named);\n+        self.def_map.modules[module_id].scope.declare(macro_.into());\n+        self.update(\n+            module_id,\n+            &[(Some(name), PerNs::macros(macro_.into(), Visibility::Public))],\n+            vis,\n+            ImportType::Named,\n+        );\n     }\n \n     /// Define a proc macro\n     ///\n     /// A proc macro is similar to normal macro scope, but it would not visible in legacy textual scoped.\n     /// And unconditionally exported.\n     fn define_proc_macro(&mut self, name: Name, macro_: ProcMacroId) {\n-        let macro_ = macro_.into();\n-        self.def_map.modules[self.def_map.root].scope.declare_macro(macro_);\n+        let module_id = self.def_map.root;\n+        self.def_map.modules[module_id].scope.declare(macro_.into());\n         self.update(\n-            self.def_map.root,\n-            &[(Some(name), PerNs::macros(macro_, Visibility::Public))],\n+            module_id,\n+            &[(Some(name), PerNs::macros(macro_.into(), Visibility::Public))],\n             Visibility::Public,\n             ImportType::Named,\n         );"}]}