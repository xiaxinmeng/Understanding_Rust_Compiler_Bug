{"sha": "21f4c0723ed871472b050b6031b7c9f5e7e0970d", "node_id": "C_kwDOAAsO6NoAKDIxZjRjMDcyM2VkODcxNDcyYjA1MGI2MDMxYjdjOWY1ZTdlMDk3MGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T09:46:37Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T10:01:30Z"}, "message": "Remove BoxedResolver", "tree": {"sha": "52c1634c1093b044207238d2f2b3cb6022a82dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c1634c1093b044207238d2f2b3cb6022a82dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f4c0723ed871472b050b6031b7c9f5e7e0970d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f4c0723ed871472b050b6031b7c9f5e7e0970d", "html_url": "https://github.com/rust-lang/rust/commit/21f4c0723ed871472b050b6031b7c9f5e7e0970d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f4c0723ed871472b050b6031b7c9f5e7e0970d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a5cc383d9cf96825561b646e5f4686ae45c6c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a5cc383d9cf96825561b646e5f4686ae45c6c1", "html_url": "https://github.com/rust-lang/rust/commit/43a5cc383d9cf96825561b646e5f4686ae45c6c1"}], "stats": {"total": 120, "additions": 18, "deletions": 102}, "files": [{"sha": "d504aea77d0dac6ae8d51c7a0a73806c163815e4", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=21f4c0723ed871472b050b6031b7c9f5e7e0970d", "patch": "@@ -1,4 +1,3 @@\n-pub use crate::passes::BoxedResolver;\n use crate::util;\n \n use rustc_ast::token;"}, {"sha": "6a94d19001e11d68b6ef718672bec3f9a9b4e281", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 88, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=21f4c0723ed871472b050b6031b7c9f5e7e0970d", "patch": "@@ -23,9 +23,9 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_a\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n-use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_resolve::Resolver;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, MetadataLoaderDyn, Untracked};\n+use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -37,9 +37,7 @@ use rustc_trait_selection::traits;\n use std::any::Any;\n use std::ffi::OsString;\n use std::io::{self, BufWriter, Write};\n-use std::marker::PhantomPinned;\n use std::path::{Path, PathBuf};\n-use std::pin::Pin;\n use std::sync::{Arc, LazyLock};\n use std::{env, fs, iter};\n \n@@ -73,90 +71,6 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n     counter.count\n }\n \n-pub use boxed_resolver::BoxedResolver;\n-mod boxed_resolver {\n-    use super::*;\n-\n-    pub struct BoxedResolver(Pin<Box<BoxedResolverInner>>);\n-\n-    struct BoxedResolverInner {\n-        session: Lrc<Session>,\n-        resolver_arenas: Option<ResolverArenas<'static>>,\n-        resolver: Option<Resolver<'static, 'static>>,\n-        _pin: PhantomPinned,\n-    }\n-\n-    // Note: Drop order is important to prevent dangling references. Resolver must be dropped first,\n-    // then resolver_arenas and session.\n-    impl Drop for BoxedResolverInner {\n-        fn drop(&mut self) {\n-            self.resolver.take();\n-            self.resolver_arenas.take();\n-        }\n-    }\n-\n-    impl BoxedResolver {\n-        pub(super) fn new(\n-            session: Lrc<Session>,\n-            make_resolver: impl for<'a, 'tcx> FnOnce(\n-                &'tcx Session,\n-                &'a ResolverArenas<'a>,\n-            ) -> Resolver<'a, 'tcx>,\n-        ) -> BoxedResolver {\n-            let mut boxed_resolver = Box::new(BoxedResolverInner {\n-                session,\n-                resolver_arenas: Some(Resolver::arenas()),\n-                resolver: None,\n-                _pin: PhantomPinned,\n-            });\n-            // SAFETY: `make_resolver` takes a resolver arena with an arbitrary lifetime and\n-            // returns a resolver with the same lifetime as the arena. We ensure that the arena\n-            // outlives the resolver in the drop impl and elsewhere so these transmutes are sound.\n-            unsafe {\n-                let resolver = make_resolver(\n-                    std::mem::transmute::<&Session, &Session>(&boxed_resolver.session),\n-                    std::mem::transmute::<&ResolverArenas<'_>, &ResolverArenas<'_>>(\n-                        boxed_resolver.resolver_arenas.as_ref().unwrap(),\n-                    ),\n-                );\n-                boxed_resolver.resolver = Some(resolver);\n-                BoxedResolver(Pin::new_unchecked(boxed_resolver))\n-            }\n-        }\n-\n-        pub fn access<F: for<'a, 'tcx> FnOnce(&mut Resolver<'a, 'tcx>) -> R, R>(\n-            &mut self,\n-            f: F,\n-        ) -> R {\n-            // SAFETY: The resolver doesn't need to be pinned.\n-            let mut resolver = unsafe {\n-                self.0.as_mut().map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n-            };\n-            f((&mut *resolver).as_mut().unwrap())\n-        }\n-\n-        pub fn into_outputs(mut self) -> ty::ResolverOutputs {\n-            // SAFETY: The resolver doesn't need to be pinned.\n-            let mut resolver = unsafe {\n-                self.0.as_mut().map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n-            };\n-            resolver.take().unwrap().into_outputs()\n-        }\n-    }\n-}\n-\n-pub fn create_resolver(\n-    sess: Lrc<Session>,\n-    metadata_loader: Box<MetadataLoaderDyn>,\n-    krate: &ast::Crate,\n-    crate_name: Symbol,\n-) -> BoxedResolver {\n-    trace!(\"create_resolver\");\n-    BoxedResolver::new(sess, move |sess, resolver_arenas| {\n-        Resolver::new(sess, krate, crate_name, metadata_loader, resolver_arenas)\n-    })\n-}\n-\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,"}, {"sha": "752c1ec7538e776e82f58dea5a216817ed031df1", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f4c0723ed871472b050b6031b7c9f5e7e0970d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=21f4c0723ed871472b050b6031b7c9f5e7e0970d", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver};\n+use crate::passes;\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -13,8 +13,9 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n+use rustc_resolve::Resolver;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n@@ -87,7 +88,7 @@ pub struct Queries<'tcx> {\n     parse: Query<ast::Crate>,\n     crate_name: Query<Symbol>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(Lrc<ast::Crate>, BoxedResolver, Lrc<LintStore>)>,\n+    expansion: Query<(Lrc<ast::Crate>, ResolverOutputs, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     // This just points to what's in `gcx_cell`.\n     gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n@@ -170,23 +171,25 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn expansion(\n         &self,\n-    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, BoxedResolver, Lrc<LintStore>)>> {\n+    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, ResolverOutputs, Lrc<LintStore>)>> {\n         trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, lint_store) = self.register_plugins()?.steal();\n             let _timer = self.session().timer(\"configure_and_expand\");\n             let sess = self.session();\n-            let mut resolver = passes::create_resolver(\n-                sess.clone(),\n-                self.codegen_backend().metadata_loader(),\n+\n+            let arenas = Resolver::arenas();\n+            let mut resolver = Resolver::new(\n+                sess,\n                 &krate,\n                 crate_name,\n+                self.codegen_backend().metadata_loader(),\n+                &arenas,\n             );\n-            let krate = resolver.access(|resolver| {\n-                passes::configure_and_expand(sess, &lint_store, krate, crate_name, resolver)\n-            })?;\n-            Ok((Lrc::new(krate), resolver, lint_store))\n+            let krate =\n+                passes::configure_and_expand(sess, &lint_store, krate, crate_name, &mut resolver)?;\n+            Ok((Lrc::new(krate), resolver.into_outputs(), lint_store))\n         })\n     }\n \n@@ -209,13 +212,13 @@ impl<'tcx> Queries<'tcx> {\n     pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n         self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let (krate, resolver, lint_store) = self.expansion()?.steal();\n+            let (krate, resolver_outputs, lint_store) = self.expansion()?.steal();\n \n             let ty::ResolverOutputs {\n                 untracked,\n                 global_ctxt: untracked_resolutions,\n                 ast_lowering: untracked_resolver_for_lowering,\n-            } = resolver.into_outputs();\n+            } = resolver_outputs;\n \n             let gcx = passes::create_global_ctxt(\n                 self.compiler,"}]}