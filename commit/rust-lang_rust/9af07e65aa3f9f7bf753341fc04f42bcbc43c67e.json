{"sha": "9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjA3ZTY1YWEzZjlmN2JmNzUzMzQxZmMwNGY0MmJjYmM0M2M2N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-27T13:44:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-27T13:44:51Z"}, "message": "Auto merge of #7138 - mgacek8:issue6808_iter_cloned_collect_FN_with_large_array, r=Manishearth\n\nFix FN in `iter_cloned_collect` with a large array\n\nfixes #6808\nchangelog: Fix FN in `iter_cloned_collect` with a large array\n\nI spotted that [is_iterable_array](https://github.com/rust-lang/rust-clippy/blob/a362a4d1d0edb66aef186c1d27b28c60573078f4/clippy_lints/src/loops/explicit_iter_loop.rs#L67-L75) function that `explicit_iter_loop` lint is using only works for array sizes <= 32.\nThere is this comment:\n> IntoIterator is currently only implemented for array sizes <= 32 in rustc\n\nI'm a bit confused, because I read that [IntoIterator for arrays](https://doc.rust-lang.org/src/core/array/mod.rs.html#194-201) with const generic `N` is stable since = \"1.0.0\". Although Const Generics MVP were stabilized in Rust 1.51.\n\nShould I set MSRV for the current change? I will try to test with older compilers soon.", "tree": {"sha": "39577f1b2dc0ea55d33f2cf085856f0bccdc7a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39577f1b2dc0ea55d33f2cf085856f0bccdc7a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "html_url": "https://github.com/rust-lang/rust/commit/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "html_url": "https://github.com/rust-lang/rust/commit/0a330e682410a2b52f31e3f0ee5e6738b7a2227d"}, {"sha": "d7627dcfc8a60aaedccf002738dc44a2576fa8fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7627dcfc8a60aaedccf002738dc44a2576fa8fd", "html_url": "https://github.com/rust-lang/rust/commit/d7627dcfc8a60aaedccf002738dc44a2576fa8fd"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "0daea47816a512137265160cc7773706380b4b44", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "patch": "@@ -18,9 +18,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n-            ty::Array(_, size) => size\n-                .try_eval_usize(cx.tcx, cx.param_env)\n-                .map_or(false, |size| size < 32),\n+            ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }"}, {"sha": "39cc58cd298439d0c06756b5f68090234b9414b1", "filename": "tests/ui/iter_cloned_collect.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.fixed?ref=9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "patch": "@@ -19,4 +19,8 @@ fn main() {\n         let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n             .to_bytes().to_vec();\n     }\n+\n+    // Issue #6808\n+    let arr: [u8; 64] = [0; 64];\n+    let _: Vec<_> = arr.to_vec();\n }"}, {"sha": "c2a036ec09f1e80cea582f0b49c746497e95e3ce", "filename": "tests/ui/iter_cloned_collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.rs?ref=9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "patch": "@@ -22,4 +22,8 @@ fn main() {\n             .cloned()\n             .collect();\n     }\n+\n+    // Issue #6808\n+    let arr: [u8; 64] = [0; 64];\n+    let _: Vec<_> = arr.iter().cloned().collect();\n }"}, {"sha": "e1df61794cecee7273dfac211f425fec0f924680", "filename": "tests/ui/iter_cloned_collect.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af07e65aa3f9f7bf753341fc04f42bcbc43c67e/tests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.stderr?ref=9af07e65aa3f9f7bf753341fc04f42bcbc43c67e", "patch": "@@ -22,5 +22,11 @@ LL | |             .cloned()\n LL | |             .collect();\n    | |______________________^ help: try: `.to_vec()`\n \n-error: aborting due to 3 previous errors\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:28:24\n+   |\n+LL |     let _: Vec<_> = arr.iter().cloned().collect();\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+\n+error: aborting due to 4 previous errors\n "}]}