{"sha": "746e46548c82561da61c199284fc662c5de80669", "node_id": "C_kwDOAAsO6NoAKDc0NmU0NjU0OGM4MjU2MWRhNjFjMTk5Mjg0ZmM2NjJjNWRlODA2Njk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T06:41:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T06:41:09Z"}, "message": "Rollup merge of #89344 - jackh726:maybe-bound-eror, r=cjgillot\n\nCleanup lower_generics_mut and make span be the bound itself\n\nCloses #86298 (supersedes those changes)\n\nr? `@cjgillot` since you reviewed the other PR\n\n(Used wrong branch for #89338)", "tree": {"sha": "2a9f024d0e69b0266fee20fd1323c59db499b830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9f024d0e69b0266fee20fd1323c59db499b830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/746e46548c82561da61c199284fc662c5de80669", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVq2FCRBK7hj4Ov3rIwAAYRoIAIvkFiPJ5Ey4Y53TJHa6fYE0\nQqmGC68r+l2OocJZuNUvJFBYydYYvn4M/uaYylTHhqYmlRyUKqh8Js6Z3SehBmui\nLjNFGyTFWyS1W66MevIOQq3jubpnORYQbFHCknf39sMlj+cm197Efx3k3HtyXgvL\nA00SMq9dJKHNdhsYRhdyaxfZy0dKIDULsAp2jG8mJYvSjbj7g+SOH0Kl52sCKi5u\nd/gidKR6JsFlw+He/akYY2mYvWAYNsZYHSx5GvtpItJM9iztjfXheHRJnsbn3mqN\ngsoCBO0fezEwbLWtKDggX2LrJUdHsORhHFfr/rcwGBSiryG8eVDc2OKsSzu5ymY=\n=naTE\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a9f024d0e69b0266fee20fd1323c59db499b830\nparent 8c5114b4e84a5a707c071982e3357fcbb3fb0a75\nparent e1a9ecca2642a21eb56739d0360066bf27c86342\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633070469 -0700\ncommitter GitHub <noreply@github.com> 1633070469 -0700\n\nRollup merge of #89344 - jackh726:maybe-bound-eror, r=cjgillot\n\nCleanup lower_generics_mut and make span be the bound itself\n\nCloses #86298 (supersedes those changes)\n\nr? `@cjgillot` since you reviewed the other PR\n\n(Used wrong branch for #89338)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/746e46548c82561da61c199284fc662c5de80669", "html_url": "https://github.com/rust-lang/rust/commit/746e46548c82561da61c199284fc662c5de80669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/746e46548c82561da61c199284fc662c5de80669/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5114b4e84a5a707c071982e3357fcbb3fb0a75", "html_url": "https://github.com/rust-lang/rust/commit/8c5114b4e84a5a707c071982e3357fcbb3fb0a75"}, {"sha": "e1a9ecca2642a21eb56739d0360066bf27c86342", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9ecca2642a21eb56739d0360066bf27c86342", "html_url": "https://github.com/rust-lang/rust/commit/e1a9ecca2642a21eb56739d0360066bf27c86342"}], "stats": {"total": 87, "additions": 50, "deletions": 37}, "files": [{"sha": "ea9eb0cf2742bc54c597a7cf38fd277da836f17c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=746e46548c82561da61c199284fc662c5de80669", "patch": "@@ -1328,32 +1328,45 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // keep track of the Span info. Now, `add_implicitly_sized` in `AstConv` checks both param bounds and\n         // where clauses for `?Sized`.\n         for pred in &generics.where_clause.predicates {\n-            if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n-                'next_bound: for bound in &bound_pred.bounds {\n-                    if let GenericBound::Trait(_, TraitBoundModifier::Maybe) = *bound {\n-                        // Check if the where clause type is a plain type parameter.\n-                        match self\n-                            .resolver\n-                            .get_partial_res(bound_pred.bounded_ty.id)\n-                            .map(|d| (d.base_res(), d.unresolved_segments()))\n-                        {\n-                            Some((Res::Def(DefKind::TyParam, def_id), 0))\n-                                if bound_pred.bound_generic_params.is_empty() =>\n-                            {\n-                                for param in &generics.params {\n-                                    if def_id == self.resolver.local_def_id(param.id).to_def_id() {\n-                                        continue 'next_bound;\n-                                    }\n-                                }\n-                            }\n-                            _ => {}\n-                        }\n-                        self.diagnostic().span_err(\n-                            bound_pred.bounded_ty.span,\n-                            \"`?Trait` bounds are only permitted at the \\\n-                                 point where a type parameter is declared\",\n-                        );\n+            let bound_pred = match *pred {\n+                WherePredicate::BoundPredicate(ref bound_pred) => bound_pred,\n+                _ => continue,\n+            };\n+            let compute_is_param = || {\n+                // Check if the where clause type is a plain type parameter.\n+                match self\n+                    .resolver\n+                    .get_partial_res(bound_pred.bounded_ty.id)\n+                    .map(|d| (d.base_res(), d.unresolved_segments()))\n+                {\n+                    Some((Res::Def(DefKind::TyParam, def_id), 0))\n+                        if bound_pred.bound_generic_params.is_empty() =>\n+                    {\n+                        generics\n+                            .params\n+                            .iter()\n+                            .find(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n+                            .is_some()\n                     }\n+                    // Either the `bounded_ty` is not a plain type parameter, or\n+                    // it's not found in the generic type parameters list.\n+                    _ => false,\n+                }\n+            };\n+            // We only need to compute this once per `WherePredicate`, but don't\n+            // need to compute this at all unless there is a Maybe bound.\n+            let mut is_param: Option<bool> = None;\n+            for bound in &bound_pred.bounds {\n+                if !matches!(*bound, GenericBound::Trait(_, TraitBoundModifier::Maybe)) {\n+                    continue;\n+                }\n+                let is_param = *is_param.get_or_insert_with(compute_is_param);\n+                if !is_param {\n+                    self.diagnostic().span_err(\n+                        bound.span(),\n+                        \"`?Trait` bounds are only permitted at the \\\n+                        point where a type parameter is declared\",\n+                    );\n                 }\n             }\n         }"}, {"sha": "245199e37511380a0e1220e6e2f9f54cc46af10f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=746e46548c82561da61c199284fc662c5de80669", "patch": "@@ -166,7 +166,7 @@ pub trait ResolverAstLowering {\n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>>;\n \n     /// Obtains resolution for a `NodeId` with a single resolution.\n-    fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes>;\n+    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n \n     /// Obtains per-namespace resolutions for `use` statement with the given `NodeId`.\n     fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res<NodeId>>>;"}, {"sha": "8ae2d5cdd97a954dfed4d8ea2f740e0f6b62c456", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746e46548c82561da61c199284fc662c5de80669/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=746e46548c82561da61c199284fc662c5de80669", "patch": "@@ -1152,7 +1152,7 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.legacy_const_generic_args(expr)\n     }\n \n-    fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes> {\n+    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {\n         self.partial_res_map.get(&id).cloned()\n     }\n "}, {"sha": "39bc1b88e56d7f11f18015b4c5ca28e47a5aa6f0", "filename": "src/test/ui/maybe-bounds-where.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/746e46548c82561da61c199284fc662c5de80669/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/746e46548c82561da61c199284fc662c5de80669/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr?ref=746e46548c82561da61c199284fc662c5de80669", "patch": "@@ -1,32 +1,32 @@\n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:1:23\n+  --> $DIR/maybe-bounds-where.rs:1:28\n    |\n LL | struct S1<T>(T) where (T): ?Sized;\n-   |                       ^^^\n+   |                            ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:4:23\n+  --> $DIR/maybe-bounds-where.rs:4:27\n    |\n LL | struct S2<T>(T) where u8: ?Sized;\n-   |                       ^^\n+   |                           ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:7:23\n+  --> $DIR/maybe-bounds-where.rs:7:35\n    |\n LL | struct S3<T>(T) where &'static T: ?Sized;\n-   |                       ^^^^^^^^^^\n+   |                                   ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:12:31\n+  --> $DIR/maybe-bounds-where.rs:12:34\n    |\n LL | struct S4<T>(T) where for<'a> T: ?Trait<'a>;\n-   |                               ^\n+   |                                  ^^^^^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:21:18\n+  --> $DIR/maybe-bounds-where.rs:21:21\n    |\n LL |     fn f() where T: ?Sized {}\n-   |                  ^\n+   |                     ^^^^^^\n \n warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n   --> $DIR/maybe-bounds-where.rs:12:11"}]}