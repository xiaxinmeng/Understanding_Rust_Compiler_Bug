{"sha": "f6228615bdc757a89f0a8225f939a64b60d19e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjI4NjE1YmRjNzU3YTg5ZjBhODIyNWY5MzlhNjRiNjBkMTllOWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-03T14:25:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-03T14:25:02Z"}, "message": "Rollup merge of #60409 - JohnTitor:error-for-existential-type, r=oli-obk\n\nRequire a trait in the bounds of existential types\n\nFixes #53090\n\nr? @oli-obk", "tree": {"sha": "170bfea155bd343a99ad99e33130aec0f3bbe38f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170bfea155bd343a99ad99e33130aec0f3bbe38f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6228615bdc757a89f0a8225f939a64b60d19e9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczE8+CRBK7hj4Ov3rIwAAdHIIAK3wNV5E+DBxZYp81/pw7S0B\nV8GmlLAMpBl0a74vrykqiQgbnY3RkmaTHJjg9Pp8wKUBYcPQXX4pyaGJdY2Ae0nU\nzTIBOzfisSMH9tzXTKvniVyXOnWdi8qwfkrSRt6b8I4mDG6GR19HzMH5cS545IeU\nWMKuD1vM6TBjKhxbuMmfxABiEGTNklRaweRjvRY+c44OA7Oy7xWvyeY07GoLAo7/\n92KgOmkzozDt4P3ZLWMrCvxJT4DrSMQmfk6sAErVmIwKqavCsYyox499pI0curPl\nJY1JuDvdEqduq14nDa0IINI9Ar5TCIuskJSki1eb/nfhltzZigvWlSaKr9riH0s=\n=1H9i\n-----END PGP SIGNATURE-----\n", "payload": "tree 170bfea155bd343a99ad99e33130aec0f3bbe38f\nparent bfa22cfbcaf207b88006a564989904f6d0c1b5c7\nparent 748d978c648711d04cd3f3f06722e13c488e017a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556893502 +0200\ncommitter GitHub <noreply@github.com> 1556893502 +0200\n\nRollup merge of #60409 - JohnTitor:error-for-existential-type, r=oli-obk\n\nRequire a trait in the bounds of existential types\n\nFixes #53090\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6228615bdc757a89f0a8225f939a64b60d19e9e", "html_url": "https://github.com/rust-lang/rust/commit/f6228615bdc757a89f0a8225f939a64b60d19e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6228615bdc757a89f0a8225f939a64b60d19e9e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfa22cfbcaf207b88006a564989904f6d0c1b5c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa22cfbcaf207b88006a564989904f6d0c1b5c7", "html_url": "https://github.com/rust-lang/rust/commit/bfa22cfbcaf207b88006a564989904f6d0c1b5c7"}, {"sha": "748d978c648711d04cd3f3f06722e13c488e017a", "url": "https://api.github.com/repos/rust-lang/rust/commits/748d978c648711d04cd3f3f06722e13c488e017a", "html_url": "https://github.com/rust-lang/rust/commit/748d978c648711d04cd3f3f06722e13c488e017a"}], "stats": {"total": 120, "additions": 106, "deletions": 14}, "files": [{"sha": "1f5a6d79141256ae83388b58411d6454eb3e0d79", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -20,7 +20,7 @@ use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, MultiSpan};\n use errors::Applicability;\n use log::debug;\n \n@@ -679,6 +679,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                                 \"unions cannot have zero fields\");\n                 }\n             }\n+            ItemKind::Existential(ref bounds, _) => {\n+                if !bounds.iter()\n+                          .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n+                    let msp = MultiSpan::from_spans(bounds.iter()\n+                        .map(|bound| bound.span()).collect());\n+                    self.err_handler().span_err(msp, \"at least one trait must be specified\");\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "b36435cf113f1137d229592f187df537e258e2ba", "filename": "src/test/run-pass/existential_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Frun-pass%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Frun-pass%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexistential_type.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -68,14 +68,14 @@ fn my_other_iter<U>(u: U) -> MyOtherIter<U> {\n }\n \n trait Trait {}\n-existential type GenericBound<'a, T: Trait>: 'a;\n+existential type GenericBound<'a, T: Trait>: Sized + 'a;\n \n fn generic_bound<'a, T: Trait + 'a>(t: T) -> GenericBound<'a, T> {\n     t\n }\n \n mod pass_through {\n-    pub existential type Passthrough<T>: 'static;\n+    pub existential type Passthrough<T>: Sized + 'static;\n \n     fn define_passthrough<T: 'static>(t: T) -> Passthrough<T> {\n         t"}, {"sha": "46339c73b1f1d39b00a769e24bcf024af334604c", "filename": "src/test/ui/existential_types/existential-types-with-no-traits.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -0,0 +1,14 @@\n+#![feature(existential_type)]\n+\n+existential type Foo: 'static;\n+//~^ ERROR: at least one trait must be specified\n+\n+fn foo() -> Foo {\n+    \"foo\"\n+}\n+\n+fn bar() -> impl 'static { //~ ERROR: at least one trait must be specified\n+    \"foo\"\n+}\n+\n+fn main() {}"}, {"sha": "4b2fbc79d3bc29e4706472b66771ef87d2d7d5d4", "filename": "src/test/ui/existential_types/existential-types-with-no-traits.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -0,0 +1,14 @@\n+error: at least one trait must be specified\n+  --> $DIR/existential-types-with-no-traits.rs:3:23\n+   |\n+LL | existential type Foo: 'static;\n+   |                       ^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/existential-types-with-no-traits.rs:10:13\n+   |\n+LL | fn bar() -> impl 'static {\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ffc965aca47c92eab9f8661243324b21d9fc51eb", "filename": "src/test/ui/existential_types/generic_nondefining_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -4,6 +4,8 @@ fn main() {}\n \n existential type Cmp<T>: 'static;\n //~^ ERROR could not find defining uses\n+//~^^ ERROR: at least one trait must be specified\n+\n \n // not a defining use, because it doesn't define *all* possible generics\n fn cmp() -> Cmp<u32> { //~ ERROR defining existential type use does not fully define"}, {"sha": "d205d44c68c710b782bf5f4151e5c373dcb15827", "filename": "src/test/ui/existential_types/generic_nondefining_use.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,5 +1,11 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_nondefining_use.rs:5:26\n+   |\n+LL | existential type Cmp<T>: 'static;\n+   |                          ^^^^^^^\n+\n error: defining existential type use does not fully define existential type\n-  --> $DIR/generic_nondefining_use.rs:9:1\n+  --> $DIR/generic_nondefining_use.rs:11:1\n    |\n LL | / fn cmp() -> Cmp<u32> {\n LL | |     5u32\n@@ -12,5 +18,5 @@ error: could not find defining uses\n LL | existential type Cmp<T>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "054e6f5f2ade99fda0bd2ed82ce68ee6acbc7946", "filename": "src/test/ui/existential_types/generic_not_used.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -3,6 +3,7 @@\n fn main() {}\n \n existential type WrongGeneric<T: 'static>: 'static;\n+//~^ ERROR: at least one trait must be specified\n \n fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n //~^ ERROR type parameter `V` is part of concrete type but not used in parameter list"}, {"sha": "d243233992b0266422f18b4fce26366e97bbfb83", "filename": "src/test/ui/existential_types/generic_not_used.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,5 +1,11 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_not_used.rs:5:44\n+   |\n+LL | existential type WrongGeneric<T: 'static>: 'static;\n+   |                                            ^^^^^^^\n+\n error: type parameter `V` is part of concrete type but not used in parameter list for existential type\n-  --> $DIR/generic_not_used.rs:7:73\n+  --> $DIR/generic_not_used.rs:8:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^\n@@ -8,5 +14,5 @@ LL | |     v\n LL | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "d9eedd6dca7c1d8621d3578fa178da6da9099c33", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -8,6 +8,7 @@ fn main() {\n \n existential type WrongGeneric<T>: 'static;\n //~^ ERROR the parameter type `T` may not live long enough\n+//~^^ ERROR: at least one trait must be specified\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n     t"}, {"sha": "2f76eea4460bd387e0bfbd19d3efc2e128aa8569", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,3 +1,9 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:35\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   |                                   ^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n@@ -22,7 +28,7 @@ note: ...so that the type `T` will meet its required lifetime bounds\n LL | existential type WrongGeneric<T>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "cc0db893c6aa703ef1f6d0d72326cb9030dfad35", "filename": "src/test/ui/existential_types/generic_underconstrained.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -4,6 +4,7 @@ fn main() {}\n \n trait Trait {}\n existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+//~^ ERROR: at least one trait must be specified\n \n // no `Trait` bound\n fn underconstrain<T>(_: T) -> Underconstrained<T> {"}, {"sha": "35083a53eb3438083874e0a22bf847bc0c42a565", "filename": "src/test/ui/existential_types/generic_underconstrained.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,3 +1,9 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained.rs:6:46\n+   |\n+LL | existential type Underconstrained<T: Trait>: 'static;\n+   |                                              ^^^^^^^\n+\n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/generic_underconstrained.rs:6:1\n    |\n@@ -7,6 +13,6 @@ LL | existential type Underconstrained<T: Trait>: 'static;\n    = help: consider adding a `where T: Trait` bound\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c6263eacd53e3c4d75df015b90133f79115bcb4f", "filename": "src/test/ui/existential_types/generic_underconstrained2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -4,6 +4,7 @@ fn main() {}\n \n existential type Underconstrained<T: std::fmt::Debug>: 'static;\n //~^ ERROR `U` doesn't implement `std::fmt::Debug`\n+//~^^ ERROR: at least one trait must be specified\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained<U>(_: U) -> Underconstrained<U> {\n@@ -12,6 +13,7 @@ fn underconstrained<U>(_: U) -> Underconstrained<U> {\n \n existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n //~^ ERROR `V` doesn't implement `std::fmt::Debug`\n+//~^^ ERROR: at least one trait must be specified\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {"}, {"sha": "6ff783f33b96f8b0d97635dc405ed80ea12a336b", "filename": "src/test/ui/existential_types/generic_underconstrained2.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,3 +1,15 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:5:56\n+   |\n+LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n+   |                                                        ^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:14:57\n+   |\n+LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n+   |                                                         ^^^^^^^\n+\n error[E0277]: `U` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:5:1\n    |\n@@ -9,7 +21,7 @@ LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n-  --> $DIR/generic_underconstrained2.rs:13:1\n+  --> $DIR/generic_underconstrained2.rs:14:1\n    |\n LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n@@ -18,6 +30,6 @@ LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n    = help: consider adding a `where V: std::fmt::Debug` bound\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "5455b39f4cbe220b0255826a29d2a34ac9a992cc", "filename": "src/test/ui/existential_types/unused_generic_param.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -1,18 +1,17 @@\n-// compile-pass\n #![feature(existential_type)]\n \n fn main() {\n }\n \n-// test that unused generic parameters are ok\n existential type PartiallyDefined<T>: 'static;\n+//~^ ERROR: at least one trait must be specified\n \n fn partially_defined<T: std::fmt::Debug>(_: T) -> PartiallyDefined<T> {\n     4u32\n }\n \n-// test that unused generic parameters are ok\n existential type PartiallyDefined2<T>: 'static;\n+//~^ ERROR: at least one trait must be specified\n \n fn partially_defined2<T: std::fmt::Debug>(_: T) -> PartiallyDefined2<T> {\n     4u32"}, {"sha": "9d628d069d36cf8c95b47bb3a0042f974229026e", "filename": "src/test/ui/existential_types/unused_generic_param.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6228615bdc757a89f0a8225f939a64b60d19e9e/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr?ref=f6228615bdc757a89f0a8225f939a64b60d19e9e", "patch": "@@ -0,0 +1,14 @@\n+error: at least one trait must be specified\n+  --> $DIR/unused_generic_param.rs:6:39\n+   |\n+LL | existential type PartiallyDefined<T>: 'static;\n+   |                                       ^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/unused_generic_param.rs:13:40\n+   |\n+LL | existential type PartiallyDefined2<T>: 'static;\n+   |                                        ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}