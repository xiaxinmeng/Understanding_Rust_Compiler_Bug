{"sha": "9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNmQzY2YzYzk2MzRhZmVhZGIxMWNlMTkxN2UxNTliNjRjNjM5NWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-29T00:43:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-29T00:47:36Z"}, "message": "De-export std::c_vec. Part of Part of #3583.", "tree": {"sha": "8ecfba3d85efe849e7706e604fa7a7b629c4d180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ecfba3d85efe849e7706e604fa7a7b629c4d180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "html_url": "https://github.com/rust-lang/rust/commit/9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6d3cf3c9634afeadb11ce1917e159b64c6395f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365428782660b01a8702b589214ca20d35efd23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/365428782660b01a8702b589214ca20d35efd23d", "html_url": "https://github.com/rust-lang/rust/commit/365428782660b01a8702b589214ca20d35efd23d"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "1ff5b63ee12f3dd6a1f27fe2bb642c63b3950bf4", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e6d3cf3c9634afeadb11ce1917e159b64c6395f/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6d3cf3c9634afeadb11ce1917e159b64c6395f/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "patch": "@@ -26,19 +26,13 @@\n  * still held if needed.\n  */\n \n-export CVec;\n-export CVec, c_vec_with_dtor;\n-export get, set;\n-export len;\n-export ptr;\n-\n /**\n  * The type representing a foreign chunk of memory\n  *\n  * Wrapped in a enum for opacity; FIXME #818 when it is possible to have\n  * truly opaque types, this should be revisited.\n  */\n-enum CVec<T> {\n+pub enum CVec<T> {\n     CVecCtor({ base: *mut T, len: uint, rsrc: @DtorRes})\n }\n \n@@ -70,7 +64,7 @@ fn DtorRes(dtor: Option<fn@()>) -> DtorRes {\n  * * base - A foreign pointer to a buffer\n  * * len - The number of elements in the buffer\n  */\n-unsafe fn CVec<T>(base: *mut T, len: uint) -> CVec<T> {\n+pub unsafe fn CVec<T>(base: *mut T, len: uint) -> CVec<T> {\n     return CVecCtor({\n         base: base,\n         len: len,\n@@ -89,7 +83,7 @@ unsafe fn CVec<T>(base: *mut T, len: uint) -> CVec<T> {\n  * * dtor - A function to run when the value is destructed, useful\n  *          for freeing the buffer, etc.\n  */\n-unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: fn@())\n+pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: fn@())\n   -> CVec<T> {\n     return CVecCtor({\n         base: base,\n@@ -107,7 +101,7 @@ unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: fn@())\n  *\n  * Fails if `ofs` is greater or equal to the length of the vector\n  */\n-fn get<T: Copy>(t: CVec<T>, ofs: uint) -> T {\n+pub fn get<T: Copy>(t: CVec<T>, ofs: uint) -> T {\n     assert ofs < len(t);\n     return unsafe { *ptr::mut_offset((*t).base, ofs) };\n }\n@@ -117,7 +111,7 @@ fn get<T: Copy>(t: CVec<T>, ofs: uint) -> T {\n  *\n  * Fails if `ofs` is greater or equal to the length of the vector\n  */\n-fn set<T: Copy>(t: CVec<T>, ofs: uint, +v: T) {\n+pub fn set<T: Copy>(t: CVec<T>, ofs: uint, +v: T) {\n     assert ofs < len(t);\n     unsafe { *ptr::mut_offset((*t).base, ofs) = v };\n }\n@@ -127,18 +121,17 @@ fn set<T: Copy>(t: CVec<T>, ofs: uint, +v: T) {\n  */\n \n /// Returns the length of the vector\n-fn len<T>(t: CVec<T>) -> uint {\n+pub fn len<T>(t: CVec<T>) -> uint {\n     return (*t).len;\n }\n \n /// Returns a pointer to the first element of the vector\n-unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n+pub unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n     return (*t).base;\n }\n \n #[cfg(test)]\n mod tests {\n-    #[legacy_exports];\n     use libc::*;\n \n     fn malloc(n: size_t) -> CVec<u8> {"}, {"sha": "5b181d2e4c081ade9e5142ac37df1adc5fdb069b", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e6d3cf3c9634afeadb11ce1917e159b64c6395f/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9e6d3cf3c9634afeadb11ce1917e159b64c6395f/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=9e6d3cf3c9634afeadb11ce1917e159b64c6395f", "patch": "@@ -67,7 +67,6 @@ mod uv_global_loop;\n \n // Utility modules\n \n-#[legacy_exports]\n mod c_vec;\n mod timer;\n mod cell;"}]}