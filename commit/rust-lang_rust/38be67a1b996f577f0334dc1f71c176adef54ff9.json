{"sha": "38be67a1b996f577f0334dc1f71c176adef54ff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmU2N2ExYjk5NmY1NzdmMDMzNGRjMWY3MWMxNzZhZGVmNTRmZjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T02:49:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:25Z"}, "message": "librustc: De-`@mut` `CrateDebugContext::created_types`.", "tree": {"sha": "f085e330d8b339cd0d59cf029a6ff3f0b00b2c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f085e330d8b339cd0d59cf029a6ff3f0b00b2c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38be67a1b996f577f0334dc1f71c176adef54ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38be67a1b996f577f0334dc1f71c176adef54ff9", "html_url": "https://github.com/rust-lang/rust/commit/38be67a1b996f577f0334dc1f71c176adef54ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38be67a1b996f577f0334dc1f71c176adef54ff9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac286b518c8a0db9753ffd188326234457a4719", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac286b518c8a0db9753ffd188326234457a4719", "html_url": "https://github.com/rust-lang/rust/commit/6ac286b518c8a0db9753ffd188326234457a4719"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "270c52212d5603e55f0f9aae6df70b2b6d5ea91f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38be67a1b996f577f0334dc1f71c176adef54ff9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be67a1b996f577f0334dc1f71c176adef54ff9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=38be67a1b996f577f0334dc1f71c176adef54ff9", "patch": "@@ -177,7 +177,7 @@ pub struct CrateDebugContext {\n     priv builder: DIBuilderRef,\n     priv current_debug_location: DebugLocation,\n     priv created_files: RefCell<HashMap<~str, DIFile>>,\n-    priv created_types: HashMap<uint, DIType>,\n+    priv created_types: RefCell<HashMap<uint, DIType>>,\n     priv namespace_map: HashMap<~[ast::Ident], @NamespaceTreeNode>,\n     // This collection is used to assert that composite types (structs, enums, ...) have their\n     // members only set once:\n@@ -196,7 +196,7 @@ impl CrateDebugContext {\n             builder: builder,\n             current_debug_location: UnknownLocation,\n             created_files: RefCell::new(HashMap::new()),\n-            created_types: HashMap::new(),\n+            created_types: RefCell::new(HashMap::new()),\n             namespace_map: HashMap::new(),\n             composite_types_completed: HashSet::new(),\n         };\n@@ -1238,7 +1238,11 @@ impl RecursiveTypeDescription {\n                 member_description_factory\n             } => {\n                 // Insert the stub into the cache in order to allow recursive references ...\n-                debug_context(cx).created_types.insert(cache_id, metadata_stub);\n+                {\n+                    let mut created_types = debug_context(cx).created_types\n+                                                             .borrow_mut();\n+                    created_types.get().insert(cache_id, metadata_stub);\n+                }\n \n                 // ... then create the member descriptions ...\n                 let member_descriptions = member_description_factory.\n@@ -2042,9 +2046,13 @@ fn type_metadata(cx: &mut CrateContext,\n                  usage_site_span: Span)\n               -> DIType {\n     let cache_id = cache_id_for_type(t);\n-    match debug_context(cx).created_types.find(&cache_id) {\n-        Some(type_metadata) => return *type_metadata,\n-        None => ()\n+\n+    {\n+        let created_types = debug_context(cx).created_types.borrow();\n+        match created_types.get().find(&cache_id) {\n+            Some(type_metadata) => return *type_metadata,\n+            None => ()\n+        }\n     }\n \n     fn create_pointer_to_box_metadata(cx: &mut CrateContext,\n@@ -2158,7 +2166,8 @@ fn type_metadata(cx: &mut CrateContext,\n         _ => cx.sess.bug(format!(\"debuginfo: unexpected type in type_metadata: {:?}\", sty))\n     };\n \n-    debug_context(cx).created_types.insert(cache_id, type_metadata);\n+    let mut created_types = debug_context(cx).created_types.borrow_mut();\n+    created_types.get().insert(cache_id, type_metadata);\n     return type_metadata;\n }\n "}]}