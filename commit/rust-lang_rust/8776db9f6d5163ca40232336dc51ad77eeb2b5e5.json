{"sha": "8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzZkYjlmNmQ1MTYzY2E0MDIzMjMzNmRjNTFhZDc3ZWViMmI1ZTU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-23T10:05:34Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-23T10:05:34Z"}, "message": "Fix ICE in `repeat_once` lint", "tree": {"sha": "399db1e12561502ad438966af032b39c55460d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399db1e12561502ad438966af032b39c55460d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "html_url": "https://github.com/rust-lang/rust/commit/8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8776db9f6d5163ca40232336dc51ad77eeb2b5e5/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd07860b839a46782e3750a8924ecf380486c460", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd07860b839a46782e3750a8924ecf380486c460", "html_url": "https://github.com/rust-lang/rust/commit/dd07860b839a46782e3750a8924ecf380486c460"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "c0890018d46aba3abe8c9843d8a98cdffadf63dc", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8776db9f6d5163ca40232336dc51ad77eeb2b5e5/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8776db9f6d5163ca40232336dc51ad77eeb2b5e5/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "patch": "@@ -39,20 +39,20 @@ declare_lint_pass!(RepeatOnce => [REPEAT_ONCE]);\n impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, _, [receiver, count], _) = &expr.kind;\n             if path.ident.name == sym!(repeat);\n-            if let Some(Constant::Int(1)) = constant_context(cx, cx.typeck_results()).expr(&args[1]);\n-            if !in_macro(args[0].span);\n+            if let Some(Constant::Int(1)) = constant_context(cx, cx.typeck_results()).expr(&count);\n+            if !in_macro(receiver.span);\n             then {\n-                let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0]));\n+                let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&receiver));\n                 if ty.is_str() {\n                     span_lint_and_sugg(\n                         cx,\n                         REPEAT_ONCE,\n                         expr.span,\n                         \"calling `repeat(1)` on str\",\n                         \"consider using `.to_string()` instead\",\n-                        format!(\"{}.to_string()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        format!(\"{}.to_string()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n                         Applicability::MachineApplicable,\n                     );\n                 } else if ty.builtin_index().is_some() {\n@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n                         expr.span,\n                         \"calling `repeat(1)` on slice\",\n                         \"consider using `.to_vec()` instead\",\n-                        format!(\"{}.to_vec()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        format!(\"{}.to_vec()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n                         Applicability::MachineApplicable,\n                     );\n                 } else if is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n                         expr.span,\n                         \"calling `repeat(1)` on a string literal\",\n                         \"consider using `.clone()` instead\",\n-                        format!(\"{}.clone()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        format!(\"{}.clone()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "5caf29c619735384ea91d3b304dcd490a12c57eb", "filename": "tests/ui/crashes/ice-5944.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8776db9f6d5163ca40232336dc51ad77eeb2b5e5/tests%2Fui%2Fcrashes%2Fice-5944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8776db9f6d5163ca40232336dc51ad77eeb2b5e5/tests%2Fui%2Fcrashes%2Fice-5944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5944.rs?ref=8776db9f6d5163ca40232336dc51ad77eeb2b5e5", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::repeat_once)]\n+\n+trait Repeat {\n+    fn repeat(&self) {}\n+}\n+\n+impl Repeat for usize {\n+    fn repeat(&self) {}\n+}\n+\n+fn main() {\n+    let _ = 42.repeat();\n+}"}]}