{"sha": "c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "node_id": "C_kwDOAAsO6NoAKGMzOTgyNmUzZmFjM2EzZDYzYTc1MzU1ZDg3YjZhNjJmZjNjYmI4Y2I", "commit": {"author": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-18T23:25:14Z"}, "committer": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-18T23:35:48Z"}, "message": "feat: omit suffixes in const generics (e.g. `1_i32`)\n\nCloses #99255", "tree": {"sha": "e373681311ca2585372c968ddb964016302e5976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e373681311ca2585372c968ddb964016302e5976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRdoiNI+SeWALw+khR3DmnWkHNcYQUCYtXuVgAKCRB3DmnWkHNc\nYRlpAQCtyuXSk98RXccwSFAp6y6RVzgxQ/JHvAYtPDGVIqF8awD/dvPA63VGjij8\n6xgihfAw4Ok5r70IoLsRlkcPftvPxAU=\n=gPIu\n-----END PGP SIGNATURE-----", "payload": "tree e373681311ca2585372c968ddb964016302e5976\nparent f8588549c3c3d45c32b404210cada01e2a45def3\nauthor Artur Sinila <personal@logarithmus.dev> 1658186714 +0300\ncommitter Artur Sinila <personal@logarithmus.dev> 1658187348 +0300\n\nfeat: omit suffixes in const generics (e.g. `1_i32`)\n\nCloses #99255\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "html_url": "https://github.com/rust-lang/rust/commit/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/comments", "author": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8588549c3c3d45c32b404210cada01e2a45def3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8588549c3c3d45c32b404210cada01e2a45def3", "html_url": "https://github.com/rust-lang/rust/commit/f8588549c3c3d45c32b404210cada01e2a45def3"}], "stats": {"total": 349, "additions": 179, "deletions": 170}, "files": [{"sha": "5378c63a87da09be7dfe59d66b2c2004e123cc95", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1727,7 +1727,7 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     }\n \n     fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        self.pretty_print_const(ct, true)\n+        self.pretty_print_const(ct, false)\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {"}, {"sha": "5e531a993c62c9f253c9dfe292e1fa53496dcfbf", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/match_arr_unknown_len.rs:3:9\n    |\n LL |         [1, 2] => true,\n-   |         ^^^^^^ expected `2_usize`, found `N`\n+   |         ^^^^^^ expected `2`, found `N`\n    |\n    = note: expected array `[u32; 2]`\n               found array `[u32; N]`"}, {"sha": "e5e7ee26e44bc5ae66c87297b22dd159ffe5343c", "filename": "src/test/ui/const-generics/associated-type-bound-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n LL |     type Assoc = u16;\n    |                  ^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n-   = help: the trait `Bar<3_usize>` is implemented for `u16`\n+   = help: the trait `Bar<3>` is implemented for `u16`\n note: required by a bound in `Foo::Assoc`\n   --> $DIR/associated-type-bound-fail.rs:4:17\n    |"}, {"sha": "e8826ce4335e78c388da61b9efb7837b4f9d525c", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/generic-expr-default-concrete.rs:10:5\n    |\n LL |     Foo::<10, 12>\n-   |     ^^^^^^^^^^^^^ expected `11_usize`, found `12_usize`\n+   |     ^^^^^^^^^^^^^ expected `11`, found `12`\n    |\n-   = note: expected type `11_usize`\n-              found type `12_usize`\n+   = note: expected type `11`\n+              found type `12`\n \n error: aborting due to previous error\n "}, {"sha": "ec131505ed75577ed2507f97db4a65df89b0d58f", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,22 +1,22 @@\n-pub struct Example<const N: usize=13>;\n-pub struct Example2<T=u32, const N: usize=13>(T);\n-pub struct Example3<const N: usize=13, T=u32>(T);\n-pub struct Example4<const N: usize=13, const M: usize=4>;\n+pub struct Example<const N: usize = 13>;\n+pub struct Example2<T = u32, const N: usize = 13>(T);\n+pub struct Example3<const N: usize = 13, T = u32>(T);\n+pub struct Example4<const N: usize = 13, const M: usize = 4>;\n \n fn main() {\n-    let e: Example::<13> = ();\n+    let e: Example<13> = ();\n     //~^ Error: mismatched types\n     //~| expected struct `Example`\n-    let e: Example2::<u32, 13> = ();\n+    let e: Example2<u32, 13> = ();\n     //~^ Error: mismatched types\n     //~| expected struct `Example2`\n-    let e: Example3::<13, u32> = ();\n+    let e: Example3<13, u32> = ();\n     //~^ Error: mismatched types\n     //~| expected struct `Example3`\n-    let e: Example3::<7> = ();\n+    let e: Example3<7> = ();\n     //~^ Error: mismatched types\n-    //~| expected struct `Example3<7_usize>`\n-    let e: Example4::<7> = ();\n+    //~| expected struct `Example3<7>`\n+    let e: Example4<7> = ();\n     //~^ Error: mismatched types\n-    //~| expected struct `Example4<7_usize>`\n+    //~| expected struct `Example4<7>`\n }"}, {"sha": "52c54aace5f16726356081b592aee88581f5e180", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,56 +1,56 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:7:28\n+  --> $DIR/mismatch.rs:7:26\n    |\n-LL |     let e: Example::<13> = ();\n-   |            -------------   ^^ expected struct `Example`, found `()`\n+LL |     let e: Example<13> = ();\n+   |            -----------   ^^ expected struct `Example`, found `()`\n    |            |\n    |            expected due to this\n    |\n    = note: expected struct `Example`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:10:34\n+  --> $DIR/mismatch.rs:10:32\n    |\n-LL |     let e: Example2::<u32, 13> = ();\n-   |            -------------------   ^^ expected struct `Example2`, found `()`\n+LL |     let e: Example2<u32, 13> = ();\n+   |            -----------------   ^^ expected struct `Example2`, found `()`\n    |            |\n    |            expected due to this\n    |\n    = note: expected struct `Example2`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:13:34\n+  --> $DIR/mismatch.rs:13:32\n    |\n-LL |     let e: Example3::<13, u32> = ();\n-   |            -------------------   ^^ expected struct `Example3`, found `()`\n+LL |     let e: Example3<13, u32> = ();\n+   |            -----------------   ^^ expected struct `Example3`, found `()`\n    |            |\n    |            expected due to this\n    |\n    = note: expected struct `Example3`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:16:28\n+  --> $DIR/mismatch.rs:16:26\n    |\n-LL |     let e: Example3::<7> = ();\n-   |            -------------   ^^ expected struct `Example3`, found `()`\n+LL |     let e: Example3<7> = ();\n+   |            -----------   ^^ expected struct `Example3`, found `()`\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `Example3<7_usize>`\n+   = note: expected struct `Example3<7>`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:19:28\n+  --> $DIR/mismatch.rs:19:26\n    |\n-LL |     let e: Example4::<7> = ();\n-   |            -------------   ^^ expected struct `Example4`, found `()`\n+LL |     let e: Example4<7> = ();\n+   |            -----------   ^^ expected struct `Example4`, found `()`\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `Example4<7_usize>`\n+   = note: expected struct `Example4<7>`\n            found unit type `()`\n \n error: aborting due to 5 previous errors"}, {"sha": "80013e7b4b2306e77d81cd3ce709d41407bf05c2", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -4,16 +4,15 @@ trait Trait {}\n impl<const N: u32> Trait for Uwu<N> {}\n \n fn rawr() -> impl Trait {\n-    //~^ error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+    //~^ error: the trait bound `Uwu<10, 12>: Trait` is not satisfied\n     Uwu::<10, 12>\n }\n \n-trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n+trait Traitor<const N: u8 = 1, const M: u8 = N> {}\n \n impl<const N: u8> Traitor<N, 2> for u32 {}\n impl Traitor<1, 2> for u64 {}\n \n-\n fn uwu<const N: u8>() -> impl Traitor<N> {\n     //~^ error: the trait bound `u32: Traitor<N>` is not satisfied\n     1_u32"}, {"sha": "f2e7777ce681411bb79372ae32a58eb91276c56c", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+error[E0277]: the trait bound `Uwu<10, 12>: Trait` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:6:14\n    |\n LL | fn rawr() -> impl Trait {\n-   |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+   |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10, 12>`\n LL |\n LL |     Uwu::<10, 12>\n-   |     ------------- return type was inferred to be `Uwu<10_u32, 12_u32>` here\n+   |     ------------- return type was inferred to be `Uwu<10, 12>` here\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n error[E0277]: the trait bound `u32: Traitor<N>` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:17:26\n+  --> $DIR/rp_impl_trait_fail.rs:16:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N>` is not implemented for `u32`\n@@ -19,11 +19,11 @@ LL |     1_u32\n    |     ----- return type was inferred to be `u32` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2_u8>>\n-             <u64 as Traitor<1_u8, 2_u8>>\n+             <u32 as Traitor<N, 2>>\n+             <u64 as Traitor<1, 2>>\n \n error[E0277]: the trait bound `u64: Traitor` is not satisfied\n-  --> $DIR/rp_impl_trait_fail.rs:22:13\n+  --> $DIR/rp_impl_trait_fail.rs:21:13\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor` is not implemented for `u64`\n@@ -32,8 +32,8 @@ LL |     1_u64\n    |     ----- return type was inferred to be `u64` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n-             <u32 as Traitor<N, 2_u8>>\n-             <u64 as Traitor<1_u8, 2_u8>>\n+             <u32 as Traitor<N, 2>>\n+             <u64 as Traitor<1, 2>>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6ab803f99092069443bd545e8b23b60194886c31", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -16,7 +16,7 @@ trait Traitor<const N: u8 = 1, const M: u8 = N> {\n     }\n }\n \n-impl Traitor<2, 3> for bool { }\n+impl Traitor<2, 3> for bool {}\n \n fn bar<const N: u8>(arg: &dyn Traitor<N>) -> u8 {\n     arg.owo()\n@@ -26,5 +26,5 @@ fn main() {\n     foo(&10_u32);\n     //~^ error: the trait bound `u32: Trait` is not satisfied\n     bar(&true);\n-    //~^ error: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n+    //~^ error: the trait bound `bool: Traitor<_>` is not satisfied\n }"}, {"sha": "a9c185e5fcbd15577036eeaf1bc4068331c9c626", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -6,19 +6,19 @@ LL |     foo(&10_u32);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Trait<2_u8>` is implemented for `u32`\n+   = help: the trait `Trait<2>` is implemented for `u32`\n    = note: required for the cast from `u32` to the object type `dyn Trait`\n \n-error[E0277]: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n+error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n-   |     --- ^^^^^ the trait `Traitor<{_: u8}>` is not implemented for `bool`\n+   |     --- ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Traitor<2_u8, 3_u8>` is implemented for `bool`\n-   = note: required for the cast from `bool` to the object type `dyn Traitor<{_: u8}>`\n+   = help: the trait `Traitor<2, 3>` is implemented for `bool`\n+   = note: required for the cast from `bool` to the object type `dyn Traitor<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a93f670815a03d9515a8559418e10767977f432d", "filename": "src/test/ui/const-generics/defaults/wfness.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -3,16 +3,20 @@ struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n \n trait Trait<const N: u8> {}\n impl Trait<3> for () {}\n-struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n-//~^ error: the trait bound `(): Trait<2_u8>` is not satisfied\n+struct WhereClause<const N: u8 = 2>\n+where\n+    (): Trait<N>;\n+//~^ error: the trait bound `(): Trait<2>` is not satisfied\n \n trait Traitor<T, const N: u8> {}\n-struct WhereClauseTooGeneric<T = u32, const N: u8 = 2>(T) where (): Traitor<T, N>;\n+struct WhereClauseTooGeneric<T = u32, const N: u8 = 2>(T)\n+where\n+    (): Traitor<T, N>;\n \n // no error on struct def\n struct DependentDefaultWfness<const N: u8 = 1, T = WhereClause<N>>(T);\n fn foo() -> DependentDefaultWfness {\n-    //~^ error: the trait bound `(): Trait<1_u8>` is not satisfied\n+    //~^ error: the trait bound `(): Trait<1>` is not satisfied\n     loop {}\n }\n "}, {"sha": "25038f830befc4a9538759c79bab486cf4fcacb2", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -4,26 +4,29 @@ error[E0080]: evaluation of constant value failed\n LL | struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n    |                                 ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n \n-error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n-  --> $DIR/wfness.rs:6:47\n+error[E0277]: the trait bound `(): Trait<2>` is not satisfied\n+  --> $DIR/wfness.rs:8:9\n    |\n-LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n-   |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n+LL |     (): Trait<N>;\n+   |         ^^^^^^^^ the trait `Trait<2>` is not implemented for `()`\n    |\n-   = help: the trait `Trait<3_u8>` is implemented for `()`\n+   = help: the trait `Trait<3>` is implemented for `()`\n \n-error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n-  --> $DIR/wfness.rs:14:13\n+error[E0277]: the trait bound `(): Trait<1>` is not satisfied\n+  --> $DIR/wfness.rs:18:13\n    |\n LL | fn foo() -> DependentDefaultWfness {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1>` is not implemented for `()`\n    |\n-   = help: the trait `Trait<3_u8>` is implemented for `()`\n+   = help: the trait `Trait<3>` is implemented for `()`\n note: required by a bound in `WhereClause`\n-  --> $DIR/wfness.rs:6:47\n+  --> $DIR/wfness.rs:8:9\n    |\n-LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n-   |                                               ^^^^^^^^ required by this bound in `WhereClause`\n+LL | struct WhereClause<const N: u8 = 2>\n+   |        ----------- required by a bound in this\n+LL | where\n+LL |     (): Trait<N>;\n+   |         ^^^^^^^^ required by this bound in `WhereClause`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "eba1768f7dda34e466fbe20582222c4dec12e93c", "filename": "src/test/ui/const-generics/different_generic_args.full.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/different_generic_args.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n-   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3`, found `4`\n    |\n-   = note: expected struct `ConstUsize<3_usize>`\n-              found struct `ConstUsize<4_usize>`\n+   = note: expected struct `ConstUsize<3>`\n+              found struct `ConstUsize<4>`\n \n error: aborting due to previous error\n "}, {"sha": "eba1768f7dda34e466fbe20582222c4dec12e93c", "filename": "src/test/ui/const-generics/different_generic_args.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/different_generic_args.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n-   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3`, found `4`\n    |\n-   = note: expected struct `ConstUsize<3_usize>`\n-              found struct `ConstUsize<4_usize>`\n+   = note: expected struct `ConstUsize<3>`\n+              found struct `ConstUsize<4>`\n \n error: aborting due to previous error\n "}, {"sha": "4c5b5ada4f13286839ba067e69acce63bf8ccba2", "filename": "src/test/ui/const-generics/different_generic_args_array.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/different_generic_args_array.rs:9:9\n    |\n LL |     x = Const::<{ [4] }> {};\n-   |         ^^^^^^^^^^^^^^^^^^^ expected `[3_usize]`, found `[4_usize]`\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `[3]`, found `[4]`\n    |\n-   = note: expected struct `Const<[3_usize]>`\n-              found struct `Const<[4_usize]>`\n+   = note: expected struct `Const<[3]>`\n+              found struct `Const<[4]>`\n \n error: aborting due to previous error\n "}, {"sha": "76a83ba67ce79d00c1e2916b376168fcf3be3d0b", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -5,14 +5,14 @@ LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n    |\n    = help: the following other types implement trait `Foo<N>`:\n-             <() as Foo<0_u8>>\n-             <() as Foo<100_u8>>\n-             <() as Foo<101_u8>>\n-             <() as Foo<102_u8>>\n-             <() as Foo<103_u8>>\n-             <() as Foo<104_u8>>\n-             <() as Foo<105_u8>>\n-             <() as Foo<106_u8>>\n+             <() as Foo<0>>\n+             <() as Foo<100>>\n+             <() as Foo<101>>\n+             <() as Foo<102>>\n+             <() as Foo<103>>\n+             <() as Foo<104>>\n+             <() as Foo<105>>\n+             <() as Foo<106>>\n            and 248 others\n \n error: aborting due to previous error"}, {"sha": "52d1b29f93222a7704493ad480038ea6ba372630", "filename": "src/test/ui/const-generics/generic_arg_infer/in-signature.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -14,7 +14,7 @@ LL | fn ty_fn() -> Bar<i32, _> {\n    |               ---------^-\n    |               |        |\n    |               |        not allowed in type signatures\n-   |               help: replace with the correct return type: `Bar<i32, 3_usize>`\n+   |               help: replace with the correct return type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/in-signature.rs:17:25\n@@ -24,7 +24,7 @@ LL | fn ty_fn_mixed() -> Bar<_, _> {\n    |                     |   |  |\n    |                     |   |  not allowed in type signatures\n    |                     |   not allowed in type signatures\n-   |                     help: replace with the correct return type: `Bar<i32, 3_usize>`\n+   |                     help: replace with the correct return type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/in-signature.rs:22:15\n@@ -45,7 +45,7 @@ LL | const TY_CT: Bar<i32, _> = Bar::<i32, 3>(0);\n    |              ^^^^^^^^^^^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace with the correct type: `Bar<i32, 3_usize>`\n+   |              help: replace with the correct type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/in-signature.rs:28:19\n@@ -54,7 +54,7 @@ LL | static TY_STATIC: Bar<i32, _> = Bar::<i32, 3>(0);\n    |                   ^^^^^^^^^^^\n    |                   |\n    |                   not allowed in type signatures\n-   |                   help: replace with the correct type: `Bar<i32, 3_usize>`\n+   |                   help: replace with the correct type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/in-signature.rs:30:20\n@@ -63,7 +63,7 @@ LL | const TY_CT_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n    |                    ^^^^^^^^^\n    |                    |\n    |                    not allowed in type signatures\n-   |                    help: replace with the correct type: `Bar<i32, 3_usize>`\n+   |                    help: replace with the correct type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/in-signature.rs:32:25\n@@ -72,7 +72,7 @@ LL | static TY_STATIC_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n    |                         ^^^^^^^^^\n    |                         |\n    |                         not allowed in type signatures\n-   |                         help: replace with the correct type: `Bar<i32, 3_usize>`\n+   |                         help: replace with the correct type: `Bar<i32, 3>`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/in-signature.rs:35:21"}, {"sha": "ababb27a869d65baa0880778c7059f872a0f87c5", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -56,19 +56,19 @@ error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:23:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12`, found `13`\n    |\n-   = note: expected type `12_u128`\n-              found type `13_u128`\n+   = note: expected type `12`\n+              found type `13`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:25:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13`, found `14`\n    |\n-   = note: expected type `13_u128`\n-              found type `14_u128`\n+   = note: expected type `13`\n+              found type `14`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:5\n@@ -128,19 +128,19 @@ error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:41:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12`, found `13`\n    |\n-   = note: expected type `12_u128`\n-              found type `13_u128`\n+   = note: expected type `12`\n+              found type `13`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:43:5\n    |\n LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13`, found `14`\n    |\n-   = note: expected type `13_u128`\n-              found type `14_u128`\n+   = note: expected type `13`\n+              found type `14`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "b8f9827ec918730218710b046be68918eb2c08b1", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n \n fn test<const N: usize>() -> [u8; N - 1] {\n-    //~^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n+    //~^ ERROR evaluation of `test::<0>::{constant#0}` failed\n     todo!()\n }\n "}, {"sha": "bd71b49ee238bf01e1bf0519e5f45310a6a445a0", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of `test::<0_usize>::{constant#0}` failed\n+error[E0080]: evaluation of `test::<0>::{constant#0}` failed\n   --> $DIR/from-sig-fail.rs:4:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] {"}, {"sha": "7a083733a2cd18a98a175dd80c98e6dc6563f70a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -4,14 +4,14 @@ error[E0423]: expected value, found type parameter `T`\n LL | impl<T> Bar<T> for [u8; T] {}\n    |                         ^ not a value\n \n-error[E0599]: the function or associated item `foo` exists for struct `Foo<{_: usize}>`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `foo` exists for struct `Foo<_>`, but its trait bounds were not satisfied\n   --> $DIR/issue-69654.rs:17:10\n    |\n LL | struct Foo<const N: usize> {}\n    | -------------------------- function or associated item `foo` not found for this struct\n ...\n LL |     Foo::foo();\n-   |          ^^^ function or associated item cannot be called on `Foo<{_: usize}>` due to unsatisfied trait bounds\n+   |          ^^^ function or associated item cannot be called on `Foo<_>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `[u8; _]: Bar<[(); _]>`"}, {"sha": "4d0d0253f1b6d4a08206836089a6ee89fda0f6f6", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -34,21 +34,21 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n-   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+   = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n \n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n-   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+   = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "cae54df4c121099577cc8d119cd88c38eb67ff22", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,13 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//~^ ERROR evaluation of `Arr::<0_usize>::{constant#0}` failed\n+//~^ ERROR evaluation of `Arr::<0>::{constant#0}` failed\n \n-fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n-//~^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n+fn test<const N: usize>() -> Arr<N>\n+where\n+    [u8; N - 1]: Sized,\n+    //~^ ERROR evaluation of `test::<0>::{constant#0}` failed\n+{\n     todo!()\n }\n "}, {"sha": "a25fa56b7d49813399c1746b4091f7de07cec513", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,10 +1,10 @@\n-error[E0080]: evaluation of `test::<0_usize>::{constant#0}` failed\n-  --> $DIR/simple_fail.rs:7:48\n+error[E0080]: evaluation of `test::<0>::{constant#0}` failed\n+  --> $DIR/simple_fail.rs:9:10\n    |\n-LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n-   |                                                ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n+LL |     [u8; N - 1]: Sized,\n+   |          ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n-error[E0080]: evaluation of `Arr::<0_usize>::{constant#0}` failed\n+error[E0080]: evaluation of `Arr::<0>::{constant#0}` failed\n   --> $DIR/simple_fail.rs:4:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "cf70c2181395025a56e5d91ed0ec6d8ba632c01c", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -6,8 +6,8 @@ LL |     let _: [u8; 17] = foo();\n    |\n help: consider specifying the generic arguments\n    |\n-LL |     let _: [u8; 17] = foo::<17_usize, M>();\n-   |                          +++++++++++++++\n+LL |     let _: [u8; 17] = foo::<17, M>();\n+   |                          +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e0cb0b661ff6549b9e2513c3383080eb50d61c0e", "filename": "src/test/ui/const-generics/issue-66451.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -8,12 +8,12 @@ LL | |             value: 3,\n LL | |             nested: &Bar(5),\n LL | |         }\n LL | |     }> = x;\n-   | |      -   ^ expected `Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }`, found `Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }`\n+   | |      -   ^ expected `Foo { value: 3, nested: &Bar::<i32>(5) }`, found `Foo { value: 3, nested: &Bar::<i32>(4) }`\n    | |______|\n    |        expected due to this\n    |\n-   = note: expected struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }>`\n-              found struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }>`\n+   = note: expected struct `Test<Foo { value: 3, nested: &Bar::<i32>(5) }>`\n+              found struct `Test<Foo { value: 3, nested: &Bar::<i32>(4) }>`\n \n error: aborting due to previous error\n "}, {"sha": "6d9f4406504ee7b2e98d603bf06b6cc0ca1427a9", "filename": "src/test/ui/const-generics/nested-type.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,4 +1,4 @@\n-error[E0015]: cannot call non-const fn `Foo::{constant#0}::Foo::<17_usize>::value` in constants\n+error[E0015]: cannot call non-const fn `Foo::{constant#0}::Foo::<17>::value` in constants\n   --> $DIR/nested-type.rs:15:5\n    |\n LL |     Foo::<17>::value()"}, {"sha": "a3c011d927b5a4659b7e57fe77569ceea1d0c6d8", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the trait bound `A<{_: usize}>: Bar<{_: usize}>` is not satisfied\n+error[E0277]: the trait bound `A<_>: Bar<_>` is not satisfied\n   --> $DIR/unused-substs-1.rs:12:13\n    |\n LL |     let _ = A;\n-   |             ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n+   |             ^ the trait `Bar<_>` is not implemented for `A<_>`\n    |\n-   = help: the trait `Bar<N>` is implemented for `A<7_usize>`\n+   = help: the trait `Bar<N>` is implemented for `A<7>`\n note: required by a bound in `A`\n   --> $DIR/unused-substs-1.rs:9:11\n    |"}, {"sha": "486506239ddfdd24076cdd5e6e3cfb516f4c4b28", "filename": "src/test/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:14:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {2u32 + 2u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2_u32`, found `4_u32`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `4`\n    |\n-   = note: expected type `2_u32`\n-              found type `4_u32`\n+   = note: expected type `2`\n+              found type `4`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n@@ -26,8 +26,8 @@ LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'a, u16, 4_u32, _>`\n-              found struct `A<'b, u32, 2_u32, _>`\n+   = note: expected struct `A<'a, u16, 4, _>`\n+              found struct `A<'b, u32, 2, _>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6ac93a08d5d68af34f939cdc2f202b7c802e75e3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,12 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:14:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {2u32 + 2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2_u32`, found `4_u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `4`\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'_, _, 2_u32, _>`\n-              found struct `A<'_, _, 4_u32, _>`\n+   = note: expected struct `A<'_, _, 2, _>`\n+              found struct `A<'_, _, 4, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n@@ -28,8 +28,8 @@ LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'a, u16, 4_u32, _>`\n-              found struct `A<'b, u32, 2_u32, _>`\n+   = note: expected struct `A<'a, u16, 4, _>`\n+              found struct `A<'b, u32, 2, _>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3d2c76b7ed0403f20ee1485d15020329539a8b1c", "filename": "src/test/ui/consts/const-eval/issue-85155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85155.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,10 +1,10 @@\n-error[E0080]: evaluation of `post_monomorphization_error::ValidateConstImm::<2_i32, 0_i32, 1_i32>::VALID` failed\n+error[E0080]: evaluation of `post_monomorphization_error::ValidateConstImm::<2, 0, 1>::VALID` failed\n   --> $DIR/auxiliary/post_monomorphization_error.rs:7:17\n    |\n LL |         let _ = 1 / ((IMM >= MIN && IMM <= MAX) as usize);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to divide `1_usize` by zero\n \n-note: the above error was encountered while instantiating `fn post_monomorphization_error::stdarch_intrinsic::<2_i32>`\n+note: the above error was encountered while instantiating `fn post_monomorphization_error::stdarch_intrinsic::<2>`\n   --> $DIR/issue-85155.rs:19:5\n    |\n LL |     post_monomorphization_error::stdarch_intrinsic::<2>();"}, {"sha": "cb48221c67a8285036afc11c339723b4f949b395", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -104,7 +104,7 @@ error[E0366]: `Drop` impls cannot be specialized\n LL | impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `3_usize` is not a generic parameter\n+   = note: `3` is not a generic parameter\n note: use the same sequence of generic lifetime, type and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:17:1\n    |"}, {"sha": "fc0b6cc4451645a5817cfa94ef3e02b107805c60", "filename": "src/test/ui/inline-const/const-expr-generic-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -12,13 +12,13 @@ note: the above error was encountered while instantiating `fn foo::<i32>`\n LL |     foo::<i32>();\n    |     ^^^^^^^^^^^^\n \n-error[E0080]: evaluation of `bar::<0_usize>::{constant#0}` failed\n+error[E0080]: evaluation of `bar::<0>::{constant#0}` failed\n   --> $DIR/const-expr-generic-err.rs:9:13\n    |\n LL |     const { N - 1 }\n    |             ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n-note: the above error was encountered while instantiating `fn bar::<0_usize>`\n+note: the above error was encountered while instantiating `fn bar::<0>`\n   --> $DIR/const-expr-generic-err.rs:14:5\n    |\n LL |     bar::<0>();"}, {"sha": "a9d18bb6a4743a61f00eebd7b49ecd4484f929f7", "filename": "src/test/ui/lint/function-item-references.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -116,7 +116,7 @@ warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:118:22\n    |\n LL |     println!(\"{:p}\", &take_generic_array::<u32, 4>);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_array` to obtain a function pointer: `take_generic_array::<u32, 4_usize> as fn(_)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_array` to obtain a function pointer: `take_generic_array::<u32, 4> as fn(_)`\n \n warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:120:22\n@@ -128,7 +128,7 @@ warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:122:22\n    |\n LL |     println!(\"{:p}\", &multiple_generic_arrays::<u32, f32, 4, 8>);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic_arrays` to obtain a function pointer: `multiple_generic_arrays::<u32, f32, 4_usize, 8_usize> as fn(_, _)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic_arrays` to obtain a function pointer: `multiple_generic_arrays::<u32, f32, 4, 8> as fn(_, _)`\n \n warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:124:22"}, {"sha": "799ced5e9c460430be76383825c4489028653300", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -61,13 +61,13 @@ impl Other {\n     fn other(&self) {}\n }\n \n-struct Struct<T>{\n-    _phatom: PhantomData<T>\n+struct Struct<T> {\n+    _phatom: PhantomData<T>,\n }\n \n impl<T> Default for Struct<T> {\n     fn default() -> Self {\n-        Self{ _phatom: PhantomData }\n+        Self { _phatom: PhantomData }\n     }\n }\n \n@@ -76,9 +76,9 @@ impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n }\n \n fn main() {\n-    let point_f64 = Point{ x: 1_f64, y: 1_f64};\n+    let point_f64 = Point { x: 1_f64, y: 1_f64 };\n     let d = point_f64.distance();\n-    let point_i32 = Point{ x: 1_i32, y: 1_i32};\n+    let point_i32 = Point { x: 1_i32, y: 1_i32 };\n     let d = point_i32.distance();\n     //~^ ERROR no method named `distance` found for struct `Point<i32>\n     let d = point_i32.other();\n@@ -92,9 +92,9 @@ fn main() {\n     wrapper.other();\n     //~^ ERROR no method named `other` found for struct `Wrapper\n     let boolean = true;\n-    let wrapper = Wrapper2::<'_, _, 3> {x: &boolean};\n+    let wrapper = Wrapper2::<'_, _, 3> { x: &boolean };\n     wrapper.method();\n-    //~^ ERROR no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>\n+    //~^ ERROR no method named `method` found for struct `Wrapper2<'_, bool, 3>\n     wrapper.other();\n     //~^ ERROR no method named `other` found for struct `Wrapper2\n     let a = vec![1, 2, 3];"}, {"sha": "fc42d1a4dcd08136374b9ab6203cd4de854dbd23", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -50,14 +50,14 @@ LL | struct Wrapper<T>(T);\n LL |     wrapper.other();\n    |             ^^^^^ method not found in `Wrapper<bool>`\n \n-error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>` in the current scope\n+error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3>` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:96:13\n    |\n LL | struct Wrapper2<'a, T, const C: usize> {\n    | -------------------------------------- method `method` not found for this struct\n ...\n LL |     wrapper.method();\n-   |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+   |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3>`\n    |\n    = note: the method was found for\n            - `Wrapper2<'a, i8, C>`\n@@ -71,7 +71,7 @@ LL | struct Wrapper2<'a, T, const C: usize> {\n    | -------------------------------------- method `other` not found for this struct\n ...\n LL |     wrapper.other();\n-   |             ^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+   |             ^^^^^ method not found in `Wrapper2<'_, bool, 3>`\n \n error[E0599]: no method named `not_found` found for struct `Vec<{integer}>` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:101:7\n@@ -82,7 +82,7 @@ LL |     a.not_found();\n error[E0599]: the method `method` exists for struct `Struct<f64>`, but its trait bounds were not satisfied\n   --> $DIR/method-not-found-generic-arg-elision.rs:104:7\n    |\n-LL | struct Struct<T>{\n+LL | struct Struct<T> {\n    | ---------------- method `method` not found for this struct\n ...\n LL |     s.method();"}, {"sha": "81e641612ce00b72a10c26c55477e424fa1d0c77", "filename": "src/test/ui/simd/intrinsic/generic-shuffle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,10 +1,10 @@\n-error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return type of length 2, found `Simd<u32, 4_usize>` with length 4\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return type of length 2, found `Simd<u32, 4>` with length 4\n   --> $DIR/generic-shuffle.rs:24:31\n    |\n LL |         let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n    |                               ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return element type `u32` (element of input `Simd<u32, 4_usize>`), found `Simd<f32, 2_usize>` with element type `f32`\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return element type `u32` (element of input `Simd<u32, 4>`), found `Simd<f32, 2>` with element type `f32`\n   --> $DIR/generic-shuffle.rs:27:31\n    |\n LL |         let _: Simd<f32, 2> = simd_shuffle(v, v, I);"}, {"sha": "7249914256cd97ec2e6efbfaf9b3e4064e2b3a08", "filename": "src/test/ui/simd/libm_no_std_cant_float.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Flibm_no_std_cant_float.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,37 +2,37 @@ error[E0599]: no method named `ceil` found for struct `Simd` in the current scop\n   --> $DIR/libm_no_std_cant_float.rs:14:17\n    |\n LL |     let _xc = x.ceil();\n-   |                 ^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                 ^^^^ method not found in `Simd<f32, 4>`\n \n error[E0599]: no method named `floor` found for struct `Simd` in the current scope\n   --> $DIR/libm_no_std_cant_float.rs:15:17\n    |\n LL |     let _xf = x.floor();\n-   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                 ^^^^^ method not found in `Simd<f32, 4>`\n \n error[E0599]: no method named `round` found for struct `Simd` in the current scope\n   --> $DIR/libm_no_std_cant_float.rs:16:17\n    |\n LL |     let _xr = x.round();\n-   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                 ^^^^^ method not found in `Simd<f32, 4>`\n \n error[E0599]: no method named `trunc` found for struct `Simd` in the current scope\n   --> $DIR/libm_no_std_cant_float.rs:17:17\n    |\n LL |     let _xt = x.trunc();\n-   |                 ^^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                 ^^^^^ method not found in `Simd<f32, 4>`\n \n error[E0599]: no method named `mul_add` found for struct `Simd` in the current scope\n   --> $DIR/libm_no_std_cant_float.rs:18:19\n    |\n LL |     let _xfma = x.mul_add(x, x);\n-   |                   ^^^^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                   ^^^^^^^ method not found in `Simd<f32, 4>`\n \n error[E0599]: no method named `sqrt` found for struct `Simd` in the current scope\n   --> $DIR/libm_no_std_cant_float.rs:19:20\n    |\n LL |     let _xsqrt = x.sqrt();\n-   |                    ^^^^ method not found in `Simd<f32, 4_usize>`\n+   |                    ^^^^ method not found in `Simd<f32, 4>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2bf6641e9c91c0007e908b05568a4cec332c0a79", "filename": "src/test/ui/simd/type-generic-monomorphisation-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-// error-pattern:monomorphising SIMD type `Simd<0_usize>` of zero length\n+// error-pattern:monomorphising SIMD type `Simd<0>` of zero length\n \n #[repr(simd)]\n struct Simd<const N: usize>([f32; N]);"}, {"sha": "b334b1f4b589328f349fcfe480af629d5ef6f08a", "filename": "src/test/ui/simd/type-generic-monomorphisation-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,4 +1,4 @@\n-error: monomorphising SIMD type `Simd<0_usize>` of zero length\n+error: monomorphising SIMD type `Simd<0>` of zero length\n \n error: aborting due to previous error\n "}, {"sha": "a7dc482f3cb1d5932e4d99a237d3a1d2c7c82271", "filename": "src/test/ui/simd/type-generic-monomorphisation-oversized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-// error-pattern:monomorphising SIMD type `Simd<65536_usize>` of length greater than 32768\n+// error-pattern:monomorphising SIMD type `Simd<65536>` of length greater than 32768\n \n #[repr(simd)]\n struct Simd<const N: usize>([f32; N]);"}, {"sha": "a2dba1222eecd4e3772b1f39ee6981299b1f419d", "filename": "src/test/ui/simd/type-generic-monomorphisation-oversized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -1,4 +1,4 @@\n-error: monomorphising SIMD type `Simd<65536_usize>` of length greater than 32768\n+error: monomorphising SIMD type `Simd<65536>` of length greater than 32768\n \n error: aborting due to previous error\n "}, {"sha": "e7565525ad3387396ac5c7f9d2efd85ae366943f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=c39826e3fac3a3d63a75355d87b6a62ff3cbb8cb", "patch": "@@ -25,7 +25,7 @@ error: non-defining opaque type use in defining scope\n LL |     7u32\n    |     ^^^^\n    |\n-note: used non-generic constant `123_usize` for generic parameter\n+note: used non-generic constant `123` for generic parameter\n   --> $DIR/generic_nondefining_use.rs:11:15\n    |\n LL | type OneConst<const X: usize> = impl Debug;"}]}