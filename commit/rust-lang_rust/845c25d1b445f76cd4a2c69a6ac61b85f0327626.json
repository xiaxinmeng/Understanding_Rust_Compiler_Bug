{"sha": "845c25d1b445f76cd4a2c69a6ac61b85f0327626", "node_id": "C_kwDOAAsO6NoAKDg0NWMyNWQxYjQ0NWY3NmNkNGEyYzY5YTZhYzYxYjg1ZjAzMjc2MjY", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-11-12T19:35:42Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-11-14T00:50:29Z"}, "message": "Generate documentation in rustc `rustc_index::newtype_index` macro\n\nThe macro now documents all generated items. Documentation notes\npossible panics and unsafety.", "tree": {"sha": "ae28d89bfad0fd492461b17622efa305ae75ed7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae28d89bfad0fd492461b17622efa305ae75ed7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845c25d1b445f76cd4a2c69a6ac61b85f0327626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845c25d1b445f76cd4a2c69a6ac61b85f0327626", "html_url": "https://github.com/rust-lang/rust/commit/845c25d1b445f76cd4a2c69a6ac61b85f0327626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845c25d1b445f76cd4a2c69a6ac61b85f0327626/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "html_url": "https://github.com/rust-lang/rust/commit/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "55ccfd0ad2380665a200acd95659411e0ecefc55", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/845c25d1b445f76cd4a2c69a6ac61b85f0327626/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845c25d1b445f76cd4a2c69a6ac61b85f0327626/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=845c25d1b445f76cd4a2c69a6ac61b85f0327626", "patch": "@@ -118,32 +118,54 @@ macro_rules! newtype_index {\n         }\n \n         impl $type {\n+            /// Maximum value the index can take, as a `u32`.\n             $v const MAX_AS_U32: u32 = $max;\n \n+            /// Maximum value the index can take.\n             $v const MAX: Self = Self::from_u32($max);\n \n+            /// Creates a new index from a given `usize`.\n+            ///\n+            /// # Panics\n+            ///\n+            /// Will panic if `value` exceeds `MAX`.\n             #[inline]\n             $v const fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n+                // SAFETY: We just checked that `value <= max`.\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n+            /// Creates a new index from a given `u32`.\n+            ///\n+            /// # Panics\n+            ///\n+            /// Will panic if `value` exceeds `MAX`.\n             #[inline]\n             $v const fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n+                // SAFETY: We just checked that `value <= max`.\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }\n             }\n \n+            /// Creates a new index from a given `u32`.\n+            ///\n+            /// # Safety\n+            ///\n+            /// The provided value must be less than or equal to the maximum value for the newtype.\n+            /// Providing a value outside this range is undefined due to layout restrictions.\n+            ///\n+            /// Prefer using `from_u32`.\n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n                 Self { private: value }\n             }\n \n-            /// Extracts the value of this index as an integer.\n+            /// Extracts the value of this index as a `usize`.\n             #[inline]\n             $v const fn index(self) -> usize {\n                 self.as_usize()"}]}