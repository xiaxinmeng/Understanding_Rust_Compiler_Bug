{"sha": "f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODNhM2VjMTNmZGQyYzdiNzg2ODNiZDdhOGQzMDE5ZGNiOWEwNTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-11T23:55:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-11T23:55:14Z"}, "message": "Rollup merge of #82860 - LeSeulArtichaut:unpretty-thir, r=spastorino\n\nAdd `-Z unpretty` flag for the THIR\n\nThis adds a new perma-unstable flag, `-Zunpretty=thir-tree`, that dumps the raw THIR tree for each body in the crate.\n\nImplements the THIR part of MCP rust-lang/compiler-team#408, helps with rust-lang/rustc-dev-guide#1062.\nDepends on #82495, blocked on that. Only the two last commits are added by this PR.\nr? ```@spastorino``` cc ```@estebank```", "tree": {"sha": "18b7e67ab17449b56ea222dd7796c6befa50fc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b7e67ab17449b56ea222dd7796c6befa50fc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSq3jCRBK7hj4Ov3rIwAAdHIIAA57r6nnyDCeLbe5Tzor4O1A\nI8e+C4QRSI4n758d3dLzjroOELAF3x2m6cz67z2nMYidjIQA8+8M5fBvojw7Yzyu\nogwvwHzT/Q51rRywYhOOA8dd9BDfFRBLLwDe9YW6ku1w2iuYGg9f3QGlxmT16lOW\nyVHvkhHTRq/oD4ss9GLjRQK5Ujc2TK0fCL2sHptVbgPBSQpE3O7xDzVPaKlZyu1H\nhhrj6ewvVPE7t9fGSR6TKUyZ27EJtUdJ/Fu3K6qO4LExp0UKJH3Cc8jp25T/SzA7\n6SUYmAkeVMypKxSTG8LVNAjAlnANx6lTyjYUxBsmi6Zb0t6IqqETffI0jFdf3mE=\n=nava\n-----END PGP SIGNATURE-----\n", "payload": "tree 18b7e67ab17449b56ea222dd7796c6befa50fc68\nparent a98dc9b3e7d9f4f6c5a3ef850aa6a08c28a55ce1\nparent 6bf41476465278b82ad875ee15d88f371e51b1dc\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615506914 +0900\ncommitter GitHub <noreply@github.com> 1615506914 +0900\n\nRollup merge of #82860 - LeSeulArtichaut:unpretty-thir, r=spastorino\n\nAdd `-Z unpretty` flag for the THIR\n\nThis adds a new perma-unstable flag, `-Zunpretty=thir-tree`, that dumps the raw THIR tree for each body in the crate.\n\nImplements the THIR part of MCP rust-lang/compiler-team#408, helps with rust-lang/rustc-dev-guide#1062.\nDepends on #82495, blocked on that. Only the two last commits are added by this PR.\nr? ```@spastorino``` cc ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "html_url": "https://github.com/rust-lang/rust/commit/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a98dc9b3e7d9f4f6c5a3ef850aa6a08c28a55ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98dc9b3e7d9f4f6c5a3ef850aa6a08c28a55ce1", "html_url": "https://github.com/rust-lang/rust/commit/a98dc9b3e7d9f4f6c5a3ef850aa6a08c28a55ce1"}, {"sha": "6bf41476465278b82ad875ee15d88f371e51b1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf41476465278b82ad875ee15d88f371e51b1dc", "html_url": "https://github.com/rust-lang/rust/commit/6bf41476465278b82ad875ee15d88f371e51b1dc"}], "stats": {"total": 149, "additions": 87, "deletions": 62}, "files": [{"sha": "2c9eaebb5fdc2f7ce35bd3bad8ad0a5c7dd22c3b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -3870,13 +3870,15 @@ dependencies = [\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_mir\",\n+ \"rustc_mir_build\",\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_typeck\",\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\","}, {"sha": "c521f2041d8919ceadb8c84242e951c5fbc8ead0", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -34,6 +34,8 @@ rustc_interface = { path = \"../rustc_interface\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_mir_build = { path = \"../rustc_mir_build\" }\n+rustc_typeck = { path = \"../rustc_typeck\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "5512bd74453e54eace3b0bd17fc11847eb464f38", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -9,12 +9,14 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n+use rustc_mir_build::thir;\n use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n+use std::fmt::Write;\n use std::path::Path;\n \n pub use self::PpMode::*;\n@@ -469,6 +471,21 @@ pub fn print_after_hir_lowering<'tcx>(\n             format!(\"{:#?}\", krate)\n         }),\n \n+        ThirTree => {\n+            let mut out = String::new();\n+            abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n+            debug!(\"pretty printing THIR tree\");\n+            for did in tcx.body_owners() {\n+                let hir = tcx.hir();\n+                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(did)));\n+                let arena = thir::Arena::default();\n+                let thir =\n+                    thir::build_thir(tcx, ty::WithOptConstParam::unknown(did), &arena, &body.value);\n+                let _ = writeln!(out, \"{:?}:\\n{:#?}\\n\", did, thir);\n+            }\n+            out\n+        }\n+\n         _ => unreachable!(),\n     };\n "}, {"sha": "9c83c0d09aa8e3a6bad3758077ad3b0b002d2870", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -1,7 +1,6 @@\n use crate::build;\n use crate::build::scope::DropKind;\n-use crate::thir::cx::build_thir;\n-use crate::thir::{Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n+use crate::thir::{build_thir, Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;"}, {"sha": "b1591d8ba35f4e62ef6937d0b9eaa4b1fa1b24c6", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_middle;\n \n mod build;\n mod lints;\n-mod thir;\n+pub mod thir;\n \n use rustc_middle::ty::query::Providers;\n "}, {"sha": "fe8a58c00887265989de8f77c1c0defb67581f47", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-crate fn build_thir<'thir, 'tcx>(\n+pub fn build_thir<'thir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n     arena: &'thir Arena<'thir, 'tcx>,"}, {"sha": "0c9df32c1880329dd2b41f0505553a548621fa4e", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -18,50 +18,51 @@ use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n \n crate mod constant;\n+\n crate mod cx;\n+pub use cx::build_thir;\n \n crate mod pattern;\n-crate use self::pattern::PatTyProj;\n-crate use self::pattern::{BindingMode, FieldPat, Pat, PatKind, PatRange};\n+pub use self::pattern::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange, PatTyProj};\n \n mod arena;\n-crate use arena::Arena;\n+pub use arena::Arena;\n \n mod util;\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LintLevel {\n+pub enum LintLevel {\n     Inherited,\n     Explicit(hir::HirId),\n }\n \n #[derive(Debug)]\n-crate struct Block<'thir, 'tcx> {\n-    crate targeted_by_break: bool,\n-    crate region_scope: region::Scope,\n-    crate opt_destruction_scope: Option<region::Scope>,\n-    crate span: Span,\n-    crate stmts: &'thir [Stmt<'thir, 'tcx>],\n-    crate expr: Option<&'thir Expr<'thir, 'tcx>>,\n-    crate safety_mode: BlockSafety,\n+pub struct Block<'thir, 'tcx> {\n+    pub targeted_by_break: bool,\n+    pub region_scope: region::Scope,\n+    pub opt_destruction_scope: Option<region::Scope>,\n+    pub span: Span,\n+    pub stmts: &'thir [Stmt<'thir, 'tcx>],\n+    pub expr: Option<&'thir Expr<'thir, 'tcx>>,\n+    pub safety_mode: BlockSafety,\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum BlockSafety {\n+pub enum BlockSafety {\n     Safe,\n     ExplicitUnsafe(hir::HirId),\n     PushUnsafe,\n     PopUnsafe,\n }\n \n #[derive(Debug)]\n-crate struct Stmt<'thir, 'tcx> {\n-    crate kind: StmtKind<'thir, 'tcx>,\n-    crate opt_destruction_scope: Option<region::Scope>,\n+pub struct Stmt<'thir, 'tcx> {\n+    pub kind: StmtKind<'thir, 'tcx>,\n+    pub opt_destruction_scope: Option<region::Scope>,\n }\n \n #[derive(Debug)]\n-crate enum StmtKind<'thir, 'tcx> {\n+pub enum StmtKind<'thir, 'tcx> {\n     Expr {\n         /// scope for this statement; may be used as lifetime of temporaries\n         scope: region::Scope,\n@@ -111,23 +112,23 @@ rustc_data_structures::static_assert_size!(Expr<'_, '_>, 144);\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n #[derive(Debug)]\n-crate struct Expr<'thir, 'tcx> {\n+pub struct Expr<'thir, 'tcx> {\n     /// type of this expression\n-    crate ty: Ty<'tcx>,\n+    pub ty: Ty<'tcx>,\n \n     /// lifetime of this expression if it should be spilled into a\n     /// temporary; should be None only if in a constant context\n-    crate temp_lifetime: Option<region::Scope>,\n+    pub temp_lifetime: Option<region::Scope>,\n \n     /// span of the expression in the source\n-    crate span: Span,\n+    pub span: Span,\n \n     /// kind of expression\n-    crate kind: ExprKind<'thir, 'tcx>,\n+    pub kind: ExprKind<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate enum ExprKind<'thir, 'tcx> {\n+pub enum ExprKind<'thir, 'tcx> {\n     Scope {\n         region_scope: region::Scope,\n         lint_level: LintLevel,\n@@ -316,41 +317,41 @@ crate enum ExprKind<'thir, 'tcx> {\n }\n \n #[derive(Debug)]\n-crate struct FieldExpr<'thir, 'tcx> {\n-    crate name: Field,\n-    crate expr: &'thir Expr<'thir, 'tcx>,\n+pub struct FieldExpr<'thir, 'tcx> {\n+    pub name: Field,\n+    pub expr: &'thir Expr<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate struct FruInfo<'thir, 'tcx> {\n-    crate base: &'thir Expr<'thir, 'tcx>,\n-    crate field_types: &'thir [Ty<'tcx>],\n+pub struct FruInfo<'thir, 'tcx> {\n+    pub base: &'thir Expr<'thir, 'tcx>,\n+    pub field_types: &'thir [Ty<'tcx>],\n }\n \n #[derive(Debug)]\n-crate struct Arm<'thir, 'tcx> {\n-    crate pattern: Pat<'tcx>,\n-    crate guard: Option<Guard<'thir, 'tcx>>,\n-    crate body: &'thir Expr<'thir, 'tcx>,\n-    crate lint_level: LintLevel,\n-    crate scope: region::Scope,\n-    crate span: Span,\n+pub struct Arm<'thir, 'tcx> {\n+    pub pattern: Pat<'tcx>,\n+    pub guard: Option<Guard<'thir, 'tcx>>,\n+    pub body: &'thir Expr<'thir, 'tcx>,\n+    pub lint_level: LintLevel,\n+    pub scope: region::Scope,\n+    pub span: Span,\n }\n \n #[derive(Debug)]\n-crate enum Guard<'thir, 'tcx> {\n+pub enum Guard<'thir, 'tcx> {\n     If(&'thir Expr<'thir, 'tcx>),\n     IfLet(Pat<'tcx>, &'thir Expr<'thir, 'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LogicalOp {\n+pub enum LogicalOp {\n     And,\n     Or,\n }\n \n #[derive(Debug)]\n-crate enum InlineAsmOperand<'thir, 'tcx> {\n+pub enum InlineAsmOperand<'thir, 'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n         expr: &'thir Expr<'thir, 'tcx>,"}, {"sha": "9ac79a37ac6903dcbf3e72ffbb8fb9d87bb5d2b0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -40,22 +40,22 @@ crate enum PatternError {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate enum BindingMode {\n+pub enum BindingMode {\n     ByValue,\n     ByRef(BorrowKind),\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct FieldPat<'tcx> {\n-    crate field: Field,\n-    crate pattern: Pat<'tcx>,\n+pub struct FieldPat<'tcx> {\n+    pub field: Field,\n+    pub pattern: Pat<'tcx>,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct Pat<'tcx> {\n-    crate ty: Ty<'tcx>,\n-    crate span: Span,\n-    crate kind: Box<PatKind<'tcx>>,\n+pub struct Pat<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub span: Span,\n+    pub kind: Box<PatKind<'tcx>>,\n }\n \n impl<'tcx> Pat<'tcx> {\n@@ -65,8 +65,8 @@ impl<'tcx> Pat<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatTyProj<'tcx> {\n-    crate user_ty: CanonicalUserType<'tcx>,\n+pub struct PatTyProj<'tcx> {\n+    pub user_ty: CanonicalUserType<'tcx>,\n }\n \n impl<'tcx> PatTyProj<'tcx> {\n@@ -92,8 +92,8 @@ impl<'tcx> PatTyProj<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct Ascription<'tcx> {\n-    crate user_ty: PatTyProj<'tcx>,\n+pub struct Ascription<'tcx> {\n+    pub user_ty: PatTyProj<'tcx>,\n     /// Variance to use when relating the type `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n@@ -112,12 +112,12 @@ crate struct Ascription<'tcx> {\n     /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n     /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n     /// of the old type-check for now. See #57280 for details.\n-    crate variance: ty::Variance,\n-    crate user_ty_span: Span,\n+    pub variance: ty::Variance,\n+    pub user_ty_span: Span,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate enum PatKind<'tcx> {\n+pub enum PatKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n@@ -195,10 +195,10 @@ crate enum PatKind<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatRange<'tcx> {\n-    crate lo: &'tcx ty::Const<'tcx>,\n-    crate hi: &'tcx ty::Const<'tcx>,\n-    crate end: RangeEnd,\n+pub struct PatRange<'tcx> {\n+    pub lo: &'tcx ty::Const<'tcx>,\n+    pub hi: &'tcx ty::Const<'tcx>,\n+    pub end: RangeEnd,\n }\n \n impl<'tcx> fmt::Display for Pat<'tcx> {"}, {"sha": "c1be90efc7299773393741749bdbf0096279b5d1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f183a3ec13fdd2c7b78683bd7a8d3019dcb9a057", "patch": "@@ -2074,6 +2074,7 @@ fn parse_pretty(\n             (\"hir,identified\", true) => Hir(PpHirMode::Identified),\n             (\"hir,typed\", true) => Hir(PpHirMode::Typed),\n             (\"hir-tree\", true) => HirTree,\n+            (\"thir-tree\", true) => ThirTree,\n             (\"mir\", true) => Mir,\n             (\"mir-cfg\", true) => MirCFG,\n             _ => {\n@@ -2265,6 +2266,8 @@ pub enum PpMode {\n     Hir(PpHirMode),\n     /// `-Zunpretty=hir-tree`\n     HirTree,\n+    /// `-Zunpretty=thir-tree`\n+    ThirTree,\n     /// `-Zunpretty=mir`\n     Mir,\n     /// `-Zunpretty=mir-cfg`\n@@ -2282,6 +2285,7 @@ impl PpMode {\n             | AstTree(PpAstTreeMode::Expanded)\n             | Hir(_)\n             | HirTree\n+            | ThirTree\n             | Mir\n             | MirCFG => true,\n         }"}]}