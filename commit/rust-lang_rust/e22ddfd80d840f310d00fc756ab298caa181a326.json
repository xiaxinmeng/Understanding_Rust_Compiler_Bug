{"sha": "e22ddfd80d840f310d00fc756ab298caa181a326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmRkZmQ4MGQ4NDBmMzEwZDAwZmM3NTZhYjI5OGNhYTE4MWEzMjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-05T11:17:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Don't print leading zeros on hex dumps constants", "tree": {"sha": "28df225f92abcb058885acd32521f160678434a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28df225f92abcb058885acd32521f160678434a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22ddfd80d840f310d00fc756ab298caa181a326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22ddfd80d840f310d00fc756ab298caa181a326", "html_url": "https://github.com/rust-lang/rust/commit/e22ddfd80d840f310d00fc756ab298caa181a326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22ddfd80d840f310d00fc756ab298caa181a326/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937", "html_url": "https://github.com/rust-lang/rust/commit/4ddb4bdaad8c0359e18ffcfe769020d0b20b1937"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "86791ece5fcf11586bcaa3c78377ec30d042215d", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e22ddfd80d840f310d00fc756ab298caa181a326", "patch": "@@ -982,8 +982,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"{{null reference to \"), print(ty), write(\"}}\"))\n             }\n             (Scalar::Raw { data, .. }, ty::Ref(..)) | (Scalar::Raw { data, .. }, ty::RawPtr(_)) => {\n-                let pointer_width = self.tcx().data_layout.pointer_size.bytes();\n-                p!(write(\"0x{:01$x}\", data, pointer_width as usize * 2))\n+                p!(write(\"0x{:x}\", data))\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n                 let instance = {\n@@ -995,9 +994,9 @@ pub trait PrettyPrinter<'tcx>:\n             // For zsts just print their type as their value gives no extra information\n             (Scalar::Raw { size: 0, .. }, _) => p!(print(ty)),\n             // Nontrivial types with scalar bit representation\n-            (Scalar::Raw { data, size }, _) => {\n+            (Scalar::Raw { data, .. }, _) => {\n                 let print = |mut this: Self| {\n-                    write!(this, \"0x{:01$x}\", data, size as usize * 2)?;\n+                    write!(this, \"transmute(0x{:x})\", data)?;\n                     Ok(this)\n                 };\n                 self = if print_ty {"}, {"sha": "587f81f7f879ee4e23f14eaccb37b125a9f523d4", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=e22ddfd80d840f310d00fc756ab298caa181a326", "patch": "@@ -31,7 +31,7 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const {0x01: std::option::Option<bool>};\n+//      _3 = const {transmute(0x1): std::option::Option<bool>};\n //      _4 = const 1isize;\n //      switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1];\n //  }"}, {"sha": "730314a7888201f5aa5e89069eadd6b0014b1ef8", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=e22ddfd80d840f310d00fc756ab298caa181a326", "patch": "@@ -1,18 +1,18 @@\n // compile-flags: -C overflow-checks=no\n \n-fn use_zst(_: ((), ())) { }\n+fn use_zst(_: ((), ())) {}\n \n struct Temp {\n-    x: u8\n+    x: u8,\n }\n \n-fn use_u8(_: u8) { }\n+fn use_u8(_: u8) {}\n \n fn main() {\n     let ((), ()) = ((), ());\n     use_zst(((), ()));\n \n-    use_u8((Temp { x : 40 }).x + 2);\n+    use_u8((Temp { x: 40 }).x + 2);\n }\n \n // END RUST SOURCE\n@@ -56,7 +56,7 @@ fn main() {\n //   StorageLive(_8);\n //   StorageLive(_10);\n //   StorageLive(_11);\n-//   _11 = const {0x28 : Temp};\n+//   _11 = const {transmute(0x28) : Temp};\n //   _10 = const 40u8;\n //   StorageDead(_10);\n //   _8 = const use_u8(const 42u8) -> bb2;"}, {"sha": "f0349f469626f971884526e77420700385f9c306", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=e22ddfd80d840f310d00fc756ab298caa181a326", "patch": "@@ -1,12 +1,9 @@\n-// normalize-stderr-64bit \"0x00000000\" -> \"0x[PREFIX]\"\n-// normalize-stderr-32bit \"0x\" -> \"0x[PREFIX]\"\n-\n #![feature(const_generics, const_compare_raw_pointers)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n struct Const<const P: *const u32>;\n \n fn main() {\n-    let _: Const<{15 as *const _}> = Const::<{10 as *const _}>; //~ mismatched types\n-    let _: Const<{10 as *const _}> = Const::<{10 as *const _}>;\n+    let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>; //~ mismatched types\n+    let _: Const<{ 10 as *const _ }> = Const::<{ 10 as *const _ }>;\n }"}, {"sha": "7bf2616fea29a4ab3f35573b08e34fcbde0e00f3", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22ddfd80d840f310d00fc756ab298caa181a326/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=e22ddfd80d840f310d00fc756ab298caa181a326", "patch": "@@ -1,21 +1,21 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/raw-ptr-const-param.rs:4:12\n+  --> $DIR/raw-ptr-const-param.rs:1:12\n    |\n LL | #![feature(const_generics, const_compare_raw_pointers)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/raw-ptr-const-param.rs:10:38\n+  --> $DIR/raw-ptr-const-param.rs:7:40\n    |\n-LL |     let _: Const<{15 as *const _}> = Const::<{10 as *const _}>;\n-   |            -----------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `0x[PREFIX]0000000f`, found `0x[PREFIX]0000000a`\n+LL |     let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n+   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `0xf`, found `0xa`\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `Const<0x[PREFIX]0000000f>`\n-              found struct `Const<0x[PREFIX]0000000a>`\n+   = note: expected struct `Const<0xf>`\n+              found struct `Const<0xa>`\n \n error: aborting due to previous error\n "}]}