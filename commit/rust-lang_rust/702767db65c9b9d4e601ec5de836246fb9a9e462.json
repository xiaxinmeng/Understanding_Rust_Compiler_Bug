{"sha": "702767db65c9b9d4e601ec5de836246fb9a9e462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjc2N2RiNjVjOWI5ZDRlNjAxZWM1ZGU4MzYyNDZmYjlhOWU0NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-03T19:16:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-03T19:16:17Z"}, "message": "auto merge of #10219 : alexcrichton/rust/drop-invoke, r=pcwalton\n\nThis commit changes drop glue generated for structs to use the invoke LLVM\r\ninstruction instead of call. What this means is that if the user destructor\r\ntriggers an unwinding, then the fields of the struct will still ge dropped.\r\n\r\nThis is not an attempt to support failing while failing, as that's mostly a\r\nproblem of runtime support. This is more of an issue of soundness in making sure\r\nthat destructors are appropriately run. The test included fails before this\r\ncommit, and only has one call to fail!(), yet it doesn't destroy its struct\r\nfields.", "tree": {"sha": "18c728968150eedb8b39fece9f3dfb7c5965a77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c728968150eedb8b39fece9f3dfb7c5965a77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/702767db65c9b9d4e601ec5de836246fb9a9e462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/702767db65c9b9d4e601ec5de836246fb9a9e462", "html_url": "https://github.com/rust-lang/rust/commit/702767db65c9b9d4e601ec5de836246fb9a9e462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/702767db65c9b9d4e601ec5de836246fb9a9e462/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc079e1596bb5fd7b601fe1b605c8f30326ee748", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc079e1596bb5fd7b601fe1b605c8f30326ee748", "html_url": "https://github.com/rust-lang/rust/commit/dc079e1596bb5fd7b601fe1b605c8f30326ee748"}, {"sha": "e35cd962a6971a98436da1281c91507a3db07104", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35cd962a6971a98436da1281c91507a3db07104", "html_url": "https://github.com/rust-lang/rust/commit/e35cd962a6971a98436da1281c91507a3db07104"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "02b44907f336adbe09cb89d8193682ee35b80bd2", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/702767db65c9b9d4e601ec5de836246fb9a9e462/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702767db65c9b9d4e601ec5de836246fb9a9e462/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=702767db65c9b9d4e601ec5de836246fb9a9e462", "patch": "@@ -395,39 +395,11 @@ pub fn trans_struct_drop_flag(bcx: @mut Block, t: ty::t, v0: ValueRef, dtor_did:\n     let repr = adt::represent_type(bcx.ccx(), t);\n     let drop_flag = adt::trans_drop_flag_ptr(bcx, repr, v0);\n     do with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) |cx| {\n-        let mut bcx = cx;\n-\n-        // Find and call the actual destructor\n-        let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did,\n-                                     class_did, substs.tps.clone());\n-\n-        // The second argument is the \"self\" argument for drop\n-        let params = unsafe {\n-            let ty = Type::from_ref(llvm::LLVMTypeOf(dtor_addr));\n-            ty.element_type().func_params()\n-        };\n-\n-        // Class dtors have no explicit args, so the params should\n-        // just consist of the environment (self)\n-        assert_eq!(params.len(), 1);\n-\n-        let self_arg = PointerCast(bcx, v0, params[0]);\n-        let args = ~[self_arg];\n-\n-        Call(bcx, dtor_addr, args, []);\n-\n-        // Drop the fields\n-        let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n-        for (i, fld) in field_tys.iter().enumerate() {\n-            let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n-            bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n-        }\n-\n-        bcx\n+        trans_struct_drop(cx, t, v0, dtor_did, class_did, substs)\n     }\n }\n \n-pub fn trans_struct_drop(mut bcx: @mut Block, t: ty::t, v0: ValueRef, dtor_did: ast::DefId,\n+pub fn trans_struct_drop(bcx: @mut Block, t: ty::t, v0: ValueRef, dtor_did: ast::DefId,\n                          class_did: ast::DefId, substs: &ty::substs) -> @mut Block {\n     let repr = adt::represent_type(bcx.ccx(), t);\n \n@@ -445,19 +417,24 @@ pub fn trans_struct_drop(mut bcx: @mut Block, t: ty::t, v0: ValueRef, dtor_did:\n     // just consist of the environment (self)\n     assert_eq!(params.len(), 1);\n \n-    let self_arg = PointerCast(bcx, v0, params[0]);\n-    let args = ~[self_arg];\n+    // Be sure to put all of the fields into a scope so we can use an invoke\n+    // instruction to call the user destructor but still call the field\n+    // destructors if the user destructor fails.\n+    do with_scope(bcx, None, \"field drops\") |bcx| {\n+        let self_arg = PointerCast(bcx, v0, params[0]);\n+        let args = ~[self_arg];\n \n-    Call(bcx, dtor_addr, args, []);\n+        // Add all the fields as a value which needs to be cleaned at the end of\n+        // this scope.\n+        let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n+        for (i, fld) in field_tys.iter().enumerate() {\n+            let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n+            add_clean(bcx, llfld_a, fld.mt.ty);\n+        }\n \n-    // Drop the fields\n-    let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n-    for (i, fld) in field_tys.iter().enumerate() {\n-        let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n-        bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n+        let (_, bcx) = invoke(bcx, dtor_addr, args, []);\n+        bcx\n     }\n-\n-    bcx\n }\n \n pub fn make_drop_glue(bcx: @mut Block, v0: ValueRef, t: ty::t) -> @mut Block {"}, {"sha": "7c6bb1fa379b4d1b5c51ddb265fb7e1064ad6c5e", "filename": "src/test/run-pass/fail-in-dtor-drops-fields.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/702767db65c9b9d4e601ec5de836246fb9a9e462/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702767db65c9b9d4e601ec5de836246fb9a9e462/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs?ref=702767db65c9b9d4e601ec5de836246fb9a9e462", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::task;\n+\n+static mut dropped: bool = false;\n+\n+struct A {\n+    b: B,\n+}\n+\n+struct B {\n+    foo: int,\n+}\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        fail!()\n+    }\n+}\n+\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        unsafe { dropped = true; }\n+    }\n+}\n+\n+pub fn main() {\n+    let ret = do task::try {\n+        let _a = A { b: B { foo: 3 } };\n+    };\n+    assert!(ret.is_err());\n+    unsafe { assert!(dropped); }\n+}\n+"}]}