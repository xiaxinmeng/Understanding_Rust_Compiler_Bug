{"sha": "cd2619be670a774784138584077a515f942acaaf", "node_id": "C_kwDOAAsO6NoAKGNkMjYxOWJlNjcwYTc3NDc4NDEzODU4NDA3N2E1MTVmOTQyYWNhYWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:30:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:30:47Z"}, "message": "Rollup merge of #100104 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@notriddle``", "tree": {"sha": "829bb62a7748c4810cde3a9c0e539552ebd0a5f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829bb62a7748c4810cde3a9c0e539552ebd0a5f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2619be670a774784138584077a515f942acaaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tr3CRBK7hj4Ov3rIwAAD2oIALKQDBqtU17CoBNKAZ0q+10u\nhWUxAF3KtaCOaSsnWGTIZIx0XUO2XDhZzxgQKSHAos76HsMqYzpc5iSiLL95743b\nZqu69SGBHRWu5XT8Rrx4dZBNjvT3oguhoZWn6HwWFq/PtOkRUHV5dyn9PjhlImra\nyGf7BYyzzJzaG29QQbi6CrGWTzmP6VIxj44Z5EtwGT8GoU+tGIjt+Mw6Le8zh7ZM\no3FLf3NXH4XA/meiAOGPHDQfIJrqB06BHzseFdq+h48O3P0JW9B+GPaqvUmRpz29\ngnmvubiTDkwNo813IimeS7zYCd71AigeEpXn7Z3N6EFpxPY7Z9Misq+NAS287/o=\n=62e5\n-----END PGP SIGNATURE-----\n", "payload": "tree 829bb62a7748c4810cde3a9c0e539552ebd0a5f7\nparent 6919a07eb8dae568eed8f2781d2f3cb0c25ac69e\nparent 3a6093ebca1071af04c2f4e92bbc4895123255c2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558647 +0200\ncommitter GitHub <noreply@github.com> 1659558647 +0200\n\nRollup merge of #100104 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2619be670a774784138584077a515f942acaaf", "html_url": "https://github.com/rust-lang/rust/commit/cd2619be670a774784138584077a515f942acaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2619be670a774784138584077a515f942acaaf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6919a07eb8dae568eed8f2781d2f3cb0c25ac69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6919a07eb8dae568eed8f2781d2f3cb0c25ac69e", "html_url": "https://github.com/rust-lang/rust/commit/6919a07eb8dae568eed8f2781d2f3cb0c25ac69e"}, {"sha": "3a6093ebca1071af04c2f4e92bbc4895123255c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6093ebca1071af04c2f4e92bbc4895123255c2", "html_url": "https://github.com/rust-lang/rust/commit/3a6093ebca1071af04c2f4e92bbc4895123255c2"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "5e81db363ee5c1668e5153650521b567c55def06", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cd2619be670a774784138584077a515f942acaaf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2619be670a774784138584077a515f942acaaf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cd2619be670a774784138584077a515f942acaaf", "patch": "@@ -247,30 +247,28 @@ pub(crate) fn clean_middle_const<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<Lifetime>> for ty::Region<'tcx> {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Option<Lifetime> {\n-        match **self {\n-            ty::ReStatic => Some(Lifetime::statik()),\n-            ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n-                if name != kw::UnderscoreLifetime { Some(Lifetime(name)) } else { None }\n-            }\n-            ty::ReEarlyBound(ref data) => {\n-                if data.name != kw::UnderscoreLifetime {\n-                    Some(Lifetime(data.name))\n-                } else {\n-                    None\n-                }\n-            }\n-            ty::ReLateBound(..)\n-            | ty::ReFree(..)\n-            | ty::ReVar(..)\n-            | ty::RePlaceholder(..)\n-            | ty::ReEmpty(_)\n-            | ty::ReErased => {\n-                debug!(\"cannot clean region {:?}\", self);\n+pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Lifetime> {\n+    match *region {\n+        ty::ReStatic => Some(Lifetime::statik()),\n+        ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n+            if name != kw::UnderscoreLifetime { Some(Lifetime(name)) } else { None }\n+        }\n+        ty::ReEarlyBound(ref data) => {\n+            if data.name != kw::UnderscoreLifetime {\n+                Some(Lifetime(data.name))\n+            } else {\n                 None\n             }\n         }\n+        ty::ReLateBound(..)\n+        | ty::ReFree(..)\n+        | ty::ReVar(..)\n+        | ty::RePlaceholder(..)\n+        | ty::ReEmpty(_)\n+        | ty::ReErased => {\n+            debug!(\"cannot clean region {:?}\", region);\n+            None\n+        }\n     }\n }\n \n@@ -321,7 +319,7 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n             ty::PredicateKind::Trait(pred) => {\n                 clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n             }\n-            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred, cx),\n+            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred),\n             ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n             ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n@@ -358,7 +356,6 @@ fn clean_poly_trait_predicate<'tcx>(\n \n fn clean_region_outlives_predicate<'tcx>(\n     pred: ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>,\n-    cx: &mut DocContext<'tcx>,\n ) -> Option<WherePredicate> {\n     let ty::OutlivesPredicate(a, b) = pred;\n \n@@ -367,8 +364,10 @@ fn clean_region_outlives_predicate<'tcx>(\n     }\n \n     Some(WherePredicate::RegionPredicate {\n-        lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n-        bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n+        lifetime: clean_middle_region(a).expect(\"failed to clean lifetime\"),\n+        bounds: vec![GenericBound::Outlives(\n+            clean_middle_region(b).expect(\"failed to clean bounds\"),\n+        )],\n     })\n }\n \n@@ -384,7 +383,9 @@ fn clean_type_outlives_predicate<'tcx>(\n \n     Some(WherePredicate::BoundPredicate {\n         ty: clean_middle_ty(ty, cx, None),\n-        bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n+        bounds: vec![GenericBound::Outlives(\n+            clean_middle_region(lt).expect(\"failed to clean lifetimes\"),\n+        )],\n         bound_params: Vec::new(),\n     })\n }\n@@ -999,15 +1000,6 @@ impl<'tcx> Clean<'tcx, FnRetTy> for hir::FnRetTy<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, bool> for hir::IsAuto {\n-    fn clean(&self, _: &mut DocContext<'tcx>) -> bool {\n-        match *self {\n-            hir::IsAuto::Yes => true,\n-            hir::IsAuto::No => false,\n-        }\n-    }\n-}\n-\n impl<'tcx> Clean<'tcx, Path> for hir::TraitRef<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n         let path = clean_path(self.path, cx);\n@@ -1597,7 +1589,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         }\n         ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(clean_middle_ty(mt.ty, cx, None))),\n         ty::Ref(r, ty, mutbl) => BorrowedRef {\n-            lifetime: r.clean(cx),\n+            lifetime: clean_middle_region(r),\n             mutability: mutbl,\n             type_: Box::new(clean_middle_ty(ty, cx, None)),\n         },\n@@ -1644,7 +1636,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n \n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n-            let lifetime = reg.clean(cx);\n+            let lifetime = clean_middle_region(*reg);\n             let mut bounds = vec![];\n \n             for did in dids {\n@@ -1710,7 +1702,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                     let trait_ref = match bound_predicate.skip_binder() {\n                         ty::PredicateKind::Trait(tr) => bound_predicate.rebind(tr.trait_ref),\n                         ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(_ty, reg)) => {\n-                            if let Some(r) = reg.clean(cx) {\n+                            if let Some(r) = clean_middle_region(reg) {\n                                 regions.push(GenericBound::Outlives(r));\n                             }\n                             return None;"}, {"sha": "43e71e90a6f5bde9418371a70038e74afd5b18c7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd2619be670a774784138584077a515f942acaaf/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2619be670a774784138584077a515f942acaaf/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=cd2619be670a774784138584077a515f942acaaf", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n-    clean_middle_const, clean_middle_ty, inline, Clean, Crate, ExternalCrate, Generic, GenericArg,\n-    GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path, PathSegment, Primitive,\n-    PrimitiveType, Type, TypeBinding, Visibility,\n+    clean_middle_const, clean_middle_region, clean_middle_ty, inline, Clean, Crate, ExternalCrate,\n+    Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path, PathSegment,\n+    Primitive, PrimitiveType, Type, TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -86,7 +86,7 @@ pub(crate) fn substs_to_args<'tcx>(\n         Vec::with_capacity(substs.len().saturating_sub(if skip_first { 1 } else { 0 }));\n     ret_val.extend(substs.iter().filter_map(|kind| match kind.unpack() {\n         GenericArgKind::Lifetime(lt) => {\n-            Some(GenericArg::Lifetime(lt.clean(cx).unwrap_or(Lifetime::elided())))\n+            Some(GenericArg::Lifetime(clean_middle_region(lt).unwrap_or(Lifetime::elided())))\n         }\n         GenericArgKind::Type(_) if skip_first => {\n             skip_first = false;"}]}