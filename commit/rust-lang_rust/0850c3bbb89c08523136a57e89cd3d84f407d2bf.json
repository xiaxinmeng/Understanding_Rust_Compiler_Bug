{"sha": "0850c3bbb89c08523136a57e89cd3d84f407d2bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTBjM2JiYjg5YzA4NTIzMTM2YTU3ZTg5Y2QzZDg0ZjQwN2QyYmY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-16T17:44:46Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-28T21:25:40Z"}, "message": "Pass `Substs` to `in_adt_inherently`", "tree": {"sha": "7bc87e83290ae175cb14caadd45ee19470680cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc87e83290ae175cb14caadd45ee19470680cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0850c3bbb89c08523136a57e89cd3d84f407d2bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0850c3bbb89c08523136a57e89cd3d84f407d2bf", "html_url": "https://github.com/rust-lang/rust/commit/0850c3bbb89c08523136a57e89cd3d84f407d2bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0850c3bbb89c08523136a57e89cd3d84f407d2bf/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7afaa7247cc81e0cca7aa438aa1e1672328c0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7afaa7247cc81e0cca7aa438aa1e1672328c0a2", "html_url": "https://github.com/rust-lang/rust/commit/d7afaa7247cc81e0cca7aa438aa1e1672328c0a2"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "04bd632553eeeb03ede8d72721619330a7c53f7d", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0850c3bbb89c08523136a57e89cd3d84f407d2bf/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0850c3bbb89c08523136a57e89cd3d84f407d2bf/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=0850c3bbb89c08523136a57e89cd3d84f407d2bf", "patch": "@@ -3,7 +3,7 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, AdtDef, Ty};\n+use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n \n use super::ConstCx;\n@@ -53,7 +53,11 @@ pub trait Qualif {\n     /// with a custom `Drop` impl is inherently `NeedsDrop`.\n     ///\n     /// Returning `true` for `in_adt_inherently` but `false` for `in_any_value_of_ty` is unsound.\n-    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &AdtDef) -> bool;\n+    fn in_adt_inherently(\n+        cx: &ConstCx<'_, 'tcx>,\n+        adt: &'tcx AdtDef,\n+        substs: SubstsRef<'tcx>,\n+    ) -> bool;\n }\n \n /// Constant containing interior mutability (`UnsafeCell<T>`).\n@@ -74,7 +78,7 @@ impl Qualif for HasMutInterior {\n         !ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP)\n     }\n \n-    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &AdtDef) -> bool {\n+    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n         // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.\n         // It arises structurally for all other types.\n         Some(adt.did) == cx.tcx.lang_items().unsafe_cell_type()\n@@ -99,7 +103,7 @@ impl Qualif for NeedsDrop {\n         ty.needs_drop(cx.tcx, cx.param_env)\n     }\n \n-    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &AdtDef) -> bool {\n+    fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n         adt.has_dtor(cx.tcx)\n     }\n }\n@@ -147,8 +151,8 @@ where\n         Rvalue::Aggregate(kind, operands) => {\n             // Return early if we know that the struct or enum being constructed is always\n             // qualified.\n-            if let AggregateKind::Adt(def, ..) = **kind {\n-                if Q::in_adt_inherently(cx, def) {\n+            if let AggregateKind::Adt(def, _, substs, ..) = **kind {\n+                if Q::in_adt_inherently(cx, def, substs) {\n                     return true;\n                 }\n             }"}]}