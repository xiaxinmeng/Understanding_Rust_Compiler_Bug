{"sha": "8ea6f78cf6779a933e2dd859efee995932ef1371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTZmNzhjZjY3NzlhOTMzZTJkZDg1OWVmZWU5OTU5MzJlZjEzNzE=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-01-20T22:41:58Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-01-21T02:57:20Z"}, "message": "Implement ExactSizeIterator for remaining core Iterators where applicable.\n\nSpecifically:\n * Peekable\n * ByRef\n * Skip\n * Take\n * Fuse", "tree": {"sha": "dad2b0ef2404f4ded754eb4651f2f1f7b95c1d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad2b0ef2404f4ded754eb4651f2f1f7b95c1d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea6f78cf6779a933e2dd859efee995932ef1371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea6f78cf6779a933e2dd859efee995932ef1371", "html_url": "https://github.com/rust-lang/rust/commit/8ea6f78cf6779a933e2dd859efee995932ef1371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea6f78cf6779a933e2dd859efee995932ef1371/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "html_url": "https://github.com/rust-lang/rust/commit/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "cfbccef2a722dbff6da94b045085afd342f13dd9", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ea6f78cf6779a933e2dd859efee995932ef1371/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea6f78cf6779a933e2dd859efee995932ef1371/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8ea6f78cf6779a933e2dd859efee995932ef1371", "patch": "@@ -1087,6 +1087,12 @@ impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterat\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next_back() }\n }\n \n+#[stable]\n+impl<'a, I> ExactSizeIterator for ByRef<'a, I> where I: 'a + ExactSizeIterator {\n+    #[inline]\n+    fn len(&self) -> uint { self.iter.len() }\n+}\n+\n /// A trait for iterators over elements which can be added together\n #[unstable = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait AdditiveIterator<A> {\n@@ -1790,6 +1796,16 @@ impl<T, I> Iterator for Peekable<T, I> where I: Iterator<Item=T> {\n     }\n }\n \n+#[stable]\n+impl<T, I> ExactSizeIterator for Peekable<T, I> where I: ExactSizeIterator<Item = T> {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        // This is guarenteed to not overflow because `len()` must have been able to return a valid\n+        // value before we peeked.\n+        self.iter.len() + if self.peeked.is_some() { 1 } else { 0 }\n+    }\n+}\n+\n #[stable]\n impl<T, I> Peekable<T, I> where I: Iterator<Item=T> {\n     /// Return a reference to the next element of the iterator with out advancing it,\n@@ -1982,6 +1998,12 @@ impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {\n+    #[inline]\n+    fn len(&self) -> uint { self.iter.len().saturating_sub(self.n) }\n+}\n+\n /// An iterator that only iterates over the first `n` iterations of `iter`.\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -2037,6 +2059,12 @@ impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {\n+    #[inline]\n+    fn len(&self) -> uint { cmp::min(self.iter.len(), self.n) }\n+}\n+\n \n /// An iterator to maintain state while iterating another iterator\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -2246,6 +2274,12 @@ impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n+    #[inline]\n+    fn len(&self) -> uint { self.iter.len() }\n+}\n+\n impl<I> Fuse<I> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n     /// call the underlying iterator again even if it previously returned None."}]}