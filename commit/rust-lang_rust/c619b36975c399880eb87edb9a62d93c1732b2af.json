{"sha": "c619b36975c399880eb87edb9a62d93c1732b2af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MTliMzY5NzVjMzk5ODgwZWI4N2VkYjlhNjJkOTNjMTczMmIyYWY=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-08-17T11:23:38Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-08-17T11:23:38Z"}, "message": "Remove fast path in reallocation for same layout sizes", "tree": {"sha": "f097bf5df11a094bf2297dbc42c391f2cecbcff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f097bf5df11a094bf2297dbc42c391f2cecbcff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c619b36975c399880eb87edb9a62d93c1732b2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c619b36975c399880eb87edb9a62d93c1732b2af", "html_url": "https://github.com/rust-lang/rust/commit/c619b36975c399880eb87edb9a62d93c1732b2af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c619b36975c399880eb87edb9a62d93c1732b2af/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e7b9b8cf776222825dbbd4cb1e39b7765ef27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e7b9b8cf776222825dbbd4cb1e39b7765ef27c", "html_url": "https://github.com/rust-lang/rust/commit/67e7b9b8cf776222825dbbd4cb1e39b7765ef27c"}], "stats": {"total": 72, "additions": 20, "deletions": 52}, "files": [{"sha": "85aef6de1a97ff538904eda5bc57861e72b8b709", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=c619b36975c399880eb87edb9a62d93c1732b2af", "patch": "@@ -209,16 +209,14 @@ unsafe impl AllocRef for Global {\n         );\n \n         // SAFETY: `new_size` must be non-zero, which is checked in the match expression.\n+        // If `new_size` is zero, than `old_size` has to be zero as well.\n         // Other conditions must be upheld by the caller\n         unsafe {\n             match layout.size() {\n-                old_size if old_size == new_size => {\n-                    Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n-                }\n                 0 => self.alloc(Layout::from_size_align_unchecked(new_size, layout.align())),\n                 old_size => {\n-                    // `realloc` probably checks for `new_size > size` or something similar.\n-                    intrinsics::assume(new_size > old_size);\n+                    // `realloc` probably checks for `new_size >= size` or something similar.\n+                    intrinsics::assume(new_size >= old_size);\n                     let raw_ptr = realloc(ptr.as_ptr(), layout, new_size);\n                     let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n                     Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n@@ -240,16 +238,14 @@ unsafe impl AllocRef for Global {\n         );\n \n         // SAFETY: `new_size` must be non-zero, which is checked in the match expression.\n+        // If `new_size` is zero, than `old_size` has to be zero as well.\n         // Other conditions must be upheld by the caller\n         unsafe {\n             match layout.size() {\n-                old_size if old_size == new_size => {\n-                    Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n-                }\n                 0 => self.alloc_zeroed(Layout::from_size_align_unchecked(new_size, layout.align())),\n                 old_size => {\n-                    // `realloc` probably checks for `new_size > size` or something similar.\n-                    intrinsics::assume(new_size > old_size);\n+                    // `realloc` probably checks for `new_size >= size` or something similar.\n+                    intrinsics::assume(new_size >= old_size);\n                     let raw_ptr = realloc(ptr.as_ptr(), layout, new_size);\n                     raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n                     let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n@@ -272,11 +268,8 @@ unsafe impl AllocRef for Global {\n             \"`new_size` must be smaller than or equal to `layout.size()`\"\n         );\n \n-        let ptr = if new_size == old_size {\n-            ptr\n-        } else if new_size == 0 {\n-            // SAFETY: `layout` is non-zero in size as `old_size` != `new_size`\n-            // Other conditions must be upheld by the caller\n+        let ptr = if new_size == 0 {\n+            // SAFETY: conditions must be upheld by the caller\n             unsafe {\n                 self.dealloc(ptr, layout);\n             }\n@@ -285,8 +278,8 @@ unsafe impl AllocRef for Global {\n             // SAFETY: new_size is not zero,\n             // Other conditions must be upheld by the caller\n             let raw_ptr = unsafe {\n-                // `realloc` probably checks for `new_size < old_size` or something similar.\n-                intrinsics::assume(new_size < old_size);\n+                // `realloc` probably checks for `new_size <= old_size` or something similar.\n+                intrinsics::assume(new_size <= old_size);\n                 realloc(ptr.as_ptr(), layout, new_size)\n             };\n             NonNull::new(raw_ptr).ok_or(AllocErr)?"}, {"sha": "f644ed1a874aef7929c4f6c9a0b91aa7029b278c", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=c619b36975c399880eb87edb9a62d93c1732b2af", "patch": "@@ -163,8 +163,6 @@ pub unsafe trait AllocRef {\n     /// * `new_size` must be greater than or equal to `layout.size()`, and\n     /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\n     ///   (i.e., the rounded value must be less than or equal to `usize::MAX`).\n-    // Note: We can't require that `new_size` is strictly greater than `layout.size()` because of ZSTs.\n-    // alternative: `new_size` must be strictly greater than `layout.size()` or both are zero\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n@@ -194,10 +192,6 @@ pub unsafe trait AllocRef {\n             \"`new_size` must be greater than or equal to `layout.size()`\"\n         );\n \n-        if size == new_size {\n-            return Ok(NonNull::slice_from_raw_parts(ptr, size));\n-        }\n-\n         let new_layout =\n             // SAFETY: the caller must ensure that the `new_size` does not overflow.\n             // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid for a Layout.\n@@ -238,8 +232,6 @@ pub unsafe trait AllocRef {\n     /// * `new_size` must be greater than or equal to `layout.size()`, and\n     /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\n     ///   (i.e., the rounded value must be less than or equal to `usize::MAX`).\n-    // Note: We can't require that `new_size` is strictly greater than `layout.size()` because of ZSTs.\n-    // alternative: `new_size` must be strictly greater than `layout.size()` or both are zero\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n@@ -269,10 +261,6 @@ pub unsafe trait AllocRef {\n             \"`new_size` must be greater than or equal to `layout.size()`\"\n         );\n \n-        if size == new_size {\n-            return Ok(NonNull::slice_from_raw_parts(ptr, size));\n-        }\n-\n         let new_layout =\n             // SAFETY: the caller must ensure that the `new_size` does not overflow.\n             // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid for a Layout.\n@@ -315,8 +303,6 @@ pub unsafe trait AllocRef {\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator,\n     /// * `layout` must [*fit*] that block of memory (The `new_size` argument need not fit it.), and\n     /// * `new_size` must be smaller than or equal to `layout.size()`.\n-    // Note: We can't require that `new_size` is strictly smaller than `layout.size()` because of ZSTs.\n-    // alternative: `new_size` must be smaller than `layout.size()` or both are zero\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n@@ -346,10 +332,6 @@ pub unsafe trait AllocRef {\n             \"`new_size` must be smaller than or equal to `layout.size()`\"\n         );\n \n-        if size == new_size {\n-            return Ok(NonNull::slice_from_raw_parts(ptr, size));\n-        }\n-\n         let new_layout =\n         // SAFETY: the caller must ensure that the `new_size` does not overflow.\n         // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid for a Layout."}, {"sha": "63473cebee86ffae55889620f325bb8e6bba2fb9", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c619b36975c399880eb87edb9a62d93c1732b2af/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=c619b36975c399880eb87edb9a62d93c1732b2af", "patch": "@@ -185,16 +185,14 @@ unsafe impl AllocRef for System {\n         );\n \n         // SAFETY: `new_size` must be non-zero, which is checked in the match expression.\n+        // If `new_size` is zero, than `old_size` has to be zero as well.\n         // Other conditions must be upheld by the caller\n         unsafe {\n             match layout.size() {\n-                old_size if old_size == new_size => {\n-                    Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n-                }\n                 0 => self.alloc(Layout::from_size_align_unchecked(new_size, layout.align())),\n                 old_size => {\n-                    // `realloc` probably checks for `new_size > size` or something similar.\n-                    intrinsics::assume(new_size > old_size);\n+                    // `realloc` probably checks for `new_size >= size` or something similar.\n+                    intrinsics::assume(new_size >= old_size);\n                     let raw_ptr = GlobalAlloc::realloc(&System, ptr.as_ptr(), layout, new_size);\n                     let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n                     Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n@@ -216,16 +214,14 @@ unsafe impl AllocRef for System {\n         );\n \n         // SAFETY: `new_size` must be non-zero, which is checked in the match expression.\n+        // If `new_size` is zero, than `old_size` has to be zero as well.\n         // Other conditions must be upheld by the caller\n         unsafe {\n             match layout.size() {\n-                old_size if old_size == new_size => {\n-                    Ok(NonNull::slice_from_raw_parts(ptr, new_size))\n-                }\n                 0 => self.alloc_zeroed(Layout::from_size_align_unchecked(new_size, layout.align())),\n                 old_size => {\n-                    // `realloc` probably checks for `new_size > size` or something similar.\n-                    intrinsics::assume(new_size > old_size);\n+                    // `realloc` probably checks for `new_size >= size` or something similar.\n+                    intrinsics::assume(new_size >= old_size);\n                     let raw_ptr = GlobalAlloc::realloc(&System, ptr.as_ptr(), layout, new_size);\n                     raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n                     let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n@@ -248,11 +244,8 @@ unsafe impl AllocRef for System {\n             \"`new_size` must be smaller than or equal to `layout.size()`\"\n         );\n \n-        let ptr = if new_size == old_size {\n-            ptr\n-        } else if new_size == 0 {\n-            // SAFETY: `layout` is non-zero in size as `old_size` != `new_size`\n-            // Other conditions must be upheld by the caller\n+        let ptr = if new_size == 0 {\n+            // SAFETY: conditions must be upheld by the caller\n             unsafe {\n                 self.dealloc(ptr, layout);\n             }\n@@ -261,8 +254,8 @@ unsafe impl AllocRef for System {\n             // SAFETY: new_size is not zero,\n             // Other conditions must be upheld by the caller\n             let raw_ptr = unsafe {\n-                // `realloc` probably checks for `new_size < old_size` or something similar.\n-                intrinsics::assume(new_size < old_size);\n+                // `realloc` probably checks for `new_size <= old_size` or something similar.\n+                intrinsics::assume(new_size <= old_size);\n                 GlobalAlloc::realloc(&System, ptr.as_ptr(), layout, new_size)\n             };\n             NonNull::new(raw_ptr).ok_or(AllocErr)?"}]}