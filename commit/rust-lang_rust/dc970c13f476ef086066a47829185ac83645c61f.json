{"sha": "dc970c13f476ef086066a47829185ac83645c61f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTcwYzEzZjQ3NmVmMDg2MDY2YTQ3ODI5MTg1YWM4MzY0NWM2MWY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-23T16:39:17Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:48:16Z"}, "message": "cleanup warnings from libstd", "tree": {"sha": "449fca7437ff93fcea30c8e93869439e839a2db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449fca7437ff93fcea30c8e93869439e839a2db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc970c13f476ef086066a47829185ac83645c61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc970c13f476ef086066a47829185ac83645c61f", "html_url": "https://github.com/rust-lang/rust/commit/dc970c13f476ef086066a47829185ac83645c61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc970c13f476ef086066a47829185ac83645c61f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1965d7295775b93d56f6daea96a6d2f6e8f242da", "url": "https://api.github.com/repos/rust-lang/rust/commits/1965d7295775b93d56f6daea96a6d2f6e8f242da", "html_url": "https://github.com/rust-lang/rust/commit/1965d7295775b93d56f6daea96a6d2f6e8f242da"}], "stats": {"total": 1111, "additions": 545, "deletions": 566}, "files": [{"sha": "cde22afd34a833551ae46a5086d8c386169da902", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -11,7 +11,6 @@\n //! Unsafe casting functions\n \n use sys;\n-use unstable;\n use unstable::intrinsics;\n \n /// Casts the value at `src` to U. The two types must have the same length."}, {"sha": "f46c8ab7ecc6edb35f8456e78415aa4b5f0cf27b", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -488,7 +488,7 @@ mod tests {\n             assert!(f == i && f == v);\n \n             buf += ~[t as u8];\n-            stream_inc.input(~[t as u8]);\n+            stream_inc.input([t as u8]);\n \n             t += 1;\n         }"}, {"sha": "4ce4ea108e58cba08ba18de2af3d8d5282c273b2", "filename": "src/libstd/io.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -1839,7 +1839,7 @@ mod tests {\n         {\n             let out: @io::Writer =\n                 result::get(\n-                    &io::file_writer(tmpfile, ~[io::Create, io::Truncate]));\n+                    &io::file_writer(tmpfile, [io::Create, io::Truncate]));\n             out.write_str(frood);\n         }\n         let inp: @io::Reader = result::get(&io::file_reader(tmpfile));\n@@ -1850,31 +1850,31 @@ mod tests {\n \n     #[test]\n     fn test_readchars_empty() {\n-        do io::with_str_reader(~\"\") |inp| {\n+        do io::with_str_reader(\"\") |inp| {\n             let res : ~[char] = inp.read_chars(128);\n             assert_eq!(res.len(), 0);\n         }\n     }\n \n     #[test]\n     fn test_read_line_utf8() {\n-        do io::with_str_reader(~\"\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64hello\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64\") |inp| {\n+        do io::with_str_reader(\"\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64hello\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64\") |inp| {\n             let line = inp.read_line();\n             assert_eq!(line, ~\"\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64hello\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64\");\n         }\n     }\n \n     #[test]\n     fn test_read_lines() {\n-        do io::with_str_reader(~\"a\\nb\\nc\\n\") |inp| {\n+        do io::with_str_reader(\"a\\nb\\nc\\n\") |inp| {\n             assert_eq!(inp.read_lines(), ~[~\"a\", ~\"b\", ~\"c\"]);\n         }\n \n-        do io::with_str_reader(~\"a\\nb\\nc\") |inp| {\n+        do io::with_str_reader(\"a\\nb\\nc\") |inp| {\n             assert_eq!(inp.read_lines(), ~[~\"a\", ~\"b\", ~\"c\"]);\n         }\n \n-        do io::with_str_reader(~\"\") |inp| {\n+        do io::with_str_reader(\"\") |inp| {\n             assert!(inp.read_lines().is_empty());\n         }\n     }\n@@ -1909,15 +1909,15 @@ mod tests {\n \n     #[test]\n     fn test_readchar() {\n-        do io::with_str_reader(~\"\u751f\") |inp| {\n+        do io::with_str_reader(\"\u751f\") |inp| {\n             let res : char = inp.read_char();\n             assert_eq!(res as int, 29983);\n         }\n     }\n \n     #[test]\n     fn test_readchar_empty() {\n-        do io::with_str_reader(~\"\") |inp| {\n+        do io::with_str_reader(\"\") |inp| {\n             let res : char = inp.read_char();\n             assert_eq!(res as int, -1);\n         }\n@@ -1966,7 +1966,7 @@ mod tests {\n \n     #[test]\n     fn file_writer_bad_name() {\n-        match io::file_writer(&Path(\"?/?\"), ~[]) {\n+        match io::file_writer(&Path(\"?/?\"), []) {\n           result::Err(copy e) => {\n             assert!(str::starts_with(e, \"error opening\"));\n           }\n@@ -1987,15 +1987,15 @@ mod tests {\n     #[test]\n     fn bytes_buffer_overwrite() {\n         let wr = BytesWriter();\n-        wr.write(~[0u8, 1u8, 2u8, 3u8]);\n+        wr.write([0u8, 1u8, 2u8, 3u8]);\n         assert!(*wr.bytes == ~[0u8, 1u8, 2u8, 3u8]);\n         wr.seek(-2, SeekCur);\n-        wr.write(~[4u8, 5u8, 6u8, 7u8]);\n+        wr.write([4u8, 5u8, 6u8, 7u8]);\n         assert!(*wr.bytes == ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8]);\n         wr.seek(-2, SeekEnd);\n-        wr.write(~[8u8]);\n+        wr.write([8u8]);\n         wr.seek(1, SeekSet);\n-        wr.write(~[9u8]);\n+        wr.write([9u8]);\n         assert!(*wr.bytes == ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8]);\n     }\n \n@@ -2085,7 +2085,7 @@ mod tests {\n         }\n     }\n \n-#[test]\n+    #[test]\n     fn test_read_write_f32() {\n         let path = Path(\"tmp/lib-io-test-read-write-f32.tmp\");\n         let f:f32 = 8.1250;"}, {"sha": "c6d183c6fb841e6aeab9dffc4b70053bf70e9b3d", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -951,7 +951,6 @@ impl num::FromStrRadix for f32 {\n mod tests {\n     use f32::*;\n     use num::*;\n-    use super::*;\n     use prelude::*;\n \n     #[test]"}, {"sha": "262e4176c911de543700e67a0a8c81298d298bbd", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -993,7 +993,6 @@ impl num::FromStrRadix for f64 {\n mod tests {\n     use f64::*;\n     use num::*;\n-    use super::*;\n     use prelude::*;\n \n     #[test]"}, {"sha": "d04f12f6bd3c6664ea904be0a83bf3ac6f768e7f", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -1251,101 +1251,101 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str(~\"3\"), Some(3.));\n-        assert_eq!(from_str(~\"3.14\"), Some(3.14));\n-        assert_eq!(from_str(~\"+3.14\"), Some(3.14));\n-        assert_eq!(from_str(~\"-3.14\"), Some(-3.14));\n-        assert_eq!(from_str(~\"2.5E10\"), Some(25000000000.));\n-        assert_eq!(from_str(~\"2.5e10\"), Some(25000000000.));\n-        assert_eq!(from_str(~\"25000000000.E-10\"), Some(2.5));\n-        assert_eq!(from_str(~\".\"), Some(0.));\n-        assert_eq!(from_str(~\".e1\"), Some(0.));\n-        assert_eq!(from_str(~\".e-1\"), Some(0.));\n-        assert_eq!(from_str(~\"5.\"), Some(5.));\n-        assert_eq!(from_str(~\".5\"), Some(0.5));\n-        assert_eq!(from_str(~\"0.5\"), Some(0.5));\n-        assert_eq!(from_str(~\"-.5\"), Some(-0.5));\n-        assert_eq!(from_str(~\"-5\"), Some(-5.));\n-        assert_eq!(from_str(~\"inf\"), Some(infinity));\n-        assert_eq!(from_str(~\"+inf\"), Some(infinity));\n-        assert_eq!(from_str(~\"-inf\"), Some(neg_infinity));\n+        assert_eq!(from_str(\"3\"), Some(3.));\n+        assert_eq!(from_str(\"3.14\"), Some(3.14));\n+        assert_eq!(from_str(\"+3.14\"), Some(3.14));\n+        assert_eq!(from_str(\"-3.14\"), Some(-3.14));\n+        assert_eq!(from_str(\"2.5E10\"), Some(25000000000.));\n+        assert_eq!(from_str(\"2.5e10\"), Some(25000000000.));\n+        assert_eq!(from_str(\"25000000000.E-10\"), Some(2.5));\n+        assert_eq!(from_str(\".\"), Some(0.));\n+        assert_eq!(from_str(\".e1\"), Some(0.));\n+        assert_eq!(from_str(\".e-1\"), Some(0.));\n+        assert_eq!(from_str(\"5.\"), Some(5.));\n+        assert_eq!(from_str(\".5\"), Some(0.5));\n+        assert_eq!(from_str(\"0.5\"), Some(0.5));\n+        assert_eq!(from_str(\"-.5\"), Some(-0.5));\n+        assert_eq!(from_str(\"-5\"), Some(-5.));\n+        assert_eq!(from_str(\"inf\"), Some(infinity));\n+        assert_eq!(from_str(\"+inf\"), Some(infinity));\n+        assert_eq!(from_str(\"-inf\"), Some(neg_infinity));\n         // note: NaN != NaN, hence this slightly complex test\n-        match from_str(~\"NaN\") {\n+        match from_str(\"NaN\") {\n             Some(f) => assert!(f.is_NaN()),\n             None => fail!()\n         }\n         // note: -0 == 0, hence these slightly more complex tests\n-        match from_str(~\"-0\") {\n+        match from_str(\"-0\") {\n             Some(v) if v.is_zero() => assert!(v.is_negative()),\n             _ => fail!()\n         }\n-        match from_str(~\"0\") {\n+        match from_str(\"0\") {\n             Some(v) if v.is_zero() => assert!(v.is_positive()),\n             _ => fail!()\n         }\n \n-        assert!(from_str(~\"\").is_none());\n-        assert!(from_str(~\"x\").is_none());\n-        assert!(from_str(~\" \").is_none());\n-        assert!(from_str(~\"   \").is_none());\n-        assert!(from_str(~\"e\").is_none());\n-        assert!(from_str(~\"E\").is_none());\n-        assert!(from_str(~\"E1\").is_none());\n-        assert!(from_str(~\"1e1e1\").is_none());\n-        assert!(from_str(~\"1e1.1\").is_none());\n-        assert!(from_str(~\"1e1-1\").is_none());\n+        assert!(from_str(\"\").is_none());\n+        assert!(from_str(\"x\").is_none());\n+        assert!(from_str(\" \").is_none());\n+        assert!(from_str(\"   \").is_none());\n+        assert!(from_str(\"e\").is_none());\n+        assert!(from_str(\"E\").is_none());\n+        assert!(from_str(\"E1\").is_none());\n+        assert!(from_str(\"1e1e1\").is_none());\n+        assert!(from_str(\"1e1.1\").is_none());\n+        assert!(from_str(\"1e1-1\").is_none());\n     }\n \n     #[test]\n     pub fn test_from_str_hex() {\n-        assert_eq!(from_str_hex(~\"a4\"), Some(164.));\n-        assert_eq!(from_str_hex(~\"a4.fe\"), Some(164.9921875));\n-        assert_eq!(from_str_hex(~\"-a4.fe\"), Some(-164.9921875));\n-        assert_eq!(from_str_hex(~\"+a4.fe\"), Some(164.9921875));\n-        assert_eq!(from_str_hex(~\"ff0P4\"), Some(0xff00 as float));\n-        assert_eq!(from_str_hex(~\"ff0p4\"), Some(0xff00 as float));\n-        assert_eq!(from_str_hex(~\"ff0p-4\"), Some(0xff as float));\n-        assert_eq!(from_str_hex(~\".\"), Some(0.));\n-        assert_eq!(from_str_hex(~\".p1\"), Some(0.));\n-        assert_eq!(from_str_hex(~\".p-1\"), Some(0.));\n-        assert_eq!(from_str_hex(~\"f.\"), Some(15.));\n-        assert_eq!(from_str_hex(~\".f\"), Some(0.9375));\n-        assert_eq!(from_str_hex(~\"0.f\"), Some(0.9375));\n-        assert_eq!(from_str_hex(~\"-.f\"), Some(-0.9375));\n-        assert_eq!(from_str_hex(~\"-f\"), Some(-15.));\n-        assert_eq!(from_str_hex(~\"inf\"), Some(infinity));\n-        assert_eq!(from_str_hex(~\"+inf\"), Some(infinity));\n-        assert_eq!(from_str_hex(~\"-inf\"), Some(neg_infinity));\n+        assert_eq!(from_str_hex(\"a4\"), Some(164.));\n+        assert_eq!(from_str_hex(\"a4.fe\"), Some(164.9921875));\n+        assert_eq!(from_str_hex(\"-a4.fe\"), Some(-164.9921875));\n+        assert_eq!(from_str_hex(\"+a4.fe\"), Some(164.9921875));\n+        assert_eq!(from_str_hex(\"ff0P4\"), Some(0xff00 as float));\n+        assert_eq!(from_str_hex(\"ff0p4\"), Some(0xff00 as float));\n+        assert_eq!(from_str_hex(\"ff0p-4\"), Some(0xff as float));\n+        assert_eq!(from_str_hex(\".\"), Some(0.));\n+        assert_eq!(from_str_hex(\".p1\"), Some(0.));\n+        assert_eq!(from_str_hex(\".p-1\"), Some(0.));\n+        assert_eq!(from_str_hex(\"f.\"), Some(15.));\n+        assert_eq!(from_str_hex(\".f\"), Some(0.9375));\n+        assert_eq!(from_str_hex(\"0.f\"), Some(0.9375));\n+        assert_eq!(from_str_hex(\"-.f\"), Some(-0.9375));\n+        assert_eq!(from_str_hex(\"-f\"), Some(-15.));\n+        assert_eq!(from_str_hex(\"inf\"), Some(infinity));\n+        assert_eq!(from_str_hex(\"+inf\"), Some(infinity));\n+        assert_eq!(from_str_hex(\"-inf\"), Some(neg_infinity));\n         // note: NaN != NaN, hence this slightly complex test\n-        match from_str_hex(~\"NaN\") {\n+        match from_str_hex(\"NaN\") {\n             Some(f) => assert!(f.is_NaN()),\n             None => fail!()\n         }\n         // note: -0 == 0, hence these slightly more complex tests\n-        match from_str_hex(~\"-0\") {\n+        match from_str_hex(\"-0\") {\n             Some(v) if v.is_zero() => assert!(v.is_negative()),\n             _ => fail!()\n         }\n-        match from_str_hex(~\"0\") {\n+        match from_str_hex(\"0\") {\n             Some(v) if v.is_zero() => assert!(v.is_positive()),\n             _ => fail!()\n         }\n-        assert_eq!(from_str_hex(~\"e\"), Some(14.));\n-        assert_eq!(from_str_hex(~\"E\"), Some(14.));\n-        assert_eq!(from_str_hex(~\"E1\"), Some(225.));\n-        assert_eq!(from_str_hex(~\"1e1e1\"), Some(123361.));\n-        assert_eq!(from_str_hex(~\"1e1.1\"), Some(481.0625));\n-\n-        assert!(from_str_hex(~\"\").is_none());\n-        assert!(from_str_hex(~\"x\").is_none());\n-        assert!(from_str_hex(~\" \").is_none());\n-        assert!(from_str_hex(~\"   \").is_none());\n-        assert!(from_str_hex(~\"p\").is_none());\n-        assert!(from_str_hex(~\"P\").is_none());\n-        assert!(from_str_hex(~\"P1\").is_none());\n-        assert!(from_str_hex(~\"1p1p1\").is_none());\n-        assert!(from_str_hex(~\"1p1.1\").is_none());\n-        assert!(from_str_hex(~\"1p1-1\").is_none());\n+        assert_eq!(from_str_hex(\"e\"), Some(14.));\n+        assert_eq!(from_str_hex(\"E\"), Some(14.));\n+        assert_eq!(from_str_hex(\"E1\"), Some(225.));\n+        assert_eq!(from_str_hex(\"1e1e1\"), Some(123361.));\n+        assert_eq!(from_str_hex(\"1e1.1\"), Some(481.0625));\n+\n+        assert!(from_str_hex(\"\").is_none());\n+        assert!(from_str_hex(\"x\").is_none());\n+        assert!(from_str_hex(\" \").is_none());\n+        assert!(from_str_hex(\"   \").is_none());\n+        assert!(from_str_hex(\"p\").is_none());\n+        assert!(from_str_hex(\"P\").is_none());\n+        assert!(from_str_hex(\"P1\").is_none());\n+        assert!(from_str_hex(\"1p1p1\").is_none());\n+        assert!(from_str_hex(\"1p1.1\").is_none());\n+        assert!(from_str_hex(\"1p1-1\").is_none());\n     }\n \n     #[test]\n@@ -1375,8 +1375,8 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str_radix() {\n-        assert_eq!(from_str_radix(~\"10\", 36u), Some(36.));\n-        assert_eq!(from_str_radix(~\"1000.001\", 2u), Some(8.125));\n+        assert_eq!(from_str_radix(\"10\", 36u), Some(36.));\n+        assert_eq!(from_str_radix(\"1000.001\", 2u), Some(8.125));\n     }\n \n     #[test]"}, {"sha": "068f553ea6b5703c917e7f59e5bdb5a8bdd3312b", "filename": "src/libstd/num/int-template.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -755,45 +755,45 @@ mod tests {\n \n     #[test]\n     fn test_from_str() {\n-        assert_eq!(from_str(~\"0\"), Some(0 as T));\n-        assert_eq!(from_str(~\"3\"), Some(3 as T));\n-        assert_eq!(from_str(~\"10\"), Some(10 as T));\n-        assert_eq!(i32::from_str(~\"123456789\"), Some(123456789 as i32));\n-        assert_eq!(from_str(~\"00100\"), Some(100 as T));\n+        assert_eq!(from_str(\"0\"), Some(0 as T));\n+        assert_eq!(from_str(\"3\"), Some(3 as T));\n+        assert_eq!(from_str(\"10\"), Some(10 as T));\n+        assert_eq!(i32::from_str(\"123456789\"), Some(123456789 as i32));\n+        assert_eq!(from_str(\"00100\"), Some(100 as T));\n \n-        assert_eq!(from_str(~\"-1\"), Some(-1 as T));\n-        assert_eq!(from_str(~\"-3\"), Some(-3 as T));\n-        assert_eq!(from_str(~\"-10\"), Some(-10 as T));\n-        assert_eq!(i32::from_str(~\"-123456789\"), Some(-123456789 as i32));\n-        assert_eq!(from_str(~\"-00100\"), Some(-100 as T));\n+        assert_eq!(from_str(\"-1\"), Some(-1 as T));\n+        assert_eq!(from_str(\"-3\"), Some(-3 as T));\n+        assert_eq!(from_str(\"-10\"), Some(-10 as T));\n+        assert_eq!(i32::from_str(\"-123456789\"), Some(-123456789 as i32));\n+        assert_eq!(from_str(\"-00100\"), Some(-100 as T));\n \n-        assert!(from_str(~\" \").is_none());\n-        assert!(from_str(~\"x\").is_none());\n+        assert!(from_str(\" \").is_none());\n+        assert!(from_str(\"x\").is_none());\n     }\n \n     #[test]\n     fn test_parse_bytes() {\n         use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 10u), Some(123 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"1001\"), 2u), Some(9 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 8u), Some(83 as T));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"123\"), 16u), Some(291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"ffff\"), 16u), Some(65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"FFFF\"), 16u), Some(65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(~\"z\"), 36u), Some(35 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"Z\"), 36u), Some(35 as T));\n-\n-        assert_eq!(parse_bytes(to_bytes(~\"-123\"), 10u), Some(-123 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-1001\"), 2u), Some(-9 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-123\"), 8u), Some(-83 as T));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-123\"), 16u), Some(-291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-ffff\"), 16u), Some(-65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-FFFF\"), 16u), Some(-65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(~\"-z\"), 36u), Some(-35 as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-Z\"), 36u), Some(-35 as T));\n-\n-        assert!(parse_bytes(to_bytes(~\"Z\"), 35u).is_none());\n-        assert!(parse_bytes(to_bytes(~\"-9\"), 2u).is_none());\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83 as T));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"123\"), 16u), Some(291 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"FFFF\"), 16u), Some(65535 as i32));\n+        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"Z\"), 36u), Some(35 as T));\n+\n+        assert_eq!(parse_bytes(to_bytes(\"-123\"), 10u), Some(-123 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"-1001\"), 2u), Some(-9 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"-123\"), 8u), Some(-83 as T));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-123\"), 16u), Some(-291 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-ffff\"), 16u), Some(-65535 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-FFFF\"), 16u), Some(-65535 as i32));\n+        assert_eq!(parse_bytes(to_bytes(\"-z\"), 36u), Some(-35 as T));\n+        assert_eq!(parse_bytes(to_bytes(\"-Z\"), 36u), Some(-35 as T));\n+\n+        assert!(parse_bytes(to_bytes(\"Z\"), 35u).is_none());\n+        assert!(parse_bytes(to_bytes(\"-9\"), 2u).is_none());\n     }\n \n     #[test]\n@@ -836,36 +836,36 @@ mod tests {\n     #[test]\n     fn test_int_from_str_overflow() {\n         let mut i8_val: i8 = 127_i8;\n-        assert_eq!(i8::from_str(~\"127\"), Some(i8_val));\n-        assert!(i8::from_str(~\"128\").is_none());\n+        assert_eq!(i8::from_str(\"127\"), Some(i8_val));\n+        assert!(i8::from_str(\"128\").is_none());\n \n         i8_val += 1 as i8;\n-        assert_eq!(i8::from_str(~\"-128\"), Some(i8_val));\n-        assert!(i8::from_str(~\"-129\").is_none());\n+        assert_eq!(i8::from_str(\"-128\"), Some(i8_val));\n+        assert!(i8::from_str(\"-129\").is_none());\n \n         let mut i16_val: i16 = 32_767_i16;\n-        assert_eq!(i16::from_str(~\"32767\"), Some(i16_val));\n-        assert!(i16::from_str(~\"32768\").is_none());\n+        assert_eq!(i16::from_str(\"32767\"), Some(i16_val));\n+        assert!(i16::from_str(\"32768\").is_none());\n \n         i16_val += 1 as i16;\n-        assert_eq!(i16::from_str(~\"-32768\"), Some(i16_val));\n-        assert!(i16::from_str(~\"-32769\").is_none());\n+        assert_eq!(i16::from_str(\"-32768\"), Some(i16_val));\n+        assert!(i16::from_str(\"-32769\").is_none());\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n-        assert_eq!(i32::from_str(~\"2147483647\"), Some(i32_val));\n-        assert!(i32::from_str(~\"2147483648\").is_none());\n+        assert_eq!(i32::from_str(\"2147483647\"), Some(i32_val));\n+        assert!(i32::from_str(\"2147483648\").is_none());\n \n         i32_val += 1 as i32;\n-        assert_eq!(i32::from_str(~\"-2147483648\"), Some(i32_val));\n-        assert!(i32::from_str(~\"-2147483649\").is_none());\n+        assert_eq!(i32::from_str(\"-2147483648\"), Some(i32_val));\n+        assert!(i32::from_str(\"-2147483649\").is_none());\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n-        assert_eq!(i64::from_str(~\"9223372036854775807\"), Some(i64_val));\n-        assert!(i64::from_str(~\"9223372036854775808\").is_none());\n+        assert_eq!(i64::from_str(\"9223372036854775807\"), Some(i64_val));\n+        assert!(i64::from_str(\"9223372036854775808\").is_none());\n \n         i64_val += 1 as i64;\n-        assert_eq!(i64::from_str(~\"-9223372036854775808\"), Some(i64_val));\n-        assert!(i64::from_str(~\"-9223372036854775809\").is_none());\n+        assert_eq!(i64::from_str(\"-9223372036854775808\"), Some(i64_val));\n+        assert!(i64::from_str(\"-9223372036854775809\").is_none());\n     }\n \n     #[test]"}, {"sha": "9784fe24206c30ca8acc3ea8befe5d9debf9b68e", "filename": "src/libstd/num/uint-template.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -472,29 +472,29 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str(~\"0\"), Some(0u as T));\n-        assert_eq!(from_str(~\"3\"), Some(3u as T));\n-        assert_eq!(from_str(~\"10\"), Some(10u as T));\n-        assert_eq!(u32::from_str(~\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str(~\"00100\"), Some(100u as T));\n+        assert_eq!(from_str(\"0\"), Some(0u as T));\n+        assert_eq!(from_str(\"3\"), Some(3u as T));\n+        assert_eq!(from_str(\"10\"), Some(10u as T));\n+        assert_eq!(u32::from_str(\"123456789\"), Some(123456789 as u32));\n+        assert_eq!(from_str(\"00100\"), Some(100u as T));\n \n-        assert!(from_str(~\"\").is_none());\n-        assert!(from_str(~\" \").is_none());\n-        assert!(from_str(~\"x\").is_none());\n+        assert!(from_str(\"\").is_none());\n+        assert!(from_str(\" \").is_none());\n+        assert!(from_str(\"x\").is_none());\n     }\n \n     #[test]\n     pub fn test_parse_bytes() {\n         use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 10u), Some(123u as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"1001\"), 2u), Some(9u as T));\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 8u), Some(83u as T));\n-        assert_eq!(u16::parse_bytes(to_bytes(~\"123\"), 16u), Some(291u as u16));\n-        assert_eq!(u16::parse_bytes(to_bytes(~\"ffff\"), 16u), Some(65535u as u16));\n-        assert_eq!(parse_bytes(to_bytes(~\"z\"), 36u), Some(35u as T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123u as T));\n+        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9u as T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83u as T));\n+        assert_eq!(u16::parse_bytes(to_bytes(\"123\"), 16u), Some(291u as u16));\n+        assert_eq!(u16::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535u as u16));\n+        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35u as T));\n \n-        assert!(parse_bytes(to_bytes(~\"Z\"), 10u).is_none());\n-        assert!(parse_bytes(to_bytes(~\"_\"), 2u).is_none());\n+        assert!(parse_bytes(to_bytes(\"Z\"), 10u).is_none());\n+        assert!(parse_bytes(to_bytes(\"_\"), 2u).is_none());\n     }\n \n     #[test]\n@@ -527,36 +527,36 @@ mod tests {\n     #[test]\n     fn test_uint_from_str_overflow() {\n         let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8::from_str(~\"255\"), Some(u8_val));\n-        assert!(u8::from_str(~\"256\").is_none());\n+        assert_eq!(u8::from_str(\"255\"), Some(u8_val));\n+        assert!(u8::from_str(\"256\").is_none());\n \n         u8_val += 1 as u8;\n-        assert_eq!(u8::from_str(~\"0\"), Some(u8_val));\n-        assert!(u8::from_str(~\"-1\").is_none());\n+        assert_eq!(u8::from_str(\"0\"), Some(u8_val));\n+        assert!(u8::from_str(\"-1\").is_none());\n \n         let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16::from_str(~\"65535\"), Some(u16_val));\n-        assert!(u16::from_str(~\"65536\").is_none());\n+        assert_eq!(u16::from_str(\"65535\"), Some(u16_val));\n+        assert!(u16::from_str(\"65536\").is_none());\n \n         u16_val += 1 as u16;\n-        assert_eq!(u16::from_str(~\"0\"), Some(u16_val));\n-        assert!(u16::from_str(~\"-1\").is_none());\n+        assert_eq!(u16::from_str(\"0\"), Some(u16_val));\n+        assert!(u16::from_str(\"-1\").is_none());\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32::from_str(~\"4294967295\"), Some(u32_val));\n-        assert!(u32::from_str(~\"4294967296\").is_none());\n+        assert_eq!(u32::from_str(\"4294967295\"), Some(u32_val));\n+        assert!(u32::from_str(\"4294967296\").is_none());\n \n         u32_val += 1 as u32;\n-        assert_eq!(u32::from_str(~\"0\"), Some(u32_val));\n-        assert!(u32::from_str(~\"-1\").is_none());\n+        assert_eq!(u32::from_str(\"0\"), Some(u32_val));\n+        assert!(u32::from_str(\"-1\").is_none());\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64::from_str(~\"18446744073709551615\"), Some(u64_val));\n-        assert!(u64::from_str(~\"18446744073709551616\").is_none());\n+        assert_eq!(u64::from_str(\"18446744073709551615\"), Some(u64_val));\n+        assert!(u64::from_str(\"18446744073709551616\").is_none());\n \n         u64_val += 1 as u64;\n-        assert_eq!(u64::from_str(~\"0\"), Some(u64_val));\n-        assert!(u64::from_str(~\"-1\").is_none());\n+        assert_eq!(u64::from_str(\"0\"), Some(u64_val));\n+        assert!(u64::from_str(\"-1\").is_none());\n     }\n \n     #[test]"}, {"sha": "a82f1c9891696c3df23660e423e0d64b0b9bc5ea", "filename": "src/libstd/os.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -1444,14 +1444,14 @@ mod tests {\n     #[test]\n     fn test_setenv() {\n         let n = make_rand_name();\n-        setenv(n, ~\"VALUE\");\n+        setenv(n, \"VALUE\");\n         assert_eq!(getenv(n), option::Some(~\"VALUE\"));\n     }\n \n     #[test]\n     fn test_unsetenv() {\n         let n = make_rand_name();\n-        setenv(n, ~\"VALUE\");\n+        setenv(n, \"VALUE\");\n         unsetenv(n);\n         assert_eq!(getenv(n), option::None);\n     }\n@@ -1461,10 +1461,10 @@ mod tests {\n     #[ignore]\n     fn test_setenv_overwrite() {\n         let n = make_rand_name();\n-        setenv(n, ~\"1\");\n-        setenv(n, ~\"2\");\n+        setenv(n, \"1\");\n+        setenv(n, \"2\");\n         assert_eq!(getenv(n), option::Some(~\"2\"));\n-        setenv(n, ~\"\");\n+        setenv(n, \"\");\n         assert_eq!(getenv(n), option::Some(~\"\"));\n     }\n \n@@ -1515,7 +1515,7 @@ mod tests {\n         let n = make_rand_name();\n \n         let mut e = env();\n-        setenv(n, ~\"VALUE\");\n+        setenv(n, \"VALUE\");\n         assert!(!vec::contains(e, &(copy n, ~\"VALUE\")));\n \n         e = env();\n@@ -1526,7 +1526,7 @@ mod tests {\n     fn test() {\n         assert!((!Path(\"test-path\").is_absolute));\n \n-        debug!(~\"Current working directory: \" + getcwd().to_str());\n+        debug!(\"Current working directory: %s\", getcwd().to_str());\n \n         debug!(make_absolute(&Path(\"test-path\")));\n         debug!(make_absolute(&Path(\"/usr/bin\")));\n@@ -1535,43 +1535,43 @@ mod tests {\n     #[test]\n     #[cfg(unix)]\n     fn homedir() {\n-        let oldhome = getenv(~\"HOME\");\n+        let oldhome = getenv(\"HOME\");\n \n-        setenv(~\"HOME\", ~\"/home/MountainView\");\n+        setenv(\"HOME\", \"/home/MountainView\");\n         assert_eq!(os::homedir(), Some(Path(\"/home/MountainView\")));\n \n-        setenv(~\"HOME\", ~\"\");\n+        setenv(\"HOME\", \"\");\n         assert!(os::homedir().is_none());\n \n-        for oldhome.each |s| { setenv(~\"HOME\", *s) }\n+        for oldhome.each |s| { setenv(\"HOME\", *s) }\n     }\n \n     #[test]\n     #[cfg(windows)]\n     fn homedir() {\n \n-        let oldhome = getenv(~\"HOME\");\n-        let olduserprofile = getenv(~\"USERPROFILE\");\n+        let oldhome = getenv(\"HOME\");\n+        let olduserprofile = getenv(\"USERPROFILE\");\n \n-        setenv(~\"HOME\", ~\"\");\n-        setenv(~\"USERPROFILE\", ~\"\");\n+        setenv(\"HOME\", \"\");\n+        setenv(\"USERPROFILE\", \"\");\n \n         assert!(os::homedir().is_none());\n \n-        setenv(~\"HOME\", ~\"/home/MountainView\");\n+        setenv(\"HOME\", \"/home/MountainView\");\n         assert_eq!(os::homedir(), Some(Path(\"/home/MountainView\")));\n \n-        setenv(~\"HOME\", ~\"\");\n+        setenv(\"HOME\", \"\");\n \n-        setenv(~\"USERPROFILE\", ~\"/home/MountainView\");\n+        setenv(\"USERPROFILE\", \"/home/MountainView\");\n         assert_eq!(os::homedir(), Some(Path(\"/home/MountainView\")));\n \n-        setenv(~\"HOME\", ~\"/home/MountainView\");\n-        setenv(~\"USERPROFILE\", ~\"/home/PaloAlto\");\n+        setenv(\"HOME\", \"/home/MountainView\");\n+        setenv(\"USERPROFILE\", \"/home/PaloAlto\");\n         assert_eq!(os::homedir(), Some(Path(\"/home/MountainView\")));\n \n-        oldhome.each(|s| {setenv(~\"HOME\", *s);true});\n-        olduserprofile.each(|s| {setenv(~\"USERPROFILE\", *s);true});\n+        oldhome.each(|s| { setenv(\"HOME\", *s); true });\n+        olduserprofile.each(|s| { setenv(\"USERPROFILE\", *s); true });\n     }\n \n     #[test]\n@@ -1646,7 +1646,7 @@ mod tests {\n             fail!(\"%s doesn't exist\", in.to_str());\n           }\n           assert!((rs));\n-          let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);\n+          let rslt = run::run_program(\"diff\", [in.to_str(), out.to_str()]);\n           assert_eq!(rslt, 0);\n           assert_eq!(out.get_mode(), in_mode);\n           assert!((remove_file(&in)));"}, {"sha": "09d0a38e16d4908996fb1fa7f4ea591cc7b45d74", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -988,10 +988,10 @@ mod tests {\n     #[test]\n     fn test_choose_weighted() {\n         let mut r = rng();\n-        assert!(r.choose_weighted(~[\n+        assert!(r.choose_weighted([\n             Weighted { weight: 1u, item: 42 },\n         ]) == 42);\n-        assert!(r.choose_weighted(~[\n+        assert!(r.choose_weighted([\n             Weighted { weight: 0u, item: 42 },\n             Weighted { weight: 1u, item: 43 },\n         ]) == 43);\n@@ -1000,10 +1000,10 @@ mod tests {\n     #[test]\n     fn test_choose_weighted_option() {\n         let mut r = rng();\n-        assert!(r.choose_weighted_option(~[\n+        assert!(r.choose_weighted_option([\n             Weighted { weight: 1u, item: 42 },\n         ]) == Some(42));\n-        assert!(r.choose_weighted_option(~[\n+        assert!(r.choose_weighted_option([\n             Weighted { weight: 0u, item: 42 },\n             Weighted { weight: 1u, item: 43 },\n         ]) == Some(43));\n@@ -1015,8 +1015,8 @@ mod tests {\n     fn test_weighted_vec() {\n         let mut r = rng();\n         let empty: ~[int] = ~[];\n-        assert_eq!(r.weighted_vec(~[]), empty);\n-        assert!(r.weighted_vec(~[\n+        assert_eq!(r.weighted_vec([]), empty);\n+        assert!(r.weighted_vec([\n             Weighted { weight: 0u, item: 3u },\n             Weighted { weight: 1u, item: 2u },\n             Weighted { weight: 2u, item: 1u },\n@@ -1027,15 +1027,15 @@ mod tests {\n     fn test_shuffle() {\n         let mut r = rng();\n         let empty: ~[int] = ~[];\n-        assert_eq!(r.shuffle(~[]), empty);\n-        assert_eq!(r.shuffle(~[1, 1, 1]), ~[1, 1, 1]);\n+        assert_eq!(r.shuffle([]), empty);\n+        assert_eq!(r.shuffle([1, 1, 1]), ~[1, 1, 1]);\n     }\n \n     #[test]\n     fn test_task_rng() {\n         let mut r = task_rng();\n         r.gen::<int>();\n-        assert_eq!(r.shuffle(~[1, 1, 1]), ~[1, 1, 1]);\n+        assert_eq!(r.shuffle([1, 1, 1]), ~[1, 1, 1]);\n         assert_eq!(r.gen_uint_range(0u, 1u), 0u);\n     }\n "}, {"sha": "54db03b6069c26b573b6ed0ff41fce678b2c22ba", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -474,7 +474,7 @@ mod test {\n     #[test]\n     fn oneshot_single_thread_peek_open() {\n         do run_in_newsched_task {\n-            let (port, chan) = oneshot::<int>();\n+            let (port, _) = oneshot::<int>();\n             assert!(!port.peek());\n         }\n     }"}, {"sha": "fcbf31e87f2c02867e3f54577475a36b8ce0b6c4", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -587,12 +587,10 @@ fn extend_sign(val: u64, nbytes: uint) -> i64 {\n \n #[cfg(test)]\n mod test {\n-    use super::{ReaderUtil, ReaderByteConversions, WriterByteConversions};\n-    use u64;\n-    use i32;\n+    use super::ReaderUtil;\n     use option::{Some, None};\n     use cell::Cell;\n-    use rt::io::mem::{MemReader, MemWriter};\n+    use rt::io::mem::MemReader;\n     use rt::io::mock::MockReader;\n     use rt::io::{read_error, placeholder_error};\n "}, {"sha": "313123c38b58d8a10367c45d5403c44a62531d23", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -33,7 +33,7 @@ impl Local for Scheduler {\n }\n \n impl Local for Task {\n-    fn put(value: ~Task) { abort!(\"unimpl\") }\n+    fn put(_value: ~Task) { abort!(\"unimpl\") }\n     fn take() -> ~Task { abort!(\"unimpl\") }\n     fn exists() -> bool { abort!(\"unimpl\") }\n     fn borrow(f: &fn(&mut Task)) {\n@@ -71,10 +71,10 @@ impl Local for Task {\n \n // XXX: This formulation won't work once ~IoFactoryObject is a real trait pointer\n impl Local for IoFactoryObject {\n-    fn put(value: ~IoFactoryObject) { abort!(\"unimpl\") }\n+    fn put(_value: ~IoFactoryObject) { abort!(\"unimpl\") }\n     fn take() -> ~IoFactoryObject { abort!(\"unimpl\") }\n     fn exists() -> bool { abort!(\"unimpl\") }\n-    fn borrow(f: &fn(&mut IoFactoryObject)) { abort!(\"unimpl\") }\n+    fn borrow(_f: &fn(&mut IoFactoryObject)) { abort!(\"unimpl\") }\n     unsafe fn unsafe_borrow() -> *mut IoFactoryObject {\n         let sched = Local::unsafe_borrow::<Scheduler>();\n         let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n@@ -115,4 +115,4 @@ mod test {\n         }\n         let _scheduler: ~Scheduler = Local::take();\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2d9cdaddc8433db2a48e94b8c27c17630e8497fc", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -20,7 +20,6 @@ use super::context::Context;\n use super::task::Task;\n use rt::local_ptr;\n use rt::local::Local;\n-use rt::rtio::IoFactoryObject;\n \n /// The Scheduler is responsible for coordinating execution of Coroutines\n /// on a single thread. When the scheduler is running it is owned by"}, {"sha": "cf4967b12b304f5f5950d36f8e277a3a8f216307", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -16,7 +16,6 @@\n use prelude::*;\n use libc::{c_void, uintptr_t};\n use cast::transmute;\n-use super::sched::Scheduler;\n use rt::local::Local;\n use super::local_heap::LocalHeap;\n use rt::logging::StdErrLogger;"}, {"sha": "3dae1291e0315022138b4967b52db972a268f828", "filename": "src/libstd/str.rs", "status": "modified", "additions": 269, "deletions": 276, "changes": 545, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -2794,31 +2794,31 @@ mod tests {\n \n     #[test]\n     fn test_len() {\n-        assert_eq!(len(~\"\"), 0u);\n-        assert_eq!(len(~\"hello world\"), 11u);\n-        assert_eq!(len(~\"\\x63\"), 1u);\n-        assert_eq!(len(~\"\\xa2\"), 2u);\n-        assert_eq!(len(~\"\\u03c0\"), 2u);\n-        assert_eq!(len(~\"\\u2620\"), 3u);\n-        assert_eq!(len(~\"\\U0001d11e\"), 4u);\n+        assert_eq!(len(\"\"), 0u);\n+        assert_eq!(len(\"hello world\"), 11u);\n+        assert_eq!(len(\"\\x63\"), 1u);\n+        assert_eq!(len(\"\\xa2\"), 2u);\n+        assert_eq!(len(\"\\u03c0\"), 2u);\n+        assert_eq!(len(\"\\u2620\"), 3u);\n+        assert_eq!(len(\"\\U0001d11e\"), 4u);\n \n-        assert_eq!(char_len(~\"\"), 0u);\n-        assert_eq!(char_len(~\"hello world\"), 11u);\n-        assert_eq!(char_len(~\"\\x63\"), 1u);\n-        assert_eq!(char_len(~\"\\xa2\"), 1u);\n-        assert_eq!(char_len(~\"\\u03c0\"), 1u);\n-        assert_eq!(char_len(~\"\\u2620\"), 1u);\n-        assert_eq!(char_len(~\"\\U0001d11e\"), 1u);\n-        assert_eq!(char_len(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"), 19u);\n+        assert_eq!(char_len(\"\"), 0u);\n+        assert_eq!(char_len(\"hello world\"), 11u);\n+        assert_eq!(char_len(\"\\x63\"), 1u);\n+        assert_eq!(char_len(\"\\xa2\"), 1u);\n+        assert_eq!(char_len(\"\\u03c0\"), 1u);\n+        assert_eq!(char_len(\"\\u2620\"), 1u);\n+        assert_eq!(char_len(\"\\U0001d11e\"), 1u);\n+        assert_eq!(char_len(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"), 19u);\n     }\n \n     #[test]\n     fn test_rfind_char() {\n-        assert_eq!(rfind_char(~\"hello\", 'l'), Some(3u));\n-        assert_eq!(rfind_char(~\"hello\", 'o'), Some(4u));\n-        assert_eq!(rfind_char(~\"hello\", 'h'), Some(0u));\n-        assert!(rfind_char(~\"hello\", 'z').is_none());\n-        assert_eq!(rfind_char(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e'), Some(30u));\n+        assert_eq!(rfind_char(\"hello\", 'l'), Some(3u));\n+        assert_eq!(rfind_char(\"hello\", 'o'), Some(4u));\n+        assert_eq!(rfind_char(\"hello\", 'h'), Some(0u));\n+        assert!(rfind_char(\"hello\", 'z').is_none());\n+        assert_eq!(rfind_char(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e'), Some(30u));\n     }\n \n     #[test]\n@@ -2848,127 +2848,126 @@ mod tests {\n     #[test]\n     fn test_split_char() {\n         fn t(s: &str, c: char, u: &[~str]) {\n-            debug!(~\"split_byte: \" + s);\n+            debug!(\"split_byte: %?\", s);\n             let mut v = ~[];\n             for each_split_char(s, c) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        t(~\"abc.hello.there\", '.', ~[~\"abc\", ~\"hello\", ~\"there\"]);\n-        t(~\".hello.there\", '.', ~[~\"\", ~\"hello\", ~\"there\"]);\n-        t(~\"...hello.there.\", '.', ~[~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n+        t(\"abc.hello.there\", '.', [~\"abc\", ~\"hello\", ~\"there\"]);\n+        t(\".hello.there\", '.', [~\"\", ~\"hello\", ~\"there\"]);\n+        t(\"...hello.there.\", '.', [~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n \n-        t(~\"\", 'z', ~[~\"\"]);\n-        t(~\"z\", 'z', ~[~\"\",~\"\"]);\n-        t(~\"ok\", 'z', ~[~\"ok\"]);\n+        t(\"\", 'z', [~\"\"]);\n+        t(\"z\", 'z', [~\"\",~\"\"]);\n+        t(\"ok\", 'z', [~\"ok\"]);\n     }\n \n     #[test]\n     fn test_split_char_2() {\n         fn t(s: &str, c: char, u: &[~str]) {\n-            debug!(~\"split_byte: \" + s);\n+            debug!(\"split_byte: %?\", s);\n             let mut v = ~[];\n             for each_split_char(s, c) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        t(data, 'V', ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n-        t(data, '\u0e17', ~[~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\", ~\"\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        t(data, 'V', [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n+        t(data, '\u0e17', [~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\", ~\"\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n     }\n \n     #[test]\n     fn test_splitn_char() {\n         fn t(s: &str, c: char, n: uint, u: &[~str]) {\n-            debug!(~\"splitn_byte: \" + s);\n+            debug!(\"splitn_byte: %?\", s);\n             let mut v = ~[];\n             for each_splitn_char(s, c, n) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             debug!(\"comparing vs. %?\", u);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        t(~\"abc.hello.there\", '.', 0u, ~[~\"abc.hello.there\"]);\n-        t(~\"abc.hello.there\", '.', 1u, ~[~\"abc\", ~\"hello.there\"]);\n-        t(~\"abc.hello.there\", '.', 2u, ~[~\"abc\", ~\"hello\", ~\"there\"]);\n-        t(~\"abc.hello.there\", '.', 3u, ~[~\"abc\", ~\"hello\", ~\"there\"]);\n-        t(~\".hello.there\", '.', 0u, ~[~\".hello.there\"]);\n-        t(~\".hello.there\", '.', 1u, ~[~\"\", ~\"hello.there\"]);\n-        t(~\"...hello.there.\", '.', 3u, ~[~\"\", ~\"\", ~\"\", ~\"hello.there.\"]);\n-        t(~\"...hello.there.\", '.', 5u, ~[~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n+        t(\"abc.hello.there\", '.', 0u, [~\"abc.hello.there\"]);\n+        t(\"abc.hello.there\", '.', 1u, [~\"abc\", ~\"hello.there\"]);\n+        t(\"abc.hello.there\", '.', 2u, [~\"abc\", ~\"hello\", ~\"there\"]);\n+        t(\"abc.hello.there\", '.', 3u, [~\"abc\", ~\"hello\", ~\"there\"]);\n+        t(\".hello.there\", '.', 0u, [~\".hello.there\"]);\n+        t(\".hello.there\", '.', 1u, [~\"\", ~\"hello.there\"]);\n+        t(\"...hello.there.\", '.', 3u, [~\"\", ~\"\", ~\"\", ~\"hello.there.\"]);\n+        t(\"...hello.there.\", '.', 5u, [~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n \n-        t(~\"\", 'z', 5u, ~[~\"\"]);\n-        t(~\"z\", 'z', 5u, ~[~\"\",~\"\"]);\n-        t(~\"ok\", 'z', 5u, ~[~\"ok\"]);\n-        t(~\"z\", 'z', 0u, ~[~\"z\"]);\n-        t(~\"w.x.y\", '.', 0u, ~[~\"w.x.y\"]);\n-        t(~\"w.x.y\", '.', 1u, ~[~\"w\",~\"x.y\"]);\n+        t(\"\", 'z', 5u, [~\"\"]);\n+        t(\"z\", 'z', 5u, [~\"\",~\"\"]);\n+        t(\"ok\", 'z', 5u, [~\"ok\"]);\n+        t(\"z\", 'z', 0u, [~\"z\"]);\n+        t(\"w.x.y\", '.', 0u, [~\"w.x.y\"]);\n+        t(\"w.x.y\", '.', 1u, [~\"w\",~\"x.y\"]);\n     }\n \n     #[test]\n-    fn test_splitn_char_2 () {\n+    fn test_splitn_char_2() {\n         fn t(s: &str, c: char, n: uint, u: &[~str]) {\n-            debug!(~\"splitn_byte: \" + s);\n+            debug!(\"splitn_byte: %?\", s);\n             let mut v = ~[];\n             for each_splitn_char(s, c, n) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             debug!(\"comparing vs. %?\", u);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n \n-        t(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e', 1u, ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n-        t(~\"zzXXXzYYYzWWWz\", 'z', 3u, ~[~\"\", ~\"\", ~\"XXX\", ~\"YYYzWWWz\"]);\n-        t(~\"z\", 'z', 5u, ~[~\"\",~\"\"]);\n-        t(~\"\", 'z', 5u, ~[~\"\"]);\n-        t(~\"ok\", 'z', 5u, ~[~\"ok\"]);\n+        t(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e', 1u, [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n+        t(\"zzXXXzYYYzWWWz\", 'z', 3u, [~\"\", ~\"\", ~\"XXX\", ~\"YYYzWWWz\"]);\n+        t(\"z\", 'z', 5u, [~\"\",~\"\"]);\n+        t(\"\", 'z', 5u, [~\"\"]);\n+        t(\"ok\", 'z', 5u, [~\"ok\"]);\n     }\n \n-\n     #[test]\n     fn test_splitn_char_3() {\n         fn t(s: &str, c: char, n: uint, u: &[~str]) {\n-            debug!(~\"splitn_byte: \" + s);\n+            debug!(\"splitn_byte: %?\", s);\n             let mut v = ~[];\n             for each_splitn_char(s, c, n) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             debug!(\"comparing vs. %?\", u);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        t(data, 'V', 1u, ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n-        t(data, '\u0e17', 1u, ~[~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        t(data, 'V', 1u, [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n+        t(data, '\u0e17', 1u, [~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n     }\n \n     #[test]\n     fn test_split_char_no_trailing() {\n         fn t(s: &str, c: char, u: &[~str]) {\n-            debug!(~\"split_byte: \" + s);\n+            debug!(\"split_byte: %?\", s);\n             let mut v = ~[];\n             for each_split_char_no_trailing(s, c) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        t(~\"abc.hello.there\", '.', ~[~\"abc\", ~\"hello\", ~\"there\"]);\n-        t(~\".hello.there\", '.', ~[~\"\", ~\"hello\", ~\"there\"]);\n-        t(~\"...hello.there.\", '.', ~[~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\"]);\n+        t(\"abc.hello.there\", '.', [~\"abc\", ~\"hello\", ~\"there\"]);\n+        t(\".hello.there\", '.', [~\"\", ~\"hello\", ~\"there\"]);\n+        t(\"...hello.there.\", '.', [~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\"]);\n \n-        t(~\"...hello.there.\", '.', ~[~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\"]);\n-        t(~\"\", 'z', ~[]);\n-        t(~\"z\", 'z', ~[~\"\"]);\n-        t(~\"ok\", 'z', ~[~\"ok\"]);\n+        t(\"...hello.there.\", '.', [~\"\", ~\"\", ~\"\", ~\"hello\", ~\"there\"]);\n+        t(\"\", 'z', []);\n+        t(\"z\", 'z', [~\"\"]);\n+        t(\"ok\", 'z', [~\"ok\"]);\n     }\n \n     #[test]\n     fn test_split_char_no_trailing_2() {\n         fn t(s: &str, c: char, u: &[~str]) {\n-            debug!(~\"split_byte: \" + s);\n+            debug!(\"split_byte: %?\", s);\n             let mut v = ~[];\n             for each_split_char_no_trailing(s, c) |s| { v.push(s.to_owned()) }\n             debug!(\"split_byte to: %?\", v);\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        t(data, 'V', ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n-        t(data, '\u0e17', ~[~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\", ~\"\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        t(data, 'V', [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\", ~\"i\u1ec7t Nam\"]);\n+        t(data, '\u0e17', [~\"\u0e1b\u0e23\u0e30\u0e40\", ~\"\u0e28\u0e44\", ~\"\u0e22\u4e2d\u534eVi\u1ec7t Nam\"]);\n     }\n \n     #[test]\n@@ -2978,20 +2977,20 @@ mod tests {\n             for each_split_str(s, sep) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        t(~\"--1233345--\", ~\"12345\", ~[~\"--1233345--\"]);\n-        t(~\"abc::hello::there\", ~\"::\", ~[~\"abc\", ~\"hello\", ~\"there\"]);\n-        t(~\"::hello::there\", ~\"::\", ~[~\"\", ~\"hello\", ~\"there\"]);\n-        t(~\"hello::there::\", ~\"::\", ~[~\"hello\", ~\"there\", ~\"\"]);\n-        t(~\"::hello::there::\", ~\"::\", ~[~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n-        t(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", ~\"\u4e2d\u534e\", ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\", ~\"Vi\u1ec7t Nam\"]);\n-        t(~\"zzXXXzzYYYzz\", ~\"zz\", ~[~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n-        t(~\"zzXXXzYYYz\", ~\"XXX\", ~[~\"zz\", ~\"zYYYz\"]);\n-        t(~\".XXX.YYY.\", ~\".\", ~[~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n-        t(~\"\", ~\".\", ~[~\"\"]);\n-        t(~\"zz\", ~\"zz\", ~[~\"\",~\"\"]);\n-        t(~\"ok\", ~\"z\", ~[~\"ok\"]);\n-        t(~\"zzz\", ~\"zz\", ~[~\"\",~\"z\"]);\n-        t(~\"zzzzz\", ~\"zz\", ~[~\"\",~\"\",~\"z\"]);\n+        t(\"--1233345--\", \"12345\", [~\"--1233345--\"]);\n+        t(\"abc::hello::there\", \"::\", [~\"abc\", ~\"hello\", ~\"there\"]);\n+        t(\"::hello::there\", \"::\", [~\"\", ~\"hello\", ~\"there\"]);\n+        t(\"hello::there::\", \"::\", [~\"hello\", ~\"there\", ~\"\"]);\n+        t(\"::hello::there::\", \"::\", [~\"\", ~\"hello\", ~\"there\", ~\"\"]);\n+        t(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", \"\u4e2d\u534e\", [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\", ~\"Vi\u1ec7t Nam\"]);\n+        t(\"zzXXXzzYYYzz\", \"zz\", [~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n+        t(\"zzXXXzYYYz\", \"XXX\", [~\"zz\", ~\"zYYYz\"]);\n+        t(\".XXX.YYY.\", \".\", [~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n+        t(\"\", \".\", [~\"\"]);\n+        t(\"zz\", \"zz\", [~\"\",~\"\"]);\n+        t(\"ok\", \"z\", [~\"ok\"]);\n+        t(\"zzz\", \"zz\", [~\"\",~\"z\"]);\n+        t(\"zzzzz\", \"zz\", [~\"\",~\"\",~\"z\"]);\n     }\n \n \n@@ -3003,12 +3002,12 @@ mod tests {\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n \n-        t(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |cc| cc == '\u534e', ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n-        t(~\"zzXXXzYYYz\", char::is_lowercase, ~[~\"\", ~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n-        t(~\"zzXXXzYYYz\", char::is_uppercase, ~[~\"zz\", ~\"\", ~\"\", ~\"z\", ~\"\", ~\"\", ~\"z\"]);\n-        t(~\"z\", |cc| cc == 'z', ~[~\"\",~\"\"]);\n-        t(~\"\", |cc| cc == 'z', ~[~\"\"]);\n-        t(~\"ok\", |cc| cc == 'z', ~[~\"ok\"]);\n+        t(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |cc| cc == '\u534e', [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n+        t(\"zzXXXzYYYz\", char::is_lowercase, [~\"\", ~\"\", ~\"XXX\", ~\"YYY\", ~\"\"]);\n+        t(\"zzXXXzYYYz\", char::is_uppercase, [~\"zz\", ~\"\", ~\"\", ~\"z\", ~\"\", ~\"\", ~\"z\"]);\n+        t(\"z\", |cc| cc == 'z', [~\"\",~\"\"]);\n+        t(\"\", |cc| cc == 'z', [~\"\"]);\n+        t(\"ok\", |cc| cc == 'z', [~\"ok\"]);\n     }\n \n     #[test]\n@@ -3019,49 +3018,49 @@ mod tests {\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n \n-        t(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |cc| cc == '\u534e', ~[~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n-        t(~\"zzXXXzYYYz\", char::is_lowercase, ~[~\"\", ~\"\", ~\"XXX\", ~\"YYY\"]);\n-        t(~\"zzXXXzYYYz\", char::is_uppercase, ~[~\"zz\", ~\"\", ~\"\", ~\"z\", ~\"\", ~\"\", ~\"z\"]);\n-        t(~\"z\", |cc| cc == 'z', ~[~\"\"]);\n-        t(~\"\", |cc| cc == 'z', ~[]);\n-        t(~\"ok\", |cc| cc == 'z', ~[~\"ok\"]);\n+        t(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |cc| cc == '\u534e', [~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"Vi\u1ec7t Nam\"]);\n+        t(\"zzXXXzYYYz\", char::is_lowercase, [~\"\", ~\"\", ~\"XXX\", ~\"YYY\"]);\n+        t(\"zzXXXzYYYz\", char::is_uppercase, [~\"zz\", ~\"\", ~\"\", ~\"z\", ~\"\", ~\"\", ~\"z\"]);\n+        t(\"z\", |cc| cc == 'z', [~\"\"]);\n+        t(\"\", |cc| cc == 'z', []);\n+        t(\"ok\", |cc| cc == 'z', [~\"ok\"]);\n     }\n \n     #[test]\n     fn test_lines() {\n-        let lf = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n-        let crlf = ~\"\\r\\nMary had a little lamb\\r\\nLittle lamb\\r\\n\";\n+        let lf = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let crlf = \"\\r\\nMary had a little lamb\\r\\nLittle lamb\\r\\n\";\n \n         fn t(s: &str, f: &fn(&str, &fn(&str) -> bool) -> bool, u: &[~str]) {\n             let mut v = ~[];\n             for f(s) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n \n-        t(lf, each_line ,~[~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n-        t(lf, each_line_any, ~[~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n-        t(crlf, each_line, ~[~\"\\r\", ~\"Mary had a little lamb\\r\", ~\"Little lamb\\r\"]);\n-        t(crlf, each_line_any, ~[~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n-        t(~\"\", each_line, ~[]);\n-        t(~\"\", each_line_any, ~[]);\n-        t(~\"\\n\", each_line, ~[~\"\"]);\n-        t(~\"\\n\", each_line_any, ~[~\"\"]);\n-        t(~\"banana\", each_line, ~[~\"banana\"]);\n-        t(~\"banana\", each_line_any, ~[~\"banana\"]);\n+        t(lf, each_line, [~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n+        t(lf, each_line_any, [~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n+        t(crlf, each_line, [~\"\\r\", ~\"Mary had a little lamb\\r\", ~\"Little lamb\\r\"]);\n+        t(crlf, each_line_any, [~\"\", ~\"Mary had a little lamb\", ~\"Little lamb\"]);\n+        t(\"\", each_line, []);\n+        t(\"\", each_line_any, []);\n+        t(\"\\n\", each_line, [~\"\"]);\n+        t(\"\\n\", each_line_any, [~\"\"]);\n+        t(\"banana\", each_line, [~\"banana\"]);\n+        t(\"banana\", each_line_any, [~\"banana\"]);\n     }\n \n     #[test]\n-    fn test_words () {\n+    fn test_words() {\n         fn t(s: &str, f: &fn(&str, &fn(&str) -> bool) -> bool, u: &[~str]) {\n             let mut v = ~[];\n             for f(s) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        let data = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n-        t(data, each_word, ~[~\"Mary\",~\"had\",~\"a\",~\"little\",~\"lamb\",~\"Little\",~\"lamb\"]);\n-        t(~\"ok\", each_word, ~[~\"ok\"]);\n-        t(~\"\", each_word, ~[]);\n+        t(data, each_word, [~\"Mary\",~\"had\",~\"a\",~\"little\",~\"lamb\",~\"Little\",~\"lamb\"]);\n+        t(\"ok\", each_word, [~\"ok\"]);\n+        t(\"\", each_word, []);\n     }\n \n     #[test]\n@@ -3071,53 +3070,53 @@ mod tests {\n             for each_split_within(s, i) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));\n         }\n-        t(~\"\", 0, ~[]);\n-        t(~\"\", 15, ~[]);\n-        t(~\"hello\", 15, ~[~\"hello\"]);\n-        t(~\"\\nMary had a little lamb\\nLittle lamb\\n\", 15,\n-            ~[~\"Mary had a\", ~\"little lamb\", ~\"Little lamb\"]);\n+        t(\"\", 0, []);\n+        t(\"\", 15, []);\n+        t(\"hello\", 15, [~\"hello\"]);\n+        t(\"\\nMary had a little lamb\\nLittle lamb\\n\", 15,\n+            [~\"Mary had a\", ~\"little lamb\", ~\"Little lamb\"]);\n     }\n \n     #[test]\n     fn test_find_str() {\n         // byte positions\n-        assert!(find_str(~\"banana\", ~\"apple pie\").is_none());\n-        assert_eq!(find_str(~\"\", ~\"\"), Some(0u));\n+        assert!(find_str(\"banana\", \"apple pie\").is_none());\n+        assert_eq!(find_str(\"\", \"\"), Some(0u));\n \n-        let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert_eq!(find_str(data, ~\"\"), Some(0u));\n-        assert_eq!(find_str(data, ~\"\u0e1b\u0e23\u0e30\u0e40\"), Some( 0u));\n-        assert_eq!(find_str(data, ~\"\u0e30\u0e40\"), Some( 6u));\n-        assert_eq!(find_str(data, ~\"\u4e2d\u534e\"), Some(27u));\n-        assert!(find_str(data, ~\"\u0e44\u0e17\u534e\").is_none());\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert_eq!(find_str(data, \"\"), Some(0u));\n+        assert_eq!(find_str(data, \"\u0e1b\u0e23\u0e30\u0e40\"), Some( 0u));\n+        assert_eq!(find_str(data, \"\u0e30\u0e40\"), Some( 6u));\n+        assert_eq!(find_str(data, \"\u4e2d\u534e\"), Some(27u));\n+        assert!(find_str(data, \"\u0e44\u0e17\u534e\").is_none());\n     }\n \n     #[test]\n     fn test_find_str_between() {\n         // byte positions\n-        assert_eq!(find_str_between(~\"\", ~\"\", 0u, 0u), Some(0u));\n+        assert_eq!(find_str_between(\"\", \"\", 0u, 0u), Some(0u));\n \n-        let data = ~\"abcabc\";\n-        assert_eq!(find_str_between(data, ~\"ab\", 0u, 6u), Some(0u));\n-        assert_eq!(find_str_between(data, ~\"ab\", 2u, 6u), Some(3u));\n-        assert!(find_str_between(data, ~\"ab\", 2u, 4u).is_none());\n+        let data = \"abcabc\";\n+        assert_eq!(find_str_between(data, \"ab\", 0u, 6u), Some(0u));\n+        assert_eq!(find_str_between(data, \"ab\", 2u, 6u), Some(3u));\n+        assert!(find_str_between(data, \"ab\", 2u, 4u).is_none());\n \n         let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         data = data + data;\n-        assert_eq!(find_str_between(data, ~\"\", 0u, 43u), Some(0u));\n-        assert_eq!(find_str_between(data, ~\"\", 6u, 43u), Some(6u));\n+        assert_eq!(find_str_between(data, \"\", 0u, 43u), Some(0u));\n+        assert_eq!(find_str_between(data, \"\", 6u, 43u), Some(6u));\n \n-        assert_eq!(find_str_between(data, ~\"\u0e1b\u0e23\u0e30\", 0u, 43u), Some( 0u));\n-        assert_eq!(find_str_between(data, ~\"\u0e17\u0e28\u0e44\", 0u, 43u), Some(12u));\n-        assert_eq!(find_str_between(data, ~\"\u0e22\u4e2d\", 0u, 43u), Some(24u));\n-        assert_eq!(find_str_between(data, ~\"i\u1ec7t\", 0u, 43u), Some(34u));\n-        assert_eq!(find_str_between(data, ~\"Nam\", 0u, 43u), Some(40u));\n+        assert_eq!(find_str_between(data, \"\u0e1b\u0e23\u0e30\", 0u, 43u), Some( 0u));\n+        assert_eq!(find_str_between(data, \"\u0e17\u0e28\u0e44\", 0u, 43u), Some(12u));\n+        assert_eq!(find_str_between(data, \"\u0e22\u4e2d\", 0u, 43u), Some(24u));\n+        assert_eq!(find_str_between(data, \"i\u1ec7t\", 0u, 43u), Some(34u));\n+        assert_eq!(find_str_between(data, \"Nam\", 0u, 43u), Some(40u));\n \n-        assert_eq!(find_str_between(data, ~\"\u0e1b\u0e23\u0e30\", 43u, 86u), Some(43u));\n-        assert_eq!(find_str_between(data, ~\"\u0e17\u0e28\u0e44\", 43u, 86u), Some(55u));\n-        assert_eq!(find_str_between(data, ~\"\u0e22\u4e2d\", 43u, 86u), Some(67u));\n-        assert_eq!(find_str_between(data, ~\"i\u1ec7t\", 43u, 86u), Some(77u));\n-        assert_eq!(find_str_between(data, ~\"Nam\", 43u, 86u), Some(83u));\n+        assert_eq!(find_str_between(data, \"\u0e1b\u0e23\u0e30\", 43u, 86u), Some(43u));\n+        assert_eq!(find_str_between(data, \"\u0e17\u0e28\u0e44\", 43u, 86u), Some(55u));\n+        assert_eq!(find_str_between(data, \"\u0e22\u4e2d\", 43u, 86u), Some(67u));\n+        assert_eq!(find_str_between(data, \"i\u1ec7t\", 43u, 86u), Some(77u));\n+        assert_eq!(find_str_between(data, \"Nam\", 43u, 86u), Some(83u));\n     }\n \n     #[test]\n@@ -3135,22 +3134,22 @@ mod tests {\n         fn t(v: &[~str], s: &str) {\n             assert_eq!(concat(v), s.to_str());\n         }\n-        t(~[~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"], ~\"youknowI'mnogood\");\n-        let v: ~[~str] = ~[];\n-        t(v, ~\"\");\n-        t(~[~\"hi\"], ~\"hi\");\n+        t([~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"], \"youknowI'mnogood\");\n+        let v: &[~str] = [];\n+        t(v, \"\");\n+        t([~\"hi\"], \"hi\");\n     }\n \n     #[test]\n     fn test_connect() {\n         fn t(v: &[~str], sep: &str, s: &str) {\n             assert_eq!(connect(v, sep), s.to_str());\n         }\n-        t(~[~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"],\n-          ~\" \", ~\"you know I'm no good\");\n-        let v: ~[~str] = ~[];\n-        t(v, ~\" \", ~\"\");\n-        t(~[~\"hi\"], ~\" \", ~\"hi\");\n+        t([~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"],\n+          \" \", \"you know I'm no good\");\n+        let v: &[~str] = ~[];\n+        t(v, \" \", \"\");\n+        t([~\"hi\"], \" \", \"hi\");\n     }\n \n     #[test]\n@@ -3166,11 +3165,11 @@ mod tests {\n \n     #[test]\n     fn test_repeat() {\n-        assert_eq!(repeat(~\"x\", 4), ~\"xxxx\");\n-        assert_eq!(repeat(~\"hi\", 4), ~\"hihihihi\");\n-        assert_eq!(repeat(~\"\u0e44\u0e17\u534e\", 3), ~\"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\");\n-        assert_eq!(repeat(~\"\", 4), ~\"\");\n-        assert_eq!(repeat(~\"hi\", 0), ~\"\");\n+        assert_eq!(repeat(\"x\", 4), ~\"xxxx\");\n+        assert_eq!(repeat(\"hi\", 4), ~\"hihihihi\");\n+        assert_eq!(repeat(\"\u0e44\u0e17\u534e\", 3), ~\"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\");\n+        assert_eq!(repeat(\"\", 4), ~\"\");\n+        assert_eq!(repeat(\"hi\", 0), ~\"\");\n     }\n \n     #[test]\n@@ -3197,38 +3196,38 @@ mod tests {\n \n     #[test]\n     fn test_starts_with() {\n-        assert!((starts_with(~\"\", ~\"\")));\n-        assert!((starts_with(~\"abc\", ~\"\")));\n-        assert!((starts_with(~\"abc\", ~\"a\")));\n-        assert!((!starts_with(~\"a\", ~\"abc\")));\n-        assert!((!starts_with(~\"\", ~\"abc\")));\n+        assert!((starts_with(\"\", \"\")));\n+        assert!((starts_with(\"abc\", \"\")));\n+        assert!((starts_with(\"abc\", \"a\")));\n+        assert!((!starts_with(\"a\", \"abc\")));\n+        assert!((!starts_with(\"\", \"abc\")));\n     }\n \n     #[test]\n     fn test_ends_with() {\n-        assert!((ends_with(~\"\", ~\"\")));\n-        assert!((ends_with(~\"abc\", ~\"\")));\n-        assert!((ends_with(~\"abc\", ~\"c\")));\n-        assert!((!ends_with(~\"a\", ~\"abc\")));\n-        assert!((!ends_with(~\"\", ~\"abc\")));\n+        assert!((ends_with(\"\", \"\")));\n+        assert!((ends_with(\"abc\", \"\")));\n+        assert!((ends_with(\"abc\", \"c\")));\n+        assert!((!ends_with(\"a\", \"abc\")));\n+        assert!((!ends_with(\"\", \"abc\")));\n     }\n \n     #[test]\n     fn test_is_empty() {\n-        assert!((is_empty(~\"\")));\n-        assert!((!is_empty(~\"a\")));\n+        assert!((is_empty(\"\")));\n+        assert!((!is_empty(\"a\")));\n     }\n \n     #[test]\n     fn test_replace() {\n-        let a = ~\"a\";\n-        assert_eq!(replace(~\"\", a, ~\"b\"), ~\"\");\n-        assert_eq!(replace(~\"a\", a, ~\"b\"), ~\"b\");\n-        assert_eq!(replace(~\"ab\", a, ~\"b\"), ~\"bb\");\n-        let test = ~\"test\";\n-        assert!(replace(~\" test test \", test, ~\"toast\") ==\n+        let a = \"a\";\n+        assert_eq!(replace(\"\", a, \"b\"), ~\"\");\n+        assert_eq!(replace(\"a\", a, \"b\"), ~\"b\");\n+        assert_eq!(replace(\"ab\", a, \"b\"), ~\"bb\");\n+        let test = \"test\";\n+        assert!(replace(\" test test \", test, \"toast\") ==\n             ~\" toast toast \");\n-        assert_eq!(replace(~\" test test \", test, ~\"\"), ~\"   \");\n+        assert_eq!(replace(\" test test \", test, \"\"), ~\"   \");\n     }\n \n     #[test]\n@@ -3338,32 +3337,26 @@ mod tests {\n \n     #[test]\n     fn test_trim_left_chars() {\n-        assert!(trim_left_chars(\" *** foo *** \", ~[]) ==\n-                     \" *** foo *** \");\n-        assert!(trim_left_chars(\" *** foo *** \", ~['*', ' ']) ==\n-                     \"foo *** \");\n-        assert_eq!(trim_left_chars(\" ***  *** \", ~['*', ' ']), \"\");\n-        assert!(trim_left_chars(\"foo *** \", ~['*', ' ']) ==\n-                     \"foo *** \");\n+        assert!(trim_left_chars(\" *** foo *** \", []) == \" *** foo *** \");\n+        assert!(trim_left_chars(\" *** foo *** \", ['*', ' ']) == \"foo *** \");\n+        assert_eq!(trim_left_chars(\" ***  *** \", ['*', ' ']), \"\");\n+        assert!(trim_left_chars(\"foo *** \", ['*', ' ']) == \"foo *** \");\n     }\n \n     #[test]\n     fn test_trim_right_chars() {\n-        assert!(trim_right_chars(\" *** foo *** \", ~[]) ==\n-                     \" *** foo *** \");\n-        assert!(trim_right_chars(\" *** foo *** \", ~['*', ' ']) ==\n-                     \" *** foo\");\n-        assert_eq!(trim_right_chars(\" ***  *** \", ~['*', ' ']), \"\");\n-        assert!(trim_right_chars(\" *** foo\", ~['*', ' ']) ==\n-                     \" *** foo\");\n+        assert!(trim_right_chars(\" *** foo *** \", []) == \" *** foo *** \");\n+        assert!(trim_right_chars(\" *** foo *** \", ['*', ' ']) == \" *** foo\");\n+        assert_eq!(trim_right_chars(\" ***  *** \", ['*', ' ']), \"\");\n+        assert!(trim_right_chars(\" *** foo\", ['*', ' ']) == \" *** foo\");\n     }\n \n     #[test]\n     fn test_trim_chars() {\n-        assert_eq!(trim_chars(\" *** foo *** \", ~[]), \" *** foo *** \");\n-        assert_eq!(trim_chars(\" *** foo *** \", ~['*', ' ']), \"foo\");\n-        assert_eq!(trim_chars(\" ***  *** \", ~['*', ' ']), \"\");\n-        assert_eq!(trim_chars(\"foo\", ~['*', ' ']), \"foo\");\n+        assert_eq!(trim_chars(\" *** foo *** \", []), \" *** foo *** \");\n+        assert_eq!(trim_chars(\" *** foo *** \", ['*', ' ']), \"foo\");\n+        assert_eq!(trim_chars(\" ***  *** \", ['*', ' ']), \"\");\n+        assert_eq!(trim_chars(\"foo\", ['*', ' ']), \"foo\");\n     }\n \n     #[test]\n@@ -3398,11 +3391,11 @@ mod tests {\n \n     #[test]\n     fn test_is_whitespace() {\n-        assert!((is_whitespace(~\"\")));\n-        assert!((is_whitespace(~\" \")));\n-        assert!((is_whitespace(~\"\\u2009\"))); // Thin space\n-        assert!((is_whitespace(~\"  \\n\\t   \")));\n-        assert!((!is_whitespace(~\"   _   \")));\n+        assert!(is_whitespace(\"\"));\n+        assert!(is_whitespace(\" \"));\n+        assert!(is_whitespace(\"\\u2009\")); // Thin space\n+        assert!(is_whitespace(\"  \\n\\t   \"));\n+        assert!(!is_whitespace(\"   _   \"));\n     }\n \n     #[test]\n@@ -3543,7 +3536,7 @@ mod tests {\n \n     #[test]\n     fn test_as_buf() {\n-        let a = ~\"Abcdefg\";\n+        let a = \"Abcdefg\";\n         let b = as_buf(a, |buf, _l| {\n             assert_eq!(unsafe { *buf }, 65u8);\n             100\n@@ -3553,7 +3546,7 @@ mod tests {\n \n     #[test]\n     fn test_as_buf_small() {\n-        let a = ~\"A\";\n+        let a = \"A\";\n         let b = as_buf(a, |buf, _l| {\n             assert_eq!(unsafe { *buf }, 65u8);\n             100\n@@ -3631,32 +3624,32 @@ mod tests {\n \n     #[test]\n     fn test_contains() {\n-        assert!(contains(~\"abcde\", ~\"bcd\"));\n-        assert!(contains(~\"abcde\", ~\"abcd\"));\n-        assert!(contains(~\"abcde\", ~\"bcde\"));\n-        assert!(contains(~\"abcde\", ~\"\"));\n-        assert!(contains(~\"\", ~\"\"));\n-        assert!(!contains(~\"abcde\", ~\"def\"));\n-        assert!(!contains(~\"\", ~\"a\"));\n+        assert!(contains(\"abcde\", \"bcd\"));\n+        assert!(contains(\"abcde\", \"abcd\"));\n+        assert!(contains(\"abcde\", \"bcde\"));\n+        assert!(contains(\"abcde\", \"\"));\n+        assert!(contains(\"\", \"\"));\n+        assert!(!contains(\"abcde\", \"def\"));\n+        assert!(!contains(\"\", \"a\"));\n \n         let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert!(contains(data, ~\"\u0e1b\u0e23\u0e30\u0e40\"));\n-        assert!(contains(data, ~\"\u0e30\u0e40\"));\n-        assert!(contains(data, ~\"\u4e2d\u534e\"));\n-        assert!(!contains(data, ~\"\u0e44\u0e17\u534e\"));\n+        assert!(contains(data, \"\u0e1b\u0e23\u0e30\u0e40\"));\n+        assert!(contains(data, \"\u0e30\u0e40\"));\n+        assert!(contains(data, \"\u4e2d\u534e\"));\n+        assert!(!contains(data, \"\u0e44\u0e17\u534e\"));\n     }\n \n     #[test]\n     fn test_contains_char() {\n-        assert!(contains_char(~\"abc\", 'b'));\n-        assert!(contains_char(~\"a\", 'a'));\n-        assert!(!contains_char(~\"abc\", 'd'));\n-        assert!(!contains_char(~\"\", 'a'));\n+        assert!(contains_char(\"abc\", 'b'));\n+        assert!(contains_char(\"a\", 'a'));\n+        assert!(!contains_char(\"abc\", 'd'));\n+        assert!(!contains_char(\"\", 'a'));\n     }\n \n     #[test]\n     fn test_split_char_each() {\n-        let data = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n         let mut ii = 0;\n \n@@ -3674,7 +3667,7 @@ mod tests {\n \n     #[test]\n     fn test_splitn_char_each() {\n-        let data = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n         let mut ii = 0;\n \n@@ -3691,7 +3684,7 @@ mod tests {\n \n     #[test]\n     fn test_words_each() {\n-        let data = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n         let mut ii = 0;\n \n@@ -3706,12 +3699,12 @@ mod tests {\n             ii += 1;\n         }\n \n-        each_word(~\"\", |_x| fail!()); // should not fail\n+        each_word(\"\", |_x| fail!()); // should not fail\n     }\n \n     #[test]\n     fn test_lines_each () {\n-        let lf = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n+        let lf = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n         let mut ii = 0;\n \n@@ -3728,26 +3721,26 @@ mod tests {\n \n     #[test]\n     fn test_map() {\n-        assert_eq!(~\"\", map(~\"\", |c| unsafe {libc::toupper(c as c_char)} as char));\n-        assert_eq!(~\"YMCA\", map(~\"ymca\", |c| unsafe {libc::toupper(c as c_char)} as char));\n+        assert_eq!(~\"\", map(\"\", |c| unsafe {libc::toupper(c as c_char)} as char));\n+        assert_eq!(~\"YMCA\", map(\"ymca\", |c| unsafe {libc::toupper(c as c_char)} as char));\n     }\n \n     #[test]\n     fn test_all() {\n-        assert_eq!(true, all(~\"\", char::is_uppercase));\n-        assert_eq!(false, all(~\"ymca\", char::is_uppercase));\n-        assert_eq!(true, all(~\"YMCA\", char::is_uppercase));\n-        assert_eq!(false, all(~\"yMCA\", char::is_uppercase));\n-        assert_eq!(false, all(~\"YMCy\", char::is_uppercase));\n+        assert_eq!(true, all(\"\", char::is_uppercase));\n+        assert_eq!(false, all(\"ymca\", char::is_uppercase));\n+        assert_eq!(true, all(\"YMCA\", char::is_uppercase));\n+        assert_eq!(false, all(\"yMCA\", char::is_uppercase));\n+        assert_eq!(false, all(\"YMCy\", char::is_uppercase));\n     }\n \n     #[test]\n     fn test_any() {\n-        assert_eq!(false, any(~\"\", char::is_uppercase));\n-        assert_eq!(false, any(~\"ymca\", char::is_uppercase));\n-        assert_eq!(true, any(~\"YMCA\", char::is_uppercase));\n-        assert_eq!(true, any(~\"yMCA\", char::is_uppercase));\n-        assert_eq!(true, any(~\"Ymcy\", char::is_uppercase));\n+        assert_eq!(false, any(\"\", char::is_uppercase));\n+        assert_eq!(false, any(\"ymca\", char::is_uppercase));\n+        assert_eq!(true, any(\"YMCA\", char::is_uppercase));\n+        assert_eq!(true, any(\"yMCA\", char::is_uppercase));\n+        assert_eq!(true, any(\"Ymcy\", char::is_uppercase));\n     }\n \n     #[test]\n@@ -3761,41 +3754,41 @@ mod tests {\n     #[test]\n     fn test_utf16() {\n         let pairs =\n-            ~[(~\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\",\n+            [(~\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\",\n               ~[0xd800_u16, 0xdf45_u16, 0xd800_u16, 0xdf3f_u16,\n-               0xd800_u16, 0xdf3b_u16, 0xd800_u16, 0xdf46_u16,\n-               0xd800_u16, 0xdf39_u16, 0xd800_u16, 0xdf3b_u16,\n-               0xd800_u16, 0xdf30_u16, 0x000a_u16]),\n+                0xd800_u16, 0xdf3b_u16, 0xd800_u16, 0xdf46_u16,\n+                0xd800_u16, 0xdf39_u16, 0xd800_u16, 0xdf3b_u16,\n+                0xd800_u16, 0xdf30_u16, 0x000a_u16]),\n \n              (~\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\",\n               ~[0xd801_u16, 0xdc12_u16, 0xd801_u16,\n-               0xdc49_u16, 0xd801_u16, 0xdc2e_u16, 0xd801_u16,\n-               0xdc40_u16, 0xd801_u16, 0xdc32_u16, 0xd801_u16,\n-               0xdc4b_u16, 0x0020_u16, 0xd801_u16, 0xdc0f_u16,\n-               0xd801_u16, 0xdc32_u16, 0xd801_u16, 0xdc4d_u16,\n-               0x000a_u16]),\n+                0xdc49_u16, 0xd801_u16, 0xdc2e_u16, 0xd801_u16,\n+                0xdc40_u16, 0xd801_u16, 0xdc32_u16, 0xd801_u16,\n+                0xdc4b_u16, 0x0020_u16, 0xd801_u16, 0xdc0f_u16,\n+                0xd801_u16, 0xdc32_u16, 0xd801_u16, 0xdc4d_u16,\n+                0x000a_u16]),\n \n              (~\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\",\n               ~[0xd800_u16, 0xdf00_u16, 0xd800_u16, 0xdf16_u16,\n-               0xd800_u16, 0xdf0b_u16, 0xd800_u16, 0xdf04_u16,\n-               0xd800_u16, 0xdf11_u16, 0xd800_u16, 0xdf09_u16,\n-               0x00b7_u16, 0xd800_u16, 0xdf0c_u16, 0xd800_u16,\n-               0xdf04_u16, 0xd800_u16, 0xdf15_u16, 0xd800_u16,\n-               0xdf04_u16, 0xd800_u16, 0xdf0b_u16, 0xd800_u16,\n-               0xdf09_u16, 0xd800_u16, 0xdf11_u16, 0x000a_u16 ]),\n+                0xd800_u16, 0xdf0b_u16, 0xd800_u16, 0xdf04_u16,\n+                0xd800_u16, 0xdf11_u16, 0xd800_u16, 0xdf09_u16,\n+                0x00b7_u16, 0xd800_u16, 0xdf0c_u16, 0xd800_u16,\n+                0xdf04_u16, 0xd800_u16, 0xdf15_u16, 0xd800_u16,\n+                0xdf04_u16, 0xd800_u16, 0xdf0b_u16, 0xd800_u16,\n+                0xdf09_u16, 0xd800_u16, 0xdf11_u16, 0x000a_u16 ]),\n \n              (~\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\",\n               ~[0xd801_u16, 0xdc8b_u16, 0xd801_u16, 0xdc98_u16,\n-               0xd801_u16, 0xdc88_u16, 0xd801_u16, 0xdc91_u16,\n-               0xd801_u16, 0xdc9b_u16, 0xd801_u16, 0xdc92_u16,\n-               0x0020_u16, 0xd801_u16, 0xdc95_u16, 0xd801_u16,\n-               0xdc93_u16, 0x0020_u16, 0xd801_u16, 0xdc88_u16,\n-               0xd801_u16, 0xdc9a_u16, 0xd801_u16, 0xdc8d_u16,\n-               0x0020_u16, 0xd801_u16, 0xdc8f_u16, 0xd801_u16,\n-               0xdc9c_u16, 0xd801_u16, 0xdc92_u16, 0xd801_u16,\n-               0xdc96_u16, 0xd801_u16, 0xdc86_u16, 0x0020_u16,\n-               0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n-               0x000a_u16 ]) ];\n+                0xd801_u16, 0xdc88_u16, 0xd801_u16, 0xdc91_u16,\n+                0xd801_u16, 0xdc9b_u16, 0xd801_u16, 0xdc92_u16,\n+                0x0020_u16, 0xd801_u16, 0xdc95_u16, 0xd801_u16,\n+                0xdc93_u16, 0x0020_u16, 0xd801_u16, 0xdc88_u16,\n+                0xd801_u16, 0xdc9a_u16, 0xd801_u16, 0xdc8d_u16,\n+                0x0020_u16, 0xd801_u16, 0xdc8f_u16, 0xd801_u16,\n+                0xdc9c_u16, 0xd801_u16, 0xdc92_u16, 0xd801_u16,\n+                0xdc96_u16, 0xd801_u16, 0xdc86_u16, 0x0020_u16,\n+                0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n+                0x000a_u16 ]) ];\n \n         for pairs.each |p| {\n             let (s, u) = copy *p;\n@@ -3972,35 +3965,35 @@ mod tests {\n \n     #[test]\n     fn test_escape_unicode() {\n-        assert_eq!(escape_unicode(~\"abc\"), ~\"\\\\x61\\\\x62\\\\x63\");\n-        assert_eq!(escape_unicode(~\"a c\"), ~\"\\\\x61\\\\x20\\\\x63\");\n-        assert_eq!(escape_unicode(~\"\\r\\n\\t\"), ~\"\\\\x0d\\\\x0a\\\\x09\");\n-        assert_eq!(escape_unicode(~\"'\\\"\\\\\"), ~\"\\\\x27\\\\x22\\\\x5c\");\n-        assert!(escape_unicode(~\"\\x00\\x01\\xfe\\xff\") ==\n+        assert_eq!(escape_unicode(\"abc\"), ~\"\\\\x61\\\\x62\\\\x63\");\n+        assert_eq!(escape_unicode(\"a c\"), ~\"\\\\x61\\\\x20\\\\x63\");\n+        assert_eq!(escape_unicode(\"\\r\\n\\t\"), ~\"\\\\x0d\\\\x0a\\\\x09\");\n+        assert_eq!(escape_unicode(\"'\\\"\\\\\"), ~\"\\\\x27\\\\x22\\\\x5c\");\n+        assert!(escape_unicode(\"\\x00\\x01\\xfe\\xff\") ==\n                      ~\"\\\\x00\\\\x01\\\\xfe\\\\xff\");\n-        assert_eq!(escape_unicode(~\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n-        assert!(escape_unicode(~\"\\U00010000\\U0010ffff\") ==\n+        assert_eq!(escape_unicode(\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n+        assert!(escape_unicode(\"\\U00010000\\U0010ffff\") ==\n             ~\"\\\\U00010000\\\\U0010ffff\");\n-        assert_eq!(escape_unicode(~\"ab\\ufb00\"), ~\"\\\\x61\\\\x62\\\\ufb00\");\n-        assert_eq!(escape_unicode(~\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\x0d\");\n+        assert_eq!(escape_unicode(\"ab\\ufb00\"), ~\"\\\\x61\\\\x62\\\\ufb00\");\n+        assert_eq!(escape_unicode(\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\x0d\");\n     }\n \n     #[test]\n     fn test_escape_default() {\n-        assert_eq!(escape_default(~\"abc\"), ~\"abc\");\n-        assert_eq!(escape_default(~\"a c\"), ~\"a c\");\n-        assert_eq!(escape_default(~\"\\r\\n\\t\"), ~\"\\\\r\\\\n\\\\t\");\n-        assert_eq!(escape_default(~\"'\\\"\\\\\"), ~\"\\\\'\\\\\\\"\\\\\\\\\");\n-        assert_eq!(escape_default(~\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n-        assert!(escape_default(~\"\\U00010000\\U0010ffff\") ==\n+        assert_eq!(escape_default(\"abc\"), ~\"abc\");\n+        assert_eq!(escape_default(\"a c\"), ~\"a c\");\n+        assert_eq!(escape_default(\"\\r\\n\\t\"), ~\"\\\\r\\\\n\\\\t\");\n+        assert_eq!(escape_default(\"'\\\"\\\\\"), ~\"\\\\'\\\\\\\"\\\\\\\\\");\n+        assert_eq!(escape_default(\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n+        assert!(escape_default(\"\\U00010000\\U0010ffff\") ==\n             ~\"\\\\U00010000\\\\U0010ffff\");\n-        assert_eq!(escape_default(~\"ab\\ufb00\"), ~\"ab\\\\ufb00\");\n-        assert_eq!(escape_default(~\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\r\");\n+        assert_eq!(escape_default(\"ab\\ufb00\"), ~\"ab\\\\ufb00\");\n+        assert_eq!(escape_default(\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\r\");\n     }\n \n     #[test]\n     fn test_to_managed() {\n-        assert_eq!((~\"abc\").to_managed(), @\"abc\");\n+        assert_eq!(\"abc\".to_managed(), @\"abc\");\n         assert_eq!(slice(\"abcdef\", 1, 5).to_managed(), @\"bcde\");\n     }\n "}, {"sha": "e48fef01df941bd75e491f36d326f7646cbc748a", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -228,8 +228,8 @@ mod tests {\n         assert_eq!('`'.to_ascii().to_upper().to_char(), '`');\n         assert_eq!('{'.to_ascii().to_upper().to_char(), '{');\n \n-        assert!(str::all(~\"banana\", |c| c.is_ascii()));\n-        assert!(! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |c| c.is_ascii()));\n+        assert!(str::all(\"banana\", |c| c.is_ascii()));\n+        assert!(! str::all(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |c| c.is_ascii()));\n     }\n \n     #[test]"}, {"sha": "103489988a3e88f371cd430ea35062d40d4f2284", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 70, "deletions": 77, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc970c13f476ef086066a47829185ac83645c61f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=dc970c13f476ef086066a47829185ac83645c61f", "patch": "@@ -2962,8 +2962,8 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        assert!(is_empty::<int>(~[]));\n-        assert!(!is_empty(~[0]));\n+        assert!(is_empty::<int>([]));\n+        assert!(!is_empty([0]));\n     }\n \n     #[test]\n@@ -3445,15 +3445,15 @@ mod tests {\n \n     #[test]\n     fn test_each_empty() {\n-        for each::<int>(~[]) |_v| {\n+        for each::<int>([]) |_v| {\n             fail!(); // should never be executed\n         }\n     }\n \n     #[test]\n     fn test_each_nonempty() {\n         let mut i = 0;\n-        for each(~[1, 2, 3]) |v| {\n+        for each([1, 2, 3]) |v| {\n             i += *v;\n         }\n         assert_eq!(i, 6);\n@@ -3462,7 +3462,7 @@ mod tests {\n     #[test]\n     fn test_eachi() {\n         let mut i = 0;\n-        for eachi(~[1, 2, 3]) |j, v| {\n+        for eachi([1, 2, 3]) |j, v| {\n             if i == 0 { assert!(*v == 1); }\n             assert_eq!(j + 1u, *v as uint);\n             i += *v;\n@@ -3481,7 +3481,7 @@ mod tests {\n     #[test]\n     fn test_each_reverse_nonempty() {\n         let mut i = 0;\n-        for each_reverse(~[1, 2, 3]) |v| {\n+        for each_reverse([1, 2, 3]) |v| {\n             if i == 0 { assert!(*v == 3); }\n             i += *v\n         }\n@@ -3491,7 +3491,7 @@ mod tests {\n     #[test]\n     fn test_eachi_reverse() {\n         let mut i = 0;\n-        for eachi_reverse(~[0, 1, 2]) |j, v| {\n+        for eachi_reverse([0, 1, 2]) |j, v| {\n             if i == 0 { assert!(*v == 2); }\n             assert_eq!(j, *v as uint);\n             i += *v;\n@@ -3512,48 +3512,48 @@ mod tests {\n         let mut results: ~[~[int]];\n \n         results = ~[];\n-        for each_permutation(~[]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([]) |v| { results.push(to_owned(v)); }\n         assert_eq!(results, ~[~[]]);\n \n         results = ~[];\n-        for each_permutation(~[7]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([7]) |v| { results.push(to_owned(v)); }\n         assert_eq!(results, ~[~[7]]);\n \n         results = ~[];\n-        for each_permutation(~[1,1]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([1,1]) |v| { results.push(to_owned(v)); }\n         assert_eq!(results, ~[~[1,1],~[1,1]]);\n \n         results = ~[];\n-        for each_permutation(~[5,2,0]) |v| { results.push(to_owned(v)); }\n+        for each_permutation([5,2,0]) |v| { results.push(to_owned(v)); }\n         assert!(results ==\n             ~[~[5,2,0],~[5,0,2],~[2,5,0],~[2,0,5],~[0,5,2],~[0,2,5]]);\n     }\n \n     #[test]\n     fn test_any_and_all() {\n-        assert!(any(~[1u, 2u, 3u], is_three));\n-        assert!(!any(~[0u, 1u, 2u], is_three));\n-        assert!(any(~[1u, 2u, 3u, 4u, 5u], is_three));\n-        assert!(!any(~[1u, 2u, 4u, 5u, 6u], is_three));\n+        assert!(any([1u, 2u, 3u], is_three));\n+        assert!(!any([0u, 1u, 2u], is_three));\n+        assert!(any([1u, 2u, 3u, 4u, 5u], is_three));\n+        assert!(!any([1u, 2u, 4u, 5u, 6u], is_three));\n \n-        assert!(all(~[3u, 3u, 3u], is_three));\n-        assert!(!all(~[3u, 3u, 2u], is_three));\n-        assert!(all(~[3u, 3u, 3u, 3u, 3u], is_three));\n-        assert!(!all(~[3u, 3u, 0u, 1u, 2u], is_three));\n+        assert!(all([3u, 3u, 3u], is_three));\n+        assert!(!all([3u, 3u, 2u], is_three));\n+        assert!(all([3u, 3u, 3u, 3u, 3u], is_three));\n+        assert!(!all([3u, 3u, 0u, 1u, 2u], is_three));\n     }\n \n     #[test]\n     fn test_any2_and_all2() {\n \n-        assert!(any2(~[2u, 4u, 6u], ~[2u, 4u, 6u], is_equal));\n-        assert!(any2(~[1u, 2u, 3u], ~[4u, 5u, 3u], is_equal));\n-        assert!(!any2(~[1u, 2u, 3u], ~[4u, 5u, 6u], is_equal));\n-        assert!(any2(~[2u, 4u, 6u], ~[2u, 4u], is_equal));\n+        assert!(any2([2u, 4u, 6u], [2u, 4u, 6u], is_equal));\n+        assert!(any2([1u, 2u, 3u], [4u, 5u, 3u], is_equal));\n+        assert!(!any2([1u, 2u, 3u], [4u, 5u, 6u], is_equal));\n+        assert!(any2([2u, 4u, 6u], [2u, 4u], is_equal));\n \n-        assert!(all2(~[2u, 4u, 6u], ~[2u, 4u, 6u], is_equal));\n-        assert!(!all2(~[1u, 2u, 3u], ~[4u, 5u, 3u], is_equal));\n-        assert!(!all2(~[1u, 2u, 3u], ~[4u, 5u, 6u], is_equal));\n-        assert!(!all2(~[2u, 4u, 6u], ~[2u, 4u], is_equal));\n+        assert!(all2([2u, 4u, 6u], [2u, 4u, 6u], is_equal));\n+        assert!(!all2([1u, 2u, 3u], [4u, 5u, 3u], is_equal));\n+        assert!(!all2([1u, 2u, 3u], [4u, 5u, 6u], is_equal));\n+        assert!(!all2([2u, 4u, 6u], [2u, 4u], is_equal));\n     }\n \n     #[test]\n@@ -3576,7 +3576,7 @@ mod tests {\n \n     #[test]\n     fn test_position_elem() {\n-        assert!(position_elem(~[], &1).is_none());\n+        assert!(position_elem([], &1).is_none());\n \n         let v1 = ~[1, 2, 3, 3, 2, 5];\n         assert_eq!(position_elem(v1, &1), Some(0u));\n@@ -3590,7 +3590,7 @@ mod tests {\n         fn less_than_three(i: &int) -> bool { *i < 3 }\n         fn is_eighteen(i: &int) -> bool { *i == 18 }\n \n-        assert!(position(~[], less_than_three).is_none());\n+        assert!(position([], less_than_three).is_none());\n \n         let v1 = ~[5, 4, 3, 2, 1];\n         assert_eq!(position(v1, less_than_three), Some(3u));\n@@ -3599,7 +3599,7 @@ mod tests {\n \n     #[test]\n     fn test_position_between() {\n-        assert!(position_between(~[], 0u, 0u, f).is_none());\n+        assert!(position_between([], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n@@ -3627,7 +3627,7 @@ mod tests {\n \n     #[test]\n     fn test_find() {\n-        assert!(find(~[], f).is_none());\n+        assert!(find([], f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n@@ -3639,7 +3639,7 @@ mod tests {\n \n     #[test]\n     fn test_find_between() {\n-        assert!(find_between(~[], 0u, 0u, f).is_none());\n+        assert!(find_between([], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n@@ -3667,7 +3667,7 @@ mod tests {\n \n     #[test]\n     fn test_rposition() {\n-        assert!(find(~[], f).is_none());\n+        assert!(find([], f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n@@ -3679,7 +3679,7 @@ mod tests {\n \n     #[test]\n     fn test_rposition_between() {\n-        assert!(rposition_between(~[], 0u, 0u, f).is_none());\n+        assert!(rposition_between([], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n@@ -3707,7 +3707,7 @@ mod tests {\n \n     #[test]\n     fn test_rfind() {\n-        assert!(rfind(~[], f).is_none());\n+        assert!(rfind([], f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n@@ -3719,7 +3719,7 @@ mod tests {\n \n     #[test]\n     fn test_rfind_between() {\n-        assert!(rfind_between(~[], 0u, 0u, f).is_none());\n+        assert!(rfind_between([], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n@@ -3798,22 +3798,22 @@ mod tests {\n         reverse(v);\n         assert_eq!(v[0], 20);\n         assert_eq!(v[1], 10);\n-        let v2 = reversed::<int>(~[10, 20]);\n+        let v2 = reversed::<int>([10, 20]);\n         assert_eq!(v2[0], 20);\n         assert_eq!(v2[1], 10);\n         v[0] = 30;\n         assert_eq!(v2[0], 20);\n         // Make sure they work with 0-length vectors too.\n \n-        let v4 = reversed::<int>(~[]);\n+        let v4 = reversed::<int>([]);\n         assert_eq!(v4, ~[]);\n         let mut v3: ~[int] = ~[];\n         reverse::<int>(v3);\n     }\n \n     #[test]\n     fn reversed_mut() {\n-        let v2 = reversed::<int>(~[10, 20]);\n+        let v2 = reversed::<int>([10, 20]);\n         assert_eq!(v2[0], 20);\n         assert_eq!(v2[1], 10);\n     }\n@@ -3822,87 +3822,80 @@ mod tests {\n     fn test_split() {\n         fn f(x: &int) -> bool { *x == 3 }\n \n-        assert_eq!(split(~[], f), ~[]);\n-        assert_eq!(split(~[1, 2], f), ~[~[1, 2]]);\n-        assert_eq!(split(~[3, 1, 2], f), ~[~[], ~[1, 2]]);\n-        assert_eq!(split(~[1, 2, 3], f), ~[~[1, 2], ~[]]);\n-        assert_eq!(split(~[1, 2, 3, 4, 3, 5], f), ~[~[1, 2], ~[4], ~[5]]);\n+        assert_eq!(split([], f), ~[]);\n+        assert_eq!(split([1, 2], f), ~[~[1, 2]]);\n+        assert_eq!(split([3, 1, 2], f), ~[~[], ~[1, 2]]);\n+        assert_eq!(split([1, 2, 3], f), ~[~[1, 2], ~[]]);\n+        assert_eq!(split([1, 2, 3, 4, 3, 5], f), ~[~[1, 2], ~[4], ~[5]]);\n     }\n \n     #[test]\n     fn test_splitn() {\n         fn f(x: &int) -> bool { *x == 3 }\n \n-        assert_eq!(splitn(~[], 1u, f), ~[]);\n-        assert_eq!(splitn(~[1, 2], 1u, f), ~[~[1, 2]]);\n-        assert_eq!(splitn(~[3, 1, 2], 1u, f), ~[~[], ~[1, 2]]);\n-        assert_eq!(splitn(~[1, 2, 3], 1u, f), ~[~[1, 2], ~[]]);\n-        assert!(splitn(~[1, 2, 3, 4, 3, 5], 1u, f) ==\n+        assert_eq!(splitn([], 1u, f), ~[]);\n+        assert_eq!(splitn([1, 2], 1u, f), ~[~[1, 2]]);\n+        assert_eq!(splitn([3, 1, 2], 1u, f), ~[~[], ~[1, 2]]);\n+        assert_eq!(splitn([1, 2, 3], 1u, f), ~[~[1, 2], ~[]]);\n+        assert!(splitn([1, 2, 3, 4, 3, 5], 1u, f) ==\n                       ~[~[1, 2], ~[4, 3, 5]]);\n     }\n \n     #[test]\n     fn test_rsplit() {\n         fn f(x: &int) -> bool { *x == 3 }\n \n-        assert_eq!(rsplit(~[], f), ~[]);\n-        assert_eq!(rsplit(~[1, 2], f), ~[~[1, 2]]);\n-        assert_eq!(rsplit(~[1, 2, 3], f), ~[~[1, 2], ~[]]);\n-        assert!(rsplit(~[1, 2, 3, 4, 3, 5], f) ==\n+        assert_eq!(rsplit([], f), ~[]);\n+        assert_eq!(rsplit([1, 2], f), ~[~[1, 2]]);\n+        assert_eq!(rsplit([1, 2, 3], f), ~[~[1, 2], ~[]]);\n+        assert!(rsplit([1, 2, 3, 4, 3, 5], f) ==\n             ~[~[1, 2], ~[4], ~[5]]);\n     }\n \n     #[test]\n     fn test_rsplitn() {\n         fn f(x: &int) -> bool { *x == 3 }\n \n-        assert_eq!(rsplitn(~[], 1u, f), ~[]);\n-        assert_eq!(rsplitn(~[1, 2], 1u, f), ~[~[1, 2]]);\n-        assert_eq!(rsplitn(~[1, 2, 3], 1u, f), ~[~[1, 2], ~[]]);\n-        assert!(rsplitn(~[1, 2, 3, 4, 3, 5], 1u, f) ==\n-                       ~[~[1, 2, 3, 4], ~[5]]);\n+        assert_eq!(rsplitn([], 1u, f), ~[]);\n+        assert_eq!(rsplitn([1, 2], 1u, f), ~[~[1, 2]]);\n+        assert_eq!(rsplitn([1, 2, 3], 1u, f), ~[~[1, 2], ~[]]);\n+        assert_eq!(rsplitn([1, 2, 3, 4, 3, 5], 1u, f), ~[~[1, 2, 3, 4], ~[5]]);\n     }\n \n     #[test]\n     fn test_partition() {\n         // FIXME (#4355 maybe): using v.partition here crashes\n         assert_eq!(partition(~[], |x: &int| *x < 3), (~[], ~[]));\n-        assert!(partition(~[1, 2, 3], |x: &int| *x < 4) ==\n-            (~[1, 2, 3], ~[]));\n-        assert!(partition(~[1, 2, 3], |x: &int| *x < 2) ==\n-            (~[1], ~[2, 3]));\n-        assert!(partition(~[1, 2, 3], |x: &int| *x < 0) ==\n-            (~[], ~[1, 2, 3]));\n+        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 4), (~[1, 2, 3], ~[]));\n+        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 2), (~[1], ~[2, 3]));\n+        assert_eq!(partition(~[1, 2, 3], |x: &int| *x < 0), (~[], ~[1, 2, 3]));\n     }\n \n     #[test]\n     fn test_partitioned() {\n-        assert_eq!((~[]).partitioned(|x: &int| *x < 3), (~[], ~[]))\n-        assert!((~[1, 2, 3]).partitioned(|x: &int| *x < 4) ==\n-                     (~[1, 2, 3], ~[]));\n-        assert!((~[1, 2, 3]).partitioned(|x: &int| *x < 2) ==\n-                     (~[1], ~[2, 3]));\n-        assert!((~[1, 2, 3]).partitioned(|x: &int| *x < 0) ==\n-                     (~[], ~[1, 2, 3]));\n+        assert_eq!(([]).partitioned(|x: &int| *x < 3), (~[], ~[]))\n+        assert_eq!(([1, 2, 3]).partitioned(|x: &int| *x < 4), (~[1, 2, 3], ~[]));\n+        assert_eq!(([1, 2, 3]).partitioned(|x: &int| *x < 2), (~[1], ~[2, 3]));\n+        assert_eq!(([1, 2, 3]).partitioned(|x: &int| *x < 0), (~[], ~[1, 2, 3]));\n     }\n \n     #[test]\n     fn test_concat() {\n-        assert_eq!(concat(~[~[1], ~[2,3]]), ~[1, 2, 3]);\n+        assert_eq!(concat([~[1], ~[2,3]]), ~[1, 2, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n-        assert_eq!(connect(~[], &0), ~[]);\n-        assert_eq!(connect(~[~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n-        assert_eq!(connect(~[~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!(connect([], &0), ~[]);\n+        assert_eq!(connect([~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n+        assert_eq!(connect([~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n     }\n \n     #[test]\n     fn test_windowed () {\n         fn t(n: uint, expected: &[&[int]]) {\n             let mut i = 0;\n-            for windowed(n, ~[1,2,3,4,5,6]) |v| {\n+            for windowed(n, [1,2,3,4,5,6]) |v| {\n                 assert_eq!(v, expected[i]);\n                 i += 1;\n             }\n@@ -3920,7 +3913,7 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     fn test_windowed_() {\n-        for windowed (0u, ~[1u,2u,3u,4u,5u,6u]) |_v| {}\n+        for windowed (0u, [1u,2u,3u,4u,5u,6u]) |_v| {}\n     }\n \n     #[test]"}]}