{"sha": "7e24136996fd412ba2890952d5f0ddffb3cb7370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMjQxMzY5OTZmZDQxMmJhMjg5MDk1MmQ1ZjBkZGZmYjNjYjczNzA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-16T14:29:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-16T21:25:39Z"}, "message": "Pass --target to lint docs\n\nOtherwise, we may not have a standard library built for the native \"host\" target\nof the rustc being run.", "tree": {"sha": "b862f80b15159bb20f611a153ef64de7abde3ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b862f80b15159bb20f611a153ef64de7abde3ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e24136996fd412ba2890952d5f0ddffb3cb7370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e24136996fd412ba2890952d5f0ddffb3cb7370", "html_url": "https://github.com/rust-lang/rust/commit/7e24136996fd412ba2890952d5f0ddffb3cb7370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e24136996fd412ba2890952d5f0ddffb3cb7370/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77", "html_url": "https://github.com/rust-lang/rust/commit/ff806b87167a9b4f38b9e3d2f6e9c4e621df6a77"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "cf9211bc7ea86325c696ddd3f26b42da898029d3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7e24136996fd412ba2890952d5f0ddffb3cb7370", "patch": "@@ -752,6 +752,7 @@ impl Step for RustcBook {\n         let out_listing = out_base.join(\"src/lints\");\n         builder.cp_r(&builder.src.join(\"src/doc/rustc\"), &out_base);\n         builder.info(&format!(\"Generating lint docs ({})\", self.target));\n+\n         let rustc = builder.rustc(self.compiler);\n         // The tool runs `rustc` for extracting output examples, so it needs a\n         // functional sysroot.\n@@ -762,7 +763,8 @@ impl Step for RustcBook {\n         cmd.arg(\"--out\");\n         cmd.arg(&out_listing);\n         cmd.arg(\"--rustc\");\n-        cmd.arg(rustc);\n+        cmd.arg(&rustc);\n+        cmd.arg(\"--rustc-target\").arg(&self.target.rustc_target_arg());\n         if builder.config.verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "6b32ebdc284f47800dad49ad6e60ccb8d6d45ea8", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=7e24136996fd412ba2890952d5f0ddffb3cb7370", "patch": "@@ -18,10 +18,10 @@ static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n /// Updates the documentation of lint groups.\n pub(crate) fn generate_group_docs(\n     lints: &[Lint],\n-    rustc_path: &Path,\n+    rustc: crate::Rustc<'_>,\n     out_path: &Path,\n ) -> Result<(), Box<dyn Error>> {\n-    let groups = collect_groups(rustc_path)?;\n+    let groups = collect_groups(rustc)?;\n     let groups_path = out_path.join(\"groups.md\");\n     let contents = fs::read_to_string(&groups_path)\n         .map_err(|e| format!(\"could not read {}: {}\", groups_path.display(), e))?;\n@@ -36,9 +36,9 @@ pub(crate) fn generate_group_docs(\n type LintGroups = BTreeMap<String, BTreeSet<String>>;\n \n /// Collects the group names from rustc.\n-fn collect_groups(rustc: &Path) -> Result<LintGroups, Box<dyn Error>> {\n+fn collect_groups(rustc: crate::Rustc<'_>) -> Result<LintGroups, Box<dyn Error>> {\n     let mut result = BTreeMap::new();\n-    let mut cmd = Command::new(rustc);\n+    let mut cmd = Command::new(rustc.path);\n     cmd.arg(\"-Whelp\");\n     let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n     if !output.status.success() {"}, {"sha": "6ca71dcaf3cd0b735fd2aa4f4a1b78237b97173b", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=7e24136996fd412ba2890952d5f0ddffb3cb7370", "patch": "@@ -45,16 +45,22 @@ impl Level {\n     }\n }\n \n+#[derive(Copy, Clone)]\n+pub struct Rustc<'a> {\n+    pub path: &'a Path,\n+    pub target: &'a str,\n+}\n+\n /// Collects all lints, and writes the markdown documentation at the given directory.\n pub fn extract_lint_docs(\n     src_path: &Path,\n     out_path: &Path,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lints = gather_lints(src_path)?;\n     for lint in &mut lints {\n-        generate_output_example(lint, rustc_path, verbose).map_err(|e| {\n+        generate_output_example(lint, rustc, verbose).map_err(|e| {\n             format!(\n                 \"failed to test example in lint docs for `{}` in {}:{}: {}\",\n                 lint.name,\n@@ -65,7 +71,7 @@ pub fn extract_lint_docs(\n         })?;\n     }\n     save_lints_markdown(&lints, &out_path.join(\"listing\"))?;\n-    groups::generate_group_docs(&lints, rustc_path, out_path)?;\n+    groups::generate_group_docs(&lints, rustc, out_path)?;\n     Ok(())\n }\n \n@@ -208,7 +214,7 @@ fn lint_name(line: &str) -> Result<String, &'static str> {\n /// actual output from the compiler.\n fn generate_output_example(\n     lint: &mut Lint,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     // Explicit list of lints that are allowed to not have an example. Please\n@@ -230,7 +236,7 @@ fn generate_output_example(\n     // separate test suite, and use an include mechanism such as mdbook's\n     // `{{#rustdoc_include}}`.\n     if !lint.is_ignored() {\n-        replace_produces(lint, rustc_path, verbose)?;\n+        replace_produces(lint, rustc, verbose)?;\n     }\n     Ok(())\n }\n@@ -261,7 +267,7 @@ fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n /// output from the compiler.\n fn replace_produces(\n     lint: &mut Lint,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lines = lint.doc.iter_mut();\n@@ -302,7 +308,7 @@ fn replace_produces(\n                 Some(line) if line.is_empty() => {}\n                 Some(line) if line == \"{{produces}}\" => {\n                     let output =\n-                        generate_lint_output(&lint.name, &example, &options, rustc_path, verbose)?;\n+                        generate_lint_output(&lint.name, &example, &options, rustc, verbose)?;\n                     line.replace_range(\n                         ..,\n                         &format!(\n@@ -329,7 +335,7 @@ fn generate_lint_output(\n     name: &str,\n     example: &[&mut String],\n     options: &[&str],\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<String, Box<dyn Error>> {\n     if verbose {\n@@ -364,13 +370,14 @@ fn generate_lint_output(\n     }\n     fs::write(&tempfile, source)\n         .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n-    let mut cmd = Command::new(rustc_path);\n+    let mut cmd = Command::new(rustc.path);\n     if options.contains(&\"edition2015\") {\n         cmd.arg(\"--edition=2015\");\n     } else {\n         cmd.arg(\"--edition=2018\");\n     }\n     cmd.arg(\"--error-format=json\");\n+    cmd.arg(\"--target\").arg(rustc.target);\n     if options.contains(&\"test\") {\n         cmd.arg(\"--test\");\n     }"}, {"sha": "5db49007d375c1b263f9d4a132fc27d25bbd47b6", "filename": "src/tools/lint-docs/src/main.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e24136996fd412ba2890952d5f0ddffb3cb7370/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs?ref=7e24136996fd412ba2890952d5f0ddffb3cb7370", "patch": "@@ -13,6 +13,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     let mut src_path = None;\n     let mut out_path = None;\n     let mut rustc_path = None;\n+    let mut rustc_target = None;\n     let mut verbose = false;\n     while let Some(arg) = args.next() {\n         match arg.as_str() {\n@@ -34,6 +35,12 @@ fn doit() -> Result<(), Box<dyn Error>> {\n                     None => return Err(\"--rustc requires a value\".into()),\n                 };\n             }\n+            \"--rustc-target\" => {\n+                rustc_target = match args.next() {\n+                    Some(s) => Some(s),\n+                    None => return Err(\"--rustc-target requires a value\".into()),\n+                };\n+            }\n             \"-v\" | \"--verbose\" => verbose = true,\n             s => return Err(format!(\"unexpected argument `{}`\", s).into()),\n         }\n@@ -47,10 +54,16 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     if rustc_path.is_none() {\n         return Err(\"--rustc must be specified to the path of rustc\".into());\n     }\n+    if rustc_target.is_none() {\n+        return Err(\"--rustc-target must be specified to the rustc target\".into());\n+    }\n     lint_docs::extract_lint_docs(\n         &src_path.unwrap(),\n         &out_path.unwrap(),\n-        &rustc_path.unwrap(),\n+        lint_docs::Rustc {\n+            path: rustc_path.as_deref().unwrap(),\n+            target: rustc_target.as_deref().unwrap(),\n+        },\n         verbose,\n     )\n }"}]}