{"sha": "85d4b5ac4855433fdb7584285db4f0af65805041", "node_id": "C_kwDOAAsO6NoAKDg1ZDRiNWFjNDg1NTQzM2ZkYjc1ODQyODVkYjRmMGFmNjU4MDUwNDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T13:23:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T13:23:35Z"}, "message": "Auto merge of #10368 - c410-f3r:lock-1, r=xFrednet\n\n[significant_drop_tightening] Evaluate the return expression of a block\n\nFor whatever reason, the return expression of a block is not contained inside the slice of statements and because of that the lint wasn't evaluating things that could potentially block the release of a lock.\n\n```rust\npub fn example() -> i32 {\n    let mutex = Mutex::new(1);\n    let lock = mutex.lock().unwrap();\n    let _ = *lock;\n    let _ = *lock;\n   do_heavy_computation_that_takes_time_and_returns_i32()\n}\n```\n\n---\n\nchangelog: none\n<!-- changelog_checked -->", "tree": {"sha": "340b6dd4fb68099abeaa19ade08c77115ae2d787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/340b6dd4fb68099abeaa19ade08c77115ae2d787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d4b5ac4855433fdb7584285db4f0af65805041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d4b5ac4855433fdb7584285db4f0af65805041", "html_url": "https://github.com/rust-lang/rust/commit/85d4b5ac4855433fdb7584285db4f0af65805041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d4b5ac4855433fdb7584285db4f0af65805041/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1da00210a19817636e3e4c2ebe4844d0b704f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1da00210a19817636e3e4c2ebe4844d0b704f61", "html_url": "https://github.com/rust-lang/rust/commit/e1da00210a19817636e3e4c2ebe4844d0b704f61"}, {"sha": "75189695011c0c047db3d2eacfbfeb7fb0836aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75189695011c0c047db3d2eacfbfeb7fb0836aa2", "html_url": "https://github.com/rust-lang/rust/commit/75189695011c0c047db3d2eacfbfeb7fb0836aa2"}], "stats": {"total": 109, "additions": 95, "deletions": 14}, "files": [{"sha": "e2d90edec5a4c31d1f280717158c531c1b3495e0", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/85d4b5ac4855433fdb7584285db4f0af65805041/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d4b5ac4855433fdb7584285db4f0af65805041/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=85d4b5ac4855433fdb7584285db4f0af65805041", "patch": "@@ -61,10 +61,26 @@ pub struct SignificantDropTightening<'tcx> {\n }\n \n impl<'tcx> SignificantDropTightening<'tcx> {\n+    /// Unifies the statements of a block with its return expression.\n+    fn all_block_stmts<'ret, 'rslt, 'stmts>(\n+        block_stmts: &'stmts [hir::Stmt<'tcx>],\n+        dummy_ret_stmt: Option<&'ret hir::Stmt<'tcx>>,\n+    ) -> impl Iterator<Item = &'rslt hir::Stmt<'tcx>>\n+    where\n+        'ret: 'rslt,\n+        'stmts: 'rslt,\n+    {\n+        block_stmts.iter().chain(dummy_ret_stmt)\n+    }\n+\n     /// Searches for at least one statement that could slow down the release of a significant drop.\n-    fn at_least_one_stmt_is_expensive(stmts: &[hir::Stmt<'_>]) -> bool {\n+    fn at_least_one_stmt_is_expensive<'stmt>(stmts: impl Iterator<Item = &'stmt hir::Stmt<'tcx>>) -> bool\n+    where\n+        'tcx: 'stmt,\n+    {\n         for stmt in stmts {\n             match stmt.kind {\n+                hir::StmtKind::Expr(expr) if let hir::ExprKind::Path(_) = expr.kind => {}\n                 hir::StmtKind::Local(local) if let Some(expr) = local.init\n                     && let hir::ExprKind::Path(_) = expr.kind => {},\n                 _ => return true\n@@ -99,7 +115,7 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n         expr: &'tcx hir::Expr<'_>,\n         idx: usize,\n         sdap: &mut SigDropAuxParams,\n-        stmt: &'tcx hir::Stmt<'_>,\n+        stmt: &hir::Stmt<'_>,\n         cb: impl Fn(&mut SigDropAuxParams),\n     ) {\n         let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n@@ -117,7 +133,7 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n         }\n     }\n \n-    /// Shows a generic overall message as well as specialized messages depending on the usage.\n+    /// Shows generic overall messages as well as specialized messages depending on the usage.\n     fn set_suggestions(cx: &LateContext<'tcx>, block_span: Span, diag: &mut Diagnostic, sdap: &SigDropAuxParams) {\n         match sdap.number_of_stmts {\n             0 | 1 => {},\n@@ -172,8 +188,13 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for SignificantDropTightening<'tcx> {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        let dummy_ret_stmt = block.expr.map(|expr| hir::Stmt {\n+            hir_id: hir::HirId::INVALID,\n+            kind: hir::StmtKind::Expr(expr),\n+            span: DUMMY_SP,\n+        });\n         let mut sdap = SigDropAuxParams::default();\n-        for (idx, stmt) in block.stmts.iter().enumerate() {\n+        for (idx, stmt) in Self::all_block_stmts(block.stmts, dummy_ret_stmt.as_ref()).enumerate() {\n             match stmt.kind {\n                 hir::StmtKind::Expr(expr) => self.modify_sdap_if_sig_drop_exists(\n                     cx,\n@@ -213,11 +234,9 @@ impl<'tcx> LateLintPass<'tcx> for SignificantDropTightening<'tcx> {\n                 _ => {}\n             };\n         }\n-        let stmts_after_last_use = sdap\n-            .last_use_stmt_idx\n-            .checked_add(1)\n-            .and_then(|idx| block.stmts.get(idx..))\n-            .unwrap_or_default();\n+\n+        let idx = sdap.last_use_stmt_idx.wrapping_add(1);\n+        let stmts_after_last_use = Self::all_block_stmts(block.stmts, dummy_ret_stmt.as_ref()).skip(idx);\n         if sdap.number_of_stmts > 1 && Self::at_least_one_stmt_is_expensive(stmts_after_last_use) {\n             span_lint_and_then(\n                 cx,"}, {"sha": "da998c610bd29429245e81581dd909a6a4b5fa64", "filename": "tests/ui/significant_drop_tightening.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.fixed?ref=85d4b5ac4855433fdb7584285db4f0af65805041", "patch": "@@ -4,6 +4,26 @@\n \n use std::sync::Mutex;\n \n+pub fn complex_return_triggers_the_lint() -> i32 {\n+    fn foo() -> i32 {\n+        1\n+    }\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let _ = *lock;\n+    let _ = *lock;\n+    drop(lock);\n+    foo()\n+}\n+\n+pub fn path_return_can_be_ignored() -> i32 {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let _ = *lock;\n+    rslt\n+}\n+\n pub fn post_bindings_can_be_ignored() {\n     let mutex = Mutex::new(1);\n     let lock = mutex.lock().unwrap();"}, {"sha": "83823f95f68ac502b292e027e10f78d6ed770f0c", "filename": "tests/ui/significant_drop_tightening.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.rs?ref=85d4b5ac4855433fdb7584285db4f0af65805041", "patch": "@@ -4,6 +4,25 @@\n \n use std::sync::Mutex;\n \n+pub fn complex_return_triggers_the_lint() -> i32 {\n+    fn foo() -> i32 {\n+        1\n+    }\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let _ = *lock;\n+    let _ = *lock;\n+    foo()\n+}\n+\n+pub fn path_return_can_be_ignored() -> i32 {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let _ = *lock;\n+    rslt\n+}\n+\n pub fn post_bindings_can_be_ignored() {\n     let mutex = Mutex::new(1);\n     let lock = mutex.lock().unwrap();"}, {"sha": "ab8ce356ec7b5982370502eb92024c26a92532e7", "filename": "tests/ui/significant_drop_tightening.stderr", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85d4b5ac4855433fdb7584285db4f0af65805041/tests%2Fui%2Fsignificant_drop_tightening.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.stderr?ref=85d4b5ac4855433fdb7584285db4f0af65805041", "patch": "@@ -1,5 +1,29 @@\n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:25:13\n+  --> $DIR/significant_drop_tightening.rs:12:9\n+   |\n+LL |   pub fn complex_return_triggers_the_lint() -> i32 {\n+   |  __________________________________________________-\n+LL | |     fn foo() -> i32 {\n+LL | |         1\n+LL | |     }\n+LL | |     let mutex = Mutex::new(1);\n+LL | |     let lock = mutex.lock().unwrap();\n+   | |         ^^^^\n+...  |\n+LL | |     foo()\n+LL | | }\n+   | |_- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+   = note: `-D clippy::significant-drop-tightening` implied by `-D warnings`\n+help: drop the temporary after the end of its last usage\n+   |\n+LL ~     let _ = *lock;\n+LL +     drop(lock);\n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:44:13\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(1i32);\n@@ -12,15 +36,14 @@ LL | |     }\n    | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n    |\n    = note: this might lead to unnecessary resource contention\n-   = note: `-D clippy::significant-drop-tightening` implied by `-D warnings`\n help: drop the temporary after the end of its last usage\n    |\n LL ~         let rslt1 = lock.is_positive();\n LL +         drop(lock);\n    |\n \n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:46:13\n+  --> $DIR/significant_drop_tightening.rs:65:13\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(1i32);\n@@ -44,7 +67,7 @@ LL +\n    |\n \n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:52:17\n+  --> $DIR/significant_drop_tightening.rs:71:17\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(vec![1i32]);\n@@ -67,5 +90,5 @@ LL -         lock.clear();\n LL +         \n    |\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}