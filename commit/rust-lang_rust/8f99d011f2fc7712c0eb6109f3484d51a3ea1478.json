{"sha": "8f99d011f2fc7712c0eb6109f3484d51a3ea1478", "node_id": "C_kwDOAAsO6NoAKDhmOTlkMDExZjJmYzc3MTJjMGViNjEwOWYzNDg0ZDUxYTNlYTE0Nzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-28T13:50:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-28T13:57:28Z"}, "message": "simplify Linux futex impl a bit", "tree": {"sha": "c30daaafe6e0d5ba5ffce0e1febfa0fdab764af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30daaafe6e0d5ba5ffce0e1febfa0fdab764af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f99d011f2fc7712c0eb6109f3484d51a3ea1478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f99d011f2fc7712c0eb6109f3484d51a3ea1478", "html_url": "https://github.com/rust-lang/rust/commit/8f99d011f2fc7712c0eb6109f3484d51a3ea1478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f99d011f2fc7712c0eb6109f3484d51a3ea1478/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6fc1fb5a9550347d13beb8004b2391126a4633", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6fc1fb5a9550347d13beb8004b2391126a4633", "html_url": "https://github.com/rust-lang/rust/commit/3f6fc1fb5a9550347d13beb8004b2391126a4633"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "91db30e93d8ea1d812f319357b57b1771fc9bd7c", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8f99d011f2fc7712c0eb6109f3484d51a3ea1478/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f99d011f2fc7712c0eb6109f3484d51a3ea1478/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=8f99d011f2fc7712c0eb6109f3484d51a3ea1478", "patch": "@@ -1,7 +1,7 @@\n+use std::time::SystemTime;\n+\n use crate::concurrency::thread::{MachineCallback, Time};\n use crate::*;\n-use rustc_target::abi::{Align, Size};\n-use std::time::SystemTime;\n \n /// Implementation of the SYS_futex syscall.\n /// `args` is the arguments *after* the syscall number.\n@@ -28,13 +28,14 @@ pub fn futex<'tcx>(\n     // The first three arguments (after the syscall number itself) are the same to all futex operations:\n     //     (int *addr, int op, int val).\n     // We checked above that these definitely exist.\n-    let addr = this.read_immediate(&args[0])?;\n+    let addr = this.read_pointer(&args[0])?;\n     let op = this.read_scalar(&args[1])?.to_i32()?;\n     let val = this.read_scalar(&args[2])?.to_i32()?;\n \n     let thread = this.get_active_thread();\n-    let addr_scalar = addr.to_scalar();\n-    let addr_usize = addr_scalar.to_machine_usize(this)?;\n+    // This is a vararg function so we have to bring our own type for this pointer.\n+    let addr = MPlaceTy::from_aligned_ptr(addr, this.machine.layouts.i32);\n+    let addr_usize = addr.ptr.addr().bytes();\n \n     let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n     let futex_wait = this.eval_libc_i32(\"FUTEX_WAIT\")?;\n@@ -117,15 +118,6 @@ pub fn futex<'tcx>(\n                     }\n                 })\n             };\n-            // Check the pointer for alignment and validity.\n-            // The API requires `addr` to be a 4-byte aligned pointer, and will\n-            // use the 4 bytes at the given address as an (atomic) i32.\n-            this.check_ptr_access_align(\n-                addr_scalar.to_pointer(this)?,\n-                Size::from_bytes(4),\n-                Align::from_bytes(4).unwrap(),\n-                CheckInAllocMsg::MemoryAccessTest,\n-            )?;\n             // There may be a concurrent thread changing the value of addr\n             // and then invoking the FUTEX_WAKE syscall. It is critical that the\n             // effects of this and the other thread are correctly observed,\n@@ -172,14 +164,7 @@ pub fn futex<'tcx>(\n             this.atomic_fence(AtomicFenceOrd::SeqCst)?;\n             // Read an `i32` through the pointer, regardless of any wrapper types.\n             // It's not uncommon for `addr` to be passed as another type than `*mut i32`, such as `*const AtomicI32`.\n-            let futex_val = this\n-                .read_scalar_at_offset_atomic(\n-                    &addr.into(),\n-                    0,\n-                    this.machine.layouts.i32,\n-                    AtomicReadOrd::Relaxed,\n-                )?\n-                .to_i32()?;\n+            let futex_val = this.read_scalar_atomic(&addr, AtomicReadOrd::Relaxed)?.to_i32()?;\n             if val == futex_val {\n                 // The value still matches, so we block the thread make it wait for FUTEX_WAKE.\n                 this.block_thread(thread);"}]}