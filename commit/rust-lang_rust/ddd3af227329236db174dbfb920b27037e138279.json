{"sha": "ddd3af227329236db174dbfb920b27037e138279", "node_id": "C_kwDOAAsO6NoAKGRkZDNhZjIyNzMyOTIzNmRiMTc0ZGJmYjkyMGIyNzAzN2UxMzgyNzk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-06T14:56:06Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-06T14:59:57Z"}, "message": "Only lint `mut_from_ref` when unsafe code is used", "tree": {"sha": "070fb8ccac6ebf6f3f3caba47c9b1fd70bb433e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070fb8ccac6ebf6f3f3caba47c9b1fd70bb433e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd3af227329236db174dbfb920b27037e138279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd3af227329236db174dbfb920b27037e138279", "html_url": "https://github.com/rust-lang/rust/commit/ddd3af227329236db174dbfb920b27037e138279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd3af227329236db174dbfb920b27037e138279/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "html_url": "https://github.com/rust-lang/rust/commit/cf1e2e9c1c4ba20127f81135f413c50658c9a85f"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "4ecde8f49581ea60a6e46d6fbcf99ddb68de41de", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ddd3af227329236db174dbfb920b27037e138279/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd3af227329236db174dbfb920b27037e138279/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=ddd3af227329236db174dbfb920b27037e138279", "patch": "@@ -3,16 +3,17 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n+use clippy_utils::visitors::contains_unsafe_block;\n use clippy_utils::{get_expr_use_or_unification_node, is_lint_allowed, path_def_id, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{\n-    self as hir, AnonConst, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, FnRetTy, GenericArg,\n+    self as hir, AnonConst, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnRetTy, FnSig, GenericArg,\n     ImplItemKind, ItemKind, Lifetime, LifetimeName, Mutability, Node, Param, ParamName, PatKind, QPath, TraitFn,\n-    TraitItem, TraitItemKind, TyKind,\n+    TraitItem, TraitItemKind, TyKind, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n@@ -145,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                 return;\n             }\n \n-            check_mut_from_ref(cx, sig.decl);\n+            check_mut_from_ref(cx, sig, None);\n             for arg in check_fn_args(\n                 cx,\n                 cx.tcx.fn_sig(item.def_id).skip_binder().inputs(),\n@@ -170,10 +171,10 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n         let hir = cx.tcx.hir();\n         let mut parents = hir.parent_iter(body.value.hir_id);\n-        let (item_id, decl, is_trait_item) = match parents.next() {\n+        let (item_id, sig, is_trait_item) = match parents.next() {\n             Some((_, Node::Item(i))) => {\n                 if let ItemKind::Fn(sig, ..) = &i.kind {\n-                    (i.def_id, sig.decl, false)\n+                    (i.def_id, sig, false)\n                 } else {\n                     return;\n                 }\n@@ -185,22 +186,23 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     return;\n                 }\n                 if let ImplItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig.decl, false)\n+                    (i.def_id, sig, false)\n                 } else {\n                     return;\n                 }\n             },\n             Some((_, Node::TraitItem(i))) => {\n                 if let TraitItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig.decl, true)\n+                    (i.def_id, sig, true)\n                 } else {\n                     return;\n                 }\n             },\n             _ => return,\n         };\n \n-        check_mut_from_ref(cx, decl);\n+        check_mut_from_ref(cx, sig, Some(body));\n+        let decl = sig.decl;\n         let sig = cx.tcx.fn_sig(item_id).skip_binder();\n         let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params)\n             .filter(|arg| !is_trait_item || arg.mutability() == Mutability::Not)\n@@ -478,31 +480,31 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n         })\n }\n \n-fn check_mut_from_ref(cx: &LateContext<'_>, decl: &FnDecl<'_>) {\n-    if let FnRetTy::Return(ty) = decl.output {\n-        if let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty) {\n-            let mut immutables = vec![];\n-            for (_, mutbl, argspan) in decl\n-                .inputs\n-                .iter()\n-                .filter_map(get_rptr_lm)\n-                .filter(|&(lt, _, _)| lt.name == out.name)\n-            {\n-                if mutbl == Mutability::Mut {\n-                    return;\n-                }\n-                immutables.push(argspan);\n-            }\n-            if immutables.is_empty() {\n-                return;\n-            }\n+fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Option<&'tcx Body<'_>>) {\n+    if let FnRetTy::Return(ty) = sig.decl.output\n+        && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n+    {\n+        let args: Option<Vec<_>> = sig\n+            .decl\n+            .inputs\n+            .iter()\n+            .filter_map(get_rptr_lm)\n+            .filter(|&(lt, _, _)| lt.name == out.name)\n+            .map(|(_, mutability, span)| (mutability == Mutability::Not).then(|| span))\n+            .collect();\n+        if let Some(args) = args\n+            && !args.is_empty()\n+            && body.map_or(true, |body| {\n+                sig.header.unsafety == Unsafety::Unsafe || contains_unsafe_block(cx, &body.value)\n+            })\n+        {\n             span_lint_and_then(\n                 cx,\n                 MUT_FROM_REF,\n                 ty.span,\n                 \"mutable borrow from immutable input(s)\",\n                 |diag| {\n-                    let ms = MultiSpan::from_spans(immutables);\n+                    let ms = MultiSpan::from_spans(args);\n                     diag.span_note(ms, \"immutable borrow here\");\n                 },\n             );"}, {"sha": "3db64b2535398634e26a9824533a35fab18e0dd5", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ddd3af227329236db174dbfb920b27037e138279/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd3af227329236db174dbfb920b27037e138279/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=ddd3af227329236db174dbfb920b27037e138279", "patch": "@@ -3,7 +3,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n use rustc_hir::{\n-    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Stmt, UnOp, Unsafety,\n+    Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Stmt, UnOp, UnsafeSource,\n+    Unsafety,\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -370,3 +371,34 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n     v.visit_expr(e);\n     v.is_unsafe\n }\n+\n+/// Checks if the given expression contains an unsafe block\n+pub fn contains_unsafe_block<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'tcx>) -> bool {\n+    struct V<'cx, 'tcx> {\n+        cx: &'cx LateContext<'tcx>,\n+        found_unsafe: bool,\n+    }\n+    impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n+        fn visit_block(&mut self, b: &'tcx Block<'_>) {\n+            if self.found_unsafe {\n+                return;\n+            }\n+            if b.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) {\n+                self.found_unsafe = true;\n+                return;\n+            }\n+            walk_block(self, b);\n+        }\n+    }\n+    let mut v = V {\n+        cx,\n+        found_unsafe: false,\n+    };\n+    v.visit_expr(e);\n+    v.found_unsafe\n+}"}, {"sha": "370dbd5882161c837c4ffd14a531c99aa7145f0d", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddd3af227329236db174dbfb920b27037e138279/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd3af227329236db174dbfb920b27037e138279/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=ddd3af227329236db174dbfb920b27037e138279", "patch": "@@ -5,7 +5,7 @@ struct Foo;\n \n impl Foo {\n     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n-        unimplemented!()\n+        unsafe { unimplemented!() }\n     }\n }\n \n@@ -15,29 +15,37 @@ trait Ouch {\n \n impl Ouch for Foo {\n     fn ouch(x: &Foo) -> &mut Foo {\n-        unimplemented!()\n+        unsafe { unimplemented!() }\n     }\n }\n \n fn fail(x: &u32) -> &mut u16 {\n-    unimplemented!()\n+    unsafe { unimplemented!() }\n }\n \n fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n-    unimplemented!()\n+    unsafe { unimplemented!() }\n }\n \n fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n-    unimplemented!()\n+    unsafe { unimplemented!() }\n }\n \n // this is OK, because the result borrows y\n fn works<'a>(x: &u32, y: &'a mut u32) -> &'a mut u32 {\n-    unimplemented!()\n+    unsafe { unimplemented!() }\n }\n \n // this is also OK, because the result could borrow y\n fn also_works<'a>(x: &'a u32, y: &'a mut u32) -> &'a mut u32 {\n+    unsafe { unimplemented!() }\n+}\n+\n+unsafe fn also_broken(x: &u32) -> &mut u32 {\n+    unimplemented!()\n+}\n+\n+fn without_unsafe(x: &u32) -> &mut u32 {\n     unimplemented!()\n }\n "}, {"sha": "b76d6a13ffb9cf312d2285886671a976549d18b6", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddd3af227329236db174dbfb920b27037e138279/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddd3af227329236db174dbfb920b27037e138279/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=ddd3af227329236db174dbfb920b27037e138279", "patch": "@@ -59,5 +59,17 @@ note: immutable borrow here\n LL | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n    |                           ^^^^^^^     ^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:44:35\n+   |\n+LL | unsafe fn also_broken(x: &u32) -> &mut u32 {\n+   |                                   ^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:44:26\n+   |\n+LL | unsafe fn also_broken(x: &u32) -> &mut u32 {\n+   |                          ^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}