{"sha": "949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWJkZDhiNzlhNDhhYzI1NDA4ZjljZmIwZTlkNTdhNzVkNWYxMmI=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T23:01:58Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-17T13:40:29Z"}, "message": "Add regression test", "tree": {"sha": "a743d5fcbb80bd13480b266469a0c39146aefc82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a743d5fcbb80bd13480b266469a0c39146aefc82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "html_url": "https://github.com/rust-lang/rust/commit/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5aa2359d45654953405763090dbc0cd63b0c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5aa2359d45654953405763090dbc0cd63b0c97", "html_url": "https://github.com/rust-lang/rust/commit/ad5aa2359d45654953405763090dbc0cd63b0c97"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "ca7c393d4afdd30f0fe82ebf66aeef6456a84042", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "patch": "@@ -789,10 +789,10 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self))]\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n-        trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n         self.super_terminator(terminator, location);\n \n         match &terminator.kind {\n@@ -816,6 +816,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                 // Attempting to call a trait method?\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n+                    trace!(\"attempting to call a trait method\");\n                     if !self.tcx.features().const_trait_impl {\n                         self.check_op(ops::FnCallNonConst);\n                         return;\n@@ -871,13 +872,13 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     return;\n                 }\n \n+                let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n+\n                 // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n                 // within const fns. `transmute` is allowed in all other const contexts.\n                 // This won't really scale to more intrinsics or functions. Let's allow const\n                 // transmutes in const fn before we add more hacks to this.\n-                if tcx.fn_sig(callee).abi() == RustIntrinsic\n-                    && tcx.item_name(callee) == sym::transmute\n-                {\n+                if is_intrinsic && tcx.item_name(callee) == sym::transmute {\n                     self.check_op(ops::Transmute);\n                     return;\n                 }\n@@ -890,6 +891,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 // If the `const fn` we are trying to call is not const-stable, ensure that we have\n                 // the proper feature gate enabled.\n                 if let Some(gate) = is_unstable_const_fn(tcx, callee) {\n+                    trace!(?gate, \"calling unstable const fn\");\n                     if self.span.allows_unstable(gate) {\n                         return;\n                     }\n@@ -904,12 +906,14 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     // If this crate is not using stability attributes, or the caller is not claiming to be a\n                     // stable `const fn`, that is all that is required.\n                     if !self.ccx.is_const_stable_const_fn() {\n+                        trace!(\"crate not using stability attributes or caller not stably const\");\n                         return;\n                     }\n \n                     // Otherwise, we are something const-stable calling a const-unstable fn.\n \n                     if super::rustc_allow_const_fn_unstable(tcx, caller, gate) {\n+                        trace!(\"rustc_allow_const_fn_unstable gate active\");\n                         return;\n                     }\n \n@@ -923,10 +927,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 let callee_is_unstable_unmarked = tcx.lookup_const_stability(callee).is_none()\n                     && tcx.lookup_stability(callee).map_or(false, |s| s.level.is_unstable());\n                 if callee_is_unstable_unmarked {\n-                    if self.ccx.is_const_stable_const_fn() {\n+                    trace!(\"callee_is_unstable_unmarked\");\n+                    // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are\n+                    // `extern` funtions, and these have way to get marked `const`. So instead we\n+                    // use `rustc_const_(un)stable` attributes to mean that the intrinsic is `const`\n+                    if self.ccx.is_const_stable_const_fn() || is_intrinsic {\n                         self.check_op(ops::FnCallUnstable(callee, None));\n+                        return;\n                     }\n                 }\n+                trace!(\"permitting call\");\n             }\n \n             // Forbid all `Drop` terminators unless the place being dropped is a local with no"}, {"sha": "8f71cd26e5fab9bce8ab6414bd38aea956c5b483", "filename": "src/test/ui/consts/intrinsic_without_const_stab.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs?ref=949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(intrinsics, staged_api, const_intrinsic_copy)]\n+#![stable(feature = \"core\", since = \"1.6.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+    extern \"rust-intrinsic\" {\n+        fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // Even though the `copy` intrinsic lacks stability attributes, this works, because it\n+    // inherits its stability attributes from its parent. That includes `rustc_const_(un)stable`\n+    // attributes.\n+    unsafe { copy(src, dst, count) }\n+}\n+\n+fn main() {}"}, {"sha": "bf2c44169d48b8e70fc722e4f121615f0a295811", "filename": "src/test/ui/consts/intrinsic_without_const_stab_fail.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs?ref=949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "patch": "@@ -0,0 +1,15 @@\n+#![feature(intrinsics, staged_api, const_intrinsic_copy)]\n+#![stable(feature = \"core\", since = \"1.6.0\")]\n+\n+extern \"rust-intrinsic\" {\n+    fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn stuff<T>(src: *const T, dst: *mut T, count: usize) {\n+    unsafe { copy(src, dst, count) } //~ ERROR calls in constant functions are limited\n+}\n+\n+fn main() {}"}, {"sha": "d4a2989e785e0c6967cc3eca6a974c64028f8b64", "filename": "src/test/ui/consts/intrinsic_without_const_stab_fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.stderr?ref=949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/intrinsic_without_const_stab_fail.rs:12:14\n+   |\n+LL |     unsafe { copy(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}]}