{"sha": "088b67079675af3d559dd3572520e3dc62d982ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGI2NzA3OTY3NWFmM2Q1NTlkZDM1NzI1MjBlM2RjNjJkOTgyZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-30T17:28:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-30T17:28:52Z"}, "message": "Merge #9065\n\n9065: hir_ty: don't pass where clauses of associated types down to chalk r=cynecx a=cynecx\n\nSee #9052.\n\nCo-authored-by: cynecx <me@cynecx.net>", "tree": {"sha": "c501ce084b291fdc28dc99b534130a794b08d649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c501ce084b291fdc28dc99b534130a794b08d649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088b67079675af3d559dd3572520e3dc62d982ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgs8tUCRBK7hj4Ov3rIwAAhx8IAJo655fP0ryTZTsDcG8el7kY\n23W6QKVkLU/NvPbuFWj09BR8G1RO5pkFhsQiHQs2xFK9shgA1c3GU0Hak0cFnl+F\nHYoI+8lvkxP4BiCxNxwUpTOn9M0YbEHqk9ifWOZ8zzmBzwKTNUZ+C7ZJJxhcNotS\nc8bhiOpAmIh8smlwbWLCCzZIWUxS+jRXrnoIHQW1sCjew9g7XONV1qshtUf1HRjH\nmfsMxbB8Ovx3ihCMDI7jB+Ns0WppbIzr77tjEU3CeFD7hLWX4Th3PweueB8YbY90\na+EL489zTG0v+WgZ3GESyBQeJTCA6PrRY2nrBFLZDE9cL+NODpsDc6VtsOlz1J4=\n=i0JU\n-----END PGP SIGNATURE-----\n", "payload": "tree c501ce084b291fdc28dc99b534130a794b08d649\nparent f1d163ba51b7a06e2e34ea2b27c4c948a0ff2320\nparent 51cbcc53468a4f9fbeae8b11f1b1b0f09a9d3454\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622395732 +0000\ncommitter GitHub <noreply@github.com> 1622395732 +0000\n\nMerge #9065\n\n9065: hir_ty: don't pass where clauses of associated types down to chalk r=cynecx a=cynecx\n\nSee #9052.\n\nCo-authored-by: cynecx <me@cynecx.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088b67079675af3d559dd3572520e3dc62d982ee", "html_url": "https://github.com/rust-lang/rust/commit/088b67079675af3d559dd3572520e3dc62d982ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088b67079675af3d559dd3572520e3dc62d982ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d163ba51b7a06e2e34ea2b27c4c948a0ff2320", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d163ba51b7a06e2e34ea2b27c4c948a0ff2320", "html_url": "https://github.com/rust-lang/rust/commit/f1d163ba51b7a06e2e34ea2b27c4c948a0ff2320"}, {"sha": "51cbcc53468a4f9fbeae8b11f1b1b0f09a9d3454", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cbcc53468a4f9fbeae8b11f1b1b0f09a9d3454", "html_url": "https://github.com/rust-lang/rust/commit/51cbcc53468a4f9fbeae8b11f1b1b0f09a9d3454"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "4e042bf4223e165d38fccf36788dc48d22c06550", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/088b67079675af3d559dd3572520e3dc62d982ee/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b67079675af3d559dd3572520e3dc62d982ee/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=088b67079675af3d559dd3572520e3dc62d982ee", "patch": "@@ -383,7 +383,7 @@ pub(crate) fn associated_ty_data_query(\n     // Lower bounds -- we could/should maybe move this to a separate query in `lower`\n     let type_alias_data = db.type_alias_data(type_alias);\n     let generic_params = generics(db.upcast(), type_alias.into());\n-    let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n+    // let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n     let resolver = hir_def::resolver::HasResolver::resolver(type_alias, db.upcast());\n     let ctx = crate::TyLoweringContext::new(db, &resolver)\n         .with_type_param_mode(crate::lower::TypeParamLoweringMode::Variable);\n@@ -396,8 +396,10 @@ pub(crate) fn associated_ty_data_query(\n         .filter_map(|pred| generic_predicate_to_inline_bound(db, &pred, &self_ty))\n         .collect();\n \n-    let where_clauses = convert_where_clauses(db, type_alias.into(), &bound_vars);\n-    let bound_data = rust_ir::AssociatedTyDatumBound { bounds, where_clauses };\n+    // FIXME: Re-enable where clauses on associated types when an upstream chalk bug is fixed.\n+    //        (rust-analyzer#9052)\n+    // let where_clauses = convert_where_clauses(db, type_alias.into(), &bound_vars);\n+    let bound_data = rust_ir::AssociatedTyDatumBound { bounds, where_clauses: vec![] };\n     let datum = AssociatedTyDatum {\n         trait_id: to_chalk_trait_id(trait_),\n         id,"}, {"sha": "49add4ab99d6fe98fec2d5d4f1e366b28203fe41", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/088b67079675af3d559dd3572520e3dc62d982ee/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b67079675af3d559dd3572520e3dc62d982ee/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=088b67079675af3d559dd3572520e3dc62d982ee", "patch": "@@ -161,7 +161,7 @@ mod result {\n }\n \n #[test]\n-fn infer_tryv2() {\n+fn infer_try_trait_v2() {\n     check_types(\n         r#\"\n //- /main.rs crate:main deps:core\n@@ -172,26 +172,41 @@ fn test() {\n } //^ i32\n \n //- /core.rs crate:core\n-#[prelude_import] use ops::*;\n mod ops {\n-    trait Try {\n-        type Output;\n-        type Residual;\n+    mod try_trait {\n+        pub trait Try: FromResidual {\n+            type Output;\n+            type Residual;\n+        }\n+        pub trait FromResidual<R = <Self as Try>::Residual> {}\n     }\n+\n+    pub use self::try_trait::FromResidual;\n+    pub use self::try_trait::Try;\n+}\n+\n+mov convert {\n+    pub trait From<T> {}\n+    impl<T> From<T> for T {}\n }\n \n #[prelude_import] use result::*;\n mod result {\n-    enum Infallible {}\n-    enum Result<O, E> {\n+    use crate::convert::From;\n+    use crate::ops::{Try, FromResidual};\n+\n+    pub enum Infallible {}\n+    pub enum Result<O, E> {\n         Ok(O),\n         Err(E)\n     }\n \n-    impl<O, E> crate::ops::Try for Result<O, E> {\n+    impl<O, E> Try for Result<O, E> {\n         type Output = O;\n         type Error = Result<Infallible, E>;\n     }\n+\n+    impl<T, E, F: From<E>> FromResidual<Result<Infallible, E>> for Result<T, F> {}\n }\n \"#,\n     );"}]}