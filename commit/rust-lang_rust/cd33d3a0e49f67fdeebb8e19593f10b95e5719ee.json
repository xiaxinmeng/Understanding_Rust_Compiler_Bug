{"sha": "cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMzNkM2EwZTQ5ZjY3ZmRlZWJiOGUxOTU5M2YxMGI5NWU1NzE5ZWU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T02:23:35Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:39:16Z"}, "message": "Stub out various functions during testing", "tree": {"sha": "990fab5b642a8f7a5f235ccbbe73d44b3844927e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990fab5b642a8f7a5f235ccbbe73d44b3844927e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "html_url": "https://github.com/rust-lang/rust/commit/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7342b8f4233b67093c62c4044273185312aac59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7342b8f4233b67093c62c4044273185312aac59", "html_url": "https://github.com/rust-lang/rust/commit/e7342b8f4233b67093c62c4044273185312aac59"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "c2a53e4590e7823a4be0fb65ec1f39d69ce35c98", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -687,7 +687,7 @@ impl<'a> Builder<'a> {\n         // the options through environment variables that are fetched and understood by both.\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n-        if !target.contains(\"msvc\") {\n+        if !target.contains(\"msvc\") && !cfg!(test) {\n             let ccache = self.config.ccache.as_ref();\n             let ccacheify = |s: &Path| {\n                 let ccache = match ccache {"}, {"sha": "54b0ed6bb35952d55d40926a41b7b76bb8c511c7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -690,6 +690,9 @@ impl Step for CodegenBackend {\n                               cargo.arg(\"--features\").arg(features),\n                               &tmp_stamp,\n                               false);\n+        if cfg!(test) {\n+            return;\n+        }\n         let mut files = files.into_iter()\n             .filter(|f| {\n                 let filename = f.file_name().unwrap().to_str().unwrap();\n@@ -719,6 +722,7 @@ impl Step for CodegenBackend {\n fn copy_codegen_backends_to_sysroot(builder: &Builder,\n                                     compiler: Compiler,\n                                     target_compiler: Compiler) {\n+    if cfg!(test) { return; }\n     let build = builder.build;\n     let target = target_compiler.host;\n "}, {"sha": "5f3d9ecfc042d5666449346aeaf26f8a496a8d52", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -817,6 +817,7 @@ impl Step for UnstableBookGen {\n }\n \n fn symlink_dir_force(src: &Path, dst: &Path) -> io::Result<()> {\n+    if cfg!(test) { return Ok(()); }\n     if let Ok(m) = fs::symlink_metadata(dst) {\n         if m.file_type().is_dir() {\n             try!(fs::remove_dir_all(dst));"}, {"sha": "a4287df677e3fdfc598133bff7e22033b7f04cc1", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -363,16 +363,19 @@ impl Build {\n         cc_detect::find(&mut build);\n         build.verbose(\"running sanity check\");\n         sanity::check(&mut build);\n-        // If local-rust is the same major.minor as the current version, then force a local-rebuild\n-        let local_version_verbose = output(\n-            Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n-        let local_release = local_version_verbose\n-            .lines().filter(|x| x.starts_with(\"release:\"))\n-            .next().unwrap().trim_left_matches(\"release:\").trim();\n-        let my_version = channel::CFG_RELEASE_NUM;\n-        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n-            build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n-            build.local_rebuild = true;\n+        if !cfg!(test) {\n+            // If local-rust is the same major.minor as the current version, then force a\n+            // local-rebuild\n+            let local_version_verbose = output(\n+                Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n+            let local_release = local_version_verbose\n+                .lines().filter(|x| x.starts_with(\"release:\"))\n+                .next().unwrap().trim_left_matches(\"release:\").trim();\n+            let my_version = channel::CFG_RELEASE_NUM;\n+            if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n+                build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n+                build.local_rebuild = true;\n+            }\n         }\n         build.verbose(\"learning about cargo\");\n         metadata::build(&mut build);\n@@ -419,6 +422,7 @@ impl Build {\n     ///\n     /// After this executes, it will also ensure that `dir` exists.\n     fn clear_if_dirty(&self, dir: &Path, input: &Path) -> bool {\n+        if cfg!(test) { return true; }\n         let stamp = dir.join(\".stamp\");\n         let mut cleared = false;\n         if mtime(&stamp) < mtime(input) {\n@@ -593,12 +597,14 @@ impl Build {\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n+        if cfg!(test) { return; }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n         run_silent(cmd)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n+        if cfg!(test) { return; }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n         run_suppressed(cmd)\n     }\n@@ -607,6 +613,7 @@ impl Build {\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run(&self, cmd: &mut Command) -> bool {\n+        if cfg!(test) { return true; }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n         try_run_silent(cmd)\n     }\n@@ -615,6 +622,7 @@ impl Build {\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n+        if cfg!(test) { return true; }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n         try_run_suppressed(cmd)\n     }\n@@ -685,6 +693,7 @@ impl Build {\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n     fn linker(&self, target: Interned<String>) -> Option<&Path> {\n+        if cfg!(test) { return None; }\n         if let Some(linker) = self.config.target_config.get(&target)\n                                                        .and_then(|c| c.linker.as_ref()) {\n             Some(linker)"}, {"sha": "f95f8e01dae50e7f152a08dfdf9841fcba5480bc", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -60,6 +60,9 @@ impl Step for Llvm {\n \n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder) -> PathBuf {\n+        if cfg!(test) {\n+            return PathBuf::from(\"llvm-config-test-generated\");\n+        }\n         let build = builder.build;\n         let target = self.target;\n         let emscripten = self.emscripten;\n@@ -336,6 +339,9 @@ impl Step for Lld {\n \n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder) -> PathBuf {\n+        if cfg!(test) {\n+            return PathBuf::from(\"lld-out-dir-test-gen\");\n+        }\n         let target = self.target;\n         let build = builder.build;\n \n@@ -389,6 +395,9 @@ impl Step for TestHelpers {\n     /// Compiles the `rust_test_helpers.c` library which we used in various\n     /// `run-pass` test suites for ABI testing.\n     fn run(self, builder: &Builder) {\n+        if cfg!(test) {\n+            return;\n+        }\n         let build = builder.build;\n         let target = self.target;\n         let dst = build.test_helpers_out(target);\n@@ -441,6 +450,9 @@ impl Step for Openssl {\n     }\n \n     fn run(self, builder: &Builder) {\n+        if cfg!(test) {\n+            return;\n+        }\n         let build = builder.build;\n         let target = self.target;\n         let out = match build.openssl_dir(target) {"}, {"sha": "362ec0c3b5085751b10000d629a4a620fd28c58f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -199,7 +199,11 @@ impl Step for ToolBuild {\n \n         if !is_expected {\n             if !is_ext_tool {\n-                exit(1);\n+                if cfg!(test) {\n+                    panic!(\"unexpected failure -- would have hard exited\");\n+                } else {\n+                    exit(1);\n+                }\n             } else {\n                 return None;\n             }"}, {"sha": "99d0548a05e7f896bd7918c519441471f62192b4", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd33d3a0e49f67fdeebb8e19593f10b95e5719ee/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=cd33d3a0e49f67fdeebb8e19593f10b95e5719ee", "patch": "@@ -34,6 +34,7 @@ pub fn staticlib(name: &str, target: &str) -> String {\n \n /// Copies a file from `src` to `dst`\n pub fn copy(src: &Path, dst: &Path) {\n+    if cfg!(test) { return; }\n     let _ = fs::remove_file(&dst);\n     // Attempt to \"easy copy\" by creating a hard link (symlinks don't work on\n     // windows), but if that fails just fall back to a slow `copy` operation.\n@@ -66,6 +67,7 @@ pub fn replace_in_file(path: &Path, replacements: &[(&str, &str)]) {\n }\n \n pub fn read_stamp_file(stamp: &Path) -> Vec<PathBuf> {\n+    if cfg!(test) { return vec![]; }\n     let mut paths = Vec::new();\n     let mut contents = Vec::new();\n     t!(t!(File::open(stamp)).read_to_end(&mut contents));\n@@ -215,6 +217,7 @@ impl Drop for TimeIt {\n /// Symlinks two directories, using junctions on Windows and normal symlinks on\n /// Unix.\n pub fn symlink_dir(src: &Path, dest: &Path) -> io::Result<()> {\n+    if cfg!(test) { return Ok(()); }\n     let _ = fs::remove_dir(dest);\n     return symlink_dir_inner(src, dest);\n "}]}