{"sha": "7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODlmOTdjZGUzZGEwNmZkNzAyNWUzZWI5M2Y0YWIzYzEwYzdkNDA=", "commit": {"author": {"name": "James Munns", "email": "james.munns@ferrous-systems.com", "date": "2019-01-10T19:37:51Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2019-01-30T14:13:17Z"}, "message": "Only the compatibility items from the embedded book PR\n\nPR: https://github.com/rust-lang/rust/pull/56291", "tree": {"sha": "8a1096887c20cfb8869623a75b69fc3c9906cded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1096887c20cfb8869623a75b69fc3c9906cded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "html_url": "https://github.com/rust-lang/rust/commit/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/comments", "author": null, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac", "html_url": "https://github.com/rust-lang/rust/commit/43b4c4a36b6c189bf0718a9d77ff1164c3fa7cac"}], "stats": {"total": 125, "additions": 100, "deletions": 25}, "files": [{"sha": "c428f29d706842a2739d58817c0dfa0f84d89dc3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "patch": "@@ -23,7 +23,7 @@ use crate::cache::{INTERNER, Interned};\n use crate::config::Config;\n \n macro_rules! book {\n-    ($($name:ident, $path:expr, $book_name:expr;)+) => {\n+    ($($name:ident, $path:expr, $book_name:expr, $book_ver:expr;)+) => {\n         $(\n             #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $name {\n@@ -49,26 +49,36 @@ macro_rules! book {\n                 builder.ensure(Rustbook {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n+                    version: $book_ver,\n                 })\n             }\n         }\n         )+\n     }\n }\n \n+// NOTE: When adding a book here, make sure to ALSO build the book by\n+// adding a build step in `src/bootstrap/builder.rs`!\n book!(\n-    Nomicon, \"src/doc/nomicon\", \"nomicon\";\n-    Reference, \"src/doc/reference\", \"reference\";\n-    EditionGuide, \"src/doc/edition-guide\", \"edition-guide\";\n-    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n-    RustcBook, \"src/doc/rustc\", \"rustc\";\n-    RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\";\n+    EditionGuide, \"src/doc/edition-guide\", \"edition-guide\", RustbookVersion::MdBook1;\n+    Nomicon, \"src/doc/nomicon\", \"nomicon\", RustbookVersion::MdBook1;\n+    Reference, \"src/doc/reference\", \"reference\", RustbookVersion::MdBook1;\n+    RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\", RustbookVersion::MdBook1;\n+    RustcBook, \"src/doc/rustc\", \"rustc\", RustbookVersion::MdBook1;\n+    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", RustbookVersion::MdBook1;\n );\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+enum RustbookVersion {\n+    MdBook1,\n+    MdBook2,\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n struct Rustbook {\n     target: Interned<String>,\n     name: Interned<String>,\n+    version: RustbookVersion,\n }\n \n impl Step for Rustbook {\n@@ -90,6 +100,7 @@ impl Step for Rustbook {\n             target: self.target,\n             name: self.name,\n             src: INTERNER.intern_path(src),\n+            version: self.version,\n         });\n     }\n }\n@@ -122,6 +133,7 @@ impl Step for UnstableBook {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n             src: builder.md_doc_out(self.target),\n+            version: RustbookVersion::MdBook1,\n         })\n     }\n }\n@@ -175,6 +187,7 @@ struct RustbookSrc {\n     target: Interned<String>,\n     name: Interned<String>,\n     src: Interned<PathBuf>,\n+    version: RustbookVersion,\n }\n \n impl Step for RustbookSrc {\n@@ -205,11 +218,19 @@ impl Step for RustbookSrc {\n         }\n         builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n         let _ = fs::remove_dir_all(&out);\n+\n+        let vers = match self.version {\n+            RustbookVersion::MdBook1 => \"1\",\n+            RustbookVersion::MdBook2 => \"2\",\n+        };\n+\n         builder.run(rustbook_cmd\n                        .arg(\"build\")\n                        .arg(&src)\n                        .arg(\"-d\")\n-                       .arg(out));\n+                       .arg(out)\n+                       .arg(\"-m\")\n+                       .arg(vers));\n     }\n }\n \n@@ -255,6 +276,7 @@ impl Step for TheBook {\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(name.to_string()),\n+            version: RustbookVersion::MdBook1,\n         });\n \n         // building older edition redirects\n@@ -263,18 +285,21 @@ impl Step for TheBook {\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n+            version: RustbookVersion::MdBook1,\n         });\n \n         let source_name = format!(\"{}/second-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n+            version: RustbookVersion::MdBook1,\n         });\n \n         let source_name = format!(\"{}/2018-edition\", name);\n         builder.ensure(Rustbook {\n             target,\n             name: INTERNER.intern_string(source_name),\n+            version: RustbookVersion::MdBook1,\n         });\n \n         // build the version info page and CSS"}, {"sha": "27454431228a84042d77f0a37aae45527d2f3b2a", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "patch": "@@ -1,13 +1,23 @@\n+cargo-features = [\"rename-dependency\"]\n+\n [package]\n authors = [\"The Rust Project Developers\"]\n name = \"rustbook\"\n version = \"0.1.0\"\n license = \"MIT/Apache-2.0\"\n+edition = \"2018\"\n \n [dependencies]\n clap = \"2.25.0\"\n \n-[dependencies.mdbook]\n+[dependencies.mdbook_2]\n+package = \"mdbook\"\n+version = \"0.2.2\"\n+default-features = false\n+features = [\"search\"]\n+\n+[dependencies.mdbook_1]\n+package = \"mdbook\"\n version = \"0.1.7\"\n default-features = false\n features = [\"search\"]"}, {"sha": "5a6246347cc030d6d28ff047b3596dcdb5ce8f82", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7389f97cde3da06fd7025e3eb93f4ab3c10c7d40/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=7389f97cde3da06fd7025e3eb93f4ab3c10c7d40", "patch": "@@ -1,21 +1,24 @@\n //\n-extern crate mdbook;\n-#[macro_use]\n-extern crate clap;\n+use clap::{crate_version};\n \n use std::env;\n use std::path::{Path, PathBuf};\n \n use clap::{App, ArgMatches, SubCommand, AppSettings};\n \n-use mdbook::MDBook;\n-use mdbook::errors::Result;\n+use mdbook_1::{MDBook as MDBook1};\n+use mdbook_1::errors::{Result as Result1};\n+\n+use mdbook_2::{MDBook as MDBook2};\n+use mdbook_2::errors::{Result as Result2};\n \n fn main() {\n     let d_message = \"-d, --dest-dir=[dest-dir]\n 'The output directory for your book{n}(Defaults to ./book when omitted)'\";\n     let dir_message = \"[dir]\n 'A directory for your book{n}(Defaults to Current Directory when omitted)'\";\n+    let vers_message = \"-m, --mdbook-vers=[md-version]\n+'The version of mdbook to use for your book{n}(Defaults to 1 when omitted)'\";\n \n     let matches = App::new(\"rustbook\")\n                     .about(\"Build a book with mdBook\")\n@@ -25,29 +28,66 @@ fn main() {\n                     .subcommand(SubCommand::with_name(\"build\")\n                         .about(\"Build the book from the markdown files\")\n                         .arg_from_usage(d_message)\n-                        .arg_from_usage(dir_message))\n+                        .arg_from_usage(dir_message)\n+                        .arg_from_usage(vers_message))\n                     .get_matches();\n \n     // Check which subcomamnd the user ran...\n-    let res = match matches.subcommand() {\n-        (\"build\", Some(sub_matches)) => build(sub_matches),\n+    match matches.subcommand() {\n+        (\"build\", Some(sub_matches)) => {\n+            match sub_matches.value_of(\"mdbook-vers\") {\n+                None | Some(\"1\") => {\n+                    if let Err(e) = build_1(sub_matches) {\n+                        eprintln!(\"Error: {}\", e);\n+\n+                        for cause in e.iter().skip(1) {\n+                            eprintln!(\"\\tCaused By: {}\", cause);\n+                        }\n+\n+                        ::std::process::exit(101);\n+                    }\n+                }\n+                Some(\"2\") => {\n+                    if let Err(e) = build_2(sub_matches) {\n+                        eprintln!(\"Error: {}\", e);\n+\n+                        for cause in e.iter().skip(1) {\n+                            eprintln!(\"\\tCaused By: {}\", cause);\n+                        }\n+\n+                        ::std::process::exit(101);\n+                    }\n+                }\n+                _ => {\n+                    panic!(\"Invalid mdBook version! Select '1' or '2'\");\n+                }\n+            };\n+        },\n         (_, _) => unreachable!(),\n     };\n+}\n \n-    if let Err(e) = res {\n-        eprintln!(\"Error: {}\", e);\n+// Build command implementation\n+pub fn build_1(args: &ArgMatches) -> Result1<()> {\n+    let book_dir = get_book_dir(args);\n+    let mut book = MDBook1::load(&book_dir)?;\n \n-        for cause in e.iter().skip(1) {\n-            eprintln!(\"\\tCaused By: {}\", cause);\n-        }\n+    // Set this to allow us to catch bugs in advance.\n+    book.config.build.create_missing = false;\n \n-        ::std::process::exit(101);\n+    if let Some(dest_dir) = args.value_of(\"dest-dir\") {\n+        book.config.build.build_dir = PathBuf::from(dest_dir);\n     }\n+\n+    book.build()?;\n+\n+    Ok(())\n }\n+\n // Build command implementation\n-pub fn build(args: &ArgMatches) -> Result<()> {\n+pub fn build_2(args: &ArgMatches) -> Result2<()> {\n     let book_dir = get_book_dir(args);\n-    let mut book = MDBook::load(&book_dir)?;\n+    let mut book = MDBook2::load(&book_dir)?;\n \n     // Set this to allow us to catch bugs in advance.\n     book.config.build.create_missing = false;"}]}