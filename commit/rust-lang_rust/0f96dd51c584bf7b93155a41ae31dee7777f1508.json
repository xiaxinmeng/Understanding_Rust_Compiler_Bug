{"sha": "0f96dd51c584bf7b93155a41ae31dee7777f1508", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTZkZDUxYzU4NGJmN2I5MzE1NWE0MWFlMzFkZWU3Nzc3ZjE1MDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T09:51:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-02T08:36:18Z"}, "message": "turn comments into doc-comments", "tree": {"sha": "69d02bded777513af3ed9562408118fccdd105de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d02bded777513af3ed9562408118fccdd105de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f96dd51c584bf7b93155a41ae31dee7777f1508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f96dd51c584bf7b93155a41ae31dee7777f1508", "html_url": "https://github.com/rust-lang/rust/commit/0f96dd51c584bf7b93155a41ae31dee7777f1508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f96dd51c584bf7b93155a41ae31dee7777f1508/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd9389008e50040dcd97165b3503a0e1a10c987", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd9389008e50040dcd97165b3503a0e1a10c987", "html_url": "https://github.com/rust-lang/rust/commit/6dd9389008e50040dcd97165b3503a0e1a10c987"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "b8d6c1224463128f861704503c083f0756c4de99", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f96dd51c584bf7b93155a41ae31dee7777f1508/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f96dd51c584bf7b93155a41ae31dee7777f1508/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=0f96dd51c584bf7b93155a41ae31dee7777f1508", "patch": "@@ -138,9 +138,11 @@ impl<'tcx> Scalar<()> {\n                          \"Scalar value {:#x} exceeds size of {} bytes\", data, size);\n     }\n \n+    /// Tag this scalar with `new_tag` if it is a pointer, leave it unchanged otherwise.\n+    ///\n+    /// Used by `MemPlace::replace_tag`.\n     #[inline]\n     pub fn with_tag<Tag>(self, new_tag: Tag) -> Scalar<Tag> {\n-        // Used by `MemPlace::replace_tag`\n         match self {\n             Scalar::Ptr(ptr) => Scalar::Ptr(ptr.with_tag(new_tag)),\n             Scalar::Raw { data, size } => Scalar::Raw { data, size },\n@@ -149,9 +151,11 @@ impl<'tcx> Scalar<()> {\n }\n \n impl<'tcx, Tag> Scalar<Tag> {\n+    /// Erase the tag from the scalar, if any.\n+    ///\n+    /// Used by error reporting code to avoid having the error type depend on `Tag`.\n     #[inline]\n     pub fn erase_tag(self) -> Scalar {\n-        // Used by error reporting code to avoid having the error type depend on `Tag`\n         match self {\n             Scalar::Ptr(ptr) => Scalar::Ptr(ptr.erase_tag()),\n             Scalar::Raw { data, size } => Scalar::Raw { data, size },\n@@ -472,10 +476,12 @@ impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n }\n \n impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n+    /// Erase the tag from the scalar, if any.\n+    ///\n+    /// Used by error reporting code to avoid having the error type depend on `Tag`.\n     #[inline]\n     pub fn erase_tag(self) -> ScalarMaybeUndef\n     {\n-        // Used by error reporting code to avoid having the error type depend on `Tag`\n         match self {\n             ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.erase_tag()),\n             ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,"}]}