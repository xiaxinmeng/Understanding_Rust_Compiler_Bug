{"sha": "3aa6f3e8f52e72599d8588025adfe55a9a934c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYTZmM2U4ZjUyZTcyNTk5ZDg1ODgwMjVhZGZlNTVhOWE5MzRjNDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T10:30:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:44Z"}, "message": "Use () for inferred_outlives_crate.", "tree": {"sha": "880af3e80f885e4b70549eabe156f2686d204306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/880af3e80f885e4b70549eabe156f2686d204306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa6f3e8f52e72599d8588025adfe55a9a934c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa6f3e8f52e72599d8588025adfe55a9a934c49", "html_url": "https://github.com/rust-lang/rust/commit/3aa6f3e8f52e72599d8588025adfe55a9a934c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa6f3e8f52e72599d8588025adfe55a9a934c49/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f205ac57b2eac47c043e60546cc4a98bcb70cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f205ac57b2eac47c043e60546cc4a98bcb70cb", "html_url": "https://github.com/rust-lang/rust/commit/09f205ac57b2eac47c043e60546cc4a98bcb70cb"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "15261b278638597da1a33e15cfed3dab825a0288", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3aa6f3e8f52e72599d8588025adfe55a9a934c49/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa6f3e8f52e72599d8588025adfe55a9a934c49/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3aa6f3e8f52e72599d8588025adfe55a9a934c49", "patch": "@@ -555,8 +555,7 @@ rustc_queries! {\n     }\n \n     /// Maps from thee `DefId` of a type to its (inferred) outlives.\n-    query inferred_outlives_crate(_: CrateNum)\n-        -> ty::CratePredicatesMap<'tcx> {\n+    query inferred_outlives_crate(_: ()) -> ty::CratePredicatesMap<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"computing the inferred outlives predicates for items in this crate\" }\n     }"}, {"sha": "d7eb31c2abef51b927b9c759443a71e66dba2ad7", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3aa6f3e8f52e72599d8588025adfe55a9a934c49/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa6f3e8f52e72599d8588025adfe55a9a934c49/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=3aa6f3e8f52e72599d8588025adfe55a9a934c49", "patch": "@@ -1,6 +1,6 @@\n use hir::Node;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, CratePredicatesMap, ToPredicate, TyCtxt};\n@@ -23,7 +23,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {\n-                let crate_map = tcx.inferred_outlives_crate(LOCAL_CRATE);\n+                let crate_map = tcx.inferred_outlives_crate(());\n \n                 let predicates = crate_map.predicates.get(&item_def_id).copied().unwrap_or(&[]);\n \n@@ -58,9 +58,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n     }\n }\n \n-fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CratePredicatesMap<'_> {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     // Compute a map from each struct/enum/union S to the **explicit**\n     // outlives predicates (`T: 'a`, `'a: 'b`) that the user wrote.\n     // Typically there won't be many of these, except in older code where"}]}