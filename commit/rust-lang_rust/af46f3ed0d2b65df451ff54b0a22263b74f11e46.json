{"sha": "af46f3ed0d2b65df451ff54b0a22263b74f11e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDZmM2VkMGQyYjY1ZGY0NTFmZjU0YjBhMjIyNjNiNzRmMTFlNDY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T19:41:45Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T19:49:42Z"}, "message": "rustc: Introduce ext module. Move some things from parser to ext.\n\nIntroduce an ext_ctxt record to provide a span_err method for use while\nexpanding syntax extensions. Hopefully it will be useful for other things.", "tree": {"sha": "6627fa8b2b9968fd3c3d562c30622dad7ee480fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6627fa8b2b9968fd3c3d562c30622dad7ee480fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af46f3ed0d2b65df451ff54b0a22263b74f11e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af46f3ed0d2b65df451ff54b0a22263b74f11e46", "html_url": "https://github.com/rust-lang/rust/commit/af46f3ed0d2b65df451ff54b0a22263b74f11e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af46f3ed0d2b65df451ff54b0a22263b74f11e46/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd066a02adac9fb87cea1789b0a31a9355374db", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd066a02adac9fb87cea1789b0a31a9355374db", "html_url": "https://github.com/rust-lang/rust/commit/dbd066a02adac9fb87cea1789b0a31a9355374db"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "428ac1bf295e92a3ec6ae917c8f59bff7ef5d3a1", "filename": "src/comp/front/ext.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fext.rs?ref=af46f3ed0d2b65df451ff54b0a22263b74f11e46", "patch": "@@ -0,0 +1,49 @@\n+import std::option;\n+import std::map::hashmap;\n+\n+import driver::session::session;\n+import util::common::span;\n+import util::common::new_str_hash;\n+\n+type syntax_expander = fn(&ext_ctxt, &parser::parser, span,\n+                          &vec[@ast::expr],\n+                          option::t[str]) -> @ast::expr;\n+\n+// Temporary: to introduce a tag in order to make a recursive type work\n+tag syntax_extension {\n+    x(syntax_expander);\n+}\n+\n+// A temporary hard-coded map of methods for expanding syntax extension\n+// AST nodes into full ASTs\n+fn syntax_expander_table() -> hashmap[str, syntax_extension] {\n+    auto syntax_expanders = new_str_hash[syntax_extension]();\n+    syntax_expanders.insert(\"fmt\", x(extfmt::expand_syntax_ext));\n+    syntax_expanders.insert(\"env\", x(extenv::expand_syntax_ext));\n+    ret syntax_expanders;\n+}\n+\n+type span_err_fn = fn (span sp, str msg) -> !;\n+\n+// Provides a limited set of services necessary for syntax extensions\n+// to do their thing\n+type ext_ctxt = rec(span_err_fn span_err);\n+\n+fn mk_ctxt(session sess) -> ext_ctxt {\n+    fn ext_span_err_(session sess, span sp, str err) -> ! {\n+        sess.span_err(sp, err);\n+    }\n+    auto ext_span_err = bind ext_span_err_(sess, _, _);\n+    ret rec(span_err = ext_span_err);\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "fc7d889d8f6f5665371401b6f8132a5fd2492736", "filename": "src/comp/front/extenv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fextenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fextenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextenv.rs?ref=af46f3ed0d2b65df451ff54b0a22263b74f11e46", "patch": "@@ -11,10 +11,13 @@ import std::vec;\n import std::option;\n import std::generic_os;\n \n+import ext::*;\n+\n export expand_syntax_ext;\n \n // FIXME: Need to thread parser through here to handle errors correctly\n-fn expand_syntax_ext(&parser::parser p,\n+fn expand_syntax_ext(&ext_ctxt cx,\n+                     &parser::parser p,\n                      common::span sp,\n                      &vec[@ast::expr] args,\n                      option::t[str] body) -> @ast::expr {"}, {"sha": "a2fdd6742aecedba74b3a7454c91774f6c70a327", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=af46f3ed0d2b65df451ff54b0a22263b74f11e46", "patch": "@@ -15,9 +15,12 @@ import std::option::some;\n \n import std::extfmt::ct::*;\n \n+import ext::*;\n+\n export expand_syntax_ext;\n \n-fn expand_syntax_ext(&parser p, common::span sp, \n+fn expand_syntax_ext(&ext_ctxt cx,\n+                     &parser p, common::span sp, \n                      &vec[@ast::expr] args,\n                      option::t[str] body) -> @ast::expr {\n "}, {"sha": "a07838d03e7c9f794cd961bc5bfe0050da1b9904", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=af46f3ed0d2b65df451ff54b0a22263b74f11e46", "patch": "@@ -27,11 +27,6 @@ tag file_type {\n \n type ty_or_bang = util::common::ty_or_bang[@ast::ty];\n \n-// Temporary: to introduce a tag in order to make a recursive type work\n-tag syntax_extension {\n-    x(syntax_expander);\n-}\n-\n state type parser =\n     state obj {\n         fn peek() -> token::token;\n@@ -53,15 +48,12 @@ state type parser =\n         fn get_reader() -> lexer::reader;\n         fn get_filemap() -> codemap::filemap;\n         fn get_bad_expr_words() -> hashmap[str, ()];\n-        fn get_syntax_expanders() -> hashmap[str, syntax_extension];\n+        fn get_syntax_expanders() -> hashmap[str, ext::syntax_extension];\n         fn get_chpos() -> uint;\n         fn get_ann() -> ast::ann;\n         fn next_ann_num() -> uint;\n     };\n \n-type syntax_expander = fn(&parser, common::span, &vec[@ast::expr], \n-                          option::t[str]) -> @ast::expr;\n-\n fn new_parser(session::session sess,\n                      eval::env env,\n                      ast::def_id initial_def,\n@@ -80,7 +72,8 @@ fn new_parser(session::session sess,\n                            vec[op_spec] precs,\n                            mutable uint next_ann_var,\n                            hashmap[str, ()] bad_words,\n-                           hashmap[str, syntax_extension] syntax_expanders)\n+                           hashmap[str, ext::syntax_extension]\n+                               syntax_expanders)\n         {\n             fn peek() -> token::token {\n                 ret tok;\n@@ -153,7 +146,7 @@ fn new_parser(session::session sess,\n                 ret bad_words;\n             }\n \n-            fn get_syntax_expanders() -> hashmap[str, syntax_extension] {\n+            fn get_syntax_expanders() -> hashmap[str, ext::syntax_extension] {\n                 ret syntax_expanders;\n             }\n \n@@ -183,7 +176,7 @@ fn new_parser(session::session sess,\n     ret stdio_parser(sess, env, ftype, lexer::next_token(rdr),\n                      npos, npos, npos, initial_def._1, UNRESTRICTED,\n                      initial_def._0, rdr, prec_table(), next_ann,\n-                     bad_expr_word_table(), syntax_expander_table());\n+                     bad_expr_word_table(), ext::syntax_expander_table());\n }\n \n // These are the words that shouldn't be allowed as value identifiers,\n@@ -227,13 +220,6 @@ fn bad_expr_word_table() -> hashmap[str, ()] {\n     ret words;\n }\n \n-fn syntax_expander_table() -> hashmap[str, syntax_extension] {\n-    auto syntax_expanders = new_str_hash[syntax_extension]();\n-    syntax_expanders.insert(\"fmt\", x(extfmt::expand_syntax_ext));\n-    syntax_expanders.insert(\"env\", x(extenv::expand_syntax_ext));\n-    ret syntax_expanders;\n-}\n-\n fn unexpected(&parser p, token::token t) -> ! {\n     let str s = \"unexpected token: \";\n     s += token::to_str(p.get_reader(), t);\n@@ -1060,11 +1046,13 @@ fn expand_syntax_ext(&parser p, common::span sp,\n     auto extname = path.node.idents.(0);\n \n     alt (p.get_syntax_expanders().find(extname)) {\n-        case (none[syntax_extension]) {\n+        case (none) {\n             p.err(\"unknown syntax expander: '\" + extname + \"'\");\n         }\n-        case (some[syntax_extension](x(?ext))) {\n-            ret ast::expr_ext(path, args, body, ext(p, sp, args, body), \n+        case (some(ext::x(?ext))) {\n+            auto ext_cx = ext::mk_ctxt(p.get_session());\n+            ret ast::expr_ext(path, args, body,\n+                              ext(ext_cx, p, sp, args, body), \n                               p.get_ann());\n         }\n     }"}, {"sha": "55683ba7ffa303430a2d64d737ada7fd83a6d481", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/af46f3ed0d2b65df451ff54b0a22263b74f11e46/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=af46f3ed0d2b65df451ff54b0a22263b74f11e46", "patch": "@@ -38,6 +38,7 @@ mod pretty {\n mod front {\n     mod ast;\n     mod creader;\n+    mod ext;\n     mod extfmt;\n     mod extenv;\n     mod codemap;"}]}