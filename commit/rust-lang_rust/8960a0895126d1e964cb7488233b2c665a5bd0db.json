{"sha": "8960a0895126d1e964cb7488233b2c665a5bd0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjBhMDg5NTEyNmQxZTk2NGNiNzQ4ODIzM2IyYzY2NWE1YmQwZGI=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-25T23:12:59Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-25T23:26:13Z"}, "message": "Fix bug where library functions were not highlighted as such", "tree": {"sha": "56b47686e8413b6df6d0f6a635b4d8920c420fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b47686e8413b6df6d0f6a635b4d8920c420fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8960a0895126d1e964cb7488233b2c665a5bd0db", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCth5UACgkQ94j36ZAT\nYAMucQ/9F38CGOFK3//XSZvdlMa3Aeri4GzeZHuaLOGwVOaKXCHzxdc7VBb1ICCK\nkziHnYSzB+JJAdCqDwQmS1SuW/1fb9pH1yzFDCKEu7OQO8yRaQHYvds5aVDmzQv4\n3/aA6aGfChKtIp31tI9uZjurJwfpby3u+8nFnkQkJ5Z78CAi1ldCiMhtlX4EGkH6\nUbvkc90S6AngyY+tv64ZJZvOJgYyw1X8kKWwDHr7wqeXMqhVB++bXmr9b8i1r5FO\n92k1Sz63qzjUpStpcnzbCyeWoGd3OSmXTQ5ia+1aC1xPmkVj1sjImtBpNWAfcxB2\n07awTIj8/owiYHNEkBLshWEoK0Xe3tIz5vXSqbUn74nRv2Z6PUwo7mB9hM5/LV13\nH/0PRgeCjW7wOZmqsgVMI/iTNuGZZWqseL/OxYXQYt7rMY+fEtWtk3zL0vtC1Jr8\n92TAOtp6h9h/6Ushj86JnYDNMeKAzJ91SGpmKfeyZFA1RWX2mo1EiwgbuQRJjJSs\nVGkOgVmmh7t5PWuk33+feIfzLboNMOB3AHL49OzhD+DN9g84+McCvrhLInHkeUWu\nqCiaOf0seQ31ZGwUmCMFoGdLcJnY+wVYD3piaJZVRNByADWbAi6Ik19olfciyTsl\ncbA3BpViC90biY1U8xm+TOWQB+UJaNE06boy7Ak2/HQZ/WwZhj8=\n=ofql\n-----END PGP SIGNATURE-----", "payload": "tree 56b47686e8413b6df6d0f6a635b4d8920c420fc2\nparent 8b049ec393230e4b9fea3022a3ebf34e2af5395d\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621984379 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621985173 +1000\n\nFix bug where library functions were not highlighted as such\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8960a0895126d1e964cb7488233b2c665a5bd0db", "html_url": "https://github.com/rust-lang/rust/commit/8960a0895126d1e964cb7488233b2c665a5bd0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8960a0895126d1e964cb7488233b2c665a5bd0db/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b049ec393230e4b9fea3022a3ebf34e2af5395d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b049ec393230e4b9fea3022a3ebf34e2af5395d", "html_url": "https://github.com/rust-lang/rust/commit/8b049ec393230e4b9fea3022a3ebf34e2af5395d"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "9503c936d1cbb4dd7f5331dccb59e3907a64b9ca", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=8960a0895126d1e964cb7488233b2c665a5bd0db", "patch": "@@ -71,7 +71,7 @@ pub(super) fn element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n-            highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n+            highlight_func_by_name_ref(sema, krate, &name_ref).unwrap_or_else(|| {\n                 let is_self = name_ref.self_token().is_some();\n                 let h = match NameRefClass::classify(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n@@ -108,7 +108,7 @@ pub(super) fn element(\n                         NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n                     },\n                     None if syntactic_name_ref_highlighting => {\n-                        highlight_name_ref_by_syntax(name_ref, sema)\n+                        highlight_name_ref_by_syntax(name_ref, sema, krate)\n                     }\n                     None => HlTag::UnresolvedReference.into(),\n                 };\n@@ -434,27 +434,34 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n \n fn highlight_func_by_name_ref(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     name_ref: &ast::NameRef,\n ) -> Option<Highlight> {\n     let mc = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n-    highlight_method_call(sema, &mc)\n+    highlight_method_call(sema, krate, &mc)\n }\n \n fn highlight_method_call(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     method_call: &ast::MethodCallExpr,\n ) -> Option<Highlight> {\n     let func = sema.resolve_method_call(&method_call)?;\n+\n     let mut h = SymbolKind::Function.into();\n     h |= HlMod::Associated;\n+\n     if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n         h |= HlMod::Unsafe;\n     }\n     if func.is_async(sema.db) {\n         h |= HlMod::Async;\n     }\n     if func.as_assoc_item(sema.db).and_then(|it| it.containing_trait(sema.db)).is_some() {\n-        h |= HlMod::Trait\n+        h |= HlMod::Trait;\n+    }\n+    if Some(func.module(sema.db).krate()) != krate {\n+        h |= HlMod::Library;\n     }\n \n     if let Some(self_param) = func.self_param(sema.db) {\n@@ -503,7 +510,11 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n+fn highlight_name_ref_by_syntax(\n+    name: ast::NameRef,\n+    sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n+) -> Highlight {\n     let default = HlTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n@@ -514,7 +525,7 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n     match parent.kind() {\n         METHOD_CALL_EXPR => {\n             return ast::MethodCallExpr::cast(parent)\n-                .and_then(|it| highlight_method_call(sema, &it))\n+                .and_then(|it| highlight_method_call(sema, krate, &it))\n                 .unwrap_or_else(|| SymbolKind::Function.into());\n         }\n         FIELD_EXPR => {"}, {"sha": "0264e39a3301d3757984b40f68cc107694a2695e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=8960a0895126d1e964cb7488233b2c665a5bd0db", "patch": "@@ -258,7 +258,7 @@\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword control\">if</span> <span class=\"keyword\">let</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Die</span> <span class=\"operator\">=</span> <span class=\"variable\">control_flow</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword control\">if</span> <span class=\"variable\">control_flow</span><span class=\"operator\">.</span><span class=\"function associated consuming library\">should_die</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "662b534813d1a9bfe33e1e8f591be893016e2402", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8960a0895126d1e964cb7488233b2c665a5bd0db/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8960a0895126d1e964cb7488233b2c665a5bd0db", "patch": "@@ -232,7 +232,7 @@ fn use_foo_items() {\n \n     let control_flow = foo::identity(foo::ControlFlow::Continue);\n \n-    if let foo::ControlFlow::Die = control_flow {\n+    if control_flow.should_die() {\n         foo::die!();\n     }\n }\n@@ -249,6 +249,12 @@ pub enum ControlFlow {\n     Die,\n }\n \n+impl ControlFlow {\n+    pub fn should_die(self) -> bool {\n+        matches!(self, ControlFlow::Die)\n+    }\n+}\n+\n pub fn identity<T>(x: T) -> T { x }\n \n pub mod consts {"}]}