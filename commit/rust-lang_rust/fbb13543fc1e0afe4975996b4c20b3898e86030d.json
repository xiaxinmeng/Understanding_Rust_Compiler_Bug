{"sha": "fbb13543fc1e0afe4975996b4c20b3898e86030d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjEzNTQzZmMxZTBhZmU0OTc1OTk2YjRjMjBiMzg5OGU4NjAzMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T00:22:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T00:22:27Z"}, "message": "Auto merge of #25839 - bluss:str-split-at-impl, r=alexcrichton\n\nImplement RFC rust-lang/rfcs#1123\r\n\r\nAdd str method str::split_at(mid: usize) -> (&str, &str).\r\n\r\nAlso a minor cleanup in the collections::str module. Remove redundant slicing of self.", "tree": {"sha": "db5c0f7f0a9f3e735022bb155583e950914e4c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5c0f7f0a9f3e735022bb155583e950914e4c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb13543fc1e0afe4975996b4c20b3898e86030d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb13543fc1e0afe4975996b4c20b3898e86030d", "html_url": "https://github.com/rust-lang/rust/commit/fbb13543fc1e0afe4975996b4c20b3898e86030d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb13543fc1e0afe4975996b4c20b3898e86030d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ab4f761c09830bdd77726f5ae2351e9e3432c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ab4f761c09830bdd77726f5ae2351e9e3432c4", "html_url": "https://github.com/rust-lang/rust/commit/01ab4f761c09830bdd77726f5ae2351e9e3432c4"}, {"sha": "1112a05b8fb149a671a9037a07ea1708c80781e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1112a05b8fb149a671a9037a07ea1708c80781e6", "html_url": "https://github.com/rust-lang/rust/commit/1112a05b8fb149a671a9037a07ea1708c80781e6"}], "stats": {"total": 150, "additions": 105, "deletions": 45}, "files": [{"sha": "5e16e55f18540a6e4665227defb0c2979e93ebc2", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 72, "deletions": 45, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=fbb13543fc1e0afe4975996b4c20b3898e86030d", "patch": "@@ -439,7 +439,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len(&self) -> usize {\n-        core_str::StrExt::len(&self[..])\n+        core_str::StrExt::len(self)\n     }\n \n     /// Returns true if this slice has a length of zero bytes.\n@@ -452,7 +452,7 @@ impl str {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n-        core_str::StrExt::is_empty(&self[..])\n+        core_str::StrExt::is_empty(self)\n     }\n \n     /// Returns a string's displayed width in columns.\n@@ -473,7 +473,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn width(&self, is_cjk: bool) -> usize {\n-        UnicodeStr::width(&self[..], is_cjk)\n+        UnicodeStr::width(self, is_cjk)\n     }\n \n     /// Checks that `index`-th byte lies at the start and/or end of a\n@@ -509,7 +509,7 @@ impl str {\n                          this method may want to be replaced with checked \\\n                          slicing\")]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n-        core_str::StrExt::is_char_boundary(&self[..], index)\n+        core_str::StrExt::is_char_boundary(self, index)\n     }\n \n     /// Converts `self` to a byte slice.\n@@ -522,7 +522,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n     pub fn as_bytes(&self) -> &[u8] {\n-        core_str::StrExt::as_bytes(&self[..])\n+        core_str::StrExt::as_bytes(self)\n     }\n \n     /// Returns a raw pointer to the `&str`'s buffer.\n@@ -540,7 +540,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const u8 {\n-        core_str::StrExt::as_ptr(&self[..])\n+        core_str::StrExt::as_ptr(self)\n     }\n \n     /// Takes a bytewise slice from a string.\n@@ -564,7 +564,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n-        core_str::StrExt::slice_unchecked(&self[..], begin, end)\n+        core_str::StrExt::slice_unchecked(self, begin, end)\n     }\n \n     /// Returns a slice of the string from the character range [`begin`..`end`).\n@@ -594,7 +594,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"may have yet to prove its worth\")]\n     pub fn slice_chars(&self, begin: usize, end: usize) -> &str {\n-        core_str::StrExt::slice_chars(&self[..], begin, end)\n+        core_str::StrExt::slice_chars(self, begin, end)\n     }\n \n     /// Given a byte position, return the next char and its index.\n@@ -644,7 +644,7 @@ impl str {\n                          be removed in favor of just char_at() or eventually \\\n                          removed altogether\")]\n     pub fn char_range_at(&self, start: usize) -> CharRange {\n-        core_str::StrExt::char_range_at(&self[..], start)\n+        core_str::StrExt::char_range_at(self, start)\n     }\n \n     /// Given a byte position, return the previous `char` and its position.\n@@ -696,7 +696,7 @@ impl str {\n                          be removed in favor of just char_at_reverse() or \\\n                          eventually removed altogether\")]\n     pub fn char_range_at_reverse(&self, start: usize) -> CharRange {\n-        core_str::StrExt::char_range_at_reverse(&self[..], start)\n+        core_str::StrExt::char_range_at_reverse(self, start)\n     }\n \n     /// Given a byte position, return the `char` at that position.\n@@ -721,7 +721,7 @@ impl str {\n                          iterators or by getting the first char from a \\\n                          subslice\")]\n     pub fn char_at(&self, i: usize) -> char {\n-        core_str::StrExt::char_at(&self[..], i)\n+        core_str::StrExt::char_at(self, i)\n     }\n \n     /// Given a byte position, return the `char` at that position, counting\n@@ -745,7 +745,7 @@ impl str {\n                          are also somewhat unclear, especially with which \\\n                          cases generate panics\")]\n     pub fn char_at_reverse(&self, i: usize) -> char {\n-        core_str::StrExt::char_at_reverse(&self[..], i)\n+        core_str::StrExt::char_at_reverse(self, i)\n     }\n \n     /// Retrieves the first character from a `&str` and returns it.\n@@ -776,7 +776,34 @@ impl str {\n                          may not be warranted with the existence of the chars \\\n                          and/or char_indices iterators\")]\n     pub fn slice_shift_char(&self) -> Option<(char, &str)> {\n-        core_str::StrExt::slice_shift_char(&self[..])\n+        core_str::StrExt::slice_shift_char(self)\n+    }\n+\n+    /// Divide one string slice into two at an index.\n+    ///\n+    /// The index `mid` is a byte offset from the start of the string\n+    /// that must be on a character boundary.\n+    ///\n+    /// Return slices `&self[..mid]` and `&self[mid..]`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `mid` is beyond the last character of the string,\n+    /// or if it is not on a character boundary.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// # #![feature(collections)]\n+    /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n+    /// let first_space = s.find(' ').unwrap_or(s.len());\n+    /// let (a, b) = s.split_at(first_space);\n+    ///\n+    /// assert_eq!(a, \"L\u00f6we\");\n+    /// assert_eq!(b, \" \u8001\u864e L\u00e9opard\");\n+    /// ```\n+    #[inline]\n+    pub fn split_at(&self, mid: usize) -> (&str, &str) {\n+        core_str::StrExt::split_at(self, mid)\n     }\n \n     /// An iterator over the codepoints of `self`.\n@@ -790,7 +817,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn chars(&self) -> Chars {\n-        core_str::StrExt::chars(&self[..])\n+        core_str::StrExt::chars(self)\n     }\n \n     /// An iterator over the characters of `self` and their byte offsets.\n@@ -805,7 +832,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn char_indices(&self) -> CharIndices {\n-        core_str::StrExt::char_indices(&self[..])\n+        core_str::StrExt::char_indices(self)\n     }\n \n     /// An iterator over the bytes of `self`.\n@@ -819,7 +846,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn bytes(&self) -> Bytes {\n-        core_str::StrExt::bytes(&self[..])\n+        core_str::StrExt::bytes(self)\n     }\n \n     /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n@@ -835,7 +862,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     pub fn split_whitespace(&self) -> SplitWhitespace {\n-        UnicodeStr::split_whitespace(&self[..])\n+        UnicodeStr::split_whitespace(self)\n     }\n \n     /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n@@ -857,7 +884,7 @@ impl str {\n                reason = \"the precise algorithm to use is unclear\")]\n     #[allow(deprecated)]\n     pub fn words(&self) -> Words {\n-        UnicodeStr::words(&self[..])\n+        UnicodeStr::words(self)\n     }\n \n     /// An iterator over the lines of a string, separated by `\\n`.\n@@ -883,7 +910,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lines(&self) -> Lines {\n-        core_str::StrExt::lines(&self[..])\n+        core_str::StrExt::lines(self)\n     }\n \n     /// An iterator over the lines of a string, separated by either\n@@ -910,7 +937,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lines_any(&self) -> LinesAny {\n-        core_str::StrExt::lines_any(&self[..])\n+        core_str::StrExt::lines_any(self)\n     }\n \n     /// Returns an iterator over the string in Unicode Normalization Form D\n@@ -1016,7 +1043,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn graphemes(&self, is_extended: bool) -> Graphemes {\n-        UnicodeStr::graphemes(&self[..], is_extended)\n+        UnicodeStr::graphemes(self, is_extended)\n     }\n \n     /// Returns an iterator over the grapheme clusters of `self` and their\n@@ -1037,7 +1064,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices {\n-        UnicodeStr::grapheme_indices(&self[..], is_extended)\n+        UnicodeStr::grapheme_indices(self, is_extended)\n     }\n \n     /// Returns an iterator of `u16` over the string encoded as UTF-16.\n@@ -1058,7 +1085,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-        core_str::StrExt::contains(&self[..], pat)\n+        core_str::StrExt::contains(self, pat)\n     }\n \n     /// Returns `true` if the given `&str` is a prefix of the string.\n@@ -1070,7 +1097,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-        core_str::StrExt::starts_with(&self[..], pat)\n+        core_str::StrExt::starts_with(self, pat)\n     }\n \n     /// Returns true if the given `&str` is a suffix of the string.\n@@ -1084,7 +1111,7 @@ impl str {\n     pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::ends_with(&self[..], pat)\n+        core_str::StrExt::ends_with(self, pat)\n     }\n \n     /// Returns the byte index of the first character of `self` that matches\n@@ -1129,7 +1156,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n-        core_str::StrExt::find(&self[..], pat)\n+        core_str::StrExt::find(self, pat)\n     }\n \n     /// Returns the byte index of the last character of `self` that\n@@ -1173,7 +1200,7 @@ impl str {\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rfind(&self[..], pat)\n+        core_str::StrExt::rfind(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1251,7 +1278,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n-        core_str::StrExt::split(&self[..], pat)\n+        core_str::StrExt::split(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1299,7 +1326,7 @@ impl str {\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplit(&self[..], pat)\n+        core_str::StrExt::rsplit(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1337,7 +1364,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n-        core_str::StrExt::split_terminator(&self[..], pat)\n+        core_str::StrExt::split_terminator(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1375,7 +1402,7 @@ impl str {\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplit_terminator(&self[..], pat)\n+        core_str::StrExt::rsplit_terminator(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by a pattern,\n@@ -1422,7 +1449,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> {\n-        core_str::StrExt::splitn(&self[..], count, pat)\n+        core_str::StrExt::splitn(self, count, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by a pattern,\n@@ -1469,7 +1496,7 @@ impl str {\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplitn(&self[..], count, pat)\n+        core_str::StrExt::rsplitn(self, count, pat)\n     }\n \n     /// An iterator over the matches of a pattern within `self`.\n@@ -1503,7 +1530,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"method got recently added\")]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n-        core_str::StrExt::matches(&self[..], pat)\n+        core_str::StrExt::matches(self, pat)\n     }\n \n     /// An iterator over the matches of a pattern within `self`, yielded in\n@@ -1538,7 +1565,7 @@ impl str {\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rmatches(&self[..], pat)\n+        core_str::StrExt::rmatches(self, pat)\n     }\n \n     /// An iterator over the start and end indices of the disjoint matches\n@@ -1583,7 +1610,7 @@ impl str {\n     // NB: Right now MatchIndices yields `(usize, usize)`, but it would\n     // be more consistent with `matches` and `char_indices` to return `(usize, &str)`\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n-        core_str::StrExt::match_indices(&self[..], pat)\n+        core_str::StrExt::match_indices(self, pat)\n     }\n \n     /// An iterator over the start and end indices of the disjoint matches of\n@@ -1629,7 +1656,7 @@ impl str {\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rmatch_indices(&self[..], pat)\n+        core_str::StrExt::rmatch_indices(self, pat)\n     }\n \n     /// Returns the byte offset of an inner slice relative to an enclosing\n@@ -1653,7 +1680,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"awaiting convention about comparability of arbitrary slices\")]\n     pub fn subslice_offset(&self, inner: &str) -> usize {\n-        core_str::StrExt::subslice_offset(&self[..], inner)\n+        core_str::StrExt::subslice_offset(self, inner)\n     }\n \n     /// Returns a `&str` with leading and trailing whitespace removed.\n@@ -1666,7 +1693,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim(&self) -> &str {\n-        UnicodeStr::trim(&self[..])\n+        UnicodeStr::trim(self)\n     }\n \n     /// Returns a `&str` with leading whitespace removed.\n@@ -1679,7 +1706,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left(&self) -> &str {\n-        UnicodeStr::trim_left(&self[..])\n+        UnicodeStr::trim_left(self)\n     }\n \n     /// Returns a `&str` with trailing whitespace removed.\n@@ -1692,7 +1719,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_right(&self) -> &str {\n-        UnicodeStr::trim_right(&self[..])\n+        UnicodeStr::trim_right(self)\n     }\n \n     /// Returns a string with all pre- and suffixes that match a pattern\n@@ -1722,7 +1749,7 @@ impl str {\n     pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: DoubleEndedSearcher<'a>\n     {\n-        core_str::StrExt::trim_matches(&self[..], pat)\n+        core_str::StrExt::trim_matches(self, pat)\n     }\n \n     /// Returns a string with all prefixes that match a pattern\n@@ -1742,7 +1769,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n-        core_str::StrExt::trim_left_matches(&self[..], pat)\n+        core_str::StrExt::trim_left_matches(self, pat)\n     }\n \n     /// Returns a string with all suffixes that match a pattern\n@@ -1772,7 +1799,7 @@ impl str {\n     pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::trim_right_matches(&self[..], pat)\n+        core_str::StrExt::trim_right_matches(self, pat)\n     }\n \n     /// Parses `self` into the specified type.\n@@ -1795,7 +1822,7 @@ impl str {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {\n-        core_str::StrExt::parse(&self[..])\n+        core_str::StrExt::parse(self)\n     }\n \n     /// Replaces all occurrences of one string with another."}, {"sha": "f8bc1ceaf7dc35e74b49c3056d56c1bcd0bb5b91", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=fbb13543fc1e0afe4975996b4c20b3898e86030d", "patch": "@@ -688,6 +688,26 @@ fn test_char_at_reverse() {\n     }\n }\n \n+#[test]\n+fn test_split_at() {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+    for (index, _) in s.char_indices() {\n+        let (a, b) = s.split_at(index);\n+        assert_eq!(&s[..a.len()], a);\n+        assert_eq!(&s[a.len()..], b);\n+    }\n+    let (a, b) = s.split_at(s.len());\n+    assert_eq!(a, s);\n+    assert_eq!(b, \"\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_split_at_boundscheck() {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+    let (a, b) = s.split_at(1);\n+}\n+\n #[test]\n fn test_escape_unicode() {\n     assert_eq!(\"abc\".escape_unicode(),"}, {"sha": "4db64a3097ea7dd4dd06f69382f7631e6df1216e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb13543fc1e0afe4975996b4c20b3898e86030d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=fbb13543fc1e0afe4975996b4c20b3898e86030d", "patch": "@@ -1517,6 +1517,7 @@ pub trait StrExt {\n     fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>;\n     fn find_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n+    fn split_at(&self, mid: usize) -> (&str, &str);\n     fn slice_shift_char<'a>(&'a self) -> Option<(char, &'a str)>;\n     fn subslice_offset(&self, inner: &str) -> usize;\n     fn as_ptr(&self) -> *const u8;\n@@ -1809,6 +1810,18 @@ impl StrExt for str {\n         self.find(pat)\n     }\n \n+    fn split_at(&self, mid: usize) -> (&str, &str) {\n+        // is_char_boundary checks that the index is in [0, .len()]\n+        if self.is_char_boundary(mid) {\n+            unsafe {\n+                (self.slice_unchecked(0, mid),\n+                 self.slice_unchecked(mid, self.len()))\n+            }\n+        } else {\n+            slice_error_fail(self, 0, mid)\n+        }\n+    }\n+\n     #[inline]\n     fn slice_shift_char(&self) -> Option<(char, &str)> {\n         if self.is_empty() {"}]}