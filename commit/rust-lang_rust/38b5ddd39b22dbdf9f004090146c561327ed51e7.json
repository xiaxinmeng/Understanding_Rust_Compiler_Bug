{"sha": "38b5ddd39b22dbdf9f004090146c561327ed51e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YjVkZGQzOWIyMmRiZGY5ZjAwNDA5MDE0NmM1NjEzMjdlZDUxZTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-16T08:12:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:06:07Z"}, "message": "Add a variant to ConstVal for storing miri results", "tree": {"sha": "01d0868526c902cf2d8a40ac92b11035926dbfb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d0868526c902cf2d8a40ac92b11035926dbfb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b5ddd39b22dbdf9f004090146c561327ed51e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg4N8ACgkQpp+NIls6\n19l3YA/+LZjImmYLGJxGGxpm749WxGomiCx0ilCzxianhIQ6R+V2AkzQ90FjEjby\n8on7+BSEwMRKs18Niq5cSgPEia+QYZOOEthbS8ZzcwXsajVvE/0j704I1Avg23DO\n832IEoxs+sg4Q2vY9/EuWrWQyWRiCc44f6ARG0OIMvz4saDBGGGWQYM64a327ahQ\nDkUf42Dfb0/ZbFOTnrkZetWeI6ZTGhpxjvTh83yyb0tZrRHJnyO+ak1JaJG/+JVZ\nJBLjSQLEFd5Ugm0uyGAL6qlImyySPRlkobjhk6rzIgqbRMgPA0/Tb7fEprRDSoAF\nPueQPfF+KizHARv/yBMz+OC9hT9xmGQMeTc7AXhABHCtqLzM4T69Wl5tG83yqyb4\ncndxfvC7X7t1qK1hui7R+MFFKsB01O6P090BtwardRwQ/yAfrd8WjHJ+ztIrn8ry\njbvBm0oaSOnT+wJp2O69uQg1KuZES5t/1pzNQeo6bct7iT69Wl2WJIVQtXfdggh8\ntcPx0dh+G/4bFHhVtraLe1FgvafQQ5qAFivB8/Q9dy6NJ1A7LB/qM69vjtfxEH1/\nj8xgRsX+hwQn0Z2rYcOG8LjnnX2eWmtm+VFq4yWBhk88VhheNhjTiigFpncEQHqQ\ngCq23I7I5fd1P+BVIkT31yz/APkdUhh3MNvpjWVhareEgL8RF3Q=\n=ksiX\n-----END PGP SIGNATURE-----", "payload": "tree 01d0868526c902cf2d8a40ac92b11035926dbfb9\nparent cdcca786468a71375584bb48e3093790c91084f7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516090374 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520492767 +0100\n\nAdd a variant to ConstVal for storing miri results\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b5ddd39b22dbdf9f004090146c561327ed51e7", "html_url": "https://github.com/rust-lang/rust/commit/38b5ddd39b22dbdf9f004090146c561327ed51e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b5ddd39b22dbdf9f004090146c561327ed51e7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcca786468a71375584bb48e3093790c91084f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcca786468a71375584bb48e3093790c91084f7", "html_url": "https://github.com/rust-lang/rust/commit/cdcca786468a71375584bb48e3093790c91084f7"}], "stats": {"total": 190, "additions": 165, "deletions": 25}, "files": [{"sha": "06a60bfb0eba6744c6e680a1147d3fce70dfe47f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -21,6 +21,7 @@ use std::mem;\n use middle::region;\n use traits;\n use ty;\n+use mir;\n \n impl<'gcx, T> HashStable<StableHashingContext<'gcx>>\n for &'gcx ty::Slice<T>\n@@ -388,6 +389,9 @@ for ::middle::const_val::ConstVal<'gcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n+            Value(ref value) => {\n+                value.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }\n@@ -396,6 +400,26 @@ impl_stable_hash_for!(struct ::middle::const_val::ByteArray<'tcx> {\n     data\n });\n \n+impl_stable_hash_for!(enum mir::interpret::Value {\n+    ByVal(v),\n+    ByValPair(a, b),\n+    ByRef(ptr, align)\n+});\n+\n+impl_stable_hash_for!(struct mir::interpret::MemoryPointer {\n+    alloc_id,\n+    offset\n+});\n+\n+impl_stable_hash_for!(tuple_struct mir::interpret::AllocId{id});\n+impl_stable_hash_for!(struct mir::interpret::Pointer{primval});\n+\n+impl_stable_hash_for!(enum mir::interpret::PrimVal {\n+    Bytes(b),\n+    Ptr(p),\n+    Undef\n+});\n+\n impl_stable_hash_for!(struct ty::Const<'tcx> {\n     ty,\n     val"}, {"sha": "56de2939ffae1efb811dd0d9d095674e04f873f9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -49,6 +49,7 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(dyn_trait)]\n+#![feature(entry_or_default)]\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n #![feature(i128)]"}, {"sha": "2309131c57a9f483d62470c23fcd92e61f64bab8", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -14,6 +14,7 @@ use hir::def_id::DefId;\n use ty::{self, TyCtxt, layout};\n use ty::subst::Substs;\n use rustc_const_math::*;\n+use mir::interpret::Value;\n \n use graphviz::IntoCow;\n use errors::DiagnosticBuilder;\n@@ -38,6 +39,8 @@ pub enum ConstVal<'tcx> {\n     Function(DefId, &'tcx Substs<'tcx>),\n     Aggregate(ConstAggregate<'tcx>),\n     Unevaluated(DefId, &'tcx Substs<'tcx>),\n+    /// A miri value, currently only produced if old ctfe fails, but miri succeeds\n+    Value(Value),\n }\n \n #[derive(Copy, Clone, Debug, Hash, RustcEncodable, Eq, PartialEq)]"}, {"sha": "8b4f56e1dba5fc999881c1cca7ebacb85595acd2", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -41,7 +41,7 @@ pub enum AccessKind {\n }\n \n /// Uniquely identifies a specific constant or static.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct GlobalId<'tcx> {\n     /// For a constant or static, the `Instance` of the item itself.\n     /// For a promoted global, the `Instance` of the function they belong to.\n@@ -101,7 +101,7 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n \n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n pub struct MemoryPointer {\n     pub alloc_id: AllocId,\n     pub offset: u64,\n@@ -148,13 +148,16 @@ impl<'tcx> MemoryPointer {\n #[derive(Copy, Clone, Default, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n+impl ::rustc_serialize::UseSpecializedEncodable for AllocId {}\n+impl ::rustc_serialize::UseSpecializedDecodable for AllocId {}\n+\n impl fmt::Display for AllocId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.0)\n     }\n }\n \n-#[derive(Debug, Eq, PartialEq, Hash)]\n+#[derive(Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct Allocation {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer\n@@ -188,7 +191,7 @@ impl Allocation {\n type Block = u64;\n const BLOCK_SIZE: u64 = 64;\n \n-#[derive(Clone, Debug, Eq, PartialEq, Hash)]\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: u64,"}, {"sha": "8d67856c0df8da140309a1bc861666323294d3a4", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -29,7 +29,7 @@ pub fn bytes_to_f64(bits: u128) -> ConstFloat {\n /// For optimization of a few very common cases, there is also a representation for a pair of\n /// primitive values (`ByValPair`). It allows Miri to avoid making allocations for checked binary\n /// operations and fat pointers. This idea was taken from rustc's trans.\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n pub enum Value {\n     ByRef(Pointer, Align),\n     ByVal(PrimVal),\n@@ -43,9 +43,9 @@ pub enum Value {\n /// I (@oli-obk) believe it is less easy to mix up generic primvals and primvals that are just\n /// the representation of pointers. Also all the sites that convert between primvals and pointers\n /// are explicit now (and rare!)\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Pointer {\n-    primval: PrimVal,\n+    pub primval: PrimVal,\n }\n \n impl<'tcx> Pointer {\n@@ -138,7 +138,7 @@ impl ::std::convert::From<MemoryPointer> for Pointer {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `PrimVal` can either represent the raw bytes\n /// of a simple value, a pointer into another `Allocation`, or be undefined.\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash)]\n pub enum PrimVal {\n     /// The raw bytes of a simple value.\n     Bytes(u128),"}, {"sha": "4c1b8cb79ed1a45bd3c1bd587e2ff42c9c2405b0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -1881,7 +1881,8 @@ fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n         Variant(def_id) |\n         Function(def_id, _) => write!(fmt, \"{}\", item_path_str(def_id)),\n         Aggregate(_) => bug!(\"`ConstVal::{:?}` should not be in MIR\", const_val),\n-        Unevaluated(..) => write!(fmt, \"{:?}\", const_val)\n+        Unevaluated(..) => write!(fmt, \"{:?}\", const_val),\n+        Value(val) => write!(fmt, \"{:?}\", val),\n     }\n }\n "}, {"sha": "520da34c40acbfbfa005bf18f61dc3c2c22d838a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -905,6 +905,11 @@ pub struct InterpretInterner<'tcx> {\n     /// Allows obtaining const allocs via a unique identifier\n     alloc_by_id: FxHashMap<interpret::AllocId, &'tcx interpret::Allocation>,\n \n+    /// Reverse map of `alloc_cache`\n+    ///\n+    /// Multiple globals may share the same memory\n+    global_cache: FxHashMap<interpret::Pointer, Vec<interpret::GlobalId<'tcx>>>,\n+\n     /// The AllocId to assign to the next new regular allocation.\n     /// Always incremented, never gets smaller.\n     next_id: interpret::AllocId,\n@@ -955,11 +960,25 @@ impl<'tcx> InterpretInterner<'tcx> {\n         global_id: interpret::GlobalId<'tcx>,\n         ptr: interpret::AllocId,\n     ) {\n+        if let interpret::PrimVal::Ptr(ptr) = ptr.primval {\n+            assert!(ptr.offset == 0);\n+        }\n+        self.global_cache.entry(ptr).or_default().push(global_id);\n         if let Some(old) = self.alloc_cache.insert(global_id, ptr) {\n             bug!(\"tried to cache {:?}, but was already existing as {:#?}\", global_id, old);\n         }\n     }\n \n+    pub fn get_globals(\n+        &self,\n+        ptr: interpret::Pointer,\n+    ) -> &[interpret::GlobalId<'tcx>] {\n+        match self.global_cache.get(&ptr) {\n+            Some(v) => v,\n+            None => &[],\n+        }\n+    }\n+\n     pub fn intern_at_reserved(\n         &mut self,\n         id: interpret::AllocId,"}, {"sha": "60bf4afc2fc887ab5aca5edfeeb2c02161f6437f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -224,6 +224,7 @@ impl FlagComputation {\n             ConstVal::ByteStr(_) |\n             ConstVal::Bool(_) |\n             ConstVal::Char(_) |\n+            ConstVal::Value(_) |\n             ConstVal::Variant(_) => {}\n             ConstVal::Function(_, substs) => {\n                 self.add_substs(substs);"}, {"sha": "614158bafa63807332ec72f31d34875f2253f6c3", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -17,13 +17,13 @@ use util::ppaux;\n \n use std::fmt;\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n     pub substs: &'tcx Substs<'tcx>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),"}, {"sha": "1aa7f671ad391a17e5fe57931609719536af4e59", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -342,7 +342,7 @@ impl AddAssign for Size {\n /// Each field is a power of two, giving the alignment a maximum\n /// value of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a i32, with\n /// a maximum capacity of 2<sup>31</sup> - 1 or 2147483647.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Align {\n     abi: u8,\n     pref: u8,"}, {"sha": "3e7468d2ccab4545977b1babe5d35d7e81c05dd3", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -1249,6 +1249,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n             ConstVal::ByteStr(b) => ConstVal::ByteStr(b),\n             ConstVal::Bool(b) => ConstVal::Bool(b),\n             ConstVal::Char(c) => ConstVal::Char(c),\n+            ConstVal::Value(v) => ConstVal::Value(v),\n             ConstVal::Variant(def_id) => ConstVal::Variant(def_id),\n             ConstVal::Function(def_id, substs) => {\n                 ConstVal::Function(def_id, substs.fold_with(folder))\n@@ -1304,6 +1305,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n             ConstVal::ByteStr(_) |\n             ConstVal::Bool(_) |\n             ConstVal::Char(_) |\n+            ConstVal::Value(_) |\n             ConstVal::Variant(_) => false,\n             ConstVal::Function(_, substs) => substs.visit_with(visitor),\n             ConstVal::Aggregate(ConstAggregate::Struct(fields)) => {"}, {"sha": "4ef7706c45e3e443196b47d43e0f48dcb5f8f3e7", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -146,6 +146,7 @@ fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const\n         ConstVal::ByteStr(_) |\n         ConstVal::Bool(_) |\n         ConstVal::Char(_) |\n+        ConstVal::Value(_) |\n         ConstVal::Variant(_) => {}\n         ConstVal::Function(_, substs) => {\n             stack.extend(substs.types().rev());"}, {"sha": "443e0e857a7a1dab7cfd9569b34ddb193bd33daa", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -224,6 +224,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n             ConstVal::Bool(_) |\n             ConstVal::Char(_) |\n             ConstVal::Variant(_) |\n+            ConstVal::Value(_) |\n             ConstVal::Function(..) => {}\n             ConstVal::Aggregate(ConstAggregate::Struct(fields)) => {\n                 for &(_, v) in fields {"}, {"sha": "a09e2f2edd59d376027382b58d98ea4536c47bc5", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -121,6 +121,7 @@ fn print_const_val(value: &ConstVal, f: &mut fmt::Formatter) -> fmt::Result {\n         ConstVal::Variant(_) |\n         ConstVal::Function(..) |\n         ConstVal::Aggregate(_) |\n+        ConstVal::Value(_) |\n         ConstVal::Unevaluated(..) => bug!(\"{:?} not printable in a pattern\", value)\n     }\n }"}, {"sha": "3c3c489d0ff783b1a4ac3876e80ab70d0259db6b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -24,11 +24,12 @@ use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n                          CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n-use rustc::mir;\n+use rustc::mir::{self, interpret};\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n use rustc::mir::Mir;\n+use rustc::util::nodemap::FxHashMap;\n \n use std::cell::Ref;\n use std::collections::BTreeMap;\n@@ -54,6 +55,9 @@ pub struct DecodeContext<'a, 'tcx: 'a> {\n     last_filemap_index: usize,\n \n     lazy_state: LazyState,\n+\n+    // interpreter allocation cache\n+    interpret_alloc_cache: FxHashMap<usize, interpret::AllocId>,\n }\n \n /// Abstract over the various ways one can create metadata decoders.\n@@ -72,6 +76,7 @@ pub trait Metadata<'a, 'tcx>: Copy {\n             tcx,\n             last_filemap_index: 0,\n             lazy_state: LazyState::NoNode,\n+            interpret_alloc_cache: FxHashMap::default(),\n         }\n     }\n }\n@@ -268,6 +273,45 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedDecoder<interpret::AllocId> for DecodeContext<'a, 'tcx> {\n+    fn specialized_decode(&mut self) -> Result<interpret::AllocId, Self::Error> {\n+        const MAX1: usize = usize::max_value() - 1;\n+        let mut interpret_interner = self.tcx.unwrap().interpret_interner.borrow_mut();\n+        let pos = self.position();\n+        match self.read_usize()? {\n+            ::std::usize::MAX => {\n+                let allocation = interpret::Allocation::decode(self)?;\n+                let id = interpret_interner.reserve();\n+                let allocation = self.tcx.unwrap().intern_const_alloc(allocation);\n+                interpret_interner.intern_at_reserved(id, allocation);\n+                let id = interpret::AllocId(id);\n+                self.interpret_alloc_cache.insert(pos, id);\n+\n+                let num = usize::decode(self)?;\n+                let ptr = interpret::Pointer {\n+                    primval: interpret::PrimVal::Ptr(interpret::MemoryPointer {\n+                        alloc_id: id,\n+                        offset: 0,\n+                    }),\n+                };\n+                for _ in 0..num {\n+                    let glob = interpret::GlobalId::decode(self)?;\n+                    interpret_interner.cache(glob, ptr);\n+                }\n+\n+                Ok(id)\n+            },\n+            MAX1 => {\n+                let instance = ty::Instance::decode(self)?;\n+                let id = interpret::AllocId(interpret_interner.create_fn_alloc(instance));\n+                self.interpret_alloc_cache.insert(pos, id);\n+                Ok(id)\n+            },\n+            shorthand => Ok(self.interpret_alloc_cache[&shorthand]),\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let tag = u8::decode(self)?;"}, {"sha": "928bf0a56ae51398db0658bb845cf262ef932ec2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};\n use rustc::middle::lang_items;\n-use rustc::mir;\n+use rustc::mir::{self, interpret};\n use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt, ReprOptions, SymbolName};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n@@ -59,6 +59,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n+    interpret_alloc_shorthands: FxHashMap<interpret::AllocId, usize>,\n \n     // This is used to speed up Span encoding.\n     filemap_cache: Lrc<FileMap>,\n@@ -186,6 +187,41 @@ impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'a, 'tcx> {\n+    fn specialized_encode(&mut self, alloc_id: &interpret::AllocId) -> Result<(), Self::Error> {\n+        if let Some(shorthand) = self.interpret_alloc_shorthands.get(alloc_id).cloned() {\n+            return self.emit_usize(shorthand);\n+        }\n+        let start = self.position();\n+        let interpret_interner = self.tcx.interpret_interner.borrow();\n+        if let Some(alloc) = interpret_interner.get_alloc(alloc_id.0) {\n+            usize::max_value().encode(self)?;\n+            alloc.encode(self)?;\n+            let globals = interpret_interner.get_globals(interpret::Pointer {\n+                primval: interpret::PrimVal::Ptr(interpret::MemoryPointer {\n+                    alloc_id: *alloc_id,\n+                    offset: 0,\n+                }),\n+            });\n+            globals.len().encode(self)?;\n+            for glob in globals {\n+                glob.encode(self)?;\n+            }\n+        } else if let Some(fn_instance) = interpret_interner.get_fn(alloc_id.0) {\n+            (usize::max_value() - 1).encode(self)?;\n+            fn_instance.encode(self)?;\n+        } else {\n+            bug!(\"alloc id without corresponding allocation: {}\", alloc_id.0);\n+        }\n+        let len = self.position() - start * 7;\n+        // Check that the shorthand is a not longer than the\n+        // full encoding itself, i.e. it's an obvious win.\n+        assert!(len >= 64 || (start as u64) < (1 << len));\n+        self.interpret_alloc_shorthands.insert(*alloc_id, start);\n+        Ok(())\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self,\n                           predicates: &ty::GenericPredicates<'tcx>)\n@@ -1699,6 +1735,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),\n             filemap_cache: tcx.sess.codemap().files()[0].clone(),\n+            interpret_alloc_shorthands: Default::default(),\n         };\n \n         // Encode the rustc version string in a predictable location."}, {"sha": "e9e8ccd03b10fd143453ae5f5a30d4c9d057bfcf", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -241,35 +241,36 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub(super) fn const_to_value(&mut self, const_val: &ConstVal<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n-        use rustc::middle::const_val::ConstVal::*;\n+        use rustc::middle::const_val::ConstVal;\n \n         let primval = match *const_val {\n-            Integral(const_int) => PrimVal::Bytes(const_int.to_u128_unchecked()),\n+            ConstVal::Integral(const_int) => PrimVal::Bytes(const_int.to_u128_unchecked()),\n \n-            Float(val) => PrimVal::Bytes(val.bits),\n+            ConstVal::Float(val) => PrimVal::Bytes(val.bits),\n \n-            Bool(b) => PrimVal::from_bool(b),\n-            Char(c) => PrimVal::from_char(c),\n+            ConstVal::Bool(b) => PrimVal::from_bool(b),\n+            ConstVal::Char(c) => PrimVal::from_char(c),\n \n-            Str(ref s) => return self.str_to_value(s),\n+            ConstVal::Str(ref s) => return self.str_to_value(s),\n \n-            ByteStr(ref bs) => {\n+            ConstVal::ByteStr(ref bs) => {\n                 let ptr = self.memory.allocate_cached(bs.data);\n                 PrimVal::Ptr(ptr)\n             }\n \n-            Unevaluated(def_id, substs) => {\n+            ConstVal::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 return Ok(self.read_global_as_value(GlobalId {\n                     instance,\n                     promoted: None,\n                 }, self.layout_of(ty)?));\n             }\n \n-            Aggregate(..) |\n-            Variant(_) => bug!(\"should not have aggregate or variant constants in MIR\"),\n+            ConstVal::Aggregate(..) |\n+            ConstVal::Variant(_) => bug!(\"should not have aggregate or variant constants in MIR\"),\n             // function items are zero sized and thus have no readable value\n-            Function(..) => PrimVal::Undef,\n+            ConstVal::Function(..) => PrimVal::Undef,\n+            ConstVal::Value(val) => return Ok(val),\n         };\n \n         Ok(Value::ByVal(primval))"}, {"sha": "c853230b15ab7da78d1d33ecfd3fa4f545f06233", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b5ddd39b22dbdf9f004090146c561327ed51e7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=38b5ddd39b22dbdf9f004090146c561327ed51e7", "patch": "@@ -108,6 +108,7 @@ impl<'a, 'tcx> Const<'tcx> {\n             ConstVal::Unevaluated(..) => {\n                 bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv)\n             }\n+            ConstVal::Value(_) => unimplemented!(),\n         };\n \n         assert!(!ty.has_erasable_regions());"}]}