{"sha": "f6c87aba328f5d648786237da70fd227642b9c20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Yzg3YWJhMzI4ZjVkNjQ4Nzg2MjM3ZGE3MGZkMjI3NjQyYjljMjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-08-15T20:42:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T16:34:44Z"}, "message": "bootstrap: Add a helper for managing RUSTFLAGS\n\nMost of `bootstrap/bin/rustc.rs` doesn't need to exist with the advent\nof `RUSTFLAGS` (yes this is super old) so this starts by refactoring a\nbit to make it easier locally in the `Builder::cargo` method to append\nto `RUSTFLAGS` that gets down to rustc.", "tree": {"sha": "ed781fb555d50e3c46082a4499e5fd4ee4eb2e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed781fb555d50e3c46082a4499e5fd4ee4eb2e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c87aba328f5d648786237da70fd227642b9c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c87aba328f5d648786237da70fd227642b9c20", "html_url": "https://github.com/rust-lang/rust/commit/f6c87aba328f5d648786237da70fd227642b9c20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c87aba328f5d648786237da70fd227642b9c20/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bf391c3aabfc77f5f7139fc9e6944f995d574e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf391c3aabfc77f5f7139fc9e6944f995d574e", "html_url": "https://github.com/rust-lang/rust/commit/66bf391c3aabfc77f5f7139fc9e6944f995d574e"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "399130d6755a709951d252bcda386f2296f4c2c8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f6c87aba328f5d648786237da70fd227642b9c20/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c87aba328f5d648786237da70fd227642b9c20/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f6c87aba328f5d648786237da70fd227642b9c20", "patch": "@@ -860,28 +860,16 @@ impl<'a> Builder<'a> {\n             stage = compiler.stage;\n         }\n \n-        let mut extra_args = String::new();\n+        let mut rustflags = Rustflags::new();\n+        rustflags.env(&format!(\"RUSTFLAGS_STAGE_{}\", stage));\n         if stage != 0 {\n-            let s = env::var(\"RUSTFLAGS_NOT_BOOTSTRAP\").unwrap_or_default();\n-            extra_args.push_str(&s);\n+            rustflags.env(\"RUSTFLAGS_NOT_BOOTSTRAP\");\n         } else {\n-            let s = env::var(\"RUSTFLAGS_BOOTSTRAP\").unwrap_or_default();\n-            extra_args.push_str(&s);\n+            rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n         }\n \n         if cmd == \"clippy\" {\n-            extra_args.push_str(\"-Zforce-unstable-if-unmarked\");\n-        }\n-\n-        if !extra_args.is_empty() {\n-            cargo.env(\n-                \"RUSTFLAGS\",\n-                format!(\n-                    \"{} {}\",\n-                    env::var(\"RUSTFLAGS\").unwrap_or_default(),\n-                    extra_args\n-                ),\n-            );\n+            rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n@@ -1171,6 +1159,8 @@ impl<'a> Builder<'a> {\n \n         self.ci_env.force_coloring_in_ci(&mut cargo);\n \n+        cargo.env(\"RUSTFLAGS\", &rustflags.0);\n+\n         cargo\n     }\n \n@@ -1271,3 +1261,30 @@ impl<'a> Builder<'a> {\n \n #[cfg(test)]\n mod tests;\n+\n+struct Rustflags(String);\n+\n+impl Rustflags {\n+    fn new() -> Rustflags {\n+        let mut ret = Rustflags(String::new());\n+        ret.env(\"RUSTFLAGS\");\n+        return ret;\n+    }\n+\n+    fn env(&mut self, env: &str) {\n+        if let Ok(s) = env::var(env) {\n+            for part in s.split_whitespace() {\n+                self.arg(part);\n+            }\n+        }\n+    }\n+\n+    fn arg(&mut self, arg: &str) -> &mut Self {\n+        assert_eq!(arg.split_whitespace().count(), 1);\n+        if self.0.len() > 0 {\n+            self.0.push_str(\" \");\n+        }\n+        self.0.push_str(arg);\n+        self\n+    }\n+}"}]}