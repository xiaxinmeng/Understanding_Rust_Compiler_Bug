{"sha": "0537510aef4059d5f79146a8dc2734ffdb27dc74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Mzc1MTBhZWY0MDU5ZDVmNzkxNDZhOGRjMjczNGZmZGIyN2RjNzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-24T12:19:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-24T12:19:22Z"}, "message": "Merge #7719\n\n7719: De Morgan's Law assist now correctly parenthesizes binary expressions. r=Veykril a=lbrande\n\nCloses #7694 by parenthesizing binary expressions that are negated.\n\nCo-authored-by: lbrande <lovbra00@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "6fa29e24165e07db8f77dad76d633b12eb79574f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa29e24165e07db8f77dad76d633b12eb79574f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0537510aef4059d5f79146a8dc2734ffdb27dc74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNkRKCRBK7hj4Ov3rIwAAdHIIAJwsnNumywwuBbxpMlJijUYJ\nkmxqNgV16S9XhecZM2ACok+NVHPNA/037OziAKjKmDBeTmvA/cLxQg3DiSJHf5JM\noKInpe1TDQnElBQXwOv/PjulWkdMQlrjq6pz4gmAzOrb+752S5DZTK79dihXH0JW\nyXh5pp0CPjWt5Mg9wWaAo4aDdxo4KlWphQjy637ojOJIohwLojAtPvzTo871PvmI\n5K7RO/Sd6JSZJ3T11gupO0gDVPP8cDUgTxeosmc8XtUZDDulXtJW0o/p3iwbNefX\ndSM7k8raTEpnSrIRNM0E7CxEiF5rNNG/ALyl2ttK2TZqsXypyVNLQOjHCg5XLtc=\n=a2Zw\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fa29e24165e07db8f77dad76d633b12eb79574f\nparent 18ac02ba411e2f9eeb38c3b246c619ac76846767\nparent 694f7a7e9f90cc435afcaade23b5908728d17ed2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614169162 +0000\ncommitter GitHub <noreply@github.com> 1614169162 +0000\n\nMerge #7719\n\n7719: De Morgan's Law assist now correctly parenthesizes binary expressions. r=Veykril a=lbrande\n\nCloses #7694 by parenthesizing binary expressions that are negated.\n\nCo-authored-by: lbrande <lovbra00@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0537510aef4059d5f79146a8dc2734ffdb27dc74", "html_url": "https://github.com/rust-lang/rust/commit/0537510aef4059d5f79146a8dc2734ffdb27dc74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0537510aef4059d5f79146a8dc2734ffdb27dc74/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ac02ba411e2f9eeb38c3b246c619ac76846767", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ac02ba411e2f9eeb38c3b246c619ac76846767", "html_url": "https://github.com/rust-lang/rust/commit/18ac02ba411e2f9eeb38c3b246c619ac76846767"}, {"sha": "694f7a7e9f90cc435afcaade23b5908728d17ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/694f7a7e9f90cc435afcaade23b5908728d17ed2", "html_url": "https://github.com/rust-lang/rust/commit/694f7a7e9f90cc435afcaade23b5908728d17ed2"}], "stats": {"total": 158, "additions": 137, "deletions": 21}, "files": [{"sha": "6997ea048efbfbdc290397ec1d344e4a485d51a1", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -7,18 +7,17 @@ use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKin\n // Apply https://en.wikipedia.org/wiki/De_Morgan%27s_laws[De Morgan's law].\n // This transforms expressions of the form `!l || !r` into `!(l && r)`.\n // This also works with `&&`. This assist can only be applied with the cursor\n-// on either `||` or `&&`, with both operands being a negation of some kind.\n-// This means something of the form `!x` or `x != y`.\n+// on either `||` or `&&`.\n //\n // ```\n // fn main() {\n-//     if x != 4 ||$0 !y {}\n+//     if x != 4 ||$0 y < 3.14 {}\n // }\n // ```\n // ->\n // ```\n // fn main() {\n-//     if !(x == 4 && y) {}\n+//     if !(x == 4 && !(y < 3.14)) {}\n // }\n // ```\n pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -33,11 +32,11 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n     let lhs = expr.lhs()?;\n     let lhs_range = lhs.syntax().text_range();\n-    let not_lhs = invert_boolean_expression(lhs);\n+    let not_lhs = invert_boolean_expression(&ctx.sema, lhs);\n \n     let rhs = expr.rhs()?;\n     let rhs_range = rhs.syntax().text_range();\n-    let not_rhs = invert_boolean_expression(rhs);\n+    let not_rhs = invert_boolean_expression(&ctx.sema, rhs);\n \n     acc.add(\n         AssistId(\"apply_demorgan\", AssistKind::RefactorRewrite),\n@@ -62,10 +61,77 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::helpers::FamousDefs;\n+\n     use super::*;\n \n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n+    const ORDABLE_FIXTURE: &'static str = r\"\n+//- /lib.rs deps:core crate:ordable\n+struct NonOrderable;\n+struct Orderable;\n+impl core::cmp::Ord for Orderable {}\n+\";\n+\n+    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,ordable\\n{}\\n{}{}\",\n+            ra_fixture_before,\n+            FamousDefs::FIXTURE,\n+            ORDABLE_FIXTURE\n+        );\n+        check_assist(apply_demorgan, before, &format!(\"{}\\n\", ra_fixture_after));\n+    }\n+\n+    #[test]\n+    fn demorgan_handles_leq() {\n+        check(\n+            r\"use ordable::Orderable;\n+fn f() {\n+    Orderable < Orderable &&$0 Orderable <= Orderable\n+}\",\n+            r\"use ordable::Orderable;\n+fn f() {\n+    !(Orderable >= Orderable || Orderable > Orderable)\n+}\",\n+        );\n+        check(\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    NonOrderable < NonOrderable &&$0 NonOrderable <= NonOrderable\n+}\",\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    !(!(NonOrderable < NonOrderable) || !(NonOrderable <= NonOrderable))\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn demorgan_handles_geq() {\n+        check(\n+            r\"use ordable::Orderable;\n+fn f() {\n+    Orderable > Orderable &&$0 Orderable >= Orderable\n+}\",\n+            r\"use ordable::Orderable;\n+fn f() {\n+    !(Orderable <= Orderable || Orderable < Orderable)\n+}\",\n+        );\n+        check(\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    Orderable > Orderable &&$0 Orderable >= Orderable\n+}\",\n+            r\"use ordable::NonOrderable;\n+fn f() {\n+    !(!(Orderable > Orderable) || !(Orderable >= Orderable))\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn demorgan_turns_and_into_or() {\n         check_assist(apply_demorgan, \"fn f() { !x &&$0 !x }\", \"fn f() { !(x || x) }\")"}, {"sha": "9e0918477b5f05d31a9f9c0864827295cb906860", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                     let new_expr = {\n                         let then_branch =\n                             make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                        let cond = invert_boolean_expression(cond_expr);\n+                        let cond = invert_boolean_expression(&ctx.sema, cond_expr);\n                         make::expr_if(make::condition(cond, None), then_branch, None)\n                             .indent(if_indent_level)\n                     };"}, {"sha": "b131dc2058be842397e1d75a2979a4909e0c0f6e", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     acc.add(AssistId(\"invert_if\", AssistKind::RefactorRewrite), \"Invert if\", if_range, |edit| {\n-        let flip_cond = invert_boolean_expression(cond.clone());\n+        let flip_cond = invert_boolean_expression(&ctx.sema, cond.clone());\n         edit.replace_ast(cond, flip_cond);\n \n         let else_node = else_block.syntax();"}, {"sha": "701091a6b3d2324fbd14eb8067c66559f5ee3843", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -147,12 +147,12 @@ fn doctest_apply_demorgan() {\n         \"apply_demorgan\",\n         r#####\"\n fn main() {\n-    if x != 4 ||$0 !y {}\n+    if x != 4 ||$0 y < 3.14 {}\n }\n \"#####,\n         r#####\"\n fn main() {\n-    if !(x == 4 && y) {}\n+    if !(x == 4 && !(y < 3.14)) {}\n }\n \"#####,\n     )"}, {"sha": "276792bc1a2de4e4e3a941f0622f398f8a76ee77", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -3,8 +3,11 @@\n use std::ops;\n \n use ast::TypeBoundsOwner;\n-use hir::{Adt, HasSource};\n-use ide_db::{helpers::SnippetCap, RootDatabase};\n+use hir::{Adt, HasSource, Semantics};\n+use ide_db::{\n+    helpers::{FamousDefs, SnippetCap},\n+    RootDatabase,\n+};\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n@@ -205,23 +208,36 @@ pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n-    if let Some(expr) = invert_special_case(&expr) {\n+pub(crate) fn invert_boolean_expression(\n+    sema: &Semantics<RootDatabase>,\n+    expr: ast::Expr,\n+) -> ast::Expr {\n+    if let Some(expr) = invert_special_case(sema, &expr) {\n         return expr;\n     }\n     make::expr_prefix(T![!], expr)\n }\n \n-fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n+fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n         ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n             ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n             ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n-            // Parenthesize composite boolean expressions before prefixing `!`\n-            ast::BinOp::BooleanAnd | ast::BinOp::BooleanOr => {\n-                Some(make::expr_prefix(T![!], make::expr_paren(expr.clone())))\n+            // Swap `<` with `>=`, `<=` with `>`, ... if operands `impl Ord`\n+            ast::BinOp::LesserTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![>=]).map(|it| it.into())\n+            }\n+            ast::BinOp::LesserEqualTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![>]).map(|it| it.into())\n+            }\n+            ast::BinOp::GreaterTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![<=]).map(|it| it.into())\n+            }\n+            ast::BinOp::GreaterEqualTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![<]).map(|it| it.into())\n             }\n-            _ => None,\n+            // Parenthesize other expressions before prefixing `!`\n+            _ => Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n         },\n         ast::Expr::MethodCallExpr(mce) => {\n             let receiver = mce.receiver()?;\n@@ -250,6 +266,22 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n+fn bin_impls_ord(sema: &Semantics<RootDatabase>, bin: &ast::BinExpr) -> bool {\n+    match (\n+        bin.lhs().and_then(|lhs| sema.type_of_expr(&lhs)),\n+        bin.rhs().and_then(|rhs| sema.type_of_expr(&rhs)),\n+    ) {\n+        (Some(lhs_ty), Some(rhs_ty)) if lhs_ty == rhs_ty => {\n+            let krate = sema.scope(bin.syntax()).module().map(|it| it.krate());\n+            let ord_trait = FamousDefs(sema, krate).core_cmp_Ord();\n+            ord_trait.map_or(false, |ord_trait| {\n+                lhs_ty.autoderef(sema.db).any(|ty| ty.impls_trait(sema.db, ord_trait, &[]))\n+            })\n+        }\n+        _ => false,\n+    }\n+}\n+\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }"}, {"sha": "f9de8ce0e647a70e8de676d91a71594a1e7d9789", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -45,6 +45,10 @@ impl FamousDefs<'_, '_> {\n         self.find_crate(\"core\")\n     }\n \n+    pub fn core_cmp_Ord(&self) -> Option<Trait> {\n+        self.find_trait(\"core:cmp:Ord\")\n+    }\n+\n     pub fn core_convert_From(&self) -> Option<Trait> {\n         self.find_trait(\"core:convert:From\")\n     }"}, {"sha": "bb4e9666b1bb14869610e3014329a33bdccdf960", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -1,5 +1,15 @@\n //- /libcore.rs crate:core\n //! Signatures of traits, types and functions from the core lib for use in tests.\n+pub mod cmp {\n+\n+    pub trait Ord {\n+        fn cmp(&self, other: &Self) -> Ordering;\n+        fn max(self, other: Self) -> Self;\n+        fn min(self, other: Self) -> Self;\n+        fn clamp(self, min: Self, max: Self) -> Self;\n+    }\n+}\n+\n pub mod convert {\n     pub trait From<T> {\n         fn from(t: T) -> Self;\n@@ -109,6 +119,7 @@ pub mod option {\n \n pub mod prelude {\n     pub use crate::{\n+        cmp::Ord,\n         convert::From,\n         default::Default,\n         iter::{IntoIterator, Iterator},"}, {"sha": "b6c5de65884c38e2a1dcdced44cabad28e97053a", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0537510aef4059d5f79146a8dc2734ffdb27dc74/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0537510aef4059d5f79146a8dc2734ffdb27dc74", "patch": "@@ -527,8 +527,11 @@ pub mod tokens {\n \n     use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n-    pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n-        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2, !true, *p)\\n;\\n\\n\"));\n+    pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n+        SourceFile::parse(\n+            \"const C: <()>::Item = (1 != 1, 2 == 2, 3 < 3, 4 <= 4, 5 > 5, 6 >= 6, !true, *p)\\n;\\n\\n\",\n+        )\n+    });\n \n     pub fn single_space() -> SyntaxToken {\n         SOURCE_FILE"}]}