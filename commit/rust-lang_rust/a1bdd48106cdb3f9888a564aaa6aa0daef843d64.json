{"sha": "a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "node_id": "C_kwDOAAsO6NoAKGExYmRkNDgxMDZjZGIzZjk4ODhhNTY0YWFhNmFhMGRhZWY4NDNkNjQ", "commit": {"author": {"name": "the8472", "email": "the8472@users.noreply.github.com", "date": "2021-10-12T12:53:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-12T12:53:10Z"}, "message": "Rollup merge of #89796 - jkugelman:must-use-non-mutating-verb-methods, r=joshtriplett\n\nAdd #[must_use] to non-mutating verb methods\n\nThese are methods that could be misconstrued to mutate their input, similar to #89694. I gave each one a different custom message.\n\nI wrote that `upgrade` and `downgrade` don't modify the input pointers. Logically they don't, but technically they do...\n\nParent issue: #89692\n\nr? ```@joshtriplett```", "tree": {"sha": "14619a3abc63f02560b824c03ec68f466cc78bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14619a3abc63f02560b824c03ec68f466cc78bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZYU2CRBK7hj4Ov3rIwAAufIIAKWhmwH+AzxCKCihuD6YfHJ7\naPLP9zgw8DLQBt4k5eSsOZ/ZKnhbAnjDyKjg4TfzPBxAW1++KqT2BieOLbskyGMZ\nn+jisNemgEt25TwDTvx/6vG5Ofli2jR5a8itMIvAblkZYBOerq9j8X8IL1LMOjou\nMoOm1dUbRzi6aNN6iojQvL7bmHM6CS9CjtgqGcwEIqbWoedY+oeDKYWiFzpmgQmq\nfbLx69u0XGusO9W2ZEcWfMS/cOvovPZwKTweo73fhqA8Rv52j02ru9j6w7n2yGFU\n6DX2PK2cco7s2yLXRs7AXoTRMJAFXUemiKBzNXdW5OeOunjJmMby3O4lMM/PN5o=\n=JxLb\n-----END PGP SIGNATURE-----\n", "payload": "tree 14619a3abc63f02560b824c03ec68f466cc78bd6\nparent 4ce1ce1f7672c52ce32cd429bb21a12653e2b605\nparent c3f0577002b5c158c63dab92476d94af954086f1\nauthor the8472 <the8472@users.noreply.github.com> 1634043190 +0200\ncommitter GitHub <noreply@github.com> 1634043190 +0200\n\nRollup merge of #89796 - jkugelman:must-use-non-mutating-verb-methods, r=joshtriplett\n\nAdd #[must_use] to non-mutating verb methods\n\nThese are methods that could be misconstrued to mutate their input, similar to #89694. I gave each one a different custom message.\n\nI wrote that `upgrade` and `downgrade` don't modify the input pointers. Logically they don't, but technically they do...\n\nParent issue: #89692\n\nr? ```@joshtriplett```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "html_url": "https://github.com/rust-lang/rust/commit/a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce1ce1f7672c52ce32cd429bb21a12653e2b605", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce1ce1f7672c52ce32cd429bb21a12653e2b605", "html_url": "https://github.com/rust-lang/rust/commit/4ce1ce1f7672c52ce32cd429bb21a12653e2b605"}, {"sha": "c3f0577002b5c158c63dab92476d94af954086f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f0577002b5c158c63dab92476d94af954086f1", "html_url": "https://github.com/rust-lang/rust/commit/c3f0577002b5c158c63dab92476d94af954086f1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "493cf3117edf6a8b113f3772900c644c23facb47", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "patch": "@@ -2230,6 +2230,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Rc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         let inner = self.inner()?;"}, {"sha": "b75e9a2f3c71ea77b0c1cd1ac717020317e79d45", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "patch": "@@ -146,7 +146,7 @@ macro_rules! acquire {\n /// use std::sync::Arc;\n ///\n /// let my_arc = Arc::new(());\n-/// Arc::downgrade(&my_arc);\n+/// let my_weak = Arc::downgrade(&my_arc);\n /// ```\n ///\n /// `Arc<T>`'s implementations of traits like `Clone` may also be called using\n@@ -898,6 +898,8 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// let weak_five = Arc::downgrade(&five);\n     /// ```\n+    #[must_use = \"this returns a new `Weak` pointer, \\\n+                  without modifying the original `Arc`\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         // This Relaxed is OK because we're checking the value in the CAS\n@@ -1863,6 +1865,8 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// assert!(weak_five.upgrade().is_none());\n     /// ```\n+    #[must_use = \"this returns a new `Arc`, \\\n+                  without modifying the original weak pointer\"]\n     #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Arc<T>> {\n         // We use a CAS loop to increment the strong count instead of a"}, {"sha": "780f82d8afaee1fbd50b0944123a5fd976aede17", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "patch": "@@ -112,6 +112,8 @@ impl Layout {\n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use = \"this returns the minimum alignment, \\\n+                  without modifying the layout\"]\n     #[inline]\n     pub const fn align(&self) -> usize {\n         self.align_.get()\n@@ -229,6 +231,8 @@ impl Layout {\n     /// satisfy this constraint is to ensure `align <= self.align()`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n+    #[must_use = \"this returns the padding needed, \\\n+                  without modifying the `Layout`\"]\n     #[inline]\n     pub const fn padding_needed_for(&self, align: usize) -> usize {\n         let len = self.size();\n@@ -262,6 +266,8 @@ impl Layout {\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n+    #[must_use = \"this returns a new `Layout`, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());"}, {"sha": "42c6b9118493c7248b7808c3bb144b11600f806b", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bdd48106cdb3f9888a564aaa6aa0daef843d64/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a1bdd48106cdb3f9888a564aaa6aa0daef843d64", "patch": "@@ -2516,6 +2516,8 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this does not display the path, \\\n+                  it returns an object that can be displayed\"]\n     #[inline]\n     pub fn display(&self) -> Display<'_> {\n         Display { path: self }"}]}