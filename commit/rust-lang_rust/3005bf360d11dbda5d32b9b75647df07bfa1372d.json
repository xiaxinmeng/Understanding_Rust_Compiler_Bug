{"sha": "3005bf360d11dbda5d32b9b75647df07bfa1372d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDViZjM2MGQxMWRiZGE1ZDMyYjliNzU2NDdkZjA3YmZhMTM3MmQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-18T18:20:53Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-22T04:42:50Z"}, "message": "Pin stabilization: fix doctests", "tree": {"sha": "2dac33b684ee3e2249a4c6655095033fe199b6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dac33b684ee3e2249a4c6655095033fe199b6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3005bf360d11dbda5d32b9b75647df07bfa1372d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3005bf360d11dbda5d32b9b75647df07bfa1372d", "html_url": "https://github.com/rust-lang/rust/commit/3005bf360d11dbda5d32b9b75647df07bfa1372d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3005bf360d11dbda5d32b9b75647df07bfa1372d/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "html_url": "https://github.com/rust-lang/rust/commit/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "74055a4f8a9b0b65c7a910b4d3588dcaa6e98c44", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3005bf360d11dbda5d32b9b75647df07bfa1372d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3005bf360d11dbda5d32b9b75647df07bfa1372d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=3005bf360d11dbda5d32b9b75647df07bfa1372d", "patch": "@@ -621,7 +621,6 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n /// ```rust\n-/// #![feature(pin)]\n /// use std::mem::replace;\n /// use std::pin::Pin;\n ///"}, {"sha": "9073e6e31b1daf4bb57b86162522d27dc49adce7", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3005bf360d11dbda5d32b9b75647df07bfa1372d/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3005bf360d11dbda5d32b9b75647df07bfa1372d/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=3005bf360d11dbda5d32b9b75647df07bfa1372d", "patch": "@@ -43,8 +43,6 @@\n //! # Examples\n //!\n //! ```rust\n-//! #![feature(pin)]\n-//!\n //! use std::pin::Pin;\n //! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n@@ -78,7 +76,7 @@\n //!         // we know this is safe because modifying a field doesn't move the whole struct\n //!         unsafe {\n //!             let mut_ref: Pin<&mut Self> = Pin::as_mut(&mut boxed);\n-//!             Pin::get_mut_unchecked(mut_ref).slice = slice;\n+//!             Pin::get_unchecked_mut(mut_ref).slice = slice;\n //!         }\n //!         boxed\n //!     }"}]}