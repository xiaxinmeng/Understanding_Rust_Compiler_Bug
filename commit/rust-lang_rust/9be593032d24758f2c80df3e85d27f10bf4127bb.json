{"sha": "9be593032d24758f2c80df3e85d27f10bf4127bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTU5MzAzMmQyNDc1OGYyYzgwZGYzZTg1ZDI3ZjEwYmY0MTI3YmI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-20T22:35:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-21T12:25:17Z"}, "message": "fix debuginfo scoping of let-statements", "tree": {"sha": "d9a9a47eb1613cf02a6c49e59e9fe3e01f392feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a9a47eb1613cf02a6c49e59e9fe3e01f392feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be593032d24758f2c80df3e85d27f10bf4127bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be593032d24758f2c80df3e85d27f10bf4127bb", "html_url": "https://github.com/rust-lang/rust/commit/9be593032d24758f2c80df3e85d27f10bf4127bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be593032d24758f2c80df3e85d27f10bf4127bb/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "html_url": "https://github.com/rust-lang/rust/commit/7eb64b86ce44cc1828dd176a8b981e37ea08fc38"}], "stats": {"total": 157, "additions": 132, "deletions": 25}, "files": [{"sha": "1e486106f261d1a47a2fea45676b1ad088cb77a5", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -28,7 +28,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     name,\n     source_info,\n     internal,\n-    lexical_scope,\n+    syntactic_scope,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref, mutability });"}, {"sha": "1a62036ae687a3dbc904e933fea8fd35b19610a8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -480,11 +480,83 @@ pub struct LocalDecl<'tcx> {\n     /// Source info of the local.\n     pub source_info: SourceInfo,\n \n-    /// The *lexical* visibility scope the local is defined\n+    /// The *syntactic* visibility scope the local is defined\n     /// in. If the local was defined in a let-statement, this\n     /// is *within* the let-statement, rather than outside\n     /// of it.\n-    pub lexical_scope: VisibilityScope,\n+    ///\n+    /// This is needed because visibility scope of locals within a let-statement\n+    /// is weird.\n+    ///\n+    /// The reason is that we want the local to be *within* the let-statement\n+    /// for lint purposes, but we want the local to be *after* the let-statement\n+    /// for names-in-scope purposes.\n+    ///\n+    /// That's it, if we have a let-statement like the one in this\n+    /// function:\n+    /// ```\n+    /// fn foo(x: &str) {\n+    ///     #[allow(unused_mut)]\n+    ///     let mut x: u32 = { // <- one unused mut\n+    ///         let mut y: u32 = x.parse().unwrap();\n+    ///         y + 2\n+    ///     };\n+    ///     drop(x);\n+    /// }\n+    /// ```\n+    ///\n+    /// Then, from a lint point of view, the declaration of `x: u32`\n+    /// (and `y: u32`) are within the `#[allow(unused_mut)]` scope - the\n+    /// lint scopes are the same as the AST/HIR nesting.\n+    ///\n+    /// However, from a name lookup point of view, the scopes look more like\n+    /// as if the let-statements were `match` expressions:\n+    ///\n+    /// ```\n+    /// fn foo(x: &str) {\n+    ///     match {\n+    ///         match x.parse().unwrap() {\n+    ///             y => y + 2\n+    ///         }\n+    ///     } {\n+    ///         x => drop(x)\n+    ///     };\n+    /// }\n+    /// ```\n+    ///\n+    /// We care about the name-lookup scopes for debuginfo - if the\n+    /// debuginfo instruction pointer is at the call to `x.parse()`, we\n+    /// want `x` to refer to `x: &str`, but if it is at the call to\n+    /// `drop(x)`, we want it to refer to `x: u32`.\n+    ///\n+    /// To allow both uses to work, we need to have more than a single scope\n+    /// for a local. We have the `syntactic_scope` represent the\n+    /// \"syntactic\" lint scope (with a variable being under its let\n+    /// block) while the source-info scope represents the \"local variable\"\n+    /// scope (where the \"rest\" of a block is under all prior let-statements).\n+    ///\n+    /// The end result looks like this:\n+    ///\n+    /// ROOT SCOPE\n+    ///  \u2502{ argument x: &str }\n+    ///  \u2502\n+    ///  \u2502 \u2502{ #[allow(unused_mut] } // this is actually split into 2 scopes\n+    ///  \u2502 \u2502                        // in practice because I'm lazy.\n+    ///  \u2502 \u2502\n+    ///  \u2502 \u2502\u2190 x.syntactic_scope\n+    ///  \u2502 \u2502\u2190 `x.parse().unwrap()`\n+    ///  \u2502 \u2502\n+    ///  \u2502 \u2502 \u2502\u2190 y.syntactic_scope\n+    ///  \u2502 \u2502\n+    ///  \u2502 \u2502 \u2502{ let y: u32 }\n+    ///  \u2502 \u2502 \u2502\n+    ///  \u2502 \u2502 \u2502\u2190 y.source_info.scope\n+    ///  \u2502 \u2502 \u2502\u2190 `y + 2`\n+    ///  \u2502\n+    ///  \u2502 \u2502{ let x: u32 }\n+    ///  \u2502 \u2502\u2190 x.source_info.scope\n+    ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n+    pub syntactic_scope: VisibilityScope,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -499,7 +571,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n-            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: false,\n             is_user_variable: false\n         }\n@@ -516,7 +588,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n-            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: true,\n             is_user_variable: false\n         }\n@@ -534,7 +606,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n-            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false"}, {"sha": "e2f1c1c13b0548110cf72b9edddb3efcbbe0a4a8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -702,7 +702,7 @@ macro_rules! make_mir_visitor {\n                     name: _,\n                     ref $($mutability)* source_info,\n                     internal: _,\n-                    ref $($mutability)* lexical_scope,\n+                    ref $($mutability)* syntactic_scope,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n@@ -711,7 +711,7 @@ macro_rules! make_mir_visitor {\n                     source_info: *source_info,\n                 });\n                 self.visit_source_info(source_info);\n-                self.visit_visibility_scope(lexical_scope);\n+                self.visit_visibility_scope(syntactic_scope);\n             }\n \n             fn super_visibility_scope(&mut self,"}, {"sha": "3e0ccc7d072607d8af71fdcf2e7ce0377e5e18a2", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         ty: ptr_ty,\n                         name: None,\n                         source_info,\n-                        lexical_scope: source_info.scope,\n+                        syntactic_scope: source_info.scope,\n                         internal: true,\n                         is_user_variable: false\n                     });"}, {"sha": "6cb9217776648194aedafb1ee649be440239524c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -196,29 +196,27 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             pattern: &Pattern<'tcx>)\n                             -> Option<VisibilityScope> {\n         assert!(!(var_scope.is_some() && lint_level.is_explicit()),\n-               \"can't have both a var and a lint scope at the same time\");\n+                \"can't have both a var and a lint scope at the same time\");\n+        let mut syntactic_scope = self.visibility_scope;\n         self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n             if var_scope.is_none() {\n                 var_scope = Some(this.new_visibility_scope(scope_span,\n                                                            LintLevel::Inherited,\n                                                            None));\n                 // If we have lints, create a new visibility scope\n-                // that marks the lints for the locals.\n+                // that marks the lints for the locals. See the comment\n+                // on the `syntactic_scope` field for why this is needed.\n                 if lint_level.is_explicit() {\n-                    this.visibility_scope =\n+                    syntactic_scope =\n                         this.new_visibility_scope(scope_span, lint_level, None);\n                 }\n             }\n             let source_info = SourceInfo {\n                 span,\n                 scope: var_scope.unwrap()\n             };\n-            this.declare_binding(source_info, mutability, name, var, ty);\n+            this.declare_binding(source_info, syntactic_scope, mutability, name, var, ty);\n         });\n-        // Pop any scope we created for the locals.\n-        if let Some(var_scope) = var_scope {\n-            self.visibility_scope = var_scope;\n-        }\n         var_scope\n     }\n \n@@ -783,21 +781,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn declare_binding(&mut self,\n                        source_info: SourceInfo,\n+                       syntactic_scope: VisibilityScope,\n                        mutability: Mutability,\n                        name: Name,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>)\n                        -> Local\n     {\n-        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, source_info={:?})\",\n-               var_id, name, var_ty, source_info);\n+        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, source_info={:?}, \\\n+                syntactic_scope={:?})\",\n+               var_id, name, var_ty, source_info, syntactic_scope);\n \n         let var = self.local_decls.push(LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info,\n-            lexical_scope: self.visibility_scope,\n+            syntactic_scope,\n             internal: false,\n             is_user_variable: true,\n         });"}, {"sha": "011880f0ca94fd62f6c39fbf6a4587397eae66e1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -409,6 +409,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         // RustCall pseudo-ABI untuples the last argument.\n         spread_arg = Some(Local::new(arguments.len()));\n     }\n+    let closure_expr_id = tcx.hir.local_def_id(fn_id);\n+    info!(\"fn_id {:?} has attrs {:?}\", closure_expr_id,\n+          tcx.get_attrs(closure_expr_id));\n \n     // Gather the upvars of a closure, if any.\n     let upvar_decls: Vec<_> = tcx.with_freevars(fn_id, |freevars| {\n@@ -571,7 +574,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     scope: ARGUMENT_VISIBILITY_SCOPE,\n                     span: pattern.map_or(self.fn_span, |pat| pat.span)\n                 },\n-                lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+                syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n                 name,\n                 internal: false,\n                 is_user_variable: false,"}, {"sha": "89e3e7e0b602749c7332840f364fd5c648a7efd0", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -142,7 +142,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     LocalDecl {\n         mutability, ty, name: None,\n         source_info: SourceInfo { scope: ARGUMENT_VISIBILITY_SCOPE, span },\n-        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false\n     }"}, {"sha": "6be5b21cae6aa2e712399e9ef62eaf40771a432e", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -301,7 +301,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         ty: ret_ty,\n         name: None,\n         source_info: source_info(mir),\n-        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -562,7 +562,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         source_info,\n-        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -578,7 +578,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         }),\n         name: None,\n         source_info,\n-        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };"}, {"sha": "bf47ebe5aa7d101935b3652b1ba18d718cd74186", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be593032d24758f2c80df3e85d27f10bf4127bb/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=9be593032d24758f2c80df3e85d27f10bf4127bb", "patch": "@@ -34,6 +34,17 @@\n // gdb-check:$6 = 20\n // gdb-command:continue\n \n+// gdb-command:print x\n+// gdb-check:$5 = 10.5\n+// gdb-command:print y\n+// gdb-check:$6 = 20\n+// gdb-command:continue\n+\n+// gdb-command:print x\n+// gdb-check:$5 = 11.5\n+// gdb-command:print y\n+// gdb-check:$6 = 20\n+// gdb-command:continue\n \n // === LLDB TESTS ==================================================================================\n \n@@ -57,6 +68,18 @@\n // lldb-check:[...]$5 = 20\n // lldb-command:continue\n \n+// lldb-command:print x\n+// lldb-check:[...]$4 = 10.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 20\n+// lldb-command:continue\n+\n+// lldb-command:print x\n+// lldb-check:[...]$4 = 11.5\n+// lldb-command:print y\n+// lldb-check:[...]$5 = 20\n+// lldb-command:continue\n+\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -77,6 +100,15 @@ fn main() {\n \n     zzz(); // #break\n     sentinel();\n+\n+    let x = {\n+        zzz(); // #break\n+        sentinel();\n+        11.5\n+    };\n+\n+    zzz(); // #break\n+    sentinel()\n }\n \n fn zzz() {()}"}]}