{"sha": "e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NjZkMDdmNTViMWIzZWQ2ZTM3NjI1ZWYzNWY2MWFjNWMxMGY0MGU=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2017-02-02T12:57:08Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2017-02-03T21:00:40Z"}, "message": "lint/ctypes: Don't warn on non-unsized structs with PhantomData.\n\nFixes #34798", "tree": {"sha": "58b80df01d64c2d1114691c2d93b9ec5ba53ec5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b80df01d64c2d1114691c2d93b9ec5ba53ec5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAliU73gACgkQBWtye7nB\nAnwh1QgAzPhfJ6D4THX5KspfY/cDmpF8zKNA/nLNEeRiR9C87k6hdY1d3EKsci7V\n5PabzkMf29dDFOIPWOaUWi1dVx0H4rITkqvVazpZoRjDfqpN1v+eG5Bv9lE0J4K2\n4jYneUgH6yh3/hY4zD4wq60PbcNSRELWXxDS0siZGj5GBX0ytxKXS+RLFcJekeBd\nAJ1BEjYAuhM3NG1DLhKZbEnacBEP1bzVCjhLdTGZGMk6KUEnlm7M9Rpr5M1m5Bdl\nxIZ9EDwp1BFFlbRtQeEb9Z0VULGbEBJxMHfCgbJor/gQiQVEI1CURc3aylMmxziu\nY0tKcDltOw985fC6hzjIb9/Je+RtbQ==\n=nDUP\n-----END PGP SIGNATURE-----", "payload": "tree 58b80df01d64c2d1114691c2d93b9ec5ba53ec5a\nparent aed6410a7b0f15dc68536e0735787436526ba395\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1486040228 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1486155640 +0100\n\nlint/ctypes: Don't warn on non-unsized structs with PhantomData.\n\nFixes #34798\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "html_url": "https://github.com/rust-lang/rust/commit/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed6410a7b0f15dc68536e0735787436526ba395", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed6410a7b0f15dc68536e0735787436526ba395", "html_url": "https://github.com/rust-lang/rust/commit/aed6410a7b0f15dc68536e0735787436526ba395"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "aff6de5a33d430946bd3219329d4f9ddd559b351", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "patch": "@@ -341,6 +341,7 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n \n enum FfiResult {\n     FfiSafe,\n+    FfiPhantom,\n     FfiUnsafe(&'static str),\n     FfiBadStruct(DefId, &'static str),\n     FfiBadUnion(DefId, &'static str),\n@@ -385,8 +386,11 @@ fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n-    fn check_type_for_ffi(&self, cache: &mut FxHashSet<Ty<'tcx>>, ty: Ty<'tcx>) -> FfiResult {\n+    fn check_type_for_ffi(&self,\n+                          cache: &mut FxHashSet<Ty<'tcx>>,\n+                          ty: Ty<'tcx>) -> FfiResult {\n         use self::FfiResult::*;\n+\n         let cx = self.cx.tcx;\n \n         // Protect against infinite recursion, for example\n@@ -399,6 +403,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match ty.sty {\n             ty::TyAdt(def, substs) => {\n+                if def.is_phantom_data() {\n+                    return FfiPhantom;\n+                }\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -407,18 +414,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        // We can't completely trust repr(C) markings; make sure the\n-                        // fields are actually safe.\n                         if def.struct_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n                                               adding a member to this struct\");\n                         }\n \n+                        // We can't completely trust repr(C) markings; make sure the\n+                        // fields are actually safe.\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -427,7 +438,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -436,11 +448,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n+                        if def.struct_variant().fields.is_empty() {\n+                            return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n+                                              adding a member to this union\");\n+                        }\n+\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -449,7 +470,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Enum => {\n                         if def.variants.is_empty() {\n@@ -500,6 +522,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                     FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                         return r;\n                                     }\n+                                    FfiPhantom => {\n+                                        return FfiBadEnum(def.did,\n+                                                          \"Found phantom data in enum variant\");\n+                                    }\n                                     FfiUnsafe(s) => {\n                                         return FfiBadEnum(def.did, s);\n                                     }\n@@ -593,6 +619,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n+            FfiResult::FfiPhantom => {\n+                self.cx.span_lint(IMPROPER_CTYPES,\n+                                  sp,\n+                                  &format!(\"found zero-sized type composed only \\\n+                                            of phantom-data in a foreign-function.\"));\n+            }\n             FfiResult::FfiUnsafe(s) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n             }"}, {"sha": "608b1eb0872ad8243f502781da1fd75496474fa7", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "patch": "@@ -29,6 +29,9 @@ pub type RustBadRet = extern fn() -> Box<u32>;\n pub type CVoidRet = ();\n pub struct Foo;\n \n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n+\n extern {\n     pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n@@ -40,6 +43,9 @@ extern {\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+    pub fn zero_size_phantom_toplevel()\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without"}, {"sha": "e217d07ed725d86ffc216de1eda7fb0f6b21059c", "filename": "src/test/run-pass/issue-34798.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34798.rs?ref=e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(improper_ctypes)]\n+#![allow(dead_code)]\n+\n+#[repr(C)]\n+pub struct Foo {\n+    size: u8,\n+    __value: ::std::marker::PhantomData<i32>,\n+}\n+\n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData<T>(::std::marker::PhantomData<T>);\n+\n+#[repr(C)]\n+pub struct Bar {\n+    size: u8,\n+    baz: ZeroSizeWithPhantomData<i32>,\n+}\n+\n+extern \"C\" {\n+    pub fn bar(_: *mut Foo, _: *mut Bar);\n+}\n+\n+fn main() {\n+}"}]}