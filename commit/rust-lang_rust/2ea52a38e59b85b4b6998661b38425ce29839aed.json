{"sha": "2ea52a38e59b85b4b6998661b38425ce29839aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYTUyYTM4ZTU5Yjg1YjRiNjk5ODY2MWIzODQyNWNlMjk4MzlhZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T13:00:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T13:00:37Z"}, "message": "refinement to technique used to not run regionck", "tree": {"sha": "ade9272b7890755aa014a4f52b46c382e65be776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade9272b7890755aa014a4f52b46c382e65be776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ea52a38e59b85b4b6998661b38425ce29839aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea52a38e59b85b4b6998661b38425ce29839aed", "html_url": "https://github.com/rust-lang/rust/commit/2ea52a38e59b85b4b6998661b38425ce29839aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ea52a38e59b85b4b6998661b38425ce29839aed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e235f6ca53bac14158a6320aab49f31bd8e8bbe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e235f6ca53bac14158a6320aab49f31bd8e8bbe0", "html_url": "https://github.com/rust-lang/rust/commit/e235f6ca53bac14158a6320aab49f31bd8e8bbe0"}], "stats": {"total": 155, "additions": 66, "deletions": 89}, "files": [{"sha": "06f6185586d8521467c2117b36419ca81dd7754f", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -15,7 +15,7 @@ use ptr::mut_null;\n use repr::BoxRepr;\n use sys::TypeDesc;\n use cast::transmute;\n-use unstable::lang::clear_task_borrow_list;\n+#[cfg(notest)] use unstable::lang::clear_task_borrow_list;\n \n #[cfg(notest)] use ptr::to_unsafe_ptr;\n "}, {"sha": "582e1d606bca67960a6d16f65292980b214d4b4e", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -188,6 +188,9 @@ pub impl Session_ {\n     fn err(@self, msg: &str) {\n         self.span_diagnostic.handler().err(msg)\n     }\n+    fn err_count(@self) -> uint {\n+        self.span_diagnostic.handler().err_count()\n+    }\n     fn has_errors(@self) -> bool {\n         self.span_diagnostic.handler().has_errors()\n     }"}, {"sha": "7e63db89edbcc3004e6dcc6c8d38551689500616", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -207,9 +207,11 @@ pub impl PurityState {\n }\n \n pub struct FnCtxt {\n-    // var_bindings, locals and next_var_id are shared\n-    // with any nested functions that capture the environment\n-    // (and with any functions whose environment is being captured).\n+    // Number of errors that had been reported when we started\n+    // checking this function. On exit, if we find that *more* errors\n+    // have been reported, we will skip regionck and other work that\n+    // expects the types within the function to be consistent.\n+    err_count_on_creation: uint,\n \n     ret_ty: ty::t,\n     // Used by loop bodies that return from the outer function\n@@ -263,6 +265,7 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n // It's kind of a kludge to manufacture a fake function context\n // and statement context, but we might as well do write the code only once\n     @mut FnCtxt {\n+        err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n         indirect_ret_ty: None,\n         ps: PurityState::function(ast::pure_fn, 0),\n@@ -328,6 +331,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n      */\n \n     let tcx = ccx.tcx;\n+    let err_count_on_creation = tcx.sess.err_count();\n \n     // ______________________________________________________________________\n     // First, we have to replace any bound regions in the fn and self\n@@ -368,6 +372,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         };\n \n         @mut FnCtxt {\n+            err_count_on_creation: err_count_on_creation,\n             ret_ty: ret_ty,\n             indirect_ret_ty: indirect_ret_ty,\n             ps: PurityState::function(purity, id),\n@@ -642,7 +647,12 @@ impl AstConv for FnCtxt {\n }\n \n pub impl FnCtxt {\n-    fn infcx(&self) -> @mut infer::InferCtxt { self.inh.infcx }\n+    fn infcx(&self) -> @mut infer::InferCtxt {\n+        self.inh.infcx\n+    }\n+    fn err_count_since_creation(&self) -> uint {\n+        self.ccx.tcx.sess.err_count() - self.err_count_on_creation\n+    }\n     fn search_in_scope_regions(\n         &self,\n         span: span,"}, {"sha": "03dd32353db6a0a0dfa0e3e2ed1b4bc5d1719883", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -138,7 +138,8 @@ pub impl Rcx {\n \n pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n     let rcx = @mut Rcx { fcx: fcx, errors_reported: 0 };\n-    if !fcx.tcx().sess.has_errors() { // regionck assumes typeck succeeded\n+    if fcx.err_count_since_creation() == 0 {\n+        // regionck assumes typeck succeeded\n         let v = regionck_visitor();\n         (v.visit_expr)(e, rcx, v);\n     }\n@@ -147,7 +148,8 @@ pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n \n pub fn regionck_fn(fcx: @mut FnCtxt, blk: &ast::blk) {\n     let rcx = @mut Rcx { fcx: fcx, errors_reported: 0 };\n-    if !fcx.tcx().sess.has_errors() { // regionck assumes typeck succeeded\n+    if fcx.err_count_since_creation() == 0 {\n+        // regionck assumes typeck succeeded\n         let v = regionck_visitor();\n         (v.visit_block)(blk, rcx, v);\n     }\n@@ -409,10 +411,6 @@ fn constrain_callee(rcx: @mut Rcx,\n     let call_region = ty::re_scope(call_expr.id);\n \n     let callee_ty = rcx.resolve_node_type(call_expr.callee_id);\n-    if ty::type_is_error(callee_ty) {\n-        return;\n-    }\n-\n     match ty::get(callee_ty).sty {\n         ty::ty_bare_fn(*) => { }\n         ty::ty_closure(ref closure_ty) => {\n@@ -432,9 +430,12 @@ fn constrain_callee(rcx: @mut Rcx,\n             }\n         }\n         _ => {\n-            tcx.sess.span_bug(\n-                callee_expr.span,\n-                fmt!(\"Calling non-function: %s\", callee_ty.repr(tcx)));\n+            // this should not happen, but it does if the program is\n+            // erroneous\n+            //\n+            // tcx.sess.span_bug(\n+            //     callee_expr.span,\n+            //     fmt!(\"Calling non-function: %s\", callee_ty.repr(tcx)));\n         }\n     }\n }\n@@ -456,9 +457,6 @@ fn constrain_call(rcx: @mut Rcx,\n     debug!(\"constrain_call(call_expr=%s, implicitly_ref_args=%?)\",\n            call_expr.repr(tcx), implicitly_ref_args);\n     let callee_ty = rcx.resolve_node_type(call_expr.callee_id);\n-    if ty::type_is_error(callee_ty) {\n-        return;\n-    }\n     let fn_sig = ty::ty_fn_sig(callee_ty);\n \n     // `callee_region` is the scope representing the time in which the\n@@ -919,7 +917,7 @@ pub mod guarantor {\n         // expressions, both of which always yield a region variable, so\n         // mk_subr should never fail.\n         let rptr_ty = rcx.resolve_node_type(id);\n-        if !ty::type_is_error(rptr_ty) && !ty::type_is_bot(rptr_ty) {\n+        if !ty::type_is_bot(rptr_ty) {\n             let tcx = rcx.fcx.ccx.tcx;\n             debug!(\"rptr_ty=%s\", ty_to_str(tcx, rptr_ty));\n             let r = ty::ty_region(tcx, span, rptr_ty);\n@@ -1216,29 +1214,25 @@ pub mod guarantor {\n             }\n             ast::pat_region(p) => {\n                 let rptr_ty = rcx.resolve_node_type(pat.id);\n-                if !ty::type_is_error(rptr_ty) {\n-                    let r = ty::ty_region(rcx.fcx.tcx(), pat.span, rptr_ty);\n-                    link_ref_bindings_in_pat(rcx, p, Some(r));\n-                }\n+                let r = ty::ty_region(rcx.fcx.tcx(), pat.span, rptr_ty);\n+                link_ref_bindings_in_pat(rcx, p, Some(r));\n             }\n             ast::pat_lit(*) => {}\n             ast::pat_range(*) => {}\n             ast::pat_vec(ref before, ref slice, ref after) => {\n                 let vec_ty = rcx.resolve_node_type(pat.id);\n-                if !ty::type_is_error(vec_ty) {\n-                    let vstore = ty::ty_vstore(vec_ty);\n-                    let guarantor1 = match vstore {\n-                        ty::vstore_fixed(_) | ty::vstore_uniq => guarantor,\n-                        ty::vstore_slice(r) => Some(r),\n-                        ty::vstore_box => None\n-                    };\n-\n-                    link_ref_bindings_in_pats(rcx, before, guarantor1);\n-                    for slice.each |&p| {\n-                        link_ref_bindings_in_pat(rcx, p, guarantor);\n-                    }\n-                    link_ref_bindings_in_pats(rcx, after, guarantor1);\n+                let vstore = ty::ty_vstore(vec_ty);\n+                let guarantor1 = match vstore {\n+                    ty::vstore_fixed(_) | ty::vstore_uniq => guarantor,\n+                    ty::vstore_slice(r) => Some(r),\n+                    ty::vstore_box => None\n+                };\n+\n+                link_ref_bindings_in_pats(rcx, before, guarantor1);\n+                for slice.each |&p| {\n+                    link_ref_bindings_in_pat(rcx, p, guarantor);\n                 }\n+                link_ref_bindings_in_pats(rcx, after, guarantor1);\n             }\n         }\n     }"}, {"sha": "1a152f3c29119ea75680f4a3abe776ba61f33fd0", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -414,7 +414,11 @@ pub fn check_crate(tcx: ty::ctxt,\n     time(time_passes, ~\"type collecting\", ||\n         collect::collect_item_types(ccx, crate));\n \n-    time(time_passes, ~\"method resolution\", ||\n+    // this ensures that later parts of type checking can assume that items\n+    // have valid types and not error\n+    tcx.sess.abort_if_errors();\n+\n+    time(time_passes, ~\"coherence checking\", ||\n         coherence::check_coherence(ccx, crate));\n \n     time(time_passes, ~\"type checking\", ||"}, {"sha": "b313a2fc6fcc9de3761a6f59cacd8bf1ca07bf7c", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -24,6 +24,7 @@ pub trait handler {\n     fn fatal(@mut self, msg: &str) -> !;\n     fn err(@mut self, msg: &str);\n     fn bump_err_count(@mut self);\n+    fn err_count(@mut self) -> uint;\n     fn has_errors(@mut self) -> bool;\n     fn abort_if_errors(@mut self);\n     fn warn(@mut self, msg: &str);\n@@ -98,7 +99,12 @@ impl handler for HandlerT {\n     fn bump_err_count(@mut self) {\n         self.err_count += 1u;\n     }\n-    fn has_errors(@mut self) -> bool { self.err_count > 0u }\n+    fn err_count(@mut self) -> uint {\n+        self.err_count\n+    }\n+    fn has_errors(@mut self) -> bool {\n+        self.err_count > 0u\n+    }\n     fn abort_if_errors(@mut self) {\n         let s;\n         match self.err_count {"}, {"sha": "5fa796db884446639c8bb821d3daeb636aab7db5", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -10,8 +10,12 @@\n // except according to those terms.\n \n \n-// error-pattern: dead\n+fn f(caller: &str) {\n+    debug!(caller);\n+    let x: uint = 0u32; // induce type error //~ ERROR mismatched types\n+}\n \n-fn f(caller: str) { debug!(caller); }\n-\n-fn main() { return f(\"main\"); debug!(\"Paul is dead\"); }\n+fn main() {\n+    return f(\"main\");\n+    debug!(\"Paul is dead\"); //~ WARNING unreachable\n+}"}, {"sha": "de28d72677728c658209e01672996e246285d102", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e235f6ca53bac14158a6320aab49f31bd8e8bbe0/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e235f6ca53bac14158a6320aab49f31bd8e8bbe0/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=e235f6ca53bac14158a6320aab49f31bd8e8bbe0", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-extern mod std;\n-use std::bitv;\n-use core::hashmap::HashMap;\n-\n-struct FnInfo {\n-    vars: HashMap<uint, VarInfo>\n-}\n-\n-struct VarInfo {\n-    a: uint,\n-    b: uint,\n-}\n-\n-fn bitv_to_str(enclosing: FnInfo, v: ~bitv::Bitv) -> str {\n-    let s = \"\";\n-\n-    // error is that the value type in the hash map is var_info, not a box\n-    for enclosing.vars.each_value |val| {\n-        if *v.get(val) { s += \"foo\"; }\n-    }\n-    return s;\n-}\n-\n-fn main() { debug!(\"OK\"); }"}, {"sha": "ab2620d46fdc54e320cdba72e4963b1576a7adb7", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -23,10 +23,8 @@ fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n     return e; //~ ERROR mismatched types: expected `a_class/&'b ` but found `a_class/&'a `\n }\n \n-fn a_fn4<'a,'b>(e: int<'a>) -> int<'b> {\n-    //~^ ERROR region parameters are not allowed on this type\n-    //~^^ ERROR region parameters are not allowed on this type\n-    return e;\n+fn a_fn4<'a,'b>() {\n+    let _: int<'a> = 1; //~ ERROR region parameters are not allowed on this type\n }\n \n fn main() { }"}, {"sha": "a572d90313b6af26278acfe7ca064a4b917a98e8", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -18,8 +18,6 @@ fn with<'a, R>(f: &fn(x: &'a int) -> R) -> R {\n \n fn return_it<'a>() -> &'a int {\n     with(|o| o) //~ ERROR mismatched types\n-        //~^ ERROR reference is not valid outside of its lifetime\n-        //~^^ ERROR reference is not valid outside of its lifetime\n }\n \n fn main() {"}, {"sha": "ec9a908ba98760d69e3cfd0a8423ba560a3df463", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -21,8 +21,6 @@ fn with<R>(f: &fn(x: &int) -> R) -> R {\n \n fn return_it() -> &int {\n     with(|o| o) //~ ERROR mismatched types\n-        //~^ ERROR reference is not valid outside of its lifetime\n-        //~^^ ERROR reference is not valid outside of its lifetime\n }\n \n fn main() {"}, {"sha": "c4a412f64c8d454f95df4a444f16cec3feadbe12", "filename": "src/test/compile-fail/type-shadow.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Ftype-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea52a38e59b85b4b6998661b38425ce29839aed/src%2Ftest%2Fcompile-fail%2Ftype-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-shadow.rs?ref=2ea52a38e59b85b4b6998661b38425ce29839aed", "patch": "@@ -9,14 +9,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// error-pattern: mismatched types\n-\n fn main() {\n     type X = int;\n     type Y = X;\n     if true {\n-        type X = str;\n-        let y: Y = \"hello\";\n+        type X = &'static str;\n+        let y: Y = \"hello\"; //~ ERROR mismatched types\n     }\n }"}]}