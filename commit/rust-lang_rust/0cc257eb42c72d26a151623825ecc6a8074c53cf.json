{"sha": "0cc257eb42c72d26a151623825ecc6a8074c53cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzI1N2ViNDJjNzJkMjZhMTUxNjIzODI1ZWNjNmE4MDc0YzUzY2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-07T22:03:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T15:28:54Z"}, "message": "rustc: Run destructors when dest=Ignore\n\nPreviously, if statements of the form \"Foo;\" or \"let _ = Foo;\" were encountered\nwhere Foo had a destructor, the destructors were not run. This changes\nthe relevant locations in trans to check for ty::type_needs_drop and invokes\ntrans_to_lvalue instead of trans_into.\n\nCloses #4734\nCloses #6892", "tree": {"sha": "204a267b1180e3aef4edf76460502e2df021d76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/204a267b1180e3aef4edf76460502e2df021d76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc257eb42c72d26a151623825ecc6a8074c53cf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc257eb42c72d26a151623825ecc6a8074c53cf", "html_url": "https://github.com/rust-lang/rust/commit/0cc257eb42c72d26a151623825ecc6a8074c53cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc257eb42c72d26a151623825ecc6a8074c53cf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a33330caaaedb9eef447ae862e9b87e3aa9880f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a33330caaaedb9eef447ae862e9b87e3aa9880f", "html_url": "https://github.com/rust-lang/rust/commit/9a33330caaaedb9eef447ae862e9b87e3aa9880f"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "dda5f295a99aee5dcca6fda4c070ff53b6d0dd81", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0cc257eb42c72d26a151623825ecc6a8074c53cf", "patch": "@@ -936,7 +936,7 @@ pub fn init_local<'a>(bcx: &'a Block<'a>, local: &ast::Local)\n         // Handle let _ = e; just like e;\n         match local.init {\n             Some(init) => {\n-              return expr::trans_into(bcx, init, expr::Ignore);\n+                return controlflow::trans_stmt_semi(bcx, init)\n             }\n             None => { return bcx; }\n         }"}, {"sha": "7905436a7a3ada32afd78b2bdca56cbc03c43762", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=0cc257eb42c72d26a151623825ecc6a8074c53cf", "patch": "@@ -19,6 +19,7 @@ use middle::trans::debuginfo;\n use middle::trans::cleanup;\n use middle::trans::cleanup::CleanupMethods;\n use middle::trans::expr;\n+use middle::ty;\n use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n@@ -49,7 +50,7 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n \n     match s.node {\n         ast::StmtExpr(e, _) | ast::StmtSemi(e, _) => {\n-            bcx = expr::trans_into(cx, e, expr::Ignore);\n+            bcx = trans_stmt_semi(bcx, e);\n         }\n         ast::StmtDecl(d, _) => {\n             match d.node {\n@@ -71,6 +72,16 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n     return bcx;\n }\n \n+pub fn trans_stmt_semi<'a>(cx: &'a Block<'a>, e: &ast::Expr) -> &'a Block<'a> {\n+    let _icx = push_ctxt(\"trans_stmt_semi\");\n+    let ty = expr_ty(cx, e);\n+    if ty::type_needs_drop(cx.tcx(), ty) {\n+        expr::trans_to_lvalue(cx, e, \"stmt\").bcx\n+    } else {\n+        expr::trans_into(cx, e, expr::Ignore)\n+    }\n+}\n+\n pub fn trans_block<'a>(bcx: &'a Block<'a>,\n                        b: &ast::Block,\n                        mut dest: expr::Dest)"}, {"sha": "c08d3503fa4c13b59abf741f8c3170c7450faab9", "filename": "src/test/run-pass/issue-4734.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Ftest%2Frun-pass%2Fissue-4734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Ftest%2Frun-pass%2Fissue-4734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4734.rs?ref=0cc257eb42c72d26a151623825ecc6a8074c53cf", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensures that destructors are run for expressions of the form \"e;\" where\n+// `e` is a type which requires a destructor.\n+\n+#![allow(path_statement)]\n+\n+struct A { n: int }\n+struct B;\n+\n+static mut NUM_DROPS: uint = 0;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        unsafe { NUM_DROPS += 1; }\n+    }\n+}\n+\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        unsafe { NUM_DROPS += 1; }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(unsafe { NUM_DROPS }, 0);\n+    { let _a = A { n: 1 }; }\n+    assert_eq!(unsafe { NUM_DROPS }, 1);\n+    { A { n: 3 }; }\n+    assert_eq!(unsafe { NUM_DROPS }, 2);\n+\n+    { let _b = B; }\n+    assert_eq!(unsafe { NUM_DROPS }, 3);\n+    { B; }\n+    assert_eq!(unsafe { NUM_DROPS }, 4);\n+}"}, {"sha": "891892ff9cbff04308b17611fe24a6ac5efec4df", "filename": "src/test/run-pass/issue-6892.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc257eb42c72d26a151623825ecc6a8074c53cf/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6892.rs?ref=0cc257eb42c72d26a151623825ecc6a8074c53cf", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensures that destructors are run for expressions of the form \"let _ = e;\"\n+// where `e` is a type which requires a destructor.\n+\n+struct Foo;\n+struct Bar { x: int }\n+struct Baz(int);\n+\n+static mut NUM_DROPS: uint = 0;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        unsafe { NUM_DROPS += 1; }\n+    }\n+}\n+impl Drop for Bar {\n+    fn drop(&mut self) {\n+        unsafe { NUM_DROPS += 1; }\n+    }\n+}\n+impl Drop for Baz {\n+    fn drop(&mut self) {\n+        unsafe { NUM_DROPS += 1; }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(unsafe { NUM_DROPS }, 0);\n+    { let _x = Foo; }\n+    assert_eq!(unsafe { NUM_DROPS }, 1);\n+    { let _x = Bar { x: 21 }; }\n+    assert_eq!(unsafe { NUM_DROPS }, 2);\n+    { let _x = Baz(21); }\n+    assert_eq!(unsafe { NUM_DROPS }, 3);\n+\n+    assert_eq!(unsafe { NUM_DROPS }, 3);\n+    { let _ = Foo; }\n+    assert_eq!(unsafe { NUM_DROPS }, 4);\n+    { let _ = Bar { x: 21 }; }\n+    assert_eq!(unsafe { NUM_DROPS }, 5);\n+    { let _ = Baz(21); }\n+    assert_eq!(unsafe { NUM_DROPS }, 6);\n+}"}]}