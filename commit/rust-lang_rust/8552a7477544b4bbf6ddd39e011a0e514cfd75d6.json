{"sha": "8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTJhNzQ3NzU0NGI0YmJmNmRkZDM5ZTAxMWEwZTUxNGNmZDc1ZDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-01T02:36:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-04T23:30:48Z"}, "message": "Bring compiletest/rustpkg/driver up to date on std vs core", "tree": {"sha": "3772af49908fcaa4cd6154c3288a0aa33829b19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3772af49908fcaa4cd6154c3288a0aa33829b19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "html_url": "https://github.com/rust-lang/rust/commit/8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8507778a36478035f46bfa9f925398a36cd443f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8507778a36478035f46bfa9f925398a36cd443f", "html_url": "https://github.com/rust-lang/rust/commit/f8507778a36478035f46bfa9f925398a36cd443f"}], "stats": {"total": 90, "additions": 30, "deletions": 60}, "files": [{"sha": "0e83147501cbfb6b617cbfde47370f238a1a429e", "filename": "mk/tools.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -50,7 +50,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4)):\t\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4)):\t\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\"}, {"sha": "38289f6274180a63c401d0f1754e9481f2f25f75", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n #[deriving(Eq)]\n pub enum mode {\n     mode_compile_fail,"}, {"sha": "7d9a7c3ea75dcc75f49b1eadba8af12a6dd7d897", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -11,21 +11,16 @@\n #[crate_type = \"bin\"];\n \n #[allow(non_camel_case_types)];\n+#[allow(unrecognized_lint)]; // NOTE: remove after snapshot\n+#[deny(warnings)];\n \n-#[no_core]; // XXX: Remove after snapshot\n-#[no_std];\n+extern mod extra;\n \n-extern mod core(name = \"std\", vers = \"0.7\");\n-extern mod extra(name = \"extra\", vers = \"0.7\");\n-\n-use core::prelude::*;\n-use core::*;\n+use std::os;\n \n use extra::getopts;\n use extra::test;\n \n-use core::result::{Ok, Err};\n-\n use common::config;\n use common::mode_run_pass;\n use common::mode_run_fail;\n@@ -42,13 +37,6 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n \n-mod std {\n-    pub use core::cmp;\n-    pub use core::str;\n-    pub use core::sys;\n-    pub use core::unstable;\n-}\n-\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);\n@@ -98,8 +86,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n         run_ignored: getopts::opt_present(matches, \"ignored\"),\n         filter:\n              if !matches.free.is_empty() {\n-                 option::Some(copy matches.free[0])\n-             } else { option::None },\n+                 Some(copy matches.free[0])\n+             } else { None },\n         logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n         runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n@@ -148,8 +136,8 @@ pub fn log_config(config: &config) {\n \n pub fn opt_str<'a>(maybestr: &'a Option<~str>) -> &'a str {\n     match *maybestr {\n-        option::None => \"(none)\",\n-        option::Some(ref s) => {\n+        None => \"(none)\",\n+        Some(ref s) => {\n             let s: &'a str = *s;\n             s\n         }\n@@ -161,7 +149,7 @@ pub fn opt_str2(maybestr: Option<~str>) -> ~str {\n }\n \n pub fn str_opt(maybestr: ~str) -> Option<~str> {\n-    if maybestr != ~\"(none)\" { option::Some(maybestr) } else { option::None }\n+    if maybestr != ~\"(none)\" { Some(maybestr) } else { None }\n }\n \n pub fn str_mode(s: ~str) -> mode {\n@@ -199,8 +187,8 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n         logfile: copy config.logfile,\n         run_tests: true,\n         run_benchmarks: false,\n-        save_results: option::None,\n-        compare_results: option::None\n+        save_results: None,\n+        compare_results: None\n     }\n }\n \n@@ -268,7 +256,7 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n }\n \n pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n-    use core::cell::Cell;\n+    use std::cell::Cell;\n     let config = Cell::new(copy *config);\n     let testfile = Cell::new(testfile.to_str());\n     test::DynTestFn(|| { runtest::run(config.take(), testfile.take()) })"}, {"sha": "780a917c019b22cca0a31da042d2e1b2aea1e707", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::io;\n+use std::io;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "9cd489f05766afd2591bffb4be2210a51172efd5", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::config;\n use common;\n \n-use core::io;\n-use core::os;\n+use std::io;\n+use std::os;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out"}, {"sha": "0e61b45d6199f4795feca9b4be7640664daa34a9", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::os;\n-use core::run;\n-use core::str;\n+use std::os;\n+use std::run;\n+use std::str;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: &str, prog: &str) -> ~[(~str,~str)] {"}, {"sha": "91016ba91fa555a8c5c7ea6d971394cc096d7867", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::mode_run_pass;\n use common::mode_run_fail;\n use common::mode_compile_fail;\n@@ -22,10 +20,10 @@ use procsrv;\n use util;\n use util::logv;\n \n-use core::io;\n-use core::os;\n-use core::uint;\n-use core::vec;\n+use std::io;\n+use std::os;\n+use std::uint;\n+use std::vec;\n \n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {"}, {"sha": "5af469ff8417c17d82865bddd0a18d2e0c4668de", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::config;\n \n-use core::io;\n-use core::os::getenv;\n+use std::io;\n+use std::os::getenv;\n \n pub fn make_new_path(path: &str) -> ~str {\n "}, {"sha": "e81a3230e134384101441c8cc6a206a54e5af6e1", "filename": "src/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_core];\n-#[no_std];\n-\n-extern mod core(name = \"std\", vers = \"0.7\");\n-\n #[cfg(rustpkg)]\n extern mod this(name = \"rustpkg\");\n "}, {"sha": "9911ca699dac0e5ca8a71a68e56b2be33c9356e0", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -667,8 +667,10 @@ mod tests {\n             fn f() {}\n             f()\n         \");\n+    }\n \n-        debug!(\"simultaneous definitions + expressions are allowed\");\n+    #[test]\n+    fn simultaneous_definition_and_expression() {\n         run_program(\"\n             let a = 3; a as u8\n         \");"}, {"sha": "5233b87f7e4fa62914ccd0117495096204f84fb7", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -14,10 +14,8 @@ use package_id::*;\n use package_source::*;\n use version::Version;\n \n-use std::option::*;\n use std::os;\n use std::hashmap::*;\n-use std::path::*;\n \n /// Convenience functions intended for calling from pkg.rs\n "}, {"sha": "96c99a7a0f17edcb4e7e3a8e9c0ee1cf910ef31d", "filename": "src/librustpkg/messages.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fmessages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fmessages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fmessages.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -10,7 +10,6 @@\n \n use extra::term;\n use std::io;\n-use std::result::*;\n \n pub fn note(msg: &str) {\n     pretty_message(msg, \"note: \", term::color::GREEN, io::stdout())"}, {"sha": "b2f608bd352aefb8d9a41a6a3d7582337092f7d7", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -11,7 +11,6 @@\n use target::*;\n use package_id::PkgId;\n use std::path::Path;\n-use std::option::*;\n use std::{os, run, str};\n use context::*;\n use crate::Crate;"}, {"sha": "8a57cd4b25c0e4106bea66ea67a48bc35438c0d1", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552a7477544b4bbf6ddd39e011a0e514cfd75d6/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=8552a7477544b4bbf6ddd39e011a0e514cfd75d6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{libc, os, result, str};\n+use std::{os, result};\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use extra::getopts::groups::getopts;\n@@ -379,6 +379,7 @@ pub fn link_exe(_src: &Path, _dest: &Path) -> bool {\n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"macos\")]\n pub fn link_exe(src: &Path, dest: &Path) -> bool {\n+    use std::{libc, str};\n     unsafe {\n         do str::as_c_str(src.to_str()) |src_buf| {\n             do str::as_c_str(dest.to_str()) |dest_buf| {"}]}