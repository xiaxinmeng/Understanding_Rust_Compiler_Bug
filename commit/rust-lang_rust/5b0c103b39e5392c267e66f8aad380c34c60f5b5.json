{"sha": "5b0c103b39e5392c267e66f8aad380c34c60f5b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMGMxMDNiMzllNTM5MmMyNjdlNjZmOGFhZDM4MGMzNGM2MGY1YjU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T11:15:50Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T11:20:12Z"}, "message": "Make it possible to cast unsafe pointers with the 'as' operator", "tree": {"sha": "3d7cb38f438edb6c0d90ce82963fec86b8ae3a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7cb38f438edb6c0d90ce82963fec86b8ae3a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0c103b39e5392c267e66f8aad380c34c60f5b5", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c103b39e5392c267e66f8aad380c34c60f5b5", "html_url": "https://github.com/rust-lang/rust/commit/5b0c103b39e5392c267e66f8aad380c34c60f5b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c103b39e5392c267e66f8aad380c34c60f5b5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a20eed2db233dad2eb9594cf28790842970c1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a20eed2db233dad2eb9594cf28790842970c1d6", "html_url": "https://github.com/rust-lang/rust/commit/0a20eed2db233dad2eb9594cf28790842970c1d6"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "84d357f5f47397ea738e57da2fe916e342dc8adc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c103b39e5392c267e66f8aad380c34c60f5b5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c103b39e5392c267e66f8aad380c34c60f5b5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5b0c103b39e5392c267e66f8aad380c34c60f5b5", "patch": "@@ -3269,12 +3269,13 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n     check (type_has_static_size(ccx, t_out));\n     let ll_t_out = type_of(ccx, e.span, t_out);\n \n-    tag kind { native_; integral; float; other; }\n+    tag kind { pointer; integral; float; other; }\n     fn t_kind(tcx: ty::ctxt, t: ty::t) -> kind {\n         ret if ty::type_is_fp(tcx, t) {\n                 float\n-            } else if ty::type_is_native(tcx, t) {\n-                native_\n+            } else if ty::type_is_native(tcx, t) ||\n+                      ty::type_is_unsafe_ptr(tcx, t) {\n+                pointer\n             } else if ty::type_is_integral(tcx, t) {\n                 integral\n             } else { other };\n@@ -3301,13 +3302,13 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n                 FPToSI(e_res.bcx, e_res.val, ll_t_out)\n             } else { FPToUI(e_res.bcx, e_res.val, ll_t_out) }\n           }\n-          {in: integral., out: native_.} {\n+          {in: integral., out: pointer.} {\n             IntToPtr(e_res.bcx, e_res.val, ll_t_out)\n           }\n-          {in: native_., out: integral.} {\n+          {in: pointer., out: integral.} {\n             PtrToInt(e_res.bcx, e_res.val, ll_t_out)\n           }\n-          {in: native_., out: native_.} {\n+          {in: pointer., out: pointer.} {\n             PointerCast(e_res.bcx, e_res.val, ll_t_out)\n           }\n           _ { ccx.sess.bug(\"Translating unsupported cast.\") }"}, {"sha": "fbfff0f794189cf03fffb74be8d68a809bfb8074", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c103b39e5392c267e66f8aad380c34c60f5b5/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c103b39e5392c267e66f8aad380c34c60f5b5/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5b0c103b39e5392c267e66f8aad380c34c60f5b5", "patch": "@@ -153,6 +153,7 @@ export type_is_bot;\n export type_is_box;\n export type_is_boxed;\n export type_is_unique_box;\n+export type_is_unsafe_ptr;\n export type_is_vec;\n export type_is_fp;\n export type_allows_implicit_copy;\n@@ -885,6 +886,13 @@ pure fn type_is_unique_box(cx: ctxt, ty: t) -> bool {\n     }\n }\n \n+pure fn type_is_unsafe_ptr(cx: ctxt, ty: t) -> bool {\n+    alt struct(cx, ty) {\n+      ty_ptr(_) { ret true; }\n+      _ { ret false; }\n+    }\n+}\n+\n pure fn type_is_vec(cx: ctxt, ty: t) -> bool {\n     ret alt struct(cx, ty) {\n           ty_vec(_) { true }"}]}