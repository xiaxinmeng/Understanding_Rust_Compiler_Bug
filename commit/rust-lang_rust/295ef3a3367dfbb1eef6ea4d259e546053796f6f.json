{"sha": "295ef3a3367dfbb1eef6ea4d259e546053796f6f", "node_id": "C_kwDOAAsO6NoAKDI5NWVmM2EzMzY3ZGZiYjFlZWY2ZWE0ZDI1OWU1NDYwNTM3OTZmNmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-09T12:38:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-09T12:38:33Z"}, "message": "Rollup merge of #92657 - Kixunil:ptr_as_const_mut, r=m-ou-se\n\nImplemented const casts of raw pointers\n\nThis adds `as_mut()` method for `*const T` and `as_const()` for `*mut T`\nwhich are intended to make casting of consts safer. This was discussed\nin the [internals discussion][discussion].\n\nGiven that this is a simple change and multiple people agreed to it including `@RalfJung` I decided to go ahead and open the PR.\n\n[discussion]: https://internals.rust-lang.org/t/casting-constness-can-be-risky-heres-a-simple-fix/15933", "tree": {"sha": "962249f14c25b658e2aa86ed2b77734e07f8fed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/962249f14c25b658e2aa86ed2b77734e07f8fed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295ef3a3367dfbb1eef6ea4d259e546053796f6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2tdJCRBK7hj4Ov3rIwAAPjQIAJ9UX+d7j6sqvCzfbmA1uVGC\n5t61LwQbQ77Ch1HRiezZAoCxQ4X4jlJ80thdiQS7YCcIZFqMSShxSRxDuCBkZyIY\nR0QFJaXJCEraWTlnDBofltJZQVe0o6SjAau4iBrWX2fOMul8ANUW3AT24PNDz7Uy\nnxaG7Pw3WacoO60jc4IpZIqwZQfKIcqm87vtN7LiSedTxO5s2fzyBT3PHReEoJx0\nxWQOXhVFbHBA8dgYwEAhs33FL8jJOkx/djbIxeqqboQ8zyH1wAM3Q6Gih9uY/Mnm\nKRWb9Uo6QGgq15rnKJzLHyD/bwPgC+XXUjaCGZcNOYJHwxlO+Mo5SQ6jvM6Urus=\n=sRZw\n-----END PGP SIGNATURE-----\n", "payload": "tree 962249f14c25b658e2aa86ed2b77734e07f8fed6\nparent 51001b35bd4079ea40536a264e054eec9b4f11bd\nparent 1a966235138ad68967aa0892aa0621315081e4e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641731913 +0100\ncommitter GitHub <noreply@github.com> 1641731913 +0100\n\nRollup merge of #92657 - Kixunil:ptr_as_const_mut, r=m-ou-se\n\nImplemented const casts of raw pointers\n\nThis adds `as_mut()` method for `*const T` and `as_const()` for `*mut T`\nwhich are intended to make casting of consts safer. This was discussed\nin the [internals discussion][discussion].\n\nGiven that this is a simple change and multiple people agreed to it including `@RalfJung` I decided to go ahead and open the PR.\n\n[discussion]: https://internals.rust-lang.org/t/casting-constness-can-be-risky-heres-a-simple-fix/15933\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295ef3a3367dfbb1eef6ea4d259e546053796f6f", "html_url": "https://github.com/rust-lang/rust/commit/295ef3a3367dfbb1eef6ea4d259e546053796f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295ef3a3367dfbb1eef6ea4d259e546053796f6f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51001b35bd4079ea40536a264e054eec9b4f11bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/51001b35bd4079ea40536a264e054eec9b4f11bd", "html_url": "https://github.com/rust-lang/rust/commit/51001b35bd4079ea40536a264e054eec9b4f11bd"}, {"sha": "1a966235138ad68967aa0892aa0621315081e4e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a966235138ad68967aa0892aa0621315081e4e8", "html_url": "https://github.com/rust-lang/rust/commit/1a966235138ad68967aa0892aa0621315081e4e8"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "7b826f921ca87b1eef0a8a7a8a3683e3b944baec", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/295ef3a3367dfbb1eef6ea4d259e546053796f6f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ef3a3367dfbb1eef6ea4d259e546053796f6f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=295ef3a3367dfbb1eef6ea4d259e546053796f6f", "patch": "@@ -48,6 +48,16 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Changes constness without changing the type.\n+    ///\n+    /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n+    /// refactored.\n+    #[unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    #[rustc_const_unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    pub const fn as_mut(self) -> *mut T {\n+        self as _\n+    }\n+\n     /// Casts a pointer to its raw bits.\n     ///\n     /// This is equivalent to `as usize`, but is more specific to enhance readability."}, {"sha": "6c50d4052976f01e8672a943e56562eddffe75ef", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/295ef3a3367dfbb1eef6ea4d259e546053796f6f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ef3a3367dfbb1eef6ea4d259e546053796f6f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=295ef3a3367dfbb1eef6ea4d259e546053796f6f", "patch": "@@ -47,6 +47,20 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Changes constness without changing the type.\n+    ///\n+    /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n+    /// refactored.\n+    ///\n+    /// While not strictly required (`*mut T` coerces to `*const T`), this is provided for symmetry\n+    /// with `as_mut()` on `*const T` and may have documentation value if used instead of implicit\n+    /// coercion.\n+    #[unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    #[rustc_const_unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    pub const fn as_const(self) -> *const T {\n+        self as _\n+    }\n+\n     /// Casts a pointer to its raw bits.\n     ///\n     /// This is equivalent to `as usize`, but is more specific to enhance readability."}]}