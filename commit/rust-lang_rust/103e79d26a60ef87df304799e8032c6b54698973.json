{"sha": "103e79d26a60ef87df304799e8032c6b54698973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwM2U3OWQyNmE2MGVmODdkZjMwNDc5OWU4MDMyYzZiNTQ2OTg5NzM=", "commit": {"author": {"name": "Nathaniel Theis", "email": "nttheis@gmail.com", "date": "2015-05-26T23:39:18Z"}, "committer": {"name": "Nathaniel Theis", "email": "nttheis@gmail.com", "date": "2015-05-29T19:02:13Z"}, "message": "Implement RFC 771: std::iter::once", "tree": {"sha": "90f381f1847fdf2a071a8e0c2134a6383af411ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f381f1847fdf2a071a8e0c2134a6383af411ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103e79d26a60ef87df304799e8032c6b54698973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103e79d26a60ef87df304799e8032c6b54698973", "html_url": "https://github.com/rust-lang/rust/commit/103e79d26a60ef87df304799e8032c6b54698973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103e79d26a60ef87df304799e8032c6b54698973/comments", "author": {"login": "XMPPwocky", "id": 1250666, "node_id": "MDQ6VXNlcjEyNTA2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1250666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XMPPwocky", "html_url": "https://github.com/XMPPwocky", "followers_url": "https://api.github.com/users/XMPPwocky/followers", "following_url": "https://api.github.com/users/XMPPwocky/following{/other_user}", "gists_url": "https://api.github.com/users/XMPPwocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XMPPwocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XMPPwocky/subscriptions", "organizations_url": "https://api.github.com/users/XMPPwocky/orgs", "repos_url": "https://api.github.com/users/XMPPwocky/repos", "events_url": "https://api.github.com/users/XMPPwocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XMPPwocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "XMPPwocky", "id": 1250666, "node_id": "MDQ6VXNlcjEyNTA2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1250666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XMPPwocky", "html_url": "https://github.com/XMPPwocky", "followers_url": "https://api.github.com/users/XMPPwocky/followers", "following_url": "https://api.github.com/users/XMPPwocky/following{/other_user}", "gists_url": "https://api.github.com/users/XMPPwocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XMPPwocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XMPPwocky/subscriptions", "organizations_url": "https://api.github.com/users/XMPPwocky/orgs", "repos_url": "https://api.github.com/users/XMPPwocky/repos", "events_url": "https://api.github.com/users/XMPPwocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XMPPwocky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d447e40e29bbb47120dd01b3d25b2510b345284", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d447e40e29bbb47120dd01b3d25b2510b345284", "html_url": "https://github.com/rust-lang/rust/commit/2d447e40e29bbb47120dd01b3d25b2510b345284"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "9337c501a3a68d71953e4d3212427a0c3a4e1a86", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=103e79d26a60ef87df304799e8032c6b54698973", "patch": "@@ -3030,6 +3030,100 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n     Repeat{element: elt}\n }\n \n+/// An iterator that yields nothing.\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+pub struct Empty<T>(marker::PhantomData<T>);\n+\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+impl<T> Iterator for Empty<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> {\n+        None\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>){\n+        (0, Some(0))\n+    }\n+}\n+\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+impl<T> DoubleEndedIterator for Empty<T> {\n+    fn next_back(&mut self) -> Option<T> {\n+        None\n+    }\n+}\n+\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+impl<T> ExactSizeIterator for Empty<T> {\n+    fn len(&self) -> usize {\n+        0\n+    }\n+}\n+\n+// not #[derive] because that adds a Clone bound on T,\n+// which isn't necessary.\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+impl<T> Clone for Empty<T> {\n+    fn clone(&self) -> Empty<T> {\n+        Empty(marker::PhantomData)\n+    }\n+}\n+\n+// not #[derive] because that adds a Default bound on T,\n+// which isn't necessary.\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+impl<T> Default for Empty<T> {\n+    fn default() -> Empty<T> {\n+        Empty(marker::PhantomData)\n+    }\n+}\n+\n+/// Creates an iterator that yields nothing.\n+#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+pub fn empty<T>() -> Empty<T> {\n+    Empty(marker::PhantomData)\n+}\n+\n+/// An iterator that yields an element exactly once.\n+#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+pub struct Once<T> {\n+    inner: ::option::IntoIter<T>\n+}\n+\n+#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+impl<T> Iterator for Once<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> {\n+        self.inner.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+\n+#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+impl<T> DoubleEndedIterator for Once<T> {\n+    fn next_back(&mut self) -> Option<T> {\n+        self.inner.next_back()\n+    }\n+}\n+\n+#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+impl<T> ExactSizeIterator for Once<T> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n+/// Creates an iterator that yields an element exactly once.\n+#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+pub fn once<T>(value: T) -> Once<T> {\n+    Once { inner: Some(value).into_iter() }\n+}\n+\n /// Functions for lexicographical ordering of sequences.\n ///\n /// Lexicographical ordering through `<`, `<=`, `>=`, `>` requires"}, {"sha": "8e817bcbc2a73455def5d3e8baa5de401254f5d6", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=103e79d26a60ef87df304799e8032c6b54698973", "patch": "@@ -1096,6 +1096,19 @@ fn test_fuse_count() {\n     // Can't check len now because count consumes.\n }\n \n+#[test]\n+fn test_once() {\n+    let mut it = once(42);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), None);\n+}\n+\n+#[test]\n+fn test_empty() {\n+    let mut it = empty::<i32>();\n+    assert_eq!(it.next(), None);\n+}\n+\n #[bench]\n fn bench_rposition(b: &mut Bencher) {\n     let it: Vec<usize> = (0..300).collect();"}, {"sha": "970ae11e7491ee52f31359c9e94ce6bb143093ef", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e79d26a60ef87df304799e8032c6b54698973/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=103e79d26a60ef87df304799e8032c6b54698973", "patch": "@@ -25,6 +25,8 @@\n #![feature(slice_patterns)]\n #![feature(float_from_str_radix)]\n #![feature(cell_extras)]\n+#![feature(iter_empty)]\n+#![feature(iter_once)]\n \n extern crate core;\n extern crate test;"}]}