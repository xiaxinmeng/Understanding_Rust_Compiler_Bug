{"sha": "5205c016e9f704796aa7893f89ef108248bda2e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDVjMDE2ZTlmNzA0Nzk2YWE3ODkzZjg5ZWYxMDgyNDhiZGEyZTI=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T11:35:02Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T11:35:02Z"}, "message": "Fix ambiguity with if break\n\nBrought up by #290", "tree": {"sha": "8ae27dbe907f3951605c9b213721dab5ba9b5497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ae27dbe907f3951605c9b213721dab5ba9b5497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5205c016e9f704796aa7893f89ef108248bda2e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5205c016e9f704796aa7893f89ef108248bda2e2", "html_url": "https://github.com/rust-lang/rust/commit/5205c016e9f704796aa7893f89ef108248bda2e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5205c016e9f704796aa7893f89ef108248bda2e2/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8693b1342093e71c1c39db0daee8580687e749f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8693b1342093e71c1c39db0daee8580687e749f2", "html_url": "https://github.com/rust-lang/rust/commit/8693b1342093e71c1c39db0daee8580687e749f2"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "79de0add0b2c9ba2b994db3d6eb0dd3514af1137", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=5205c016e9f704796aa7893f89ef108248bda2e2", "patch": "@@ -5,6 +5,7 @@ pub(super) use self::atom::{literal, LITERAL_FIRST};\n use super::*;\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n+const EXPR_FIRST_NO_BLOCK: TokenSet = LHS_FIRST_NO_BLOCK;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n     let r = Restrictions {\n@@ -209,6 +210,10 @@ const LHS_FIRST: TokenSet = token_set_union![\n     token_set![AMP, STAR, EXCL, DOTDOT, MINUS],\n     atom::ATOM_EXPR_FIRST,\n ];\n+const LHS_FIRST_NO_BLOCK: TokenSet = token_set_union![\n+    token_set![AMP, STAR, EXCL, DOTDOT, MINUS],\n+    atom::ATOM_EXPR_FIRST_NO_BLOCK,\n+];\n \n fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;"}, {"sha": "fcc0a4490ceba2d27cfbfa19ccb66bf3f9e31c68", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=5205c016e9f704796aa7893f89ef108248bda2e2", "patch": "@@ -35,10 +35,10 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     Some(m.complete(p, LITERAL))\n }\n \n-pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n+// E.g. for after the break in `if break {}`, this should not match\n+pub(super) const ATOM_EXPR_FIRST_NO_BLOCK: TokenSet = token_set_union![\n     LITERAL_FIRST,\n     token_set![\n-        L_CURLY,\n         L_PAREN,\n         L_BRACK,\n         PIPE,\n@@ -59,6 +59,9 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n     ],\n ];\n \n+pub(super) const ATOM_EXPR_FIRST: TokenSet =\n+    token_set_union![ATOM_EXPR_FIRST_NO_BLOCK, token_set![L_CURLY],];\n+\n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n@@ -108,7 +111,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         L_CURLY => block_expr(p, None),\n         RETURN_KW => return_expr(p),\n         CONTINUE_KW => continue_expr(p),\n-        BREAK_KW => break_expr(p),\n+        BREAK_KW => break_expr(p, r),\n         _ => {\n             p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n             return None;\n@@ -427,12 +430,20 @@ fn continue_expr(p: &mut Parser) -> CompletedMarker {\n //         break 'l 92;\n //     }\n // }\n-fn break_expr(p: &mut Parser) -> CompletedMarker {\n+fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     assert!(p.at(BREAK_KW));\n     let m = p.start();\n     p.bump();\n     p.eat(LIFETIME);\n-    if p.at_ts(EXPR_FIRST) {\n+    // test break_ambiguity\n+    // fn foo(){\n+    //     if break {}\n+    //     while break {}\n+    //     for i in break {}\n+    //     match break {}\n+    // }\n+    if r.forbid_structs && p.at_ts(EXPR_FIRST_NO_BLOCK) || !r.forbid_structs && p.at_ts(EXPR_FIRST)\n+    {\n         expr(p);\n     }\n     m.complete(p, BREAK_EXPR)"}, {"sha": "560eb05b949e1c87559c2acd58ebe7cc9ca30af5", "filename": "crates/ra_syntax/tests/data/parser/inline/0119_break_ambiguity.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.rs?ref=5205c016e9f704796aa7893f89ef108248bda2e2", "patch": "@@ -0,0 +1,6 @@\n+fn foo(){\n+    if break {}\n+    while break {}\n+    for i in break {}\n+    match break {}\n+}"}, {"sha": "6032a6c17fec7ca532f4e6b1cdbe9cdc9f1eefad", "filename": "crates/ra_syntax/tests/data/parser/inline/0119_break_ambiguity.txt", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5205c016e9f704796aa7893f89ef108248bda2e2/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0119_break_ambiguity.txt?ref=5205c016e9f704796aa7893f89ef108248bda2e2", "patch": "@@ -0,0 +1,65 @@\n+SOURCE_FILE@[0; 88)\n+  FN_DEF@[0; 87)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    BLOCK@[8; 87)\n+      L_CURLY@[8; 9)\n+      WHITESPACE@[9; 14)\n+      EXPR_STMT@[14; 25)\n+        IF_EXPR@[14; 25)\n+          IF_KW@[14; 16)\n+          WHITESPACE@[16; 17)\n+          CONDITION@[17; 22)\n+            BREAK_EXPR@[17; 22)\n+              BREAK_KW@[17; 22)\n+          WHITESPACE@[22; 23)\n+          BLOCK@[23; 25)\n+            L_CURLY@[23; 24)\n+            R_CURLY@[24; 25)\n+      WHITESPACE@[25; 30)\n+      EXPR_STMT@[30; 44)\n+        WHILE_EXPR@[30; 44)\n+          WHILE_KW@[30; 35)\n+          WHITESPACE@[35; 36)\n+          CONDITION@[36; 41)\n+            BREAK_EXPR@[36; 41)\n+              BREAK_KW@[36; 41)\n+          WHITESPACE@[41; 42)\n+          BLOCK@[42; 44)\n+            L_CURLY@[42; 43)\n+            R_CURLY@[43; 44)\n+      WHITESPACE@[44; 49)\n+      EXPR_STMT@[49; 66)\n+        FOR_EXPR@[49; 66)\n+          FOR_KW@[49; 52)\n+          WHITESPACE@[52; 53)\n+          BIND_PAT@[53; 54)\n+            NAME@[53; 54)\n+              IDENT@[53; 54) \"i\"\n+          WHITESPACE@[54; 55)\n+          IN_KW@[55; 57)\n+          WHITESPACE@[57; 58)\n+          BREAK_EXPR@[58; 63)\n+            BREAK_KW@[58; 63)\n+          WHITESPACE@[63; 64)\n+          BLOCK@[64; 66)\n+            L_CURLY@[64; 65)\n+            R_CURLY@[65; 66)\n+      WHITESPACE@[66; 71)\n+      MATCH_EXPR@[71; 85)\n+        MATCH_KW@[71; 76)\n+        WHITESPACE@[76; 77)\n+        BREAK_EXPR@[77; 82)\n+          BREAK_KW@[77; 82)\n+        WHITESPACE@[82; 83)\n+        MATCH_ARM_LIST@[83; 85)\n+          L_CURLY@[83; 84)\n+          R_CURLY@[84; 85)\n+      WHITESPACE@[85; 86)\n+      R_CURLY@[86; 87)\n+  WHITESPACE@[87; 88)"}]}