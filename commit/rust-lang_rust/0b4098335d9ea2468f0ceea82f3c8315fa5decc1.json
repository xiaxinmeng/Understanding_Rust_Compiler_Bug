{"sha": "0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNDA5ODMzNWQ5ZWEyNDY4ZjBjZWVhODJmM2M4MzE1ZmE1ZGVjYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T13:14:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T13:14:50Z"}, "message": "Auto merge of #5429 - faern:use-assoc-int-float-consts, r=flip1995\n\nUse assoc int and float consts instead of module level ones\n\nchangelog: Recommend primitive type associated constants instead of module level constants\n\nIn Rust 1.43 integer and float primitive types will have a number of new associated constants. For example `MAX`, `MIN` and a number of constants related to the machine representation of floats. https://github.com/rust-lang/rust/pull/68952\n\nThese new constants are preferred over the module level constants in `{core,std}::{f*, u*, i*}`. I have in the last few days made sure that the documentation in the main rust repository uses the new constants in every place I could find (https://github.com/rust-lang/rust/pull/69860, https://github.com/rust-lang/rust/pull/70782). So the next step is naturally to make the linter recommend the new constants as well.\n\nThis PR only changes two lints. There are more. But I did not want the PR to be too big. And since I have not contributed to clippy before it felt saner to start with a small PR so I see if there are any quirks. More will come later.", "tree": {"sha": "666b5c8fdd040e963f4ac9bc753d1dea6bcf4ef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666b5c8fdd040e963f4ac9bc753d1dea6bcf4ef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "html_url": "https://github.com/rust-lang/rust/commit/0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d342cee78703c46d9df09088f9fb99ba85d021ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d342cee78703c46d9df09088f9fb99ba85d021ae", "html_url": "https://github.com/rust-lang/rust/commit/d342cee78703c46d9df09088f9fb99ba85d021ae"}, {"sha": "1647f53fb3064e7bf86d396b401bca0f90a9d51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1647f53fb3064e7bf86d396b401bca0f90a9d51d", "html_url": "https://github.com/rust-lang/rust/commit/1647f53fb3064e7bf86d396b401bca0f90a9d51d"}], "stats": {"total": 280, "additions": 138, "deletions": 142}, "files": [{"sha": "d9776dd50a836add3ab5635534b41bbe225c6180", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let foo: u32 = 5;\n     /// # let _ =\n-    /// foo <= i32::max_value() as u32\n+    /// foo <= i32::MAX as u32\n     /// # ;\n     /// ```\n     ///\n@@ -179,7 +179,7 @@ impl ConversionType {\n     }\n }\n \n-/// Check for `expr <= (to_type::max_value() as from_type)`\n+/// Check for `expr <= (to_type::MAX as from_type)`\n fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     if_chain! {\n          if let ExprKind::Binary(ref op, ref left, ref right) = &expr.kind;\n@@ -194,7 +194,7 @@ fn check_upper_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     }\n }\n \n-/// Check for `expr >= 0|(to_type::min_value() as from_type)`\n+/// Check for `expr >= 0|(to_type::MIN as from_type)`\n fn check_lower_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n     fn check_function<'a>(candidate: &'a Expr<'a>, check: &'a Expr<'a>) -> Option<Conversion<'a>> {\n         (check_lower_bound_zero(candidate, check)).or_else(|| (check_lower_bound_min(candidate, check)))\n@@ -222,7 +222,7 @@ fn check_lower_bound_zero<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> O\n     }\n }\n \n-/// Check for `expr >= (to_type::min_value() as from_type)`\n+/// Check for `expr >= (to_type::MIN as from_type)`\n fn check_lower_bound_min<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> Option<Conversion<'a>> {\n     if let Some((from, to)) = get_types_from_cast(check, MIN_VALUE, SINTS) {\n         Conversion::try_new(candidate, from, to)"}, {"sha": "3a52b1d3fc20bdd2580e38e052fb0614f8313e03", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::{f32, f64, fmt};\n+use std::fmt;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for float literals with a precision greater"}, {"sha": "31dbf6b2b385f8ada005a974a5e105cc66533c8b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -1138,8 +1138,8 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let y: u32 = 0;\n     /// # let x: u32 = 100;\n-    /// let add = x.checked_add(y).unwrap_or(u32::max_value());\n-    /// let sub = x.checked_sub(y).unwrap_or(u32::min_value());\n+    /// let add = x.checked_add(y).unwrap_or(u32::MAX);\n+    /// let sub = x.checked_sub(y).unwrap_or(u32::MIN);\n     /// ```\n     ///\n     /// can be written using dedicated methods for saturating addition/subtraction as:"}, {"sha": "cedd15e8daf63ab5990b5ef4e7d3fbc688805789", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -57,10 +57,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// # use core::f32::NAN;\n     /// # let x = 1.0;\n     ///\n-    /// if x == NAN { }\n+    /// if x == f32::NAN { }\n     /// ```\n     pub CMP_NAN,\n     correctness,\n@@ -389,7 +388,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             ),\n                             Applicability::HasPlaceholders, // snippet\n                         );\n-                        db.span_note(expr.span, \"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n+                        db.span_note(expr.span, \"`f32::EPSILON` and `f64::EPSILON` are available.\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -457,7 +456,7 @@ fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n                     cx,\n                     CMP_NAN,\n                     cmp_expr.span,\n-                    \"doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\",\n+                    \"doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\",\n                 );\n             }\n         }"}, {"sha": "54536ed57d3e9ba9753a7e4152b70fdf94eb797e", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -25,13 +25,13 @@ declare_clippy_lint! {\n     ///\n     /// // Bad\n     /// let a = 1.0;\n-    /// let b = std::f64::NAN;\n+    /// let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = !(a <= b);\n     ///\n     /// // Good\n     /// let a = 1.0;\n-    /// let b = std::f64::NAN;\n+    /// let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = match a.partial_cmp(&b) {\n     ///     None | Some(Ordering::Greater) => true,"}, {"sha": "732725e17944727eaad5c4a70c5ce74265902f75", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -837,7 +837,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let x = std::u64::MAX;\n+    /// let x = u64::MAX;\n     /// x as f64;\n     /// ```\n     pub CAST_PRECISION_LOSS,\n@@ -904,7 +904,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// std::u32::MAX as i32; // will yield a value of `-1`\n+    /// u32::MAX as i32; // will yield a value of `-1`\n     /// ```\n     pub CAST_POSSIBLE_WRAP,\n     pedantic,\n@@ -1752,7 +1752,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let vec: Vec<isize> = Vec::new();\n     /// if vec.len() <= 0 {}\n-    /// if 100 > std::i32::MAX {}\n+    /// if 100 > i32::MAX {}\n     /// ```\n     pub ABSURD_EXTREME_COMPARISONS,\n     correctness,\n@@ -1973,8 +1973,6 @@ impl Ord for FullInt {\n }\n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'_>) -> Option<(FullInt, FullInt)> {\n-    use std::{i128, i16, i32, i64, i8, isize, u128, u16, u32, u64, u8, usize};\n-\n     if let ExprKind::Cast(ref cast_exp, _) = expr.kind {\n         let pre_cast_ty = cx.tables.expr_ty(cast_exp);\n         let cast_ty = cx.tables.expr_ty(expr);"}, {"sha": "409bb2043d4bec5e34c95e251bdc6b2d896aecd3", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -60,7 +60,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n /// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n ///    |                         ^^^^^^^^^^^^\n ///    |\n-///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     cx.struct_span_lint(lint, span, |ldb| {"}, {"sha": "afd10d9ed53f7f128086d6326ac74d9fe2dcdef8", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -8,8 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for `0.0 / 0.0`.\n     ///\n-    /// **Why is this bad?** It's less readable than `std::f32::NAN` or\n-    /// `std::f64::NAN`.\n+    /// **Why is this bad?** It's less readable than `f32::NAN` or `f64::NAN`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -19,7 +18,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,\n-    \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\"\n+    \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\"\n }\n \n declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n@@ -38,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n             if Constant::F32(0.0) == lhs_value || Constant::F64(0.0) == lhs_value;\n             if Constant::F32(0.0) == rhs_value || Constant::F64(0.0) == rhs_value;\n             then {\n-                // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n+                // since we're about to suggest a use of f32::NAN or f64::NAN,\n                 // match the precision of the literals that are given.\n                 let float_type = match (lhs_value, rhs_value) {\n                     (Constant::F64(_), _)\n@@ -51,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     expr.span,\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     &format!(\n-                        \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n+                        \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,\n                     ),\n                 );"}, {"sha": "0e5757fe588c7cd4040f5031a938eb9defdf5117", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -2526,7 +2526,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"zero_divided_by_zero\",\n         group: \"complexity\",\n-        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\",\n+        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`\",\n         deprecation: None,\n         module: \"zero_div_zero\",\n     },"}, {"sha": "d205b383d1ff64c745e1dd5b2842c22a1f66b570", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -16,17 +16,17 @@ fn main() {\n     u < Z;\n     Z >= u;\n     Z > u;\n-    u > std::u32::MAX;\n-    u >= std::u32::MAX;\n-    std::u32::MAX < u;\n-    std::u32::MAX <= u;\n+    u > u32::MAX;\n+    u >= u32::MAX;\n+    u32::MAX < u;\n+    u32::MAX <= u;\n     1-1 > u;\n     u >= !0;\n     u <= 12 - 2*6;\n     let i: i8 = 0;\n     i < -127 - 1;\n-    std::i8::MAX >= i;\n-    3-7 < std::i32::MIN;\n+    i8::MAX >= i;\n+    3-7 < i32::MIN;\n     let b = false;\n     b >= true;\n     false > b;\n@@ -52,10 +52,10 @@ impl PartialOrd<u32> for U {\n }\n \n pub fn foo(val: U) -> bool {\n-    val > std::u32::MAX\n+    val > u32::MAX\n }\n \n pub fn bar(len: u64) -> bool {\n     // This is OK as we are casting from target sized to fixed size\n-    len >= std::usize::MAX as u64\n+    len >= usize::MAX as u64\n }"}, {"sha": "6de554378aaa97f1d0537bb1b7703ae59b9f46fc", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -42,34 +42,34 @@ LL |     Z > u;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:19:5\n    |\n-LL |     u > std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u > u32::MAX;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:20:5\n    |\n-LL |     u >= std::u32::MAX;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u >= u32::MAX;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == std::u32::MAX` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == u32::MAX` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:21:5\n    |\n-LL |     std::u32::MAX < u;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX < u;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n+   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:22:5\n    |\n-LL |     std::u32::MAX <= u;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     u32::MAX <= u;\n+   |     ^^^^^^^^^^^^^\n    |\n-   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `std::u32::MAX == u` instead\n+   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u32::MAX == u` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:23:5\n@@ -106,18 +106,18 @@ LL |     i < -127 - 1;\n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:28:5\n    |\n-LL |     std::i8::MAX >= i;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     i8::MAX >= i;\n+   |     ^^^^^^^^^^^^\n    |\n-   = help: because `std::i8::MAX` is the maximum value for this type, this comparison is always true\n+   = help: because `i8::MAX` is the maximum value for this type, this comparison is always true\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:29:5\n    |\n-LL |     3-7 < std::i32::MIN;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     3-7 < i32::MIN;\n+   |     ^^^^^^^^^^^^^^\n    |\n-   = help: because `std::i32::MIN` is the minimum value for this type, this comparison is always false\n+   = help: because `i32::MIN` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:31:5"}, {"sha": "64ca52b010a7eb5c5a38db9a3d285d706b2b3656", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -1,16 +1,16 @@\n-const NAN_F32: f32 = std::f32::NAN;\n-const NAN_F64: f64 = std::f64::NAN;\n+const NAN_F32: f32 = f32::NAN;\n+const NAN_F64: f64 = f64::NAN;\n \n #[warn(clippy::cmp_nan)]\n #[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n-    x == std::f32::NAN;\n-    x != std::f32::NAN;\n-    x < std::f32::NAN;\n-    x > std::f32::NAN;\n-    x <= std::f32::NAN;\n-    x >= std::f32::NAN;\n+    x == f32::NAN;\n+    x != f32::NAN;\n+    x < f32::NAN;\n+    x > f32::NAN;\n+    x <= f32::NAN;\n+    x >= f32::NAN;\n     x == NAN_F32;\n     x != NAN_F32;\n     x < NAN_F32;\n@@ -19,12 +19,12 @@ fn main() {\n     x >= NAN_F32;\n \n     let y = 0f64;\n-    y == std::f64::NAN;\n-    y != std::f64::NAN;\n-    y < std::f64::NAN;\n-    y > std::f64::NAN;\n-    y <= std::f64::NAN;\n-    y >= std::f64::NAN;\n+    y == f64::NAN;\n+    y != f64::NAN;\n+    y < f64::NAN;\n+    y > f64::NAN;\n+    y <= f64::NAN;\n+    y >= f64::NAN;\n     y == NAN_F64;\n     y != NAN_F64;\n     y < NAN_F64;"}, {"sha": "867516661a539150125313a274e4817b13955e42", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -1,144 +1,144 @@\n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:8:5\n    |\n-LL |     x == std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x == f32::NAN;\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:9:5\n    |\n-LL |     x != std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x != f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:10:5\n    |\n-LL |     x < std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x < f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:11:5\n    |\n-LL |     x > std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     x > f32::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:12:5\n    |\n-LL |     x <= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x <= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:13:5\n    |\n-LL |     x >= std::f32::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     x >= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:14:5\n    |\n LL |     x == NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:15:5\n    |\n LL |     x != NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:16:5\n    |\n LL |     x < NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:17:5\n    |\n LL |     x > NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:18:5\n    |\n LL |     x <= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:19:5\n    |\n LL |     x >= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:22:5\n    |\n-LL |     y == std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y == f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:23:5\n    |\n-LL |     y != std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y != f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:24:5\n    |\n-LL |     y < std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y < f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:25:5\n    |\n-LL |     y > std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     y > f64::NAN;\n+   |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:26:5\n    |\n-LL |     y <= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y <= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:27:5\n    |\n-LL |     y >= std::f64::NAN;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     y >= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:28:5\n    |\n LL |     y == NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:29:5\n    |\n LL |     y != NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:30:5\n    |\n LL |     y < NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:31:5\n    |\n LL |     y > NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:32:5\n    |\n LL |     y <= NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:33:5\n    |\n LL |     y >= NAN_F64;"}, {"sha": "d8fbaa5414664ac7be093ed7efab22a7c939321d", "filename": "tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -16,7 +16,7 @@\n const BAA: *const i32 = 0 as *const i32;\n static mut BAR: *const i32 = BAA;\n static mut FOO: *const i32 = 0 as *const i32;\n-static mut BUH: bool = 42.0 < std::f32::NAN;\n+static mut BUH: bool = 42.0 < f32::NAN;\n \n #[allow(unused_variables, unused_mut)]\n fn main() {\n@@ -32,5 +32,5 @@ fn main() {\n     assert_eq!(*MUT_COUNT, 1);\n     */\n     // FIXME: don't lint in array length, requires `check_body`\n-    //let _ = [\"\"; (42.0 < std::f32::NAN) as usize];\n+    //let _ = [\"\"; (42.0 < f32::NAN) as usize];\n }"}, {"sha": "7d6842f5b54215e75a14fe517752e2ab8fae30d4", "filename": "tests/ui/enum_clike_unportable_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fenum_clike_unportable_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fenum_clike_unportable_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -24,8 +24,8 @@ enum NonPortableSigned {\n     Y = 0x7FFF_FFFF,\n     Z = 0xFFFF_FFFF,\n     A = 0x1_0000_0000,\n-    B = std::i32::MIN as isize,\n-    C = (std::i32::MIN as isize) - 1,\n+    B = i32::MIN as isize,\n+    C = (i32::MIN as isize) - 1,\n }\n \n enum NonPortableSignedNoHint {"}, {"sha": "71f3f5e083e0d1f67739aa5055b7b0d78a363c26", "filename": "tests/ui/enum_clike_unportable_variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -33,8 +33,8 @@ LL |     A = 0x1_0000_0000,\n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:28:5\n    |\n-LL |     C = (std::i32::MIN as isize) - 1,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     C = (i32::MIN as isize) - 1,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:34:5"}, {"sha": "c8248723bc9d68c6a0150a24e9b535df2f2cf8a3", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -45,8 +45,8 @@ impl PartialEq for X {\n \n fn main() {\n     ZERO == 0f32; //no error, comparison with zero is ok\n-    1.0f32 != ::std::f32::INFINITY; // also comparison with infinity\n-    1.0f32 != ::std::f32::NEG_INFINITY; // and negative infinity\n+    1.0f32 != f32::INFINITY; // also comparison with infinity\n+    1.0f32 != f32::NEG_INFINITY; // and negative infinity\n     ZERO == 0.0; //no error, comparison with zero is ok\n     ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n "}, {"sha": "90c25a6db37d28c9837a54e0c7f6071e936d1bff", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -5,7 +5,7 @@ LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n@@ -17,7 +17,7 @@ error: strict comparison of `f32` or `f64`\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n@@ -29,7 +29,7 @@ error: strict comparison of `f32` or `f64`\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);"}, {"sha": "a338040e19be6759fe543fd6fd29a9f7c2ee5676", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -37,8 +37,8 @@ fn main() {\n     // no errors, zero and infinity values\n     ONE != 0f32;\n     TWO == 0f32;\n-    ONE != ::std::f32::INFINITY;\n-    ONE == ::std::f32::NEG_INFINITY;\n+    ONE != f32::INFINITY;\n+    ONE == f32::NEG_INFINITY;\n \n     // no errors, but will warn clippy::float_cmp if '#![allow(float_cmp)]' above is removed\n     let w = 1.1;"}, {"sha": "2dc43cf4e5fba7af2ca679baf9353c5bec044282", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -5,7 +5,7 @@ LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n@@ -17,7 +17,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n@@ -29,7 +29,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n@@ -41,7 +41,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n@@ -53,7 +53,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n@@ -65,7 +65,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n@@ -77,7 +77,7 @@ error: strict comparison of `f32` or `f64` constant\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+note: `f32::EPSILON` and `f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;"}, {"sha": "6bbf79edfcf700c75eb9444bb79ea12ef141af17", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -78,7 +78,7 @@ fn if_same_then_else() {\n     let _ = if true { 0.0 } else { -0.0 };\n \n     // Different NaNs\n-    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n+    let _ = if true { 0.0 / 0.0 } else { f32::NAN };\n \n     if true {\n         foo();"}, {"sha": "cbec56324dcac7de1e825748ef168c13721f5505", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -87,10 +87,10 @@ fn if_same_then_else2() -> Result<&'static str, ()> {\n \n     // Same NaNs\n     let _ = if true {\n-        std::f32::NAN\n+        f32::NAN\n     } else {\n         //~ ERROR same body as `if` block\n-        std::f32::NAN\n+        f32::NAN\n     };\n \n     if true {"}, {"sha": "da2be6c8aa5acb4078b1787fca8aac2234dbcbe0", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -69,7 +69,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     };\n    | |_____^\n    |\n@@ -78,7 +78,7 @@ note: same as this\n    |\n LL |       let _ = if true {\n    |  _____________________^\n-LL | |         std::f32::NAN\n+LL | |         f32::NAN\n LL | |     } else {\n    | |_____^\n "}, {"sha": "d0e88f3c5a546612a4cb5843fc41c0f2bce24410", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -13,7 +13,7 @@ LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:5:19\n@@ -27,7 +27,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let f64_nan = 0.0 / 0.0f64;\n    |                   ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:6:25\n@@ -41,7 +41,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n    |                         ^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:7:28\n@@ -55,7 +55,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;\n    |                            ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n \n error: aborting due to 8 previous errors\n "}]}