{"sha": "11d9175a90b90bfe019b34d1a98a6edceda7a6b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDkxNzVhOTBiOTBiZmUwMTliMzRkMWE5OGE2ZWRjZWRhN2E2YjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-12-18T14:39:01Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-12-18T14:56:34Z"}, "message": "serialize: keep libserialize in sync with rustc-serialize to simplify merging", "tree": {"sha": "d6485acbc16bc0b8e18ae708cf09380ac763c1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6485acbc16bc0b8e18ae708cf09380ac763c1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d9175a90b90bfe019b34d1a98a6edceda7a6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d9175a90b90bfe019b34d1a98a6edceda7a6b2", "html_url": "https://github.com/rust-lang/rust/commit/11d9175a90b90bfe019b34d1a98a6edceda7a6b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d9175a90b90bfe019b34d1a98a6edceda7a6b2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b2885ee12b79c99ac8245edb6eebaaa8e7fef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b2885ee12b79c99ac8245edb6eebaaa8e7fef1", "html_url": "https://github.com/rust-lang/rust/commit/c0b2885ee12b79c99ac8245edb6eebaaa8e7fef1"}], "stats": {"total": 31, "additions": 3, "deletions": 28}, "files": [{"sha": "25edf81f9df653666d8be921915a861e18b1da26", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/11d9175a90b90bfe019b34d1a98a6edceda7a6b2/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d9175a90b90bfe019b34d1a98a6edceda7a6b2/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=11d9175a90b90bfe019b34d1a98a6edceda7a6b2", "patch": "@@ -2016,7 +2016,6 @@ macro_rules! read_primitive {\n \n impl ::Decoder<DecoderError> for Decoder {\n     fn read_nil(&mut self) -> DecodeResult<()> {\n-        debug!(\"read_nil\");\n         expect!(self.pop(), Null)\n     }\n \n@@ -2034,7 +2033,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_f32(&mut self) -> DecodeResult<f32> { self.read_f64().map(|x| x as f32) }\n \n     fn read_f64(&mut self) -> DecodeResult<f64> {\n-        debug!(\"read_f64\");\n         match self.pop() {\n             Json::I64(f) => Ok(f as f64),\n             Json::U64(f) => Ok(f as f64),\n@@ -2053,7 +2051,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_bool(&mut self) -> DecodeResult<bool> {\n-        debug!(\"read_bool\");\n         expect!(self.pop(), Boolean)\n     }\n \n@@ -2071,22 +2068,19 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_str(&mut self) -> DecodeResult<string::String> {\n-        debug!(\"read_str\");\n         expect!(self.pop(), String)\n     }\n \n     fn read_enum<T, F>(&mut self, name: &str, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum({})\", name);\n         f(self)\n     }\n \n     fn read_enum_variant<T, F>(&mut self, names: &[&str],\n                                mut f: F) -> DecodeResult<T>\n         where F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_variant(names={})\", names);\n         let name = match self.pop() {\n             Json::String(s) => s,\n             Json::Object(mut o) => {\n@@ -2129,14 +2123,12 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_enum_variant_arg<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_variant_arg(idx={})\", idx);\n         f(self)\n     }\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n         F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_struct_variant(names={})\", names);\n         self.read_enum_variant(names, f)\n     }\n \n@@ -2148,14 +2140,12 @@ impl ::Decoder<DecoderError> for Decoder {\n                                          -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_struct_variant_field(name={}, idx={})\", name, idx);\n         self.read_enum_variant_arg(idx, f)\n     }\n \n     fn read_struct<T, F>(&mut self, name: &str, len: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_struct(name={}, len={})\", name, len);\n         let value = try!(f(self));\n         self.pop();\n         Ok(value)\n@@ -2168,7 +2158,6 @@ impl ::Decoder<DecoderError> for Decoder {\n                                -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_struct_field(name={}, idx={})\", name, idx);\n         let mut obj = try!(expect!(self.pop(), Object));\n \n         let value = match obj.remove(&name.to_string()) {\n@@ -2193,7 +2182,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_tuple<T, F>(&mut self, tuple_len: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple()\");\n         self.read_seq(move |d, len| {\n             if len == tuple_len {\n                 f(d)\n@@ -2206,7 +2194,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_tuple_arg<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_arg(idx={})\", idx);\n         self.read_seq_elt(idx, f)\n     }\n \n@@ -2217,7 +2204,6 @@ impl ::Decoder<DecoderError> for Decoder {\n                                -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_struct(name={})\", name);\n         self.read_tuple(len, f)\n     }\n \n@@ -2227,14 +2213,12 @@ impl ::Decoder<DecoderError> for Decoder {\n                                    -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_struct_arg(idx={})\", idx);\n         self.read_tuple_arg(idx, f)\n     }\n \n     fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n         F: FnMut(&mut Decoder, bool) -> DecodeResult<T>,\n     {\n-        debug!(\"read_option()\");\n         match self.pop() {\n             Json::Null => f(self, false),\n             value => { self.stack.push(value); f(self, true) }\n@@ -2244,7 +2228,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_seq<T, F>(&mut self, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_seq()\");\n         let array = try!(expect!(self.pop(), Array));\n         let len = array.len();\n         for v in array.into_iter().rev() {\n@@ -2256,14 +2239,12 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_seq_elt<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_seq_elt(idx={})\", idx);\n         f(self)\n     }\n \n     fn read_map<T, F>(&mut self, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map()\");\n         let obj = try!(expect!(self.pop(), Object));\n         let len = obj.len();\n         for (key, value) in obj.into_iter() {\n@@ -2276,14 +2257,12 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_map_elt_key<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n        F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map_elt_key(idx={})\", idx);\n         f(self)\n     }\n \n     fn read_map_elt_val<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n        F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map_elt_val(idx={})\", idx);\n         f(self)\n     }\n \n@@ -2445,9 +2424,7 @@ mod tests {\n     use super::ParserError::*;\n     use super::DecoderError::*;\n     use super::JsonEvent::*;\n-    use super::ParserState::*;\n     use super::StackElement::*;\n-    use super::InternalStackElement::*;\n     use super::{PrettyEncoder, Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Encoder, Decoder};\n     use std::{i64, u64, f32, f64, io};\n@@ -2682,8 +2659,6 @@ mod tests {\n     }\n \n     fn with_str_writer<F>(f: F) -> string::String where F: FnOnce(&mut io::Writer){\n-        use std::str;\n-\n         let mut m = Vec::new();\n         f(&mut m as &mut io::Writer);\n         string::String::from_utf8(m).unwrap()\n@@ -2760,9 +2735,9 @@ mod tests {\n     fn test_write_char() {\n         check_encoder_for_simple!('a', \"\\\"a\\\"\");\n         check_encoder_for_simple!('\\t', \"\\\"\\\\t\\\"\");\n-        check_encoder_for_simple!('\\u00a0', \"\\\"\\u00a0\\\"\");\n-        check_encoder_for_simple!('\\uabcd', \"\\\"\\uabcd\\\"\");\n-        check_encoder_for_simple!('\\U0010ffff', \"\\\"\\U0010ffff\\\"\");\n+        check_encoder_for_simple!('\\u{00a0}', \"\\\"\\u{00a0}\\\"\");\n+        check_encoder_for_simple!('\\u{abcd}', \"\\\"\\u{abcd}\\\"\");\n+        check_encoder_for_simple!('\\u{10ffff}', \"\\\"\\u{10ffff}\\\"\");\n     }\n \n     #[test]"}]}