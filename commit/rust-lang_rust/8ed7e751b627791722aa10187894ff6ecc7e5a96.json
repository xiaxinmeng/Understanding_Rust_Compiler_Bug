{"sha": "8ed7e751b627791722aa10187894ff6ecc7e5a96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDdlNzUxYjYyNzc5MTcyMmFhMTAxODc4OTRmZjZlY2M3ZTVhOTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T13:54:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T15:06:46Z"}, "message": "Ensure that semantic tokens are single-line", "tree": {"sha": "f158029423bcadf42d3d7ff705c15a11ff3b6973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f158029423bcadf42d3d7ff705c15a11ff3b6973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed7e751b627791722aa10187894ff6ecc7e5a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed7e751b627791722aa10187894ff6ecc7e5a96", "html_url": "https://github.com/rust-lang/rust/commit/8ed7e751b627791722aa10187894ff6ecc7e5a96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed7e751b627791722aa10187894ff6ecc7e5a96/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f0d6cba3b2c7b0a2ac384ab0cb73983afd2a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f0d6cba3b2c7b0a2ac384ab0cb73983afd2a5e", "html_url": "https://github.com/rust-lang/rust/commit/57f0d6cba3b2c7b0a2ac384ab0cb73983afd2a5e"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "b9db5c276e97abab97d9b705331222f3ffe8bf8d", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8ed7e751b627791722aa10187894ff6ecc7e5a96/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed7e751b627791722aa10187894ff6ecc7e5a96/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=8ed7e751b627791722aa10187894ff6ecc7e5a96", "patch": "@@ -1,7 +1,8 @@\n //! `LineIndex` maps flat `TextUnit` offsets into `(Line, Column)`\n //! representation.\n+use std::iter;\n \n-use ra_syntax::TextUnit;\n+use ra_syntax::{TextRange, TextUnit};\n use rustc_hash::FxHashMap;\n use superslice::Ext;\n \n@@ -87,6 +88,19 @@ impl LineIndex {\n         self.newlines[line_col.line as usize] + col\n     }\n \n+    pub fn lines(&self, range: TextRange) -> impl Iterator<Item = TextRange> + '_ {\n+        let lo = self.newlines.lower_bound(&range.start());\n+        let hi = self.newlines.upper_bound(&range.end());\n+        let all = iter::once(range.start())\n+            .chain(self.newlines[lo..hi].iter().copied())\n+            .chain(iter::once(range.end()));\n+\n+        all.clone()\n+            .zip(all.skip(1))\n+            .map(|(lo, hi)| TextRange::from_to(lo, hi))\n+            .filter(|it| !it.is_empty())\n+    }\n+\n     fn utf8_to_utf16_col(&self, line: u32, mut col: TextUnit) -> usize {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             let mut correction = TextUnit::from_usize(0);\n@@ -221,4 +235,32 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n \n         assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextUnit::from_usize(15));\n     }\n+\n+    #[test]\n+    fn test_splitlines() {\n+        fn r(lo: u32, hi: u32) -> TextRange {\n+            TextRange::from_to(lo.into(), hi.into())\n+        }\n+\n+        let text = \"a\\nbb\\nccc\\n\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 9)).collect::<Vec<_>>();\n+        let expected = vec![r(0, 2), r(2, 5), r(5, 9)];\n+        assert_eq!(actual, expected);\n+\n+        let text = \"\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 0)).collect::<Vec<_>>();\n+        let expected = vec![];\n+        assert_eq!(actual, expected);\n+\n+        let text = \"\\n\";\n+        let line_index = LineIndex::new(text);\n+\n+        let actual = line_index.lines(r(0, 1)).collect::<Vec<_>>();\n+        let expected = vec![r(0, 1)];\n+        assert_eq!(actual, expected)\n+    }\n }"}, {"sha": "6f517760f71a7df5751c29ad3545721b754307b8", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ed7e751b627791722aa10187894ff6ecc7e5a96/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed7e751b627791722aa10187894ff6ecc7e5a96/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8ed7e751b627791722aa10187894ff6ecc7e5a96", "patch": "@@ -1078,13 +1078,20 @@ pub fn handle_semantic_tokens(\n     let _p = profile(\"handle_semantic_tokens\");\n \n     let file_id = params.text_document.try_conv_with(&world)?;\n+    let text = world.analysis().file_text(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n     let mut builder = SemanticTokensBuilder::default();\n \n     for highlight_range in world.analysis().highlight(file_id)?.into_iter() {\n-        let (token_type, token_modifiers) = highlight_range.highlight.conv();\n-        builder.push(highlight_range.range.conv_with(&line_index), token_type, token_modifiers);\n+        let (token_index, modifier_bitset) = highlight_range.highlight.conv();\n+        for mut range in line_index.lines(highlight_range.range) {\n+            if text[range].ends_with('\\n') {\n+                range = TextRange::from_to(range.start(), range.end() - TextUnit::of_char('\\n'));\n+            }\n+            let range = range.conv_with(&line_index);\n+            builder.push(range, token_index, modifier_bitset);\n+        }\n     }\n \n     let tokens = SemanticTokens { data: builder.build(), ..Default::default() };"}]}