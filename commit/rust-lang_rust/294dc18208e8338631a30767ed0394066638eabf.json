{"sha": "294dc18208e8338631a30767ed0394066638eabf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NGRjMTgyMDhlODMzODYzMWEzMDc2N2VkMDM5NDA2NjYzOGVhYmY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-23T22:52:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-25T22:51:55Z"}, "message": "Make move_path_for iterate instead of recurse", "tree": {"sha": "fc693a7fbe5646a0c2a7386285835887b73bc54d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc693a7fbe5646a0c2a7386285835887b73bc54d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294dc18208e8338631a30767ed0394066638eabf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294dc18208e8338631a30767ed0394066638eabf", "html_url": "https://github.com/rust-lang/rust/commit/294dc18208e8338631a30767ed0394066638eabf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294dc18208e8338631a30767ed0394066638eabf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0700d062e242940cf9e5644211f2be38e3d88eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0700d062e242940cf9e5644211f2be38e3d88eb", "html_url": "https://github.com/rust-lang/rust/commit/a0700d062e242940cf9e5644211f2be38e3d88eb"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "ab0a2d87302c8fab064cecb9a3fde0f2f1dda68d", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/294dc18208e8338631a30767ed0394066638eabf/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294dc18208e8338631a30767ed0394066638eabf/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=294dc18208e8338631a30767ed0394066638eabf", "patch": "@@ -95,21 +95,25 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                      -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n         debug!(\"lookup({:?})\", place);\n-        match *place {\n-            Place::Base(PlaceBase::Local(local)) => Ok(self.builder.data.rev_lookup.locals[local]),\n-            Place::Base(PlaceBase::Static(..)) => {\n-                Err(MoveError::cannot_move_out_of(self.loc, Static))\n-            }\n-            Place::Projection(ref proj) => {\n-                let base = self.move_path_for(&proj.base)?;\n+        place.iterate(|place_base, place_projection| {\n+            let mut base = match place_base {\n+                PlaceBase::Local(local) => self.builder.data.rev_lookup.locals[*local],\n+                PlaceBase::Static(..) => {\n+                    return Err(MoveError::cannot_move_out_of(self.loc, Static));\n+                }\n+            };\n+\n+            for proj in place_projection {\n                 let mir = self.builder.mir;\n                 let tcx = self.builder.tcx;\n                 let place_ty = proj.base.ty(mir, tcx).ty;\n                 match place_ty.sty {\n                     ty::Ref(..) | ty::RawPtr(..) =>\n                         return Err(MoveError::cannot_move_out_of(\n                             self.loc,\n-                            BorrowedContent { target_place: place.clone() })),\n+                            BorrowedContent {\n+                                target_place: Place::Projection(Box::new(proj.clone())),\n+                            })),\n                     ty::Adt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n                         return Err(MoveError::cannot_move_out_of(self.loc,\n                                                                  InteriorOfTypeWithDestructor {\n@@ -140,22 +144,31 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                     },\n                     _ => {}\n                 };\n-                match self.builder.data.rev_lookup.projections.entry((base, proj.elem.lift())) {\n-                    Entry::Occupied(ent) => Ok(*ent.get()),\n+\n+                base = match self\n+                    .builder\n+                    .data\n+                    .rev_lookup\n+                    .projections\n+                    .entry((base, proj.elem.lift()))\n+                {\n+                    Entry::Occupied(ent) => *ent.get(),\n                     Entry::Vacant(ent) => {\n                         let path = MoveDataBuilder::new_move_path(\n                             &mut self.builder.data.move_paths,\n                             &mut self.builder.data.path_map,\n                             &mut self.builder.data.init_path_map,\n                             Some(base),\n-                            place.clone()\n+                            Place::Projection(Box::new(proj.clone())),\n                         );\n                         ent.insert(path);\n-                        Ok(path)\n+                        path\n                     }\n-                }\n+                };\n             }\n-        }\n+\n+            Ok(base)\n+        })\n     }\n \n     fn create_move_path(&mut self, place: &Place<'tcx>) {"}]}