{"sha": "931881070a00e869ff52ddfbe243800d256261e8", "node_id": "C_kwDOAAsO6NoAKDkzMTg4MTA3MGEwMGU4NjlmZjUyZGRmYmUyNDM4MDBkMjU2MjYxZTg", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-11-08T14:15:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-08T14:15:23Z"}, "message": "Rollup merge of #90652 - matthiaskrgr:unnnec_filter_map, r=jyn514\n\nuse filter(|x| matches!(..)) instead of filter_map(|x| match x ... => Some(xy))", "tree": {"sha": "048782b636116b7d9618139c7055c3e6cd87c98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048782b636116b7d9618139c7055c3e6cd87c98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931881070a00e869ff52ddfbe243800d256261e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhiTD7CRBK7hj4Ov3rIwAAXpEIAGkL+0rIsJPIKtv780ukS/AW\n9uipmbwjnQ2hn5ZRpT2e2Oe2rxc+mu7+Xfvney+KhWgnzEjw3RhlkXZDGNxmZocm\n/ZjWOcn1SOyT0aOflLmTZ6oXUl2PKvYQMW+EFkudUzVes0wwaRdvq7yn7Wh2MKu4\n/IWdKr9Oe0iewWs/Sx1q93+xelv5BHMRHuIYudztLf40SCMzx3I1kmb7YNG3v19z\nU6rqEALjiWbzVKNownpLXrMri9wda9IJGlHHjkRy8PTCDibrMxcOtKoP/8QAXUWK\nmOXUE4WYslad20HITe+UXvcw7vT7s4I2YXGV2SS6qQ5Wpv43VVY8TyZw+e0rhiY=\n=Q/6O\n-----END PGP SIGNATURE-----\n", "payload": "tree 048782b636116b7d9618139c7055c3e6cd87c98c\nparent f07f80036425d697fe8a015b47704c022980a15b\nparent ed7e438f87a6b2b036db06608d23f23b50d54d6c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1636380923 +0100\ncommitter GitHub <noreply@github.com> 1636380923 +0100\n\nRollup merge of #90652 - matthiaskrgr:unnnec_filter_map, r=jyn514\n\nuse filter(|x| matches!(..)) instead of filter_map(|x| match x ... => Some(xy))\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931881070a00e869ff52ddfbe243800d256261e8", "html_url": "https://github.com/rust-lang/rust/commit/931881070a00e869ff52ddfbe243800d256261e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931881070a00e869ff52ddfbe243800d256261e8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07f80036425d697fe8a015b47704c022980a15b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07f80036425d697fe8a015b47704c022980a15b", "html_url": "https://github.com/rust-lang/rust/commit/f07f80036425d697fe8a015b47704c022980a15b"}, {"sha": "ed7e438f87a6b2b036db06608d23f23b50d54d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7e438f87a6b2b036db06608d23f23b50d54d6c", "html_url": "https://github.com/rust-lang/rust/commit/ed7e438f87a6b2b036db06608d23f23b50d54d6c"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "5def43c2423443b320f09743a5c1eafd4dca6d91", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/931881070a00e869ff52ddfbe243800d256261e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931881070a00e869ff52ddfbe243800d256261e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=931881070a00e869ff52ddfbe243800d256261e8", "patch": "@@ -887,10 +887,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) = c\n                     .generic_params\n                     .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => Some(param),\n-                        _ => None,\n-                    })\n+                    .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n                         let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n@@ -1370,9 +1367,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) =\n                             bound_generic_params\n                                 .iter()\n-                                .filter_map(|param| match param.kind {\n-                                    GenericParamKind::Lifetime { .. } => Some(param),\n-                                    _ => None,\n+                                .filter(|param| {\n+                                    matches!(param.kind, GenericParamKind::Lifetime { .. })\n                                 })\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n@@ -1469,10 +1465,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         let binders_iter = trait_ref\n             .bound_generic_params\n             .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => Some(param),\n-                _ => None,\n-            })\n+            .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n                 let pair = Region::late(\n@@ -2235,19 +2228,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let binders: Vec<_> = generics\n             .params\n             .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. }\n-                    if self.map.late_bound.contains(&param.hir_id) =>\n-                {\n-                    Some(param)\n-                }\n-                _ => None,\n+            .filter(|param| {\n+                matches!(param.kind, GenericParamKind::Lifetime { .. })\n+                    && self.map.late_bound.contains(&param.hir_id)\n             })\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n                 let pair = Region::late(late_bound_idx as u32, &self.tcx.hir(), param);\n-                let r = late_region_as_bound_region(self.tcx, &pair.1);\n-                r\n+                late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();\n         self.map.late_bound_vars.insert(hir_id, binders);"}, {"sha": "d818771f7800a29c58e546cba6df16c33049eaea", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/931881070a00e869ff52ddfbe243800d256261e8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931881070a00e869ff52ddfbe243800d256261e8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=931881070a00e869ff52ddfbe243800d256261e8", "patch": "@@ -180,14 +180,14 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n                 let coerced_fields = fields\n                     .iter()\n-                    .filter_map(|field| {\n+                    .filter(|field| {\n                         let ty_a = field.ty(tcx, substs_a);\n                         let ty_b = field.ty(tcx, substs_b);\n \n                         if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n                             if layout.is_zst() && layout.align.abi.bytes() == 1 {\n                                 // ignore ZST fields with alignment of 1 byte\n-                                return None;\n+                                return false;\n                             }\n                         }\n \n@@ -204,11 +204,11 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                                 ))\n                                 .emit();\n \n-                                return None;\n+                                return false;\n                             }\n                         }\n \n-                        Some(field)\n+                        return true;\n                     })\n                     .collect::<Vec<_>>();\n "}]}