{"sha": "a03dfb9eac984b496725cca55548983b5cf7e986", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwM2RmYjllYWM5ODRiNDk2NzI1Y2NhNTU1NDg5ODNiNWNmN2U5ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T09:22:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T09:22:04Z"}, "message": "Auto merge of #7361 - xFrednet:5394-expand-setup-command, r=flip1995\n\nAdded `cargo dev setup git-hook` and updated `cargo dev setup intellij` including a `remove` command\n\nThis PR enables our dev tool to install a git hook that formats the code before each commit and also runs `update_lints` to make sure that everything is registered correctly. The script is located at `util/etc/pre-commit.sh`. I found it reasonable to locate it in the `util` folder and decided to add a `etc` in correlation to the main rust repo and to bring a bit of structure into it.\n\n* The hook can be installed via: `cargo dev setup git-hook`\n* And removed via: `cargo dev remove git-hook`\n\ncc: #5394\n\nThe refactoring of `src/ide_setup.rs` to `src/setup/intellij.rs` is an extra commit to simplify the review.\n\n---\n\nChanges:\n* Added `cargo dev setup git-hook` for formatting before every commit\n* Added `cargo dev remove git-hook` to remove the hook again\n* Added `cargo dev remove intellij` to remove rustc source path dependencies\n* Changed `cargo dev ide_setup` to `cargo dev setup intellij`\n\nchangelog: none\n\nThis is only an internal change and therefore not worth an entry in the general change log.\n\n---\n\nTested on:\n* [x] Linux (by `@xFrednet)`\n* [ ] Windows (All used commands run inside the git bash, so it's very likely to work as well `@xFrednet)`\n* [ ] macOS", "tree": {"sha": "5674719c69bbd8d38d52efd4076b17701f862cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5674719c69bbd8d38d52efd4076b17701f862cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03dfb9eac984b496725cca55548983b5cf7e986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03dfb9eac984b496725cca55548983b5cf7e986", "html_url": "https://github.com/rust-lang/rust/commit/a03dfb9eac984b496725cca55548983b5cf7e986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03dfb9eac984b496725cca55548983b5cf7e986/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b286b38a295d6d68361f463cdeaf7536b051ddb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b286b38a295d6d68361f463cdeaf7536b051ddb2", "html_url": "https://github.com/rust-lang/rust/commit/b286b38a295d6d68361f463cdeaf7536b051ddb2"}, {"sha": "8e969cdcefefe6792537dac11855bc5f91904f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e969cdcefefe6792537dac11855bc5f91904f0b", "html_url": "https://github.com/rust-lang/rust/commit/8e969cdcefefe6792537dac11855bc5f91904f0b"}], "stats": {"total": 504, "additions": 384, "deletions": 120}, "files": [{"sha": "b202fc4f281cbfe949778163ecf5a80cd317eb67", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -115,7 +115,7 @@ To work around this, you need to have a copy of the [rustc-repo][rustc_repo] ava\n `git clone https://github.com/rust-lang/rust/`.\n Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\n which `IntelliJ Rust` will be able to understand.\n-Run `cargo dev ide_setup --repo-path <repo-path>` where `<repo-path>` is a path to the rustc repo\n+Run `cargo dev setup intellij --repo-path <repo-path>` where `<repo-path>` is a path to the rustc repo\n you just cloned.\n The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n Clippys `Cargo.toml`s and should allow `IntelliJ Rust` to understand most of the types that Clippy uses."}, {"sha": "c81eb40d52f3551ffc698db36acf7767b5c3874e", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -86,7 +86,7 @@ pub fn run(check: bool, verbose: bool) {\n             },\n             CliError::RaSetupActive => {\n                 eprintln!(\n-                    \"error: a local rustc repo is enabled as path dependency via `cargo dev ide_setup`.\n+                    \"error: a local rustc repo is enabled as path dependency via `cargo dev setup intellij`.\n Not formatting because that would format the local repo as well!\n Please revert the changes to Cargo.tomls first.\"\n                 );"}, {"sha": "defb1133e44e60f285bf642a48abd5c22ffe8cc1", "filename": "clippy_dev/src/ide_setup.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b286b38a295d6d68361f463cdeaf7536b051ddb2/clippy_dev%2Fsrc%2Fide_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286b38a295d6d68361f463cdeaf7536b051ddb2/clippy_dev%2Fsrc%2Fide_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fide_setup.rs?ref=b286b38a295d6d68361f463cdeaf7536b051ddb2", "patch": "@@ -1,103 +0,0 @@\n-use std::fs;\n-use std::fs::File;\n-use std::io::prelude::*;\n-use std::path::{Path, PathBuf};\n-\n-// This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n-// the respective rustc subcrates instead of using extern crate xyz.\n-// This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n-// code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n-\n-/// # Panics\n-///\n-/// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n-pub fn run(rustc_path: Option<&str>) {\n-    // we can unwrap here because the arg is required by clap\n-    let rustc_path = PathBuf::from(rustc_path.unwrap())\n-        .canonicalize()\n-        .expect(\"failed to get the absolute repo path\");\n-    assert!(rustc_path.is_dir(), \"path is not a directory\");\n-    let rustc_source_basedir = rustc_path.join(\"compiler\");\n-    assert!(\n-        rustc_source_basedir.is_dir(),\n-        \"are you sure the path leads to a rustc repo?\"\n-    );\n-\n-    let clippy_root_manifest = fs::read_to_string(\"Cargo.toml\").expect(\"failed to read ./Cargo.toml\");\n-    let clippy_root_lib_rs = fs::read_to_string(\"src/driver.rs\").expect(\"failed to read ./src/driver.rs\");\n-    inject_deps_into_manifest(\n-        &rustc_source_basedir,\n-        \"Cargo.toml\",\n-        &clippy_root_manifest,\n-        &clippy_root_lib_rs,\n-    )\n-    .expect(\"Failed to inject deps into ./Cargo.toml\");\n-\n-    let clippy_lints_manifest =\n-        fs::read_to_string(\"clippy_lints/Cargo.toml\").expect(\"failed to read ./clippy_lints/Cargo.toml\");\n-    let clippy_lints_lib_rs =\n-        fs::read_to_string(\"clippy_lints/src/lib.rs\").expect(\"failed to read ./clippy_lints/src/lib.rs\");\n-    inject_deps_into_manifest(\n-        &rustc_source_basedir,\n-        \"clippy_lints/Cargo.toml\",\n-        &clippy_lints_manifest,\n-        &clippy_lints_lib_rs,\n-    )\n-    .expect(\"Failed to inject deps into ./clippy_lints/Cargo.toml\");\n-}\n-\n-fn inject_deps_into_manifest(\n-    rustc_source_dir: &Path,\n-    manifest_path: &str,\n-    cargo_toml: &str,\n-    lib_rs: &str,\n-) -> std::io::Result<()> {\n-    // do not inject deps if we have aleady done so\n-    if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n-        eprintln!(\n-            \"cargo dev ide_setup: warning: deps already found inside {}, doing nothing.\",\n-            manifest_path\n-        );\n-        return Ok(());\n-    }\n-\n-    let extern_crates = lib_rs\n-        .lines()\n-        // get the deps\n-        .filter(|line| line.starts_with(\"extern crate\"))\n-        // we have something like \"extern crate foo;\", we only care about the \"foo\"\n-        //              \u2193          \u2193\n-        // extern crate rustc_middle;\n-        .map(|s| &s[13..(s.len() - 1)]);\n-\n-    let new_deps = extern_crates.map(|dep| {\n-        // format the dependencies that are going to be put inside the Cargo.toml\n-        format!(\n-            \"{dep} = {{ path = \\\"{source_path}/{dep}\\\" }}\\n\",\n-            dep = dep,\n-            source_path = rustc_source_dir.display()\n-        )\n-    });\n-\n-    // format a new [dependencies]-block with the new deps we need to inject\n-    let mut all_deps = String::from(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\\n\");\n-    new_deps.for_each(|dep_line| {\n-        all_deps.push_str(&dep_line);\n-    });\n-    all_deps.push_str(\"\\n[dependencies]\\n\");\n-\n-    // replace \"[dependencies]\" with\n-    // [dependencies]\n-    // dep1 = { path = ... }\n-    // dep2 = { path = ... }\n-    // etc\n-    let new_manifest = cargo_toml.replacen(\"[dependencies]\\n\", &all_deps, 1);\n-\n-    // println!(\"{}\", new_manifest);\n-    let mut file = File::create(manifest_path)?;\n-    file.write_all(new_manifest.as_bytes())?;\n-\n-    println!(\"Dependency paths injected: {}\", manifest_path);\n-\n-    Ok(())\n-}"}, {"sha": "72bdaf8d59282f89f39f63142a9191325f4c224f", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -14,9 +14,9 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n-pub mod ide_setup;\n pub mod new_lint;\n pub mod serve;\n+pub mod setup;\n pub mod stderr_length_check;\n pub mod update_lints;\n "}, {"sha": "f5bd08657ea8407a49d6c4206ec798e838c9de58", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -2,8 +2,8 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{App, Arg, ArgMatches, SubCommand};\n-use clippy_dev::{bless, fmt, ide_setup, new_lint, serve, stderr_length_check, update_lints};\n+use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n+use clippy_dev::{bless, fmt, new_lint, serve, setup, stderr_length_check, update_lints};\n fn main() {\n     let matches = get_clap_config();\n \n@@ -36,7 +36,20 @@ fn main() {\n         (\"limit_stderr_length\", _) => {\n             stderr_length_check::check();\n         },\n-        (\"ide_setup\", Some(matches)) => ide_setup::run(matches.value_of(\"rustc-repo-path\")),\n+        (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n+            (\"intellij\", Some(matches)) => setup::intellij::setup_rustc_src(\n+                matches\n+                    .value_of(\"rustc-repo-path\")\n+                    .expect(\"this field is mandatory and therefore always valid\"),\n+            ),\n+            (\"git-hook\", Some(matches)) => setup::git_hook::install_hook(matches.is_present(\"force-override\")),\n+            _ => {},\n+        },\n+        (\"remove\", Some(sub_command)) => match sub_command.subcommand() {\n+            (\"git-hook\", Some(_)) => setup::git_hook::remove_hook(),\n+            (\"intellij\", Some(_)) => setup::intellij::remove_rustc_src(),\n+            _ => {},\n+        },\n         (\"serve\", Some(matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n@@ -48,6 +61,7 @@ fn main() {\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n     App::new(\"Clippy developer tooling\")\n+        .setting(AppSettings::ArgRequiredElseHelp)\n         .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n@@ -140,16 +154,42 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"ide_setup\")\n-                .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n-                .arg(\n-                    Arg::with_name(\"rustc-repo-path\")\n-                        .long(\"repo-path\")\n-                        .short(\"r\")\n-                        .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n-                        .takes_value(true)\n-                        .value_name(\"path\")\n-                        .required(true),\n+            SubCommand::with_name(\"setup\")\n+                .about(\"Support for setting up your personal development environment\")\n+                .setting(AppSettings::ArgRequiredElseHelp)\n+                .subcommand(\n+                    SubCommand::with_name(\"intellij\")\n+                        .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n+                        .arg(\n+                            Arg::with_name(\"rustc-repo-path\")\n+                                .long(\"repo-path\")\n+                                .short(\"r\")\n+                                .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n+                                .takes_value(true)\n+                                .value_name(\"path\")\n+                                .required(true),\n+                        ),\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"git-hook\")\n+                        .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n+                        .arg(\n+                            Arg::with_name(\"force-override\")\n+                                .long(\"force-override\")\n+                                .short(\"f\")\n+                                .help(\"Forces the override of an existing git pre-commit hook\")\n+                                .required(false),\n+                        ),\n+                ),\n+        )\n+        .subcommand(\n+            SubCommand::with_name(\"remove\")\n+                .about(\"Support for undoing changes done by the setup command\")\n+                .setting(AppSettings::ArgRequiredElseHelp)\n+                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n+                .subcommand(\n+                    SubCommand::with_name(\"intellij\")\n+                        .about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n                 ),\n         )\n         .subcommand("}, {"sha": "f27b69a195b4a2de620f296f5eaeace5f57b53cb", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -0,0 +1,79 @@\n+use std::fs;\n+use std::path::Path;\n+\n+/// Rusts setup uses `git rev-parse --git-common-dir` to get the root directory of the repo.\n+/// I've decided against this for the sake of simplicity and to make sure that it doesn't install\n+/// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n+/// for formatting and should therefor only be used in a normal clone of clippy\n+const REPO_GIT_DIR: &str = \".git\";\n+const HOOK_SOURCE_FILE: &str = \"util/etc/pre-commit.sh\";\n+const HOOK_TARGET_FILE: &str = \".git/hooks/pre-commit\";\n+\n+pub fn install_hook(force_override: bool) {\n+    if !check_precondition(force_override) {\n+        return;\n+    }\n+\n+    // So a little bit of a funny story. Git on unix requires the pre-commit file\n+    // to have the `execute` permission to be set. The Rust functions for modifying\n+    // these flags doesn't seem to work when executed with normal user permissions.\n+    //\n+    // However, there is a little hack that is also being used by Rust itself in their\n+    // setup script. Git saves the `execute` flag when syncing files. This means\n+    // that we can check in a file with execution permissions and the sync it to create\n+    // a file with the flag set. We then copy this file here. The copy function will also\n+    // include the `execute` permission.\n+    match fs::copy(HOOK_SOURCE_FILE, HOOK_TARGET_FILE) {\n+        Ok(_) => {\n+            println!(\"info: the hook can be removed with `cargo dev remove git-hook`\");\n+            println!(\"git hook successfully installed\");\n+        },\n+        Err(err) => eprintln!(\n+            \"error: unable to copy `{}` to `{}` ({})\",\n+            HOOK_SOURCE_FILE, HOOK_TARGET_FILE, err\n+        ),\n+    }\n+}\n+\n+fn check_precondition(force_override: bool) -> bool {\n+    // Make sure that we can find the git repository\n+    let git_path = Path::new(REPO_GIT_DIR);\n+    if !git_path.exists() || !git_path.is_dir() {\n+        eprintln!(\"error: clippy_dev was unable to find the `.git` directory\");\n+        return false;\n+    }\n+\n+    // Make sure that we don't override an existing hook by accident\n+    let path = Path::new(HOOK_TARGET_FILE);\n+    if path.exists() {\n+        if force_override {\n+            return delete_git_hook_file(path);\n+        }\n+\n+        eprintln!(\"error: there is already a pre-commit hook installed\");\n+        println!(\"info: use the `--force-override` flag to override the existing hook\");\n+        return false;\n+    }\n+\n+    true\n+}\n+\n+pub fn remove_hook() {\n+    let path = Path::new(HOOK_TARGET_FILE);\n+    if path.exists() {\n+        if delete_git_hook_file(path) {\n+            println!(\"git hook successfully removed\");\n+        }\n+    } else {\n+        println!(\"no pre-commit hook was found\");\n+    }\n+}\n+\n+fn delete_git_hook_file(path: &Path) -> bool {\n+    if let Err(err) = fs::remove_file(path) {\n+        eprintln!(\"error: unable to delete existing pre-commit git hook ({})\", err);\n+        false\n+    } else {\n+        true\n+    }\n+}"}, {"sha": "bf741e6d1217f98b25b1168ba8ede7df757440ff", "filename": "clippy_dev/src/setup/intellij.rs", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -0,0 +1,223 @@\n+use std::fs;\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::path::{Path, PathBuf};\n+\n+// This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n+// the respective rustc subcrates instead of using extern crate xyz.\n+// This allows IntelliJ to analyze rustc internals and show proper information inside Clippy\n+// code. See https://github.com/rust-lang/rust-clippy/issues/5514 for details\n+\n+const RUSTC_PATH_SECTION: &str = \"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\";\n+const DEPENDENCIES_SECTION: &str = \"[dependencies]\";\n+\n+const CLIPPY_PROJECTS: &[ClippyProjectInfo] = &[\n+    ClippyProjectInfo::new(\"root\", \"Cargo.toml\", \"src/driver.rs\"),\n+    ClippyProjectInfo::new(\"clippy_lints\", \"clippy_lints/Cargo.toml\", \"clippy_lints/src/lib.rs\"),\n+    ClippyProjectInfo::new(\"clippy_utils\", \"clippy_utils/Cargo.toml\", \"clippy_utils/src/lib.rs\"),\n+];\n+\n+/// Used to store clippy project information to later inject the dependency into.\n+struct ClippyProjectInfo {\n+    /// Only used to display information to the user\n+    name: &'static str,\n+    cargo_file: &'static str,\n+    lib_rs_file: &'static str,\n+}\n+\n+impl ClippyProjectInfo {\n+    const fn new(name: &'static str, cargo_file: &'static str, lib_rs_file: &'static str) -> Self {\n+        Self {\n+            name,\n+            cargo_file,\n+            lib_rs_file,\n+        }\n+    }\n+}\n+\n+pub fn setup_rustc_src(rustc_path: &str) {\n+    let rustc_source_dir = match check_and_get_rustc_dir(rustc_path) {\n+        Ok(path) => path,\n+        Err(_) => return,\n+    };\n+\n+    for project in CLIPPY_PROJECTS {\n+        if inject_deps_into_project(&rustc_source_dir, project).is_err() {\n+            return;\n+        }\n+    }\n+\n+    println!(\"info: the source paths can be removed again with `cargo dev remove intellij`\");\n+}\n+\n+fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n+    let mut path = PathBuf::from(rustc_path);\n+\n+    if path.is_relative() {\n+        match path.canonicalize() {\n+            Ok(absolute_path) => {\n+                println!(\"info: the rustc path was resolved to: `{}`\", absolute_path.display());\n+                path = absolute_path;\n+            },\n+            Err(err) => {\n+                eprintln!(\"error: unable to get the absolute path of rustc ({})\", err);\n+                return Err(());\n+            },\n+        };\n+    }\n+\n+    let path = path.join(\"compiler\");\n+    println!(\"info: looking for compiler sources at: {}\", path.display());\n+\n+    if !path.exists() {\n+        eprintln!(\"error: the given path does not exist\");\n+        return Err(());\n+    }\n+\n+    if !path.is_dir() {\n+        eprintln!(\"error: the given path is not a directory\");\n+        return Err(());\n+    }\n+\n+    Ok(path)\n+}\n+\n+fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo) -> Result<(), ()> {\n+    let cargo_content = read_project_file(project.cargo_file)?;\n+    let lib_content = read_project_file(project.lib_rs_file)?;\n+\n+    if inject_deps_into_manifest(rustc_source_dir, project.cargo_file, &cargo_content, &lib_content).is_err() {\n+        eprintln!(\n+            \"error: unable to inject dependencies into {} with the Cargo file {}\",\n+            project.name, project.cargo_file\n+        );\n+        Err(())\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+/// `clippy_dev` expects to be executed in the root directory of Clippy. This function\n+/// loads the given file or returns an error. Having it in this extra function ensures\n+/// that the error message looks nice.\n+fn read_project_file(file_path: &str) -> Result<String, ()> {\n+    let path = Path::new(file_path);\n+    if !path.exists() {\n+        eprintln!(\"error: unable to find the file `{}`\", file_path);\n+        return Err(());\n+    }\n+\n+    match fs::read_to_string(path) {\n+        Ok(content) => Ok(content),\n+        Err(err) => {\n+            eprintln!(\"error: the file `{}` could not be read ({})\", file_path, err);\n+            Err(())\n+        },\n+    }\n+}\n+\n+fn inject_deps_into_manifest(\n+    rustc_source_dir: &Path,\n+    manifest_path: &str,\n+    cargo_toml: &str,\n+    lib_rs: &str,\n+) -> std::io::Result<()> {\n+    // do not inject deps if we have already done so\n+    if cargo_toml.contains(RUSTC_PATH_SECTION) {\n+        eprintln!(\n+            \"warn: dependencies are already setup inside {}, skipping file\",\n+            manifest_path\n+        );\n+        return Ok(());\n+    }\n+\n+    let extern_crates = lib_rs\n+        .lines()\n+        // only take dependencies starting with `rustc_`\n+        .filter(|line| line.starts_with(\"extern crate rustc_\"))\n+        // we have something like \"extern crate foo;\", we only care about the \"foo\"\n+        // extern crate rustc_middle;\n+        //              ^^^^^^^^^^^^\n+        .map(|s| &s[13..(s.len() - 1)]);\n+\n+    let new_deps = extern_crates.map(|dep| {\n+        // format the dependencies that are going to be put inside the Cargo.toml\n+        format!(\n+            \"{dep} = {{ path = \\\"{source_path}/{dep}\\\" }}\\n\",\n+            dep = dep,\n+            source_path = rustc_source_dir.display()\n+        )\n+    });\n+\n+    // format a new [dependencies]-block with the new deps we need to inject\n+    let mut all_deps = String::from(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\\n\");\n+    new_deps.for_each(|dep_line| {\n+        all_deps.push_str(&dep_line);\n+    });\n+    all_deps.push_str(\"\\n[dependencies]\\n\");\n+\n+    // replace \"[dependencies]\" with\n+    // [dependencies]\n+    // dep1 = { path = ... }\n+    // dep2 = { path = ... }\n+    // etc\n+    let new_manifest = cargo_toml.replacen(\"[dependencies]\\n\", &all_deps, 1);\n+\n+    // println!(\"{}\", new_manifest);\n+    let mut file = File::create(manifest_path)?;\n+    file.write_all(new_manifest.as_bytes())?;\n+\n+    println!(\"info: successfully setup dependencies inside {}\", manifest_path);\n+\n+    Ok(())\n+}\n+\n+pub fn remove_rustc_src() {\n+    for project in CLIPPY_PROJECTS {\n+        remove_rustc_src_from_project(project);\n+    }\n+}\n+\n+fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> bool {\n+    let mut cargo_content = if let Ok(content) = read_project_file(project.cargo_file) {\n+        content\n+    } else {\n+        return false;\n+    };\n+    let section_start = if let Some(section_start) = cargo_content.find(RUSTC_PATH_SECTION) {\n+        section_start\n+    } else {\n+        println!(\n+            \"info: dependencies could not be found in `{}` for {}, skipping file\",\n+            project.cargo_file, project.name\n+        );\n+        return true;\n+    };\n+\n+    let end_point = if let Some(end_point) = cargo_content.find(DEPENDENCIES_SECTION) {\n+        end_point\n+    } else {\n+        eprintln!(\n+            \"error: the end of the rustc dependencies section could not be found in `{}`\",\n+            project.cargo_file\n+        );\n+        return false;\n+    };\n+\n+    cargo_content.replace_range(section_start..end_point, \"\");\n+\n+    match File::create(project.cargo_file) {\n+        Ok(mut file) => {\n+            file.write_all(cargo_content.as_bytes()).unwrap();\n+            println!(\"info: successfully removed dependencies inside {}\", project.cargo_file);\n+            true\n+        },\n+        Err(err) => {\n+            eprintln!(\n+                \"error: unable to open file `{}` to remove rustc dependencies for {} ({})\",\n+                project.cargo_file, project.name, err\n+            );\n+            false\n+        },\n+    }\n+}"}, {"sha": "3834f5a18421a091ffe4e1d70b566b5e3bdea79c", "filename": "clippy_dev/src/setup/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -0,0 +1,2 @@\n+pub mod git_hook;\n+pub mod intellij;"}, {"sha": "89d572ad93128431d4e47255601e400368957ea0", "filename": "doc/basics.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -90,8 +90,10 @@ cargo dev fmt\n cargo dev update_lints\n # create a new lint and register it\n cargo dev new_lint\n+# automatically formatting all code before each commit\n+cargo dev setup git-hook\n # (experimental) Setup Clippy to work with IntelliJ-Rust\n-cargo dev ide_setup\n+cargo dev setup intellij\n ```\n \n ## lintcheck"}, {"sha": "528f8953b25d8b81b40633a399def3fd9762726e", "filename": "util/etc/pre-commit.sh", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a03dfb9eac984b496725cca55548983b5cf7e986/util%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a03dfb9eac984b496725cca55548983b5cf7e986/util%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fetc%2Fpre-commit.sh?ref=a03dfb9eac984b496725cca55548983b5cf7e986", "patch": "@@ -0,0 +1,21 @@\n+#!/bin/sh\n+\n+# hide output\n+set -e\n+\n+# Update lints\n+cargo dev update_lints\n+git add clippy_lints/src/lib.rs\n+\n+# Formatting:\n+#     Git will not automatically add the formatted code to the staged changes once\n+#     fmt was executed. This collects all staged files rs files that are currently staged.\n+#     They will later be added back.\n+#\n+#     This was proudly stolen and adjusted from here:\n+#     https://medium.com/@harshitbangar/automatic-code-formatting-with-git-66c3c5c26798\n+files=$( (git diff --cached --name-only --diff-filter=ACMR | grep -Ei \"\\.rs$\") || true)\n+if [ ! -z \"${files}\" ]; then\n+    cargo dev fmt\n+    git add $(echo \"$files\" | paste -s -d \" \" -)\n+fi"}]}