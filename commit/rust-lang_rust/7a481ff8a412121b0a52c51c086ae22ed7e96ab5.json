{"sha": "7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "node_id": "C_kwDOAAsO6NoAKDdhNDgxZmY4YTQxMjEyMWIwYTUyYzUxYzA4NmFlMjJlZDdlOTZhYjU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-05T17:07:20Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-09T10:44:24Z"}, "message": "Properly abort when thread result panics on drop.", "tree": {"sha": "d46bbfe2f2b4585d7dbc6bc6b200f95c062420fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46bbfe2f2b4585d7dbc6bc6b200f95c062420fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "html_url": "https://github.com/rust-lang/rust/commit/7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a481ff8a412121b0a52c51c086ae22ed7e96ab5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5226395d6faef77a5f1dadb6235bcd99352e1843", "url": "https://api.github.com/repos/rust-lang/rust/commits/5226395d6faef77a5f1dadb6235bcd99352e1843", "html_url": "https://github.com/rust-lang/rust/commit/5226395d6faef77a5f1dadb6235bcd99352e1843"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "232b66230782ffa3f5f6f1742253ac2f75e29958", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a481ff8a412121b0a52c51c086ae22ed7e96ab5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a481ff8a412121b0a52c51c086ae22ed7e96ab5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "patch": "@@ -363,6 +363,11 @@ extern crate std as realstd;\n #[macro_use]\n mod macros;\n \n+// The runtime entry point and a few unstable public functions used by the\n+// compiler\n+#[macro_use]\n+pub mod rt;\n+\n // The Rust prelude\n pub mod prelude;\n \n@@ -547,11 +552,6 @@ pub mod arch {\n #[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n pub use std_detect::is_x86_feature_detected;\n \n-// The runtime entry point and a few unstable public functions used by the\n-// compiler\n-#[macro_use]\n-pub mod rt;\n-\n // Platform-abstraction modules\n mod sys;\n mod sys_common;"}, {"sha": "74b29454b94a4896c9297eee061b6de0b684150f", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a481ff8a412121b0a52c51c086ae22ed7e96ab5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a481ff8a412121b0a52c51c086ae22ed7e96ab5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7a481ff8a412121b0a52c51c086ae22ed7e96ab5", "patch": "@@ -1287,29 +1287,31 @@ unsafe impl<'scope, T: Sync> Sync for Packet<'scope, T> {}\n \n impl<'scope, T> Drop for Packet<'scope, T> {\n     fn drop(&mut self) {\n+        // If this packet was for a thread that ran in a scope, the thread\n+        // panicked, and nobody consumed the panic payload, we make sure\n+        // the scope function will panic.\n+        let unhandled_panic = matches!(self.result.get_mut(), Some(Err(_)));\n+        // Drop the result without causing unwinding.\n+        // This is only relevant for threads that aren't join()ed, as\n+        // join() will take the `result` and set it to None, such that\n+        // there is nothing left to drop here.\n+        // If this panics, we should handle that, because we're outside the\n+        // outermost `catch_unwind` of our thread.\n+        // We just abort in that case, since there's nothing else we can do.\n+        // (And even if we tried to handle it somehow, we'd also need to handle\n+        // the case where the panic payload we get out of it also panics on\n+        // drop, and so on. See issue #86027.)\n+        if let Err(_) = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+            *self.result.get_mut() = None;\n+        })) {\n+            rtabort!(\"thread result panicked on drop\");\n+        }\n         // Book-keeping so the scope knows when it's done.\n         if let Some(scope) = self.scope {\n-            // If this packet was for a thread that ran in a scope, the thread\n-            // panicked, and nobody consumed the panic payload, we make sure\n-            // the scope function will panic.\n-            let unhandled_panic = matches!(self.result.get_mut(), Some(Err(_)));\n-            // Drop the result before decrementing the number of running\n-            // threads, because the Drop implementation might still use things\n-            // it borrowed from 'scope.\n-            // This is only relevant for threads that aren't join()ed, as\n-            // join() will take the `result` and set it to None, such that\n-            // there is nothing left to drop here.\n-            // If this drop panics, that just results in an abort, because\n-            // we're outside of the outermost `catch_unwind` of our thread.\n-            // The same happens for detached non-scoped threads when dropping\n-            // their ignored return value (or panic payload) panics, so\n-            // there's no need to try to do anything better.\n-            // (And even if we tried to handle it, we'd also need to handle\n-            // the case where the panic payload we get out of it also panics\n-            // on drop, and so on. See issue #86027.)\n-            *self.result.get_mut() = None;\n             // Now that there will be no more user code running on this thread\n             // that can use 'scope, mark the thread as 'finished'.\n+            // It's important we only do this after the `result` has been dropped,\n+            // since dropping it might still use things it borrowed from 'scope.\n             scope.decrement_num_running_threads(unhandled_panic);\n         }\n     }"}]}