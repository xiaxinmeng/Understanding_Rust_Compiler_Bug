{"sha": "c69fba929bba757a4ec97564cd4e78e988c11950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OWZiYTkyOWJiYTc1N2E0ZWM5NzU2NGNkNGU3OGU5ODhjMTE5NTA=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-21T14:19:37Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-21T14:24:57Z"}, "message": "Add `rustc_mir::interpret::Machine::enforce_abi()`", "tree": {"sha": "88853a66e8253fb9af80ad91487d49bd179c9cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88853a66e8253fb9af80ad91487d49bd179c9cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c69fba929bba757a4ec97564cd4e78e988c11950", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYKfCwBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhSnwEAtLL/eMhlhCIyZvgJoubS52XCfoZk\n7tb1xd/SV5qw0+oA/iu/bTUFIYLxbMUyiZj9+OKQ0DXGKDMruAZOBes44B0N\n=HsIr\n-----END PGP SIGNATURE-----", "payload": "tree 88853a66e8253fb9af80ad91487d49bd179c9cba\nparent f36b137074407ce857e34337bc92f10e26bc3994\nauthor hyd-dev <yd-huang@outlook.com> 1621606777 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1621607097 +0800\n\nAdd `rustc_mir::interpret::Machine::enforce_abi()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c69fba929bba757a4ec97564cd4e78e988c11950", "html_url": "https://github.com/rust-lang/rust/commit/c69fba929bba757a4ec97564cd4e78e988c11950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c69fba929bba757a4ec97564cd4e78e988c11950/comments", "author": null, "committer": null, "parents": [{"sha": "f36b137074407ce857e34337bc92f10e26bc3994", "url": "https://api.github.com/repos/rust-lang/rust/commits/f36b137074407ce857e34337bc92f10e26bc3994", "html_url": "https://github.com/rust-lang/rust/commit/f36b137074407ce857e34337bc92f10e26bc3994"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "3972c2f944b07fd4dfc370ce5ed99565373dce9e", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c69fba929bba757a4ec97564cd4e78e988c11950/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69fba929bba757a4ec97564cd4e78e988c11950/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=c69fba929bba757a4ec97564cd4e78e988c11950", "patch": "@@ -132,6 +132,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    /// Whether function calls should be [ABI](Abi)-checked.\n+    fn enforce_abi(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+\n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n     /// constants, ...\n@@ -444,6 +447,11 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         false // for now, we don't enforce validity\n     }\n \n+    #[inline(always)]\n+    fn enforce_abi(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        true\n+    }\n+\n     #[inline(always)]\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,"}, {"sha": "a3dc8aaef32420bf8e51fa83a46c36426ef034a4", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c69fba929bba757a4ec97564cd4e78e988c11950/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69fba929bba757a4ec97564cd4e78e988c11950/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=c69fba929bba757a4ec97564cd4e78e988c11950", "patch": "@@ -232,26 +232,28 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // ABI check\n         let check_abi = |this: &Self, instance_ty: Ty<'tcx>| -> InterpResult<'tcx> {\n-            let callee_abi = match instance_ty.kind() {\n-                ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n-                ty::Closure(..) => Abi::RustCall,\n-                ty::Generator(..) => Abi::Rust,\n-                _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-            };\n-            let normalize_abi = |abi| match abi {\n-                Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n-                // These are all the same ABI, really.\n-                {\n-                    Abi::Rust\n+            if M::enforce_abi(this) {\n+                let callee_abi = match instance_ty.kind() {\n+                    ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n+                    ty::Closure(..) => Abi::RustCall,\n+                    ty::Generator(..) => Abi::Rust,\n+                    _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n+                };\n+                let normalize_abi = |abi| match abi {\n+                    Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n+                    // These are all the same ABI, really.\n+                    {\n+                        Abi::Rust\n+                    }\n+                    abi => abi,\n+                };\n+                if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n+                    throw_ub_format!(\n+                        \"calling a function with ABI {} using caller ABI {}\",\n+                        callee_abi.name(),\n+                        caller_abi.name()\n+                    )\n                 }\n-                abi => abi,\n-            };\n-            if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                throw_ub_format!(\n-                    \"calling a function with ABI {} using caller ABI {}\",\n-                    callee_abi.name(),\n-                    caller_abi.name()\n-                )\n             }\n             Ok(())\n         };"}]}