{"sha": "832987bb1e0691b44a057414d57d23c64e6c7d97", "node_id": "C_kwDOAAsO6NoAKDgzMjk4N2JiMWUwNjkxYjQ0YTA1NzQxNGQ1N2QyM2M2NGU2YzdkOTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-02T06:24:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-02T06:24:02Z"}, "message": "Rollup merge of #108609 - clubby789:e0599-highlight, r=estebank\n\nHighlight whole expression for E0599\n\nFixes #108603\n\nThis adds a secondary label to highlight the whole expression leading to the error. It also prevents empty labels being recognised as 'unexpected' by compiletest - otherwise, tests with NOTE annotations would pick up empty labels.\n\n`@rustbot` label +A-diagnostics", "tree": {"sha": "4f9c4171f898fef26d7e734d12db995a10ca498a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f9c4171f898fef26d7e734d12db995a10ca498a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832987bb1e0691b44a057414d57d23c64e6c7d97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAEECCRBK7hj4Ov3rIwAA7jQIAKdD9//9lr/82mH6IA7wwaxo\nJPPs8r92eYBoBY3g75J5P3lsqrSHNxTOKbiKbrDXU5iml1rlW/fm5AZG74EfyNOx\nZ2Z7VyBDNQU6W08Rk72x5XmJDhTTK9HP2R2bhlA5/o99xA0rsdfwuTfg+82+g8AY\nG7k/XPgbnqHI2/sei3ccvtFbP+SA58ozIn5Nq/gIy0HXmwEOLR/AxhXYYDfvfPqB\nWR4fgpHF0j2WPp0otRMmgYG2yD/Y0hTeqe/89mO4Td+TDjReL6wpY5XdBFs2FU05\ndYtu9rldyveDJ7SGQY/sd34AVQT8bgknhFmnsXfJqYPldppClhQIJ4Vt34Ec7GE=\n=HQ9a\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f9c4171f898fef26d7e734d12db995a10ca498a\nparent c09a9a69e2f1f81ed1153e6d0993a9ec9939b8e3\nparent 6c2a952b5637f4795ad1d3ed08dfa4f43eaece51\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677738242 +0100\ncommitter GitHub <noreply@github.com> 1677738242 +0100\n\nRollup merge of #108609 - clubby789:e0599-highlight, r=estebank\n\nHighlight whole expression for E0599\n\nFixes #108603\n\nThis adds a secondary label to highlight the whole expression leading to the error. It also prevents empty labels being recognised as 'unexpected' by compiletest - otherwise, tests with NOTE annotations would pick up empty labels.\n\n`@rustbot` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832987bb1e0691b44a057414d57d23c64e6c7d97", "html_url": "https://github.com/rust-lang/rust/commit/832987bb1e0691b44a057414d57d23c64e6c7d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832987bb1e0691b44a057414d57d23c64e6c7d97/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09a9a69e2f1f81ed1153e6d0993a9ec9939b8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09a9a69e2f1f81ed1153e6d0993a9ec9939b8e3", "html_url": "https://github.com/rust-lang/rust/commit/c09a9a69e2f1f81ed1153e6d0993a9ec9939b8e3"}, {"sha": "6c2a952b5637f4795ad1d3ed08dfa4f43eaece51", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2a952b5637f4795ad1d3ed08dfa4f43eaece51", "html_url": "https://github.com/rust-lang/rust/commit/6c2a952b5637f4795ad1d3ed08dfa4f43eaece51"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "60d56263d2e38bb69590618d2d926beb96311b58", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/832987bb1e0691b44a057414d57d23c64e6c7d97/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832987bb1e0691b44a057414d57d23c64e6c7d97/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=832987bb1e0691b44a057414d57d23c64e6c7d97", "patch": "@@ -333,6 +333,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcvr_ty.prefix_string(self.tcx),\n             ty_str_reported,\n         );\n+        if tcx.sess.source_map().is_multiline(sugg_span) {\n+            err.span_label(sugg_span.with_hi(span.lo()), \"\");\n+        }\n         let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n             short_ty_str\n         } else {"}, {"sha": "41c23ff86b25efc5f5582e58fca4aa90dd4f4d9e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/832987bb1e0691b44a057414d57d23c64e6c7d97/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832987bb1e0691b44a057414d57d23c64e6c7d97/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=832987bb1e0691b44a057414d57d23c64e6c7d97", "patch": "@@ -1432,12 +1432,13 @@ impl<'test> TestCx<'test> {\n         expect_help: bool,\n         expect_note: bool,\n     ) -> bool {\n-        match actual_error.kind {\n-            Some(ErrorKind::Help) => expect_help,\n-            Some(ErrorKind::Note) => expect_note,\n-            Some(ErrorKind::Error) | Some(ErrorKind::Warning) => true,\n-            Some(ErrorKind::Suggestion) | None => false,\n-        }\n+        !actual_error.msg.is_empty()\n+            && match actual_error.kind {\n+                Some(ErrorKind::Help) => expect_help,\n+                Some(ErrorKind::Note) => expect_note,\n+                Some(ErrorKind::Error) | Some(ErrorKind::Warning) => true,\n+                Some(ErrorKind::Suggestion) | None => false,\n+            }\n     }\n \n     fn should_emit_metadata(&self, pm: Option<PassMode>) -> Emit {"}, {"sha": "bd51378cf1a5079f8e24ad41cf70edb7ef9a7b1b", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/832987bb1e0691b44a057414d57d23c64e6c7d97/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832987bb1e0691b44a057414d57d23c64e6c7d97/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=832987bb1e0691b44a057414d57d23c64e6c7d97", "patch": "@@ -48,14 +48,17 @@ LL |      .two(0, /* isize */);\n error[E0599]: `Foo` is not an iterator\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n-LL | pub struct Foo;\n-   | --------------\n-   | |\n-   | method `take` not found for this struct\n-   | doesn't satisfy `Foo: Iterator`\n+LL |   pub struct Foo;\n+   |   --------------\n+   |   |\n+   |   method `take` not found for this struct\n+   |   doesn't satisfy `Foo: Iterator`\n ...\n-LL |      .take()\n-   |       ^^^^ `Foo` is not an iterator\n+LL | /     y.zero()\n+LL | |      .take()\n+   | |      -^^^^ `Foo` is not an iterator\n+   | |______|\n+   | \n    |\n    = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`"}, {"sha": "b622122f33ea7cf6642ad2c8d18f86013edef0ed", "filename": "tests/ui/typeck/issue-31173.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/832987bb1e0691b44a057414d57d23c64e6c7d97/tests%2Fui%2Ftypeck%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832987bb1e0691b44a057414d57d23c64e6c7d97/tests%2Fui%2Ftypeck%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-31173.stderr?ref=832987bb1e0691b44a057414d57d23c64e6c7d97", "patch": "@@ -24,8 +24,17 @@ note: required by a bound in `cloned`\n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut IntoIter<u8>, [closure@issue-31173.rs:7:21]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:12:10\n    |\n-LL |         .collect();\n-   |          ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n+LL |       let temp: Vec<u8> = it\n+   |  _________________________-\n+LL | |         .take_while(|&x| {\n+LL | |             found_e = true;\n+LL | |             false\n+LL | |         })\n+LL | |         .cloned()\n+LL | |         .collect();\n+   | |         -^^^^^^^ method cannot be called due to unsatisfied trait bounds\n+   | |_________|\n+   | \n   --> $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n    = note: doesn't satisfy `<_ as Iterator>::Item = &_`"}]}