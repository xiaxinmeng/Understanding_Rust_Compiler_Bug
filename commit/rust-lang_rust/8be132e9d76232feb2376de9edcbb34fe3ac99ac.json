{"sha": "8be132e9d76232feb2376de9edcbb34fe3ac99ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZTEzMmU5ZDc2MjMyZmViMjM3NmRlOWVkY2JiMzRmZTNhYzk5YWM=", "commit": {"author": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2017-08-28T09:56:43Z"}, "committer": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2017-08-28T09:58:22Z"}, "message": "Initial diagnostic API for proc-macros.\n\nThis commit introduces the ability to create and emit `Diagnostic`\nstructures from proc-macros, allowing for proc-macro authors to emit\nwarning, error, note, and help messages just like the compiler does.", "tree": {"sha": "e1cdbc4e0e9e64151a896c49af2d52fae00d48a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1cdbc4e0e9e64151a896c49af2d52fae00d48a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be132e9d76232feb2376de9edcbb34fe3ac99ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be132e9d76232feb2376de9edcbb34fe3ac99ac", "html_url": "https://github.com/rust-lang/rust/commit/8be132e9d76232feb2376de9edcbb34fe3ac99ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be132e9d76232feb2376de9edcbb34fe3ac99ac/comments", "author": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1", "html_url": "https://github.com/rust-lang/rust/commit/a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1"}], "stats": {"total": 315, "additions": 314, "deletions": 1}, "files": [{"sha": "1dd45de759ed13b2a0aac95ade9beaac9743d918", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -1038,6 +1038,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"proc_macro\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "cfd83e348a8e2e62e2a229f3616578f29f186b31", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -10,3 +10,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "c39aec896e6b4d4c091a582e8342febb64ded67a", "filename": "src/libproc_macro/diagnostic.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -0,0 +1,134 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use Span;\n+\n+use rustc_errors as rustc;\n+\n+/// An enum representing a diagnostic level.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Copy, Clone, Debug)]\n+pub enum Level {\n+    /// An error.\n+    Error,\n+    /// A warning.\n+    Warning,\n+    /// A note.\n+    Note,\n+    /// A help message.\n+    Help,\n+    #[doc(hidden)]\n+    __Nonexhaustive,\n+}\n+\n+/// A structure representing a diagnostic message and associated children\n+/// messages.\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[derive(Clone, Debug)]\n+pub struct Diagnostic {\n+    level: Level,\n+    message: String,\n+    span: Option<Span>,\n+    children: Vec<Diagnostic>\n+}\n+\n+macro_rules! diagnostic_child_methods {\n+    ($spanned:ident, $regular:ident, $level:expr) => (\n+        /// Add a new child diagnostic message to `self` with the level\n+        /// identified by this methods name with the given `span` and `message`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $spanned<T: Into<String>>(mut self, span: Span, message: T) -> Diagnostic {\n+            self.children.push(Diagnostic::spanned(span, $level, message));\n+            self\n+        }\n+\n+        /// Add a new child diagnostic message to `self` with the level\n+        /// identified by this method's name with the given `message`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $regular<T: Into<String>>(mut self, message: T) -> Diagnostic {\n+            self.children.push(Diagnostic::new($level, message));\n+            self\n+        }\n+    )\n+}\n+\n+impl Diagnostic {\n+    /// Create a new diagnostic with the given `level` and `message`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n+        Diagnostic {\n+            level: level,\n+            message: message.into(),\n+            span: None,\n+            children: vec![]\n+        }\n+    }\n+\n+    /// Create a new diagnostic with the given `level` and `message` pointing to\n+    /// the given `span`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn spanned<T: Into<String>>(span: Span, level: Level, message: T) -> Diagnostic {\n+        Diagnostic {\n+            level: level,\n+            message: message.into(),\n+            span: Some(span),\n+            children: vec![]\n+        }\n+    }\n+\n+    diagnostic_child_methods!(span_error, error, Level::Error);\n+    diagnostic_child_methods!(span_warning, warning, Level::Warning);\n+    diagnostic_child_methods!(span_note, note, Level::Note);\n+    diagnostic_child_methods!(span_help, help, Level::Help);\n+\n+    /// Returns the diagnostic `level` for `self`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn level(&self) -> Level {\n+        self.level\n+    }\n+\n+    /// Emit the diagnostic.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn emit(self) {\n+        ::__internal::with_sess(move |(sess, _)| {\n+            let handler = &sess.span_diagnostic;\n+            let level = __internal::level_to_internal_level(self.level);\n+            let mut diag = rustc::DiagnosticBuilder::new(handler, level, &*self.message);\n+\n+            if let Some(span) = self.span {\n+                diag.set_span(span.0);\n+            }\n+\n+            for child in self.children {\n+                let span = child.span.map(|s| s.0);\n+                let level = __internal::level_to_internal_level(child.level);\n+                diag.sub(level, &*child.message, span);\n+            }\n+\n+            diag.emit();\n+        });\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n+#[doc(hidden)]\n+pub mod __internal {\n+    use super::{Level, rustc};\n+\n+    pub fn level_to_internal_level(level: Level) -> rustc::Level {\n+        match level {\n+            Level::Error => rustc::Level::Error,\n+            Level::Warning => rustc::Level::Warning,\n+            Level::Note => rustc::Level::Note,\n+            Level::Help => rustc::Level::Help,\n+            Level::__Nonexhaustive => unreachable!(\"Level::__Nonexhaustive\")\n+        }\n+    }\n+}"}, {"sha": "4e7783da67194b6b50d45e38fa1e6728d6f1bf73", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -42,6 +42,12 @@\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n+extern crate rustc_errors;\n+\n+mod diagnostic;\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+pub use diagnostic::{Diagnostic, Level};\n \n use std::{ascii, fmt, iter};\n use std::str::FromStr;\n@@ -191,12 +197,28 @@ pub fn quote_span(span: Span) -> TokenStream {\n     TokenStream(quote::Quote::quote(&span.0))\n }\n \n+macro_rules! diagnostic_method {\n+    ($name:ident, $level:expr) => (\n+        /// Create a new `Diagnostic` with the given `message` at the span\n+        /// `self`.\n+        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        pub fn $name<T: Into<String>>(self, message: T) -> Diagnostic {\n+            Diagnostic::spanned(self, $level, message)\n+        }\n+    )\n+}\n+\n impl Span {\n     /// The span of the invocation of the current procedural macro.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn call_site() -> Span {\n         ::__internal::with_sess(|(_, mark)| Span(mark.expn_info().unwrap().call_site))\n     }\n+\n+    diagnostic_method!(error, Level::Error);\n+    diagnostic_method!(warning, Level::Warning);\n+    diagnostic_method!(note, Level::Note);\n+    diagnostic_method!(help, Level::Help);\n }\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`)."}, {"sha": "9aae188f9ecdfdf4b7644ed5c0f3a78ca01d241b", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -288,7 +288,7 @@ impl Diagnostic {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n-    fn sub(&mut self,\n+    pub(crate) fn sub(&mut self,\n            level: Level,\n            message: &str,\n            span: MultiSpan,"}, {"sha": "2cd433bfe3aeef5c2cbd45766d790718de4c56c3", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -110,6 +110,19 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n+    /// Convenience function for internal use, clients should use one of the\n+    /// span_* methods instead.\n+    pub fn sub<S: Into<MultiSpan>>(\n+        &mut self,\n+        level: Level,\n+        message: &str,\n+        span: Option<S>,\n+    ) -> &mut Self {\n+        let span = span.map(|s| s.into()).unwrap_or(MultiSpan::new());\n+        self.diagnostic.sub(level, message, span, None);\n+        self\n+    }\n+\n     /// Delay emission of this diagnostic as a bug.\n     ///\n     /// This can be useful in contexts where an error indicates a bug but"}, {"sha": "6fca32fece1d4e0f1bfb6fdc81d30dc592602c5d", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{TokenStream, TokenNode, Span, Diagnostic};\n+\n+fn parse(input: TokenStream) -> Result<(), Diagnostic> {\n+    let mut count = 0;\n+    let mut last_span = Span::default();\n+    for tree in input {\n+        let span = tree.span;\n+        if count >= 3 {\n+            return Err(span.error(format!(\"expected EOF, found `{}`.\", tree))\n+                           .span_note(last_span, \"last good input was here\")\n+                           .help(\"input must be: `===`\"))\n+        }\n+\n+        if let TokenNode::Op('=', _) = tree.kind {\n+            count += 1;\n+        } else {\n+            return Err(span.error(format!(\"expected `=`, found `{}`.\", tree)));\n+        }\n+\n+        last_span = span;\n+    }\n+\n+    if count < 3 {\n+        return Err(Span::default()\n+                       .error(format!(\"found {} equal signs, need exactly 3\", count))\n+                       .help(\"input must be: `===`\"))\n+    }\n+\n+    Ok(())\n+}\n+\n+#[proc_macro]\n+pub fn three_equals(input: TokenStream) -> TokenStream {\n+    if let Err(diag) = parse(input) {\n+        diag.emit();\n+        return TokenStream::empty();\n+    }\n+\n+    \"3\".parse().unwrap()\n+}"}, {"sha": "016e05c51f5079abf9614a496e269cc7190b038d", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:three-equals.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate three_equals;\n+\n+use three_equals::three_equals;\n+\n+fn main() {\n+    // This one is okay.\n+    three_equals!(===);\n+\n+    // Need exactly three equals.\n+    three_equals!(==);\n+\n+    // Need exactly three equals.\n+    three_equals!(=====);\n+\n+    // Only equals accepted.\n+    three_equals!(abc);\n+\n+    // Only equals accepted.\n+    three_equals!(!!);\n+\n+    // Only three characters expected.\n+    three_equals!(===a);\n+}"}, {"sha": "1afe0be28000987ad5c1b6dcc15810f461579aa4", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8be132e9d76232feb2376de9edcbb34fe3ac99ac/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.stderr?ref=8be132e9d76232feb2376de9edcbb34fe3ac99ac", "patch": "@@ -0,0 +1,48 @@\n+error: found 2 equal signs, need exactly 3\n+  --> $DIR/three-equals.rs:25:5\n+   |\n+25 |     three_equals!(==);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: input must be: `===`\n+\n+error: expected EOF, found `=`.\n+  --> $DIR/three-equals.rs:28:21\n+   |\n+28 |     three_equals!(=====);\n+   |                     ^^\n+   |\n+note: last good input was here\n+  --> $DIR/three-equals.rs:28:21\n+   |\n+28 |     three_equals!(=====);\n+   |                     ^^\n+   = help: input must be: `===`\n+\n+error: expected `=`, found `abc`.\n+  --> $DIR/three-equals.rs:31:19\n+   |\n+31 |     three_equals!(abc);\n+   |                   ^^^\n+\n+error: expected `=`, found `!`.\n+  --> $DIR/three-equals.rs:34:19\n+   |\n+34 |     three_equals!(!!);\n+   |                   ^\n+\n+error: expected EOF, found `a`.\n+  --> $DIR/three-equals.rs:37:22\n+   |\n+37 |     three_equals!(===a);\n+   |                      ^\n+   |\n+note: last good input was here\n+  --> $DIR/three-equals.rs:37:21\n+   |\n+37 |     three_equals!(===a);\n+   |                     ^\n+   = help: input must be: `===`\n+\n+error: aborting due to 5 previous errors\n+"}]}