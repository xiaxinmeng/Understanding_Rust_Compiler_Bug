{"sha": "57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDMwZjU4N2JiMGJiZTRkZWE5YTk3MDE2YjRlMGY0OWE3ZWY1ZjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-31T16:19:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "use macros database in analysis", "tree": {"sha": "b30fe16afdaffcd5bb74d434101732dc20908d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30fe16afdaffcd5bb74d434101732dc20908d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "html_url": "https://github.com/rust-lang/rust/commit/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75365619212983d2b7abf7b5b5e73c70dd07fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75365619212983d2b7abf7b5b5e73c70dd07fb4", "html_url": "https://github.com/rust-lang/rust/commit/d75365619212983d2b7abf7b5b5e73c70dd07fb4"}], "stats": {"total": 138, "additions": 70, "deletions": 68}, "files": [{"sha": "712f72484aa8f37cfd6848e098222c9e9f1672ca", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -98,5 +98,8 @@ salsa::database_storage! {\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n         }\n+        impl hir::MacroDatabase {\n+            fn expand_macro() for hir::ExpandMacroQuery;\n+        }\n     }\n }"}, {"sha": "62133ef29358c1d3336ac2504bea774c0cf9c404", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -23,10 +23,10 @@ fn extend_selection_in_macro(\n     frange: FileRange,\n ) -> Option<TextRange> {\n     let macro_call = find_macro_call(source_file.syntax(), frange.range)?;\n-    let exp = crate::macros::expand(db, frange.file_id, macro_call)?;\n-    let dst_range = exp.map_range_forward(frange.range)?;\n-    let dst_range = ra_editor::extend_selection(exp.source_file().syntax(), dst_range)?;\n-    let src_range = exp.map_range_back(dst_range)?;\n+    let (off, exp) = crate::macros::expand(db, frange.file_id, macro_call)?;\n+    let dst_range = exp.map_range_forward(frange.range - off)?;\n+    let dst_range = ra_editor::extend_selection(exp.syntax().borrowed(), dst_range)?;\n+    let src_range = exp.map_range_back(dst_range)? + off;\n     Some(src_range)\n }\n "}, {"sha": "21ec36cd67c57fa9588d15088ca76127d80f06fb", "filename": "crates/ra_analysis/src/macros.rs", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmacros.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -1,15 +1,18 @@\n /// Begining of macro expansion.\n ///\n /// This code should be moved out of ra_analysis into hir (?) ideally.\n-use ra_syntax::{ast, AstNode, SourceFileNode, TextRange};\n+use std::sync::Arc;\n+\n+use ra_syntax::{ast, AstNode, TextUnit};\n+use hir::MacroDatabase;\n \n use crate::{db::RootDatabase, FileId};\n \n pub(crate) fn expand(\n-    _db: &RootDatabase,\n+    db: &RootDatabase,\n     _file_id: FileId,\n     macro_call: ast::MacroCall,\n-) -> Option<MacroExpansion> {\n+) -> Option<(TextUnit, Arc<hir::MacroExpansion>)> {\n     let path = macro_call.path()?;\n     if path.qualifier().is_some() {\n         return None;\n@@ -18,58 +21,12 @@ pub(crate) fn expand(\n     if name_ref.text() != \"ctry\" {\n         return None;\n     }\n+    let arg = macro_call.token_tree()?.syntax();\n \n-    let arg = macro_call.token_tree()?;\n-    let text = format!(\n-        r\"\n-        fn dummy() {{\n-            match {} {{\n-                None => return Ok(None),\n-                Some(it) => it,\n-            }}\n-        }}\",\n-        arg.syntax().text()\n-    );\n-    let file = SourceFileNode::parse(&text);\n-    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n-    let match_arg = match_expr.expr()?;\n-    let ranges_map = vec![(arg.syntax().range(), match_arg.syntax().range())];\n-    let res = MacroExpansion {\n-        source_file: file,\n-        ranges_map,\n+    let def = hir::MacroDef::CTry;\n+    let input = hir::MacroInput {\n+        text: arg.text().to_string(),\n     };\n-    Some(res)\n-}\n-\n-pub(crate) struct MacroExpansion {\n-    pub(crate) source_file: SourceFileNode,\n-    pub(crate) ranges_map: Vec<(TextRange, TextRange)>,\n-}\n-\n-impl MacroExpansion {\n-    pub(crate) fn source_file(&self) -> &SourceFileNode {\n-        &self.source_file\n-    }\n-    pub(crate) fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n-        for (s_range, t_range) in self.ranges_map.iter() {\n-            if tgt_range.is_subrange(&t_range) {\n-                let tgt_at_zero_range = tgt_range - tgt_range.start();\n-                let tgt_range_offset = tgt_range.start() - t_range.start();\n-                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n-                return Some(src_range);\n-            }\n-        }\n-        None\n-    }\n-    pub(crate) fn map_range_forward(&self, src_range: TextRange) -> Option<TextRange> {\n-        for (s_range, t_range) in self.ranges_map.iter() {\n-            if src_range.is_subrange(&s_range) {\n-                let src_at_zero_range = src_range - src_range.start();\n-                let src_range_offset = src_range.start() - s_range.start();\n-                let src_range = src_at_zero_range + src_range_offset + t_range.start();\n-                return Some(src_range);\n-            }\n-        }\n-        None\n-    }\n+    let exp = db.expand_macro(def, input)?;\n+    Some((arg.range().start(), exp))\n }"}, {"sha": "35a4630e9f878360a9d4b59fd2a30a49f158848f", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -15,13 +15,13 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Hi\n         .descendants()\n         .filter_map(ast::MacroCall::cast)\n     {\n-        if let Some(exp) = crate::macros::expand(db, file_id, macro_call) {\n-            let mapped_ranges = ra_editor::highlight(exp.source_file().syntax())\n+        if let Some((off, exp)) = crate::macros::expand(db, file_id, macro_call) {\n+            let mapped_ranges = ra_editor::highlight(exp.syntax().borrowed())\n                 .into_iter()\n                 .filter_map(|r| {\n                     let mapped_range = exp.map_range_back(r.range)?;\n                     let res = HighlightedRange {\n-                        range: mapped_range,\n+                        range: mapped_range + off,\n                         tag: r.tag,\n                     };\n                     Some(res)"}, {"sha": "ce750299f6e4d9f1ec6a0a8fb01cfabd122e0ac1", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -46,6 +46,7 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     krate::Crate,\n+    macros::{MacroDef, MacroInput, MacroExpansion, MacroDatabase, ExpandMacroQuery},\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n     adt::{Struct, Enum},"}, {"sha": "ef65025242c43000f4c45b3f74409abd8ba9738c", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -1,7 +1,10 @@\n use std::sync::Arc;\n \n-use ra_db::SyntaxDatabase;\n-use ra_syntax::{TextRange, TextUnit, SourceFileNode, AstNode, ast};\n+use ra_db::{SyntaxDatabase, LocalSyntaxPtr};\n+use ra_syntax::{\n+    TextRange, TextUnit, SourceFileNode, AstNode, SyntaxNode,\n+    ast,\n+};\n \n // Hard-coded defs for now :-(\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -12,18 +15,19 @@ pub enum MacroDef {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroInput {\n     // Should be token trees\n-    text: String,\n+    pub text: String,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct MacroExpansion {\n     text: String,\n     ranges_map: Vec<(TextRange, TextRange)>,\n+    ptr: LocalSyntaxPtr,\n }\n \n salsa::query_group! {\n \n-pub trait MacrosDatabase: SyntaxDatabase {\n+pub trait MacroDatabase: SyntaxDatabase {\n     fn expand_macro(def: MacroDef, input: MacroInput) -> Option<Arc<MacroExpansion>> {\n         type ExpandMacroQuery;\n     }\n@@ -32,7 +36,7 @@ pub trait MacrosDatabase: SyntaxDatabase {\n }\n \n fn expand_macro(\n-    _db: &impl MacrosDatabase,\n+    _db: &impl MacroDatabase,\n     def: MacroDef,\n     input: MacroInput,\n ) -> Option<Arc<MacroExpansion>> {\n@@ -50,8 +54,45 @@ fn expand_macro(\n     let file = SourceFileNode::parse(&text);\n     let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n     let match_arg = match_expr.expr()?;\n+    let ptr = LocalSyntaxPtr::new(match_arg.syntax());\n     let src_range = TextRange::offset_len(0.into(), TextUnit::of_str(&input.text));\n     let ranges_map = vec![(src_range, match_arg.syntax().range())];\n-    let res = MacroExpansion { text, ranges_map };\n+    let res = MacroExpansion {\n+        text,\n+        ranges_map,\n+        ptr,\n+    };\n     Some(Arc::new(res))\n }\n+\n+impl MacroExpansion {\n+    pub fn file(&self) -> SourceFileNode {\n+        SourceFileNode::parse(&self.text)\n+    }\n+\n+    pub fn syntax(&self) -> SyntaxNode {\n+        self.ptr.resolve(&self.file())\n+    }\n+    pub fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if tgt_range.is_subrange(&t_range) {\n+                let tgt_at_zero_range = tgt_range - tgt_range.start();\n+                let tgt_range_offset = tgt_range.start() - t_range.start();\n+                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n+    pub fn map_range_forward(&self, src_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if src_range.is_subrange(&s_range) {\n+                let src_at_zero_range = src_range - src_range.start();\n+                let src_range_offset = src_range.start() - s_range.start();\n+                let src_range = src_at_zero_range + src_range_offset + t_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n+}"}]}