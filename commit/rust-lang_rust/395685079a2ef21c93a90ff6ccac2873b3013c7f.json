{"sha": "395685079a2ef21c93a90ff6ccac2873b3013c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NTY4NTA3OWEyZWYyMWM5M2E5MGZmNmNjYWMyODczYjMwMTNjN2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-29T03:11:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-30T06:03:15Z"}, "message": "libextra: Require documentation by default", "tree": {"sha": "b0445966b05e3a15fc0529d0694356b407a0839c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0445966b05e3a15fc0529d0694356b407a0839c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/395685079a2ef21c93a90ff6ccac2873b3013c7f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/395685079a2ef21c93a90ff6ccac2873b3013c7f", "html_url": "https://github.com/rust-lang/rust/commit/395685079a2ef21c93a90ff6ccac2873b3013c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/395685079a2ef21c93a90ff6ccac2873b3013c7f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007651cd267ee8af88384d968183a1dee0265919", "url": "https://api.github.com/repos/rust-lang/rust/commits/007651cd267ee8af88384d968183a1dee0265919", "html_url": "https://github.com/rust-lang/rust/commit/007651cd267ee8af88384d968183a1dee0265919"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "1de2003aa99d592dda4aa143056a22367478601d", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -37,6 +37,8 @@\n  * ~~~\n  */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use sync;"}, {"sha": "7cd63cd03b1aaa7efb7677b33c2e2be06649cc84", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -32,6 +32,8 @@\n // overhead when initializing plain-old-data and means we don't need\n // to waste time running the destructors of POD.\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use list::{MutList, MutCons, MutNil};"}, {"sha": "b8f3a267d2d24ce8f983783b5a20c9b860769db0", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -15,7 +15,10 @@ use core::prelude::*;\n use core::str;\n use core::vec;\n \n+/// A trait for converting a value to base64 encoding.\n pub trait ToBase64 {\n+    /// Converts the value of `self` to a base64 value, returning the owned\n+    /// string\n     fn to_base64(&self) -> ~str;\n }\n \n@@ -112,6 +115,7 @@ impl<'self> ToBase64 for &'self str {\n     }\n }\n \n+#[allow(missing_doc)]\n pub trait FromBase64 {\n     fn from_base64(&self) -> ~[u8];\n }"}, {"sha": "672a61b1ad8dd715820f36b1b259a746b867ee2c", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -211,9 +211,11 @@ enum BitvVariant { Big(~BigBitv), Small(~SmallBitv) }\n \n enum Op {Union, Intersect, Assign, Difference}\n \n-// The bitvector type\n+/// The bitvector type\n pub struct Bitv {\n+    /// Internal representation of the bit vector (small or large)\n     rep: BitvVariant,\n+    /// The number of valid bits in the internal representation\n     nbits: uint\n }\n "}, {"sha": "cbd7cb5e3c08f75709f45c0a63a7c8192ac13509", "filename": "src/libextra/dbg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Unsafe debugging functions for inspecting values.\n \n+#[allow(missing_doc)];\n+\n use core::cast::transmute;\n use core::sys;\n "}, {"sha": "08dc2436c9339a684cdf6a6fdc188d16eeffd4d1", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -18,6 +18,7 @@ use core::vec;\n \n static initial_capacity: uint = 32u; // 2^5\n \n+#[allow(missing_doc)]\n pub struct Deque<T> {\n     priv nelts: uint,\n     priv lo: uint,"}, {"sha": "5581c6d5ac9d9bb92eefef0436bddf2240659f1f", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -26,13 +26,15 @@ use core::vec;\n \n pub type DListLink<T> = Option<@mut DListNode<T>>;\n \n+#[allow(missing_doc)]\n pub struct DListNode<T> {\n     data: T,\n     linked: bool, // for assertions\n     prev: DListLink<T>,\n     next: DListLink<T>,\n }\n \n+#[allow(missing_doc)]\n pub struct DList<T> {\n     size: uint,\n     hd: DListLink<T>,\n@@ -106,6 +108,7 @@ pub fn from_elem<T>(data: T) -> @mut DList<T> {\n     list\n }\n \n+/// Creates a new dlist from a vector of elements, maintaining the same order\n pub fn from_vec<T:Copy>(vec: &[T]) -> @mut DList<T> {\n     do vec::foldl(DList(), vec) |list,data| {\n         list.push(*data); // Iterating left-to-right -- add newly to the tail."}, {"sha": "70beaa58d07b72da055860357caefb410aab08bc", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n // Simple Extensible Binary Markup Language (ebml) reader and writer on a"}, {"sha": "5cc0875cb51b5b3d9b56275da4a93893321fdac9", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -94,6 +94,8 @@ total line count).\n     }\n */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::io::ReaderUtil;"}, {"sha": "076126e04329caa326b4f2044bb182686e648932", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -14,6 +14,8 @@ Simple compression\n \n */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::libc::{c_void, size_t, c_int};"}, {"sha": "2f5a43d8e84dde674ec31de67b39ae376b23efa0", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -47,6 +47,8 @@ block the scheduler thread, so will their pipes.\n \n */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n // The basic send/recv interface FlatChan and PortChan will implement"}, {"sha": "4d3a757e80ed4b926df6bf7b46682f10b6555ac3", "filename": "src/libextra/future.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -23,6 +23,8 @@\n  * ~~~\n  */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::cast;"}, {"sha": "294b8fec0423648685c8b6f7af91d5280c614891", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -78,6 +78,8 @@\n  * ```\n  */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::cmp::Eq;"}, {"sha": "91424ae3ba2c0d6a749352549c54717232d3a59c", "filename": "src/libextra/io_util.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -11,20 +11,24 @@\n use core::io::{Reader, BytesReader};\n use core::io;\n \n+/// An implementation of the io::Reader interface which reads a buffer of bytes\n pub struct BufReader {\n+    /// The buffer of bytes to read\n     buf: ~[u8],\n+    /// The current position in the buffer of bytes\n     pos: @mut uint\n }\n \n-pub impl BufReader {\n+impl BufReader {\n+    /// Creates a new buffer reader for the specified buffer\n     pub fn new(v: ~[u8]) -> BufReader {\n         BufReader {\n             buf: v,\n             pos: @mut 0\n         }\n     }\n \n-    priv fn as_bytes_reader<A>(&self, f: &fn(&BytesReader) -> A) -> A {\n+    fn as_bytes_reader<A>(&self, f: &fn(&BytesReader) -> A) -> A {\n         // Recreating the BytesReader state every call since\n         // I can't get the borrowing to work correctly\n         let bytes_reader = BytesReader {"}, {"sha": "48a3288f809036d7d8007d4ecc5bf684c29d9d86", "filename": "src/libextra/json.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -43,9 +43,14 @@ pub type List = ~[Json];\n pub type Object = HashMap<~str, Json>;\n \n #[deriving(Eq)]\n+/// If an error occurs while parsing some JSON, this is the structure which is\n+/// returned\n pub struct Error {\n+    /// The line number at which the error occurred\n     line: uint,\n+    /// The column number at which the error occurred\n     col: uint,\n+    /// A message describing the type of the error\n     msg: @~str,\n }\n \n@@ -75,10 +80,13 @@ fn spaces(n: uint) -> ~str {\n     return ss;\n }\n \n+/// A structure for implementing serialization to JSON.\n pub struct Encoder {\n     priv wr: @io::Writer,\n }\n \n+/// Creates a new JSON encoder whose output will be written to the writer\n+/// specified.\n pub fn Encoder(wr: @io::Writer) -> Encoder {\n     Encoder {\n         wr: wr\n@@ -228,11 +236,14 @@ impl serialize::Encoder for Encoder {\n     }\n }\n \n+/// Another encoder for JSON, but prints out human-readable JSON instead of\n+/// compact data\n pub struct PrettyEncoder {\n     priv wr: @io::Writer,\n     priv indent: uint,\n }\n \n+/// Creates a new encoder whose output will be written to the specified writer\n pub fn PrettyEncoder(wr: @io::Writer) -> PrettyEncoder {\n     PrettyEncoder {\n         wr: wr,\n@@ -468,6 +479,7 @@ pub fn to_pretty_str(json: &Json) -> ~str {\n     io::with_str_writer(|wr| to_pretty_writer(wr, json))\n }\n \n+#[allow(missing_doc)]\n pub struct Parser {\n     priv rdr: @io::Reader,\n     priv ch: char,\n@@ -846,10 +858,12 @@ pub fn from_str(s: &str) -> Result<Json, Error> {\n     }\n }\n \n+/// A structure to decode JSON to values in rust.\n pub struct Decoder {\n     priv stack: ~[Json],\n }\n \n+/// Creates a new decoder instance for decoding the specified JSON value.\n pub fn Decoder(json: Json) -> Decoder {\n     Decoder {\n         stack: ~[json]\n@@ -1200,7 +1214,11 @@ impl Ord for Json {\n     fn gt(&self, other: &Json) -> bool { (*other).lt(&(*self))  }\n }\n \n-trait ToJson { fn to_json(&self) -> Json; }\n+/// A trait for converting values to JSON\n+trait ToJson {\n+    /// Converts the value of `self` to an instance of JSON\n+    fn to_json(&self) -> Json;\n+}\n \n impl ToJson for Json {\n     fn to_json(&self) -> Json { copy *self }"}, {"sha": "0f05e50ea7024709253374760302cc059c8fd975", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -21,6 +21,8 @@ struct Quad {\n     d: u32\n }\n \n+/// Calculates the md4 hash of the given slice of bytes, returning the 128-bit\n+/// result as a quad of u32's\n pub fn md4(msg: &[u8]) -> Quad {\n     // subtle: if orig_len is merely uint, then the code below\n     // which performs shifts by 32 bits or more has undefined\n@@ -105,6 +107,8 @@ pub fn md4(msg: &[u8]) -> Quad {\n     return Quad {a: a, b: b, c: c, d: d};\n }\n \n+/// Calculates the md4 hash of a slice of bytes, returning the hex-encoded\n+/// version of the hash\n pub fn md4_str(msg: &[u8]) -> ~str {\n     let Quad {a, b, c, d} = md4(msg);\n     fn app(a: u32, b: u32, c: u32, d: u32, f: &fn(u32)) {\n@@ -123,6 +127,8 @@ pub fn md4_str(msg: &[u8]) -> ~str {\n     result\n }\n \n+/// Calculates the md4 hash of a string, returning the hex-encoded version of\n+/// the hash\n pub fn md4_text(msg: &str) -> ~str { md4_str(str::to_bytes(msg)) }\n \n #[test]"}, {"sha": "e92523726dfaab9d4121ff5c275b4c713cbd8f88", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::libc;"}, {"sha": "c3a0463c2fc8745ce6ff352a16e6d2845285035c", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -11,6 +11,8 @@\n //! High-level interface to libuv's TCP functionality\n // FIXME #4425: Need FFI fixes\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use future;"}, {"sha": "fa7295923a0084f3890054d30af3d601cf5f214e", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::cmp::Eq;"}, {"sha": "adbaf89e16c470e76a0132aef49d985c7318a221", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -597,6 +597,8 @@ impl BigUint {\n     }\n \n \n+    /// Converts this big integer into a uint, returning the uint::max_value if\n+    /// it's too large to fit in a uint.\n     pub fn to_uint(&self) -> uint {\n         match self.data.len() {\n             0 => 0,"}, {"sha": "10bfe9409daa4b07cde287ec72ae800561eb0653", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -25,7 +25,9 @@ use core::num::{Zero,One,ToStrRadix};\n /// A complex number in Cartesian form.\n #[deriving(Eq,Clone)]\n pub struct Cmplx<T> {\n+    /// Real portion of the complex number\n     re: T,\n+    /// Imaginary portion of the complex number\n     im: T\n }\n "}, {"sha": "1a8ab75b3dd0d7ad205220521cc74417bb6c6ba8", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n //! Rational numbers\n \n use core::prelude::*;\n@@ -22,6 +21,7 @@ use super::bigint::BigInt;\n \n /// Represents the ratio between 2 numbers.\n #[deriving(Clone)]\n+#[allow(missing_doc)]\n pub struct Ratio<T> {\n     numer: T,\n     denom: T\n@@ -49,7 +49,7 @@ impl<T: Clone + Integer + Ord>\n         Ratio { numer: numer, denom: denom }\n     }\n \n-    // Create a new Ratio. Fails if `denom == 0`.\n+    /// Create a new Ratio. Fails if `denom == 0`.\n     #[inline(always)]\n     pub fn new(numer: T, denom: T) -> Ratio<T> {\n         if denom == Zero::zero() {"}, {"sha": "49fbf06406f4e4175704125c3b8ae2a5ae57d68e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -17,6 +17,7 @@ use core::unstable::intrinsics::{move_val_init, init};\n use core::util::{replace, swap};\n use core::vec;\n \n+#[allow(missing_doc)]\n pub struct PriorityQueue<T> {\n     priv data: ~[T],\n }"}, {"sha": "381b8ac05ba3611752da152faba7cb5f1ae9eb57", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n /** Task-local reference counted smart pointers\n \n Task-local reference counted smart pointers are an alternative to managed boxes with deterministic"}, {"sha": "413a498a20ec59e5f8595274fc780783a6a0bfd1", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -33,6 +33,8 @@\n  * * access to a character by index is logarithmic (linear in strings);\n  */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::str;"}, {"sha": "494f0c8ea815f03376e1a50894c8620488b0b46d", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Semver parsing and logic\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::char;"}, {"sha": "4d2b8d0b50a282fff7bca88abc296e0bd466f9da", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -14,6 +14,7 @@\n Core encoding and decoding interfaces.\n */\n \n+#[allow(missing_doc)];\n #[forbid(non_camel_case_types)];\n \n use core::prelude::*;"}, {"sha": "98392fc41e1bcf3ba7d03dfebebc88afe2dc76a9", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -23,6 +23,7 @@ use core::uint;\n use core::util::replace;\n use core::vec;\n \n+#[allow(missing_doc)]\n pub struct SmallIntMap<T> {\n     priv v: ~[Option<T>],\n }\n@@ -186,6 +187,9 @@ pub impl<V:Copy> SmallIntMap<V> {\n     }\n }\n \n+/// A set implemented on top of the SmallIntMap type. This set is always a set\n+/// of integers, and the space requirements are on the order of the highest\n+/// valued integer in the set.\n pub struct SmallIntSet {\n     priv map: SmallIntMap<()>\n }"}, {"sha": "420c63efab5d3d7a1157a1ae4eedfa372a5779f1", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -167,6 +167,7 @@ pub fn quick_sort3<T:Copy + Ord + Eq>(arr: &mut [T]) {\n     qsort3(arr, 0, (len - 1) as int);\n }\n \n+#[allow(missing_doc)]\n pub trait Sort {\n     fn qsort(self);\n }\n@@ -179,6 +180,7 @@ static MIN_MERGE: uint = 64;\n static MIN_GALLOP: uint = 7;\n static INITIAL_TMP_STORAGE: uint = 128;\n \n+#[allow(missing_doc)]\n pub fn tim_sort<T:Copy + Ord>(array: &mut [T]) {\n     let size = array.len();\n     if size < 2 {"}, {"sha": "d224777ded702dfe3265f12445b6517d8eb4dcf0", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::vec;"}, {"sha": "a81ab3005f6d1b42b04346c2302bc22dc8d585fb", "filename": "src/libextra/std.rc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -27,8 +27,12 @@ not required in or otherwise suitable for the core library.\n #[crate_type = \"lib\"];\n \n #[deny(non_camel_case_types)];\n+#[deny(missing_doc)];\n+\n+// NOTE: remove these two attributes after the next snapshot\n+#[no_core]; // for stage0\n+#[allow(unrecognized_lint)]; // otherwise stage0 is seriously ugly\n \n-#[no_core];\n #[no_std];\n \n extern mod core(name = \"std\", vers = \"0.7-pre\");"}, {"sha": "06bc3167040d2fc45e16b651cd3aa92751df147d", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n "}, {"sha": "6d0bd8881950040cbe338b7758db7d862eb9e710", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -16,6 +16,8 @@ use core::os;\n use core::rand::RngUtil;\n use core::rand;\n \n+/// Attempts to make a temporary directory inside of `tmpdir` whose name will\n+/// have the suffix `suffix`. If no directory can be created, None is returned.\n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let mut r = rand::rng();\n     for 1000.times {"}, {"sha": "a76852dc6615ab53d5facdec88617d5b693d7eb5", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Simple ANSI color library\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::io;"}, {"sha": "8603d0f814a71fcd505a3712dbf3c92fa2e768cb", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use core::i32;"}, {"sha": "e6db84e855cf5cd83bf0065fc1f618e39c20e78f", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -34,6 +34,7 @@ use core::util::{swap, replace};\n //   * union: |\n // These would be convenient since the methods work like `each`\n \n+#[allow(missing_doc)]\n pub struct TreeMap<K, V> {\n     priv root: Option<~TreeNode<K, V>>,\n     priv length: uint\n@@ -242,6 +243,9 @@ impl<'self, T> Iterator<&'self T> for TreeSetIterator<'self, T> {\n     }\n }\n \n+/// A implementation of the `Set` trait on top of the `TreeMap` container. The\n+/// only requirement is that the type of the elements contained ascribes to the\n+/// `TotalOrd` trait.\n pub struct TreeSet<T> {\n     priv map: TreeMap<T, ()>\n }"}, {"sha": "3bd05a4153447147637b190e734ce524f13e5c5b", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[forbid(deprecated_mode)];\n+#[allow(missing_doc)];\n \n pub mod icu {\n     pub type UBool = u8;"}, {"sha": "817dfa28aeedfb5b8dd10f94b051c347889bdc08", "filename": "src/libextra/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_iotask.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -15,6 +15,8 @@\n  * `interact` function you can execute code in a uv callback.\n  */\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use ll = uv_ll;"}, {"sha": "2cb2eea88283bcc77bcccba47a69b36d51a82ade", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -31,6 +31,7 @@\n  */\n \n #[allow(non_camel_case_types)]; // C types\n+#[allow(missing_doc)];\n \n use core::prelude::*;\n "}, {"sha": "19913fb92f47f1b5e77609f3dded05ea8705bbd7", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use core::prelude::*;\n \n use json;"}, {"sha": "de1148e431b8475b37d59ba3aed8c22b1849e702", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/395685079a2ef21c93a90ff6ccac2873b3013c7f/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=395685079a2ef21c93a90ff6ccac2873b3013c7f", "patch": "@@ -10,6 +10,8 @@\n \n //! Process spawning.\n \n+#[allow(missing_doc)];\n+\n use cast;\n use comm::{stream, SharedChan, GenericChan, GenericPort};\n use int;"}]}