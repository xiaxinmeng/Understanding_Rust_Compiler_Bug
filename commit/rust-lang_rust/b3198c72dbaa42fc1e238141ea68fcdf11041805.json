{"sha": "b3198c72dbaa42fc1e238141ea68fcdf11041805", "node_id": "C_kwDOAAsO6NoAKGIzMTk4YzcyZGJhYTQyZmMxZTIzODE0MWVhNjhmY2RmMTEwNDE4MDU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-13T19:43:07Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-18T14:29:33Z"}, "message": "Add missing register class conversion for inline asm", "tree": {"sha": "6140065582f29528ec2f23135732addc2cb9075f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6140065582f29528ec2f23135732addc2cb9075f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3198c72dbaa42fc1e238141ea68fcdf11041805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3198c72dbaa42fc1e238141ea68fcdf11041805", "html_url": "https://github.com/rust-lang/rust/commit/b3198c72dbaa42fc1e238141ea68fcdf11041805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3198c72dbaa42fc1e238141ea68fcdf11041805/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618553b9b4a5996c23285a8efc62f29a940208e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/618553b9b4a5996c23285a8efc62f29a940208e6", "html_url": "https://github.com/rust-lang/rust/commit/618553b9b4a5996c23285a8efc62f29a940208e6"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "3e1b54dcf3bdb619d382ee2d16214a4265fbd276", "filename": "src/asm.rs", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b3198c72dbaa42fc1e238141ea68fcdf11041805/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3198c72dbaa42fc1e238141ea68fcdf11041805/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=b3198c72dbaa42fc1e238141ea68fcdf11041805", "patch": "@@ -564,56 +564,71 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n                 _ => unimplemented!(),\n             }\n         },\n+        // They can be retrieved from https://gcc.gnu.org/onlinedocs/gcc/Machine-Constraints.html\n         InlineAsmRegOrRegClass::RegClass(reg) => match reg {\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => unimplemented!(),\n-            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => unimplemented!(),\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => \"w\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => \"x\",\n+            InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n+            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n-            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => unimplemented!(),\n-            InlineAsmRegClass::Avr(_) => unimplemented!(),\n-            InlineAsmRegClass::Bpf(_) => unimplemented!(),\n-            InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => unimplemented!(),\n-            InlineAsmRegClass::Msp430(_) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => unimplemented!(),\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => unimplemented!(),\n-            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => unimplemented!(),\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n+            | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"t\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_upper) => \"d\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_pair) => \"r\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_iw) => \"w\",\n+            InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_ptr) => \"e\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n+            InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => \"d\", // more specific than \"r\"\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::Msp430(Msp430InlineAsmRegClass::reg) => \"r\",\n+            // https://github.com/gcc-mirror/gcc/blob/master/gcc/config/nvptx/nvptx.md -> look for\n+            // \"define_constraint\".\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n+\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => \"b\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n             | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n                 unreachable!(\"clobber-only\")\n             },\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => unimplemented!(),\n-            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => unimplemented!(),\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => \"Q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => \"q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"Yk\",\n-            InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => unimplemented!(),\n-            InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n             InlineAsmRegClass::X86(\n-                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg,\n+                X86InlineAsmRegClass::kreg0\n+                | X86InlineAsmRegClass::x87_reg\n+                | X86InlineAsmRegClass::mmx_reg\n+                | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"GCC backend does not support SPIR-V\")\n             }\n-            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => unimplemented!(),\n+            InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Err => unreachable!(),\n         }\n     };"}]}