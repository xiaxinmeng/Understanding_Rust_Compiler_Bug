{"sha": "c8e05fc1c61987682ca42fc65bde0d7c11affc65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTA1ZmMxYzYxOTg3NjgyY2E0MmZjNjViZGUwZDdjMTFhZmZjNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T16:41:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T16:41:57Z"}, "message": "Auto merge of #5881 - wiomoc:feature/single-char-push_str, r=ebroto,flip1995\n\nLint `push_str` with a single-character string literal\n\nFixes #5875\nchangelog:  `* [single_char_push_str]`", "tree": {"sha": "dda7005d6b66714418dd687e2f7ad6050c85bc11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda7005d6b66714418dd687e2f7ad6050c85bc11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e05fc1c61987682ca42fc65bde0d7c11affc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e05fc1c61987682ca42fc65bde0d7c11affc65", "html_url": "https://github.com/rust-lang/rust/commit/c8e05fc1c61987682ca42fc65bde0d7c11affc65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e05fc1c61987682ca42fc65bde0d7c11affc65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e522ca3c8d980f51c521512a6740849bf78cdcbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e522ca3c8d980f51c521512a6740849bf78cdcbf", "html_url": "https://github.com/rust-lang/rust/commit/e522ca3c8d980f51c521512a6740849bf78cdcbf"}, {"sha": "b381ade1795f36149e36a646cdc83ee2fff032bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b381ade1795f36149e36a646cdc83ee2fff032bf", "html_url": "https://github.com/rust-lang/rust/commit/b381ade1795f36149e36a646cdc83ee2fff032bf"}], "stats": {"total": 165, "additions": 151, "deletions": 14}, "files": [{"sha": "50fe7612909b8b61d7c234f928f6cfcb8e2294d2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -1699,6 +1699,7 @@ Released 2018-09-13\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n+[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else"}, {"sha": "518e6905eff6a07461c7237c3ddd8ee8bbb23684", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -678,6 +678,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n         &methods::SINGLE_CHAR_PATTERN,\n+        &methods::SINGLE_CHAR_PUSH_STR,\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n@@ -1352,6 +1353,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n+        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n@@ -1536,6 +1538,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::WRONG_SELF_CONVENTION),"}, {"sha": "614773a7e26bf1faf10a0cfbd42b2e15737defa4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 75, "deletions": 14, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -1306,6 +1306,29 @@ declare_clippy_lint! {\n     \"using `.iter().next()` on a sliced array, which can be shortened to just `.get()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Warns when using push_str with a single-character string literal,\n+    /// and push with a char would work fine.\n+    ///\n+    /// **Why is this bad?** It's less clear that we are pushing a single character\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push_str(\"R\");\n+    /// ```\n+    /// Could be written as\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push('R');\n+    /// ```\n+    pub SINGLE_CHAR_PUSH_STR,\n+    style,\n+    \"`push_str()` used with a single-character string literal as parameter\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1327,6 +1350,7 @@ declare_lint_pass!(Methods => [\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n+    SINGLE_CHAR_PUSH_STR,\n     SEARCH_IS_SOME,\n     TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n@@ -1441,6 +1465,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     inefficient_to_string::lint(cx, expr, &args[0], self_ty);\n                 }\n \n+                if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+                    if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n+                        lint_single_char_push_string(cx, expr, args);\n+                    }\n+                }\n+\n                 match self_ty.kind {\n                     ty::Ref(_, ty, _) if ty.kind == ty::Str => {\n                         for &(method, pos) in &PATTERN_METHODS {\n@@ -3124,15 +3154,18 @@ fn lint_chars_last_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryEx\n     }\n }\n \n-/// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>) {\n+fn get_hint_if_single_char_arg(\n+    cx: &LateContext<'_>,\n+    arg: &hir::Expr<'_>,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n     if_chain! {\n         if let hir::ExprKind::Lit(lit) = &arg.kind;\n         if let ast::LitKind::Str(r, style) = lit.node;\n-        if r.as_str().len() == 1;\n+        let string = r.as_str();\n+        if string.len() == 1;\n         then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            let snip = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n+            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n             let ch = if let ast::StrStyle::Raw(nhash) = style {\n                 let nhash = nhash as usize;\n                 // for raw string: r##\"a\"##\n@@ -3142,19 +3175,47 @@ fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr\n                 &snip[1..(snip.len() - 1)]\n             };\n             let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n-            span_lint_and_sugg(\n-                cx,\n-                SINGLE_CHAR_PATTERN,\n-                arg.span,\n-                \"single-character string constant used as pattern\",\n-                \"try using a `char` instead\",\n-                hint,\n-                applicability,\n-            );\n+            Some(hint)\n+        } else {\n+            None\n         }\n     }\n }\n \n+/// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n+fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability) {\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_PATTERN,\n+            arg.span,\n+            \"single-character string constant used as pattern\",\n+            \"try using a `char` instead\",\n+            hint,\n+            applicability,\n+        );\n+    }\n+}\n+\n+/// lint for length-1 `str`s as argument for `push_str`\n+fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n+        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_PUSH_STR,\n+            expr.span,\n+            \"calling `push_str()` using a single-character string literal\",\n+            \"consider using `push` with a character literal\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}\n+\n /// Checks for the `USELESS_ASREF` lint.\n fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_ref_args: &[hir::Expr<'_>]) {\n     // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\""}, {"sha": "ffab0395120aa5ff237f10f10e49ab240edb4273", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -84,6 +84,7 @@ pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n+pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];"}, {"sha": "f76a215007c457ede4b250d78b6dcf363d042c04", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -2012,6 +2012,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"single_char_push_str\",\n+        group: \"style\",\n+        desc: \"`push_str()` used with a single-character string literal as parameter\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"single_component_path_imports\",\n         group: \"style\","}, {"sha": "0812c026a644fbdd84f05569edc5cf954a8a109f", "filename": "tests/ui/single_char_push_str.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.push('R');\n+    string.push('\\'');\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push('\\x52');\n+    string.push('\\u{0052}');\n+    string.push('a');\n+}"}, {"sha": "ab293bbe4eeb5ce8171ec28f610410a45f2d5cb8", "filename": "tests/ui/single_char_push_str.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.push_str(\"R\");\n+    string.push_str(\"'\");\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push_str(\"\\x52\");\n+    string.push_str(\"\\u{0052}\");\n+    string.push_str(r##\"a\"##);\n+}"}, {"sha": "0e9bdaa23e7e8474accd8321884cc0861db8405c", "filename": "tests/ui/single_char_push_str.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e05fc1c61987682ca42fc65bde0d7c11affc65/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=c8e05fc1c61987682ca42fc65bde0d7c11affc65", "patch": "@@ -0,0 +1,34 @@\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:6:5\n+   |\n+LL |     string.push_str(\"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n+   |\n+   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:7:5\n+   |\n+LL |     string.push_str(\"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:12:5\n+   |\n+LL |     string.push_str(\"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:13:5\n+   |\n+LL |     string.push_str(\"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:14:5\n+   |\n+LL |     string.push_str(r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n+\n+error: aborting due to 5 previous errors\n+"}]}