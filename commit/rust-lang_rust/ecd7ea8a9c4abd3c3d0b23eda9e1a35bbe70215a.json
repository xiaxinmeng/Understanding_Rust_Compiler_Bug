{"sha": "ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "node_id": "C_kwDOAAsO6NoAKGVjZDdlYThhOWM0YWJkM2MzZDBiMjNlZGE5ZTFhMzViYmU3MDIxNWE", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T14:15:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T14:15:16Z"}, "message": "Merge branch 'rust-lang:master' into must-use-alloc-constructors", "tree": {"sha": "d5e629669b27c4cd861aae8e5aff710b1ebcf334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e629669b27c4cd861aae8e5aff710b1ebcf334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYvV0CRBK7hj4Ov3rIwAAMk4IAD8rtvm4rXtJa5+etYPL+MjI\n16zJ+J3n1NRd9fiLEsxgwfSP/tVJWUYp0RKONvemiCIppSNMo670tw9JEbkTWCsT\neA9attRfuO+A8i/BxVfpfGb9aZpyBRzJH4YO/C6+Vd5IXHf+0Ud1yAvbkM+LPjv7\nPM0KLwHcMZTzXrG9Yo44/OSKx4pNcwI+EttOwCiepPur/4CyTjcYwgIkX+nfm70z\nPtbiLp2VpvuWOKyx6ZSLA8rMvMVxIStrGxvrhk+kLGYWazMa2LCuhQK0aGvxvTRc\nDJQy637UnO8Hj49DkeRzbsP5ynpaZZlZRP5a1Tw0WouSh5cXl4TewSR77FC2NIY=\n=gty8\n-----END PGP SIGNATURE-----\n", "payload": "tree d5e629669b27c4cd861aae8e5aff710b1ebcf334\nparent 58cc18c56b9d9422b376fdf5c51c20fb0e494e66\nparent 9e8356c6adf119f983651d533d2b307544086cf9\nauthor John Kugelman <john@kugelman.name> 1633875316 -0400\ncommitter GitHub <noreply@github.com> 1633875316 -0400\n\nMerge branch 'rust-lang:master' into must-use-alloc-constructors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "html_url": "https://github.com/rust-lang/rust/commit/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/58cc18c56b9d9422b376fdf5c51c20fb0e494e66", "html_url": "https://github.com/rust-lang/rust/commit/58cc18c56b9d9422b376fdf5c51c20fb0e494e66"}, {"sha": "9e8356c6adf119f983651d533d2b307544086cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8356c6adf119f983651d533d2b307544086cf9", "html_url": "https://github.com/rust-lang/rust/commit/9e8356c6adf119f983651d533d2b307544086cf9"}], "stats": {"total": 277, "additions": 216, "deletions": 61}, "files": [{"sha": "1bc924d3b90b0f5db6ba18c25375c728c9f2e2b3", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -175,7 +175,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n             // should use dllimport for functions.\n             if cx.use_dll_storage_attrs\n                 && tcx.is_dllimport_foreign_item(instance_def_id)\n-                && tcx.sess.target.env != \"gnu\"\n+                && !matches!(tcx.sess.target.env.as_ref(), \"gnu\" | \"uclibc\")\n             {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }"}, {"sha": "d0c7379c2d94d5aab856d8fb9ffbda0c6f795008", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -3012,7 +3012,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         };\n \n         let target = &self.tcx.sess.target;\n-        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n+        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\" | \"uclibc\");\n         let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n             target.os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n@@ -3110,7 +3110,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             if arg.layout.is_zst() {\n                 // For some forsaken reason, x86_64-pc-windows-gnu\n                 // doesn't ignore zero-sized struct arguments.\n-                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl}.\n+                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.\n                 if is_return\n                     || rust_abi\n                     || (!win_x64_gnu"}, {"sha": "d230f77bde284bb72b6a8e7056e2e2809cb21f6c", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+// This target is for uclibc Linux on ARMv7 without NEON or\n+// thumb-mode. See the thumbv7neon variant for enabling both.\n+\n+pub fn target() -> Target {\n+    let base = super::linux_uclibc_base::opts();\n+    Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+\n+        options: TargetOptions {\n+            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            mcount: \"_mcount\".to_string(),\n+            abi: \"eabihf\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "ff5dfa3f746254b0364c4faf37b17f81e941346b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -952,6 +952,8 @@ supported_targets! {\n     (\"bpfel-unknown-none\", bpfel_unknown_none),\n \n     (\"armv6k-nintendo-3ds\", armv6k_nintendo_3ds),\n+\n+    (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n }\n \n /// Warnings encountered when parsing the target `json`."}, {"sha": "2ba6c8d830ede552890c37898353615bf2a69dc8", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -307,6 +307,9 @@ cfg_if::cfg_if! {\n         #[link(name = \"zircon\")]\n         #[link(name = \"fdio\")]\n         extern \"C\" {}\n+    } else if #[cfg(all(target_os = \"linux\", target_env = \"uclibc\"))] {\n+        #[link(name = \"dl\")]\n+        extern \"C\" {}\n     }\n }\n "}, {"sha": "6f4863057aba431b0635eb11a4671e335e573913", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -594,7 +594,8 @@ pub mod guard {\n                 Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n                 Some(stackaddr - guardsize..stackaddr)\n-            } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+            } else if cfg!(all(target_os = \"linux\", any(target_env = \"gnu\", target_env = \"uclibc\")))\n+            {\n                 // glibc used to include the guard area within the stack, as noted in the BUGS\n                 // section of `man pthread_attr_getguardsize`.  This has been corrected starting\n                 // with glibc 2.27, and in some distro backports, so the guard is now placed at the"}, {"sha": "e263780bf38796dbdae16e73b90bb8774edf39eb", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -63,7 +63,7 @@ cfg_if::cfg_if! {\n // don't want to duplicate it here.\n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     not(feature = \"system-llvm-libunwind\")\n ))]\n@@ -72,7 +72,7 @@ extern \"C\" {}\n \n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     feature = \"system-llvm-libunwind\"\n ))]"}, {"sha": "bbeab598f2292870baca8e070388fd632881b592", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -220,6 +220,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n+`armv7-unknown-linux-uclibceabihf` | \u2713 | ? | ARMv7 Linux uClibc\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |"}, {"sha": "b3a4275c6ee92a3e19298067076844e7dbde6818", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -0,0 +1,66 @@\n+# armv7-unknown-linux-uclibceabihf\n+\n+**Tier: 3**\n+\n+This tier supports the ARMv7 processor running a Linux kernel and uClibc-ng standard library.  It provides full support for rust and the rust standard library.\n+\n+## Designated Developers\n+\n+* [@skrap](https://github.com/skrap)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires a cross toolchain.  You can find suitable pre-built toolchains at [bootlin](https://toolchains.bootlin.com/) or build one yourself via [buildroot](https://buildroot.org).\n+\n+## Building\n+\n+### Get a C toolchain\n+\n+Compiling rust for this target has been tested on `x86_64` linux hosts.  Other host types have not been tested, but may work, if you can find a suitable cross compilation toolchain for them.\n+\n+If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2020.08-1.tar.bz2), and unpack it into a directory.\n+\n+### Configure rust\n+\n+The target can be built by enabling it for a `rustc` build, by placing the following in `config.toml`:\n+\n+```toml\n+[build]\n+target = [\"armv7-unknown-linux-uclibceabihf\"]\n+stage = 2\n+\n+[target.armv7-unknown-linux-uclibceabihf]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/arm-buildroot-linux-uclibcgnueabihf-gcc\"\n+```\n+\n+### Build\n+\n+```sh\n+# in rust dir\n+./x.py build --stage 2\n+```\n+\n+## Building and Running Rust Programs\n+\n+To test cross-compiled binaries on a `x86_64` system, you can use the `qemu-arm` [userspace emulation](https://qemu-project.gitlab.io/qemu/user/main.html) program.  This avoids having a full emulated ARM system by doing dynamic binary translation and dynamic system call translation.  It lets you run ARM programs directly on your `x86_64` kernel.  It's very convenient!\n+\n+To use:\n+\n+* Install `qemu-arm` according to your distro.\n+* Link your built toolchain via:\n+  * `rustup toolchain link stage2 ${RUST}/build/x86_64-unknown-linux-gnu/stage2`\n+* Create a test program\n+\n+```sh\n+cargo new hello_world\n+cd hello_world\n+```\n+\n+* Build and run\n+\n+```sh\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_RUNNER=\"qemu-arm -L ${TOOLCHAIN}/arm-buildroot-linux-uclibcgnueabihf/sysroot/\" \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_LINKER=${TOOLCHAIN}/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \\\n+cargo +stage2 run --target armv7-unknown-linux-uclibceabihf\n+```"}, {"sha": "011d3cfcf72d7a1171356fdaff2c57d5a84f6ec0", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -1,6 +1,5 @@\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n-use std::error::Error as StdError;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -16,6 +15,7 @@ use rustc_span::symbol::sym;\n \n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n+use super::templates;\n use super::write_shared::write_shared;\n use super::{\n     collect_spans_and_sources, print_sidebar, settings, AllTypes, LinkFromSrc, NameDoc, StylePath,\n@@ -33,7 +33,6 @@ use crate::formats::FormatRenderer;\n use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n-use crate::html::static_files::PAGE;\n use crate::html::{layout, sources};\n \n /// Major driving force in all rustdoc rendering. This contains information\n@@ -225,7 +224,7 @@ impl<'tcx> Context<'tcx> {\n                 &self.shared.layout,\n                 &page,\n                 |buf: &mut _| print_sidebar(self, it, buf),\n-                |buf: &mut _| print_item(self, it, buf, &page),\n+                |buf: &mut _| print_item(self, &self.shared.templates, it, buf, &page),\n                 &self.shared.style_files,\n             )\n         } else {\n@@ -416,12 +415,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         };\n         let mut issue_tracker_base_url = None;\n         let mut include_sources = true;\n-\n-        let mut templates = tera::Tera::default();\n-        templates.add_raw_template(\"page.html\", PAGE).map_err(|e| Error {\n-            file: \"page.html\".into(),\n-            error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n-        })?;\n+        let templates = templates::load()?;\n \n         // Crawl the crate attributes looking for attributes which control how we're\n         // going to emit HTML"}, {"sha": "dc5aec3b084f56a3b062ae037f7acee57922ef8b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -31,6 +31,7 @@ mod tests;\n mod context;\n mod print_item;\n mod span_map;\n+mod templates;\n mod write_shared;\n \n crate use context::*;"}, {"sha": "4cfc57ac99588d5aa859424438111c0a6a8c44f3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -32,16 +32,41 @@ use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n+use serde::Serialize;\n+\n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n const ITEM_TABLE_ROW_OPEN: &'static str = \"<div class=\\\"item-row\\\">\";\n const ITEM_TABLE_ROW_CLOSE: &'static str = \"</div>\";\n \n-pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, page: &Page<'_>) {\n+// A component in a `use` path, like `string` in std::string::ToString\n+#[derive(Serialize)]\n+struct PathComponent<'a> {\n+    path: String,\n+    name: &'a str,\n+}\n+\n+#[derive(Serialize)]\n+struct ItemVars<'a> {\n+    page: &'a Page<'a>,\n+    static_root_path: &'a str,\n+    typ: &'a str,\n+    name: &'a str,\n+    item_type: &'a str,\n+    path_components: Vec<PathComponent<'a>>,\n+    stability_since_raw: &'a str,\n+    src_href: Option<&'a str>,\n+}\n+\n+pub(super) fn print_item(\n+    cx: &Context<'_>,\n+    templates: &tera::Tera,\n+    item: &clean::Item,\n+    buf: &mut Buffer,\n+    page: &Page<'_>,\n+) {\n     debug_assert!(!item.is_stripped());\n-    // Write the breadcrumb trail header for the top\n-    buf.write_str(\"<h1 class=\\\"fqn\\\"><span class=\\\"in-band\\\">\");\n-    let name = match *item.kind {\n+    let typ = match *item.kind {\n         clean::ModuleItem(_) => {\n             if item.is_crate() {\n                 \"Crate \"\n@@ -73,60 +98,54 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n             unreachable!();\n         }\n     };\n-    buf.write_str(name);\n-    if !item.is_primitive() && !item.is_keyword() {\n-        let cur = &cx.current;\n-        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n-        for (i, component) in cur.iter().enumerate().take(amt) {\n-            write!(\n-                buf,\n-                \"<a href=\\\"{}index.html\\\">{}</a>::<wbr>\",\n-                \"../\".repeat(cur.len() - i - 1),\n-                component\n-            );\n-        }\n-    }\n-    write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n-    write!(\n-        buf,\n-        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"Copy item path to clipboard\\\">\\\n-            <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n-                width=\\\"19\\\" height=\\\"18\\\" \\\n-                alt=\\\"Copy item path\\\">\\\n-         </button>\",\n-        static_root_path = page.get_static_root_path(),\n-        suffix = page.resource_suffix,\n-    );\n-\n-    buf.write_str(\"</span>\"); // in-band\n-    buf.write_str(\"<span class=\\\"out-of-band\\\">\");\n+    let mut stability_since_raw = Buffer::new();\n     render_stability_since_raw(\n-        buf,\n+        &mut stability_since_raw,\n         item.stable_since(cx.tcx()).as_deref(),\n         item.const_stability(cx.tcx()),\n         None,\n         None,\n     );\n-    buf.write_str(\n-        \"<span id=\\\"render-detail\\\">\\\n-                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n-                    title=\\\"collapse all docs\\\">\\\n-                    [<span class=\\\"inner\\\">&#x2212;</span>]\\\n-                </a>\\\n-            </span>\",\n-    );\n+    let stability_since_raw: String = stability_since_raw.into_inner();\n \n     // Write `src` tag\n     //\n     // When this item is part of a `crate use` in a downstream crate, the\n     // [src] link in the downstream documentation will actually come back to\n     // this page, and this link will be auto-clicked. The `id` attribute is\n     // used to find the link to auto-click.\n-    if cx.include_sources && !item.is_primitive() {\n-        write_srclink(cx, item, buf);\n-    }\n+    let src_href =\n+        if cx.include_sources && !item.is_primitive() { cx.src_href(item) } else { None };\n+\n+    let path_components = if item.is_primitive() || item.is_keyword() {\n+        vec![]\n+    } else {\n+        let cur = &cx.current;\n+        let amt = if item.is_mod() { cur.len() - 1 } else { cur.len() };\n+        cur.iter()\n+            .enumerate()\n+            .take(amt)\n+            .map(|(i, component)| PathComponent {\n+                path: \"../\".repeat(cur.len() - i - 1),\n+                name: component,\n+            })\n+            .collect()\n+    };\n+\n+    let item_vars = ItemVars {\n+        page: page,\n+        static_root_path: page.get_static_root_path(),\n+        typ: typ,\n+        name: &item.name.as_ref().unwrap().as_str(),\n+        item_type: &item.type_().to_string(),\n+        path_components: path_components,\n+        stability_since_raw: &stability_since_raw,\n+        src_href: src_href.as_deref(),\n+    };\n \n-    buf.write_str(\"</span></h1>\"); // out-of-band\n+    let teractx = tera::Context::from_serialize(item_vars).unwrap();\n+    let heading = templates.render(\"print_item.html\", &teractx).unwrap();\n+    buf.write_str(&heading);\n \n     match *item.kind {\n         clean::ModuleItem(ref m) => item_module(buf, cx, item, &m.items),"}, {"sha": "d1f182394479a5ea81952068dd5a50feafbe57de", "filename": "src/librustdoc/html/render/templates.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Ftemplates.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -0,0 +1,20 @@\n+use std::error::Error as StdError;\n+\n+use crate::error::Error;\n+\n+pub(crate) fn load() -> Result<tera::Tera, Error> {\n+    let mut templates = tera::Tera::default();\n+\n+    macro_rules! include_template {\n+        ($file:literal, $fullpath:literal) => {\n+            templates.add_raw_template($file, include_str!($fullpath)).map_err(|e| Error {\n+                file: $file.into(),\n+                error: format!(\"{}: {}\", e, e.source().map(|e| e.to_string()).unwrap_or_default()),\n+            })?\n+        };\n+    }\n+\n+    include_template!(\"page.html\", \"../templates/page.html\");\n+    include_template!(\"print_item.html\", \"../templates/print_item.html\");\n+    Ok(templates)\n+}"}, {"sha": "ccc25e6cc495fae43b31844288cfdbd3c728c341", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -70,8 +70,6 @@ crate static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/images/favicon.svg\n crate static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/images/favicon-16x16.png\");\n crate static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/images/favicon-32x32.png\");\n \n-crate static PAGE: &str = include_str!(\"templates/page.html\");\n-\n /// The built-in themes given to every documentation site.\n crate mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for"}, {"sha": "5a468f3cc1ea02cca9ba17dfc339a6b9d6090bdc", "filename": "src/librustdoc/html/templates/print_item.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=ecd7ea8a9c4abd3c3d0b23eda9e1a35bbe70215a", "patch": "@@ -0,0 +1,26 @@\n+<h1 class=\"fqn\"> {#- -#}\n+    <span class=\"in-band\"> {#- -#}\n+        {{-typ-}}\n+        {#- The breadcrumbs of the item path, like std::string -#}\n+        {%- for component in path_components -%}\n+        <a href=\"{{component.path | safe}}index.html\">{{component.name}}</a>::<wbr>\n+        {%- endfor -%}\n+        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n+        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+            <img src=\"{{static_root_path | safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n+                width=\"19\" height=\"18\" {# -#}\n+                alt=\"Copy item path\"> {#- -#}\n+        </button> {#- -#}\n+    </span> {#- -#}\n+    <span class=\"out-of-band\"> {#- -#}\n+        {{- stability_since_raw | safe -}}\n+        <span id=\"render-detail\"> {#- -#}\n+            <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n+                [<span class=\"inner\">&#x2212;</span>] {#- -#}\n+            </a> {#- -#}\n+        </span> {#- -#}\n+        {%- if src_href -%}\n+        <a class=\"srclink\" href=\"{{src_href | safe}}\" title=\"goto source code\">[src]</a>\n+        {%- endif -%}\n+    </span> {#- -#}\n+</h1> {#- -#}"}]}