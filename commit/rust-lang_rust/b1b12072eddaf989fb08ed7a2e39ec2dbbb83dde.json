{"sha": "b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjEyMDcyZWRkYWY5ODlmYjA4ZWQ3YTJlMzllYzJkYmJiODNkZGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-29T17:14:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-08T19:20:17Z"}, "message": "Start handling environment in trait resolution\n\nI.e. if we are inside a function with some where clauses, we assume these where\nclauses hold.", "tree": {"sha": "63bb052a39df80dcd0771a18a7a475df3e6a5fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63bb052a39df80dcd0771a18a7a475df3e6a5fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "html_url": "https://github.com/rust-lang/rust/commit/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638100dc8bea69cc4093d15f1641ed39a8d27a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/638100dc8bea69cc4093d15f1641ed39a8d27a43", "html_url": "https://github.com/rust-lang/rust/commit/638100dc8bea69cc4093d15f1641ed39a8d27a43"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "f8839ebd23a7e3ea1614e27910245753d6b61cad", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -27,10 +27,10 @@ use ra_prof::profile;\n use test_utils::tested_by;\n \n use super::{\n-    autoderef, method_resolution, op, primitive,\n+    autoderef, lower, method_resolution, op, primitive,\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, CallableDef, InEnvironment, ProjectionTy, Substs, TraitRef, Ty, TypableDef,\n-    TypeCtor,\n+    ApplicationTy, CallableDef, Environment, InEnvironment, ProjectionTy, Substs, TraitRef, Ty,\n+    TypableDef, TypeCtor,\n };\n use crate::{\n     adt::VariantDef,\n@@ -166,6 +166,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n     body: Arc<Body>,\n     resolver: Resolver,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n+    trait_env: Arc<Environment>,\n     obligations: Vec<Obligation>,\n     method_resolutions: FxHashMap<ExprId, Function>,\n     field_resolutions: FxHashMap<ExprId, StructField>,\n@@ -189,6 +190,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             var_unification_table: InPlaceUnificationTable::new(),\n             obligations: Vec::default(),\n             return_ty: Ty::Unknown, // set in collect_fn_signature\n+            trait_env: lower::trait_env(db, &resolver),\n             db,\n             body,\n             resolver,\n@@ -331,8 +333,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for obligation in obligations {\n             match &obligation {\n                 Obligation::Trait(tr) => {\n-                    let env = Arc::new(super::Environment); // FIXME add environment\n-                    let in_env = InEnvironment::new(env, tr.clone());\n+                    let in_env = InEnvironment::new(self.trait_env.clone(), tr.clone());\n                     let canonicalized = self.canonicalizer().canonicalize_trait_ref(in_env);\n                     let solution = self\n                         .db"}, {"sha": "ca47d6e96b1aa6cb521e1c6ce7055a5eb65dbfff", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -317,6 +317,18 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     Ty::from_hir(db, &resolver, type_ref)\n }\n \n+pub(crate) fn trait_env(db: &impl HirDatabase, resolver: &Resolver) -> Arc<super::Environment> {\n+    let predicates = resolver\n+        .where_predicates_in_scope()\n+        .map(|pred| {\n+            TraitRef::for_where_predicate(db, &resolver, pred)\n+                .map_or(GenericPredicate::Error, GenericPredicate::Implemented)\n+        })\n+        .collect::<Vec<_>>();\n+\n+    Arc::new(super::Environment { predicates })\n+}\n+\n /// Resolve the where clause(s) of an item with generics.\n pub(crate) fn generic_predicates_query(\n     db: &impl HirDatabase,"}, {"sha": "40f5eabf0fd7151d051ee5e143f79cdfce68c6b3", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -7,7 +7,7 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n-use super::{autoderef, Canonical, Environment, InEnvironment, TraitRef};\n+use super::{autoderef, lower, Canonical, Environment, InEnvironment, TraitRef};\n use crate::{\n     generics::HasGenericParams,\n     impl_block::{ImplBlock, ImplId, ImplItem},\n@@ -198,6 +198,8 @@ fn iterate_trait_method_candidates<T>(\n     mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n+    // FIXME: maybe put the trait_env behind a query (need to figure out good input parameters for that)\n+    let env = lower::trait_env(db, resolver);\n     'traits: for t in resolver.traits_in_scope(db) {\n         let data = t.trait_data(db);\n         // we'll be lazy about checking whether the type implements the\n@@ -209,8 +211,7 @@ fn iterate_trait_method_candidates<T>(\n                 let data = m.data(db);\n                 if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n-                        let env = Arc::new(super::Environment); // FIXME add environment\n-                        let trait_ref = canonical_trait_ref(db, env, t, ty.clone());\n+                        let trait_ref = canonical_trait_ref(db, env.clone(), t, ty.clone());\n                         if db.implements(krate, trait_ref).is_none() {\n                             continue 'traits;\n                         }"}, {"sha": "594e82af24ab8b8335cf60c10741632e81667d30", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -2950,6 +2950,66 @@ fn test(o: O<S>) {\n     assert_eq!(t, \"&str\");\n }\n \n+#[test]\n+fn generic_param_env_1() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Clone {}\n+trait Trait { fn foo(self) -> u128; }\n+struct S;\n+impl Clone for S {}\n+impl<T> Trait for T where T: Clone {}\n+fn test<T: Clone>(t: T) { t.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"u128\");\n+}\n+\n+#[test]\n+fn generic_param_env_1_not_met() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Clone {}\n+trait Trait { fn foo(self) -> u128; }\n+struct S;\n+impl Clone for S {}\n+impl<T> Trait for T where T: Clone {}\n+fn test<T>(t: T) { t.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n+#[test]\n+fn generic_param_env_2() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait { fn foo(self) -> u128; }\n+struct S;\n+impl Trait for S {}\n+fn test<T: Trait>(t: T) { t.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"u128\");\n+}\n+\n+#[test]\n+fn generic_param_env_2_not_met() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait { fn foo(self) -> u128; }\n+struct S;\n+impl Trait for S {}\n+fn test<T>(t: T) { t.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "e0c93550a16eed8ce1fd584e2b389e179f68ee60", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -72,11 +72,13 @@ fn solve(\n /// fn foo<T: Default>(t: T) {}\n /// ```\n /// we assume that `T: Default`.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct Environment;\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct Environment {\n+    pub predicates: Vec<GenericPredicate>,\n+}\n \n /// Something (usually a goal), along with an environment.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct InEnvironment<T> {\n     pub environment: Arc<Environment>,\n     pub value: T,"}, {"sha": "f36ff2fc63515c5e711a1334b5d50526187f389b", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=b1b12072eddaf989fb08ed7a2e39ec2dbbb83dde", "patch": "@@ -239,15 +239,28 @@ where\n impl ToChalk for Arc<super::Environment> {\n     type Chalk = Arc<chalk_ir::Environment>;\n \n-    fn to_chalk(self, _db: &impl HirDatabase) -> Arc<chalk_ir::Environment> {\n-        chalk_ir::Environment::new()\n+    fn to_chalk(self, db: &impl HirDatabase) -> Arc<chalk_ir::Environment> {\n+        let mut clauses = Vec::new();\n+        for pred in &self.predicates {\n+            if pred.is_error() {\n+                // for env, we just ignore errors\n+                continue;\n+            }\n+            if let GenericPredicate::Implemented(trait_ref) = pred {\n+                if blacklisted_trait(db, trait_ref.trait_) {\n+                    continue;\n+                }\n+            }\n+            clauses.push(pred.clone().to_chalk(db).cast());\n+        }\n+        chalk_ir::Environment::new().add_clauses(clauses)\n     }\n \n     fn from_chalk(\n         _db: &impl HirDatabase,\n         _env: Arc<chalk_ir::Environment>,\n     ) -> Arc<super::Environment> {\n-        Arc::new(super::Environment)\n+        unimplemented!()\n     }\n }\n "}]}