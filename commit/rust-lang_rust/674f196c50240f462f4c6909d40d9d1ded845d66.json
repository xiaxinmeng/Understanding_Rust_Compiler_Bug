{"sha": "674f196c50240f462f4c6909d40d9d1ded845d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NGYxOTZjNTAyNDBmNDYyZjRjNjkwOWQ0MGQ5ZDFkZWQ4NDVkNjY=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-10-11T06:32:19Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-11-22T22:44:05Z"}, "message": "Use Option::and_then instead of open-coding it", "tree": {"sha": "3baf74514d8b5391148193e13bf06ad69390f51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3baf74514d8b5391148193e13bf06ad69390f51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/674f196c50240f462f4c6909d40d9d1ded845d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/674f196c50240f462f4c6909d40d9d1ded845d66", "html_url": "https://github.com/rust-lang/rust/commit/674f196c50240f462f4c6909d40d9d1ded845d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/674f196c50240f462f4c6909d40d9d1ded845d66/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828461b4b27c4a955587887936e54057efc5e2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/828461b4b27c4a955587887936e54057efc5e2c1", "html_url": "https://github.com/rust-lang/rust/commit/828461b4b27c4a955587887936e54057efc5e2c1"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "9651d0505e684dddf42b076c0737a1ea71dc55e2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/674f196c50240f462f4c6909d40d9d1ded845d66/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674f196c50240f462f4c6909d40d9d1ded845d66/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=674f196c50240f462f4c6909d40d9d1ded845d66", "patch": "@@ -37,12 +37,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     /// `funclet_bb` member if it is not `None`.\n     fn funclet<'b, Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'b mut FunctionCx<'a, 'tcx, Bx>,\n+        fx: &'b FunctionCx<'a, 'tcx, Bx>,\n     ) -> Option<&'b Bx::Funclet> {\n-        match self.funclet_bb {\n-            Some(funcl) => fx.funclets[funcl].as_ref(),\n-            None => None,\n-        }\n+        self.funclet_bb.and_then(|funcl| fx.funclets[funcl].as_ref())\n     }\n \n     fn lltarget<Bx: BuilderMethods<'a, 'tcx>>("}]}