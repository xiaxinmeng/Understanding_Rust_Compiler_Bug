{"sha": "d5f15a8c18a80cce04641e4801deee94b3a0bf45", "node_id": "C_kwDOAAsO6NoAKGQ1ZjE1YThjMThhODBjY2UwNDY0MWU0ODAxZGVlZTk0YjNhMGJmNDU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-20T02:44:17Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-20T03:04:32Z"}, "message": "Replace all single character variable names", "tree": {"sha": "1ddab3b2565c02ecda72ea9f985bd04201261657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ddab3b2565c02ecda72ea9f985bd04201261657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f15a8c18a80cce04641e4801deee94b3a0bf45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHo0UAACgkQ+boUO5X/\nbYIjCw//Zf/qNCAbrJXWoYQ6Hvxi4yrKli4lIZDXyN6VVcME5Rt2x2SwOoacQNCO\ng0UiW0SikUQLqPHLYdp3mkKrCC64DAaFAobO/bsMVbG7OWt4Gl/c8BGxta9oPyO9\ne+SkGCGWs+fDYqAqv0nS+iR2LbMR3GRUgzmatNYWDiZ8Xw61YPyqPpbpbVpzkiJU\n4FJIvSuZ4tdUlz05SdMQhKp0VZb2xFNwUh3ObPNdSb/YIW9WtoaQXonOUqAPoKlt\ng0CwUKtEMnJxNyHx7xhmFqwdzQzIas0H7ZqIaWyt67+UQS8Wr8fg+1/VlUPrs77X\nBOLym/T1879Ecr5K1REK993zLjWgMPUvnyYYI8zwPp5kaj6CgJXAr+9PvXVYUaY6\nrkDHFxULiU/SbZjp+fgOLWsZdxWXeqvz9N+xVUeROAa+5yu5F2OruDHir8aLRbQ+\n/eTgnCM5cxxzWZ8eRDw0MGex2SjlBYI090kc0+eQ5KvYUJ9qdS+DfRpzdOfnAa2f\nah3JtAant05cYm2L6wIIyECmrCnGO0eAlN4ojdldZlilcAQLwE7FxLfRRtNYwnEj\nFuGYdYN+ZnThB5FUAZ6f/5kkQu6U5WCIfecYUlpt0QaEV757X/H059Kl1m6lh7cG\nh0XFEYfpSjmfQoTzxpVPFh8Y+aW1O7AFzBvTai9wTxGgzrDoVDg=\n=P+Tq\n-----END PGP SIGNATURE-----", "payload": "tree 1ddab3b2565c02ecda72ea9f985bd04201261657\nparent ea23a1fac7d053a05c2d38bfb48e1692a4dc90a3\nauthor David Tolnay <dtolnay@gmail.com> 1642646657 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642647872 -0800\n\nReplace all single character variable names\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f15a8c18a80cce04641e4801deee94b3a0bf45", "html_url": "https://github.com/rust-lang/rust/commit/d5f15a8c18a80cce04641e4801deee94b3a0bf45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f15a8c18a80cce04641e4801deee94b3a0bf45/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea23a1fac7d053a05c2d38bfb48e1692a4dc90a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea23a1fac7d053a05c2d38bfb48e1692a4dc90a3", "html_url": "https://github.com/rust-lang/rust/commit/ea23a1fac7d053a05c2d38bfb48e1692a4dc90a3"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "dadfac06847f47b22f2d5a4d9878fef344db2e3a", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d5f15a8c18a80cce04641e4801deee94b3a0bf45/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f15a8c18a80cce04641e4801deee94b3a0bf45/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=d5f15a8c18a80cce04641e4801deee94b3a0bf45", "patch": "@@ -248,8 +248,8 @@ impl Printer {\n     }\n \n     /// Be very careful with this!\n-    pub fn replace_last_token_still_buffered(&mut self, t: Token) {\n-        self.buf.last_mut().unwrap().token = t;\n+    pub fn replace_last_token_still_buffered(&mut self, token: Token) {\n+        self.buf.last_mut().unwrap().token = token;\n     }\n \n     fn scan_eof(&mut self) {\n@@ -259,13 +259,13 @@ impl Printer {\n         }\n     }\n \n-    fn scan_begin(&mut self, b: BeginToken) {\n+    fn scan_begin(&mut self, token: BeginToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n             self.buf.clear();\n         }\n-        let right = self.buf.push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n+        let right = self.buf.push(BufEntry { token: Token::Begin(token), size: -self.right_total });\n         self.scan_stack.push_back(right);\n     }\n \n@@ -278,25 +278,25 @@ impl Printer {\n         }\n     }\n \n-    fn scan_break(&mut self, b: BreakToken) {\n+    fn scan_break(&mut self, token: BreakToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n             self.buf.clear();\n         } else {\n             self.check_stack(0);\n         }\n-        let right = self.buf.push(BufEntry { token: Token::Break(b), size: -self.right_total });\n+        let right = self.buf.push(BufEntry { token: Token::Break(token), size: -self.right_total });\n         self.scan_stack.push_back(right);\n-        self.right_total += b.blank_space;\n+        self.right_total += token.blank_space;\n     }\n \n-    fn scan_string(&mut self, s: Cow<'static, str>) {\n+    fn scan_string(&mut self, string: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            self.print_string(&s);\n+            self.print_string(&string);\n         } else {\n-            let len = s.len() as isize;\n-            self.buf.push(BufEntry { token: Token::String(s), size: len });\n+            let len = string.len() as isize;\n+            self.buf.push(BufEntry { token: Token::String(string), size: len });\n             self.right_total += len;\n             self.check_stream();\n         }\n@@ -320,15 +320,15 @@ impl Printer {\n             let left = self.buf.pop_first().unwrap();\n \n             match &left.token {\n-                Token::String(s) => {\n-                    self.left_total += s.len() as isize;\n-                    self.print_string(s);\n+                Token::String(string) => {\n+                    self.left_total += string.len() as isize;\n+                    self.print_string(string);\n                 }\n-                Token::Break(b) => {\n-                    self.left_total += b.blank_space;\n-                    self.print_break(*b, left.size);\n+                Token::Break(token) => {\n+                    self.left_total += token.blank_space;\n+                    self.print_break(*token, left.size);\n                 }\n-                Token::Begin(b) => self.print_begin(*b, left.size),\n+                Token::Begin(token) => self.print_begin(*token, left.size),\n                 Token::End => self.print_end(),\n             }\n \n@@ -340,28 +340,28 @@ impl Printer {\n         }\n     }\n \n-    fn check_stack(&mut self, mut k: usize) {\n-        while let Some(&x) = self.scan_stack.back() {\n-            let mut entry = &mut self.buf[x];\n+    fn check_stack(&mut self, mut depth: usize) {\n+        while let Some(&index) = self.scan_stack.back() {\n+            let mut entry = &mut self.buf[index];\n             match entry.token {\n                 Token::Begin(_) => {\n-                    if k == 0 {\n+                    if depth == 0 {\n                         break;\n                     }\n                     self.scan_stack.pop_back().unwrap();\n                     entry.size += self.right_total;\n-                    k -= 1;\n+                    depth -= 1;\n                 }\n                 Token::End => {\n                     // paper says + not =, but that makes no sense.\n                     self.scan_stack.pop_back().unwrap();\n                     entry.size = 1;\n-                    k += 1;\n+                    depth += 1;\n                 }\n                 _ => {\n                     self.scan_stack.pop_back().unwrap();\n                     entry.size += self.right_total;\n-                    if k == 0 {\n+                    if depth == 0 {\n                         break;\n                     }\n                 }\n@@ -385,11 +385,13 @@ impl Printer {\n         })\n     }\n \n-    fn print_begin(&mut self, b: BeginToken, l: isize) {\n-        if l > self.space {\n-            let col = self.margin - self.space + b.offset;\n-            self.print_stack\n-                .push(PrintStackElem { offset: col, pbreak: PrintStackBreak::Broken(b.breaks) });\n+    fn print_begin(&mut self, token: BeginToken, size: isize) {\n+        if size > self.space {\n+            let col = self.margin - self.space + token.offset;\n+            self.print_stack.push(PrintStackElem {\n+                offset: col,\n+                pbreak: PrintStackBreak::Broken(token.breaks),\n+            });\n         } else {\n             self.print_stack.push(PrintStackElem { offset: 0, pbreak: PrintStackBreak::Fits });\n         }\n@@ -399,31 +401,31 @@ impl Printer {\n         self.print_stack.pop().unwrap();\n     }\n \n-    fn print_break(&mut self, b: BreakToken, l: isize) {\n+    fn print_break(&mut self, token: BreakToken, size: isize) {\n         let top = self.get_top();\n         match top.pbreak {\n             PrintStackBreak::Fits => {\n-                self.space -= b.blank_space;\n-                self.indent(b.blank_space);\n+                self.space -= token.blank_space;\n+                self.indent(token.blank_space);\n             }\n             PrintStackBreak::Broken(Breaks::Consistent) => {\n-                self.print_newline(top.offset + b.offset);\n-                self.space = self.margin - (top.offset + b.offset);\n+                self.print_newline(top.offset + token.offset);\n+                self.space = self.margin - (top.offset + token.offset);\n             }\n             PrintStackBreak::Broken(Breaks::Inconsistent) => {\n-                if l > self.space {\n-                    self.print_newline(top.offset + b.offset);\n-                    self.space = self.margin - (top.offset + b.offset);\n+                if size > self.space {\n+                    self.print_newline(top.offset + token.offset);\n+                    self.space = self.margin - (top.offset + token.offset);\n                 } else {\n-                    self.indent(b.blank_space);\n-                    self.space -= b.blank_space;\n+                    self.indent(token.blank_space);\n+                    self.space -= token.blank_space;\n                 }\n             }\n         }\n     }\n \n-    fn print_string(&mut self, s: &str) {\n-        let len = s.len() as isize;\n+    fn print_string(&mut self, string: &str) {\n+        let len = string.len() as isize;\n         // assert!(len <= space);\n         self.space -= len;\n \n@@ -436,14 +438,14 @@ impl Printer {\n         self.out.reserve(self.pending_indentation as usize);\n         self.out.extend(std::iter::repeat(' ').take(self.pending_indentation as usize));\n         self.pending_indentation = 0;\n-        self.out.push_str(s);\n+        self.out.push_str(string);\n     }\n \n     // Convenience functions to talk to the printer.\n \n     /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, b: Breaks) {\n-        self.scan_begin(BeginToken { offset: indent as isize, breaks: b })\n+    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n+        self.scan_begin(BeginToken { offset: indent as isize, breaks })\n     }\n \n     /// Inconsistent breaking box\n@@ -470,8 +472,8 @@ impl Printer {\n     }\n \n     pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n-        let s = wrd.into();\n-        self.scan_string(s)\n+        let string = wrd.into();\n+        self.scan_string(string)\n     }\n \n     fn spaces(&mut self, n: usize) {"}]}