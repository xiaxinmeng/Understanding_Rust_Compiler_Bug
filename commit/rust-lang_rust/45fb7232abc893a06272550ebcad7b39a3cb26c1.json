{"sha": "45fb7232abc893a06272550ebcad7b39a3cb26c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmI3MjMyYWJjODkzYTA2MjcyNTUwZWJjYWQ3YjM5YTNjYjI2YzE=", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-02-01T19:10:42Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-02-01T19:29:08Z"}, "message": "Move colon-check to recover_colon_before_qpath_proj()", "tree": {"sha": "e876f1258d14e4097bdd247b328a1821b90d8bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e876f1258d14e4097bdd247b328a1821b90d8bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fb7232abc893a06272550ebcad7b39a3cb26c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fb7232abc893a06272550ebcad7b39a3cb26c1", "html_url": "https://github.com/rust-lang/rust/commit/45fb7232abc893a06272550ebcad7b39a3cb26c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fb7232abc893a06272550ebcad7b39a3cb26c1/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d64a09314d7f19201eebc1b92377afed31b5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d64a09314d7f19201eebc1b92377afed31b5c2", "html_url": "https://github.com/rust-lang/rust/commit/88d64a09314d7f19201eebc1b92377afed31b5c2"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "027380eaa2a691088eb2f76f873a776f3c680a77", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/45fb7232abc893a06272550ebcad7b39a3cb26c1/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fb7232abc893a06272550ebcad7b39a3cb26c1/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=45fb7232abc893a06272550ebcad7b39a3cb26c1", "patch": "@@ -71,21 +71,7 @@ impl<'a> Parser<'a> {\n             debug!(\"parse_qpath: (decrement) count={:?}\", self.unmatched_angle_bracket_count);\n         }\n \n-        if self.token.kind == token::Colon {\n-            // <Bar as Baz<T>>:Qux\n-            //                ^\n-            self.bump();\n-\n-            self.diagnostic()\n-                .struct_span_err(self.prev_span, \"found single colon where type path was expected\")\n-                .span_suggestion(\n-                    self.prev_span,\n-                    \"use double colon\",\n-                    \"::\".to_string(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-        } else {\n+        if !self.recover_colon_before_qpath_proj() {\n             self.expect(&token::ModSep)?;\n         }\n \n@@ -95,6 +81,28 @@ impl<'a> Parser<'a> {\n         Ok((qself, Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n \n+    fn recover_colon_before_qpath_proj(&mut self) -> bool {\n+        if self.token.kind != token::Colon {\n+            return false;\n+        }\n+\n+        // <Bar as Baz<T>>:Qux\n+        //                ^\n+        self.bump();\n+\n+        self.diagnostic()\n+            .struct_span_err(self.prev_span, \"found single colon where type path was expected\")\n+            .span_suggestion(\n+                self.prev_span,\n+                \"use double colon\",\n+                \"::\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        true\n+    }\n+\n     /// Parses simple paths.\n     ///\n     /// `path = [::] segment+`"}]}