{"sha": "caa42e11bb6b7aea210ced552a157fa7de100d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTQyZTExYmI2YjdhZWEyMTBjZWQ1NTJhMTU3ZmE3ZGUxMDBkNjg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-01-22T02:28:55Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-01-28T23:01:32Z"}, "message": "Remove VecCell", "tree": {"sha": "4dc5681fee11b261d6ce2139d192e2c6c85591cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc5681fee11b261d6ce2139d192e2c6c85591cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa42e11bb6b7aea210ced552a157fa7de100d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa42e11bb6b7aea210ced552a157fa7de100d68", "html_url": "https://github.com/rust-lang/rust/commit/caa42e11bb6b7aea210ced552a157fa7de100d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa42e11bb6b7aea210ced552a157fa7de100d68/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505ef7bc069d9def137c3c469ee8bdd487882730", "url": "https://api.github.com/repos/rust-lang/rust/commits/505ef7bc069d9def137c3c469ee8bdd487882730", "html_url": "https://github.com/rust-lang/rust/commit/505ef7bc069d9def137c3c469ee8bdd487882730"}], "stats": {"total": 48, "additions": 0, "deletions": 48}, "files": [{"sha": "33d760d0a1482f3d365d830c39ca719a360bbaf6", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caa42e11bb6b7aea210ced552a157fa7de100d68/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa42e11bb6b7aea210ced552a157fa7de100d68/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=caa42e11bb6b7aea210ced552a157fa7de100d68", "patch": "@@ -69,7 +69,6 @@ pub mod transitive_relation;\n pub mod unify;\n pub mod fx;\n pub mod tuple_slice;\n-pub mod veccell;\n pub mod control_flow_graph;\n pub mod flock;\n pub mod sync;"}, {"sha": "054eee8829a4a73e0b38599ba2b3b058359b0b63", "filename": "src/librustc_data_structures/veccell/mod.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/505ef7bc069d9def137c3c469ee8bdd487882730/src%2Flibrustc_data_structures%2Fveccell%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ef7bc069d9def137c3c469ee8bdd487882730/src%2Flibrustc_data_structures%2Fveccell%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fveccell%2Fmod.rs?ref=505ef7bc069d9def137c3c469ee8bdd487882730", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::cell::UnsafeCell;\n-use std::mem;\n-\n-pub struct VecCell<T> {\n-    data: UnsafeCell<Vec<T>>,\n-}\n-\n-impl<T> VecCell<T> {\n-    pub fn with_capacity(capacity: usize) -> VecCell<T> {\n-        VecCell { data: UnsafeCell::new(Vec::with_capacity(capacity)) }\n-    }\n-\n-    #[inline]\n-    pub fn push(&self, data: T) -> usize {\n-        // The logic here, and in `swap` below, is that the `push`\n-        // method on the vector will not recursively access this\n-        // `VecCell`. Therefore, we can temporarily obtain mutable\n-        // access, secure in the knowledge that even if aliases exist\n-        // -- indeed, even if aliases are reachable from within the\n-        // vector -- they will not be used for the duration of this\n-        // particular fn call. (Note that we also are relying on the\n-        // fact that `VecCell` is not `Sync`.)\n-        unsafe {\n-            let v = self.data.get();\n-            (*v).push(data);\n-            (*v).len()\n-        }\n-    }\n-\n-    pub fn swap(&self, mut data: Vec<T>) -> Vec<T> {\n-        unsafe {\n-            let v = self.data.get();\n-            mem::swap(&mut *v, &mut data);\n-        }\n-        data\n-    }\n-}"}]}