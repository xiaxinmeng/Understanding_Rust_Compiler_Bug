{"sha": "fd35770e8d092b79eef16a7061e202307f730c90", "node_id": "C_kwDOAAsO6NoAKGZkMzU3NzBlOGQwOTJiNzllZWYxNmE3MDYxZTIwMjMwN2Y3MzBjOTA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-25T00:02:38Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-25T00:02:38Z"}, "message": "diagnostic: suggest parens when users want logical ops, but get closures", "tree": {"sha": "4b1be991a2c65be4bfad2e351a00c4f570e5b2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1be991a2c65be4bfad2e351a00c4f570e5b2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd35770e8d092b79eef16a7061e202307f730c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd35770e8d092b79eef16a7061e202307f730c90", "html_url": "https://github.com/rust-lang/rust/commit/fd35770e8d092b79eef16a7061e202307f730c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd35770e8d092b79eef16a7061e202307f730c90/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b043faba34ccc053a4d0110634c323f6c03765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b043faba34ccc053a4d0110634c323f6c03765e", "html_url": "https://github.com/rust-lang/rust/commit/4b043faba34ccc053a4d0110634c323f6c03765e"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "399596692d574b73834e48a4dc66afae92b5facc", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd35770e8d092b79eef16a7061e202307f730c90/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd35770e8d092b79eef16a7061e202307f730c90/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=fd35770e8d092b79eef16a7061e202307f730c90", "patch": "@@ -372,10 +372,17 @@ impl<'a> Parser<'a> {\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 false\n             }\n-            (true, Some(AssocOp::LAnd)) => {\n+            (true, Some(AssocOp::LAnd)) |\n+            (true, Some(AssocOp::LOr)) |\n+            (true, Some(AssocOp::BitOr)) => {\n                 // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n                 // above due to #74233.\n                 // These cases are ambiguous and can't be identified in the parser alone.\n+                //\n+                // Bitwise AND is left out because guessing intent is hard. We can make\n+                // suggestions based on the assumption that double-refs are rarely intentional,\n+                // and closures are distinct enough that they don't get mixed up with their\n+                // return value.\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 false\n@@ -1244,7 +1251,14 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Brace)) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)\n         } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {\n-            self.parse_closure_expr(attrs)\n+            self.parse_closure_expr(attrs).map_err(|mut err| {\n+                // If the input is something like `if a { 1 } else { 2 } | if a { 3 } else { 4 }`\n+                // then suggest parens around the lhs.\n+                if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&lo) {\n+                    self.sess.expr_parentheses_needed(&mut err, *sp);\n+                }\n+                err\n+            })\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             self.parse_array_or_repeat_expr(attrs, token::Bracket)\n         } else if self.check_path() {"}, {"sha": "36709eea17c2144795de5995d944bf091a490b9f", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=fd35770e8d092b79eef16a7061e202307f730c90", "patch": "@@ -37,4 +37,31 @@ fn qux() -> u32 {\n     //~^ ERROR mismatched types\n }\n \n+fn space_cadet() -> bool {\n+    ({ true }) | { true } //~ ERROR E0308\n+    //~^ ERROR expected parameter name\n+}\n+\n+fn revenge_from_mars() -> bool {\n+    ({ true }) && { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+fn attack_from_mars() -> bool {\n+    ({ true }) || { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+// This gets corrected by adding a semicolon, instead of parens.\n+// It's placed here to help keep track of the way this diagnostic\n+// needs to interact with type checking to avoid MachineApplicable\n+// suggestions that actually break stuff.\n+//\n+// If you're wondering what happens if that `foo()` is a `true` like\n+// all the ones above use? Nothing. It makes neither suggestion in\n+// that case.\n+fn asteroids() -> impl FnOnce() -> bool {\n+    { foo(); } || { true } //~ ERROR E0308\n+}\n+\n fn main() {}"}, {"sha": "92bb972b24020e3cc29ce21ef0d4e79d98bafffd", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=fd35770e8d092b79eef16a7061e202307f730c90", "patch": "@@ -37,4 +37,31 @@ fn qux() -> u32 {\n     //~^ ERROR mismatched types\n }\n \n+fn space_cadet() -> bool {\n+    { true } | { true } //~ ERROR E0308\n+    //~^ ERROR expected parameter name\n+}\n+\n+fn revenge_from_mars() -> bool {\n+    { true } && { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+fn attack_from_mars() -> bool {\n+    { true } || { true } //~ ERROR E0308\n+    //~^ ERROR mismatched types\n+}\n+\n+// This gets corrected by adding a semicolon, instead of parens.\n+// It's placed here to help keep track of the way this diagnostic\n+// needs to interact with type checking to avoid MachineApplicable\n+// suggestions that actually break stuff.\n+//\n+// If you're wondering what happens if that `foo()` is a `true` like\n+// all the ones above use? Nothing. It makes neither suggestion in\n+// that case.\n+fn asteroids() -> impl FnOnce() -> bool {\n+    { foo() } || { true } //~ ERROR E0308\n+}\n+\n fn main() {}"}, {"sha": "df0e4dcb16e2cbc57abb68659db7b9e804e1a6ac", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd35770e8d092b79eef16a7061e202307f730c90/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=fd35770e8d092b79eef16a7061e202307f730c90", "patch": "@@ -44,6 +44,25 @@ LL |         _ => 1,\n LL ~     }) > 0\n    |\n \n+error: expected parameter name, found `{`\n+  --> $DIR/expr-as-stmt.rs:41:16\n+   |\n+LL |     { true } | { true }\n+   |                ^ expected parameter name\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) | { true }\n+   |     +        +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:64:7\n+   |\n+LL |     { foo() } || { true }\n+   |       ^^^^^- help: consider using a semicolon here: `;`\n+   |       |\n+   |       expected `()`, found `i32`\n+\n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:8:6\n    |\n@@ -121,7 +140,68 @@ help: parentheses are required to parse this as an expression\n LL |     ({2}) - 2\n    |     +   +\n \n-error: aborting due to 11 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:41:7\n+   |\n+LL |     { true } | { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } | { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:46:7\n+   |\n+LL |     { true } && { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } && { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:46:14\n+   |\n+LL | fn revenge_from_mars() -> bool {\n+   |                           ---- expected `bool` because of return type\n+LL |     { true } && { true }\n+   |              ^^^^^^^^^^^ expected `bool`, found `&&bool`\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) && { true }\n+   |     +        +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:51:7\n+   |\n+LL |     { true } || { true }\n+   |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; } || { true }\n+   |       ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:51:14\n+   |\n+LL | fn attack_from_mars() -> bool {\n+   |                          ---- expected `bool` because of return type\n+LL |     { true } || { true }\n+   |              ^^^^^^^^^^^ expected `bool`, found closure\n+   |\n+   = note: expected type `bool`\n+           found closure `[closure@$DIR/expr-as-stmt.rs:51:14: 51:25]`\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({ true }) || { true }\n+   |     +        +\n+\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}]}