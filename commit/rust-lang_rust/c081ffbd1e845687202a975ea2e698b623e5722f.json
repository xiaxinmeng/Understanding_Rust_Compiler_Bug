{"sha": "c081ffbd1e845687202a975ea2e698b623e5722f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODFmZmJkMWU4NDU2ODcyMDJhOTc1ZWEyZTY5OGI2MjNlNTcyMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-30T09:21:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-30T09:21:37Z"}, "message": "auto merge of #6121 : luqmana/rust/newtype-cc, r=graydon\n\n#6086", "tree": {"sha": "f493148208f92f81bbf63560e676e75b26c1a79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f493148208f92f81bbf63560e676e75b26c1a79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c081ffbd1e845687202a975ea2e698b623e5722f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c081ffbd1e845687202a975ea2e698b623e5722f", "html_url": "https://github.com/rust-lang/rust/commit/c081ffbd1e845687202a975ea2e698b623e5722f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c081ffbd1e845687202a975ea2e698b623e5722f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e22f2b8eacf30a5142a07d5e5667705c6a10d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e22f2b8eacf30a5142a07d5e5667705c6a10d3", "html_url": "https://github.com/rust-lang/rust/commit/84e22f2b8eacf30a5142a07d5e5667705c6a10d3"}, {"sha": "10f290ef68870e54e6b5bcc75e953210a26b46e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f290ef68870e54e6b5bcc75e953210a26b46e9", "html_url": "https://github.com/rust-lang/rust/commit/10f290ef68870e54e6b5bcc75e953210a26b46e9"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "852eb1b50a499d1500b3c0f620db9c689b1d1305", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c081ffbd1e845687202a975ea2e698b623e5722f", "patch": "@@ -551,6 +551,8 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                         Some(vec::append(args, vec::from_slice(r.tail())))\n                     }\n                     def_variant(_, _) => None,\n+\n+                    def_fn(*) |\n                     def_struct(*) => {\n                         // FIXME #4731: Is this right? --pcw\n                         let new_args;"}, {"sha": "7fa198be1d47fa75b14f616b5c73eefd0f428f04", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c081ffbd1e845687202a975ea2e698b623e5722f", "patch": "@@ -912,6 +912,7 @@ pub impl mem_categorization_ctxt {\n                         self.cat_pattern(subcmt, *subpat, op);\n                     }\n                 }\n+                Some(&ast::def_fn(*)) |\n                 Some(&ast::def_struct(*)) => {\n                     for subpats.each |subpat| {\n                         let cmt_field = self.cat_anon_struct_field(*subpat,"}, {"sha": "294a21fac2c237271e11f15f6cfee848a7056812", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c081ffbd1e845687202a975ea2e698b623e5722f", "patch": "@@ -4277,6 +4277,7 @@ pub impl Resolver {\n                 pat_enum(path, _) => {\n                     // This must be an enum variant, struct or const.\n                     match self.resolve_path(path, ValueNS, false, visitor) {\n+                        Some(def @ def_fn(*))      |\n                         Some(def @ def_variant(*)) |\n                         Some(def @ def_struct(*))  |\n                         Some(def @ def_const(*)) => {"}, {"sha": "3755cca8c35e97acf40a44b302acba8da1ef7957", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c081ffbd1e845687202a975ea2e698b623e5722f", "patch": "@@ -291,6 +291,7 @@ pub fn variant_opt(bcx: block, pat_id: ast::node_id)\n             }\n             ::core::util::unreachable();\n         }\n+        ast::def_fn(*) |\n         ast::def_struct(_) => {\n             return lit(UnitLikeStructLit(pat_id));\n         }\n@@ -818,6 +819,7 @@ pub fn get_options(bcx: block, m: &[@Match], col: uint) -> ~[Opt] {\n                 // This could be one of: a tuple-like enum variant, a\n                 // struct-like enum variant, or a struct.\n                 match ccx.tcx.def_map.find(&cur.id) {\n+                    Some(&ast::def_fn(*)) |\n                     Some(&ast::def_variant(*)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n@@ -1011,6 +1013,7 @@ pub fn any_tuple_struct_pat(bcx: block, m: &[@Match], col: uint) -> bool {\n         match pat.node {\n             ast::pat_enum(_, Some(_)) => {\n                 match bcx.tcx().def_map.find(&pat.id) {\n+                    Some(&ast::def_fn(*)) |\n                     Some(&ast::def_struct(*)) => true,\n                     _ => false\n                 }\n@@ -1780,6 +1783,7 @@ pub fn bind_irrefutable_pat(bcx: block,\n                         }\n                     }\n                 }\n+                Some(&ast::def_fn(*)) |\n                 Some(&ast::def_struct(*)) => {\n                     match *sub_pats {\n                         None => {"}, {"sha": "37d5c5c700bef7c36ba7246aadf2ac43f01342e4", "filename": "src/test/run-pass/cross-crate-newtype-struct-pat.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c081ffbd1e845687202a975ea2e698b623e5722f/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs?ref=c081ffbd1e845687202a975ea2e698b623e5722f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:newtype_struct_xc.rs\n+\n+extern mod newtype_struct_xc;\n+\n+fn main() {\n+    let x = newtype_struct_xc::Au(21);\n+    match x {\n+        newtype_struct_xc::Au(n) => assert_eq!(n, 21)\n+    }\n+}"}]}