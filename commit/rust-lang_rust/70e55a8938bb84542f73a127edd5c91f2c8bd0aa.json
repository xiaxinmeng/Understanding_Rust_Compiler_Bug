{"sha": "70e55a8938bb84542f73a127edd5c91f2c8bd0aa", "node_id": "C_kwDOAAsO6NoAKDcwZTU1YTg5MzhiYjg0NTQyZjczYTEyN2VkZDVjOTFmMmM4YmQwYWE", "commit": {"author": {"name": "Alphyr", "email": "47725341+a1phyr@users.noreply.github.com", "date": "2021-10-03T20:44:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-03T20:44:07Z"}, "message": "Apply suggestions\n\nCo-authored-by: kennytm <kennytm@gmail.com>", "tree": {"sha": "482f81488aed233ae05a5a2ad5993d78ffdfb37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482f81488aed233ae05a5a2ad5993d78ffdfb37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e55a8938bb84542f73a127edd5c91f2c8bd0aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWhYXCRBK7hj4Ov3rIwAAXG0IAA30b8gfZDTk/H26ymAE5YqU\nWmbSSxhrRiOjKeF8sTtryMCAbP0QUQDy+A6CnBRLIYAyc7yeqQj+YaqOJJs/qgnC\nHRW9yEQ1v+QFqh26viyj5cyyR0hRfMe9Yp5r8bXanoHPfTRVY4Ay/TbQsDR5YkNU\niY24mPUGGnFJxCWTDRZ9WGMnKTAulMJS3DbGjq/geadP+QAdBmGqMTweBR+73cCQ\nIuDX0FtNDtYp4ydSp2tBwwRu6EJgGpeQ+dnxMx/7YeE2gcweyZ59x1tlicK3nIKo\nguqfWArsI2ZphbaOhjWUFBbeQALYhD6rpxZy0Pu1zF9wKNxGxI7gllaIhfLAfsQ=\n=bN0F\n-----END PGP SIGNATURE-----\n", "payload": "tree 482f81488aed233ae05a5a2ad5993d78ffdfb37f\nparent 9faf6213558c0f0158eff5f2a911dbd6ab804605\nauthor Alphyr <47725341+a1phyr@users.noreply.github.com> 1633293847 +0200\ncommitter GitHub <noreply@github.com> 1633293847 +0200\n\nApply suggestions\n\nCo-authored-by: kennytm <kennytm@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e55a8938bb84542f73a127edd5c91f2c8bd0aa", "html_url": "https://github.com/rust-lang/rust/commit/70e55a8938bb84542f73a127edd5c91f2c8bd0aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e55a8938bb84542f73a127edd5c91f2c8bd0aa/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9faf6213558c0f0158eff5f2a911dbd6ab804605", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faf6213558c0f0158eff5f2a911dbd6ab804605", "html_url": "https://github.com/rust-lang/rust/commit/9faf6213558c0f0158eff5f2a911dbd6ab804605"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "540b7d36625af6cd4dd42b6a36b4e7c131cdb16c", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70e55a8938bb84542f73a127edd5c91f2c8bd0aa/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e55a8938bb84542f73a127edd5c91f2c8bd0aa/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=70e55a8938bb84542f73a127edd5c91f2c8bd0aa", "patch": "@@ -501,7 +501,7 @@ macro_rules! int_impl {\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n         }\n \n-        /// Checked addition with an unsigned integer. Computes `self + rhs`,\n+        /// Checked subtraction with an unsigned integer. Computes `self - rhs`,\n         /// returning `None` if overflow occurred.\n         ///\n         /// # Examples\n@@ -885,10 +885,7 @@ macro_rules! int_impl {\n         #[inline]\n         pub const fn saturating_add_unsigned(self, rhs: $UnsignedT) -> Self {\n             // Overflow can only happen at the upper bound\n-            match self.checked_add_unsigned(rhs) {\n-                Some(x) => x,\n-                None => Self::MAX,\n-            }\n+            self.checked_add_unsigned(rhs).unwrap_or(Self::MAX)\n         }\n \n         /// Saturating integer subtraction. Computes `self - rhs`, saturating at the\n@@ -912,7 +909,7 @@ macro_rules! int_impl {\n             intrinsics::saturating_sub(self, rhs)\n         }\n \n-        /// Saturating substraction with an unsigned integer. Computes `self - rhs`,\n+        /// Saturating subtraction with an unsigned integer. Computes `self - rhs`,\n         /// saturating at the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -931,10 +928,7 @@ macro_rules! int_impl {\n         #[inline]\n         pub const fn saturating_sub_unsigned(self, rhs: $UnsignedT) -> Self {\n             // Overflow can only happen at the lower bound\n-            match self.checked_sub_unsigned(rhs) {\n-                Some(x) => x,\n-                None => Self::MIN,\n-            }\n+            self.checked_sub_unsigned(rhs).unwrap_or(Self::MIN)\n         }\n \n         /// Saturating integer negation. Computes `-self`, returning `MAX` if `self == MIN`\n@@ -1133,7 +1127,7 @@ macro_rules! int_impl {\n             intrinsics::wrapping_sub(self, rhs)\n         }\n \n-        /// Wrapping (modular) substraction with an unsigned integer. Computes\n+        /// Wrapping (modular) subtraction with an unsigned integer. Computes\n         /// `self - rhs`, wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n@@ -1584,7 +1578,7 @@ macro_rules! int_impl {\n \n         /// Calculates `self` - `rhs` with an unsigned `rhs`\n         ///\n-        /// Returns a tuple of the substraction along with a boolean indicating\n+        /// Returns a tuple of the subtraction along with a boolean indicating\n         /// whether an arithmetic overflow would occur. If an overflow would\n         /// have occurred then the wrapped value is returned.\n         ///"}]}