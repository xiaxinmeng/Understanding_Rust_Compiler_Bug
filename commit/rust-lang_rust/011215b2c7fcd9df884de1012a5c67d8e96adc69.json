{"sha": "011215b2c7fcd9df884de1012a5c67d8e96adc69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTIxNWIyYzdmY2Q5ZGY4ODRkZTEwMTJhNWM2N2Q4ZTk2YWRjNjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-19T17:55:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-26T10:52:58Z"}, "message": "pacify the merciless x.py fmt", "tree": {"sha": "11592c7d9d5bb934456d5f069d6d213ac6c2305d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11592c7d9d5bb934456d5f069d6d213ac6c2305d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/011215b2c7fcd9df884de1012a5c67d8e96adc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/011215b2c7fcd9df884de1012a5c67d8e96adc69", "html_url": "https://github.com/rust-lang/rust/commit/011215b2c7fcd9df884de1012a5c67d8e96adc69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/011215b2c7fcd9df884de1012a5c67d8e96adc69/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35801e160ed521b62348cfe6557ef7b56130282", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35801e160ed521b62348cfe6557ef7b56130282", "html_url": "https://github.com/rust-lang/rust/commit/c35801e160ed521b62348cfe6557ef7b56130282"}], "stats": {"total": 58, "additions": 11, "deletions": 47}, "files": [{"sha": "a0c4c90722d252db8856bf41f942388f9d8f99e9", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/011215b2c7fcd9df884de1012a5c67d8e96adc69/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/011215b2c7fcd9df884de1012a5c67d8e96adc69/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=011215b2c7fcd9df884de1012a5c67d8e96adc69", "patch": "@@ -306,11 +306,7 @@ impl Span {\n \n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n-        if self.is_dummy() {\n-            other\n-        } else {\n-            self\n-        }\n+        if self.is_dummy() { other } else { self }\n     }\n \n     /// Returns `true` if `self` fully encloses `other`.\n@@ -341,33 +337,21 @@ impl Span {\n     pub fn trim_start(self, other: Span) -> Option<Span> {\n         let span = self.data();\n         let other = other.data();\n-        if span.hi > other.hi {\n-            Some(span.with_lo(cmp::max(span.lo, other.hi)))\n-        } else {\n-            None\n-        }\n+        if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }\n     }\n \n     /// Returns the source span -- this is either the supplied span, or the span for\n     /// the macro callsite that expanded to it.\n     pub fn source_callsite(self) -> Span {\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() {\n-            expn_data.call_site.source_callsite()\n-        } else {\n-            self\n-        }\n+        if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }\n     }\n \n     /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n     /// if any.\n     pub fn parent(self) -> Option<Span> {\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() {\n-            Some(expn_data.call_site)\n-        } else {\n-            None\n-        }\n+        if !expn_data.is_root() { Some(expn_data.call_site) } else { None }\n     }\n \n     /// Edition of the crate from which this span came.\n@@ -393,18 +377,10 @@ impl Span {\n     pub fn source_callee(self) -> Option<ExpnData> {\n         fn source_callee(expn_data: ExpnData) -> ExpnData {\n             let next_expn_data = expn_data.call_site.ctxt().outer_expn_data();\n-            if !next_expn_data.is_root() {\n-                source_callee(next_expn_data)\n-            } else {\n-                expn_data\n-            }\n+            if !next_expn_data.is_root() { source_callee(next_expn_data) } else { expn_data }\n         }\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() {\n-            Some(source_callee(expn_data))\n-        } else {\n-            None\n-        }\n+        if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }\n     }\n \n     /// Checks if a span is \"internal\" to a macro in which `#[unstable]`\n@@ -1224,11 +1200,7 @@ impl SourceFile {\n \n         let line_index = lookup_line(&self.lines[..], pos);\n         assert!(line_index < self.lines.len() as isize);\n-        if line_index >= 0 {\n-            Some(line_index as usize)\n-        } else {\n-            None\n-        }\n+        if line_index >= 0 { Some(line_index as usize) } else { None }\n     }\n \n     pub fn line_bounds(&self, line_index: usize) -> (BytePos, BytePos) {"}, {"sha": "91ab94bc684e2670c38863258103c81650794f66", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/011215b2c7fcd9df884de1012a5c67d8e96adc69/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/011215b2c7fcd9df884de1012a5c67d8e96adc69/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=011215b2c7fcd9df884de1012a5c67d8e96adc69", "patch": "@@ -305,11 +305,7 @@ impl<'a, 'tcx> Expectation<'tcx> {\n         match *self {\n             ExpectHasType(ety) => {\n                 let ety = fcx.shallow_resolve(ety);\n-                if !ety.is_ty_var() {\n-                    ExpectHasType(ety)\n-                } else {\n-                    NoExpectation\n-                }\n+                if !ety.is_ty_var() { ExpectHasType(ety) } else { NoExpectation }\n             }\n             ExpectRvalueLikeUnsized(ety) => ExpectRvalueLikeUnsized(ety),\n             _ => NoExpectation,\n@@ -1622,11 +1618,7 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: DefId, span:\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n-            if t == self.opaque_identity_ty {\n-                false\n-            } else {\n-                t.super_visit_with(self)\n-            }\n+            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n@@ -3775,8 +3767,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &'b self,\n         self_ty: ty::TyVid,\n     ) -> impl Iterator<Item = (ty::PolyTraitRef<'tcx>, traits::PredicateObligation<'tcx>)>\n-           + Captures<'tcx>\n-           + 'b {\n+    + Captures<'tcx>\n+    + 'b {\n         // FIXME: consider using `sub_root_var` here so we\n         // can see through subtyping.\n         let ty_var_root = self.root_var(self_ty);"}]}