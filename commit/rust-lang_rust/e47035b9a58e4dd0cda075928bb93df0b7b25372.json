{"sha": "e47035b9a58e4dd0cda075928bb93df0b7b25372", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzAzNWI5YTU4ZTRkZDBjZGEwNzU5MjhiYjkzZGYwYjdiMjUzNzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:58:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:27Z"}, "message": "rustc_trans: unbox closures used in let bindings", "tree": {"sha": "b7a2da607b0845e171fe90bcd3fad23faf41ca79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a2da607b0845e171fe90bcd3fad23faf41ca79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47035b9a58e4dd0cda075928bb93df0b7b25372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47035b9a58e4dd0cda075928bb93df0b7b25372", "html_url": "https://github.com/rust-lang/rust/commit/e47035b9a58e4dd0cda075928bb93df0b7b25372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47035b9a58e4dd0cda075928bb93df0b7b25372/comments", "author": null, "committer": null, "parents": [{"sha": "1e4bbefae126be24cb443252039ef0fd5ccba62c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4bbefae126be24cb443252039ef0fd5ccba62c", "html_url": "https://github.com/rust-lang/rust/commit/1e4bbefae126be24cb443252039ef0fd5ccba62c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "93ff9f53ec12d51297b9583a82484515aae58ca9", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -127,7 +127,7 @@ pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: uint =\n pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n-    let validate = |s: String, span: Option<Span>| {\n+    let validate = |&: s: String, span: Option<Span>| {\n         creader::validate_crate_name(sess, s[], span);\n         s\n     };"}, {"sha": "a6f2c7dfed0b18cebf9a4e7b1cb0075cf64f8b2e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -431,7 +431,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n             // If we're verifying or linting, add them to the function pass\n             // manager.\n-            let addpass = |pass: &str| {\n+            let addpass = |&: pass: &str| {\n                 pass.with_c_str(|s| llvm::LLVMRustAddPass(fpm, s))\n             };\n             if !config.no_verify { assert!(addpass(\"verify\")); }\n@@ -652,7 +652,7 @@ pub fn run_passes(sess: &Session,\n \n     // Produce final compile outputs.\n \n-    let copy_if_one_unit = |ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n+    let copy_if_one_unit = |&: ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n         // Three cases:\n         if sess.opts.cg.codegen_units == 1 {\n             // 1) Only one codegen unit.  In this case it's no difficulty\n@@ -677,7 +677,7 @@ pub fn run_passes(sess: &Session,\n         }\n     };\n \n-    let link_obj = |output_path: &Path| {\n+    let link_obj = |&: output_path: &Path| {\n         // Running `ld -r` on a single input is kind of pointless.\n         if sess.opts.cg.codegen_units == 1 {\n             fs::copy(&crate_output.with_extension(\"0.o\"),\n@@ -993,7 +993,7 @@ unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_c_strs = Vec::new();\n     let mut llvm_args = Vec::new();\n     {\n-        let add = |arg: &str| {\n+        let mut add = |&mut : arg: &str| {\n             let s = arg.to_c_str();\n             llvm_args.push(s.as_ptr());\n             llvm_c_strs.push(s);"}, {"sha": "6e6b1c3406190cd9754642b980da0936b49167ef", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -748,7 +748,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         }\n     }\n \n-    let column_score: |&[Match], uint| -> uint = |m, col| {\n+    let column_score = |&: m: &[Match], col: uint| -> uint {\n         let total_score = m.iter()\n             .map(|row| row.pats[col])\n             .map(|pat| pat_score(def_map, pat))"}, {"sha": "475443654264f0471b40d42f259c4fa14d572195", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -554,7 +554,7 @@ pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                         t: Ty<'tcx>,\n                                         op: ast::BinOp)\n                                         -> Result<'blk, 'tcx> {\n-    let f = |a| Result::new(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n+    let f = |&: a| Result::new(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n \n     match t.sty {\n         ty::ty_tup(ref tys) if tys.is_empty() => f(nil_type),\n@@ -2749,7 +2749,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n     let val = match item {\n         ast_map::NodeItem(i) => {\n             let ty = ty::node_id_to_type(ccx.tcx(), i.id);\n-            let sym = || exported_name(ccx, id, ty, i.attrs[]);\n+            let sym = |&:| exported_name(ccx, id, ty, i.attrs[]);\n \n             let v = match i.node {\n                 ast::ItemStatic(_, _, ref expr) => {\n@@ -3013,14 +3013,14 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n     unsafe {\n         let mut declared = HashSet::new();\n \n-        let iter_globals = |llmod| {\n+        let iter_globals = |&: llmod| {\n             ValueIter {\n                 cur: llvm::LLVMGetFirstGlobal(llmod),\n                 step: llvm::LLVMGetNextGlobal,\n             }\n         };\n \n-        let iter_functions = |llmod| {\n+        let iter_functions = |&: llmod| {\n             ValueIter {\n                 cur: llvm::LLVMGetFirstFunction(llmod),\n                 step: llvm::LLVMGetNextFunction,"}, {"sha": "347ec100ae7ad10129de5334ee96fff3b564f8d6", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -305,7 +305,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n // the bool returned is whether this expression can be inlined into other crates\n // if it's assigned to a static.\n fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr) -> ValueRef {\n-    let map_list = |exprs: &[P<ast::Expr>]| {\n+    let map_list = |&: exprs: &[P<ast::Expr>]| {\n         exprs.iter().map(|e| const_expr(cx, &**e).0)\n              .fold(Vec::new(), |mut l, val| { l.push(val); l })\n     };"}, {"sha": "bce446b741271c3c5bb50c6e422f383565b8ab8c", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -2489,7 +2489,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         })\n         .collect();\n \n-    let discriminant_type_metadata = |inttype| {\n+    let discriminant_type_metadata = |&: inttype| {\n         // We can reuse the type of the discriminant for all monomorphized\n         // instances of an enum because it doesn't depend on any type parameters.\n         // The def_id, uniquely identifying the enum's polytype acts as key in"}, {"sha": "83765270ef103d4e48a1ddd7d19e4693144e6f18", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -615,7 +615,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Array for the arguments we will pass to the rust function.\n         let mut llrust_args = Vec::new();\n         let mut next_foreign_arg_counter: c_uint = 0;\n-        let next_foreign_arg: |pad: bool| -> c_uint = |pad: bool| {\n+        let mut next_foreign_arg = |&mut : pad: bool| -> c_uint {\n             next_foreign_arg_counter += if pad {\n                 2\n             } else {"}, {"sha": "a22ce297828a90ab64d01c162e0ad5e813d01e67", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -181,7 +181,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 // This should be caught by the intrinsicck pass\n                 assert_eq!(in_type_size, out_type_size);\n \n-                let nonpointer_nonaggregate = |llkind: TypeKind| -> bool {\n+                let nonpointer_nonaggregate = |&: llkind: TypeKind| -> bool {\n                     use llvm::TypeKind::*;\n                     match llkind {\n                         Half | Float | Double | X86_FP80 | FP128 |"}, {"sha": "3166425f3aa3b558236b2e8ae8b95fefa812cab4", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47035b9a58e4dd0cda075928bb93df0b7b25372/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=e47035b9a58e4dd0cda075928bb93df0b7b25372", "patch": "@@ -139,7 +139,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // This shouldn't need to option dance.\n     let mut hash_id = Some(hash_id);\n-    let mk_lldecl = |abi: abi::Abi| {\n+    let mut mk_lldecl = |&mut : abi: abi::Abi| {\n         let lldecl = if abi != abi::Rust {\n             foreign::decl_rust_fn_with_foreign_abi(ccx, mono_ty, s[])\n         } else {\n@@ -149,7 +149,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ccx.monomorphized().borrow_mut().insert(hash_id.take().unwrap(), lldecl);\n         lldecl\n     };\n-    let setup_lldecl = |lldecl, attrs: &[ast::Attribute]| {\n+    let setup_lldecl = |&: lldecl, attrs: &[ast::Attribute]| {\n         base::update_linkage(ccx, lldecl, None, base::OriginalTranslation);\n         set_llvm_fn_attrs(ccx, attrs, lldecl);\n "}]}