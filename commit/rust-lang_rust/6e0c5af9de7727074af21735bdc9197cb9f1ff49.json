{"sha": "6e0c5af9de7727074af21735bdc9197cb9f1ff49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGM1YWY5ZGU3NzI3MDc0YWYyMTczNWJkYzkxOTdjYjlmMWZmNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-27T00:04:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-27T00:04:03Z"}, "message": "Auto merge of #41567 - arielb1:rollup, r=arielb1\n\nRollup of 9 pull requests\n\n- Successful merges: #41370, #41456, #41493, #41499, #41501, #41524, #41546, #41550, #41552\n- Failed merges:", "tree": {"sha": "f39ddb2fed9b6f0aff0dd3c25f7a1355c64abb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39ddb2fed9b6f0aff0dd3c25f7a1355c64abb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0c5af9de7727074af21735bdc9197cb9f1ff49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0c5af9de7727074af21735bdc9197cb9f1ff49", "html_url": "https://github.com/rust-lang/rust/commit/6e0c5af9de7727074af21735bdc9197cb9f1ff49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0c5af9de7727074af21735bdc9197cb9f1ff49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612847bf7171403022f8b4f1df1b87e377dcf01c", "url": "https://api.github.com/repos/rust-lang/rust/commits/612847bf7171403022f8b4f1df1b87e377dcf01c", "html_url": "https://github.com/rust-lang/rust/commit/612847bf7171403022f8b4f1df1b87e377dcf01c"}, {"sha": "60837b1e8db91eb0f46c50ff303f20f4f7f283e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/60837b1e8db91eb0f46c50ff303f20f4f7f283e2", "html_url": "https://github.com/rust-lang/rust/commit/60837b1e8db91eb0f46c50ff303f20f4f7f283e2"}], "stats": {"total": 430, "additions": 340, "deletions": 90}, "files": [{"sha": "0a584ac6b01c44101e2cbb33b0720d228f37f073", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -78,7 +78,7 @@ dependencies = [\n  \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -299,7 +299,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"num_cpus\"\n-version = \"0.2.13\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1004,7 +1004,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mdbook 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2598843aeda0c5bb2e8e4d714564f1c3fc40f7844157e34563bf96ae3866b56e\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n-\"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca313f1862c7ec3e0dfe8ace9fa91b1d9cb5c84ace3d00f5ec4216238e93c167\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n \"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\""}, {"sha": "ecfddec328cd1da4ab74af53042df52839a39b59", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -27,7 +27,7 @@ test = false\n build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.17\"\n filetime = \"0.1\"\n-num_cpus = \"0.2\"\n+num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\""}, {"sha": "e5f8143b41871e424276c9958c786822a5293ffe", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -367,6 +367,9 @@ def build_bootstrap(self):\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n                                    (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n                                    if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+                                   (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n+                                   if \"LIBRARY_PATH\" in env else \"\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n                       os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n@@ -407,7 +410,11 @@ def build_triple(self):\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':\n-            ostype = 'unknown-linux-gnu'\n+            os = subprocess.check_output(['uname', '-o']).strip().decode(default_encoding)\n+            if os == 'Android':\n+                ostype = 'linux-android'\n+            else:\n+                ostype = 'unknown-linux-gnu'\n         elif ostype == 'FreeBSD':\n             ostype = 'unknown-freebsd'\n         elif ostype == 'DragonFly':\n@@ -464,15 +471,21 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n         elif cputype == 'armv6l':\n             cputype = 'arm'\n-            ostype += 'eabihf'\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n         elif cputype in {'armv7l', 'armv8l'}:\n             cputype = 'armv7'\n-            ostype += 'eabihf'\n-        elif cputype == 'aarch64':\n-            cputype = 'aarch64'\n-        elif cputype == 'arm64':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'aarch64', 'arm64'}:\n             cputype = 'aarch64'\n         elif cputype == 'mips':\n             if sys.byteorder == 'big':"}, {"sha": "0309eca0e5deaec6a4f94081843386434397b684", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "639ba5d5b0c48bc69e206700c1396a0154085341", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 61, "deletions": 27, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -374,13 +374,11 @@ pub fn rust_src(build: &Build) {\n \n     println!(\"Dist src\");\n \n-    let name = pkgname(build, \"rust-src\");\n-    let image = tmpdir(build).join(format!(\"{}-image\", name));\n-    let _ = fs::remove_dir_all(&image);\n-\n-    let dst = image.join(\"lib/rustlib/src\");\n-    let dst_src = dst.join(\"rust\");\n-    t!(fs::create_dir_all(&dst_src));\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n \n     // This is the set of root paths which will become part of the source package\n     let src_files = [\n@@ -429,13 +427,13 @@ pub fn rust_src(build: &Build) {\n \n     // Copy the directories using our filter\n     for item in &src_dirs {\n-        let dst = &dst_src.join(item);\n+        let dst = &plain_dst_src.join(item);\n         t!(fs::create_dir(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n     // Copy the files normally\n     for item in &src_files {\n-        copy(&build.src.join(item), &dst_src.join(item));\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n     }\n \n     // If we're building from git sources, we need to vendor a complete distribution.\n@@ -460,10 +458,63 @@ pub fn rust_src(build: &Build) {\n         // Vendor all Cargo dependencies\n         let mut cmd = Command::new(&build.cargo);\n         cmd.arg(\"vendor\")\n-           .current_dir(&dst_src.join(\"src\"));\n+           .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // Create plain source tarball\n+    let tarball = rust_src_location(build);\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-czf\").arg(sanitize_sh(&tarball))\n+       .arg(&plain_name)\n+       .current_dir(tmpdir(build));\n+    build.run(&mut cmd);\n+\n+\n+    let name = pkgname(build, \"rust-src\");\n+    let image = tmpdir(build).join(format!(\"{}-image\", name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib/src\");\n+    let dst_src = dst.join(\"rust\");\n+    t!(fs::create_dir_all(&dst_src));\n+\n+    // This is the reduced set of paths which will become the rust-src component\n+    // (essentially libstd and all of its path dependencies)\n+    let std_src_dirs = [\n+        \"src/build_helper\",\n+        \"src/liballoc\",\n+        \"src/liballoc_jemalloc\",\n+        \"src/liballoc_system\",\n+        \"src/libcollections\",\n+        \"src/libcompiler_builtins\",\n+        \"src/libcore\",\n+        \"src/liblibc\",\n+        \"src/libpanic_abort\",\n+        \"src/libpanic_unwind\",\n+        \"src/librand\",\n+        \"src/librustc_asan\",\n+        \"src/librustc_lsan\",\n+        \"src/librustc_msan\",\n+        \"src/librustc_tsan\",\n+        \"src/libstd\",\n+        \"src/libstd_unicode\",\n+        \"src/libunwind\",\n+        \"src/rustc/libc_shim\",\n+    ];\n+\n+    for item in &std_src_dirs {\n+        let dst = &dst_src.join(item);\n+        t!(fs::create_dir_all(dst));\n+        cp_r(&plain_dst_src.join(item), dst);\n+    }\n+\n     // Create source tarball in rust-installer format\n     let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n@@ -478,23 +529,6 @@ pub fn rust_src(build: &Build) {\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n \n-    // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-    cp_r(&dst_src, &plain_dst_src);\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut cmd = Command::new(\"tar\");\n-    cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n-       .arg(&plain_name)\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n-\n     t!(fs::remove_dir_all(&image));\n     t!(fs::remove_dir_all(&plain_dst_src));\n }"}, {"sha": "c0b8a9f1ef666734ed03d3e4950271e5f5370308", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -81,7 +81,7 @@ pub fn llvm(build: &Build, target: &str) {\n     // NOTE: remember to also update `config.toml.example` when changing the defaults!\n     let llvm_targets = match build.config.llvm_targets {\n         Some(ref s) => s,\n-        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n+        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};"}, {"sha": "e01c06b10fcd63097de8a14f8b5e2b0f525bccb3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -139,6 +139,8 @@ pub fn dylib_path_var() -> &'static str {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n     }"}, {"sha": "bd831d638c0c4cc24e8573501345ab809c489477", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -86,12 +86,12 @@ macro_rules! step_impl_unsigned {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]\n@@ -157,12 +157,12 @@ macro_rules! step_impl_signed {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]\n@@ -206,12 +206,12 @@ macro_rules! step_impl_no_between {\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 0)\n+                mem::replace(self, 1)\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 1)\n+                mem::replace(self, 0)\n             }\n \n             #[inline]"}, {"sha": "001fa304cd08f5185c7c812a70add563f92cc5d6", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -1082,3 +1082,41 @@ fn test_chain_fold() {\n     assert_eq!(&[2, 3, 1, 2, 0], &result[..]);\n }\n \n+#[test]\n+fn test_step_replace_unsigned() {\n+    let mut x = 4u32;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}\n+\n+#[test]\n+fn test_step_replace_signed() {\n+    let mut x = 4i32;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}\n+\n+#[test]\n+fn test_step_replace_no_between() {\n+    let mut x = 4u128;\n+    let y = x.replace_zero();\n+    assert_eq!(x, 0);\n+    assert_eq!(y, 4);\n+\n+    x = 5;\n+    let y = x.replace_one();\n+    assert_eq!(x, 1);\n+    assert_eq!(y, 5);\n+}\n\\ No newline at end of file"}, {"sha": "f0c46a6f194d55b5654f0fa2d78047cc3e4975ea", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -20,6 +20,7 @@\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n+#![feature(i128_type)]\n #![feature(iter_rfind)]\n #![feature(libc)]\n #![feature(nonzero)]\n@@ -30,6 +31,7 @@\n #![feature(sort_internals)]\n #![feature(sort_unstable)]\n #![feature(step_by)]\n+#![feature(step_trait)]\n #![feature(test)]\n #![feature(try_from)]\n #![feature(unicode)]"}, {"sha": "e6f305c22b2d4f621a1b7ecc0c4ac2ddd8fb261a", "filename": "src/librustc_back/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_back%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_back%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fdynamic_lib.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -68,6 +68,8 @@ impl DynamicLibrary {\n             \"PATH\"\n         } else if cfg!(target_os = \"macos\") {\n             \"DYLD_LIBRARY_PATH\"\n+        } else if cfg!(target_os = \"haiku\") {\n+            \"LIBRARY_PATH\"\n         } else {\n             \"LD_LIBRARY_PATH\"\n         }"}, {"sha": "8e7f463563c38e947d1775cde793d35cfac86aa1", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -16,9 +16,10 @@ pub fn opts() -> TargetOptions {\n         linker: \"cc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        has_rpath: true,\n+        has_rpath: false,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n+        no_integrated_as: true,\n         .. Default::default()\n     }\n }"}, {"sha": "32f0fd4199776656b52c81ba80b3568097370039", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -113,6 +113,7 @@ mod imp {\n             pub l_sysid: libc::c_int,\n         }\n \n+        pub const F_RDLCK: libc::c_short = 0x0040;\n         pub const F_UNLCK: libc::c_short = 0x0200;\n         pub const F_WRLCK: libc::c_short = 0x0400;\n         pub const F_SETLK: libc::c_int = 0x0080;"}, {"sha": "3fd75146193e75e7712098c6022b5ded840be514", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -17,30 +17,24 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n-fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) {\n-    let mut version_cmd = Command::new(llvm_config);\n-    version_cmd.arg(\"--version\");\n-    let version_output = output(&mut version_cmd);\n-    let mut parts = version_output.split('.').take(2)\n-        .filter_map(|s| s.parse::<u32>().ok());\n-    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n-            // Force the link mode we want, preferring static by default, but\n-            // possibly overridden by `configure --enable-llvm-link-shared`.\n-            if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n-                return (\"dylib\", Some(\"--link-shared\"));\n-            } else {\n-                return (\"static\", Some(\"--link-static\"));\n-            }\n-        } else if major == 3 && minor == 8 {\n-            // Find out LLVM's default linking mode.\n-            let mut mode_cmd = Command::new(llvm_config);\n-            mode_cmd.arg(\"--shared-mode\");\n-            if output(&mut mode_cmd).trim() == \"shared\" {\n-                return (\"dylib\", None);\n-            } else {\n-                return (\"static\", None);\n-            }\n+fn detect_llvm_link(major: u32, minor: u32, llvm_config: &Path)\n+    -> (&'static str, Option<&'static str>) {\n+    if major > 3 || (major == 3 && minor >= 9) {\n+        // Force the link mode we want, preferring static by default, but\n+        // possibly overridden by `configure --enable-llvm-link-shared`.\n+        if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+            return (\"dylib\", Some(\"--link-shared\"));\n+        } else {\n+            return (\"static\", Some(\"--link-static\"));\n+        }\n+    } else if major == 3 && minor == 8 {\n+        // Find out LLVM's default linking mode.\n+        let mut mode_cmd = Command::new(llvm_config);\n+        mode_cmd.arg(\"--shared-mode\");\n+        if output(&mut mode_cmd).trim() == \"shared\" {\n+            return (\"dylib\", None);\n+        } else {\n+            return (\"static\", None);\n         }\n     }\n     (\"static\", None)\n@@ -92,9 +86,25 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components =\n-        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n-         \"sparc\", \"nvptx\"];\n+    let mut optional_components =\n+        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\",\n+             \"systemz\", \"jsbackend\", \"msp430\", \"sparc\", \"nvptx\"];\n+\n+    let mut version_cmd = Command::new(&llvm_config);\n+    version_cmd.arg(\"--version\");\n+    let version_output = output(&mut version_cmd);\n+    let mut parts = version_output.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    let (major, minor) =\n+        if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+            (major, minor)\n+        } else {\n+            (3, 7)\n+        };\n+\n+    if major > 3 {\n+        optional_components.push(\"hexagon\");\n+    }\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n@@ -158,7 +168,7 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n-    let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);\n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link(major, minor, &llvm_config);\n \n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host"}, {"sha": "c9b3a7ff3f3aac4d1880c8610c66ef2761092d47", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -382,6 +382,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeNVPTXTarget,\n                  LLVMInitializeNVPTXTargetMC,\n                  LLVMInitializeNVPTXAsmPrinter);\n+    init_target!(llvm_component = \"hexagon\",\n+                 LLVMInitializeHexagonTargetInfo,\n+                 LLVMInitializeHexagonTarget,\n+                 LLVMInitializeHexagonTargetMC,\n+                 LLVMInitializeHexagonAsmPrinter,\n+                 LLVMInitializeHexagonAsmParser);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "a6b0eb473eb8e106b2ec731843fdcd858945d127", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -29,6 +29,7 @@ use cabi_sparc;\n use cabi_sparc64;\n use cabi_nvptx;\n use cabi_nvptx64;\n+use cabi_hexagon;\n use machine::llalign_of_min;\n use type_::Type;\n use type_of;\n@@ -896,6 +897,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             \"sparc64\" => cabi_sparc64::compute_abi_info(ccx, self),\n             \"nvptx\" => cabi_nvptx::compute_abi_info(ccx, self),\n             \"nvptx64\" => cabi_nvptx64::compute_abi_info(ccx, self),\n+            \"hexagon\" => cabi_hexagon::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "1acda72675c317a0426697f91302a162b36fd1d4", "filename": "src/librustc_trans/cabi_hexagon.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Fcabi_hexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_hexagon.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use abi::{FnType, ArgType, LayoutExt};\n+use context::CrateContext;\n+\n+fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+    if ret.layout.is_aggregate() && ret.layout.size(ccx).bits() > 64 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+    if arg.layout.is_aggregate() && arg.layout.size(ccx).bits() > 64 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "d5fc2ee5e25e07e141bd8edc246a6c5bf54467e9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -97,6 +97,7 @@ mod builder;\n mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_asmjs;\n+mod cabi_hexagon;\n mod cabi_mips;\n mod cabi_mips64;\n mod cabi_msp430;"}, {"sha": "8def11295fda8344191a6bcf403ac4d393f1d4a9", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -177,6 +177,13 @@ impl TcpStream {\n     ///\n     /// [`Shutdown`]: ../../std/net/enum.Shutdown.html\n     ///\n+    /// # Platform-specific behavior\n+    ///\n+    /// Calling this function multiple times may result in different behavior,\n+    /// depending on the operating system. On Linux, the second call will\n+    /// return `Ok(())`, but on macOS, it will return `ErrorKind::NotConnected`.\n+    /// This may change in the future.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}, {"sha": "afdb0cc4fdb791a484a63a819b86fb1804830466", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -57,9 +57,11 @@ use tokenstream::{self, Delimited, ThinTokenStream, TokenTree, TokenStream};\n use symbol::{Symbol, keywords};\n use util::ThinVec;\n \n+use std::cmp;\n use std::collections::HashSet;\n-use std::{cmp, mem, slice};\n+use std::mem;\n use std::path::{self, Path, PathBuf};\n+use std::slice;\n \n bitflags! {\n     flags Restrictions: u8 {\n@@ -5363,24 +5365,25 @@ impl<'a> Parser<'a> {\n             }\n             let mut err = self.diagnostic().struct_span_err(id_sp,\n                 \"cannot declare a new module at this location\");\n-            let this_module = match self.directory.path.file_name() {\n-                Some(file_name) => file_name.to_str().unwrap().to_owned(),\n-                None => self.root_module_name.as_ref().unwrap().clone(),\n-            };\n-            err.span_note(id_sp,\n-                          &format!(\"maybe move this module `{0}` to its own directory \\\n-                                    via `{0}{1}mod.rs`\",\n-                                   this_module,\n-                                   path::MAIN_SEPARATOR));\n+            if id_sp != syntax_pos::DUMMY_SP {\n+                let src_path = PathBuf::from(self.sess.codemap().span_to_filename(id_sp));\n+                if let Some(stem) = src_path.file_stem() {\n+                    let mut dest_path = src_path.clone();\n+                    dest_path.set_file_name(stem);\n+                    dest_path.push(\"mod.rs\");\n+                    err.span_note(id_sp,\n+                                  &format!(\"maybe move this module `{}` to its own \\\n+                                            directory via `{}`\", src_path.to_string_lossy(),\n+                                           dest_path.to_string_lossy()));\n+                }\n+            }\n             if paths.path_exists {\n                 err.span_note(id_sp,\n                               &format!(\"... or maybe `use` the module `{}` instead \\\n                                         of possibly redeclaring it\",\n                                        paths.name));\n-                Err(err)\n-            } else {\n-                Err(err)\n             }\n+            Err(err)\n         } else {\n             paths.result.map_err(|err| self.span_fatal_err(id_sp, err))\n         }"}, {"sha": "be9aa6c5d40ba7f3d35697f183432145934fb5d7", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -39,5 +39,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=static-nobundle=pthread\");\n     } else if target.contains(\"fuchsia\") {\n         println!(\"cargo:rustc-link-lib=unwind\");\n+    } else if target.contains(\"haiku\") {\n+        println!(\"cargo:rustc-link-lib=gcc_s\");\n     }\n }"}, {"sha": "878af191434cd716eeb13c2be7a2b1e21abf2749", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -1 +1 @@\n-Subproject commit a884d21cc5f0b23a1693d1e872fd8998a4fdd17f\n+Subproject commit 878af191434cd716eeb13c2be7a2b1e21abf2749"}, {"sha": "b938f94cda2cb3596bf1cbbb8ef248b18a54cffe", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -147,6 +147,12 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n #define SUBTARGET_SPARC\n #endif\n \n+#ifdef LLVM_COMPONENT_HEXAGON\n+#define SUBTARGET_HEXAGON SUBTARGET(Hexagon)\n+#else\n+#define SUBTARGET_HEXAGON\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n@@ -155,7 +161,8 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\\n   SUBTARGET_MSP430                                                             \\\n-  SUBTARGET_SPARC\n+  SUBTARGET_SPARC                                                              \\\n+  SUBTARGET_HEXAGON\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}, {"sha": "52ebf449d6007d9fd77be815b350be05d1bbd3f3", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2017-03-23\n+2017-04-25"}, {"sha": "a2021e0e5279254951698a6399e0ba16f52b1f56", "filename": "src/test/run-pass/issue-33287.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Frun-pass%2Fissue-33287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Frun-pass%2Fissue-33287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33287.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const A: [u32; 1] = [0];\n+\n+fn test() {\n+    let range = A[1]..;\n+}\n+\n+fn main() { }\n+"}, {"sha": "4b6b4f5ebf82fdcf60316e2bf6b9b625b0a223f6", "filename": "src/test/ui/invalid-module-declaration/auxiliary/foo/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fbar.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod baz;"}, {"sha": "6d77fb60a35de2886267aa9c06b1871c52db5560", "filename": "src/test/ui/invalid-module-declaration/auxiliary/foo/mod.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Fauxiliary%2Ffoo%2Fmod.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod bar;"}, {"sha": "c15cfb8cc8e220f6b02f5b3c187ec33399dbbf88", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// error-pattern: cannot declare a new module at this location\n+// error-pattern: maybe move this module\n+\n+mod auxiliary {\n+    mod foo;\n+}\n+\n+fn main() {}"}, {"sha": "3e9b21cdb740fc072a1779e128acb49be55d7df2", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -0,0 +1,14 @@\n+error: cannot declare a new module at this location\n+  --> $DIR/auxiliary/foo/bar.rs:11:9\n+   |\n+11 | pub mod baz;\n+   |         ^^^\n+   |\n+note: maybe move this module `$DIR/auxiliary/foo/bar.rs` to its own directory via `$DIR/auxiliary/foo/bar/mod.rs`\n+  --> $DIR/auxiliary/foo/bar.rs:11:9\n+   |\n+11 | pub mod baz;\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dbda8f4d802c02a0f6689a7709a59fd8aea7602a", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c5af9de7727074af21735bdc9197cb9f1ff49/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=6e0c5af9de7727074af21735bdc9197cb9f1ff49", "patch": "@@ -20,6 +20,8 @@ pub fn dylib_env_var() -> &'static str {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n     }"}]}