{"sha": "64f790f030494f586a0754536dc85a50aedb77f6", "node_id": "C_kwDOAAsO6NoAKDY0Zjc5MGYwMzA0OTRmNTg2YTA3NTQ1MzZkYzg1YTUwYWVkYjc3ZjY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-19T15:54:53Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-12T17:11:55Z"}, "message": "Jsondocck: New `@ismany` command", "tree": {"sha": "a927bdb713916c65c4add37683396d4454bc1080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a927bdb713916c65c4add37683396d4454bc1080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f790f030494f586a0754536dc85a50aedb77f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f790f030494f586a0754536dc85a50aedb77f6", "html_url": "https://github.com/rust-lang/rust/commit/64f790f030494f586a0754536dc85a50aedb77f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f790f030494f586a0754536dc85a50aedb77f6/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dacffd22a0a6803fb38e2c50cbbd726d52c94ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dacffd22a0a6803fb38e2c50cbbd726d52c94ad3", "html_url": "https://github.com/rust-lang/rust/commit/dacffd22a0a6803fb38e2c50cbbd726d52c94ad3"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "022f7eb8e02d0da25ba1426bfdc6d9a581f18a49", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/64f790f030494f586a0754536dc85a50aedb77f6/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f790f030494f586a0754536dc85a50aedb77f6/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=64f790f030494f586a0754536dc85a50aedb77f6", "patch": "@@ -50,13 +50,15 @@ pub enum CommandKind {\n     Has,\n     Count,\n     Is,\n+    IsMany,\n     Set,\n }\n \n impl CommandKind {\n     fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n         let count = match self {\n             CommandKind::Has => (1..=3).contains(&args.len()),\n+            CommandKind::IsMany => args.len() >= 3,\n             CommandKind::Count | CommandKind::Is => 3 == args.len(),\n             CommandKind::Set => 4 == args.len(),\n         };\n@@ -89,6 +91,7 @@ impl fmt::Display for CommandKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let text = match self {\n             CommandKind::Has => \"has\",\n+            CommandKind::IsMany => \"ismany\",\n             CommandKind::Count => \"count\",\n             CommandKind::Is => \"is\",\n             CommandKind::Set => \"set\",\n@@ -137,6 +140,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             \"has\" => CommandKind::Has,\n             \"count\" => CommandKind::Count,\n             \"is\" => CommandKind::Is,\n+            \"ismany\" => CommandKind::IsMany,\n             \"set\" => CommandKind::Set,\n             _ => {\n                 print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n@@ -227,6 +231,44 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 _ => unreachable!(),\n             }\n         }\n+        CommandKind::IsMany => {\n+            // @ismany <path> <jsonpath> <value>...\n+            let (path, query, values) = if let [path, query, values @ ..] = &command.args[..] {\n+                (path, query, values)\n+            } else {\n+                unreachable!(\"Checked in CommandKind::validate\")\n+            };\n+            let val = cache.get_value(path)?;\n+            let got_values = select(&val, &query).unwrap();\n+            assert!(!command.negated, \"`@!ismany` is not supported\");\n+\n+            // Serde json doesn't implement Ord or Hash for Value, so we must\n+            // use a Vec here. While in theory that makes setwize equality\n+            // O(n^2), in practice n will never be large enought to matter.\n+            let expected_values =\n+                values.iter().map(|v| string_to_value(v, cache)).collect::<Vec<_>>();\n+            if expected_values.len() != got_values.len() {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"Expected {} values, but `{}` matched to {} values ({:?})\",\n+                        expected_values.len(),\n+                        query,\n+                        got_values.len(),\n+                        got_values\n+                    ),\n+                    command,\n+                ));\n+            };\n+            for got_value in got_values {\n+                if !expected_values.iter().any(|exp| &**exp == got_value) {\n+                    return Err(CkError::FailedCheck(\n+                        format!(\"`{}` has match {:?}, which was not expected\", query, got_value),\n+                        command,\n+                    ));\n+                }\n+            }\n+            true\n+        }\n         CommandKind::Count => {\n             // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n             assert_eq!(command.args.len(), 3);"}]}