{"sha": "7be8e2fbb3745602ac864fc079a040dd3a80d91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZThlMmZiYjM3NDU2MDJhYzg2NGZjMDc5YTA0MGRkM2E4MGQ5MWQ=", "commit": {"author": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-02-05T17:10:05Z"}, "committer": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-02-05T17:10:05Z"}, "message": "Add build.tools option to manage installation of extended rust tools.", "tree": {"sha": "6791457fadc825d603938f661e708b9fe5e83317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6791457fadc825d603938f661e708b9fe5e83317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be8e2fbb3745602ac864fc079a040dd3a80d91d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQl7SqOimvGwwcxiyLRqU8kAPvH5QUCWniQEAAKCRDRqU8kAPvH\n5Wn3AQDf20TK6V7oG0e4urCeuxrAgt5dOxSx0zSXVMFgFKYcjgD8COQzfdMUffZv\nbTFqDJDRnFSS2av1aviIS64XwbzdrFE=\n=1pkV\n-----END PGP SIGNATURE-----", "payload": "tree 6791457fadc825d603938f661e708b9fe5e83317\nparent dd29d3dd76c3aed18d7708c636b8d1e259a4c294\nauthor O01eg <o01eg@yandex.ru> 1517850605 +0300\ncommitter O01eg <o01eg@yandex.ru> 1517850605 +0300\n\nAdd build.tools option to manage installation of extended rust tools.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be8e2fbb3745602ac864fc079a040dd3a80d91d", "html_url": "https://github.com/rust-lang/rust/commit/7be8e2fbb3745602ac864fc079a040dd3a80d91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be8e2fbb3745602ac864fc079a040dd3a80d91d/comments", "author": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd29d3dd76c3aed18d7708c636b8d1e259a4c294", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd29d3dd76c3aed18d7708c636b8d1e259a4c294", "html_url": "https://github.com/rust-lang/rust/commit/dd29d3dd76c3aed18d7708c636b8d1e259a4c294"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "e69443f835d77cddc4c0ddbcfc5499e96b8052ad", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8e2fbb3745602ac864fc079a040dd3a80d91d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7be8e2fbb3745602ac864fc079a040dd3a80d91d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7be8e2fbb3745602ac864fc079a040dd3a80d91d", "patch": "@@ -151,6 +151,10 @@\n # default.\n #extended = false\n \n+# Installs choosen set of extended tools if enables. By default builds all.\n+# If choosen tool failed to build the installation fails.\n+#tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\n+\n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n #verbose = 0\n "}, {"sha": "4f4fd14ae8cabcc8c1c64635b35214b690c727a3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7be8e2fbb3745602ac864fc079a040dd3a80d91d", "patch": "@@ -13,7 +13,7 @@\n //! This module implements parsing `config.toml` configuration files to tweak\n //! how the build runs.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n@@ -52,6 +52,7 @@ pub struct Config {\n     pub target_config: HashMap<Interned<String>, Target>,\n     pub full_bootstrap: bool,\n     pub extended: bool,\n+    pub tools: Option<HashSet<String>>,\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub ignore_git: bool,\n@@ -191,6 +192,7 @@ struct Build {\n     python: Option<String>,\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n+    tools: Option<HashSet<String>>,\n     verbose: Option<usize>,\n     sanitizers: Option<bool>,\n     profiler: Option<bool>,\n@@ -395,6 +397,7 @@ impl Config {\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n+        config.tools = build.tools;\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n         set(&mut config.profiler, build.profiler);"}, {"sha": "99a3ee4e4c3695f7c82f07601968b33df3c38285", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=7be8e2fbb3745602ac864fc079a040dd3a80d91d", "patch": "@@ -144,6 +144,7 @@ def v(*args):\n o(\"full-bootstrap\", \"build.full-bootstrap\", \"build three compilers instead of two\")\n o(\"extended\", \"build.extended\", \"build an extended rust tool set\")\n \n+v(\"tools\", \"build.tools\", \"List of extended tools will be installed\")\n v(\"build\", \"build.build\", \"GNUs ./configure syntax LLVM build triple\")\n v(\"host\", None, \"GNUs ./configure syntax LLVM host triples\")\n v(\"target\", None, \"GNUs ./configure syntax LLVM target triples\")"}, {"sha": "86df36f209e6b3f575b6862131fad459f8a9288b", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8e2fbb3745602ac864fc079a040dd3a80d91d/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=7be8e2fbb3745602ac864fc079a040dd3a80d91d", "patch": "@@ -185,32 +185,39 @@ install!((self, builder, _config),\n             install_std(builder, self.stage, *target);\n         }\n     };\n-    Cargo, \"cargo\", _config.extended, only_hosts: true, {\n+    Cargo, \"cargo\", _config.extended &&\n+            _config.tools.as_ref().map_or(true, |t| t.contains(\"cargo\")), only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n         install_cargo(builder, self.stage, self.target);\n     };\n-    Rls, \"rls\", _config.extended, only_hosts: true, {\n-        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() {\n+    Rls, \"rls\", _config.extended &&\n+            _config.tools.as_ref().map_or(true, |t| t.contains(\"rls\")), only_hosts: true, {\n+        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() ||\n+            builder.config.tools.as_ref().map_or(false, |t| t.contains(\"rls\")) {\n             install_rls(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install RLS stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Rustfmt, \"rustfmt\", _config.extended, only_hosts: true, {\n-        if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() {\n+    Rustfmt, \"rustfmt\", _config.extended &&\n+            _config.tools.as_ref().map_or(true, |t| t.contains(\"rustfmt\")), only_hosts: true, {\n+        if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n+            builder.config.tools.as_ref().map_or(false, |t| t.contains(\"rustfmt\"))  {\n             install_rustfmt(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Analysis, \"analysis\", _config.extended, only_hosts: false, {\n+    Analysis, \"analysis\", _config.extended &&\n+            _config.tools.as_ref().map_or(true, |t| t.contains(\"analysis\")), only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", _config.extended, only_hosts: true, {\n+    Src, \"src\", _config.extended &&\n+            _config.tools.as_ref().map_or(true, |t| t.contains(\"src\")), only_hosts: true, {\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;"}]}