{"sha": "ee597a8ee155e1a9d9a6479cde35e8c6975a543e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTk3YThlZTE1NWUxYTlkOWE2NDc5Y2RlMzVlOGM2OTc1YTU0M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-10T04:54:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-10T04:54:03Z"}, "message": "Auto merge of #30292 - Xmasreturns:patch-3, r=steveklabnik\n\nUpdated structs.md in the book", "tree": {"sha": "b4cf887db7d2c1bc1ce5af4616df8dd478b805e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4cf887db7d2c1bc1ce5af4616df8dd478b805e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee597a8ee155e1a9d9a6479cde35e8c6975a543e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee597a8ee155e1a9d9a6479cde35e8c6975a543e", "html_url": "https://github.com/rust-lang/rust/commit/ee597a8ee155e1a9d9a6479cde35e8c6975a543e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee597a8ee155e1a9d9a6479cde35e8c6975a543e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97e4d334273f016990f9a101fbb35b84038ec69", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97e4d334273f016990f9a101fbb35b84038ec69", "html_url": "https://github.com/rust-lang/rust/commit/f97e4d334273f016990f9a101fbb35b84038ec69"}, {"sha": "2adba31682c2a5b9b7d32cce2afc9742d9fc2320", "url": "https://api.github.com/repos/rust-lang/rust/commits/2adba31682c2a5b9b7d32cce2afc9742d9fc2320", "html_url": "https://github.com/rust-lang/rust/commit/2adba31682c2a5b9b7d32cce2afc9742d9fc2320"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "1d70ee27869197b1bda9eb444863fd4851debf23", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ee597a8ee155e1a9d9a6479cde35e8c6975a543e/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee597a8ee155e1a9d9a6479cde35e8c6975a543e/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=ee597a8ee155e1a9d9a6479cde35e8c6975a543e", "patch": "@@ -9,7 +9,8 @@ let origin_x = 0;\n let origin_y = 0;\n ```\n \n-A `struct` lets us combine these two into a single, unified datatype:\n+A `struct` lets us combine these two into a single, unified datatype with `x`\n+and `y` as field labels:\n \n ```rust\n struct Point {\n@@ -32,7 +33,7 @@ We can create an instance of our `struct` via `let`, as usual, but we use a `key\n value` style syntax to set each field. The order doesn\u2019t need to be the same as\n in the original declaration.\n \n-Finally, because fields have names, we can access the field through dot\n+Finally, because fields have names, we can access them through dot\n notation: `origin.x`.\n \n The values in `struct`s are immutable by default, like other bindings in Rust.\n@@ -67,9 +68,8 @@ struct Point {\n \n Mutability is a property of the binding, not of the structure itself. If you\u2019re\n used to field-level mutability, this may seem strange at first, but it\n-significantly simplifies things. It even lets you make things mutable for a short\n-time only:\n-\n+significantly simplifies things. It even lets you make things mutable on a temporary\n+basis:\n \n ```rust,ignore\n struct Point {\n@@ -82,7 +82,7 @@ fn main() {\n \n     point.x = 5;\n \n-    let point = point; // this new binding can\u2019t change now\n+    let point = point; // now immutable\n \n     point.y = 6; // this causes an error\n }\n@@ -121,27 +121,24 @@ let point = Point3d { z: 1, x: 2, .. origin };\n # Tuple structs\n \n Rust has another data type that\u2019s like a hybrid between a [tuple][tuple] and a\n-`struct`, called a \u2018tuple struct\u2019. Tuple structs have a name, but\n-their fields don\u2019t:\n+`struct`, called a \u2018tuple struct\u2019. Tuple structs have a name, but their fields\n+don't. They are declared with the `struct` keyword, and then with a name\n+followed by a tuple:\n+\n+[tuple]: primitive-types.html#tuples\n \n ```rust\n struct Color(i32, i32, i32);\n struct Point(i32, i32, i32);\n-```\n \n-[tuple]: primitive-types.html#tuples\n-\n-These two will not be equal, even if they have the same values:\n-\n-```rust\n-# struct Color(i32, i32, i32);\n-# struct Point(i32, i32, i32);\n let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n+Here, `black` and `origin` are not equal, even though they contain the same\n+values.\n \n-It is almost always better to use a `struct` than a tuple struct. We would write\n-`Color` and `Point` like this instead:\n+It is almost always better to use a `struct` than a tuple struct. We\n+would write `Color` and `Point` like this instead:\n \n ```rust\n struct Color {\n@@ -157,13 +154,14 @@ struct Point {\n }\n ```\n \n-Now, we have actual names, rather than positions. Good names are important,\n-and with a `struct`, we have actual names.\n+Good names are important, and while values in a tuple struct can be\n+referenced with dot notation as well, a `struct` gives us actual names,\n+rather than positions.\n \n-There _is_ one case when a tuple struct is very useful, though, and that\u2019s a\n-tuple struct with only one element. We call this the \u2018newtype\u2019 pattern, because\n-it allows you to create a new type, distinct from that of its contained value\n-and expressing its own semantic meaning:\n+There _is_ one case when a tuple struct is very useful, though, and that is when\n+it has only one element. We call this the \u2018newtype\u2019 pattern, because\n+it allows you to create a new type that is distinct from its contained value\n+and also expresses its own semantic meaning:\n \n ```rust\n struct Inches(i32);"}]}