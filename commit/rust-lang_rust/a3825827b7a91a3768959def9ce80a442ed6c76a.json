{"sha": "a3825827b7a91a3768959def9ce80a442ed6c76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODI1ODI3YjdhOTFhMzc2ODk1OWRlZjljZTgwYTQ0MmVkNmM3NmE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-29T22:01:30Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:37Z"}, "message": "Add tests for specialization on associated types", "tree": {"sha": "b98c181b1d6b3718d8937ddf42a561e256e5dca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b98c181b1d6b3718d8937ddf42a561e256e5dca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3825827b7a91a3768959def9ce80a442ed6c76a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3825827b7a91a3768959def9ce80a442ed6c76a", "html_url": "https://github.com/rust-lang/rust/commit/a3825827b7a91a3768959def9ce80a442ed6c76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3825827b7a91a3768959def9ce80a442ed6c76a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e5112e88b8e73a5bff5a84f37f1d2a608e821c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5112e88b8e73a5bff5a84f37f1d2a608e821c", "html_url": "https://github.com/rust-lang/rust/commit/b7e5112e88b8e73a5bff5a84f37f1d2a608e821c"}], "stats": {"total": 199, "additions": 199, "deletions": 0}, "files": [{"sha": "b85dba126e613b1fba479365868f1441ed32192f", "filename": "src/test/compile-fail/specialization-default-projection.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Fcompile-fail%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Fcompile-fail%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-default-projection.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure we can't project defaulted associated types\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+impl<T> Foo for T {\n+    default type Assoc = ();\n+}\n+\n+impl Foo for u8 {\n+    type Assoc = String;\n+}\n+\n+fn generic<T>() -> <T as Foo>::Assoc {\n+    () //~ ERROR\n+}\n+\n+fn main() {\n+    let s: String = generic::<u8>();\n+    println!(\"{}\", s); // bad news\n+}"}, {"sha": "f6b2dd46efc29773d96ead1d2e69810b872f2d1f", "filename": "src/test/compile-fail/specialization-default-types.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Fcompile-fail%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Fcompile-fail%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-default-types.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// It should not be possible to use the concrete value of a defaulted\n+// associated type in the impl defining it -- otherwise, what happens\n+// if it's overridden?\n+\n+trait Example {\n+    type Output;\n+    fn generate(self) -> Self::Output;\n+}\n+\n+impl<T> Example for T {\n+    default type Output = Box<T>;\n+    default fn generate(self) -> Self::Output {\n+        Box::new(self) //~ ERROR\n+    }\n+}\n+\n+impl Example for bool {\n+    type Output = bool;\n+    fn generate(self) -> bool { self }\n+}\n+\n+fn trouble<T>(t: T) -> Box<T> {\n+    Example::generate(t) //~ ERROR\n+}\n+\n+fn weaponize() -> bool {\n+    let b: Box<bool> = trouble(true);\n+    *b\n+}\n+\n+fn main() {\n+    weaponize();\n+}"}, {"sha": "f206153266222b45f96b9a56e4f24e6ccf714f28", "filename": "src/test/run-pass/specialization-on-projection.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-on-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-on-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-on-projection.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<T> {}\n+\n+trait Assoc {\n+    type Item;\n+}\n+\n+impl<T: Assoc> Foo<T::Item> for T {}\n+\n+struct Struct;\n+\n+impl Assoc for Struct {\n+    type Item = u8;\n+}\n+\n+impl Foo<u8> for Struct {}\n+\n+fn main() {}"}, {"sha": "86fcab1fdc284ed4b8f943344fc4adf1c5938d03", "filename": "src/test/run-pass/specialization-projection.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-projection.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure we *can* project non-defaulted associated types\n+// cf compile-fail/specialization-default-projection.rs\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+impl<T> Foo for T {\n+    type Assoc = ();\n+}\n+\n+fn generic<T>() -> <T as Foo>::Assoc {\n+    ()\n+}\n+\n+fn main() {\n+}"}, {"sha": "6bca8939d82a94e960af3d984620bf79bd154613", "filename": "src/test/run-pass/specialization-translate-projections-with-params.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections-with-params.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait<T> {\n+    fn convert(&self) -> T;\n+}\n+trait WithAssoc {\n+    type Item;\n+    fn as_item(&self) -> &Self::Item;\n+}\n+\n+impl<T, U> Trait<U> for T where T: WithAssoc<Item=U>, U: Clone {\n+    fn convert(&self) -> U {\n+        self.as_item().clone()\n+    }\n+}\n+\n+impl WithAssoc for u8 {\n+    type Item = u8;\n+    fn as_item(&self) -> &u8 { self }\n+}\n+\n+impl Trait<u8> for u8 {}\n+\n+fn main() {\n+    assert!(3u8.convert() == 3u8);\n+}"}, {"sha": "7f41729a527da02685776b488b38aa11fe636921", "filename": "src/test/run-pass/specialization-translate-projections.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3825827b7a91a3768959def9ce80a442ed6c76a/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-translate-projections.rs?ref=a3825827b7a91a3768959def9ce80a442ed6c76a", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::convert::Into;\n+\n+trait Trait {\n+    fn to_u8(&self) -> u8;\n+}\n+trait WithAssoc {\n+    type Item;\n+    fn to_item(&self) -> Self::Item;\n+}\n+\n+impl<T, U> Trait for T where T: WithAssoc<Item=U>, U: Into<u8> {\n+    fn to_u8(&self) -> u8 {\n+        self.to_item().into()\n+    }\n+}\n+\n+impl WithAssoc for u8 {\n+    type Item = u8;\n+    fn to_item(&self) -> u8 { *self }\n+}\n+\n+impl Trait for u8 {}\n+\n+fn main() {\n+    assert!(3u8.to_u8() == 3u8);\n+}"}]}