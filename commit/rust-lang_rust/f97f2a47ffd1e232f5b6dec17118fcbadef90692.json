{"sha": "f97f2a47ffd1e232f5b6dec17118fcbadef90692", "node_id": "C_kwDOAAsO6NoAKGY5N2YyYTQ3ZmZkMWUyMzJmNWI2ZGVjMTcxMThmY2JhZGVmOTA2OTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-29T06:22:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-08T03:48:10Z"}, "message": "Migrate MutDeref, TransientMutBorrow diagnostics", "tree": {"sha": "8dba7b5634c9559c4cf7cdf2cbd99c364e919c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dba7b5634c9559c4cf7cdf2cbd99c364e919c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97f2a47ffd1e232f5b6dec17118fcbadef90692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97f2a47ffd1e232f5b6dec17118fcbadef90692", "html_url": "https://github.com/rust-lang/rust/commit/f97f2a47ffd1e232f5b6dec17118fcbadef90692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97f2a47ffd1e232f5b6dec17118fcbadef90692/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584e5d4c4ff1e24c7cb32e2a7526b4f629728daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/584e5d4c4ff1e24c7cb32e2a7526b4f629728daf", "html_url": "https://github.com/rust-lang/rust/commit/584e5d4c4ff1e24c7cb32e2a7526b4f629728daf"}], "stats": {"total": 88, "additions": 69, "deletions": 19}, "files": [{"sha": "a463fe7b970f46a2a084254fd07bf786cb8b9d86", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=f97f2a47ffd1e232f5b6dec17118fcbadef90692", "patch": "@@ -63,3 +63,27 @@ pub(crate) struct PanicNonStrErr {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::mut_deref, code = \"E0658\")]\n+pub(crate) struct MutDerefErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErrRaw {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}"}, {"sha": "17376e59e09cc3715d3ab9670530391b6fc83012", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=f97f2a47ffd1e232f5b6dec17118fcbadef90692", "patch": "@@ -23,7 +23,8 @@ use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n use crate::errors::{\n-    NonConstOpErr, PanicNonStrErr, RawPtrComparisonErr, RawPtrToIntErr, StaticAccessErr,\n+    MutDerefErr, NonConstOpErr, PanicNonStrErr, RawPtrComparisonErr, RawPtrToIntErr,\n+    StaticAccessErr, TransientMutBorrowErr, TransientMutBorrowErrRaw,\n };\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n@@ -595,17 +596,17 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let raw = match self.0 {\n-            hir::BorrowKind::Raw => \"raw \",\n-            hir::BorrowKind::Ref => \"\",\n-        };\n-\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n-        )\n+        let kind = ccx.const_kind();\n+        match self.0 {\n+            hir::BorrowKind::Raw => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErrRaw { span, kind }, sym::const_mut_refs),\n+            hir::BorrowKind::Ref => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErr { span, kind }, sym::const_mut_refs),\n+        }\n     }\n }\n \n@@ -626,12 +627,9 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"mutation through a reference is not allowed in {}s\", ccx.const_kind()),\n-        )\n+        ccx.tcx\n+            .sess\n+            .create_feature_err(MutDerefErr { span, kind: ccx.const_kind() }, sym::const_mut_refs)\n     }\n }\n "}, {"sha": "f1a8c8c47ccc3924fdc9047f04a233a2dffe2861", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=f97f2a47ffd1e232f5b6dec17118fcbadef90692", "patch": "@@ -26,3 +26,22 @@ const-eval-raw-ptr-comparison =\n     .note = see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n const-eval-panic-non-str = argument to `panic!()` in a const context must have type `&str`\n+\n+const-eval-mut-deref =\n+    mutation through a reference is not allowed in { $kind -> \n+        [constant function] constant functions\n+        [static] statics\n+        *[constant] constants\n+    }\n+\n+const-eval-transient-mut-borrow = mutable references are not allowed in { $kind -> \n+        [constant function] constant functions\n+        [static] statics\n+        *[constant] constants\n+    }\n+\n+const-eval-transient-mut-borrow-raw = raw mutable references are not allowed in { $kind -> \n+        [constant function] constant functions\n+        [static] statics\n+        *[constant] constants\n+    }"}, {"sha": "edce70d19cc4cad3b51da1e470d330aad2415455", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97f2a47ffd1e232f5b6dec17118fcbadef90692/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f97f2a47ffd1e232f5b6dec17118fcbadef90692", "patch": "@@ -2,7 +2,7 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n-use crate::parse::ParseSess;\n+use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n use crate::{filesearch, lint};\n \n@@ -458,6 +458,15 @@ impl Session {\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n+    pub fn create_feature_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+        feature: Symbol,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut err = self.parse_sess.create_err(err);\n+        add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n+        err\n+    }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }"}]}