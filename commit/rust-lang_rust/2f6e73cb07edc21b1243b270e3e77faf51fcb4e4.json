{"sha": "2f6e73cb07edc21b1243b270e3e77faf51fcb4e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNmU3M2NiMDdlZGMyMWIxMjQzYjI3MGUzZTc3ZmFmNTFmY2I0ZTQ=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2019-09-03T03:09:15Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2019-09-10T02:05:52Z"}, "message": "test/c-variadic: Fix patterns on powerpc64\n\nOn architectures such as powerpc64 that use extend_integer_width_to in\ntheir C ABI processing, integer parameters shorter than the native\nregister width will be annotated with the ArgAttribute::SExt or\nArgAttribute::ZExt attribute, and that attribute will be included in the\ngenerated LLVM IR.\n\nIn this test, all relevant parameters are `i32`, which will get the\n`signext` annotation on the relevant 64-bit architectures. Match both\nthe annotated and non-annotated case, but enforce that the annotation is\napplied consistently.", "tree": {"sha": "d5e9ddaf710448d547337231c87a281da8874eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e9ddaf710448d547337231c87a281da8874eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4", "html_url": "https://github.com/rust-lang/rust/commit/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef54f57c5b9d894a38179d09b00610c1b337b086", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef54f57c5b9d894a38179d09b00610c1b337b086", "html_url": "https://github.com/rust-lang/rust/commit/ef54f57c5b9d894a38179d09b00610c1b337b086"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "2acf95de97ee8fcf4ecd83829ac3f92b274cb8a2", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6e73cb07edc21b1243b270e3e77faf51fcb4e4/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=2f6e73cb07edc21b1243b270e3e77faf51fcb4e4", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n #![feature(c_variadic)]\n@@ -14,13 +15,13 @@ extern \"C\" {\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n     // Ensure that we correctly call foreign C-variadic functions.\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n     foreign_c_variadic_0(0);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n     foreign_c_variadic_0(0, 42i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42, i32 1024)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n     foreign_c_variadic_0(0, 42i32, 1024i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42, i32 1024, i32 0)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n     foreign_c_variadic_0(0, 42i32, 1024i32, 0i32);\n }\n \n@@ -34,18 +35,18 @@ pub unsafe extern \"C\" fn use_foreign_c_variadic_1_0(ap: VaList) {\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_1(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 42)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 42i32);\n }\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_2(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 2, i32 42)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 2i32, 42i32);\n }\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_3(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 2, i32 42, i32 0)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42, [[PARAM]] 0)\n     foreign_c_variadic_1(ap, 2i32, 42i32, 0i32);\n }\n \n@@ -64,12 +65,12 @@ pub unsafe extern \"C\" fn c_variadic(n: i32, mut ap: ...) -> i32 {\n // Ensure that we generate the correct `call` signature when calling a Rust\n // defined C-variadic.\n pub unsafe fn test_c_variadic_call() {\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0)\n+    // CHECK: call [[RET:(signext )?i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n     c_variadic(0);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42)\n     c_variadic(0, 42i32);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42, i32 1024)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n     c_variadic(0, 42i32, 1024i32);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42, i32 1024, i32 0)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n     c_variadic(0, 42i32, 1024i32, 0i32);\n }"}]}