{"sha": "0725d0ceee13d3484b2b7117e4cff82c01d8f868", "node_id": "C_kwDOAAsO6NoAKDA3MjVkMGNlZWUxM2QzNDg0YjJiNzExN2U0Y2ZmODJjMDFkOGY4Njg", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-19T21:44:01Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-19T22:24:18Z"}, "message": "add some cfgs back", "tree": {"sha": "2f7aae0008496ed01120ff25824c1545bfbfae4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7aae0008496ed01120ff25824c1545bfbfae4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0725d0ceee13d3484b2b7117e4cff82c01d8f868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0725d0ceee13d3484b2b7117e4cff82c01d8f868", "html_url": "https://github.com/rust-lang/rust/commit/0725d0ceee13d3484b2b7117e4cff82c01d8f868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0725d0ceee13d3484b2b7117e4cff82c01d8f868/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aefc5ec11065728c99dd9636b736733e2c6544f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aefc5ec11065728c99dd9636b736733e2c6544f0", "html_url": "https://github.com/rust-lang/rust/commit/aefc5ec11065728c99dd9636b736733e2c6544f0"}], "stats": {"total": 258, "additions": 134, "deletions": 124}, "files": [{"sha": "d02cab38ae8f33d87872bc8f39f153919335237a", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -782,7 +782,7 @@ dependencies = [\n  \"declare_clippy_lint\",\n  \"if_chain\",\n  \"itertools\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n  \"rustc-semver\",\n@@ -2003,15 +2003,9 @@ dependencies = [\n \n [[package]]\n name = \"http-auth\"\n-<<<<<<< HEAD\n-version = \"0.1.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5430cacd7a1f9a02fbeb350dfc81a0e5ed42d81f3398cb0ba184017f85bdcfbc\"\n-=======\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c0b40b39d66c28829a0cf4d09f7e139ff8201f7500a5083732848ed3b4b4d850\"\n->>>>>>> 570ad623189 (remove cfgs)\n dependencies = [\n  \"memchr\",\n ]\n@@ -2561,7 +2555,7 @@ dependencies = [\n  \"memchr\",\n  \"once_cell\",\n  \"opener\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"regex\",\n  \"serde\",\n  \"serde_json\",\n@@ -2578,7 +2572,7 @@ dependencies = [\n  \"anyhow\",\n  \"handlebars 3.5.5\",\n  \"pretty_assertions\",\n- \"pulldown-cmark 0.7.2\",\n+ \"pulldown-cmark\",\n  \"same-file\",\n  \"serde_json\",\n  \"url\",\n@@ -3275,17 +3269,6 @@ dependencies = [\n  \"cc\",\n ]\n \n-[[package]]\n-name = \"pulldown-cmark\"\n-version = \"0.7.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca36dea94d187597e104a5c8e4b07576a8a45aa5db48a65e12940d3eb7461f55\"\n-dependencies = [\n- \"bitflags\",\n- \"memchr\",\n- \"unicase\",\n-]\n-\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.9.2\"\n@@ -4589,7 +4572,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"pulldown-cmark 0.9.2\",\n+ \"pulldown-cmark\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -6277,7 +6260,6 @@ checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-<<<<<<< HEAD\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n@@ -6299,29 +6281,6 @@ name = \"windows_x86_64_gnu\"\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n-=======\n-version = \"0.42.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n-\n-[[package]]\n-name = \"windows_i686_gnu\"\n-version = \"0.42.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n-\n-[[package]]\n-name = \"windows_i686_msvc\"\n-version = \"0.42.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n-\n-[[package]]\n-name = \"windows_x86_64_gnu\"\n-version = \"0.42.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n->>>>>>> 570ad623189 (remove cfgs)\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n@@ -6331,15 +6290,9 @@ checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-<<<<<<< HEAD\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n-=======\n-version = \"0.42.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n->>>>>>> 570ad623189 (remove cfgs)\n \n [[package]]\n name = \"writeable\""}, {"sha": "aedc030ea0a2f4e1c5a3c8d7a0ae99b903261f36", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -495,49 +495,59 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         BorrowckInferCtxt { infcx, reg_var_to_origin: RefCell::new(Default::default()) }\n     }\n \n-    pub(crate) fn next_region_var(\n+    pub(crate) fn next_region_var<F>(\n         &self,\n         origin: RegionVariableOrigin,\n-        ctxt: RegionCtxt,\n-    ) -> ty::Region<'tcx> {\n+        get_ctxt_fn: F,\n+    ) -> ty::Region<'tcx>\n+    where\n+        F: Fn() -> RegionCtxt,\n+    {\n         let next_region = self.infcx.next_region_var(origin);\n         let vid = next_region\n             .try_get_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n-        debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n-        let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-        let prev = var_to_origin.insert(vid, ctxt);\n-        debug!(\"var_to_origin after insertion: {:?}\", var_to_origin);\n+        if cfg!(debug_assertions) {\n+            debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n+            let ctxt = get_ctxt_fn();\n+            let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(vid, ctxt);\n \n-        // This only makes sense if not called in a canonicalization context. If this\n-        // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n-        // or modify how we track nll region vars for that map.\n-        assert!(matches!(prev, None));\n+            // This only makes sense if not called in a canonicalization context. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n \n         next_region\n     }\n \n-    #[instrument(skip(self), level = \"debug\")]\n-    pub(crate) fn next_nll_region_var(\n+    #[instrument(skip(self, get_ctxt_fn), level = \"debug\")]\n+    pub(crate) fn next_nll_region_var<F>(\n         &self,\n         origin: NllRegionVariableOrigin,\n-        ctxt: RegionCtxt,\n-    ) -> ty::Region<'tcx> {\n+        get_ctxt_fn: F,\n+    ) -> ty::Region<'tcx>\n+    where\n+        F: Fn() -> RegionCtxt,\n+    {\n         let next_region = self.infcx.next_nll_region_var(origin.clone());\n         let vid = next_region\n             .try_get_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n-        debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n-        let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-        let prev = var_to_origin.insert(vid, ctxt);\n-        debug!(\"var_to_origin after insertion: {:?}\", var_to_origin);\n+        if cfg!(debug_assertions) {\n+            debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n+            let ctxt = get_ctxt_fn();\n+            let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(vid, ctxt);\n \n-        // This only makes sense if not called in a canonicalization context. If this\n-        // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n-        // or modify how we track nll region vars for that map.\n-        assert!(matches!(prev, None));\n+            // This only makes sense if not called in a canonicalization context. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n \n         next_region\n     }"}, {"sha": "0d339dac379ae55bab87074bad2010cf3a6afc4c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -244,6 +244,7 @@ pub enum ExtraConstraintInfo {\n     PlaceholderFromPredicate(Span),\n }\n \n+#[cfg(debug_assertions)]\n #[instrument(skip(infcx, sccs), level = \"debug\")]\n fn sccs_info<'cx, 'tcx>(\n     infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n@@ -252,31 +253,43 @@ fn sccs_info<'cx, 'tcx>(\n     use crate::renumber::RegionCtxt;\n \n     let var_to_origin = infcx.reg_var_to_origin.borrow();\n+\n+    let mut var_to_origin_sorted = var_to_origin.clone().into_iter().collect::<Vec<_>>();\n+    var_to_origin_sorted.sort_by(|a, b| a.0.cmp(&b.0));\n+    let mut debug_str = \"region variables to origins:\\n\".to_string();\n+    for (reg_var, origin) in var_to_origin_sorted.into_iter() {\n+        debug_str.push_str(&format!(\"{:?}: {:?}\\n\", reg_var, origin));\n+    }\n+    debug!(debug_str);\n+\n     let num_components = sccs.scc_data.ranges.len();\n     let mut components = vec![FxHashSet::default(); num_components];\n \n     for (reg_var_idx, scc_idx) in sccs.scc_indices.iter().enumerate() {\n         let reg_var = ty::RegionVid::from_usize(reg_var_idx);\n         let origin = var_to_origin.get(&reg_var).unwrap_or_else(|| &RegionCtxt::Unknown);\n-        components[scc_idx.as_usize()].insert(*origin);\n+        components[scc_idx.as_usize()].insert((reg_var, *origin));\n     }\n \n-    debug!(\n-        \"strongly connected components: {:#?}\",\n-        components\n-            .iter()\n-            .enumerate()\n-            .map(|(idx, origin)| { (ConstraintSccIndex::from_usize(idx), origin) })\n-            .collect::<Vec<_>>()\n-    );\n+    let mut components_str = \"strongly connected components:\";\n+    for (scc_idx, reg_vars_origins) in components.iter().enumerate() {\n+        let regions_info = reg_vars_origins.clone().into_iter().collect::<Vec<_>>();\n+        components_str.push(&format(\n+            \"{:?}: {:?})\",\n+            ConstraintSccIndex::from_usize(scc_idx),\n+            regions_info,\n+        ))\n+    }\n+    debug!(components_str);\n \n-    // Now let's calculate the best representative for each component\n+    // calculate the best representative for each component\n     let components_representatives = components\n         .into_iter()\n         .enumerate()\n         .map(|(scc_idx, region_ctxts)| {\n             let repr = region_ctxts\n                 .into_iter()\n+                .map(|reg_var_origin| reg_var_origin.1)\n                 .max_by(|x, y| x.preference_value().cmp(&y.preference_value()))\n                 .unwrap();\n \n@@ -333,6 +346,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n+        #[cfg(debug_assertions)]\n         sccs_info(_infcx, constraint_sccs.clone());\n \n         let mut scc_values ="}, {"sha": "eb8c86f800ba912d236819ab326dab78a28d7e32", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -31,18 +31,19 @@ pub fn renumber_mir<'tcx>(\n \n /// Replaces all regions appearing in `value` with fresh inference\n /// variables.\n-#[instrument(skip(infcx), level = \"debug\")]\n-pub(crate) fn renumber_regions<'tcx, T>(\n+#[instrument(skip(infcx, get_ctxt_fn), level = \"debug\")]\n+pub(crate) fn renumber_regions<'tcx, T, F>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     value: T,\n-    ctxt: RegionCtxt,\n+    get_ctxt_fn: F,\n ) -> T\n where\n     T: TypeFoldable<'tcx>,\n+    F: Fn() -> RegionCtxt,\n {\n     infcx.tcx.fold_regions(value, |_region, _depth| {\n         let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n-        infcx.next_nll_region_var(origin, ctxt)\n+        infcx.next_nll_region_var(origin, || get_ctxt_fn())\n     })\n }\n \n@@ -61,13 +62,14 @@ pub(crate) enum RegionCtxt {\n     LateBound(BoundRegionInfo),\n     Existential(Option<Symbol>),\n     Placeholder(BoundRegionInfo),\n+    #[cfg(debug_assertions)]\n     Unknown,\n }\n \n impl RegionCtxt {\n     /// Used to determine the representative of a component in the strongly connected\n     /// constraint graph\n-    /// FIXME: don't use underscore here. Got a 'not used' error for some reason\n+    #[cfg(debug_assertions)]\n     pub(crate) fn preference_value(self) -> usize {\n         let _anon = Symbol::intern(\"anon\");\n \n@@ -87,11 +89,12 @@ struct NllVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n-    fn renumber_regions<T>(&mut self, value: T, ctxt: RegionCtxt) -> T\n+    fn renumber_regions<T, F>(&mut self, value: T, region_ctxt_fn: F) -> T\n     where\n         T: TypeFoldable<'tcx>,\n+        F: Fn() -> RegionCtxt,\n     {\n-        renumber_regions(self.infcx, value, ctxt)\n+        renumber_regions(self.infcx, value, region_ctxt_fn)\n     }\n }\n \n@@ -101,31 +104,31 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _ty_context: TyContext) {\n-        *ty = self.renumber_regions(*ty, RegionCtxt::TyContext(_ty_context));\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n+        *ty = self.renumber_regions(*ty, || RegionCtxt::TyContext(ty_context));\n \n         debug!(?ty);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n-        *substs = self.renumber_regions(*substs, RegionCtxt::Location(location));\n+        *substs = self.renumber_regions(*substs, || RegionCtxt::Location(location));\n \n         debug!(?substs);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, location: Location) {\n         let old_region = *region;\n-        *region = self.renumber_regions(old_region, RegionCtxt::Location(location));\n+        *region = self.renumber_regions(old_region, || RegionCtxt::Location(location));\n \n         debug!(?region);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n         let literal = constant.literal;\n-        constant.literal = self.renumber_regions(literal, RegionCtxt::Location(_location));\n+        constant.literal = self.renumber_regions(literal, || RegionCtxt::Location(_location));\n         debug!(\"constant: {:#?}\", constant);\n     }\n }"}, {"sha": "78bdace6b60db46ccf89d2a8348e7371395bdd39", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -1338,14 +1338,21 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     use crate::renumber::{BoundRegionInfo, RegionCtxt};\n                     use rustc_span::Symbol;\n \n-                    let reg_info = match br.kind {\n-                        // FIXME Probably better to use the `Span` here\n-                        ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n-                        ty::BoundRegionKind::BrAnon(..) => {\n-                            BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n-                        }\n-                        ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                        ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+                    let region_ctxt_fn = || {\n+                        let reg_info = match br.kind {\n+                            ty::BoundRegionKind::BrAnon(_, Some(span)) => {\n+                                BoundRegionInfo::Span(span)\n+                            }\n+                            ty::BoundRegionKind::BrAnon(..) => {\n+                                BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n+                            }\n+                            ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n+                            ty::BoundRegionKind::BrEnv => {\n+                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n+                            }\n+                        };\n+\n+                        RegionCtxt::LateBound(reg_info)\n                     };\n \n                     self.infcx.next_region_var(\n@@ -1354,7 +1361,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             br.kind,\n                             LateBoundRegionConversionTime::FnCall,\n                         ),\n-                        RegionCtxt::LateBound(reg_info),\n+                        region_ctxt_fn,\n                     )\n                 });\n                 debug!(?sig);"}, {"sha": "1ea3dccc9109ef11313805ae619d94aa7c49502e", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -110,7 +110,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n \n         let reg_var =\n-            self.type_checker.infcx.next_nll_region_var(origin, RegionCtxt::Existential(_name));\n+            self.type_checker.infcx.next_nll_region_var(origin, || RegionCtxt::Existential(_name));\n \n         reg_var\n     }\n@@ -150,9 +150,16 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         let reg_var = reg\n             .try_get_var()\n             .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-        let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-        let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n-        assert!(matches!(prev, None));\n+\n+        if cfg!(debug_assertions) {\n+            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n+\n+            // It only makes sense to track region vars in non-canonicalization contexts. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n \n         reg\n     }"}, {"sha": "f3ca896cd0de1d3598261a3ec8c6d48cefe2eacb", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0725d0ceee13d3484b2b7117e4cff82c01d8f868/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=0725d0ceee13d3484b2b7117e4cff82c01d8f868", "patch": "@@ -408,7 +408,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         // Create the \"global\" region that is always free in all contexts: 'static.\n         let fr_static = self\n             .infcx\n-            .next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"static\")))\n+            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"static\")))\n             .to_region_vid();\n \n         // We've now added all the global regions. The next ones we\n@@ -447,10 +447,9 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                                 _ => Symbol::intern(\"anon\"),\n                             };\n \n-                            self.infcx.next_nll_region_var(\n-                                FR,\n-                                RegionCtxt::LateBound(BoundRegionInfo::Name(name)),\n-                            )\n+                            self.infcx.next_nll_region_var(FR, || {\n+                                RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                            })\n                         };\n \n                         debug!(?region_vid);\n@@ -486,8 +485,9 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                         _ => Symbol::intern(\"anon\"),\n                     };\n \n-                    self.infcx\n-                        .next_nll_region_var(FR, RegionCtxt::LateBound(BoundRegionInfo::Name(name)))\n+                    self.infcx.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n                 };\n \n                 debug!(?region_vid);\n@@ -506,9 +506,13 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     LangItem::VaList,\n                     Some(self.infcx.tcx.def_span(self.mir_def.did)),\n                 );\n-                let reg_vid = self.infcx.next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"c-variadic\")).to_region_vid();\n-                let region =\n-                    self.infcx.tcx.mk_re_var(reg_vid);\n+\n+                let reg_vid = self\n+                    .infcx\n+                    .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"c-variadic\")))\n+                    .to_region_vid();\n+\n+                let region = self.infcx.tcx.mk_re_var(reg_vid);\n                 let va_list_ty =\n                     self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n \n@@ -520,7 +524,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let fr_fn_body = self\n             .infcx\n-            .next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"fn_body\")))\n+            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"fn_body\")))\n             .to_region_vid();\n \n         let num_universals = self.infcx.num_region_vars();\n@@ -766,7 +770,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             };\n             debug!(?region, ?name);\n \n-            let reg_var = self.next_nll_region_var(origin, RegionCtxt::Free(name));\n+            let reg_var = self.next_nll_region_var(origin, || RegionCtxt::Free(name));\n \n             reg_var\n         })\n@@ -786,7 +790,15 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n             let liberated_region = self.tcx.mk_re_free(all_outlive_scope.to_def_id(), br.kind);\n-            let region_vid = self.next_nll_region_var(origin, RegionCtxt::Bound(BoundRegionInfo::Name(name)));\n+            let region_vid = {\n+                let name = match br.kind.get_name() {\n+                    Some(name) => name,\n+                    _ => Symbol::intern(\"anon\"),\n+                };\n+\n+                self.next_nll_region_var(origin, || RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n+            };\n+\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n             debug!(?liberated_region, ?region_vid);\n             region_vid\n@@ -818,7 +830,9 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n                         _ => Symbol::intern(\"anon\"),\n                     };\n \n-                    self.next_nll_region_var(FR, RegionCtxt::LateBound(BoundRegionInfo::Name(name)))\n+                    self.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n                 };\n \n                 debug!(?region_vid);\n@@ -842,7 +856,9 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n                         _ => Symbol::intern(\"anon\"),\n                     };\n \n-                    self.next_nll_region_var(FR, RegionCtxt::LateBound(BoundRegionInfo::Name(name)))\n+                    self.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n                 };\n \n                 indices.insert_late_bound_region(r, region_vid.to_region_vid());"}]}