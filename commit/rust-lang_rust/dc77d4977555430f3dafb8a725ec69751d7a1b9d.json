{"sha": "dc77d4977555430f3dafb8a725ec69751d7a1b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzdkNDk3NzU1NTQzMGYzZGFmYjhhNzI1ZWM2OTc1MWQ3YTFiOWQ=", "commit": {"author": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2018-10-27T22:59:04Z"}, "committer": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2018-10-27T22:59:04Z"}, "message": "Make a bunch of trivial methods of NonNull be `#[inline]`", "tree": {"sha": "7a12f72a3eca8227757b7295545b4b37370bd2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a12f72a3eca8227757b7295545b4b37370bd2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc77d4977555430f3dafb8a725ec69751d7a1b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc77d4977555430f3dafb8a725ec69751d7a1b9d", "html_url": "https://github.com/rust-lang/rust/commit/dc77d4977555430f3dafb8a725ec69751d7a1b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc77d4977555430f3dafb8a725ec69751d7a1b9d/comments", "author": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "html_url": "https://github.com/rust-lang/rust/commit/cae6efc37d70ab7d353e6ab9ce229d59a65ed643"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "0fe82b93ff7a14bca4c961ca03d8ab68dd38ca44", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc77d4977555430f3dafb8a725ec69751d7a1b9d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc77d4977555430f3dafb8a725ec69751d7a1b9d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=dc77d4977555430f3dafb8a725ec69751d7a1b9d", "patch": "@@ -2867,6 +2867,7 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2882,12 +2883,14 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             Some(NonNull { pointer: NonZero(ptr as _) })\n@@ -2898,6 +2901,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n@@ -2908,6 +2912,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2918,12 +2923,14 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n \n     /// Cast to a pointer of another type\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n+    #[inline]\n     pub fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)\n@@ -2963,48 +2970,55 @@ impl<T: ?Sized> Eq for NonNull<T> {}\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialEq for NonNull<T> {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.as_ptr() == other.as_ptr()\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Ord for NonNull<T> {\n+    #[inline]\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.as_ptr().cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialOrd for NonNull<T> {\n+    #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         self.as_ptr().partial_cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> hash::Hash for NonNull<T> {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         self.as_ptr().hash(state)\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n+    #[inline]\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }"}]}