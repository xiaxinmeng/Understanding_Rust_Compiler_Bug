{"sha": "da26820ebded21cc3fb8bf282cebdc8318f294df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMjY4MjBlYmRlZDIxY2MzZmI4YmYyODJjZWJkYzgzMThmMjk0ZGY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-28T07:33:06Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-28T07:33:06Z"}, "message": "Enable markup for hover on expressions which resolve using type_of\n\nThis adds highlighting when hovering over items which are resolved using\n`type_of`.", "tree": {"sha": "c3a51c02827c2ca01be0be8d4cbd0b6aa29b0842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3a51c02827c2ca01be0be8d4cbd0b6aa29b0842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da26820ebded21cc3fb8bf282cebdc8318f294df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da26820ebded21cc3fb8bf282cebdc8318f294df", "html_url": "https://github.com/rust-lang/rust/commit/da26820ebded21cc3fb8bf282cebdc8318f294df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da26820ebded21cc3fb8bf282cebdc8318f294df/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "html_url": "https://github.com/rust-lang/rust/commit/84e47113e0ab581c1b2c207cbcb212aa86f83c4a"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "d05da54640b4943b6b9fb5c1e658be775a460eff", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da26820ebded21cc3fb8bf282cebdc8318f294df/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da26820ebded21cc3fb8bf282cebdc8318f294df/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=da26820ebded21cc3fb8bf282cebdc8318f294df", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             leaf.ancestors().find(|n| ast::Expr::cast(*n).is_some() || ast::Pat::cast(*n).is_some())\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.range() };\n-        res.extend(type_of(db, frange).map(Into::into));\n+        res.extend(type_of(db, frange).map(rust_code_markup));\n         range = Some(node.range());\n     }\n \n@@ -142,12 +142,27 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     }\n }\n \n+fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n+    rust_code_markup_with_doc::<_, &str>(val, None)\n+}\n+\n+fn rust_code_markup_with_doc<CODE, DOC>(val: CODE, doc: Option<DOC>) -> String\n+where\n+    CODE: AsRef<str>,\n+    DOC: AsRef<str>,\n+{\n+    if let Some(doc) = doc {\n+        format!(\"```rust\\n{}\\n```\\n\\n{}\", val.as_ref(), doc.as_ref())\n+    } else {\n+        format!(\"```rust\\n{}\\n```\", val.as_ref())\n+    }\n+}\n+\n // FIXME: this should not really use navigation target. Rather, approximately\n // resolved symbol should return a `DefId`.\n fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n     match (nav.description(db), nav.docs(db)) {\n-        (Some(desc), Some(docs)) => Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\\n\\n\" + &*docs),\n-        (Some(desc), None) => Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\"),\n+        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n         (None, Some(docs)) => Some(docs),\n         _ => None,\n     }\n@@ -238,6 +253,10 @@ mod tests {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n     }\n \n+    fn trim_markup_opt(s: Option<&str>) -> Option<&str> {\n+        s.map(trim_markup)\n+    }\n+\n     fn check_hover_result(fixture: &str, expected: &[&str]) {\n         let (analysis, position) = analysis_and_position(fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n@@ -264,7 +283,7 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n-        assert_eq!(hover.info.first(), Some(\"u32\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"u32\"));\n     }\n \n     #[test]\n@@ -410,21 +429,21 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         // not the nicest way to show it currently\n-        assert_eq!(hover.info.first(), Some(\"Some<i32>(T) -> Option<T>\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Some<i32>(T) -> Option<T>\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable() {\n         let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info.first(), Some(\"i32\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n         let (analysis, position) = single_file_with_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info.first(), Some(\"i32\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n     #[test]\n@@ -491,6 +510,6 @@ mod tests {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info.first(), Some(\"Thing\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n     }\n }"}]}