{"sha": "e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "node_id": "C_kwDOAAsO6NoAKGU1NjgyNjE1YmI0ZmRiOTBlM2EzN2I4MTBhMWI3YmRlZDJhMTE5OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T13:32:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T13:32:35Z"}, "message": "Auto merge of #99849 - Dylan-DPC:rollup-1yfpplw, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #99714 (Fix regression introduced with #99383)\n - #99723 (Allow using stable os::fd::raw items through unstable os::wasi module)\n - #99810 (Fix settings slider on small width screens)\n - #99837 (Avoid `Symbol` to `String` conversions)\n - #99846 (Refactor `UnresolvedImportError`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5d60acbe5c761a5b59854a6277a42330f066b374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d60acbe5c761a5b59854a6277a42330f066b374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "html_url": "https://github.com/rust-lang/rust/commit/e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e678ccca974a8d0c26991083fb4cf8fff84e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e678ccca974a8d0c26991083fb4cf8fff84e74", "html_url": "https://github.com/rust-lang/rust/commit/05e678ccca974a8d0c26991083fb4cf8fff84e74"}, {"sha": "71b0e95b8219e3a930e1009d4c4fbd1ea3799ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b0e95b8219e3a930e1009d4c4fbd1ea3799ce6", "html_url": "https://github.com/rust-lang/rust/commit/71b0e95b8219e3a930e1009d4c4fbd1ea3799ce6"}], "stats": {"total": 131, "additions": 88, "deletions": 43}, "files": [{"sha": "ccc29adc0153ee206a14d14fa03e1ffaf07af8ee", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -129,7 +129,7 @@ fn get_features(\n                         .span_suggestion(\n                             mi.span(),\n                             \"expected just one word\",\n-                            format!(\"{}\", ident.name),\n+                            ident.name,\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();"}, {"sha": "a14a7fc0610cb989d99cc314be8a103e8b214e6e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -1677,7 +1677,6 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Is this a possibly malformed start of a `macro_rules! foo` item definition?\n-\n     fn is_macro_rules_item(&mut self) -> IsMacroRulesItem {\n         if self.check_keyword(kw::MacroRules) {\n             let macro_rules_span = self.token.span;"}, {"sha": "22a307a15edc095bfd98dcb8e2a50d46890e0312", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -2023,7 +2023,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         span: Span,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<(Vec<Segment>, Vec<String>)> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         debug!(\"make_path_suggestion: span={:?} path={:?}\", span, path);\n \n         match (path.get(0), path.get(1)) {\n@@ -2058,12 +2058,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         &mut self,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<(Vec<Segment>, Vec<String>)> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `self` and check if that is valid.\n         path[0].ident.name = kw::SelfLower;\n         let result = self.r.maybe_resolve_path(&path, None, parent_scope);\n         debug!(\"make_missing_self_suggestion: path={:?} result={:?}\", path, result);\n-        if let PathResult::Module(..) = result { Some((path, Vec::new())) } else { None }\n+        if let PathResult::Module(..) = result { Some((path, None)) } else { None }\n     }\n \n     /// Suggests a missing `crate::` if that resolves to an correct module.\n@@ -2077,20 +2077,20 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         &mut self,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<(Vec<Segment>, Vec<String>)> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = kw::Crate;\n         let result = self.r.maybe_resolve_path(&path, None, parent_scope);\n         debug!(\"make_missing_crate_suggestion:  path={:?} result={:?}\", path, result);\n         if let PathResult::Module(..) = result {\n             Some((\n                 path,\n-                vec![\n+                Some(\n                     \"`use` statements changed in Rust 2018; read more at \\\n                      <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-\\\n                      clarity.html>\"\n                         .to_string(),\n-                ],\n+                ),\n             ))\n         } else {\n             None\n@@ -2108,12 +2108,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         &mut self,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<(Vec<Segment>, Vec<String>)> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         // Replace first ident with `crate` and check if that is valid.\n         path[0].ident.name = kw::Super;\n         let result = self.r.maybe_resolve_path(&path, None, parent_scope);\n         debug!(\"make_missing_super_suggestion:  path={:?} result={:?}\", path, result);\n-        if let PathResult::Module(..) = result { Some((path, Vec::new())) } else { None }\n+        if let PathResult::Module(..) = result { Some((path, None)) } else { None }\n     }\n \n     /// Suggests a missing external crate name if that resolves to an correct module.\n@@ -2130,7 +2130,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         &mut self,\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n-    ) -> Option<(Vec<Segment>, Vec<String>)> {\n+    ) -> Option<(Vec<Segment>, Option<String>)> {\n         if path[1].ident.span.rust_2015() {\n             return None;\n         }\n@@ -2151,7 +2151,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 name, path, result\n             );\n             if let PathResult::Module(..) = result {\n-                return Some((path, Vec::new()));\n+                return Some((path, None));\n             }\n         }\n \n@@ -2175,7 +2175,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         import: &'b Import<'b>,\n         module: ModuleOrUniformRoot<'b>,\n         ident: Ident,\n-    ) -> Option<(Option<Suggestion>, Vec<String>)> {\n+    ) -> Option<(Option<Suggestion>, Option<String>)> {\n         let ModuleOrUniformRoot::Module(mut crate_module) = module else {\n             return None;\n         };\n@@ -2287,12 +2287,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 String::from(\"a macro with this name exists at the root of the crate\"),\n                 Applicability::MaybeIncorrect,\n             ));\n-            let note = vec![\n-                \"this could be because a macro annotated with `#[macro_export]` will be exported \\\n-                 at the root of the crate instead of the module where it is defined\"\n-                    .to_string(),\n-            ];\n-            Some((suggestion, note))\n+            Some((suggestion, Some(\"this could be because a macro annotated with `#[macro_export]` will be exported \\\n+            at the root of the crate instead of the module where it is defined\"\n+               .to_string())))\n         } else {\n             None\n         }"}, {"sha": "b89273990d8e58294df0af188e7c5063233941c3", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -336,7 +336,7 @@ impl<'a> Resolver<'a> {\n struct UnresolvedImportError {\n     span: Span,\n     label: Option<String>,\n-    note: Vec<String>,\n+    note: Option<String>,\n     suggestion: Option<Suggestion>,\n }\n \n@@ -427,7 +427,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 let err = UnresolvedImportError {\n                     span: import.span,\n                     label: None,\n-                    note: Vec::new(),\n+                    note: None,\n                     suggestion: None,\n                 };\n                 if path.contains(\"::\") {\n@@ -463,10 +463,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n \n-        if let Some((_, UnresolvedImportError { note, .. })) = errors.iter().last() {\n-            for message in note {\n-                diag.note(message);\n-            }\n+        if let Some((_, UnresolvedImportError { note: Some(note), .. })) = errors.iter().last() {\n+            diag.note(note);\n         }\n \n         for (_, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n@@ -644,7 +642,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n-                            note: Vec::new(),\n+                            note: None,\n                             suggestion,\n                         },\n                     };\n@@ -686,7 +684,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         return Some(UnresolvedImportError {\n                             span: import.span,\n                             label: Some(String::from(\"cannot glob-import a module into itself\")),\n-                            note: Vec::new(),\n+                            note: None,\n                             suggestion: None,\n                         });\n                     }\n@@ -830,7 +828,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 let (suggestion, note) =\n                     match self.check_for_module_export_macro(import, module, ident) {\n                         Some((suggestion, note)) => (suggestion.or(lev_suggestion), note),\n-                        _ => (lev_suggestion, Vec::new()),\n+                        _ => (lev_suggestion, None),\n                     };\n \n                 let label = match module {"}, {"sha": "6c8faed0df4867125b990be66441157b3d469339", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -184,7 +184,7 @@ pub trait InferCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<String>;\n+    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol>;\n \n     fn suggest_fn_call(\n         &self,\n@@ -737,13 +737,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<String> {\n-        let get_name = |err: &mut Diagnostic, kind: &hir::PatKind<'_>| -> Option<String> {\n+    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol> {\n+        let get_name = |err: &mut Diagnostic, kind: &hir::PatKind<'_>| -> Option<Symbol> {\n             // Get the local name of this closure. This can be inaccurate because\n             // of the possibility of reassignment, but this should be good enough.\n             match &kind {\n-                hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n-                    Some(format!(\"{}\", name))\n+                hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, None) => {\n+                    Some(ident.name)\n                 }\n                 _ => {\n                     err.note(msg);"}, {"sha": "49c9ba459632d2138b74c45619e0e82d0479154b", "filename": "compiler/rustc_traits/src/evaluate_obligation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_span::source_map::DUMMY_SP;\n@@ -16,7 +16,9 @@ fn evaluate_obligation<'tcx>(\n     canonical_goal: CanonicalPredicateGoal<'tcx>,\n ) -> Result<EvaluationResult, OverflowError> {\n     debug!(\"evaluate_obligation(canonical_goal={:#?})\", canonical_goal);\n-    tcx.infer_ctxt().enter_with_canonical(\n+    // HACK This bubble is required for this tests to pass:\n+    // impl-trait/issue99642.rs\n+    tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).enter_with_canonical(\n         DUMMY_SP,\n         &canonical_goal,\n         |ref infcx, goal, _canonical_inference_vars| {"}, {"sha": "d895b647db0b144a8462330a83fdd4325c99e887", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -2,7 +2,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n@@ -258,10 +258,15 @@ fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n-    tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n-        type_op_prove_predicate_with_cause(infcx, fulfill_cx, key, ObligationCause::dummy());\n-        Ok(())\n-    })\n+    // HACK This bubble is required for this test to pass:\n+    // impl-trait/issue-99642.rs\n+    tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).enter_canonical_trait_query(\n+        &canonicalized,\n+        |infcx, fulfill_cx, key| {\n+            type_op_prove_predicate_with_cause(infcx, fulfill_cx, key, ObligationCause::dummy());\n+            Ok(())\n+        },\n+    )\n }\n \n /// The core of the `type_op_prove_predicate` query: for diagnostics purposes in NLL HRTB errors,"}, {"sha": "081915ed148b36be114ec2154b30022dab8c658c", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -14,6 +14,7 @@ use crate::os::wasi::io::OwnedFd;\n use crate::sys_common::{AsInner, IntoInner};\n \n /// Raw file descriptors.\n+#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type RawFd = raw::c_int;\n \n@@ -22,6 +23,7 @@ pub type RawFd = raw::c_int;\n /// This is only available on unix and WASI platforms and must be imported in\n /// order to call the method. Windows platforms have a corresponding\n /// `AsRawHandle` and `AsRawSocket` set of traits.\n+#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawFd {\n     /// Extracts the raw file descriptor.\n@@ -57,6 +59,7 @@ pub trait AsRawFd {\n \n /// A trait to express the ability to construct an object from a raw file\n /// descriptor.\n+#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawFd {\n     /// Constructs a new instance of `Self` from the given raw file\n@@ -100,6 +103,7 @@ pub trait FromRawFd {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw file descriptor.\n+#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor."}, {"sha": "da3b36adad409e037a89a505463c2cb7548afaee", "filename": "library/std/src/os/wasi/io/raw.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -2,4 +2,19 @@\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n \n+// NOTE: despite the fact that this module is unstable,\n+// stable Rust had the capability to access the stable\n+// re-exported items from os::fd::raw through this\n+// unstable module.\n+// In PR #95956 the stability checker was changed to check\n+// all path segments of an item rather than just the last,\n+// which caused the aforementioned stable usage to regress\n+// (see issue #99502).\n+// As a result, the items in os::fd::raw were given the\n+// rustc_allowed_through_unstable_modules attribute.\n+// No regression tests were added to ensure this property,\n+// as CI is not configured to test wasm32-wasi.\n+// If this module is stabilized,\n+// you may want to remove those attributes\n+// (assuming no other unstable modules need them).\n pub use crate::os::fd::raw::*;"}, {"sha": "e82ec0426371849d367f3c3b24de1455f20b160b", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -41,9 +41,7 @@\n \n .toggle {\n \tposition: relative;\n-\tdisplay: inline-block;\n \twidth: 100%;\n-\theight: 27px;\n \tmargin-right: 20px;\n \tdisplay: flex;\n \talign-items: center;\n@@ -58,6 +56,7 @@\n .slider {\n \tposition: relative;\n \twidth: 45px;\n+\tmin-width: 45px;\n \tdisplay: block;\n \theight: 28px;\n \tmargin-right: 20px;"}, {"sha": "d9cf5ee66140fc05bfab8982dac75bdd3f88626d", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -147,3 +147,12 @@ assert-false: \"noscript section\"\n javascript: false\n reload:\n assert-css: (\"noscript section\", {\"display\": \"block\"})\n+javascript: true\n+\n+// Check for the display on small screen\n+show-text: true\n+reload:\n+size: (300, 1000)\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+assert-css: (\"#settings .slider\", {\"width\": \"45px\"}, ALL)"}, {"sha": "0e88b363338a951f2a1a88fafaf2fd36036ad966", "filename": "src/test/ui/impl-trait/issue-99642-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642-2.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+type Opq = impl Sized;\n+fn test() -> impl Iterator<Item = Opq> {\n+    Box::new(0..) as Box<dyn Iterator<Item = _>>\n+}\n+fn main(){}"}, {"sha": "75af60491e43836a233fef461d2cbd1ce7c10107", "filename": "src/test/ui/impl-trait/issue-99642.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99642.rs?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+fn test() -> impl Iterator<Item = impl Sized> {\n+    Box::new(0..) as Box<dyn Iterator<Item = _>>\n+}\n+\n+fn main() {}"}, {"sha": "d20b1cc6d851bb135b3dd00fd87cc535e20c9141", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5682615bb4fdb90e3a37b810a1b7bded2a1199e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "patch": "@@ -1,8 +1,10 @@\n-error[E0275]: overflow evaluating the requirement `<fn() -> Foo {foo} as FnOnce<()>>::Output == fn() -> Foo {foo}`\n+error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n   --> $DIR/issue-53398-cyclic-types.rs:5:13\n    |\n LL | fn foo() -> Foo {\n    |             ^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n \n error: aborting due to previous error\n "}]}