{"sha": "eba374fb21b63751ac10a09dbf269fd5067d4eb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTM3NGZiMjFiNjM3NTFhYzEwYTA5ZGJmMjY5ZmQ1MDY3ZDRlYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T20:02:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T20:02:19Z"}, "message": "Auto merge of #44442 - Aaron1011:promote-static-ref, r=eddyb\n\nFix regression in promotion of rvalues referencing a static\n\nThis commit makes librustc_passes::consts::CheckCrateVisitor properly\nmark expressions as promotable if they reference a static, as it's\nperfectly fine for one static to reference another. It fixes a\nregression that prevented a temporary rvalue from referencing a static\nif it was itself declared within a static.\n\nPrior to commit https://github.com/rust-lang/rust/commit/b8c05fe90bc,\n`region::ScopeTree` would only register a 'terminating scope' for function\nbodies. Thus, while rvalues in a static that referenced a static would be marked\nunpromotable, the lack of enclosing scope would cause\nmem_categorization::MemCategorizationContext::cat_rvalue_node\nto compute a 'temporary scope' of `ReStatic`. Since this had the same\neffect as explicitly selecting a scope of `ReStatic`\ndue to the rvalue being marked by CheckCrateVisitor as promotable,\nno issue occurred.\n\nHowever, commit https://github.com/rust-lang/rust/commit/b8c05fe90bc\nmade ScopeTree unconditionally register a 'terminating scope'\nSince mem_categorization would now compute a non-static 'temporary scope', the\naforementioned rvalues would be erroneously marked as living for too\nshort a time.\n\nBy fixing the behavior of CheckCrateVisitor, this commit avoids changing\nmem_categorization's behavior, while ensuring that temporary values in\nstatics are still allowed to reference other statics.\n\nFixes issue #44373", "tree": {"sha": "4509b24f899cdc2cc05d2a3963df5ec22b0e2250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4509b24f899cdc2cc05d2a3963df5ec22b0e2250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba374fb21b63751ac10a09dbf269fd5067d4eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba374fb21b63751ac10a09dbf269fd5067d4eb8", "html_url": "https://github.com/rust-lang/rust/commit/eba374fb21b63751ac10a09dbf269fd5067d4eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba374fb21b63751ac10a09dbf269fd5067d4eb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa3ec67e28ab8a4c3377a039095cd464713cdfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa3ec67e28ab8a4c3377a039095cd464713cdfd", "html_url": "https://github.com/rust-lang/rust/commit/efa3ec67e28ab8a4c3377a039095cd464713cdfd"}, {"sha": "fb540e3de45571ac85c610475031449993c19277", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb540e3de45571ac85c610475031449993c19277", "html_url": "https://github.com/rust-lang/rust/commit/fb540e3de45571ac85c610475031449993c19277"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "547d63fc3d4aa68f58b400bc7aa9b7a14b3a4767", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=eba374fb21b63751ac10a09dbf269fd5067d4eb8", "patch": "@@ -56,6 +56,7 @@ use std::cmp::Ordering;\n struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     in_fn: bool,\n+    in_static: bool,\n     promotable: bool,\n     mut_rvalue_borrows: NodeSet,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -128,10 +129,16 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         let outer_param_env = self.param_env;\n         let outer_identity_substs = self.identity_substs;\n \n-        self.in_fn = match MirSource::from_node(self.tcx, item_id) {\n-            MirSource::Fn(_) => true,\n-            _ => false\n+        self.in_fn = false;\n+        self.in_static = false;\n+\n+        match MirSource::from_node(self.tcx, item_id) {\n+            MirSource::Fn(_) => self.in_fn = true,\n+            MirSource::Static(_, _) => self.in_static = true,\n+            _ => {}\n         };\n+\n+\n         self.tables = self.tcx.typeck_tables_of(item_def_id);\n         self.param_env = self.tcx.param_env(item_def_id);\n         self.identity_substs = Substs::identity_for_item(self.tcx, item_def_id);\n@@ -327,7 +334,37 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             let def = v.tables.qpath_def(qpath, e.hir_id);\n             match def {\n                 Def::VariantCtor(..) | Def::StructCtor(..) |\n-                Def::Fn(..) | Def::Method(..) => {}\n+                Def::Fn(..) | Def::Method(..) =>  {}\n+\n+                // References to a static that are themselves within a static\n+                // are inherently promotable with the exception\n+                //  of \"#[thread_loca]\" statics, which may not\n+                // outlive the current function\n+                Def::Static(did, _) => {\n+\n+                    if v.in_static {\n+                        let mut thread_local = false;\n+\n+                        for attr in &v.tcx.get_attrs(did)[..] {\n+                            if attr.check_name(\"thread_local\") {\n+                                debug!(\"Reference to Static(id={:?}) is unpromotable \\\n+                                       due to a #[thread_local] attribute\", did);\n+                                v.promotable = false;\n+                                thread_local = true;\n+                                break;\n+                            }\n+                        }\n+\n+                        if !thread_local {\n+                            debug!(\"Allowing promotion of reference to Static(id={:?})\", did);\n+                        }\n+                    } else {\n+                        debug!(\"Reference to Static(id={:?}) is unpromotable as it is not \\\n+                               referenced from a static\", did);\n+                        v.promotable = false;\n+\n+                    }\n+                }\n \n                 Def::Const(did) |\n                 Def::AssociatedConst(did) => {\n@@ -481,6 +518,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n         in_fn: false,\n+        in_static: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n         param_env: ty::ParamEnv::empty(Reveal::UserFacing),"}, {"sha": "d744ad11c5c721787bf1b9be1decf025db54aeb0", "filename": "src/test/compile-fail/issue-44373.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Ftest%2Fcompile-fail%2Fissue-44373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Ftest%2Fcompile-fail%2Fissue-44373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44373.rs?ref=eba374fb21b63751ac10a09dbf269fd5067d4eb8", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+static FOO: u32 = 50;\n+\n+fn main() {\n+    let _val: &'static [&'static u32] = &[&FOO]; //~ ERROR borrowed value does not live long enough\n+}"}, {"sha": "06627e2ad9341509b72b1c7bf11dca343a3c1909", "filename": "src/test/run-pass/issue-44373.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba374fb21b63751ac10a09dbf269fd5067d4eb8/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44373.rs?ref=eba374fb21b63751ac10a09dbf269fd5067d4eb8", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(bool);\n+\n+struct Container(&'static [&'static Foo]);\n+\n+static FOO: Foo = Foo(true);\n+static CONTAINER: Container = Container(&[&FOO]);\n+\n+fn main() {}"}]}