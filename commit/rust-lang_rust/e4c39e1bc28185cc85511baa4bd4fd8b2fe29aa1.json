{"sha": "e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YzM5ZTFiYzI4MTg1Y2M4NTUxMWJhYTRiZDRmZDhiMmZlMjlhYTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T12:19:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T12:19:13Z"}, "message": "better name for check_in_alloc", "tree": {"sha": "db906b629e34813a26ecbb88dde4b0142cc2be61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db906b629e34813a26ecbb88dde4b0142cc2be61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "html_url": "https://github.com/rust-lang/rust/commit/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3677c5be56168508fea082e1651c774e34600ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3677c5be56168508fea082e1651c774e34600ca8", "html_url": "https://github.com/rust-lang/rust/commit/3677c5be56168508fea082e1651c774e34600ca8"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "fceae75d7242149905b77a1cfef06d16630951f5", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "patch": "@@ -191,8 +191,11 @@ impl<'tcx, Tag> Pointer<Tag> {\n         Pointer { alloc_id: self.alloc_id, offset: self.offset, tag: () }\n     }\n \n+    /// Test if the pointer is \"inbounds\" of an allocation of the given size.\n+    /// A pointer is \"inbounds\" even if its offset is equal to the size; this is\n+    /// a \"one-past-the-end\" pointer.\n     #[inline(always)]\n-    pub fn check_in_alloc(\n+    pub fn check_inbounds_alloc(\n         self,\n         allocation_size: Size,\n         msg: CheckInAllocMsg,"}, {"sha": "ad1ec5a11ed6ceb8b678e594ad86eb841e589d53", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e4c39e1bc28185cc85511baa4bd4fd8b2fe29aa1", "patch": "@@ -357,7 +357,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                end_ptr.check_in_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n+                end_ptr.check_inbounds_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if alloc_align.bytes() < align.bytes() {\n@@ -387,7 +387,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> bool {\n         let (size, _align) = self.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)\n             .expect(\"alloc info with MaybeDead cannot fail\");\n-        ptr.check_in_alloc(size, CheckInAllocMsg::NullPointerTest).is_err()\n+        ptr.check_inbounds_alloc(size, CheckInAllocMsg::NullPointerTest).is_err()\n     }\n }\n "}]}