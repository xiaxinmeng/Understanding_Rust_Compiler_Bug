{"sha": "b2bbca393384c6d7e343decef5a927e16f003038", "node_id": "C_kwDOAAsO6NoAKGIyYmJjYTM5MzM4NGM2ZDdlMzQzZGVjZWY1YTkyN2UxNmYwMDMwMzg", "commit": {"author": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-07-18T17:52:03Z"}, "committer": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-08-01T20:10:40Z"}, "message": "remove fn backtrace", "tree": {"sha": "826275152f5db345e7776ec35d65f9fd339dc7ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826275152f5db345e7776ec35d65f9fd339dc7ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bbca393384c6d7e343decef5a927e16f003038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bbca393384c6d7e343decef5a927e16f003038", "html_url": "https://github.com/rust-lang/rust/commit/b2bbca393384c6d7e343decef5a927e16f003038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bbca393384c6d7e343decef5a927e16f003038/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d", "html_url": "https://github.com/rust-lang/rust/commit/c9e134e1b609e571f4d7d18f91f0ccb1a0cb685d"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "722df119d2294f363b1572425994f05eeb8bdaa5", "filename": "library/std/src/error.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b2bbca393384c6d7e343decef5a927e16f003038/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bbca393384c6d7e343decef5a927e16f003038/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=b2bbca393384c6d7e343decef5a927e16f003038", "patch": "@@ -260,20 +260,6 @@ pub trait Error: Debug + Display {\n         TypeId::of::<Self>()\n     }\n \n-    /// Returns a stack backtrace, if available, of where this error occurred.\n-    ///\n-    /// This function allows inspecting the location, in code, of where an error\n-    /// happened. The returned `Backtrace` contains information about the stack\n-    /// trace of the OS thread of execution of where the error originated from.\n-    ///\n-    /// Note that not all errors contain a `Backtrace`. Also note that a\n-    /// `Backtrace` may actually be empty. For more information consult the\n-    /// `Backtrace` type itself.\n-    #[unstable(feature = \"backtrace\", issue = \"53487\")]\n-    fn backtrace(&self) -> Option<&Backtrace> {\n-        None\n-    }\n-\n     /// ```\n     /// if let Err(e) = \"xc\".parse::<u32>() {\n     ///     // Print `e` itself, no need for description().\n@@ -370,7 +356,7 @@ pub trait Error: Debug + Display {\n }\n \n #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-impl Provider for dyn Error + 'static {\n+impl<'b> Provider for dyn Error + 'b {\n     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n         self.provide(req)\n     }\n@@ -757,8 +743,8 @@ impl<'a, T: Error + ?Sized> Error for &'a T {\n         Error::source(&**self)\n     }\n \n-    fn backtrace(&self) -> Option<&Backtrace> {\n-        Error::backtrace(&**self)\n+    fn provide<'b>(&'b self, req: &mut Demand<'b>) {\n+        Error::provide(&**self, req);\n     }\n }\n \n@@ -778,8 +764,8 @@ impl<T: Error + ?Sized> Error for Arc<T> {\n         Error::source(&**self)\n     }\n \n-    fn backtrace(&self) -> Option<&Backtrace> {\n-        Error::backtrace(&**self)\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+        Error::provide(&**self, req);\n     }\n }\n \n@@ -871,6 +857,20 @@ impl Error for alloc::ffi::IntoStringError {\n     }\n }\n \n+impl<'a> dyn Error + 'a {\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&'a self) -> Option<&'a T> {\n+        core::any::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n+    pub fn request_value<T: 'static>(&'a self) -> Option<T> {\n+        core::any::request_value(self)\n+    }\n+}\n+\n // Copied from `any.rs`.\n impl dyn Error + 'static {\n     /// Returns `true` if the inner type is the same as `T`.\n@@ -910,18 +910,6 @@ impl dyn Error + 'static {\n             None\n         }\n     }\n-\n-    /// Request a reference of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        core::any::request_ref(self)\n-    }\n-\n-    /// Request a value of type `T` as context about this error.\n-    #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n-    pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        core::any::request_value(self)\n-    }\n }\n \n impl dyn Error + 'static + Send {\n@@ -949,13 +937,13 @@ impl dyn Error + 'static + Send {\n     /// Request a reference of type `T` as context about this error.\n     #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n     pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::request_ref(self)\n+        <dyn Error>::request_ref(self)\n     }\n \n     /// Request a value of type `T` as context about this error.\n     #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n     pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error + 'static>::request_value(self)\n+        <dyn Error>::request_value(self)\n     }\n }\n \n@@ -984,13 +972,13 @@ impl dyn Error + 'static + Send + Sync {\n     /// Request a reference of type `T` as context about this error.\n     #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n     pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-        <dyn Error + 'static>::request_ref(self)\n+        <dyn Error>::request_ref(self)\n     }\n \n     /// Request a value of type `T` as context about this error.\n     #[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]\n     pub fn request_value<T: 'static>(&self) -> Option<T> {\n-        <dyn Error + 'static>::request_value(self)\n+        <dyn Error>::request_value(self)\n     }\n }\n \n@@ -1467,8 +1455,11 @@ impl<E> Report<E> {\n     /// ```rust\n     /// #![feature(error_reporter)]\n     /// #![feature(backtrace)]\n+    /// #![feature(provide_any)]\n+    /// #![feature(error_generic_member_access)]\n     /// # use std::error::Error;\n     /// # use std::fmt;\n+    /// use std::any::Demand;\n     /// use std::error::Report;\n     /// use std::backtrace::Backtrace;\n     ///\n@@ -1498,8 +1489,9 @@ impl<E> Report<E> {\n     /// }\n     ///\n     /// impl Error for SuperErrorSideKick {\n-    ///     fn backtrace(&self) -> Option<&Backtrace> {\n-    ///         Some(&self.backtrace)\n+    ///     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+    ///         req\n+    ///             .provide_ref::<Backtrace>(&self.backtrace);\n     ///     }\n     /// }\n     ///\n@@ -1552,11 +1544,11 @@ where\n     fn backtrace(&self) -> Option<&Backtrace> {\n         // have to grab the backtrace on the first error directly since that error may not be\n         // 'static\n-        let backtrace = self.error.backtrace();\n+        let backtrace = (&self.error as &dyn Error).request_ref();\n         let backtrace = backtrace.or_else(|| {\n             self.error\n                 .source()\n-                .map(|source| source.chain().find_map(|source| source.backtrace()))\n+                .map(|source| source.chain().find_map(|source| source.request_ref()))\n                 .flatten()\n         });\n         backtrace\n@@ -1618,11 +1610,11 @@ impl Report<Box<dyn Error>> {\n     fn backtrace(&self) -> Option<&Backtrace> {\n         // have to grab the backtrace on the first error directly since that error may not be\n         // 'static\n-        let backtrace = self.error.backtrace();\n+        let backtrace = self.error.request_ref();\n         let backtrace = backtrace.or_else(|| {\n             self.error\n                 .source()\n-                .map(|source| source.chain().find_map(|source| source.backtrace()))\n+                .map(|source| source.chain().find_map(|source| source.request_ref()))\n                 .flatten()\n         });\n         backtrace"}, {"sha": "ee999bd65c3c94cefc7035bca80961648456a98e", "filename": "library/std/src/error/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2bbca393384c6d7e343decef5a927e16f003038/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bbca393384c6d7e343decef5a927e16f003038/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs?ref=b2bbca393384c6d7e343decef5a927e16f003038", "patch": "@@ -1,5 +1,6 @@\n use super::Error;\n use crate::fmt;\n+use core::any::Demand;\n \n #[derive(Debug, PartialEq)]\n struct A;\n@@ -198,8 +199,8 @@ where\n         self.source.as_deref()\n     }\n \n-    fn backtrace(&self) -> Option<&Backtrace> {\n-        self.backtrace.as_ref()\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+        self.backtrace.as_ref().map(|bt| req.provide_ref::<Backtrace>(bt));\n     }\n }\n "}]}