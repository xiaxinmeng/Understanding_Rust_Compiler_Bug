{"sha": "b8cfd5c4142c28dde844678f2d506ccaf058dc78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2ZkNWM0MTQyYzI4ZGRlODQ0Njc4ZjJkNTA2Y2NhZjA1OGRjNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T05:13:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-05T05:13:02Z"}, "message": "librustc: Long lines. rs=rustbot", "tree": {"sha": "9f947bc89c7faa03d1f5455f52c9dee5a69e6580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f947bc89c7faa03d1f5455f52c9dee5a69e6580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8cfd5c4142c28dde844678f2d506ccaf058dc78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cfd5c4142c28dde844678f2d506ccaf058dc78", "html_url": "https://github.com/rust-lang/rust/commit/b8cfd5c4142c28dde844678f2d506ccaf058dc78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8cfd5c4142c28dde844678f2d506ccaf058dc78/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01cd53baf0ea241b17132e857ba356b9b9a14908", "url": "https://api.github.com/repos/rust-lang/rust/commits/01cd53baf0ea241b17132e857ba356b9b9a14908", "html_url": "https://github.com/rust-lang/rust/commit/01cd53baf0ea241b17132e857ba356b9b9a14908"}], "stats": {"total": 144, "additions": 99, "deletions": 45}, "files": [{"sha": "ba0e81fcb16843967c22b9bf616a7a523bf2982b", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -342,8 +342,8 @@ fn pretty_print_input(sess: Session, cfg: ast::crate_cfg, input: input,\n           }\n           pprust::node_block(s, ref blk) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s,\n-                                  ~\"block \" + int::to_str((*blk).node.id, 10u));\n+            pprust::synth_comment(\n+                s, ~\"block \" + int::to_str((*blk).node.id, 10u));\n           }\n           pprust::node_expr(s, expr) => {\n             pp::space(s.s);"}, {"sha": "5d3bd0a8357d1fdfbc54712df9c6087f9da658e2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -637,8 +637,13 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: Writer::Serializer,\n             encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n             encode_region_param(ecx, ebml_w, item);\n         }\n-        encode_enum_variant_info(ecx, ebml_w, item.id,\n-                                 (*enum_definition).variants, path, index, tps);\n+        encode_enum_variant_info(ecx,\n+                                 ebml_w,\n+                                 item.id,\n+                                 (*enum_definition).variants,\n+                                 path,\n+                                 index,\n+                                 tps);\n       }\n       item_class(struct_def, tps) => {\n         /* First, encode the fields and methods"}, {"sha": "4903ad4e7d32730f33e7008d3cb69d71101b43a8", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -140,8 +140,10 @@ impl ctor : cmp::Eq {\n         match ((*self), (*other)) {\n             (single, single) => true,\n             (variant(did_self), variant(did_other)) => did_self == did_other,\n-            (val(ref cv_self), val(ref cv_other)) => (*cv_self) == (*cv_other),\n-            (range(ref cv0_self, ref cv1_self), range(ref cv0_other, ref cv1_other)) => {\n+            (val(ref cv_self), val(ref cv_other)) =>\n+                (*cv_self) == (*cv_other),\n+            (range(ref cv0_self, ref cv1_self),\n+             range(ref cv0_other, ref cv1_other)) => {\n                 (*cv0_self) == (*cv0_other) && (*cv1_self) == (*cv1_other)\n             }\n             (single, _) | (variant(_), _) | (val(_), _) | (range(*), _) => {"}, {"sha": "2841c791d4881f36b2e17f06f131acaf4d950b49", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -156,7 +156,9 @@ impl LanguageItemCollector {\n             meta_name_value(ref key, literal) => {\n                 match literal.node {\n                     lit_str(value) => {\n-                        self.match_and_collect_item(item_def_id, (*key), *value);\n+                        self.match_and_collect_item(item_def_id,\n+                                                    (*key),\n+                                                    *value);\n                     }\n                     _ => {} // Skip.\n                 }"}, {"sha": "5a12bea526e6fd7d8f0d290fcaafbfbe10f1935c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -1546,7 +1546,7 @@ impl Resolver {\n                                                            in this module\");\n                                 }\n \n-                                for (*path_list_idents).each |path_list_ident| {\n+                                for path_list_idents.each |path_list_ident| {\n                                     let ident = path_list_ident.node.name;\n                                     let id = path_list_ident.node.id;\n                                     module_.exported_names.insert(ident, id);\n@@ -3646,7 +3646,7 @@ impl Resolver {\n                                     self.resolve_type(argument.ty, visitor);\n                                 }\n \n-                                self.resolve_type((*ty_m).decl.output, visitor);\n+                                self.resolve_type(ty_m.decl.output, visitor);\n                             }\n                           }\n                           provided(m) => {\n@@ -4894,7 +4894,7 @@ impl Resolver {\n \n             expr_fn(_, fn_decl, ref block, capture_clause) |\n             expr_fn_block(fn_decl, ref block, capture_clause) => {\n-                self.resolve_function(FunctionRibKind(expr.id, (*block).node.id),\n+                self.resolve_function(FunctionRibKind(expr.id, block.node.id),\n                                       Some(@fn_decl),\n                                       NoTypeParameters,\n                                       (*block),"}, {"sha": "e2201f876023678affd2d15926162b8368676c67", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -1832,7 +1832,13 @@ fn trans_enum_def(ccx: @crate_ctxt, enum_definition: ast::enum_def,\n                                  variant.node.name, variant.node.id);\n             }\n             ast::enum_variant_kind(ref enum_definition) => {\n-                trans_enum_def(ccx, (*enum_definition), id, tps, degen, path, vi,\n+                trans_enum_def(ccx,\n+                               *enum_definition,\n+                               id,\n+                               tps,\n+                               degen,\n+                               path,\n+                               vi,\n                                i);\n             }\n         }"}, {"sha": "81b6778bb398d023ec119a97b962594ed720bbb9", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -622,7 +622,7 @@ fn trans_arg_expr(bcx: block,\n         Some(_) => {\n             match arg_expr.node {\n                 ast::expr_loop_body(\n-                    blk @ @{node:ast::expr_fn_block(decl, ref body, cap), _}) =>\n+                    blk@@{node:ast::expr_fn_block(decl, ref body, cap), _}) =>\n                 {\n                     let scratch_ty = expr_ty(bcx, blk);\n                     let scratch = alloc_ty(bcx, scratch_ty);"}, {"sha": "c2c3d4606b28d67232df0145a203af7bf3680660", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -517,7 +517,8 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                 controlflow::trans_block(bcx, (*blk), dest)\n             };\n         }\n-        ast::expr_rec(ref fields, base) | ast::expr_struct(_, ref fields, base) => {\n+        ast::expr_rec(ref fields, base) |\n+        ast::expr_struct(_, ref fields, base) => {\n             return trans_rec_or_struct(bcx, (*fields), base, expr.id, dest);\n         }\n         ast::expr_tup(args) => {"}, {"sha": "4148be50ccfce0b8b8f10e7763138615df1b2846", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -667,8 +667,9 @@ fn trans_foreign_mod(ccx: @crate_ctxt,\n                     let llretptr = GEPi(bcx, llargbundle, [0u, n]);\n                     let llretloc = Load(bcx, llretptr);\n                     if (*x86_64).ret_ty.cast {\n-                        let tmp_ptr = BitCast(bcx, llretloc,\n-                                                   T_ptr((*x86_64).ret_ty.ty));\n+                        let tmp_ptr = BitCast(bcx,\n+                                              llretloc,\n+                                              T_ptr((*x86_64).ret_ty.ty));\n                         Store(bcx, llretval, tmp_ptr);\n                     } else {\n                         Store(bcx, llretval, llretloc);"}, {"sha": "ed4fb04dd2e42915838d2a2ae98cc19686ae21bc", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -152,10 +152,13 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n     });\n \n     let lldecl = match map_node {\n-      ast_map::node_item(i@@{node: ast::item_fn(decl, _, _, ref body), _}, _) => {\n+      ast_map::node_item(i@@{\n+                node: ast::item_fn(decl, _, _, ref body),\n+                _\n+            }, _) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(i.attrs, d);\n-        trans_fn(ccx, pt, decl, (*body), d, no_self, psubsts, fn_id.node, None);\n+        trans_fn(ccx, pt, decl, *body, d, no_self, psubsts, fn_id.node, None);\n         d\n       }\n       ast_map::node_item(*) => {"}, {"sha": "0bd8079c6203525bee66214d44b4b4fffeca0b62", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -68,7 +68,9 @@ fn traverse_def_id(cx: ctx, did: def_id) {\n       ast_map::node_foreign_item(item, _, _) => {\n         cx.rmap.insert(item.id, ());\n       }\n-      ast_map::node_variant(ref v, _, _) => { cx.rmap.insert((*v).node.id, ()); }\n+      ast_map::node_variant(ref v, _, _) => {\n+        cx.rmap.insert((*v).node.id, ());\n+      }\n       _ => ()\n     }\n }"}, {"sha": "4931b19f7d569eb6f65c4ee18d400513a262f701", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -119,7 +119,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n         // avoids creating more than one copy of the enum when one\n         // of the enum's variants refers to the enum itself.\n \n-        common::T_named_struct(llvm_type_name(cx, an_enum, did, (*substs).tps))\n+        common::T_named_struct(llvm_type_name(cx, an_enum, did, substs.tps))\n       }\n       ty::ty_estr(ty::vstore_box) => {\n         T_box_ptr(T_box(cx, T_vec(cx, T_i8())))\n@@ -184,7 +184,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n         // in *after* placing it into the type cache. This prevents\n         // infinite recursion with recursive class types.\n \n-        common::T_named_struct(llvm_type_name(cx, a_class, did, (*substs).tps))\n+        common::T_named_struct(llvm_type_name(cx, a_class, did, substs.tps))\n       }\n       ty::ty_self => cx.tcx.sess.unimpl(~\"type_of: ty_self\"),\n       ty::ty_infer(*) => cx.tcx.sess.bug(~\"type_of with ty_infer\"),"}, {"sha": "58e01d42590036c9dd8cc627e1c47fb61fb548c1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -3535,7 +3535,10 @@ fn store_trait_methods(cx: ctxt, id: ast::node_id, ms: @~[method]) {\n fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[ast::ident] {\n     if is_local(id) {\n         match cx.items.find(id.node) {\n-            Some(ast_map::node_item(@{node: item_trait(_, _, ref ms),_}, _)) =>\n+            Some(ast_map::node_item(@{\n+                        node: item_trait(_, _, ref ms),\n+                        _\n+                    }, _)) =>\n                 match ast_util::split_trait_methods((*ms)) {\n                    (_, p) => p.map(|method| method.ident)\n                 },\n@@ -3603,7 +3606,9 @@ fn impl_traits(cx: ctxt, id: ast::def_id, vstore: vstore) -> ~[t] {\n     fn vstoreify(cx: ctxt, ty: t, vstore: vstore) -> t {\n         match ty::get(ty).sty {\n             ty::ty_trait(_, _, trait_vstore) if vstore == trait_vstore => ty,\n-            ty::ty_trait(did, ref substs, _) => mk_trait(cx, did, (*substs), vstore),\n+            ty::ty_trait(did, ref substs, _) => {\n+                mk_trait(cx, did, (*substs), vstore)\n+            }\n             _ => cx.sess.bug(~\"impl_traits: not a trait\")\n         }\n     }\n@@ -3825,8 +3830,10 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n           expr, since check_enum_variants also updates the enum_var_cache\n          */\n         match cx.items.get(id.node) {\n-          ast_map::node_item(@{node: ast::item_enum(ref enum_definition, _), _},\n-                             _) => {\n+          ast_map::node_item(@{\n+                    node: ast::item_enum(ref enum_definition, _),\n+                    _\n+                }, _) => {\n             let variants = (*enum_definition).variants;\n             let mut disr_val = -1;\n             @vec::map(variants, |variant| {"}, {"sha": "37bc4bfae69b0e3ba76fa3d3757ec9664568a486", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -883,9 +883,9 @@ impl LookupContext {\n                 let candidates_same = match (&candidate_a.origin,\n                                              &candidate_b.origin) {\n                     (&method_param(ref p1), &method_param(ref p2)) => {\n-                        let same_trait = (*p1).trait_id == (*p2).trait_id;\n-                        let same_method = (*p1).method_num == (*p2).method_num;\n-                        let same_param = (*p1).param_num == (*p2).param_num;\n+                        let same_trait = p1.trait_id == p2.trait_id;\n+                        let same_method = p1.method_num == p2.method_num;\n+                        let same_param = p1.param_num == p2.param_num;\n                         // The bound number may be different because\n                         // multiple bounds may lead to the same trait\n                         // impl"}, {"sha": "f62e2e638e4419659fa03e3d87d5fb57a1416f4b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -3048,7 +3048,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n      ~\"log10f32\" => {\n         (0u, ~[arg(ast::by_copy, ty::mk_f32(tcx))],\n          ty::mk_f32(tcx))\n-     }      \n+     }\n      ~\"log10f64\" => {\n         (0u, ~[arg(ast::by_copy, ty::mk_f64(tcx))],\n          ty::mk_f64(tcx))"}, {"sha": "ad21411d7cc684dc0a41930a2ff673dd726abb38", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -165,8 +165,11 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                     ccx, rp, struct_def, ty_params, tpt, variant.node.id);\n             }\n             ast::enum_variant_kind(ref enum_definition) => {\n-                get_enum_variant_types(ccx, enum_ty, (*enum_definition).variants,\n-                                       ty_params, rp);\n+                get_enum_variant_types(ccx,\n+                                       enum_ty,\n+                                       enum_definition.variants,\n+                                       ty_params,\n+                                       rp);\n                 result_ty = None;\n             }\n         };\n@@ -232,11 +235,16 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id, trait_ty: ty::t) {\n     let tcx = ccx.tcx;\n     let region_paramd = tcx.region_paramd_items.find(id);\n     match tcx.items.get(id) {\n-      ast_map::node_item(@{node: ast::item_trait(params, _, ref ms), _}, _) => {\n+      ast_map::node_item(@{\n+                node: ast::item_trait(params, _, ref ms),\n+                _\n+            }, _) => {\n         store_methods::<ast::trait_method>(ccx, id, (*ms), |m| {\n             let def_id;\n             match *m {\n-                ast::required(ref ty_method) => def_id = local_def((*ty_method).id),\n+                ast::required(ref ty_method) => {\n+                    def_id = local_def((*ty_method).id)\n+                }\n                 ast::provided(method) => def_id = local_def(method.id)\n             }\n "}, {"sha": "81b6357c6aecd94d5b78a8d9b54be1f1ebbb9442", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -211,7 +211,9 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n             _ => false\n           },\n           ast::meta_name_value(ref na, va) => match b.node {\n-            ast::meta_name_value(ref nb, vb) => (*na) == (*nb) && va.node == vb.node,\n+            ast::meta_name_value(ref nb, vb) => {\n+                (*na) == (*nb) && va.node == vb.node\n+            }\n             _ => false\n           },\n           ast::meta_list(*) => {"}, {"sha": "220a0a7e6bb8402fed113a03617e90673749a52f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -311,7 +311,7 @@ pub impl CodeMap {\n             FssExternal(ref eloc) => {\n                 {filename: /* FIXME (#2543) */ copy (*eloc).filename,\n                  line: (*eloc).line + loc.line - 1u,\n-                 col: if loc.line == 1u {(*eloc).col + loc.col} else {loc.col},\n+                 col: if loc.line == 1 {eloc.col + loc.col} else {loc.col},\n                  file: None}\n             }\n         }"}, {"sha": "9bbe9568f261462b6e4347d9809df9ee9da00a1c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -283,7 +283,7 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n     -> (stmt_, span)\n {\n     let (mac, pth, tts, semi) = biased_match! (\n-        (s)        ~ (stmt_mac(ref mac, semi))    else return orig(s, sp, fld);\n+        (s)        ~ (stmt_mac(ref mac, semi))   else return orig(s, sp, fld);\n         ((*mac).node) ~ (mac_invoc_tt(pth, ref tts)) else {\n             cx.span_bug((*mac).span, ~\"naked syntactic bit\")\n         };"}, {"sha": "f13c5c9aff9ea228c0f90f5cd4b01e35c2d51723", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -422,7 +422,9 @@ fn transcribe_block(cx: ext_ctxt, b: bindings, idx_path: @mut ~[uint],\n     return match block_to_ident(blk) {\n           Some(id) => {\n             match follow_for_trans(cx, b.find(id), idx_path) {\n-              Some(match_block(ref new_blk)) => ((*new_blk).node, (*new_blk).span),\n+              Some(match_block(ref new_blk)) => {\n+                ((*new_blk).node, (*new_blk).span)\n+              }\n \n               // possibly allow promotion of ident/path/expr to blocks?\n               Some(ref m) => match_error(cx, (*m), ~\"a block\"),"}, {"sha": "ad4677942accd7bd49c664944b652ac5e91eb41e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -185,7 +185,9 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n         match m {\n           {node: match_tok(_), span: _} => (),\n           {node: match_seq(ref more_ms, _, _, _, _), span: _} => {\n-            for (*more_ms).each() |next_m| { n_rec(p_s, *next_m, res, ret_val) };\n+            for (*more_ms).each() |next_m| {\n+                n_rec(p_s, *next_m, res, ret_val)\n+            };\n           }\n           {node: match_nonterminal(bind_name, _, idx), span: sp} => {\n             if ret_val.contains_key(bind_name) {"}, {"sha": "f33c8b802040cdbb5f569fa6f9e826e9f4154b66", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -94,7 +94,9 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                         @matched_nonterminal(nt_tt(@ref tt)) => {\n                             match (*tt) {\n                                 // cut off delimiters; don't parse 'em\n-                                tt_delim(ref tts) => (*tts).slice(1u,(*tts).len()-1u),\n+                                tt_delim(ref tts) => {\n+                                    (*tts).slice(1u,(*tts).len()-1u)\n+                                }\n                                 _ => cx.span_fatal(\n                                     sp, ~\"macro rhs must be delimited\")\n                             }"}, {"sha": "19b5975c147256b636110b6bb38c3ecddcaa8460", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -199,8 +199,8 @@ fn tt_next_token(&&r: tt_reader) -> {tok: Token, sp: span} {\n                     ~\"attempted to repeat an expression containing no syntax \\\n                      variables matched as repeating at this depth\");\n               }\n-              lis_contradiction(ref msg) => { /* FIXME #2887 blame macro invoker\n-                                          instead*/\n+              lis_contradiction(ref msg) => {\n+                /* FIXME #2887 blame macro invoker instead*/\n                 r.sp_diag.span_fatal(sp, (*msg));\n               }\n               lis_constraint(len, _) => {\n@@ -217,8 +217,13 @@ fn tt_next_token(&&r: tt_reader) -> {tok: Token, sp: span} {\n                 } else {\n                     r.repeat_len.push(len);\n                     r.repeat_idx.push(0u);\n-                    r.cur = @{readme: (*tts), mut idx: 0u, dotdotdoted: true,\n-                              sep: (*sep), up: tt_frame_up(option::Some(r.cur))};\n+                    r.cur = @{\n+                        readme: (*tts),\n+                        mut idx: 0u,\n+                        dotdotdoted: true,\n+                        sep: (*sep),\n+                        up: tt_frame_up(option::Some(r.cur))\n+                    };\n                 }\n               }\n             }"}, {"sha": "c69a2b62b18ed0cf54ad2d4c93a8bfc769429c77", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -519,7 +519,8 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_vec(mt) => ty_vec(fold_mt(mt, fld)),\n       ty_ptr(mt) => ty_ptr(fold_mt(mt, fld)),\n       ty_rptr(region, mt) => ty_rptr(region, fold_mt(mt, fld)),\n-      ty_rec(ref fields) => ty_rec(vec::map((*fields), |f| fold_field(*f, fld))),\n+      ty_rec(ref fields) =>\n+        ty_rec(vec::map((*fields), |f| fold_field(*f, fld))),\n       ty_fn(f) =>\n         ty_fn(@TyFn {\n             proto: f.proto,"}, {"sha": "86907706bbf77832e8a63e5dd42d0a98aadc4767", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -155,7 +155,9 @@ macro_rules! maybe_whole (\n       _ => ()\n     }) ;\n     (pair_empty $p:expr, $constructor:ident) => ( match copy $p.token {\n-      INTERPOLATED(token::$constructor(ref x)) => { $p.bump(); return (~[], (*x)); }\n+      INTERPOLATED(token::$constructor(ref x)) => {\n+        $p.bump(); return (~[], (*x));\n+      }\n       _ => ()\n     })\n "}, {"sha": "14ef7c56b76db9a648a0cf8cd245112dfcc1b0c2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cfd5c4142c28dde844678f2d506ccaf058dc78/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b8cfd5c4142c28dde844678f2d506ccaf058dc78", "patch": "@@ -744,7 +744,8 @@ fn print_struct(s: ps, struct_def: @ast::struct_def, tps: ~[ast::ty_param],\n /// expression arguments as expressions). It can be done! I think.\n fn print_tt(s: ps, tt: ast::token_tree) {\n     match tt {\n-      ast::tt_delim(ref tts) => for (*tts).each() |tt_elt| { print_tt(s, *tt_elt); },\n+      ast::tt_delim(ref tts) =>\n+        for (*tts).each() |tt_elt| { print_tt(s, *tt_elt); },\n       ast::tt_tok(_, ref tk) => {\n         match (*tk) {\n           parse::token::IDENT(*) => { // don't let idents run together"}]}