{"sha": "fafccdced349d655db83e0ec30e91b85dcf65cf7", "node_id": "C_kwDOAAsO6NoAKGZhZmNjZGNlZDM0OWQ2NTVkYjgzZTBlYzMwZTkxYjg1ZGNmNjVjZjc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-02T13:05:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-02T14:46:13Z"}, "message": "add cast kind of from_exposed_addr (int-to-ptr casts)", "tree": {"sha": "ac2824389ec482db03424576e022e3e304ef54a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2824389ec482db03424576e022e3e304ef54a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafccdced349d655db83e0ec30e91b85dcf65cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafccdced349d655db83e0ec30e91b85dcf65cf7", "html_url": "https://github.com/rust-lang/rust/commit/fafccdced349d655db83e0ec30e91b85dcf65cf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafccdced349d655db83e0ec30e91b85dcf65cf7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6bb83268518dcd74c96b5504f485b71e604e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6bb83268518dcd74c96b5504f485b71e604e4c", "html_url": "https://github.com/rust-lang/rust/commit/5e6bb83268518dcd74c96b5504f485b71e604e4c"}], "stats": {"total": 132, "additions": 93, "deletions": 39}, "files": [{"sha": "e5aed1b60ddc1fe56a3e9b451346315ea1077246", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -2154,31 +2154,55 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         match (cast_ty_from, cast_ty_to) {\n                             (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => (),\n                             _ => {\n-                                span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty)\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PointerExposeAddress cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n                             }\n                         }\n                     }\n \n-                    CastKind::Misc => {\n+                    CastKind::PointerFromExposedAddress => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n                         let cast_ty_to = CastTy::from_ty(*ty);\n                         match (cast_ty_from, cast_ty_to) {\n-                            (None, _)\n-                            | (_, None | Some(CastTy::FnPtr))\n-                            | (Some(CastTy::Float), Some(CastTy::Ptr(_)))\n-                            | (\n-                                Some(CastTy::Ptr(_) | CastTy::FnPtr),\n-                                Some(CastTy::Float | CastTy::Int(_)),\n-                            ) => {\n-                                span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty,)\n+                            (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PointerFromExposedAddress cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n                             }\n+                        }\n+                    }\n+\n+                    CastKind::Misc => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        // Misc casts are either between floats and ints, or one ptr type to another.\n+                        match (cast_ty_from, cast_ty_to) {\n                             (\n-                                Some(CastTy::Int(_)),\n-                                Some(CastTy::Int(_) | CastTy::Float | CastTy::Ptr(_)),\n+                                Some(CastTy::Int(_) | CastTy::Float),\n+                                Some(CastTy::Int(_) | CastTy::Float),\n                             )\n-                            | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))\n                             | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid Misc cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty,\n+                                )\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "07136e1b76a9f0895780db655019cc6326fce889", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -608,7 +608,9 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(\n-                    CastKind::Misc | CastKind::PointerExposeAddress,\n+                    CastKind::Misc\n+                    | CastKind::PointerExposeAddress\n+                    | CastKind::PointerFromExposedAddress,\n                     ref operand,\n                     to_ty,\n                 ) => {"}, {"sha": "90afb7adcb2b5e03b4328a059db3640bfa26a1f8", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )\n-                    | mir::CastKind::Misc => {\n+                    | mir::CastKind::Misc\n+                    | mir::CastKind::PointerFromExposedAddress => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);\n                         if operand.layout.abi.is_uninhabited() {"}, {"sha": "73cc59ad1e674361a78c6d9d26af95b60e4c4043", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -37,6 +37,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(res, dest)?;\n             }\n \n+            PointerFromExposedAddress => {\n+                let src = self.read_immediate(src)?;\n+                let res = self.pointer_from_exposed_address_cast(&src, cast_ty)?;\n+                self.write_immediate(res, dest)?;\n+            }\n+\n             Misc => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.misc_cast(&src, cast_ty)?;\n@@ -201,6 +207,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }\n \n+    pub fn pointer_from_exposed_address_cast(\n+        &mut self,\n+        src: &ImmTy<'tcx, M::PointerTag>,\n+        cast_ty: Ty<'tcx>,\n+    ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n+        assert!(src.layout.ty.is_integral());\n+        assert_matches!(cast_ty.kind(), ty::RawPtr(_));\n+\n+        // First cast to usize.\n+        let scalar = src.to_scalar()?;\n+        let addr = self.cast_from_int_like(scalar, src.layout, self.tcx.types.usize)?;\n+        let addr = addr.to_machine_usize(self)?;\n+\n+        // Then turn address into pointer.\n+        let ptr = M::ptr_from_addr_cast(&self, addr);\n+        Ok(Scalar::from_maybe_pointer(ptr, self).into())\n+    }\n+\n     pub fn cast_from_int_like(\n         &self,\n         scalar: Scalar<M::PointerTag>, // input value (there is no ScalarTy so we separate data+layout)\n@@ -225,16 +249,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Scalar::from_uint(v, size)\n             }\n \n-            RawPtr(_) => {\n-                assert!(src_layout.ty.is_integral());\n-\n-                let size = self.pointer_size();\n-                let addr = u64::try_from(size.truncate(v)).unwrap();\n-\n-                let ptr = M::ptr_from_addr_cast(&self, addr);\n-                Scalar::from_maybe_pointer(ptr, self)\n-            }\n-\n             Float(FloatTy::F32) if signed => Scalar::from_f32(Single::from_i128(v as i128).value),\n             Float(FloatTy::F64) if signed => Scalar::from_f64(Double::from_i128(v as i128).value),\n             Float(FloatTy::F32) => Scalar::from_f32(Single::from_u128(v).value),"}, {"sha": "4b98e19376dda0d18b63cfccc009d4a7afc0bde2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -519,32 +519,30 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Cast(\n-                CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n-                _,\n-                _,\n-            ) => {}\n-\n             Rvalue::Cast(\n                 CastKind::Pointer(\n-                    PointerCast::UnsafeFnPointer\n+                    PointerCast::MutToConstPointer\n+                    | PointerCast::ArrayToPointer\n+                    | PointerCast::UnsafeFnPointer\n                     | PointerCast::ClosureFnPointer(_)\n                     | PointerCast::ReifyFnPointer,\n                 ),\n                 _,\n                 _,\n             ) => {\n-                // Nothing to do here. Function pointer casts are allowed now.\n+                // These are all okay; they only change the type, not the data.\n             }\n \n             Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n-                // Nothing to check here (`check_local_or_return_ty` ensures no trait objects occur\n-                // in the type of any local, which also excludes casts).\n+                // Unsizing is implemented for CTFE.\n             }\n \n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n                 self.check_op(ops::RawPtrToIntCast);\n             }\n+            Rvalue::Cast(CastKind::PointerFromExposedAddress, _, _) => {\n+                // Since no pointer can ever get exposed (rejected above), this is easy to support.\n+            }\n \n             Rvalue::Cast(CastKind::Misc, _, _) => {}\n "}, {"sha": "4879e8de10000f4f2ee44eefff13419bba0a5a69", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -504,7 +504,8 @@ impl<'tcx> Validator<'_, 'tcx> {\n             // ptr-to-int casts are not possible in consts and thus not promotable\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => return Err(Unpromotable),\n \n-            // int-to-ptr casts are fine, they just use the integer value at pointer type.\n+            // all ohter casts including int-to-ptr casts are fine, they just use the integer value\n+            // at pointer type.\n             Rvalue::Cast(_, operand, _) => {\n                 self.validate_operand(operand)?;\n             }"}, {"sha": "f3db359ec334829a39e313b79d655854eb2be56a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -2613,12 +2613,18 @@ impl<'tcx> Rvalue<'tcx> {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n-    Misc,\n     /// An exposing pointer to address cast. A cast between a pointer and an integer type, or\n     /// between a function pointer and an integer type.\n     /// See the docs on `expose_addr` for more details.\n     PointerExposeAddress,\n+    /// An address-to-pointer cast that picks up an exposed provenance.\n+    /// See the docs on `from_exposed_addr` for more details.\n+    PointerFromExposedAddress,\n+    /// All sorts of pointer-to-pointer casts. Note that reference-to-raw-ptr casts are\n+    /// translated into `&raw mut/const *r`, i.e., they are not actually casts.\n     Pointer(PointerCast),\n+    /// Remaining unclassified casts.\n+    Misc,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "8e87ecd27d2853a113ff22e38365d384dee2f579", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -196,6 +196,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n                         CastKind::PointerExposeAddress\n                     }\n+                    (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n+                        CastKind::PointerFromExposedAddress\n+                    }\n                     (_, _) => CastKind::Misc,\n                 };\n                 let source = unpack!("}, {"sha": "037febdf3a579de5f53148e69c8ecd436f7ecd97", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -19,7 +19,7 @@\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n           _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n-          _1 = move _2 as *const fn() (Misc); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n           StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n           nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2"}, {"sha": "58abef38ea8be9e1cc7505536de596ac62e8d76f", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fafccdced349d655db83e0ec30e91b85dcf65cf7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafccdced349d655db83e0ec30e91b85dcf65cf7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=fafccdced349d655db83e0ec30e91b85dcf65cf7", "patch": "@@ -131,7 +131,12 @@ fn check_rvalue<'tcx>(\n         Rvalue::Cast(CastKind::Misc, operand, _) => {\n             check_operand(tcx, operand, span, body)\n         },\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n+        Rvalue::Cast(\n+            CastKind::PointerFromExposedAddress\n+            | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n+            operand,\n+            _\n+        ) => {\n             check_operand(tcx, operand, span, body)\n         },\n         Rvalue::Cast("}]}