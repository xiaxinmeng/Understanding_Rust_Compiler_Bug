{"sha": "caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "node_id": "C_kwDOAAsO6NoAKGNhYTZiYTllODYyODFlYjFmYmRkODdkNTEwMGNjN2U5MmJhMDdmNWM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T17:00:56Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:19:31Z"}, "message": "Support flattening/inlining format_args through & and ().\n\nE.g. format_args!(\"{}\", &(format_args!(\"abc\"))).", "tree": {"sha": "3e556839a130ab02cede1d4dd1f522e7b1c7bffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e556839a130ab02cede1d4dd1f522e7b1c7bffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "html_url": "https://github.com/rust-lang/rust/commit/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ef2f0cfe7c176755d4ec542c38df868bca8bcb", "html_url": "https://github.com/rust-lang/rust/commit/85ef2f0cfe7c176755d4ec542c38df868bca8bcb"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "5d164bc4b3cf5052603e0c3ee8b5fc9103a19744", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "patch": "@@ -1184,6 +1184,15 @@ impl Expr {\n         expr\n     }\n \n+    pub fn peel_parens_and_refs(&self) -> &Expr {\n+        let mut expr = self;\n+        while let ExprKind::Paren(inner) | ExprKind::AddrOf(BorrowKind::Ref, _, inner) = &expr.kind\n+        {\n+            expr = inner;\n+        }\n+        expr\n+    }\n+\n     /// Attempts to reparse as `Ty` (for diagnostic purposes).\n     pub fn to_ty(&self) -> Option<P<Ty>> {\n         let kind = match &self.kind {"}, {"sha": "c21fb3a4cfb73827f2d85bf13ce62627a8c723d4", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=caa6ba9e86281eb1fbdd87d5100cc7e92ba07f5c", "patch": "@@ -34,7 +34,7 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n         if let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i]\n             && let FormatTrait::Display | FormatTrait::Debug = &placeholder.format_trait\n             && let Ok(arg_index) = placeholder.argument.index\n-            && let arg = &fmt.arguments.all_args()[arg_index].expr\n+            && let arg = fmt.arguments.all_args()[arg_index].expr.peel_parens_and_refs()\n             && let ExprKind::FormatArgs(_) = &arg.kind\n             // Check that this argument is not used by any other placeholders.\n             && fmt.template.iter().enumerate().all(|(j, p)|\n@@ -54,9 +54,14 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n             let args = fmt.arguments.all_args_mut();\n             let remaining_args = args.split_off(arg_index + 1);\n             let old_arg_offset = args.len();\n-            let fmt2 = args.pop().unwrap().expr.into_inner(); // The inner FormatArgs.\n-            let ExprKind::FormatArgs(fmt2) = fmt2.kind else { unreachable!() };\n-            let mut fmt2 = fmt2.into_inner();\n+            let mut fmt2 = &mut args.pop().unwrap().expr; // The inner FormatArgs.\n+            let fmt2 = loop { // Unwrap the Expr to get to the FormatArgs.\n+                match &mut fmt2.kind {\n+                    ExprKind::Paren(inner) | ExprKind::AddrOf(BorrowKind::Ref, _, inner) => fmt2 = inner,\n+                    ExprKind::FormatArgs(fmt2) => break fmt2,\n+                    _ => unreachable!(),\n+                }\n+            };\n \n             args.append(fmt2.arguments.all_args_mut());\n             let new_arg_offset = args.len();\n@@ -78,7 +83,7 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n             let rest = fmt.template.split_off(i + 1);\n             fmt.template.pop(); // remove the placeholder for the nested fmt args.\n \n-            for piece in fmt2.template {\n+            for piece in fmt2.template.drain(..) {\n                 match piece {\n                     FormatArgsPiece::Literal(s) => fmt.template.push(FormatArgsPiece::Literal(s)),\n                     FormatArgsPiece::Placeholder(mut p) => {\n@@ -119,7 +124,8 @@ fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n         let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i] else { continue };\n         let Ok(arg_index) = placeholder.argument.index else { continue };\n         if let FormatTrait::Display = placeholder.format_trait\n-            && let ExprKind::Lit(lit) = fmt.arguments.all_args()[arg_index].expr.kind\n+            && let arg = fmt.arguments.all_args()[arg_index].expr.peel_parens_and_refs()\n+            && let ExprKind::Lit(lit) = arg.kind\n             && let token::LitKind::Str | token::LitKind::StrRaw(_) = lit.kind\n             && let Ok(LitKind::Str(s, _)) = LitKind::from_token_lit(lit)\n         {"}]}