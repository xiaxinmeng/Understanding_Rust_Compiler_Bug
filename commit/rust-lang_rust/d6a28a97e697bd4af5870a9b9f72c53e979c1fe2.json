{"sha": "d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTI4YTk3ZTY5N2JkNGFmNTg3MGE5YjlmNzJjNTNlOTc5YzFmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T08:59:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T08:59:27Z"}, "message": "Auto merge of #81694 - GuillaumeGomez:rollup-odg6xqi, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #81144 (Fixed formatting typo in map_while docs)\n - #81573 (Add some links to the cell docs.)\n - #81679 (Bind all clean::Type variants and remove FIXME)\n - #81681 (Better styling of \"Switch result tab\" shortcut)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3831bb12dfd0b6b671e67906af90ab978237d897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3831bb12dfd0b6b671e67906af90ab978237d897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "html_url": "https://github.com/rust-lang/rust/commit/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b593389edbaa9ea0c90f0ed419283842f534e50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b593389edbaa9ea0c90f0ed419283842f534e50a", "html_url": "https://github.com/rust-lang/rust/commit/b593389edbaa9ea0c90f0ed419283842f534e50a"}, {"sha": "e57f1cfb4b053125fa2b10089077e984a40758ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57f1cfb4b053125fa2b10089077e984a40758ba", "html_url": "https://github.com/rust-lang/rust/commit/e57f1cfb4b053125fa2b10089077e984a40758ba"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "885422732e40138ec4e0bc939dffbe40984a9770", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -11,12 +11,10 @@\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n-//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allow doing this in a single-threaded\n+//! presence of aliasing. Both [`Cell<T>`] and [`RefCell<T>`] allow doing this in a single-threaded\n //! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n-//! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n-//! use [`Mutex`](../../std/sync/struct.Mutex.html),\n-//! [`RwLock`](../../std/sync/struct.RwLock.html) or\n-//! [`atomic`](../../core/sync/atomic/index.html) types.\n+//! [`Sync`]). If you need to do aliasing and mutation between multiple threads it is possible to\n+//! use [`Mutex<T>`], [`RwLock<T>`] or [`atomic`] types.\n //!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n@@ -28,13 +26,14 @@\n //! one must use the `RefCell<T>` type, acquiring a write lock before mutating. `Cell<T>` provides\n //! methods to retrieve and change the current interior value:\n //!\n-//!  - For types that implement `Copy`, the `get` method retrieves the current interior value.\n-//!  - For types that implement `Default`, the `take` method replaces the current interior value\n-//!    with `Default::default()` and returns the replaced value.\n-//!  - For all types, the `replace` method replaces the current interior value and returns the\n-//!    replaced value and the `into_inner` method consumes the `Cell<T>` and returns the interior\n-//!    value. Additionally, the `set` method replaces the interior value, dropping the replaced\n-//!    value.\n+//!  - For types that implement [`Copy`], the [`get`](Cell::get) method retrieves the current\n+//!    interior value.\n+//!  - For types that implement [`Default`], the [`take`](Cell::take) method replaces the current\n+//!    interior value with [`Default::default()`] and returns the replaced value.\n+//!  - For all types, the [`replace`](Cell::replace) method replaces the current interior value and\n+//!    returns the replaced value and the [`into_inner`](Cell::into_inner) method consumes the\n+//!    `Cell<T>` and returns the interior value. Additionally, the [`set`](Cell::set) method\n+//!    replaces the interior value, dropping the replaced value.\n //!\n //! `RefCell<T>` uses Rust's lifetimes to implement 'dynamic borrowing', a process whereby one can\n //! claim temporary, exclusive, mutable access to the inner value. Borrows for `RefCell<T>`s are\n@@ -54,12 +53,12 @@\n //!\n //! * Introducing mutability 'inside' of something immutable\n //! * Implementation details of logically-immutable methods.\n-//! * Mutating implementations of `Clone`.\n+//! * Mutating implementations of [`Clone`].\n //!\n //! ## Introducing mutability 'inside' of something immutable\n //!\n-//! Many shared smart pointer types, including `Rc<T>` and `Arc<T>`, provide containers that can be\n-//! cloned and shared between multiple parties. Because the contained values may be\n+//! Many shared smart pointer types, including [`Rc<T>`] and [`Arc<T>`], provide containers that can\n+//! be cloned and shared between multiple parties. Because the contained values may be\n //! multiply-aliased, they can only be borrowed with `&`, not `&mut`. Without cells it would be\n //! impossible to mutate data inside of these smart pointers at all.\n //!\n@@ -91,7 +90,7 @@\n //! ```\n //!\n //! Note that this example uses `Rc<T>` and not `Arc<T>`. `RefCell<T>`s are for single-threaded\n-//! scenarios. Consider using `RwLock<T>` or `Mutex<T>` if you need shared mutability in a\n+//! scenarios. Consider using [`RwLock<T>`] or [`Mutex<T>`] if you need shared mutability in a\n //! multi-threaded situation.\n //!\n //! ## Implementation details of logically-immutable methods\n@@ -127,10 +126,10 @@\n //! ## Mutating implementations of `Clone`\n //!\n //! This is simply a special - but common - case of the previous: hiding mutability for operations\n-//! that appear to be immutable. The `clone` method is expected to not change the source value, and\n-//! is declared to take `&self`, not `&mut self`. Therefore, any mutation that happens in the\n-//! `clone` method must use cell types. For example, `Rc<T>` maintains its reference counts within a\n-//! `Cell<T>`.\n+//! that appear to be immutable. The [`clone`](Clone::clone) method is expected to not change the\n+//! source value, and is declared to take `&self`, not `&mut self`. Therefore, any mutation that\n+//! happens in the `clone` method must use cell types. For example, [`Rc<T>`] maintains its\n+//! reference counts within a `Cell<T>`.\n //!\n //! ```\n //! use std::cell::Cell;\n@@ -185,6 +184,11 @@\n //! }\n //! ```\n //!\n+//! [`Arc<T>`]: ../../std/sync/struct.Arc.html\n+//! [`Rc<T>`]: ../../std/rc/struct.Rc.html\n+//! [`RwLock<T>`]: ../../std/sync/struct.RwLock.html\n+//! [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n+//! [`atomic`]: ../../core/sync/atomic/index.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "c961e2964a94357c3c8e5e60e8698b3f66aa64aa", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -1213,7 +1213,7 @@ pub trait Iterator {\n     /// the iteration should stop, but wasn't placed back into the iterator.\n     ///\n     /// Note that unlike [`take_while`] this iterator is **not** fused.\n-    /// It is also not specified what this iterator returns after the first` None` is returned.\n+    /// It is also not specified what this iterator returns after the first [`None`] is returned.\n     /// If you need fused iterator, use [`fuse`].\n     ///\n     /// [`fuse`]: Iterator::fuse"}, {"sha": "4dd7110f331d649071f21f08ec09edd39cdbd5bc", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -214,8 +214,16 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n         clean::Generic(s) if accept_generic => Some(s),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n         clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),\n-        // FIXME: add all from clean::Type.\n-        _ => None,\n+        clean::Generic(_)\n+        | clean::BareFunction(_)\n+        | clean::Tuple(_)\n+        | clean::Slice(_)\n+        | clean::Array(_, _)\n+        | clean::Never\n+        | clean::RawPointer(_, _)\n+        | clean::QPath { .. }\n+        | clean::Infer\n+        | clean::ImplTrait(_) => None,\n     }\n }\n "}, {"sha": "ec89ae0228c5e412ecb021371f5d4593710ea73a", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -2910,7 +2910,7 @@ function defocusSearchBar() {\n             [\"-\", \"Collapse all sections\"],\n         ].map(x => \"<dt>\" +\n             x[0].split(\" \")\n-                .map((y, index) => (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : y)\n+                .map((y, index) => (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : \" \" + y + \" \")\n                 .join(\"\") + \"</dt><dd>\" + x[1] + \"</dd>\").join(\"\");\n         var div_shortcuts = document.createElement(\"div\");\n         addClass(div_shortcuts, \"shortcuts\");"}, {"sha": "56f17b7a616cd7af114d0d408d0c3fcb82f747e6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -798,6 +798,7 @@ body.blur > :not(#help) {\n \tfloat: left;\n \tclear: left;\n \tdisplay: block;\n+\tmargin-right: 0.5rem;\n }\n #help > div > span {\n \ttext-align: center;"}, {"sha": "9eeccd038a2ffc19a5faa86b394e5f4f85abae82", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "patch": "@@ -239,7 +239,6 @@ a.test-arrow {\n #help dt {\n \tborder-color: #bfbfbf;\n \tbackground: rgba(0,0,0,0);\n-\tcolor: black;\n }\n \n .since {"}]}