{"sha": "fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzhiYjQxZTk2OWM5OTY4OWNmNWZmYjQ4ZDFjZDExYzc1OWE0OTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-14T22:37:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-14T23:15:53Z"}, "message": "std: Use `rustc_demangle` from crates.io\n\nNo more need to duplicate the demangling routine between crates.io and\nthe standard library, we can use the exact same one!", "tree": {"sha": "ba8068b296bdbb6812be53feba77d8a3d28e3b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8068b296bdbb6812be53feba77d8a3d28e3b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "html_url": "https://github.com/rust-lang/rust/commit/fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "html_url": "https://github.com/rust-lang/rust/commit/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f"}], "stats": {"total": 263, "additions": 27, "deletions": 236}, "files": [{"sha": "472470de1de7e26d81b07b7fd991cfe9e85896b4", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "patch": "@@ -87,7 +87,7 @@ dependencies = [\n  \"backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1813,7 +1813,7 @@ name = \"rand_chacha\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1835,7 +1835,7 @@ name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1860,7 +1860,7 @@ name = \"rand_xorshift\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2195,8 +2195,12 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-std-workspace-core 1.0.0\",\n+]\n \n [[package]]\n name = \"rustc-hash\"\n@@ -2315,7 +2319,7 @@ dependencies = [\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_llvm 0.0.0\",\n ]\n \n@@ -2331,7 +2335,7 @@ dependencies = [\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_allocator 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_codegen_utils 0.0.0\",\n@@ -2892,6 +2896,7 @@ dependencies = [\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\",\n  \"rustc_msan 0.0.0\",\n@@ -3578,7 +3583,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-ap-serialize 306.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b2c0e8161e956647592a737074736e6ce05ea36b70c770ea8cca3eb9cb33737\"\n \"checksum rustc-ap-syntax 306.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1adc189e5e4500a4167b9afa04e67067f40d0039e0e05870c977bebb561f065a\"\n \"checksum rustc-ap-syntax_pos 306.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d42c430dbb0be4377bfe6aa5099074c63ac8796b24098562c2e2154aecc5652\"\n-\"checksum rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcfe5b13211b4d78e5c2cadfebd7769197d95c639c35a50057eb4c05de811395\"\n+\"checksum rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82ae957aa1b3055d8e086486723c0ccd3d7b8fa190ae8fa2e35543b6171c810e\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c6d5a683c6ba4ed37959097e88d71c9e8e26659a3cb5be8b389078e7ad45306\"\n \"checksum rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40f06724db71e18d68b3b946fdf890ca8c921d9edccc1404fdfdb537b0d12649\""}, {"sha": "9cee00b9c76d0a81387559b8b92168e04a00ab55", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "patch": "@@ -21,6 +21,7 @@ libc = { version = \"0.2.44\", default-features = false, features = ['rustc-dep-of\n compiler_builtins = { version = \"0.1.1\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n+rustc-demangle = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }\n \n [dev-dependencies]\n rand = \"0.6.1\""}, {"sha": "ead38f2112687144b85198b463c86a451779cb55", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "patch": "@@ -339,6 +339,7 @@ pub use core::{unreachable, unimplemented, write, writeln, try};\n extern crate alloc as alloc_crate;\n #[doc(masked)]\n extern crate libc;\n+extern crate rustc_demangle;\n \n // We always need an unwinder currently for backtraces\n #[doc(masked)]"}, {"sha": "e44113f76f40ed3b18665081889c366d99a16bc2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 11, "deletions": 228, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "patch": "@@ -14,11 +14,12 @@\n use env;\n use io::prelude::*;\n use io;\n+use path::{self, Path};\n+use ptr;\n+use rustc_demangle::demangle;\n use str;\n use sync::atomic::{self, Ordering};\n-use path::{self, Path};\n use sys::mutex::Mutex;\n-use ptr;\n \n pub use sys::backtrace::{\n     unwind_backtrace,\n@@ -191,7 +192,14 @@ fn output(w: &mut dyn Write, idx: usize, frame: Frame,\n         PrintFormat::Short => write!(w, \"  {:2}: \", idx)?,\n     }\n     match s {\n-        Some(string) => demangle(w, string, format)?,\n+        Some(string) => {\n+            let symbol = demangle(string);\n+            match format {\n+                PrintFormat::Full => write!(w, \"{}\", symbol)?,\n+                // strip the trailing hash if short mode\n+                PrintFormat::Short => write!(w, \"{:#}\", symbol)?,\n+            }\n+        }\n         None => w.write_all(b\"<unknown>\")?,\n     }\n     w.write_all(b\"\\n\")\n@@ -235,228 +243,3 @@ fn output_fileline(w: &mut dyn Write,\n     w.write_all(b\"\\n\")\n }\n \n-\n-// All rust symbols are in theory lists of \"::\"-separated identifiers. Some\n-// assemblers, however, can't handle these characters in symbol names. To get\n-// around this, we use C++-style mangling. The mangling method is:\n-//\n-// 1. Prefix the symbol with \"_ZN\"\n-// 2. For each element of the path, emit the length plus the element\n-// 3. End the path with \"E\"\n-//\n-// For example, \"_ZN4testE\" => \"test\" and \"_ZN3foo3barE\" => \"foo::bar\".\n-//\n-// We're the ones printing our backtraces, so we can't rely on anything else to\n-// demangle our symbols. It's *much* nicer to look at demangled symbols, so\n-// this function is implemented to give us nice pretty output.\n-//\n-// Note that this demangler isn't quite as fancy as it could be. We have lots\n-// of other information in our symbols like hashes, version, type information,\n-// etc. Additionally, this doesn't handle glue symbols at all.\n-pub fn demangle(writer: &mut dyn Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n-    // During ThinLTO LLVM may import and rename internal symbols, so strip out\n-    // those endings first as they're one of the last manglings applied to\n-    // symbol names.\n-    let llvm = \".llvm.\";\n-    if let Some(i) = s.find(llvm) {\n-        let candidate = &s[i + llvm.len()..];\n-        let all_hex = candidate.chars().all(|c| {\n-            match c {\n-                'A' ..= 'F' | '0' ..= '9' => true,\n-                _ => false,\n-            }\n-        });\n-\n-        if all_hex {\n-            s = &s[..i];\n-        }\n-    }\n-\n-    // Validate the symbol. If it doesn't look like anything we're\n-    // expecting, we just print it literally. Note that we must handle non-rust\n-    // symbols because we could have any function in the backtrace.\n-    let mut valid = true;\n-    let mut inner = s;\n-    if s.len() > 4 && s.starts_with(\"_ZN\") && s.ends_with(\"E\") {\n-        inner = &s[3 .. s.len() - 1];\n-    // On Windows, dbghelp strips leading underscores, so we accept \"ZN...E\" form too.\n-    } else if s.len() > 3 && s.starts_with(\"ZN\") && s.ends_with(\"E\") {\n-        inner = &s[2 .. s.len() - 1];\n-    } else {\n-        valid = false;\n-    }\n-\n-    if valid {\n-        let mut chars = inner.chars();\n-        while valid {\n-            let mut i = 0;\n-            for c in chars.by_ref() {\n-                if c.is_numeric() {\n-                    i = i * 10 + c as usize - '0' as usize;\n-                } else {\n-                    break\n-                }\n-            }\n-            if i == 0 {\n-                valid = chars.next().is_none();\n-                break\n-            } else if chars.by_ref().take(i - 1).count() != i - 1 {\n-                valid = false;\n-            }\n-        }\n-    }\n-\n-    // Alright, let's do this.\n-    if !valid {\n-        writer.write_all(s.as_bytes())?;\n-    } else {\n-        // remove the `::hfc2edb670e5eda97` part at the end of the symbol.\n-        if format == PrintFormat::Short {\n-            // The symbol in still mangled.\n-            let mut split = inner.rsplitn(2, \"17h\");\n-            match (split.next(), split.next()) {\n-                (Some(addr), rest) => {\n-                    if addr.len() == 16 &&\n-                       addr.chars().all(|c| c.is_digit(16))\n-                    {\n-                        inner = rest.unwrap_or(\"\");\n-                    }\n-                }\n-                _ => (),\n-            }\n-        }\n-\n-        let mut first = true;\n-        while !inner.is_empty() {\n-            if !first {\n-                writer.write_all(b\"::\")?;\n-            } else {\n-                first = false;\n-            }\n-            let mut rest = inner;\n-            while rest.chars().next().unwrap().is_numeric() {\n-                rest = &rest[1..];\n-            }\n-            let i: usize = inner[.. (inner.len() - rest.len())].parse().unwrap();\n-            inner = &rest[i..];\n-            rest = &rest[..i];\n-            if rest.starts_with(\"_$\") {\n-                rest = &rest[1..];\n-            }\n-            while !rest.is_empty() {\n-                if rest.starts_with(\".\") {\n-                    if let Some('.') = rest[1..].chars().next() {\n-                        writer.write_all(b\"::\")?;\n-                        rest = &rest[2..];\n-                    } else {\n-                        writer.write_all(b\".\")?;\n-                        rest = &rest[1..];\n-                    }\n-                } else if rest.starts_with(\"$\") {\n-                    macro_rules! demangle {\n-                        ($($pat:expr => $demangled:expr),*) => ({\n-                            $(if rest.starts_with($pat) {\n-                                writer.write_all($demangled)?;\n-                                rest = &rest[$pat.len()..];\n-                              } else)*\n-                            {\n-                                writer.write_all(rest.as_bytes())?;\n-                                break;\n-                            }\n-\n-                        })\n-                    }\n-\n-                    // see src/librustc/back/link.rs for these mappings\n-                    demangle! (\n-                        \"$SP$\" => b\"@\",\n-                        \"$BP$\" => b\"*\",\n-                        \"$RF$\" => b\"&\",\n-                        \"$LT$\" => b\"<\",\n-                        \"$GT$\" => b\">\",\n-                        \"$LP$\" => b\"(\",\n-                        \"$RP$\" => b\")\",\n-                        \"$C$\" => b\",\",\n-\n-                        // in theory we can demangle any Unicode code point, but\n-                        // for simplicity we just catch the common ones.\n-                        \"$u7e$\" => b\"~\",\n-                        \"$u20$\" => b\" \",\n-                        \"$u27$\" => b\"'\",\n-                        \"$u5b$\" => b\"[\",\n-                        \"$u5d$\" => b\"]\",\n-                        \"$u7b$\" => b\"{\",\n-                        \"$u7d$\" => b\"}\",\n-                        \"$u3b$\" => b\";\",\n-                        \"$u2b$\" => b\"+\",\n-                        \"$u22$\" => b\"\\\"\"\n-                    )\n-                } else {\n-                    let idx = match rest.char_indices().find(|&(_, c)| c == '$' || c == '.') {\n-                        None => rest.len(),\n-                        Some((i, _)) => i,\n-                    };\n-                    writer.write_all(rest[..idx].as_bytes())?;\n-                    rest = &rest[idx..];\n-                }\n-            }\n-        }\n-    }\n-\n-    Ok(())\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use sys_common;\n-    macro_rules! t { ($a:expr, $b:expr) => ({\n-        let mut m = Vec::new();\n-        sys_common::backtrace::demangle(&mut m,\n-                                        $a,\n-                                        super::PrintFormat::Full).unwrap();\n-        assert_eq!(String::from_utf8(m).unwrap(), $b);\n-    }) }\n-\n-    #[test]\n-    fn demangle() {\n-        t!(\"test\", \"test\");\n-        t!(\"_ZN4testE\", \"test\");\n-        t!(\"_ZN4test\", \"_ZN4test\");\n-        t!(\"_ZN4test1a2bcE\", \"test::a::bc\");\n-    }\n-\n-    #[test]\n-    fn demangle_dollars() {\n-        t!(\"_ZN4$RP$E\", \")\");\n-        t!(\"_ZN8$RF$testE\", \"&test\");\n-        t!(\"_ZN8$BP$test4foobE\", \"*test::foob\");\n-        t!(\"_ZN9$u20$test4foobE\", \" test::foob\");\n-        t!(\"_ZN35Bar$LT$$u5b$u32$u3b$$u20$4$u5d$$GT$E\", \"Bar<[u32; 4]>\");\n-    }\n-\n-    #[test]\n-    fn demangle_many_dollars() {\n-        t!(\"_ZN13test$u20$test4foobE\", \"test test::foob\");\n-        t!(\"_ZN12test$BP$test4foobE\", \"test*test::foob\");\n-    }\n-\n-    #[test]\n-    fn demangle_windows() {\n-        t!(\"ZN4testE\", \"test\");\n-        t!(\"ZN13test$u20$test4foobE\", \"test test::foob\");\n-        t!(\"ZN12test$RF$test4foobE\", \"test&test::foob\");\n-    }\n-\n-    #[test]\n-    fn demangle_elements_beginning_with_underscore() {\n-        t!(\"_ZN13_$LT$test$GT$E\", \"<test>\");\n-        t!(\"_ZN28_$u7b$$u7b$closure$u7d$$u7d$E\", \"{{closure}}\");\n-        t!(\"_ZN15__STATIC_FMTSTRE\", \"__STATIC_FMTSTR\");\n-    }\n-\n-    #[test]\n-    fn demangle_trait_impls() {\n-        t!(\"_ZN71_$LT$Test$u20$$u2b$$u20$$u27$static$u20$as$u20$foo..Bar$LT$Test$GT$$GT$3barE\",\n-           \"<Test + 'static as foo::Bar<Test>>::bar\");\n-    }\n-}"}, {"sha": "d1e4387166ca663a30d0566ac58449d37a07e678", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc8bb41e969c99689cf5ffb48d1cd11c759a498/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=fcc8bb41e969c99689cf5ffb48d1cd11c759a498", "patch": "@@ -79,6 +79,7 @@ const WHITELIST: &[Crate] = &[\n     Crate(\"chalk-macros\"),\n     Crate(\"cloudabi\"),\n     Crate(\"cmake\"),\n+    Crate(\"compiler_builtins\"),\n     Crate(\"crc\"),\n     Crate(\"crc32fast\"),\n     Crate(\"crossbeam-deque\"),"}]}