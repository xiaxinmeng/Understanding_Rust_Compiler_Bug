{"sha": "28bb8ed9cb0aa9f1efad252748ea189716355157", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmI4ZWQ5Y2IwYWE5ZjFlZmFkMjUyNzQ4ZWExODk3MTYzNTUxNTc=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-02T23:09:51Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:16:19Z"}, "message": "Cleanup changes leftover from previous tracking attempt", "tree": {"sha": "2b46d43d3a75bf0f69ef81b1af02d97d82f251a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b46d43d3a75bf0f69ef81b1af02d97d82f251a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bb8ed9cb0aa9f1efad252748ea189716355157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bb8ed9cb0aa9f1efad252748ea189716355157", "html_url": "https://github.com/rust-lang/rust/commit/28bb8ed9cb0aa9f1efad252748ea189716355157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bb8ed9cb0aa9f1efad252748ea189716355157/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca52bbb325d4842d9642fc5f9e368b590c4ce41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca52bbb325d4842d9642fc5f9e368b590c4ce41", "html_url": "https://github.com/rust-lang/rust/commit/2ca52bbb325d4842d9642fc5f9e368b590c4ce41"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "c6bc85e2f13e14ca1e3f01e96989aaa50371ce81", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28bb8ed9cb0aa9f1efad252748ea189716355157/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28bb8ed9cb0aa9f1efad252748ea189716355157/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=28bb8ed9cb0aa9f1efad252748ea189716355157", "patch": "@@ -313,20 +313,20 @@ impl ExprCollector<'_> {\n                 } else {\n                     Vec::new()\n                 };\n-                self.alloc_expr(Expr::Call { callee, args: args.clone() }, syntax_ptr)\n+                self.alloc_expr(Expr::Call { callee, args }, syntax_ptr)\n             }\n             ast::Expr::MethodCallExpr(e) => {\n                 let receiver = self.collect_expr_opt(e.expr());\n                 let args = if let Some(arg_list) = e.arg_list() {\n                     arg_list.args().map(|e| self.collect_expr(e)).collect()\n                 } else {\n-                    vec![]\n+                    Vec::new()\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let generic_args =\n                     e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n                 self.alloc_expr(\n-                    Expr::MethodCall { receiver, method_name, args: args.clone(), generic_args },\n+                    Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,\n                 )\n             }\n@@ -345,7 +345,7 @@ impl ExprCollector<'_> {\n                         })\n                         .collect()\n                 } else {\n-                    vec![]\n+                    Vec::new()\n                 };\n                 self.alloc_expr(Expr::Match { expr, arms }, syntax_ptr)\n             }\n@@ -392,15 +392,17 @@ impl ExprCollector<'_> {\n                             }\n                             let name = field.field_name()?.as_name();\n \n-                            let expr = match field.expr() {\n-                                Some(e) => self.collect_expr(e),\n-                                None => self.missing_expr(),\n-                            };\n-                            Some(RecordLitField { name, expr })\n+                            Some(RecordLitField {\n+                                name,\n+                                expr: match field.expr() {\n+                                    Some(e) => self.collect_expr(e),\n+                                    None => self.missing_expr(),\n+                                },\n+                            })\n                         })\n                         .collect();\n                     let spread = nfl.spread().map(|s| self.collect_expr(s));\n-                    Expr::RecordLit { path, fields, spread: spread }\n+                    Expr::RecordLit { path, fields, spread }\n                 } else {\n                     Expr::RecordLit { path, fields: Vec::new(), spread: None }\n                 };\n@@ -484,8 +486,8 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::Expr::TupleExpr(e) => {\n-                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect::<Vec<_>>();\n-                self.alloc_expr(Expr::Tuple { exprs: exprs.clone() }, syntax_ptr)\n+                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n             ast::Expr::BoxExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n@@ -497,8 +499,8 @@ impl ExprCollector<'_> {\n \n                 match kind {\n                     ArrayExprKind::ElementList(e) => {\n-                        let exprs = e.map(|expr| self.collect_expr(expr)).collect::<Vec<_>>();\n-                        self.alloc_expr(Expr::Array(Array::ElementList(exprs.clone())), syntax_ptr)\n+                        let exprs = e.map(|expr| self.collect_expr(expr)).collect();\n+                        self.alloc_expr(Expr::Array(Array::ElementList(exprs)), syntax_ptr)\n                     }\n                     ArrayExprKind::Repeat { initializer, repeat } => {\n                         let initializer = self.collect_expr_opt(initializer);"}]}