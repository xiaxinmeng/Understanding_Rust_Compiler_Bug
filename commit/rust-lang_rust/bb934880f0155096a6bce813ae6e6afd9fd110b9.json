{"sha": "bb934880f0155096a6bce813ae6e6afd9fd110b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTM0ODgwZjAxNTUwOTZhNmJjZTgxM2FlNmU2YWZkOWZkMTEwYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:39:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:39:23Z"}, "message": "typeck/expr.rs: extract out check_expr_tuple.", "tree": {"sha": "af9f4d17e7bc4ffb107da3d327a3e683607e35f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9f4d17e7bc4ffb107da3d327a3e683607e35f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb934880f0155096a6bce813ae6e6afd9fd110b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb934880f0155096a6bce813ae6e6afd9fd110b9", "html_url": "https://github.com/rust-lang/rust/commit/bb934880f0155096a6bce813ae6e6afd9fd110b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb934880f0155096a6bce813ae6e6afd9fd110b9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82cac1505cb87ccb594aa68b4ad3f27f67720ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cac1505cb87ccb594aa68b4ad3f27f67720ecf", "html_url": "https://github.com/rust-lang/rust/commit/82cac1505cb87ccb594aa68b4ad3f27f67720ecf"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "8f93e3837fa20638482d3dac4acd8fc7add81371", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bb934880f0155096a6bce813ae6e6afd9fd110b9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb934880f0155096a6bce813ae6e6afd9fd110b9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=bb934880f0155096a6bce813ae6e6afd9fd110b9", "patch": "@@ -131,34 +131,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }\n             ExprKind::Tup(ref elts) => {\n-                let flds = expected.only_has_type(self).and_then(|ty| {\n-                    let ty = self.resolve_type_vars_with_obligations(ty);\n-                    match ty.sty {\n-                        ty::Tuple(ref flds) => Some(&flds[..]),\n-                        _ => None\n-                    }\n-                });\n-\n-                let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| {\n-                    let t = match flds {\n-                        Some(ref fs) if i < fs.len() => {\n-                            let ety = fs[i].expect_ty();\n-                            self.check_expr_coercable_to_type(&e, ety);\n-                            ety\n-                        }\n-                        _ => {\n-                            self.check_expr_with_expectation(&e, NoExpectation)\n-                        }\n-                    };\n-                    t\n-                });\n-                let tuple = tcx.mk_tup(elt_ts_iter);\n-                if tuple.references_error() {\n-                    tcx.types.err\n-                } else {\n-                    self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);\n-                    tuple\n-                }\n+                self.check_expr_tuple(elts, expected, expr)\n             }\n             ExprKind::Struct(ref qpath, ref fields, ref base_expr) => {\n                 self.check_expr_struct(expr, expected, qpath, fields, base_expr)\n@@ -835,4 +808,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.types.err\n         }\n     }\n+\n+    fn check_expr_tuple(\n+        &self,\n+        elts: &'tcx [hir::Expr],\n+        expected: Expectation<'tcx>,\n+        expr: &'tcx hir::Expr,\n+    ) -> Ty<'tcx> {\n+        let flds = expected.only_has_type(self).and_then(|ty| {\n+            let ty = self.resolve_type_vars_with_obligations(ty);\n+            match ty.sty {\n+                ty::Tuple(ref flds) => Some(&flds[..]),\n+                _ => None\n+            }\n+        });\n+\n+        let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| {\n+            let t = match flds {\n+                Some(ref fs) if i < fs.len() => {\n+                    let ety = fs[i].expect_ty();\n+                    self.check_expr_coercable_to_type(&e, ety);\n+                    ety\n+                }\n+                _ => {\n+                    self.check_expr_with_expectation(&e, NoExpectation)\n+                }\n+            };\n+            t\n+        });\n+        let tuple = self.tcx.mk_tup(elt_ts_iter);\n+        if tuple.references_error() {\n+            self.tcx.types.err\n+        } else {\n+            self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);\n+            tuple\n+        }\n+    }\n }"}]}