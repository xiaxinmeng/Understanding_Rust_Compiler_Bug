{"sha": "429ef870f67b02664b6ac35b08f3b36b71e8bd00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWVmODcwZjY3YjAyNjY0YjZhYzM1YjA4ZjNiMzZiNzFlOGJkMDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-17T07:11:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-19T09:30:52Z"}, "message": "rustdoc: Handle links to reexported items\n\nWhen building up our path cache, we don't plaster over a path which was\npreviously inserted if we're inserting a non-public-item thing.\n\nCloses #11678", "tree": {"sha": "8c8f3e359d1ca2b7cbb6ec24a14deef66af28a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8f3e359d1ca2b7cbb6ec24a14deef66af28a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429ef870f67b02664b6ac35b08f3b36b71e8bd00", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429ef870f67b02664b6ac35b08f3b36b71e8bd00", "html_url": "https://github.com/rust-lang/rust/commit/429ef870f67b02664b6ac35b08f3b36b71e8bd00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429ef870f67b02664b6ac35b08f3b36b71e8bd00/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac9107f38c1d28ed263759040b5411b0db47824", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac9107f38c1d28ed263759040b5411b0db47824", "html_url": "https://github.com/rust-lang/rust/commit/cac9107f38c1d28ed263759040b5411b0db47824"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "649d5f592c5c58869b2a00dd6c11b77f959c4fe1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/429ef870f67b02664b6ac35b08f3b36b71e8bd00/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429ef870f67b02664b6ac35b08f3b36b71e8bd00/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=429ef870f67b02664b6ac35b08f3b36b71e8bd00", "patch": "@@ -157,6 +157,7 @@ pub struct Cache {\n     priv parent_stack: ~[ast::NodeId],\n     priv search_index: ~[IndexItem],\n     priv privmod: bool,\n+    priv public_items: HashSet<ast::NodeId>,\n }\n \n /// Helper struct to render all source code to HTML pages\n@@ -231,18 +232,23 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n     }\n \n     // Crawl the crate to build various caches used for the output\n-    let mut cache = Cache {\n-        impls: HashMap::new(),\n-        typarams: HashMap::new(),\n-        paths: HashMap::new(),\n-        traits: HashMap::new(),\n-        implementors: HashMap::new(),\n-        stack: ~[],\n-        parent_stack: ~[],\n-        search_index: ~[],\n-        extern_locations: HashMap::new(),\n-        privmod: false,\n-    };\n+    let mut cache = local_data::get(::analysiskey, |analysis| {\n+        let public_items = analysis.map(|a| a.public_items.clone());\n+        let public_items = public_items.unwrap_or(HashSet::new());\n+        Cache {\n+            impls: HashMap::new(),\n+            typarams: HashMap::new(),\n+            paths: HashMap::new(),\n+            traits: HashMap::new(),\n+            implementors: HashMap::new(),\n+            stack: ~[],\n+            parent_stack: ~[],\n+            search_index: ~[],\n+            extern_locations: HashMap::new(),\n+            privmod: false,\n+            public_items: public_items,\n+        }\n+    });\n     cache.stack.push(krate.name.clone());\n     krate = cache.fold_crate(krate);\n \n@@ -566,7 +572,16 @@ impl DocFolder for Cache {\n             clean::TypedefItem(..) | clean::TraitItem(..) |\n             clean::FunctionItem(..) | clean::ModuleItem(..) |\n             clean::ForeignFunctionItem(..) => {\n-                self.paths.insert(item.id, (self.stack.clone(), shortty(&item)));\n+                // Reexported items mean that the same id can show up twice in\n+                // the rustdoc ast that we're looking at. We know, however, that\n+                // a reexported item doesn't show up in the `public_items` map,\n+                // so we can skip inserting into the paths map if there was\n+                // already an entry present and we're not a public item.\n+                if !self.paths.contains_key(&item.id) ||\n+                   self.public_items.contains(&item.id) {\n+                    self.paths.insert(item.id,\n+                                      (self.stack.clone(), shortty(&item)));\n+                }\n             }\n             // link variants to their parent enum because pages aren't emitted\n             // for each variant"}, {"sha": "34b33003786e73b050108f5e7d4aab8dec5ca321", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/429ef870f67b02664b6ac35b08f3b36b71e8bd00/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429ef870f67b02664b6ac35b08f3b36b71e8bd00/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=429ef870f67b02664b6ac35b08f3b36b71e8bd00", "patch": "@@ -130,6 +130,7 @@ macro_rules! log_enabled(\n /// # Example\n ///\n /// ```should_fail\n+/// # #[allow(unreachable_code)];\n /// fail!();\n /// fail!(\"this is a terrible mistake!\");\n /// fail!(4); // fail with the value of 4 to be collected elsewhere\n@@ -228,13 +229,15 @@ macro_rules! assert_eq(\n /// # Example\n ///\n /// ~~~rust\n+/// struct Item { weight: uint }\n+///\n /// fn choose_weighted_item(v: &[Item]) -> Item {\n ///     assert!(!v.is_empty());\n ///     let mut so_far = 0u;\n ///     for item in v.iter() {\n ///         so_far += item.weight;\n ///         if so_far > 100 {\n-///             return item;\n+///             return *item;\n ///         }\n ///     }\n ///     // The above loop always returns, so we must hint to the\n@@ -336,7 +339,7 @@ macro_rules! println(\n /// local_data_key!(my_integer: int)\n ///\n /// local_data::set(my_integer, 2);\n-/// local_data::get(my_integer, |val| println!(\"{}\", val));\n+/// local_data::get(my_integer, |val| println!(\"{}\", val.map(|i| *i)));\n /// ```\n #[macro_export]\n macro_rules! local_data_key("}]}