{"sha": "b18b9edf006c10f4e08794d31425001401e27a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGI5ZWRmMDA2YzEwZjRlMDg3OTRkMzE0MjUwMDE0MDFlMjdhMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T09:10:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T09:10:07Z"}, "message": "Auto merge of #52681 - pnkfelix:z-borrowck-migrate, r=nikomatsakis\n\nAdd `-Z borrowck=migrate`\n\nThis adds `-Z borrowck=migrate`, which represents the way we want to migrate to NLL under Rust versions to come. It also hooks this new mode into `--edition 2018`, which means we're officially turning NLL on in the 2018 edition.\n\nThe basic idea of `-Z borrowck=migrate` that there are cases where NLL is fixing old soundness bugs in the borrow-checker, but in order to avoid just breaking code by immediately rejecting the programs that hit those soundness bugs, we instead use the following strategy:\n\nIf your code is accepted by NLL, then we accept it.\nIf your code is rejected by both NLL and the old AST-borrowck, then we reject it.\nIf your code is rejected by NLL but accepted by the old AST-borrowck, then we emit the new NLL errors as **warnings**.\n\nThese warnings will be turned into hard errors in the future, and they say so in these diagnostics.\n\nFix #46908", "tree": {"sha": "2e6c4791602dbf267f89a81ab42f506f3af84d7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6c4791602dbf267f89a81ab42f506f3af84d7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18b9edf006c10f4e08794d31425001401e27a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b9edf006c10f4e08794d31425001401e27a09", "html_url": "https://github.com/rust-lang/rust/commit/b18b9edf006c10f4e08794d31425001401e27a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18b9edf006c10f4e08794d31425001401e27a09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2aeb9d974e85e54efa18cd63195bfd95347a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2aeb9d974e85e54efa18cd63195bfd95347a44", "html_url": "https://github.com/rust-lang/rust/commit/7c2aeb9d974e85e54efa18cd63195bfd95347a44"}, {"sha": "9f05f29e564c03a432df78f7c4b6421e4fb1a338", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f05f29e564c03a432df78f7c4b6421e4fb1a338", "html_url": "https://github.com/rust-lang/rust/commit/9f05f29e564c03a432df78f7c4b6421e4fb1a338"}], "stats": {"total": 464, "additions": 382, "deletions": 82}, "files": [{"sha": "c8d513a59f00de4776015a98a67b7107aee3060a", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -15,9 +15,15 @@ use util::nodemap::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub enum SignalledError { SawSomeError, NoErrorsSeen }\n+\n+impl_stable_hash_for!(enum self::SignalledError { SawSomeError, NoErrorsSeen });\n+\n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BorrowCheckResult {\n     pub used_mut_nodes: FxHashSet<HirId>,\n+    pub signalled_any_error: SignalledError,\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for BorrowCheckResult {\n@@ -26,7 +32,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for BorrowCheckResult {\n                                           hasher: &mut StableHasher<W>) {\n         let BorrowCheckResult {\n             ref used_mut_nodes,\n+            ref signalled_any_error,\n         } = *self;\n         used_mut_nodes.hash_stable(hcx, hasher);\n+        signalled_any_error.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "4490b2f3fa91a599171364fddcfb2a64ea1629fd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -455,15 +455,28 @@ pub enum BorrowckMode {\n     Ast,\n     Mir,\n     Compare,\n+    Migrate,\n }\n \n impl BorrowckMode {\n+    /// Should we run the MIR-based borrow check, but also fall back\n+    /// on the AST borrow check if the MIR-based one errors.\n+    pub fn migrate(self) -> bool {\n+        match self {\n+            BorrowckMode::Ast => false,\n+            BorrowckMode::Compare => false,\n+            BorrowckMode::Mir => false,\n+            BorrowckMode::Migrate => true,\n+        }\n+    }\n+\n     /// Should we emit the AST-based borrow checker errors?\n     pub fn use_ast(self) -> bool {\n         match self {\n             BorrowckMode::Ast => true,\n             BorrowckMode::Compare => true,\n             BorrowckMode::Mir => false,\n+            BorrowckMode::Migrate => false,\n         }\n     }\n     /// Should we emit the MIR-based borrow checker errors?\n@@ -472,6 +485,7 @@ impl BorrowckMode {\n             BorrowckMode::Ast => false,\n             BorrowckMode::Compare => true,\n             BorrowckMode::Mir => true,\n+            BorrowckMode::Migrate => true,\n         }\n     }\n }\n@@ -1127,7 +1141,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     emit_end_regions: bool = (false, parse_bool, [UNTRACKED],\n         \"emit EndRegion as part of MIR; enable transforms that solely process EndRegion\"),\n     borrowck: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"select which borrowck is used (`ast`, `mir`, or `compare`)\"),\n+        \"select which borrowck is used (`ast`, `mir`, `migrate`, or `compare`)\"),\n     two_phase_borrows: bool = (false, parse_bool, [UNTRACKED],\n         \"use two-phase reserved/active distinction for `&mut` borrows in MIR borrowck\"),\n     two_phase_beyond_autoref: bool = (false, parse_bool, [UNTRACKED],\n@@ -2168,6 +2182,7 @@ pub fn build_session_options_and_crate_config(\n         None | Some(\"ast\") => BorrowckMode::Ast,\n         Some(\"mir\") => BorrowckMode::Mir,\n         Some(\"compare\") => BorrowckMode::Compare,\n+        Some(\"migrate\") => BorrowckMode::Migrate,\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     };\n "}, {"sha": "98568f860a4fdd62ee33a4728de581a85a31612e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -74,6 +74,7 @@ use rustc_target::spec::abi;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n use syntax::codemap::MultiSpan;\n+use syntax::edition::Edition;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n@@ -1366,6 +1367,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.borrowck_mode().use_mir()\n     }\n \n+    /// If true, we should use the MIR-based borrow check, but also\n+    /// fall back on the AST borrow check if the MIR-based one errors.\n+    pub fn migrate_borrowck(self) -> bool {\n+        self.borrowck_mode().migrate()\n+    }\n+\n     /// If true, make MIR codegen for `match` emit a temp that holds a\n     /// borrow of the input to the match expression.\n     pub fn generate_borrow_of_any_match_input(&self) -> bool {\n@@ -1397,18 +1404,51 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// What mode(s) of borrowck should we run? AST? MIR? both?\n     /// (Also considers the `#![feature(nll)]` setting.)\n     pub fn borrowck_mode(&self) -> BorrowckMode {\n-        match self.sess.opts.borrowck_mode {\n-            mode @ BorrowckMode::Mir |\n-            mode @ BorrowckMode::Compare => mode,\n+        // Here are the main constraints we need to deal with:\n+        //\n+        // 1. An opts.borrowck_mode of `BorrowckMode::Ast` is\n+        //    synonymous with no `-Z borrowck=...` flag at all.\n+        //    (This is arguably a historical accident.)\n+        //\n+        // 2. `BorrowckMode::Migrate` is the limited migration to\n+        //    NLL that we are deploying with the 2018 edition.\n+        //\n+        // 3. We want to allow developers on the Nightly channel\n+        //    to opt back into the \"hard error\" mode for NLL,\n+        //    (which they can do via specifying `#![feature(nll)]`\n+        //    explicitly in their crate).\n+        //\n+        // So, this precedence list is how pnkfelix chose to work with\n+        // the above constraints:\n+        //\n+        // * `#![feature(nll)]` *always* means use NLL with hard\n+        //   errors. (To simplify the code here, it now even overrides\n+        //   a user's attempt to specify `-Z borrowck=compare`, which\n+        //   we arguably do not need anymore and should remove.)\n+        //\n+        // * Otherwise, if no `-Z borrowck=...` flag was given (or\n+        //   if `borrowck=ast` was specified), then use the default\n+        //   as required by the edition.\n+        //\n+        // * Otherwise, use the behavior requested via `-Z borrowck=...`\n \n-            mode @ BorrowckMode::Ast => {\n-                if self.features().nll {\n-                    BorrowckMode::Mir\n-                } else {\n-                    mode\n-                }\n-            }\n+        if self.features().nll { return BorrowckMode::Mir; }\n \n+        match self.sess.opts.borrowck_mode {\n+            mode @ BorrowckMode::Mir |\n+            mode @ BorrowckMode::Compare |\n+            mode @ BorrowckMode::Migrate => mode,\n+\n+            BorrowckMode::Ast => match self.sess.edition() {\n+                Edition::Edition2015 => BorrowckMode::Ast,\n+                Edition::Edition2018 => BorrowckMode::Migrate,\n+\n+                // For now, future editions mean Migrate. (But it\n+                // would make a lot of sense for it to be changed to\n+                // `BorrowckMode::Mir`, depending on how we plan to\n+                // time the forcing of full migration to NLL.)\n+                _ => BorrowckMode::Migrate,\n+            },\n         }\n     }\n "}, {"sha": "49bd69f8262169ad18bb2a85daa9cb487bbdf9ca", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -447,10 +447,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                       .region_scope_tree\n                                       .yield_in_scope_for_expr(scope,\n                                                                cmt.hir_id,\n-                                                               self.bccx.body) {\n+                                                               self.bccx.body)\n+        {\n             self.bccx.cannot_borrow_across_generator_yield(borrow_span,\n                                                            yield_span,\n                                                            Origin::Ast).emit();\n+            self.bccx.signal_error();\n         }\n     }\n \n@@ -507,9 +509,13 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             new_loan, old_loan, old_loan, new_loan).err();\n \n         match (err_old_new, err_new_old) {\n-            (Some(mut err), None) | (None, Some(mut err)) => err.emit(),\n+            (Some(mut err), None) | (None, Some(mut err)) => {\n+                err.emit();\n+                self.bccx.signal_error();\n+            }\n             (Some(mut err_old), Some(mut err_new)) => {\n                 err_old.emit();\n+                self.bccx.signal_error();\n                 err_new.cancel();\n             }\n             (None, None) => return true,\n@@ -695,6 +701,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         loan_span, &self.bccx.loan_path_to_string(&loan_path),\n                         Origin::Ast)\n                     .emit();\n+                self.bccx.signal_error();\n             }\n         }\n     }\n@@ -745,6 +752,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 };\n \n                 err.emit();\n+                self.bccx.signal_error();\n             }\n         }\n     }\n@@ -914,5 +922,6 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         self.bccx.cannot_assign_to_borrowed(\n             span, loan.span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n             .emit();\n+        self.bccx.signal_error();\n     }\n }"}, {"sha": "e51caf89ee651b39e7ddc46feb10adc51809ca8f", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -99,6 +99,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n                            \"captured outer variable\");\n         }\n         err.emit();\n+        bccx.signal_error();\n     }\n }\n "}, {"sha": "0cb4a766e807997d79b5cabfcd981c98fa29d874", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -28,7 +28,7 @@ use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n-use rustc::middle::borrowck::BorrowCheckResult;\n+use rustc::middle::borrowck::{BorrowCheckResult, SignalledError};\n use rustc::hir::def_id::{DefId, LocalDefId};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n@@ -42,7 +42,7 @@ use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc_mir::util::suggest_ref_mut;\n use rustc::util::nodemap::FxHashSet;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::rc::Rc;\n use rustc_data_structures::sync::Lrc;\n@@ -90,7 +90,7 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     -> Lrc<BorrowCheckResult>\n {\n-    assert!(tcx.use_ast_borrowck());\n+    assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n \n@@ -105,6 +105,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n             // and do not need borrowchecking.\n             return Lrc::new(BorrowCheckResult {\n                 used_mut_nodes: FxHashSet(),\n+                signalled_any_error: SignalledError::NoErrorsSeen,\n             })\n         }\n         _ => { }\n@@ -121,6 +122,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n         owner_def_id,\n         body,\n         used_mut_nodes: RefCell::new(FxHashSet()),\n+        signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n     // Eventually, borrowck will always read the MIR, but at the\n@@ -154,6 +156,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n \n     Lrc::new(BorrowCheckResult {\n         used_mut_nodes: bccx.used_mut_nodes.into_inner(),\n+        signalled_any_error: bccx.signalled_any_error.into_inner(),\n     })\n }\n \n@@ -234,6 +237,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         owner_def_id,\n         body,\n         used_mut_nodes: RefCell::new(FxHashSet()),\n+        signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx, true, body_id, |_| cfg);\n@@ -257,6 +261,15 @@ pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     body: &'tcx hir::Body,\n \n     used_mut_nodes: RefCell<FxHashSet<HirId>>,\n+\n+    signalled_any_error: Cell<SignalledError>,\n+}\n+\n+\n+impl<'a, 'tcx: 'a> BorrowckCtxt<'a, 'tcx> {\n+    fn signal_error(&self) {\n+        self.signalled_any_error.set(SignalledError::SawSomeError);\n+    }\n }\n \n impl<'a, 'b, 'tcx: 'b> BorrowckErrors<'a> for &'a BorrowckCtxt<'b, 'tcx> {\n@@ -645,6 +658,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     .span_label(use_span, format!(\"use of possibly uninitialized `{}`\",\n                                                   self.loan_path_to_string(lp)))\n                     .emit();\n+                self.signal_error();\n                 return;\n             }\n             _ => {\n@@ -760,6 +774,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         // not considered particularly helpful.\n \n         err.emit();\n+        self.signal_error();\n     }\n \n     pub fn report_partial_reinitialization_of_uninitialized_structure(\n@@ -770,6 +785,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                       &self.loan_path_to_string(lp),\n                                                       Origin::Ast)\n             .emit();\n+        self.signal_error();\n     }\n \n     pub fn report_reassigned_immutable_variable(&self,\n@@ -787,6 +803,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                 self.loan_path_to_string(lp)));\n         }\n         err.emit();\n+        self.signal_error();\n     }\n \n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n@@ -908,6 +925,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     self.tcx.hir.hir_to_node_id(err.cmt.hir_id)\n                 );\n                 db.emit();\n+                self.signal_error();\n             }\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let msg = match opt_loan_path(&err.cmt) {\n@@ -1022,6 +1040,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 }\n \n                 db.emit();\n+                self.signal_error();\n             }\n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {\n                 let descr = self.cmt_to_path_or_string(err.cmt);\n@@ -1047,6 +1066,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     \"\");\n \n                 db.emit();\n+                self.signal_error();\n             }\n         }\n     }\n@@ -1125,6 +1145,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err.help(\"closures behind references must be called via `&mut`\");\n         }\n         err.emit();\n+        self.signal_error();\n     }\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n@@ -1307,6 +1328,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                        cmt_path_or_string),\n                              suggestion)\n             .emit();\n+        self.signal_error();\n     }\n \n     fn region_end_span(&self, region: ty::Region<'tcx>) -> Option<Span> {"}, {"sha": "825e31539c8bedfe511056858a3182fc10836e3c", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -99,6 +99,25 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn is_error(&self) -> bool {\n+        match self.level {\n+            Level::Bug |\n+            Level::Fatal |\n+            Level::PhaseFatal |\n+            Level::Error |\n+            Level::FailureNote => {\n+                true\n+            }\n+\n+            Level::Warning |\n+            Level::Note |\n+            Level::Help |\n+            Level::Cancelled => {\n+                false\n+            }\n+        }\n+    }\n+\n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n     /// canceled or it will panic when dropped).\n     pub fn cancel(&mut self) {"}, {"sha": "a0f3abda077f94720015a1053c7b57a582788a1f", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -100,25 +100,6 @@ impl<'a> DiagnosticBuilder<'a> {\n         buffered_diagnostics.push(diagnostic);\n     }\n \n-    pub fn is_error(&self) -> bool {\n-        match self.level {\n-            Level::Bug |\n-            Level::Fatal |\n-            Level::PhaseFatal |\n-            Level::Error |\n-            Level::FailureNote => {\n-                true\n-            }\n-\n-            Level::Warning |\n-            Level::Note |\n-            Level::Help |\n-            Level::Cancelled => {\n-                false\n-            }\n-        }\n-    }\n-\n     /// Convenience function for internal use, clients should use one of the\n     /// span_* methods instead.\n     pub fn sub<S: Into<MultiSpan>>("}, {"sha": "4ba96f643b0ccaf1b9f66b2203ff2384f0122ba9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -16,14 +16,15 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::lint::builtin::UNUSED_MUT;\n+use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{ClearCrossCrate, Local, Location, Mir, Mutability, Operand, Place};\n use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n \n-use rustc_errors::{Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -329,8 +330,34 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         }\n     }\n \n-    for diag in mbcx.errors_buffer.drain(..) {\n-        DiagnosticBuilder::new_diagnostic(mbcx.tcx.sess.diagnostic(), diag).emit();\n+    if mbcx.errors_buffer.len() > 0 {\n+        if tcx.migrate_borrowck() {\n+            match tcx.borrowck(def_id).signalled_any_error {\n+                SignalledError::NoErrorsSeen => {\n+                    // if AST-borrowck signalled no errors, then\n+                    // downgrade all the buffered MIR-borrowck errors\n+                    // to warnings.\n+                    for err in &mut mbcx.errors_buffer {\n+                        if err.is_error() {\n+                            err.level = Level::Warning;\n+                            err.warn(\"This error has been downgraded to a warning \\\n+                                      for backwards compatibility with previous releases.\\n\\\n+                                      It represents potential unsoundness in your code.\\n\\\n+                                      This warning will become a hard error in the future.\");\n+                        }\n+                    }\n+                }\n+                SignalledError::SawSomeError => {\n+                    // if AST-borrowck signalled a (cancelled) error,\n+                    // then we will just emit the buffered\n+                    // MIR-borrowck errors as normal.\n+                }\n+            }\n+        }\n+\n+        for diag in mbcx.errors_buffer.drain(..) {\n+            DiagnosticBuilder::new_diagnostic(mbcx.tcx.sess.diagnostic(), diag).emit();\n+        }\n     }\n \n     let result = BorrowCheckResult {\n@@ -1747,20 +1774,44 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Reservation(WriteKind::Move)\n-            | Write(WriteKind::Move)\n-            | Reservation(WriteKind::StorageDeadOrDrop)\n-            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Write(WriteKind::StorageDeadOrDrop)\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n+            Reservation(wk @ WriteKind::Move)\n+            | Write(wk @ WriteKind::Move)\n+            | Reservation(wk @ WriteKind::StorageDeadOrDrop)\n+            | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Write(wk @ WriteKind::StorageDeadOrDrop)\n+            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n                 if let Err(_place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n-                    self.tcx.sess.delay_span_bug(\n-                        span,\n-                        &format!(\n-                            \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n-                            place, kind\n-                        ),\n-                    );\n+                    if self.tcx.migrate_borrowck() {\n+                        // rust-lang/rust#46908: In pure NLL mode this\n+                        // code path should be unreachable (and thus\n+                        // we signal an ICE in the else branch\n+                        // here). But we can legitimately get here\n+                        // under borrowck=migrate mode, so instead of\n+                        // ICE'ing we instead report a legitimate\n+                        // error (which will then be downgraded to a\n+                        // warning by the migrate machinery).\n+                        error_access = match wk {\n+                            WriteKind::MutableBorrow(_) => AccessKind::MutableBorrow,\n+                            WriteKind::Move => AccessKind::Move,\n+                            WriteKind::StorageDeadOrDrop |\n+                            WriteKind::Mutate => AccessKind::Mutate,\n+                        };\n+                        self.report_mutability_error(\n+                            place,\n+                            span,\n+                            _place_err,\n+                            error_access,\n+                            location,\n+                        );\n+                    } else {\n+                        self.tcx.sess.delay_span_bug(\n+                            span,\n+                            &format!(\n+                                \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n+                                place, kind\n+                            ),\n+                        );\n+                    }\n                 }\n                 return false;\n             }"}, {"sha": "571a1188d49ca836add5afa477611b6d353fc9d1", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -24,6 +24,7 @@ use util::suggest_ref_mut;\n pub(super) enum AccessKind {\n     MutableBorrow,\n     Mutate,\n+    Move,\n }\n \n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n@@ -110,6 +111,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(desc) = access_place_desc {\n                         item_msg = format!(\"`{}`\", desc);\n                         reason = match error_access {\n+                            AccessKind::Move |\n                             AccessKind::Mutate => format!(\" which is behind a {}\", pointer_type),\n                             AccessKind::MutableBorrow => {\n                                 format!(\", as it is behind a {}\", pointer_type)\n@@ -160,6 +162,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n \n         let span = match error_access {\n+            AccessKind::Move => {\n+                err = self.tcx\n+                    .cannot_move_out_of(span, &(item_msg + &reason), Origin::Mir);\n+                act = \"move\";\n+                acted_on = \"moved\";\n+                span\n+            }\n             AccessKind::Mutate => {\n                 err = self.tcx\n                     .cannot_assign(span, &(item_msg + &reason), Origin::Mir);"}, {"sha": "937d01a0c5e883e6fa890abdc68f051802ed13cb", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -41,7 +41,20 @@ impl MirPass for ElaborateDrops {\n \n         let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n         let param_env = tcx.param_env(src.def_id).with_reveal_all();\n-        let move_data = MoveData::gather_moves(mir, tcx).unwrap();\n+        let move_data = match MoveData::gather_moves(mir, tcx) {\n+            Ok(move_data) => move_data,\n+            Err((move_data, _move_errors)) => {\n+                // The only way we should be allowing any move_errors\n+                // in here is if we are in the migration path for the\n+                // NLL-based MIR-borrowck.\n+                //\n+                // If we are in the migration path, we have already\n+                // reported these errors as warnings to the user. So\n+                // we will just ignore them here.\n+                assert!(tcx.migrate_borrowck());\n+                move_data\n+            }\n+        };\n         let elaborate_patch = {\n             let mir = &*mir;\n             let env = MoveDataParamEnv {"}, {"sha": "fa82efa353384acd66a686043f9a7ff731fe0561", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.edition.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:32:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "72043938f53511f0e441e6c2b8bd6e1045d376a3", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a test that the `#![feature(nll)]` opt-in overrides the\n+// migration mode. The intention here is to emulate the goal behavior\n+// that `--edition 2018` effects on borrowck (modeled here by `-Z\n+// borrowck=migrate`) are themselves overridden by the\n+// `#![feature(nll)]` opt-in.\n+//\n+// Therefore, for developer convenience, under `#[feature(nll)]` the\n+// NLL checks will be emitted as errors *even* in the presence of `-Z\n+// borrowck=migrate`.\n+\n+// revisions: zflag edition\n+// [zflag]compile-flags: -Z borrowck=migrate\n+// [edition]compile-flags: --edition 2018\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if {\n+                (|| { let bar = foo; bar.take() })();\n+                //[zflag]~^ ERROR cannot move out of borrowed content [E0507]\n+                //[edition]~^^ ERROR cannot move out of borrowed content [E0507]\n+                false\n+            } => {},\n+        Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n+        _ => println!(\"Here is some supposedly unreachable code.\"),\n+    }\n+}"}, {"sha": "fa82efa353384acd66a686043f9a7ff731fe0561", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.zflag.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:32:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "f5a9db364065fab0b5da3b2f8589ec7f3e92f155", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,24 @@\n+warning[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-migrate-to-nll.rs:35:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+warning[E0507]: cannot move out of `foo`, as it is immutable for the pattern guard\n+  --> $DIR/borrowck-migrate-to-nll.rs:35:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 cannot move out of `foo`, as it is immutable for the pattern guard\n+   |                 cannot move\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+"}, {"sha": "e7f2bfbfedba79bd74840fe89c9c01ea140e4a09", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a test of the borrowck migrate mode. It leverages #27282, a\n+// bug that is fixed by NLL: this code is (unsoundly) accepted by\n+// AST-borrowck, but is correctly rejected by the NLL borrowck.\n+//\n+// Therefore, for backwards-compatiblity, under borrowck=migrate the\n+// NLL checks will be emitted as *warnings*.\n+\n+// NLL mode makes this compile-fail; we cannot currently encode a\n+// test that is run-pass or compile-fail based on compare-mode. So\n+// just ignore it instead:\n+\n+// ignore-compare-mode-nll\n+\n+// revisions: zflag edition\n+//[zflag]compile-flags: -Z borrowck=migrate\n+//[edition]compile-flags: --edition 2018\n+//[zflag] run-pass\n+//[edition] run-pass\n+\n+fn main() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if {\n+                (|| { let bar = foo; bar.take() })();\n+                false\n+            } => {},\n+        Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n+        _ => println!(\"Here is some supposedly unreachable code.\"),\n+    }\n+}"}, {"sha": "f5a9db364065fab0b5da3b2f8589ec7f3e92f155", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -0,0 +1,24 @@\n+warning[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-migrate-to-nll.rs:35:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+warning[E0507]: cannot move out of `foo`, as it is immutable for the pattern guard\n+  --> $DIR/borrowck-migrate-to-nll.rs:35:17\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 cannot move out of `foo`, as it is immutable for the pattern guard\n+   |                 cannot move\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+"}, {"sha": "fdfe9e2c562e0395d6d8e9726e97351c91a73182", "filename": "src/test/ui/generator/generator-with-nll.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -8,17 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z borrowck=compare\n-\n #![feature(generators)]\n #![feature(nll)]\n \n fn main() {\n     || {\n         // The reference in `_a` is a Legal with NLL since it ends before the yield\n-        let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-        let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-        //~^ borrow may still be in use when generator yields (Mir)\n+        let _a = &mut true;\n+        let b = &mut true;\n+        //~^ borrow may still be in use when generator yields\n         yield ();\n         println!(\"{}\", b);\n     };"}, {"sha": "1dc663d8bcbf7f1ea4ba4687a0bd99c2c7ef1671", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -1,30 +1,12 @@\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/generator-with-nll.rs:19:23\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/generator-with-nll.rs:18:17\n    |\n-LL |         let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                       ^^^^\n-...\n-LL |         yield ();\n-   |         -------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/generator-with-nll.rs:20:22\n-   |\n-LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                      ^^^^\n-LL |         //~^ borrow may still be in use when generator yields (Mir)\n-LL |         yield ();\n-   |         -------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/generator-with-nll.rs:20:17\n-   |\n-LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+LL |         let b = &mut true;\n    |                 ^^^^^^^^^\n-LL |         //~^ borrow may still be in use when generator yields (Mir)\n+LL |         //~^ borrow may still be in use when generator yields\n LL |         yield ();\n    |         -------- possible yield occurs here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0626`."}, {"sha": "e9b853722c2d3b86213c04a4d0604a229ac7ccc4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b9edf006c10f4e08794d31425001401e27a09/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b18b9edf006c10f4e08794d31425001401e27a09", "patch": "@@ -14,7 +14,7 @@ use std::io::prelude::*;\n use std::io::BufReader;\n use std::path::{Path, PathBuf};\n \n-use common::{self, Config, Mode};\n+use common::{self, CompareMode, Config, Mode};\n use util;\n \n use extract_gdb_version;\n@@ -608,7 +608,12 @@ impl Config {\n                     common::DebugInfoLldb => name == \"lldb\",\n                     common::Pretty => name == \"pretty\",\n                     _ => false,\n-                } || (self.target != self.host && name == \"cross-compile\")\n+                } || (self.target != self.host && name == \"cross-compile\") ||\n+                match self.compare_mode {\n+                    Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n+                    Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n+                    None => false,\n+                }\n         } else {\n             false\n         }"}]}