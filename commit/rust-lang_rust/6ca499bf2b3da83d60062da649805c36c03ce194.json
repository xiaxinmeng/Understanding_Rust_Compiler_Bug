{"sha": "6ca499bf2b3da83d60062da649805c36c03ce194", "node_id": "C_kwDOAAsO6NoAKDZjYTQ5OWJmMmIzZGE4M2Q2MDA2MmRhNjQ5ODA1YzM2YzAzY2UxOTQ", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-02-21T13:41:11Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-02-21T13:41:11Z"}, "message": "Revert \"Copy `bin/*` and `lib/*.dylib` files to `stage0-sysroot`\"\n\nThis reverts commit 6990ab9ad2cde9b67073ffac29ffecc2be8e722f.", "tree": {"sha": "d037821be5a138e396660f49a5deed1350490db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d037821be5a138e396660f49a5deed1350490db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca499bf2b3da83d60062da649805c36c03ce194", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmP0yfwACgkQkJzQ0mSD\nUWtEywwAkjE2bbXas1izI//Kp3zCcn0oQJfh1+mJAOYIeznsRwnwA37h2o5PMa/N\nJgbxZjaHJdBvfa9yrUzQ1HIURghpFQgTJblD3dGfofiNaZieProzCATbm84/wEsB\n10doZ0I2vqqRV1K/t6GsVw0hid0Oy2LmN1qxI4nGdVB6VZkYIXHoaZTQX5Op4lxz\nTXEJyq1sHtESfllsq9iWfSHfzi8U2NE8LQd/+KXk7jpVLeYzino3BZ39e0RtmObu\nksTREp0c1JO7Ca62kYcpuq64LnODiU9KxtzE3UXim1lFdUn5TUOaKYrWbxP4DbtT\nYlSx+GMhrq19LOrjAmARLpOKrYRIw4GtKakOMxxjFLU8FBZ25IxCeoMHVQqOCoPb\nAWJcxfMjuZLEtPtXOq2uJkiBD83QuUNcu8awO5fFVD+uJTXwx3bP/0wh1kTNrqDi\nMdy8YLz3KAupeduZFFJzDkwk6y1gNiN8MXDA67r06gKK6RAFwZIEg5zPttAhwBLi\nJVWELm/8\n=37KP\n-----END PGP SIGNATURE-----", "payload": "tree d037821be5a138e396660f49a5deed1350490db2\nparent a5d27316fe49feb36c332f16dd82da959de664fb\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1676986871 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1676986871 +0100\n\nRevert \"Copy `bin/*` and `lib/*.dylib` files to `stage0-sysroot`\"\n\nThis reverts commit 6990ab9ad2cde9b67073ffac29ffecc2be8e722f.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca499bf2b3da83d60062da649805c36c03ce194", "html_url": "https://github.com/rust-lang/rust/commit/6ca499bf2b3da83d60062da649805c36c03ce194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca499bf2b3da83d60062da649805c36c03ce194/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d27316fe49feb36c332f16dd82da959de664fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d27316fe49feb36c332f16dd82da959de664fb", "html_url": "https://github.com/rust-lang/rust/commit/a5d27316fe49feb36c332f16dd82da959de664fb"}], "stats": {"total": 66, "additions": 0, "deletions": 66}, "files": [{"sha": "348d22a9ce60e73a130f44b4df98085f11f29736", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6ca499bf2b3da83d60062da649805c36c03ce194/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca499bf2b3da83d60062da649805c36c03ce194/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6ca499bf2b3da83d60062da649805c36c03ce194", "patch": "@@ -459,72 +459,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if compiler.stage == 0 {\n-            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n-            // work for stage0-sysroot\n-            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n-\n-            let host_lib_dir = builder.initial_rustc.ancestors().nth(2).unwrap().join(\"lib\");\n-            let host_bin_dir = builder.out.join(&builder.initial_rustc.parent().unwrap());\n-            let host_codegen_backends =\n-                host_lib_dir.join(\"rustlib\").join(&compiler.host.triple).join(\"codegen-backends\");\n-            let sysroot_bin_dir = sysroot.join(\"bin\");\n-            let sysroot_lib_dir = sysroot.join(\"lib\");\n-            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n-\n-            // Create the `bin` directory in stage0-sysroot\n-            t!(fs::create_dir_all(&sysroot_bin_dir));\n-\n-            // copy bin files from `builder.initial_rustc/./` to `stage0-sysroot/bin`\n-            if let Ok(files) = fs::read_dir(&host_bin_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    if file.file_name() == \"rustfmt\" {\n-                        // This is when `rustc` and `cargo` are set in `config.toml`\n-                        if !file.path().starts_with(&builder.out) {\n-                            builder.copy(\n-                                &file.path().into_boxed_path(),\n-                                &sysroot_bin_dir.join(file.file_name()),\n-                            );\n-                        } else {\n-                            builder.copy(\n-                                &builder\n-                                    .out\n-                                    .join(&compiler.host.triple)\n-                                    .join(\"rustfmt/bin/rustfmt\"),\n-                                &sysroot_bin_dir.join(file.file_name()),\n-                            );\n-                        }\n-                    } else {\n-                        builder.copy(\n-                            &file.path().into_boxed_path(),\n-                            &sysroot_bin_dir.join(file.file_name()),\n-                        );\n-                    }\n-                }\n-            }\n-\n-            // copy dylib files from `builder.initial_rustc/../lib/*` while excluding the `rustlib` directory to `stage0-sysroot/lib`\n-            if let Ok(files) = fs::read_dir(&host_lib_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    let path = file.path();\n-                    if path.is_file()\n-                        && is_dylib(&file.file_name().into_string().unwrap())\n-                        && !path.starts_with(sysroot_lib_dir.join(\"rustlib\").into_boxed_path())\n-                    {\n-                        builder.copy(&path, &sysroot_lib_dir.join(path.file_name().unwrap()));\n-                    }\n-                }\n-            }\n-\n-            t!(fs::create_dir_all(&sysroot_codegen_backends));\n-            // copy `codegen-backends` from `host_lib_dir/rustlib/codegen_backends` to `stage0-sysroot/lib/rustlib/host-triple/codegen-backends` if it exists.\n-            if host_codegen_backends.exists() {\n-                builder.cp_r(&host_codegen_backends, &sysroot_codegen_backends);\n-            }\n-        }\n     }\n }\n "}]}