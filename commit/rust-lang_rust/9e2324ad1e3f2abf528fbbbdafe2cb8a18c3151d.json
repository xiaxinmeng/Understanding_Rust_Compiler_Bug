{"sha": "9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMjMyNGFkMWUzZjJhYmY1MjhmYmJiZGFmZTJjYjhhMThjMzE1MWQ=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-25T22:54:38Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-25T22:54:38Z"}, "message": "Small first step in expr_path. Call find_final_def just to detect\nunresolved names. find_final_def is going to be extended to return the\nfinal expr.", "tree": {"sha": "615761fcdd6398a35d24c07418ded85751a87e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615761fcdd6398a35d24c07418ded85751a87e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "html_url": "https://github.com/rust-lang/rust/commit/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/comments", "author": null, "committer": null, "parents": [{"sha": "18947f83cce186933f031950b9acdf9d1102e254", "url": "https://api.github.com/repos/rust-lang/rust/commits/18947f83cce186933f031950b9acdf9d1102e254", "html_url": "https://github.com/rust-lang/rust/commit/18947f83cce186933f031950b9acdf9d1102e254"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "5da271704e48c773db44cbaccb4db2e77b2b9646", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "patch": "@@ -402,6 +402,7 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/while-and-do-while.rs \\\n                     test/run-fail/task-comm-14.rs \\\n+                    test/compile-fail/bad-expr-path.rs \\\n                     test/compile-fail/import.rs \\\n                     test/compile-fail/import2.rs \\\n                     test/compile-fail/import3.rs \\\n@@ -502,6 +503,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                       $(addprefix test/compile-fail/, \\\n                         arg-count-mismatch.rs \\\n                         arg-type-mismatch.rs \\\n+                        bad-expr-path.rs \\\n                         import.rs \\\n                         import2.rs \\\n                         import3.rs \\"}, {"sha": "1f609dd51f991db454c861771ce8e607a94863c1", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "patch": "@@ -35,6 +35,7 @@ tag def_wrap {\n     def_wrap_import(@ast.view_item);\n     def_wrap_mod(@ast.item);\n     def_wrap_other(def);\n+    def_wrap_expr_field(ident);\n     def_wrap_resolving;\n }\n \n@@ -88,9 +89,11 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n // Follow the path of an import and return what it ultimately points to.\n \n+// If used after imports are resolved, import_id is none.\n+\n fn find_final_def(&env e, import_map index,\n                   &span sp, vec[ident] idents,\n-                  ast.def_id import_id) -> def_wrap {\n+                  option.t[ast.def_id] import_id) -> def_wrap {\n \n     // We are given a series of identifiers (a.b.c.d) and we know that\n     // in the environment 'e' the identifier 'a' was resolved to 'd'. We\n@@ -101,7 +104,8 @@ fn find_final_def(&env e, import_map index,\n             case (def_wrap_import(?imp)) {\n                 alt (imp.node) {\n                     case (ast.view_item_import(?new_idents, ?d, _)) {\n-                        auto x = inner(e, index, sp, new_idents, d);\n+                        auto x = find_final_def(e, index, sp, new_idents,\n+                                               some(d));\n                         ret found_something(e, index, sp, idents, x);\n                     }\n                 }\n@@ -138,15 +142,14 @@ fn find_final_def(&env e, import_map index,\n             }\n             case (_) {\n                 auto first = idents.(0);\n-                e.sess.span_err(sp, first + \" is not a module or crate\");\n+                ret def_wrap_expr_field(first);\n             }\n         }\n         fail;\n     }\n \n-    fn inner(&env e, import_map index, &span sp, vec[ident] idents,\n-             ast.def_id import_id) -> def_wrap {\n-        alt (index.find(import_id)) {\n+    if (import_id != none[ast.def_id]) {\n+        alt (index.find(option.get[ast.def_id](import_id))) {\n             case (some[def_wrap](?x)) {\n                 alt (x) {\n                     case (def_wrap_resolving) {\n@@ -161,22 +164,23 @@ fn find_final_def(&env e, import_map index,\n             case (none[def_wrap]) {\n             }\n         }\n-        auto first = idents.(0);\n-        index.insert(import_id, def_wrap_resolving);\n-        auto d_ = lookup_name_wrapped(e, first);\n-        alt (d_) {\n-            case (none[tup(@env, def_wrap)]) {\n-                e.sess.span_err(sp, \"unresolved name: \" + first);\n-                fail;\n-            }\n-            case (some[tup(@env, def_wrap)](?d)) {\n-                auto x = found_something(*d._0, index, sp, idents, d._1);\n-                index.insert(import_id, x);\n-                ret x;\n+        index.insert(option.get[ast.def_id](import_id), def_wrap_resolving);\n+    }\n+    auto first = idents.(0);\n+    auto d_ = lookup_name_wrapped(e, first);\n+    alt (d_) {\n+        case (none[tup(@env, def_wrap)]) {\n+            e.sess.span_err(sp, \"unresolved name: \" + first);\n+            fail;\n+        }\n+        case (some[tup(@env, def_wrap)](?d)) {\n+            auto x = found_something(*d._0, index, sp, idents, d._1);\n+            if (import_id != none[ast.def_id]) {\n+                index.insert(option.get[ast.def_id](import_id), x);\n             }\n+            ret x;\n         }\n     }\n-    ret inner(e, index, sp, idents, import_id);\n }\n \n fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n@@ -434,10 +438,13 @@ fn fold_expr_path(&env e, &span sp, &ast.path p, &option.t[def] d,\n         }\n     }\n \n-    // FIXME: once espindola's modifications to lookup land, actually step\n-    // through the path doing speculative lookup, and extend the maximal\n-    // static prefix. For now we are always using the minimal prefix: first\n-    // ident is static anchor, rest turn into fields.\n+    // FIXME: All this call to find_final_def does right now is find\n+    // unresolved names. It should be extended to return a wrapper\n+    // over ast.expr. It is in a perfect position to construct\n+    // the expr_field(expr_field(...(expr_path(...)))) we should return.\n+\n+    auto index = new_def_hash[def_wrap]();\n+    find_final_def(e, index, sp, p.node.idents, none[ast.def_id]);\n \n     auto p_ = rec(node=rec(idents = vec(id0) with p.node) with p);\n     auto ex = @fold.respan[ast.expr_](sp, ast.expr_path(p_, d_, a));\n@@ -457,7 +464,14 @@ fn fold_view_item_import(&env e, &span sp,\n     // Produce errors for invalid imports\n     auto len = _vec.len[ast.ident](is);\n     auto last_id = is.(len - 1u);\n-    auto d = find_final_def(e, index, sp, is, id);\n+    auto d = find_final_def(e, index, sp, is, some(id));\n+    alt (d) {\n+        case (def_wrap_expr_field(?ident)) {\n+            e.sess.span_err(sp, ident + \" is not a module or crate\");\n+        }\n+        case (_) {\n+        }\n+    }\n     let option.t[def] target_def = some(unwrap_def(d));\n     ret @fold.respan[ast.view_item_](sp, ast.view_item_import(is, id,\n                                                               target_def));"}, {"sha": "97c95c015457c0731efa8e06e2e6be15e6bc6a85", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=9e2324ad1e3f2abf528fbbbdafe2cb8a18c3151d", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: unresolved name: a\n+\n+mod m1 {\n+}\n+\n+fn main(vec[str] args) {\n+  log m1.a;\n+}"}]}