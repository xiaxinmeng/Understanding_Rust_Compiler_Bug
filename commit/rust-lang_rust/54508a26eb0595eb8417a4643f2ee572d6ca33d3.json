{"sha": "54508a26eb0595eb8417a4643f2ee572d6ca33d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NTA4YTI2ZWIwNTk1ZWI4NDE3YTQ2NDNmMmVlNTcyZDZjYTMzZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T06:37:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T06:37:59Z"}, "message": "Auto merge of #78924 - bjorn3:less_sysroot_build_scripts, r=Mark-Simulacrum\n\nMake the libstd build script smaller\n\nOf all sysroot crates currently only compiler_builtins, miniz_oxide and std require a build script. compiler_builtins uses to conditionally enable certain features and possibly compile a C version ([source](https://github.com/rust-lang/compiler-builtins/blob/63ccaf11f08fb5d0b39cc33884c5a1a63f547ace/build.rs)), miniz_oxide only uses it to detect if liballoc is supported as the MSRV is 1.34.0 instead of the 1.36.0 which stabilized liballoc ([source](https://github.com/Frommi/miniz_oxide/blob/28514ec09f0b1ce74bfb2d561de52a6652ce377a/miniz_oxide/build.rs)). std now only uses it to enable `freebsd12` when the `RUST_STD_FREEBSD_12_ABI` env var is set, to determine if `restricted-std` should be set, to set the `STD_ENV_ARCH` env var identical to `CARGO_CFG_TARGET_ARCH`, and to unconditionally enable `backtrace_in_libstd`.\n\nIf all build scripts were to be removed, it would be possible for rustc to completely compile it's own sysroot. It currently requires a rustc version that already has an available libstd to compile the build scripts. If rustc can completely compile it's own sysroot, rustbuild could be simplified to not forcefully use the bootstrap compiler for build scripts.\n\n`@rustbot` modify labels: +T-compiler +libs-impl", "tree": {"sha": "2590f47e2372a4dbcccee8ae109de8464eb776a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2590f47e2372a4dbcccee8ae109de8464eb776a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54508a26eb0595eb8417a4643f2ee572d6ca33d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54508a26eb0595eb8417a4643f2ee572d6ca33d3", "html_url": "https://github.com/rust-lang/rust/commit/54508a26eb0595eb8417a4643f2ee572d6ca33d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54508a26eb0595eb8417a4643f2ee572d6ca33d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c37e86ff1782923e3abfbf5491dd383fcf827d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c37e86ff1782923e3abfbf5491dd383fcf827d", "html_url": "https://github.com/rust-lang/rust/commit/b5c37e86ff1782923e3abfbf5491dd383fcf827d"}, {"sha": "6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "html_url": "https://github.com/rust-lang/rust/commit/6f3872a14c73a74c55e0854641f4dfe5e3b7000e"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "f730569f74b0ee8273a02f0053108a7fd2162f5d", "filename": "library/std/build.rs", "status": "modified", "additions": 14, "deletions": 57, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=54508a26eb0595eb8417a4643f2ee572d6ca33d3", "patch": "@@ -3,66 +3,23 @@ use std::env;\n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    if target.contains(\"linux\") {\n-        if target.contains(\"android\") {\n-            println!(\"cargo:rustc-link-lib=dl\");\n-            println!(\"cargo:rustc-link-lib=log\");\n-            println!(\"cargo:rustc-link-lib=gcc\");\n-        }\n-    } else if target.contains(\"freebsd\") {\n-        println!(\"cargo:rustc-link-lib=execinfo\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n+    if target.contains(\"freebsd\") {\n         if env::var(\"RUST_STD_FREEBSD_12_ABI\").is_ok() {\n             println!(\"cargo:rustc-cfg=freebsd12\");\n         }\n-    } else if target.contains(\"netbsd\") {\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=rt\");\n-    } else if target.contains(\"dragonfly\") || target.contains(\"openbsd\") {\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-    } else if target.contains(\"solaris\") {\n-        println!(\"cargo:rustc-link-lib=socket\");\n-        println!(\"cargo:rustc-link-lib=posix4\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"illumos\") {\n-        println!(\"cargo:rustc-link-lib=socket\");\n-        println!(\"cargo:rustc-link-lib=posix4\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-        println!(\"cargo:rustc-link-lib=nsl\");\n-        // Use libumem for the (malloc-compatible) allocator\n-        println!(\"cargo:rustc-link-lib=umem\");\n-    } else if target.contains(\"apple-darwin\") {\n-        println!(\"cargo:rustc-link-lib=System\");\n-\n-        // res_init and friends require -lresolv on macOS/iOS.\n-        // See #41582 and http://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"apple-ios\") {\n-        println!(\"cargo:rustc-link-lib=System\");\n-        println!(\"cargo:rustc-link-lib=objc\");\n-        println!(\"cargo:rustc-link-lib=framework=Security\");\n-        println!(\"cargo:rustc-link-lib=framework=Foundation\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"uwp\") {\n-        println!(\"cargo:rustc-link-lib=ws2_32\");\n-        // For BCryptGenRandom\n-        println!(\"cargo:rustc-link-lib=bcrypt\");\n-    } else if target.contains(\"windows\") {\n-        println!(\"cargo:rustc-link-lib=advapi32\");\n-        println!(\"cargo:rustc-link-lib=ws2_32\");\n-        println!(\"cargo:rustc-link-lib=userenv\");\n-    } else if target.contains(\"fuchsia\") {\n-        println!(\"cargo:rustc-link-lib=zircon\");\n-        println!(\"cargo:rustc-link-lib=fdio\");\n-    } else if target.contains(\"cloudabi\") {\n-        if cfg!(feature = \"backtrace\") {\n-            println!(\"cargo:rustc-link-lib=unwind\");\n-        }\n-        println!(\"cargo:rustc-link-lib=c\");\n-        println!(\"cargo:rustc-link-lib=compiler_rt\");\n-    } else if (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n+    } else if target.contains(\"linux\")\n+        || target.contains(\"netbsd\")\n+        || target.contains(\"dragonfly\")\n+        || target.contains(\"openbsd\")\n+        || target.contains(\"solaris\")\n+        || target.contains(\"illumos\")\n+        || target.contains(\"apple-darwin\")\n+        || target.contains(\"apple-ios\")\n+        || target.contains(\"uwp\")\n+        || target.contains(\"windows\")\n+        || target.contains(\"fuchsia\")\n+        || target.contains(\"cloudabi\")\n+        || (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n         || target.contains(\"hermit\")\n         || target.contains(\"l4re\")\n         || target.contains(\"redox\")"}, {"sha": "db523f05e01a5559bbc1f6255246d834e083a8da", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=54508a26eb0595eb8417a4643f2ee572d6ca33d3", "patch": "@@ -566,5 +566,5 @@ include!(\"keyword_docs.rs\");\n // This is required to avoid an unstable error when `restricted-std` is not\n // enabled. The use of #![feature(restricted_std)] in rustc-std-workspace-std\n // is unconditional, so the unstable feature needs to be defined somewhere.\n-#[cfg_attr(not(feature = \"restricted-std\"), unstable(feature = \"restricted_std\", issue = \"none\"))]\n+#[unstable(feature = \"restricted_std\", issue = \"none\")]\n mod __restricted_std_workaround {}"}, {"sha": "b4a9246ca4e0def0b56fce39aaccc189cfecc60a", "filename": "library/std/src/sys/cloudabi/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs?ref=54508a26eb0595eb8417a4643f2ee572d6ca33d3", "patch": "@@ -66,3 +66,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n         v.assume_init()\n     }\n }\n+\n+#[cfg_attr(feature = \"backtrace\", link(name = \"unwind\"))]\n+#[link(name = \"c\")]\n+#[link(name = \"compiler_rt\")]\n+extern \"C\" {}"}, {"sha": "f8a5ee899691166f3eb4f704dd9e6f88bbaf2a93", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=54508a26eb0595eb8417a4643f2ee572d6ca33d3", "patch": "@@ -236,3 +236,55 @@ pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n pub fn abort_internal() -> ! {\n     unsafe { libc::abort() }\n }\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"android\")] {\n+        #[link(name = \"dl\")]\n+        #[link(name = \"log\")]\n+        #[link(name = \"gcc\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"freebsd\")] {\n+        #[link(name = \"execinfo\")]\n+        #[link(name = \"pthread\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"netbsd\")] {\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"rt\")]\n+        extern \"C\" {}\n+    } else if #[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))] {\n+        #[link(name = \"pthread\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"solaris\")] {\n+        #[link(name = \"socket\")]\n+        #[link(name = \"posix4\")]\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"illumos\")] {\n+        #[link(name = \"socket\")]\n+        #[link(name = \"posix4\")]\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"resolv\")]\n+        #[link(name = \"nsl\")]\n+        // Use libumem for the (malloc-compatible) allocator\n+        #[link(name = \"umem\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"macos\")] {\n+        #[link(name = \"System\")]\n+        // res_init and friends require -lresolv on macOS/iOS.\n+        // See #41582 and http://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"ios\")] {\n+        #[link(name = \"System\")]\n+        #[link(name = \"objc\")]\n+        #[link(name = \"Security\", kind = \"framework\")]\n+        #[link(name = \"Foundation\", kind = \"framework\")]\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"fuchsia\")] {\n+        #[link(name = \"zircon\")]\n+        #[link(name = \"fdio\")]\n+        extern \"C\" {}\n+    }\n+}"}, {"sha": "c36c6196d79e0d766fc1cfa554df706ebca83b3a", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54508a26eb0595eb8417a4643f2ee572d6ca33d3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=54508a26eb0595eb8417a4643f2ee572d6ca33d3", "patch": "@@ -270,3 +270,17 @@ pub fn abort_internal() -> ! {\n     }\n     crate::intrinsics::abort();\n }\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_vendor = \"uwp\")] {\n+        #[link(name = \"ws2_32\")]\n+        // For BCryptGenRandom\n+        #[link(name = \"bcrypt\")]\n+        extern \"C\" {}\n+    } else {\n+        #[link(name = \"advapi32\")]\n+        #[link(name = \"ws2_32\")]\n+        #[link(name = \"userenv\")]\n+        extern \"C\" {}\n+    }\n+}"}]}