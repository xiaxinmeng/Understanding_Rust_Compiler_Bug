{"sha": "79a578ae840abc729be96604f925aa4af25a2cbb", "node_id": "C_kwDOAAsO6NoAKDc5YTU3OGFlODQwYWJjNzI5YmU5NjYwNGY5MjVhYTRhZjI1YTJjYmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T13:47:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T13:47:40Z"}, "message": "Auto merge of #13005 - pocket7878:convert-two-arm-bool-match-to-matches-macro, r=jonas-schievink\n\nfeature: Assist to turn match into matches! invocation\n\nResolves #12510\n\nThis PR adds an assist, which convert 2-arm match that evaluates to a boolean into the equivalent matches! invocation.", "tree": {"sha": "d6b731991e8907bc728e607acef5bcb0b620ef04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b731991e8907bc728e607acef5bcb0b620ef04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79a578ae840abc729be96604f925aa4af25a2cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79a578ae840abc729be96604f925aa4af25a2cbb", "html_url": "https://github.com/rust-lang/rust/commit/79a578ae840abc729be96604f925aa4af25a2cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79a578ae840abc729be96604f925aa4af25a2cbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf05b7db4d185383f100ab9d53b460686280aaed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf05b7db4d185383f100ab9d53b460686280aaed", "html_url": "https://github.com/rust-lang/rust/commit/cf05b7db4d185383f100ab9d53b460686280aaed"}, {"sha": "7464b6dbc4b5342dc70105307c28ec26125b6380", "url": "https://api.github.com/repos/rust-lang/rust/commits/7464b6dbc4b5342dc70105307c28ec26125b6380", "html_url": "https://github.com/rust-lang/rust/commit/7464b6dbc4b5342dc70105307c28ec26125b6380"}], "stats": {"total": 316, "additions": 316, "deletions": 0}, "files": [{"sha": "54a7f480a4e46abd5316a3cc719e8c54ede8a69f", "filename": "crates/ide-assists/src/handlers/convert_two_arm_bool_match_to_matches_macro.rs", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs?ref=79a578ae840abc729be96604f925aa4af25a2cbb", "patch": "@@ -0,0 +1,294 @@\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: convert_two_arm_bool_match_to_matches_macro\n+//\n+// Convert 2-arm match that evaluates to a boolean into the equivalent matches! invocation.\n+//\n+// ```\n+// fn main() {\n+//     match scrutinee$0 {\n+//         Some(val) if val.cond() => true,\n+//         _ => false,\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     matches!(scrutinee, Some(val) if val.cond())\n+// }\n+// ```\n+pub(crate) fn convert_two_arm_bool_match_to_matches_macro(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    let match_expr = ctx.find_node_at_offset::<ast::MatchExpr>()?;\n+    let match_arm_list = match_expr.match_arm_list()?;\n+    let mut arms = match_arm_list.arms();\n+    let first_arm = arms.next()?;\n+    let second_arm = arms.next()?;\n+    if arms.next().is_some() {\n+        cov_mark::hit!(non_two_arm_match);\n+        return None;\n+    }\n+    let first_arm_expr = first_arm.expr();\n+    let second_arm_expr = second_arm.expr();\n+\n+    let invert_matches = if is_bool_literal_expr(&first_arm_expr, true)\n+        && is_bool_literal_expr(&second_arm_expr, false)\n+    {\n+        false\n+    } else if is_bool_literal_expr(&first_arm_expr, false)\n+        && is_bool_literal_expr(&second_arm_expr, true)\n+    {\n+        true\n+    } else {\n+        cov_mark::hit!(non_invert_bool_literal_arms);\n+        return None;\n+    };\n+\n+    let target_range = ctx.sema.original_range(match_expr.syntax()).range;\n+    let expr = match_expr.expr()?;\n+\n+    acc.add(\n+        AssistId(\"convert_two_arm_bool_match_to_matches_macro\", AssistKind::RefactorRewrite),\n+        \"Convert to matches!\",\n+        target_range,\n+        |builder| {\n+            let mut arm_str = String::new();\n+            if let Some(ref pat) = first_arm.pat() {\n+                arm_str += &pat.to_string();\n+            }\n+            if let Some(ref guard) = first_arm.guard() {\n+                arm_str += &format!(\" {}\", &guard.to_string());\n+            }\n+            if invert_matches {\n+                builder.replace(target_range, format!(\"!matches!({}, {})\", expr, arm_str));\n+            } else {\n+                builder.replace(target_range, format!(\"matches!({}, {})\", expr, arm_str));\n+            }\n+        },\n+    )\n+}\n+\n+fn is_bool_literal_expr(expr: &Option<ast::Expr>, expect_bool: bool) -> bool {\n+    if let Some(ast::Expr::Literal(lit)) = expr {\n+        if let ast::LiteralKind::Bool(b) = lit.kind() {\n+            return b == expect_bool;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    use super::convert_two_arm_bool_match_to_matches_macro;\n+\n+    #[test]\n+    fn not_applicable_outside_of_range_left() {\n+        check_assist_not_applicable(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    $0 match a {\n+        Some(_val) => true,\n+        _ => false\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_two_arm_match() {\n+        cov_mark::check!(non_two_arm_match);\n+        check_assist_not_applicable(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(3) => true,\n+        Some(4) => true,\n+        _ => false\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_bool_literal_arms() {\n+        cov_mark::check!(non_invert_bool_literal_arms);\n+        check_assist_not_applicable(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(val) => val == 3,\n+        _ => false\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+    #[test]\n+    fn not_applicable_both_false_arms() {\n+        cov_mark::check!(non_invert_bool_literal_arms);\n+        check_assist_not_applicable(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(val) => false,\n+        _ => false\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_both_true_arms() {\n+        cov_mark::check!(non_invert_bool_literal_arms);\n+        check_assist_not_applicable(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(val) => true,\n+        _ => true\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_simple_case() {\n+        check_assist(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(_val) => true,\n+        _ => false\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    matches!(a, Some(_val))\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_simple_invert_case() {\n+        check_assist(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(_val) => false,\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    !matches!(a, Some(_val))\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_with_guard_case() {\n+        check_assist(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(val) if val > 3 => true,\n+        _ => false\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    matches!(a, Some(val) if val > 3)\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_enum_match_cases() {\n+        check_assist(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+enum X { A, B }\n+\n+fn foo(a: X) -> bool {\n+    match a$0 {\n+        X::A => true,\n+        _ => false\n+    }\n+}\n+\"#,\n+            r#\"\n+enum X { A, B }\n+\n+fn foo(a: X) -> bool {\n+    matches!(a, X::A)\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_target_simple() {\n+        check_assist_target(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+fn foo(a: Option<u32>) -> bool {\n+    match a$0 {\n+        Some(val) => true,\n+        _ => false\n+    }\n+}\n+\"#,\n+            r#\"match a {\n+        Some(val) => true,\n+        _ => false\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_target_complex() {\n+        check_assist_target(\n+            convert_two_arm_bool_match_to_matches_macro,\n+            r#\"\n+enum E { X, Y }\n+\n+fn main() {\n+    match E::X$0 {\n+        E::X => true,\n+        _ => false,\n+    }\n+}\n+\"#,\n+            \"match E::X {\n+        E::X => true,\n+        _ => false,\n+    }\",\n+        );\n+    }\n+}"}, {"sha": "0a40c40386793755bda1291f9210e982008f4c5b", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=79a578ae840abc729be96604f925aa4af25a2cbb", "patch": "@@ -122,6 +122,7 @@ mod handlers {\n     mod convert_let_else_to_match;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_to_guarded_return;\n+    mod convert_two_arm_bool_match_to_matches_macro;\n     mod convert_while_to_loop;\n     mod destructure_tuple_binding;\n     mod expand_glob_import;\n@@ -216,6 +217,7 @@ mod handlers {\n             convert_let_else_to_match::convert_let_else_to_match,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n+            convert_two_arm_bool_match_to_matches_macro::convert_two_arm_bool_match_to_matches_macro,\n             convert_while_to_loop::convert_while_to_loop,\n             destructure_tuple_binding::destructure_tuple_binding,\n             expand_glob_import::expand_glob_import,"}, {"sha": "c5895a843a2ea08e3508a76f62b448339a416790", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a578ae840abc729be96604f925aa4af25a2cbb/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=79a578ae840abc729be96604f925aa4af25a2cbb", "patch": "@@ -472,6 +472,26 @@ impl Point {\n     )\n }\n \n+#[test]\n+fn doctest_convert_two_arm_bool_match_to_matches_macro() {\n+    check_doc_test(\n+        \"convert_two_arm_bool_match_to_matches_macro\",\n+        r#####\"\n+fn main() {\n+    match scrutinee$0 {\n+        Some(val) if val.cond() => true,\n+        _ => false,\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    matches!(scrutinee, Some(val) if val.cond())\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_while_to_loop() {\n     check_doc_test("}]}