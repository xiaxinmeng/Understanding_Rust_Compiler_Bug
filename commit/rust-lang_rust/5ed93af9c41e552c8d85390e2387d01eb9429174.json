{"sha": "5ed93af9c41e552c8d85390e2387d01eb9429174", "node_id": "C_kwDOAAsO6NoAKDVlZDkzYWY5YzQxZTU1MmM4ZDg1MzkwZTIzODdkMDFlYjk0MjkxNzQ", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2021-08-09T10:00:35Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:10Z"}, "message": "Use `ExprUseVisitor` and multipart suggestion to avoid iffy `String` replacement", "tree": {"sha": "383b889afe1b830531932f490b753aed4ddd0365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383b889afe1b830531932f490b753aed4ddd0365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ed93af9c41e552c8d85390e2387d01eb9429174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed93af9c41e552c8d85390e2387d01eb9429174", "html_url": "https://github.com/rust-lang/rust/commit/5ed93af9c41e552c8d85390e2387d01eb9429174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ed93af9c41e552c8d85390e2387d01eb9429174/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c75cde5e5226912995f6809e96efd2ac2c2348", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c75cde5e5226912995f6809e96efd2ac2c2348", "html_url": "https://github.com/rust-lang/rust/commit/f4c75cde5e5226912995f6809e96efd2ac2c2348"}], "stats": {"total": 543, "additions": 334, "deletions": 209}, "files": [{"sha": "71fca601747d9341afef841b4c12f0421bef5b9d", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 140, "deletions": 46, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -1,15 +1,19 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{is_trait_method, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::PatKind;\n+use rustc_hir::{self, HirId, HirIdMap, HirIdSet, PatKind};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::hir::place::ProjectionKind;\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use super::SEARCH_IS_SOME;\n \n@@ -42,30 +46,42 @@ pub(super) fn check<'tcx>(\n                 if let hir::ExprKind::Closure(_, _, body_id, ..) = search_arg.kind;\n                 let closure_body = cx.tcx.hir().body(body_id);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n+\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {\n-                        Some(search_snippet.replacen('&', \"\", 1))\n-                    } else if let PatKind::Binding(annotation, _, ident, _) = strip_pat_refs(closure_arg.pat).kind {\n-                        let name = &*ident.name.as_str();\n-                        let old_search_snippet = search_snippet.clone();\n-                        let search_snippet = search_snippet.replace(&format!(\"*{}\", name), name);\n-\n-                        if_chain! {\n-                            // if there is no dereferencing used in closure body\n-                            if old_search_snippet == search_snippet;\n-                            if annotation == hir::BindingAnnotation::Unannotated;\n-                            if let ty::Ref(_, inner_ty, _) = cx.typeck_results().node_type(closure_arg.hir_id).kind();\n-                            if let ty::Ref(..) = inner_ty.kind();\n-                            // put an `&` in the closure body, but skip closure params\n-                            if let Some((start, end)) = old_search_snippet.split_once(&name);\n-\n-                            then {\n-                                let end = end.replace(name, &format!(\"&{}\", name));\n-                                Some(format!(\"{}{}{}\", start, name, end))\n-                            } else {\n-                                Some(search_snippet)\n+                        Some((search_snippet.replacen('&', \"\", 1), None))\n+                    } else if let PatKind::Binding(..) = strip_pat_refs(closure_arg.pat).kind {\n+                        let mut visitor = DerefDelegate {\n+                            cx,\n+                            set: HirIdSet::default(),\n+                            deref_suggs: HirIdMap::default(),\n+                            borrow_suggs: HirIdMap::default()\n+                        };\n+\n+                        let fn_def_id = cx.tcx.hir().local_def_id(search_arg.hir_id);\n+                        cx.tcx.infer_ctxt().enter(|infcx| {\n+                            ExprUseVisitor::new(\n+                                &mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results()\n+                            ).consume_body(closure_body);\n+                        });\n+\n+                        let replacements = if visitor.set.is_empty() {\n+                            None\n+                        } else {\n+                            let mut deref_suggs = Vec::new();\n+                            let mut borrow_suggs = Vec::new();\n+                            for node in visitor.set {\n+                                let span = cx.tcx.hir().span(node);\n+                                if let Some(sugg) = visitor.deref_suggs.get(&node) {\n+                                    deref_suggs.push((span, sugg.clone()));\n+                                }\n+                                if let Some(sugg) = visitor.borrow_suggs.get(&node) {\n+                                    borrow_suggs.push((span, sugg.clone()));\n+                                }\n                             }\n-                        }\n+                            Some((deref_suggs, borrow_suggs))\n+                        };\n+                        Some((search_snippet.to_string(), replacements))\n                     } else {\n                         None\n                     }\n@@ -74,35 +90,38 @@ pub(super) fn check<'tcx>(\n                 }\n             };\n             // add note if not multi-line\n-            if is_some {\n-                span_lint_and_sugg(\n-                    cx,\n-                    SEARCH_IS_SOME,\n+            let (closure_snippet, replacements) = any_search_snippet\n+                .as_ref()\n+                .map_or((&*search_snippet, None), |s| (&s.0, s.1.clone()));\n+            let (span, help, sugg) = if is_some {\n+                (\n                     method_span.with_hi(expr.span.hi()),\n-                    &msg,\n                     \"use `any()` instead\",\n-                    format!(\n-                        \"any({})\",\n-                        any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n+                    format!(\"any({})\", closure_snippet),\n+                )\n             } else {\n                 let iter = snippet(cx, search_recv.span, \"..\");\n-                span_lint_and_sugg(\n-                    cx,\n-                    SEARCH_IS_SOME,\n+                (\n                     expr.span,\n-                    &msg,\n                     \"use `!_.any()` instead\",\n-                    format!(\n-                        \"!{}.any({})\",\n-                        iter,\n-                        any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+                    format!(\"!{}.any({})\", iter, closure_snippet),\n+                )\n+            };\n+\n+            span_lint_and_then(cx, SEARCH_IS_SOME, span, &msg, |db| {\n+                if let Some((deref_suggs, borrow_suggs)) = replacements {\n+                    db.span_suggestion(span, help, sugg, Applicability::MaybeIncorrect);\n+\n+                    if !deref_suggs.is_empty() {\n+                        db.multipart_suggestion(\"...and remove deref\", deref_suggs, Applicability::MaybeIncorrect);\n+                    }\n+                    if !borrow_suggs.is_empty() {\n+                        db.multipart_suggestion(\"...and borrow variable\", borrow_suggs, Applicability::MaybeIncorrect);\n+                    }\n+                } else {\n+                    db.span_suggestion(span, help, sugg, Applicability::MachineApplicable);\n+                }\n+            });\n         } else {\n             let hint = format!(\n                 \"this is more succinctly expressed by calling `any()`{}\",\n@@ -164,3 +183,78 @@ pub(super) fn check<'tcx>(\n         }\n     }\n }\n+\n+struct DerefDelegate<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    set: HirIdSet,\n+    deref_suggs: HirIdMap<String>,\n+    borrow_suggs: HirIdMap<String>,\n+}\n+\n+impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n+        if let PlaceBase::Local(id) = cmt.place.base {\n+            let map = self.cx.tcx.hir();\n+            if cmt.place.projections.is_empty() {\n+                self.set.insert(cmt.hir_id);\n+            } else {\n+                let mut replacement_str = map.name(id).to_string();\n+                let last_deref = cmt\n+                    .place\n+                    .projections\n+                    .iter()\n+                    .rposition(|proj| proj.kind == ProjectionKind::Deref);\n+\n+                if let Some(pos) = last_deref {\n+                    let mut projections = cmt.place.projections.clone();\n+                    projections.truncate(pos);\n+\n+                    for item in projections {\n+                        if item.kind == ProjectionKind::Deref {\n+                            replacement_str = format!(\"*{}\", replacement_str);\n+                        }\n+                    }\n+\n+                    self.set.insert(cmt.hir_id);\n+                    self.deref_suggs.insert(cmt.hir_id, replacement_str);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n+        if let PlaceBase::Local(id) = cmt.place.base {\n+            let map = self.cx.tcx.hir();\n+            if cmt.place.projections.is_empty() {\n+                let replacement_str = format!(\"&{}\", map.name(id).to_string());\n+                self.set.insert(cmt.hir_id);\n+                self.borrow_suggs.insert(cmt.hir_id, replacement_str);\n+            } else {\n+                let mut replacement_str = map.name(id).to_string();\n+                let last_deref = cmt\n+                    .place\n+                    .projections\n+                    .iter()\n+                    .rposition(|proj| proj.kind == ProjectionKind::Deref);\n+\n+                if let Some(pos) = last_deref {\n+                    let mut projections = cmt.place.projections.clone();\n+                    projections.truncate(pos);\n+\n+                    for item in projections {\n+                        if item.kind == ProjectionKind::Deref {\n+                            replacement_str = format!(\"*{}\", replacement_str);\n+                        }\n+                    }\n+\n+                    self.set.insert(cmt.hir_id);\n+                    self.deref_suggs.insert(cmt.hir_id, replacement_str);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn mutate(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+}"}, {"sha": "dfc79207ca7725b59868990b3f8b11294a6dc407", "filename": "tests/ui/search_is_some.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -36,6 +36,11 @@ fn main() {\n     // check that we don't lint if `find()` is called with\n     // `Pattern` that is not a string\n     let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n }\n \n #[rustfmt::skip]\n@@ -70,4 +75,44 @@ fn is_none() {\n     // check that we don't lint if `find()` is called with\n     // `Pattern` that is not a string\n     let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_none();\n+\n+    // Check `find().is_none()`, single-line case.\n+    let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_none();\n+    let _ = v.iter().find(|x| **x == 0).is_none();\n+}\n+\n+#[allow(clippy::clone_on_copy, clippy::map_clone)]\n+mod issue7392 {\n+    struct Player {\n+        hand: Vec<usize>,\n+    }\n+    fn filter() {\n+        let p = Player {\n+            hand: vec![1, 2, 3, 4, 5],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+\n+    struct PlayerTuple {\n+        hand: Vec<(usize, char)>,\n+    }\n+    fn filter_tuple() {\n+        let p = PlayerTuple {\n+            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n }"}, {"sha": "8db936fd948621d2f97e3a22175bb8c93528ec9a", "filename": "tests/ui/search_is_some.stderr", "status": "modified", "additions": 124, "deletions": 4, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -35,8 +35,53 @@ LL | |                    ).is_some();\n    |\n    = help: this is more succinctly expressed by calling `any()`\n \n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:41:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `any()` instead\n+   |\n+LL |     let _ = (0..1).any(|x| **y == *x); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = (0..1).find(|x| **y == x).is_some(); // one dereference less\n+   |                                    ^\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:42:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `any()` instead\n+   |\n+LL |     let _ = (0..1).any(|x| *x == 0);\n+   |                    ^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = (0..1).find(|x| x == 0).is_some();\n+   |                             ^\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:43:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `any()` instead\n+   |\n+LL |     let _ = v.iter().any(|x| **x == 0);\n+   |                      ^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = v.iter().find(|x| *x == 0).is_some();\n+   |                               ^^\n+\n error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some.rs:48:13\n+  --> $DIR/search_is_some.rs:53:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -48,7 +93,7 @@ LL | |                    ).is_none();\n    = help: this is more succinctly expressed by calling `any()` with negation\n \n error: called `is_none()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some.rs:54:13\n+  --> $DIR/search_is_some.rs:59:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -60,7 +105,7 @@ LL | |                    ).is_none();\n    = help: this is more succinctly expressed by calling `any()` with negation\n \n error: called `is_none()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some.rs:60:13\n+  --> $DIR/search_is_some.rs:65:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -71,5 +116,80 @@ LL | |                    ).is_none();\n    |\n    = help: this is more succinctly expressed by calling `any()` with negation\n \n-error: aborting due to 6 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:80:13\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL |     let _ = !(0..1).any(|x| **y == *x); // one dereference less\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = (0..1).find(|x| **y == x).is_none(); // one dereference less\n+   |                                    ^\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:81:13\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL |     let _ = !(0..1).any(|x| *x == 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = (0..1).find(|x| x == 0).is_none();\n+   |                             ^\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:82:13\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL |     let _ = !v.iter().any(|x| **x == 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |     let _ = v.iter().find(|x| *x == 0).is_none();\n+   |                               ^^\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:98:25\n+   |\n+LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL |             .filter(|c| !filter_hand.iter().any(|cc| c == cc))\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and borrow variable\n+   |\n+LL |             .filter(|c| filter_hand.iter().find(|cc| c == &cc).is_none())\n+   |                                                           ^^^\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:114:30\n+   |\n+LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `!_.any()` instead\n+   |\n+LL |             .filter(|(c, _)| !filter_hand.iter().any(|cc| c == *cc))\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and remove deref\n+   |\n+LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == cc).is_none())\n+   |                                                                ^^\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "6994df427ba9bcf281eababf3a250a767ee08e62", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -4,13 +4,9 @@\n \n fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n \n     // Check `find().is_some()`, single-line case.\n     let _ = v.iter().any(|x| *x < 0);\n-    let _ = (0..1).any(|x| **y == x); // one dereference less\n-    let _ = (0..1).any(|x| x == 0);\n-    let _ = v.iter().any(|x| *x == 0);\n \n     // Check `position().is_some()`, single-line case.\n     let _ = v.iter().any(|&x| x < 0);\n@@ -36,13 +32,9 @@ fn main() {\n \n fn is_none() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n \n     // Check `find().is_none()`, single-line case.\n     let _ = !v.iter().any(|x| *x < 0);\n-    let _ = !(0..1).any(|x| **y == x); // one dereference less\n-    let _ = !(0..1).any(|x| x == 0);\n-    let _ = !v.iter().any(|x| *x == 0);\n \n     // Check `position().is_none()`, single-line case.\n     let _ = !v.iter().any(|&x| x < 0);\n@@ -66,38 +58,3 @@ fn is_none() {\n     let _ = !s1[2..].contains(&s2);\n     let _ = !s1[2..].contains(&s2[2..]);\n }\n-\n-#[allow(clippy::clone_on_copy, clippy::map_clone)]\n-mod issue7392 {\n-    struct Player {\n-        hand: Vec<usize>,\n-    }\n-    fn filter() {\n-        let p = Player {\n-            hand: vec![1, 2, 3, 4, 5],\n-        };\n-        let filter_hand = vec![5];\n-        let _ = p\n-            .hand\n-            .iter()\n-            .filter(|c| !filter_hand.iter().any(|cc| c == &cc))\n-            .map(|c| c.clone())\n-            .collect::<Vec<_>>();\n-    }\n-\n-    struct PlayerTuple {\n-        hand: Vec<(usize, char)>,\n-    }\n-    fn filter_tuple() {\n-        let p = PlayerTuple {\n-            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n-        };\n-        let filter_hand = vec![5];\n-        let _ = p\n-            .hand\n-            .iter()\n-            .filter(|(c, _)| !filter_hand.iter().any(|cc| c == cc))\n-            .map(|c| c.clone())\n-            .collect::<Vec<_>>();\n-    }\n-}"}, {"sha": "d4c9d89e7b838d172cf437455b36f0678430c73c", "filename": "tests/ui/search_is_some_fixable.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -4,13 +4,9 @@\n \n fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n \n     // Check `find().is_some()`, single-line case.\n     let _ = v.iter().find(|&x| *x < 0).is_some();\n-    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_some();\n-    let _ = v.iter().find(|x| **x == 0).is_some();\n \n     // Check `position().is_some()`, single-line case.\n     let _ = v.iter().position(|&x| x < 0).is_some();\n@@ -36,13 +32,9 @@ fn main() {\n \n fn is_none() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n \n     // Check `find().is_none()`, single-line case.\n     let _ = v.iter().find(|&x| *x < 0).is_none();\n-    let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_none();\n-    let _ = v.iter().find(|x| **x == 0).is_none();\n \n     // Check `position().is_none()`, single-line case.\n     let _ = v.iter().position(|&x| x < 0).is_none();\n@@ -66,38 +58,3 @@ fn is_none() {\n     let _ = s1[2..].find(&s2).is_none();\n     let _ = s1[2..].find(&s2[2..]).is_none();\n }\n-\n-#[allow(clippy::clone_on_copy, clippy::map_clone)]\n-mod issue7392 {\n-    struct Player {\n-        hand: Vec<usize>,\n-    }\n-    fn filter() {\n-        let p = Player {\n-            hand: vec![1, 2, 3, 4, 5],\n-        };\n-        let filter_hand = vec![5];\n-        let _ = p\n-            .hand\n-            .iter()\n-            .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n-            .map(|c| c.clone())\n-            .collect::<Vec<_>>();\n-    }\n-\n-    struct PlayerTuple {\n-        hand: Vec<(usize, char)>,\n-    }\n-    fn filter_tuple() {\n-        let p = PlayerTuple {\n-            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n-        };\n-        let filter_hand = vec![5];\n-        let _ = p\n-            .hand\n-            .iter()\n-            .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n-            .map(|c| c.clone())\n-            .collect::<Vec<_>>();\n-    }\n-}"}, {"sha": "5e77c9a5bace6a63b85d1b1b03bf373576c0ade4", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "modified", "additions": 25, "deletions": 73, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed93af9c41e552c8d85390e2387d01eb9429174/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=5ed93af9c41e552c8d85390e2387d01eb9429174", "patch": "@@ -1,196 +1,148 @@\n error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:10:22\n+  --> $DIR/search_is_some_fixable.rs:9:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:11:20\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:12:20\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:13:22\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n-\n error: called `is_some()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some_fixable.rs:16:22\n+  --> $DIR/search_is_some_fixable.rs:12:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some_fixable.rs:19:22\n+  --> $DIR/search_is_some_fixable.rs:15:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:24:27\n+  --> $DIR/search_is_some_fixable.rs:20:27\n    |\n LL |     let _ = \"hello world\".find(\"world\").is_some();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:25:27\n+  --> $DIR/search_is_some_fixable.rs:21:27\n    |\n LL |     let _ = \"hello world\".find(&s2).is_some();\n    |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:26:27\n+  --> $DIR/search_is_some_fixable.rs:22:27\n    |\n LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:28:16\n+  --> $DIR/search_is_some_fixable.rs:24:16\n    |\n LL |     let _ = s1.find(\"world\").is_some();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:29:16\n+  --> $DIR/search_is_some_fixable.rs:25:16\n    |\n LL |     let _ = s1.find(&s2).is_some();\n    |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:30:16\n+  --> $DIR/search_is_some_fixable.rs:26:16\n    |\n LL |     let _ = s1.find(&s2[2..]).is_some();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:32:21\n+  --> $DIR/search_is_some_fixable.rs:28:21\n    |\n LL |     let _ = s1[2..].find(\"world\").is_some();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:33:21\n+  --> $DIR/search_is_some_fixable.rs:29:21\n    |\n LL |     let _ = s1[2..].find(&s2).is_some();\n    |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:34:21\n+  --> $DIR/search_is_some_fixable.rs:30:21\n    |\n LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:42:13\n+  --> $DIR/search_is_some_fixable.rs:37:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x < 0)`\n \n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:43:13\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| **y == x)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:44:13\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| x == 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:45:13\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x == 0)`\n-\n error: called `is_none()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some_fixable.rs:48:13\n+  --> $DIR/search_is_some_fixable.rs:40:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n \n error: called `is_none()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some_fixable.rs:51:13\n+  --> $DIR/search_is_some_fixable.rs:43:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:57:13\n+  --> $DIR/search_is_some_fixable.rs:49:13\n    |\n LL |     let _ = \"hello world\".find(\"world\").is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(\"world\")`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:58:13\n+  --> $DIR/search_is_some_fixable.rs:50:13\n    |\n LL |     let _ = \"hello world\".find(&s2).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2)`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:59:13\n+  --> $DIR/search_is_some_fixable.rs:51:13\n    |\n LL |     let _ = \"hello world\".find(&s2[2..]).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2[2..])`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:61:13\n+  --> $DIR/search_is_some_fixable.rs:53:13\n    |\n LL |     let _ = s1.find(\"world\").is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(\"world\")`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:62:13\n+  --> $DIR/search_is_some_fixable.rs:54:13\n    |\n LL |     let _ = s1.find(&s2).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2)`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:63:13\n+  --> $DIR/search_is_some_fixable.rs:55:13\n    |\n LL |     let _ = s1.find(&s2[2..]).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2[2..])`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:65:13\n+  --> $DIR/search_is_some_fixable.rs:57:13\n    |\n LL |     let _ = s1[2..].find(\"world\").is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(\"world\")`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:66:13\n+  --> $DIR/search_is_some_fixable.rs:58:13\n    |\n LL |     let _ = s1[2..].find(&s2).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2)`\n \n error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:67:13\n+  --> $DIR/search_is_some_fixable.rs:59:13\n    |\n LL |     let _ = s1[2..].find(&s2[2..]).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2[2..])`\n \n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:83:25\n-   |\n-LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == &cc)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:99:30\n-   |\n-LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == cc)`\n-\n-error: aborting due to 32 previous errors\n+error: aborting due to 24 previous errors\n "}]}