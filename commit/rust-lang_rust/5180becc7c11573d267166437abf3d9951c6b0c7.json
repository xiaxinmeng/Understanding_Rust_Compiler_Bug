{"sha": "5180becc7c11573d267166437abf3d9951c6b0c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxODBiZWNjN2MxMTU3M2QyNjcxNjY0MzdhYmYzZDk5NTFjNmIwYzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-24T15:16:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:30:39Z"}, "message": "Fix 128bit CValue::const_val", "tree": {"sha": "ff6f0783d29b33437d4fc3ff2f303a3e5aae3266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6f0783d29b33437d4fc3ff2f303a3e5aae3266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5180becc7c11573d267166437abf3d9951c6b0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5180becc7c11573d267166437abf3d9951c6b0c7", "html_url": "https://github.com/rust-lang/rust/commit/5180becc7c11573d267166437abf3d9951c6b0c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5180becc7c11573d267166437abf3d9951c6b0c7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b82238bbe54643c63a8693299d6a9f4c0b0358", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b82238bbe54643c63a8693299d6a9f4c0b0358", "html_url": "https://github.com/rust-lang/rust/commit/63b82238bbe54643c63a8693299d6a9f4c0b0358"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "465b6143525ce82ae6d58a23614734fa0aeeb697", "filename": "example/std_example.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -19,6 +19,9 @@ fn checked_div_u128(lhs: u128, rhs: u128) -> Option<u128> {\n }\n \n fn main() {\n+    assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n+    assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n+\n     checked_div_i128(0i128, 2i128);\n     checked_div_u128(0u128, 2u128);\n     assert_eq!(1u128 + 2, 3);"}, {"sha": "6476de7652d192c84d28236e8b761e4591b3b33e", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -266,7 +266,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         .discriminant_for_variant(fx.tcx, *variant_index)\n                         .unwrap()\n                         .val;\n-                    let discr = CValue::const_val(fx, ptr.layout().ty, to as u64 as i64);\n+                    let discr = CValue::const_val(fx, ptr.layout().ty, to);\n                     ptr.write_cvalue(fx, discr);\n                 }\n                 layout::Variants::Multiple {\n@@ -289,7 +289,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         let niche_llval = if niche_value == 0 {\n                             CValue::const_val(fx, niche.layout().ty, 0)\n                         } else {\n-                            CValue::const_val(fx, niche.layout().ty, niche_value as u64 as i64)\n+                            CValue::const_val(fx, niche.layout().ty, niche_value)\n                         };\n                         niche.write_cvalue(fx, niche_llval);\n                     }\n@@ -562,7 +562,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         .ty\n                         .is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()));\n                     let ty_size = fx.layout_of(ty).size.bytes();\n-                    let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size as i64);\n+                    let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size.into());\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Aggregate(kind, operands) => match **kind {\n@@ -679,7 +679,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 .map_or(index.as_u32() as u128, |def| {\n                     def.discriminant_for_variant(fx.tcx, *index).val\n                 });\n-            return CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n+            return CValue::const_val(fx, dest_layout.ty, discr_val);\n         }\n         layout::Variants::Multiple { discr, discr_index, discr_kind, variants: _ } => {\n             (discr, *discr_index, discr_kind)"}, {"sha": "10f757ffce876b9c610c71c446ad3f28de5b1ee7", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -113,17 +113,13 @@ pub fn trans_const_value<'a, 'tcx: 'a>(\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n     match ty.sty {\n-        ty::Bool => {\n+        ty::Bool | ty::Uint(_) => {\n             let bits = const_.val.try_to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, ty, bits as u64 as i64)\n-        }\n-        ty::Uint(_) => {\n-            let bits = const_.val.try_to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, ty, bits as u64 as i64)\n+            CValue::const_val(fx, ty, bits)\n         }\n         ty::Int(_) => {\n             let bits = const_.val.try_to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, ty, rustc::mir::interpret::sign_extend(bits, layout.size) as i128 as i64)\n+            CValue::const_val(fx, ty, rustc::mir::interpret::sign_extend(bits, layout.size))\n         }\n         ty::FnDef(_def_id, _substs) => CValue::by_ref(\n             fx.bcx"}, {"sha": "ee00924ad821dcdb0be7d5f16ebc281f17b851fc", "filename": "src/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -150,7 +150,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         size_of, <T> () {\n             let size_of = fx.layout_of(T).size.bytes();\n-            let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n+            let size_of = CValue::const_val(fx, usize_layout.ty, size_of.into());\n             ret.write_cvalue(fx, size_of);\n         };\n         size_of_val, <T> (c ptr) {\n@@ -169,7 +169,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         min_align_of, <T> () {\n             let min_align = fx.layout_of(T).align.abi.bytes();\n-            let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n+            let min_align = CValue::const_val(fx, usize_layout.ty, min_align.into());\n             ret.write_cvalue(fx, min_align);\n         };\n         min_align_of_val, <T> (c ptr) {\n@@ -188,14 +188,14 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         pref_align_of, <T> () {\n             let pref_align = fx.layout_of(T).align.pref.bytes();\n-            let pref_align = CValue::const_val(fx, usize_layout.ty, pref_align as i64);\n+            let pref_align = CValue::const_val(fx, usize_layout.ty, pref_align.into());\n             ret.write_cvalue(fx, pref_align);\n         };\n \n \n         type_id, <T> () {\n             let type_id = fx.tcx.type_id_hash(T);\n-            let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n+            let type_id = CValue::const_val(fx, u64_layout.ty, type_id.into());\n             ret.write_cvalue(fx, type_id);\n         };\n         type_name, <T> () {\n@@ -395,9 +395,9 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 let (lsb, msb) = fx.bcx.ins().isplit(arg);\n                 let lsb_lz = fx.bcx.ins().clz(lsb);\n                 let msb_lz = fx.bcx.ins().clz(msb);\n-                let msb_lz_is_64 = fx.bcx.ins().icmp_imm(IntCC::Equal, msb_lz, 64);\n+                let msb_is_zero = fx.bcx.ins().icmp_imm(IntCC::Equal, msb, 0);\n                 let lsb_lz_plus_64 = fx.bcx.ins().iadd_imm(lsb_lz, 64);\n-                fx.bcx.ins().select(msb_lz_is_64, lsb_lz_plus_64, msb_lz)\n+                fx.bcx.ins().select(msb_is_zero, lsb_lz_plus_64, msb_lz)\n             } else {\n                 fx.bcx.ins().clz(arg)\n             };\n@@ -410,9 +410,9 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 let (lsb, msb) = fx.bcx.ins().isplit(arg);\n                 let lsb_tz = fx.bcx.ins().ctz(lsb);\n                 let msb_tz = fx.bcx.ins().ctz(msb);\n-                let lsb_tz_is_64 = fx.bcx.ins().icmp_imm(IntCC::Equal, lsb_tz, 64);\n-                let msb_lz_plus_64 = fx.bcx.ins().iadd_imm(msb_tz, 64);\n-                fx.bcx.ins().select(lsb_tz_is_64, msb_lz_plus_64, lsb_tz)\n+                let lsb_is_zero = fx.bcx.ins().icmp_imm(IntCC::Equal, lsb, 0);\n+                let msb_tz_plus_64 = fx.bcx.ins().iadd_imm(msb_tz, 64);\n+                fx.bcx.ins().select(lsb_is_zero, msb_tz_plus_64, lsb_tz)\n             } else {\n                 fx.bcx.ins().ctz(arg)\n             };"}, {"sha": "df53d741a7528592831d93f9bc774f786079ce25", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -54,7 +54,7 @@ mod vtable;\n mod prelude {\n     pub use std::any::Any;\n     pub use std::collections::{HashMap, HashSet};\n-    pub use std::convert::TryInto;\n+    pub use std::convert::{TryFrom, TryInto};\n \n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::source_map::{Pos, Span, DUMMY_SP};"}, {"sha": "21c90d0d91a939c646d17e199bd2b29b83f7b1b7", "filename": "src/value_and_place.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5180becc7c11573d267166437abf3d9951c6b0c7/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=5180becc7c11573d267166437abf3d9951c6b0c7", "patch": "@@ -162,24 +162,37 @@ impl<'tcx> CValue<'tcx> {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n \n+    /// If `ty` is signed, `const_val` must already be sign extended.\n     pub fn const_val<'a>(\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,\n-        const_val: i64,\n+        const_val: u128,\n     ) -> CValue<'tcx>\n     where\n         'tcx: 'a,\n     {\n         let clif_ty = fx.clif_type(ty).unwrap();\n         let layout = fx.layout_of(ty);\n-        let val = if clif_ty == types::I128 {\n-            // FIXME don't assume little-endian arch\n-            let lsb = fx.bcx.ins().iconst(types::I64, const_val);\n-            let msb = fx.bcx.ins().iconst(types::I64, 0);\n-            fx.bcx.ins().iconcat(lsb, msb)\n-        } else {\n-            fx.bcx.ins().iconst(clif_ty, const_val)\n+\n+        let val = match ty.sty {\n+            ty::TyKind::Uint(UintTy::U128) | ty::TyKind::Int(IntTy::I128) => {\n+                let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n+                let msb = fx.bcx.ins().iconst(types::I64, (const_val >> 64) as u64 as i64);\n+                fx.bcx.ins().iconcat(lsb, msb)\n+            }\n+            ty::TyKind::Bool => {\n+                assert!(const_val == 0 || const_val == 1, \"Invalid bool 0x{:032X}\", const_val);\n+                fx.bcx.ins().iconst(types::I8, const_val as i64)\n+            }\n+            ty::TyKind::Uint(_) | ty::TyKind::Ref(..) | ty::TyKind::RawPtr(.. )=> {\n+                fx.bcx.ins().iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64)\n+            }\n+            ty::TyKind::Int(_) => {\n+                fx.bcx.ins().iconst(clif_ty, const_val as i128 as i64)\n+            }\n+            _ => panic!(\"CValue::const_val for non bool/integer/pointer type {:?} is not allowed\", ty),\n         };\n+\n         CValue::by_val(val, layout)\n     }\n "}]}