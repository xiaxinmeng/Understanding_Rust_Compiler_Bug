{"sha": "1275adc2004625cb7650ce5a6e99034e50c153cd", "node_id": "C_kwDOAAsO6NoAKDEyNzVhZGMyMDA0NjI1Y2I3NjUwY2U1YTZlOTkwMzRlNTBjMTUzY2Q", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T15:18:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-30T11:54:30Z"}, "message": "Don't leak rustc Layout in hir layer", "tree": {"sha": "6a1015fb14b7e6d938d1ab87ad4231114a0aca78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a1015fb14b7e6d938d1ab87ad4231114a0aca78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1275adc2004625cb7650ce5a6e99034e50c153cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1275adc2004625cb7650ce5a6e99034e50c153cd", "html_url": "https://github.com/rust-lang/rust/commit/1275adc2004625cb7650ce5a6e99034e50c153cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1275adc2004625cb7650ce5a6e99034e50c153cd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3514f2f2ab9a59306f75af9515435190ab3ccdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3514f2f2ab9a59306f75af9515435190ab3ccdbd", "html_url": "https://github.com/rust-lang/rust/commit/3514f2f2ab9a59306f75af9515435190ab3ccdbd"}], "stats": {"total": 98, "additions": 54, "deletions": 44}, "files": [{"sha": "5c0320f7334218774bf085fbc67bdf894fd0b513", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1275adc2004625cb7650ce5a6e99034e50c153cd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1275adc2004625cb7650ce5a6e99034e50c153cd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1275adc2004625cb7650ce5a6e99034e50c153cd", "patch": "@@ -62,7 +62,7 @@ use hir_ty::{\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n-    layout::{LayoutError, RustcEnumVariantIdx, TagEncoding},\n+    layout::{Layout as TyLayout, LayoutError, RustcEnumVariantIdx, TagEncoding},\n     method_resolution::{self, TyFingerprint},\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n@@ -133,11 +133,8 @@ pub use {\n     },\n     hir_ty::{\n         display::{ClosureStyle, HirDisplay, HirDisplayError, HirWrite},\n-        // FIXME: This just needs a HIR wrapper\n-        layout::Layout,\n         mir::MirEvalError,\n-        PointerCast,\n-        Safety,\n+        PointerCast, Safety,\n     },\n };\n \n@@ -964,8 +961,8 @@ impl Field {\n         Type::new(db, var_id, ty)\n     }\n \n-    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n-        db.layout_of_ty(self.ty(db).ty.clone(), self.parent.module(db).krate().into())\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n+        db.layout_of_ty(self.ty(db).ty.clone(), self.parent.module(db).krate().into()).map(Layout)\n     }\n \n     pub fn parent_def(&self, _db: &dyn HirDatabase) -> VariantDef {\n@@ -1138,10 +1135,10 @@ impl Enum {\n         self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }\n \n-    pub fn layout(self, db: &dyn HirDatabase) -> Result<(Arc<Layout>, usize), LayoutError> {\n+    pub fn layout(self, db: &dyn HirDatabase) -> Result<(Layout, usize), LayoutError> {\n         let layout = Adt::from(self).layout(db)?;\n         let tag_size =\n-            if let layout::Variants::Multiple { tag, tag_encoding, .. } = &layout.variants {\n+            if let layout::Variants::Multiple { tag, tag_encoding, .. } = &layout.0.variants {\n                 match tag_encoding {\n                     TagEncoding::Direct => {\n                         let target_data_layout = db\n@@ -1222,11 +1219,11 @@ impl Variant {\n         let parent_enum = self.parent_enum(db);\n         let (parent_layout, tag_size) = parent_enum.layout(db)?;\n         Ok((\n-            match &parent_layout.variants {\n+            match &parent_layout.0.variants {\n                 layout::Variants::Multiple { variants, .. } => {\n-                    variants[RustcEnumVariantIdx(self.id)].clone()\n+                    Layout(Arc::new(variants[RustcEnumVariantIdx(self.id)].clone()))\n                 }\n-                _ => (*parent_layout).clone(),\n+                _ => parent_layout,\n             },\n             tag_size,\n         ))\n@@ -1258,11 +1255,11 @@ impl Adt {\n         })\n     }\n \n-    pub fn layout(self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n+    pub fn layout(self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n         if db.generic_params(self.into()).iter().count() != 0 {\n             return Err(LayoutError::HasPlaceholder);\n         }\n-        db.layout_of_adt(self.into(), Substitution::empty(Interner), self.krate(db).id)\n+        db.layout_of_adt(self.into(), Substitution::empty(Interner), self.krate(db).id).map(Layout)\n     }\n \n     /// Turns this ADT into a type. Any type parameters of the ADT will be\n@@ -4246,8 +4243,8 @@ impl Type {\n             .collect()\n     }\n \n-    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n-        db.layout_of_ty(self.ty.clone(), self.env.krate)\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n+        db.layout_of_ty(self.ty.clone(), self.env.krate).map(Layout)\n     }\n }\n \n@@ -4358,6 +4355,35 @@ fn closure_source(db: &dyn HirDatabase, closure: ClosureId) -> Option<ast::Closu\n     }\n }\n \n+#[derive(Clone, Debug, Eq, PartialEq)]\n+pub struct Layout(Arc<TyLayout>);\n+\n+impl Layout {\n+    pub fn size(&self) -> u64 {\n+        self.0.size.bytes()\n+    }\n+\n+    pub fn align(&self) -> u64 {\n+        self.0.align.abi.bytes()\n+    }\n+\n+    pub fn niches(&self, db: &dyn HirDatabase, krate: Crate) -> Option<u128> {\n+        Some(self.0.largest_niche?.available(&*db.target_data_layout(krate.id)?))\n+    }\n+\n+    pub fn field_offset(&self, idx: usize) -> Option<u64> {\n+        match self.0.fields {\n+            layout::FieldsShape::Primitive => None,\n+            layout::FieldsShape::Union(_) => Some(0),\n+            layout::FieldsShape::Array { stride, count } => {\n+                let i = u64::try_from(idx).ok()?;\n+                (i < count).then_some((stride * i).bytes())\n+            }\n+            layout::FieldsShape::Arbitrary { ref offsets, .. } => Some(offsets.get(idx)?.bytes()),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum BindingMode {\n     Move,"}, {"sha": "96a97ab44c0f437ce4204590922a1c1e87b5fbdf", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1275adc2004625cb7650ce5a6e99034e50c153cd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1275adc2004625cb7650ce5a6e99034e50c153cd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=1275adc2004625cb7650ce5a6e99034e50c153cd", "patch": "@@ -3,8 +3,8 @@ use std::fmt::Display;\n \n use either::Either;\n use hir::{\n-    db::HirDatabase, Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasCrate,\n-    HasSource, HirDisplay, Layout, Semantics, TypeInfo,\n+    Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasCrate, HasSource, HirDisplay,\n+    Layout, Semantics, TypeInfo,\n };\n use ide_db::{\n     base_db::SourceDatabase,\n@@ -401,14 +401,14 @@ pub(super) fn definition(\n                 hir::VariantDef::Struct(s) => Adt::from(s)\n                     .layout(db)\n                     .ok()\n-                    .map(|layout| format!(\", offset = {:#X}\", layout.fields.offset(id).bytes())),\n+                    .and_then(|layout| Some(format!(\", offset = {:#X}\", layout.field_offset(id)?))),\n                 _ => None,\n             };\n             let niches = niches(db, it, &layout).unwrap_or_default();\n             Some(format!(\n                 \"size = {:#X}, align = {:#X}{}{niches}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes(),\n+                layout.size(),\n+                layout.align(),\n                 offset.as_deref().unwrap_or_default()\n             ))\n         }),\n@@ -417,11 +417,7 @@ pub(super) fn definition(\n         Definition::Adt(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.layout(db).ok()?;\n             let niches = niches(db, it, &layout).unwrap_or_default();\n-            Some(format!(\n-                \"size = {:#X}, align = {:#X}{niches}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes()\n-            ))\n+            Some(format!(\"size = {:#X}, align = {:#X}{niches}\", layout.size(), layout.align()))\n         }),\n         Definition::Variant(it) => label_value_and_layout_info_and_docs(\n             db,\n@@ -441,13 +437,13 @@ pub(super) fn definition(\n             },\n             |&it| {\n                 let (layout, tag_size) = it.layout(db).ok()?;\n-                let size = layout.size.bytes_usize() - tag_size;\n+                let size = layout.size() as usize - tag_size;\n                 if size == 0 {\n                     // There is no value in showing layout info for fieldless variants\n                     return None;\n                 }\n                 let niches = niches(db, it, &layout).unwrap_or_default();\n-                Some(format!(\"size = {:#X}{niches}\", layout.size.bytes()))\n+                Some(format!(\"size = {:#X}{niches}\", layout.size()))\n             },\n         ),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n@@ -477,11 +473,7 @@ pub(super) fn definition(\n         Definition::TypeAlias(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.ty(db).layout(db).ok()?;\n             let niches = niches(db, it, &layout).unwrap_or_default();\n-            Some(format!(\n-                \"size = {:#X}, align = {:#X}{niches}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes(),\n-            ))\n+            Some(format!(\"size = {:#X}, align = {:#X}{niches}\", layout.size(), layout.align(),))\n         }),\n         Definition::BuiltinType(it) => {\n             return famous_defs\n@@ -518,10 +510,7 @@ pub(super) fn definition(\n }\n \n fn niches(db: &RootDatabase, it: impl HasCrate, layout: &Layout) -> Option<String> {\n-    Some(format!(\n-        \", niches = {}\",\n-        layout.largest_niche?.available(&*db.target_data_layout(it.krate(db).into())?)\n-    ))\n+    Some(format!(\", niches = {}\", layout.niches(db, it.krate(db).into())?))\n }\n \n fn type_info(\n@@ -571,7 +560,7 @@ fn closure_ty(\n     let layout = if config.memory_layout {\n         original\n             .layout(sema.db)\n-            .map(|x| format!(\" // size = {}, align = {}\", x.size.bytes(), x.align.abi.bytes()))\n+            .map(|x| format!(\" // size = {}, align = {}\", x.size(), x.align()))\n             .unwrap_or_default()\n     } else {\n         String::default()\n@@ -782,12 +771,7 @@ fn local(db: &RootDatabase, it: hir::Local, config: &HoverConfig) -> Option<Mark\n     };\n     if config.memory_layout {\n         if let Ok(layout) = it.ty(db).layout(db) {\n-            format_to!(\n-                desc,\n-                \" // size = {}, align = {}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes()\n-            );\n+            format_to!(desc, \" // size = {}, align = {}\", layout.size(), layout.align());\n         }\n     }\n     markup(None, desc, None)"}]}