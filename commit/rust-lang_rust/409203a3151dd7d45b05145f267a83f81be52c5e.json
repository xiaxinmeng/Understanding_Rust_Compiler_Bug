{"sha": "409203a3151dd7d45b05145f267a83f81be52c5e", "node_id": "C_kwDOAAsO6NoAKDQwOTIwM2EzMTUxZGQ3ZDQ1YjA1MTQ1ZjI2N2E4M2Y4MWJlNTJjNWU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T14:27:07Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T14:32:49Z"}, "message": "Use ObligationCtxt::normalize", "tree": {"sha": "8d648c35d69d60e030774cffb5bd62c76b3109a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d648c35d69d60e030774cffb5bd62c76b3109a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409203a3151dd7d45b05145f267a83f81be52c5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN+LxIACgkQgTGiTgx5\n76/PTg/+NoPNRv2VPBb7D4L/gLRMLoMO3o6GXotvJQ+4B2S4M3m++TKtO2gZGfu+\nQJyCZTjFRDWmcAKLXOXh4mn99wb7qp7OjKdXcNeiORMYIMUxJfrUDBzfxEL0RviC\nQLuNnj8ktcLmybtgDA6srtz/jg4uN4iaq74bgg8n52qYyZOv/4CFMm3JfHQUpcdp\nI2MqqfhgeAmjPBJ7vRTeQvv0GJ/dIzhKtgvtC7ffdjwMxUUgLVuoTQOjXVEIqTav\naVYkNGRPfiNRwygEh5CU5QnSsZ4lARs9S78R3ixdM6fdj2slBHg51qOw5nD/7Ut5\nWQ+7n3vDwDqfBT3Qbnf0rWDkhZrA6B3WApH0CbRqGLbII80vzhXBcwXH8H8ofPqv\n0TK3dtxgfkctRbUAh/CKyLxDG3Da0yt7ifIs/Dqf4BWcN4VmaIbzIzyL/R3XpuxG\nLGehPi16raB7BGGIyAMeJCZhqkbD5CeKCY5vKovnwcaddPQFwzJyGge1HCTGnxNC\nJPO6RauK4xhWse9QJmgQDg0t8C3qTapyBx14Aa2fVlEwR5vGcqACIHhFjpuQnmF2\nzkdFqFqRrwnuL0fL8SPCpHar0xwKB4B6wzAvcxfFF+Pmj1369Mc6Xq/jblDWsrZq\nNtoNTjIAs497Vrn7maObJ1p1ctvnBhi1zZzqWp9vduTcdnP7BV8=\n=x5kT\n-----END PGP SIGNATURE-----", "payload": "tree 8d648c35d69d60e030774cffb5bd62c76b3109a5\nparent 3f2b2eee8f46f2252d2919d7a57bf3068d7df285\nauthor Santiago Pastorino <spastorino@gmail.com> 1669213627 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669213969 -0300\n\nUse ObligationCtxt::normalize\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409203a3151dd7d45b05145f267a83f81be52c5e", "html_url": "https://github.com/rust-lang/rust/commit/409203a3151dd7d45b05145f267a83f81be52c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409203a3151dd7d45b05145f267a83f81be52c5e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "html_url": "https://github.com/rust-lang/rust/commit/3f2b2eee8f46f2252d2919d7a57bf3068d7df285"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "de386e2d135568c0c5cdc3e784f060efdaf34752", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/409203a3151dd7d45b05145f267a83f81be52c5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409203a3151dd7d45b05145f267a83f81be52c5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=409203a3151dd7d45b05145f267a83f81be52c5e", "patch": "@@ -218,14 +218,11 @@ fn compare_predicate_entailment<'tcx>(\n \n     debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n     for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n-        let traits::Normalized { value: predicate, obligations } =\n-            traits::normalize(&mut selcx, param_env, normalize_cause, predicate);\n+        let predicate = ocx.normalize(normalize_cause, param_env, predicate);\n \n-        ocx.register_obligations(obligations);\n         let cause = ObligationCause::new(\n             span,\n             impl_m_hir_id,\n@@ -1555,14 +1552,11 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n-\n     assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n     for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n     {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n-        let traits::Normalized { value: predicate, obligations } =\n-            traits::normalize(&mut selcx, param_env, cause, predicate);\n+        let predicate = ocx.normalize(cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -1573,7 +1567,6 @@ fn compare_type_predicate_entailment<'tcx>(\n                 kind: impl_ty.kind,\n             },\n         );\n-        ocx.register_obligations(obligations);\n         ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n@@ -1756,7 +1749,6 @@ pub fn check_type_bounds<'tcx>(\n     let assumed_wf_types =\n         ocx.assumed_wf_types(param_env, impl_ty_span, impl_ty.def_id.expect_local());\n \n-    let mut selcx = traits::SelectionContext::new(&infcx);\n     let normalize_cause = ObligationCause::new(\n         impl_ty_span,\n         impl_ty_hir_id,\n@@ -1785,16 +1777,11 @@ pub fn check_type_bounds<'tcx>(\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);\n \n     for mut obligation in util::elaborate_obligations(tcx, obligations) {\n-        let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n-            &mut selcx,\n-            normalize_param_env,\n-            normalize_cause.clone(),\n-            obligation.predicate,\n-        );\n+        let normalized_predicate =\n+            ocx.normalize(normalize_cause.clone(), normalize_param_env, obligation.predicate);\n         debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n         obligation.predicate = normalized_predicate;\n \n-        ocx.register_obligations(obligations);\n         ocx.register_obligation(obligation);\n     }\n     // Check that all obligations are satisfied by the implementation's"}]}