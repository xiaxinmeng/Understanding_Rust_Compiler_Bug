{"sha": "9c35f135b9c872e904ee1e838cfa69fc5745c45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzVmMTM1YjljODcyZTkwNGVlMWU4MzhjZmE2OWZjNTc0NWM0NWY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-08T14:23:20Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-08T14:23:29Z"}, "message": "Remove default_cfg_options, pass target instead so it can be used for building cargo workspaces", "tree": {"sha": "6b170a9ccb8c8b4bfaf46e1554126ade289c6ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b170a9ccb8c8b4bfaf46e1554126ade289c6ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c35f135b9c872e904ee1e838cfa69fc5745c45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c35f135b9c872e904ee1e838cfa69fc5745c45f", "html_url": "https://github.com/rust-lang/rust/commit/9c35f135b9c872e904ee1e838cfa69fc5745c45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c35f135b9c872e904ee1e838cfa69fc5745c45f/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3937b225e7918ae6d75849a0959754af43fbf08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3937b225e7918ae6d75849a0959754af43fbf08c", "html_url": "https://github.com/rust-lang/rust/commit/3937b225e7918ae6d75849a0959754af43fbf08c"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "4ef2e6f856f308339931b9e653557c7faf547e26", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9c35f135b9c872e904ee1e838cfa69fc5745c45f", "patch": "@@ -250,7 +250,7 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        default_cfg_options: &CfgOptions,\n+        target: Option<&String>,\n         extern_source_roots: &FxHashMap<PathBuf, ExternSourceId>,\n         proc_macro_client: &ProcMacroClient,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n@@ -269,7 +269,7 @@ impl ProjectWorkspace {\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n                         };\n                         let cfg_options = {\n-                            let mut opts = default_cfg_options.clone();\n+                            let mut opts = CfgOptions::default();\n                             for cfg in &krate.cfg {\n                                 match cfg.find('=') {\n                                     None => opts.insert_atom(cfg.into()),\n@@ -343,14 +343,13 @@ impl ProjectWorkspace {\n                 }\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n+                let mut cfg_options = get_rustc_cfg_options(target);\n+\n                 let sysroot_crates: FxHashMap<_, _> = sysroot\n                     .crates()\n                     .filter_map(|krate| {\n                         let file_id = load(&sysroot[krate].root)?;\n \n-                        // Crates from sysroot have `cfg(test)` disabled\n-                        let cfg_options = default_cfg_options.clone();\n-\n                         let env = Env::default();\n                         let extern_source = ExternSource::default();\n                         let proc_macro = vec![];\n@@ -361,7 +360,7 @@ impl ProjectWorkspace {\n                             file_id,\n                             Edition::Edition2018,\n                             Some(crate_name),\n-                            cfg_options,\n+                            cfg_options.clone(),\n                             env,\n                             extern_source,\n                             proc_macro,\n@@ -392,6 +391,10 @@ impl ProjectWorkspace {\n \n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();\n+\n+                // Add test cfg for non-sysroot crates\n+                cfg_options.insert_atom(\"test\".into());\n+\n                 // Next, create crates for each package, target pair\n                 for pkg in cargo.packages() {\n                     let mut lib_tgt = None;\n@@ -400,12 +403,7 @@ impl ProjectWorkspace {\n                         if let Some(file_id) = load(root) {\n                             let edition = cargo[pkg].edition;\n                             let cfg_options = {\n-                                let mut opts = {\n-                                    let mut opts = default_cfg_options.clone();\n-                                    opts.insert_atom(\"test\".into());\n-                                    opts\n-                                };\n-\n+                                let mut opts = cfg_options.clone();\n                                 for feature in cargo[pkg].features.iter() {\n                                     opts.insert_key_value(\"feature\".into(), feature.into());\n                                 }\n@@ -562,7 +560,7 @@ impl ProjectWorkspace {\n     }\n }\n \n-pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n+fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n     let mut cfg_options = CfgOptions::default();\n \n     // Some nightly-only cfgs, which are required for stdlib\n@@ -602,6 +600,8 @@ pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n         Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n+    cfg_options.insert_atom(\"debug_assertion\".into());\n+\n     cfg_options\n }\n "}, {"sha": "8f2aeac7714ebf8ae28ce5bf3b9e11c63649eebe", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=9c35f135b9c872e904ee1e838cfa69fc5745c45f", "patch": "@@ -8,8 +8,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{\n-    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest,\n-    ProjectWorkspace,\n+    CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest, ProjectWorkspace,\n };\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -148,25 +147,14 @@ pub(crate) fn load(\n         }\n     }\n \n-    // FIXME: cfg options?\n-    let default_cfg_options = {\n-        let mut opts = get_rustc_cfg_options(None);\n-        opts.insert_atom(\"debug_assertion\".into());\n-        opts\n-    };\n-\n-    let crate_graph = ws.to_crate_graph(\n-        &default_cfg_options,\n-        &extern_source_roots,\n-        proc_macro_client,\n-        &mut |path: &Path| {\n+    let crate_graph =\n+        ws.to_crate_graph(None, &extern_source_roots, proc_macro_client, &mut |path: &Path| {\n             // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n             let path = path.canonicalize().ok()?;\n             let vfs_file = vfs.load(&path);\n             log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n             vfs_file.map(vfs_file_to_id)\n-        },\n-    );\n+        });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "0b52030cf5257f3de3dc9135837dcea93b519dc9", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c35f135b9c872e904ee1e838cfa69fc5745c45f/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=9c35f135b9c872e904ee1e838cfa69fc5745c45f", "patch": "@@ -15,7 +15,7 @@ use ra_flycheck::{Flycheck, FlycheckConfig};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n+use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use stdx::format_to;\n@@ -135,13 +135,6 @@ impl GlobalState {\n             }\n         }\n \n-        // FIXME: Read default cfgs from config\n-        let default_cfg_options = {\n-            let mut opts = get_rustc_cfg_options(config.cargo.target.as_ref());\n-            opts.insert_atom(\"debug_assertion\".into());\n-            opts\n-        };\n-\n         let proc_macro_client = match &config.proc_macro_srv {\n             None => ProcMacroClient::dummy(),\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n@@ -167,7 +160,7 @@ impl GlobalState {\n         };\n         for ws in workspaces.iter() {\n             crate_graph.extend(ws.to_crate_graph(\n-                &default_cfg_options,\n+                config.cargo.target.as_ref(),\n                 &extern_source_roots,\n                 &proc_macro_client,\n                 &mut load,"}]}