{"sha": "f1dc206c4f87ba637200dc65d6c125534dcf13eb", "node_id": "C_kwDOAAsO6NoAKGYxZGMyMDZjNGY4N2JhNjM3MjAwZGM2NWQ2YzEyNTUzNGRjZjEzZWI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T11:31:02Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-13T13:19:01Z"}, "message": "Introduce GitRepo type\n\nThis will make it easier to move downloaded repos around", "tree": {"sha": "f3d52c7c1706e75a2dc3b4a9d16b07ae865c1a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d52c7c1706e75a2dc3b4a9d16b07ae865c1a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1dc206c4f87ba637200dc65d6c125534dcf13eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1dc206c4f87ba637200dc65d6c125534dcf13eb", "html_url": "https://github.com/rust-lang/rust/commit/f1dc206c4f87ba637200dc65d6c125534dcf13eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1dc206c4f87ba637200dc65d6c125534dcf13eb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc", "html_url": "https://github.com/rust-lang/rust/commit/e1a7791fcb8f5f0f257f3c95241e723ea6abbdbc"}], "stats": {"total": 132, "additions": 84, "deletions": 48}, "files": [{"sha": "5c68d7ac97283d02f3351ae6872528dc5d3a6003", "filename": "build_system/prepare.rs", "status": "modified", "additions": 84, "deletions": 48, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/f1dc206c4f87ba637200dc65d6c125534dcf13eb/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1dc206c4f87ba637200dc65d6c125534dcf13eb/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=f1dc206c4f87ba637200dc65d6c125534dcf13eb", "patch": "@@ -7,49 +7,45 @@ use std::process::Command;\n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n use super::utils::{cargo_command, copy_dir_recursively, spawn_and_wait};\n \n+pub(crate) const ABI_CAFE: GitRepo = GitRepo::github(\n+    \"Gankra\",\n+    \"abi-cafe\",\n+    \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n+    \"abi-cafe\",\n+);\n+\n+pub(crate) const RAND: GitRepo =\n+    GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n+\n+pub(crate) const REGEX: GitRepo =\n+    GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n+\n+pub(crate) const PORTABLE_SIMD: GitRepo = GitRepo::github(\n+    \"rust-lang\",\n+    \"portable-simd\",\n+    \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n+    \"portable-simd\",\n+);\n+\n+pub(crate) const SIMPLE_RAYTRACER: GitRepo = GitRepo::github(\n+    \"ebobby\",\n+    \"simple-raytracer\",\n+    \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"<none>\",\n+);\n+\n pub(crate) fn prepare() {\n     prepare_sysroot();\n \n+    // FIXME maybe install this only locally?\n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n \n-    clone_repo_shallow_github(\n-        \"abi-cafe\",\n-        \"Gankra\",\n-        \"abi-cafe\",\n-        \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n-    );\n-    apply_patches(\"abi-cafe\", Path::new(\"abi-cafe\"));\n-\n-    clone_repo_shallow_github(\n-        \"rand\",\n-        \"rust-random\",\n-        \"rand\",\n-        \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n-    );\n-    apply_patches(\"rand\", Path::new(\"rand\"));\n-\n-    clone_repo_shallow_github(\n-        \"regex\",\n-        \"rust-lang\",\n-        \"regex\",\n-        \"341f207c1071f7290e3f228c710817c280c8dca1\",\n-    );\n-\n-    clone_repo_shallow_github(\n-        \"portable-simd\",\n-        \"rust-lang\",\n-        \"portable-simd\",\n-        \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n-    );\n-    apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n-\n-    clone_repo_shallow_github(\n-        \"simple-raytracer\",\n-        \"ebobby\",\n-        \"simple-raytracer\",\n-        \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n-    );\n+    ABI_CAFE.fetch();\n+    RAND.fetch();\n+    REGEX.fetch();\n+    PORTABLE_SIMD.fetch();\n+    SIMPLE_RAYTRACER.fetch();\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n     let build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\"simple-raytracer\"));\n@@ -88,38 +84,74 @@ fn prepare_sysroot() {\n     apply_patches(\"sysroot\", &sysroot_src);\n }\n \n+pub(crate) struct GitRepo {\n+    url: GitRepoUrl,\n+    rev: &'static str,\n+    patch_name: &'static str,\n+}\n+\n+enum GitRepoUrl {\n+    Github { user: &'static str, repo: &'static str },\n+}\n+\n+impl GitRepo {\n+    const fn github(\n+        user: &'static str,\n+        repo: &'static str,\n+        rev: &'static str,\n+        patch_name: &'static str,\n+    ) -> GitRepo {\n+        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n+    }\n+\n+    pub(crate) fn source_dir(&self) -> PathBuf {\n+        match self.url {\n+            GitRepoUrl::Github { user: _, repo } => PathBuf::from(format!(\"{}\", repo)),\n+        }\n+    }\n+\n+    fn fetch(&self) {\n+        match self.url {\n+            GitRepoUrl::Github { user, repo } => {\n+                clone_repo_shallow_github(&self.source_dir(), user, repo, self.rev);\n+            }\n+        }\n+        apply_patches(self.patch_name, &self.source_dir());\n+    }\n+}\n+\n #[allow(dead_code)]\n-fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n+fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n-    Command::new(\"git\").arg(\"clone\").arg(repo).arg(target_dir).spawn().unwrap().wait().unwrap();\n+    Command::new(\"git\").arg(\"clone\").arg(repo).arg(&download_dir).spawn().unwrap().wait().unwrap();\n \n     let mut clean_cmd = Command::new(\"git\");\n-    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(target_dir);\n+    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(&download_dir);\n     spawn_and_wait(clean_cmd);\n \n     let mut checkout_cmd = Command::new(\"git\");\n-    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(target_dir);\n+    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(download_dir);\n     spawn_and_wait(checkout_cmd);\n }\n \n-fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev: &str) {\n+fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &str) {\n     if cfg!(windows) {\n         // Older windows doesn't have tar or curl by default. Fall back to using git.\n-        clone_repo(target_dir, &format!(\"https://github.com/{}/{}.git\", username, repo), rev);\n+        clone_repo(download_dir, &format!(\"https://github.com/{}/{}.git\", user, repo), rev);\n         return;\n     }\n \n-    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", username, repo, rev);\n+    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", user, repo, rev);\n     let archive_file = format!(\"{}.tar.gz\", rev);\n     let archive_dir = format!(\"{}-{}\", repo, rev);\n \n-    eprintln!(\"[DOWNLOAD] {}/{} from {}\", username, repo, archive_url);\n+    eprintln!(\"[DOWNLOAD] {}/{} from {}\", user, repo, archive_url);\n \n     // Remove previous results if they exists\n     let _ = std::fs::remove_file(&archive_file);\n     let _ = std::fs::remove_dir_all(&archive_dir);\n-    let _ = std::fs::remove_dir_all(target_dir);\n+    let _ = std::fs::remove_dir_all(&download_dir);\n \n     // Download zip archive\n     let mut download_cmd = Command::new(\"curl\");\n@@ -132,9 +164,9 @@ fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev:\n     spawn_and_wait(unpack_cmd);\n \n     // Rename unpacked dir to the expected name\n-    std::fs::rename(archive_dir, target_dir).unwrap();\n+    std::fs::rename(archive_dir, &download_dir).unwrap();\n \n-    init_git_repo(Path::new(target_dir));\n+    init_git_repo(&download_dir);\n \n     // Cleanup\n     std::fs::remove_file(archive_file).unwrap();\n@@ -175,6 +207,10 @@ fn get_patches(source_dir: &Path, crate_name: &str) -> Vec<PathBuf> {\n }\n \n fn apply_patches(crate_name: &str, target_dir: &Path) {\n+    if crate_name == \"<none>\" {\n+        return;\n+    }\n+\n     for patch in get_patches(&std::env::current_dir().unwrap(), crate_name) {\n         eprintln!(\n             \"[PATCH] {:?} <- {:?}\","}]}