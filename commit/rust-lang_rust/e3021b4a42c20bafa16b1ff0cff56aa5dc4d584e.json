{"sha": "e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "node_id": "C_kwDOAAsO6NoAKGUzMDIxYjRhNDJjMjBiYWZhMTZiMWZmMGNmZjU2YWE1ZGM0ZDU4NGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T04:25:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T04:25:49Z"}, "message": "Rollup merge of #112571 - notriddle:notriddle/never-search, r=GuillaumeGomez\n\nrustdoc-search: search never type with `!`\n\nThis feature extends rustdoc to support the syntax that most users will naturally attempt to use to search for diverging functions. Part of #60485\n\nIt's already possible to do this search with `primitive:never`, but that's not what the Rust language itself uses, so nobody will try it if they aren't told or helped along.", "tree": {"sha": "dbf1b2f2280bf876d7e3dd159b6a13f275de930d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf1b2f2280bf876d7e3dd159b6a13f275de930d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkiUFNCRBK7hj4Ov3rIwAAzhQIAFJ7yB/pAHrC030kIS/J6B7q\n73MxXpvYhKgivFdkpzXGlT7WKUskZqs8yNik0q5zZ9rABOxdkwEWVHG0rV/VmcgB\ne278gmLOd0qI/QrO0EB6lBc+SAA25XuUBCSJchvG28ibeJYHF5AF6GS9VXr1TM3n\nPPnaXo2ex2pHkStaMLasLzTouC/zqlhmJw7kj7rZDMKo9eD0Dztxu84hMj/yPePv\n/bXs3VGmYqkYNYiQT56QEI+yxQD+M48hll7fQp0qzuphethjLSA8QZXlUXf/+hST\naAe+EAwgIQkMlM+W4Z1bSjDwLDuz9G1K++CpRUlT25Wcdu13vrZHKoNUvTAWASQ=\n=sd1s\n-----END PGP SIGNATURE-----\n", "payload": "tree dbf1b2f2280bf876d7e3dd159b6a13f275de930d\nparent 269ea4bd6bd8075f60b0ad3d8d51d87dfa18643f\nparent db277f528407864e24d3d7934d9c23e28d950165\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686716749 +0200\ncommitter GitHub <noreply@github.com> 1686716749 +0200\n\nRollup merge of #112571 - notriddle:notriddle/never-search, r=GuillaumeGomez\n\nrustdoc-search: search never type with `!`\n\nThis feature extends rustdoc to support the syntax that most users will naturally attempt to use to search for diverging functions. Part of #60485\n\nIt's already possible to do this search with `primitive:never`, but that's not what the Rust language itself uses, so nobody will try it if they aren't told or helped along.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "html_url": "https://github.com/rust-lang/rust/commit/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "269ea4bd6bd8075f60b0ad3d8d51d87dfa18643f", "url": "https://api.github.com/repos/rust-lang/rust/commits/269ea4bd6bd8075f60b0ad3d8d51d87dfa18643f", "html_url": "https://github.com/rust-lang/rust/commit/269ea4bd6bd8075f60b0ad3d8d51d87dfa18643f"}, {"sha": "db277f528407864e24d3d7934d9c23e28d950165", "url": "https://api.github.com/repos/rust-lang/rust/commits/db277f528407864e24d3d7934d9c23e28d950165", "html_url": "https://github.com/rust-lang/rust/commit/db277f528407864e24d3d7934d9c23e28d950165"}], "stats": {"total": 224, "additions": 200, "deletions": 24}, "files": [{"sha": "1ccfca8d0d5ffdaed4b8549ffa0c23ea074e0d2b", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -386,6 +386,35 @@ function initSearch(rawSearchIndex) {\n         if (query.literalSearch && parserState.totalElems - parserState.genericsElems > 0) {\n             throw [\"You cannot have more than one element if you use quotes\"];\n         }\n+        const typeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n+        if (name === \"!\") {\n+            if (typeFilter !== null && typeFilter !== \"primitive\") {\n+                throw [\n+                    \"Invalid search type: primitive never type \",\n+                    \"!\",\n+                    \" and \",\n+                    typeFilter,\n+                    \" both specified\",\n+                ];\n+            }\n+            if (generics.length !== 0) {\n+                throw [\n+                    \"Never type \",\n+                    \"!\",\n+                    \" does not accept generic parameters\",\n+                ];\n+            }\n+            return {\n+                name: \"never\",\n+                id: -1,\n+                fullPath: [\"never\"],\n+                pathWithoutLast: [],\n+                pathLast: \"never\",\n+                generics: [],\n+                typeFilter: \"primitive\",\n+            };\n+        }\n         const pathSegments = name.split(\"::\");\n         if (pathSegments.length > 1) {\n             for (let i = 0, len = pathSegments.length; i < len; ++i) {\n@@ -399,6 +428,13 @@ function initSearch(rawSearchIndex) {\n                     }\n                     throw [\"Unexpected \", \"::::\"];\n                 }\n+\n+                if (pathSegment === \"!\") {\n+                    pathSegments[i] = \"never\";\n+                    if (i !== 0) {\n+                        throw [\"Never type \", \"!\", \" is not associated item\"];\n+                    }\n+                }\n             }\n         }\n         // In case we only have something like `<p>`, there is no name.\n@@ -409,8 +445,6 @@ function initSearch(rawSearchIndex) {\n         if (isInGenerics) {\n             parserState.genericsElems += 1;\n         }\n-        const typeFilter = parserState.typeFilter;\n-        parserState.typeFilter = null;\n         return {\n             name: name,\n             id: -1,\n@@ -459,10 +493,11 @@ function initSearch(rawSearchIndex) {\n                         break;\n                     }\n                     if (foundExclamation !== -1) {\n-                        if (start <= (end - 2)) {\n+                        if (foundExclamation !== start &&\n+                            isIdentCharacter(parserState.userQuery[foundExclamation - 1])\n+                        ) {\n                             throw [\"Cannot have associated items in macros\"];\n                         } else {\n-                            // if start == end - 1, we got the never type\n                             // while the never type has no associated macros, we still\n                             // can parse a path like that\n                             foundExclamation = -1;\n@@ -478,7 +513,10 @@ function initSearch(rawSearchIndex) {\n             end = parserState.pos;\n         }\n         // if start == end - 1, we got the never type\n-        if (foundExclamation !== -1 && start <= (end - 2)) {\n+        if (foundExclamation !== -1 &&\n+            foundExclamation !== start &&\n+            isIdentCharacter(parserState.userQuery[foundExclamation - 1])\n+        ) {\n             if (parserState.typeFilter === null) {\n                 parserState.typeFilter = \"macro\";\n             } else if (parserState.typeFilter !== \"macro\") {"}, {"sha": "27d415b5e486d58858e88828f544c3e68fb6c0a6", "filename": "tests/rustdoc-js-std/never.js", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fnever.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fnever.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fnever.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -1,6 +1,14 @@\n-const EXPECTED = {\n-    'query': '!',\n-    'others': [\n-        { 'path': 'std', 'name': 'never' },\n-    ],\n-};\n+const EXPECTED = [\n+    {\n+        'query': '!',\n+        'others': [\n+            { 'path': 'std', 'name': 'never' },\n+        ],\n+    },\n+    {\n+        'query': '!::clone',\n+        'others': [\n+            { 'path': 'std::never', 'name': 'clone' },\n+        ],\n+    },\n+];"}, {"sha": "af7f63f99cbdf8c6c0edecf0ad2ed3123b5c28bb", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -359,6 +359,15 @@ const PARSED = [\n         userQuery: \"mod:a!\",\n         error: 'Invalid search type: macro `!` and `mod` both specified',\n     },\n+    {\n+        query: \"mod:!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"mod:!\",\n+        returned: [],\n+        userQuery: \"mod:!\",\n+        error: 'Invalid search type: primitive never type `!` and `mod` both specified',\n+    },\n     {\n         query: \"a!::a\",\n         elems: [],"}, {"sha": "f65a7ce6692b0cbb6033adb69ec7bd68d816232a", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -8,11 +8,12 @@ const PARSED = [\n             pathLast: \"r\",\n             generics: [\n                 {\n-                    name: \"!\",\n-                    fullPath: [\"!\"],\n+                    name: \"never\",\n+                    fullPath: [\"never\"],\n                     pathWithoutLast: [],\n-                    pathLast: \"!\",\n+                    pathLast: \"never\",\n                     generics: [],\n+                    typeFilter: 15,\n                 },\n             ],\n             typeFilter: -1,\n@@ -26,12 +27,12 @@ const PARSED = [\n     {\n         query: \"!\",\n         elems: [{\n-            name: \"!\",\n-            fullPath: [\"!\"],\n+            name: \"never\",\n+            fullPath: [\"never\"],\n             pathWithoutLast: [],\n-            pathLast: \"!\",\n+            pathLast: \"never\",\n             generics: [],\n-            typeFilter: -1,\n+            typeFilter: 15,\n         }],\n         foundElems: 1,\n         original: \"!\",\n@@ -64,12 +65,21 @@ const PARSED = [\n         userQuery: \"a!::b\",\n         error: \"Cannot have associated items in macros\",\n     },\n+    {\n+        query: \"!<T>\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"!<T>\",\n+        returned: [],\n+        userQuery: \"!<t>\",\n+        error: \"Never type `!` does not accept generic parameters\",\n+    },\n     {\n         query: \"!::b\",\n         elems: [{\n             name: \"!::b\",\n-            fullPath: [\"!\", \"b\"],\n-            pathWithoutLast: [\"!\"],\n+            fullPath: [\"never\", \"b\"],\n+            pathWithoutLast: [\"never\"],\n             pathLast: \"b\",\n             generics: [],\n             typeFilter: -1,\n@@ -80,6 +90,58 @@ const PARSED = [\n         userQuery: \"!::b\",\n         error: null,\n     },\n+    {\n+        query: \"b::!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"b::!\",\n+        returned: [],\n+        userQuery: \"b::!\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"!::!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"!::!\",\n+        returned: [],\n+        userQuery: \"!::!\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"b::!::c\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"b::!::c\",\n+        returned: [],\n+        userQuery: \"b::!::c\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"!::b<T>\",\n+        elems: [{\n+            name: \"!::b\",\n+            fullPath: [\"never\", \"b\"],\n+            pathWithoutLast: [\"never\"],\n+            pathLast: \"b\",\n+            generics: [\n+                {\n+                    name: \"t\",\n+                    fullPath: [\"t\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"t\",\n+                    generics: [],\n+                    typeFilter: -1,\n+                }\n+            ],\n+            typeFilter: -1,\n+        }],\n+        foundElems: 1,\n+        original: \"!::b<T>\",\n+        returned: [],\n+        userQuery: \"!::b<t>\",\n+        error: null,\n+    },\n     {\n         query: \"a!::b!\",\n         elems: [],"}, {"sha": "6ea86609115bf0252a0916615874077d943bc4a9", "filename": "tests/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-returned.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -84,12 +84,12 @@ const PARSED = [\n         foundElems: 1,\n         original: \"-> !\",\n         returned: [{\n-            name: \"!\",\n-            fullPath: [\"!\"],\n+            name: \"never\",\n+            fullPath: [\"never\"],\n             pathWithoutLast: [],\n-            pathLast: \"!\",\n+            pathLast: \"never\",\n             generics: [],\n-            typeFilter: -1,\n+            typeFilter: 15,\n         }],\n         userQuery: \"-> !\",\n         error: null,"}, {"sha": "ed24d693133ba669c9764f3ab201e7e331bbdfed", "filename": "tests/rustdoc-js/never-search.js", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js%2Fnever-search.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js%2Fnever-search.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fnever-search.js?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -0,0 +1,46 @@\n+// exact-check\n+\n+const EXPECTED = [\n+    {\n+        'query': '-> !',\n+        'others': [\n+            { 'path': 'never_search', 'name': 'loops' },\n+        ],\n+    },\n+    {\n+        'query': '-> never',\n+        'others': [\n+            { 'path': 'never_search', 'name': 'loops' },\n+            { 'path': 'never_search', 'name': 'returns' },\n+        ],\n+    },\n+    {\n+        'query': '!',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'impossible' },\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+        ],\n+    },\n+    {\n+        'query': 'never',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'impossible' },\n+            { 'path': 'never_search', 'name': 'uninteresting' },\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+            { 'path': 'never_search', 'name': 'box_uninteresting' },\n+        ],\n+    },\n+    {\n+        'query': 'box<!>',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+        ],\n+    },\n+    {\n+        'query': 'box<never>',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+            { 'path': 'never_search', 'name': 'box_uninteresting' },\n+        ],\n+    },\n+];"}, {"sha": "299b4660dae9ecdcfc7e711ab460d0fabc5afed8", "filename": "tests/rustdoc-js/never-search.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js%2Fnever-search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e/tests%2Frustdoc-js%2Fnever-search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fnever-search.rs?ref=e3021b4a42c20bafa16b1ff0cff56aa5dc4d584e", "patch": "@@ -0,0 +1,13 @@\n+#![feature(never_type)]\n+\n+#[allow(nonstandard_style)]\n+pub struct never;\n+\n+pub fn loops() -> ! { loop {} }\n+pub fn returns() -> never { never }\n+\n+pub fn impossible(x: !) { match x {} }\n+pub fn uninteresting(x: never) { match x { never => {} } }\n+\n+pub fn box_impossible(x: Box<!>) { match *x {} }\n+pub fn box_uninteresting(x: Box<never>) { match *x { never => {} } }"}]}