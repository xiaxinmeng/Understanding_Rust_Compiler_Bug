{"sha": "54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0Yzk4YWIwZGQ1Yjc3N2JhMDkzMzYxY2RjODVlYzM5MzNmOGM4ZWI=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-17T15:33:09Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:35:11Z"}, "message": "rustc_codegen_llvm: fix ownership of Builder.", "tree": {"sha": "deb776ebfd2e1bb25bd752d812f3c8156781232f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb776ebfd2e1bb25bd752d812f3c8156781232f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "html_url": "https://github.com/rust-lang/rust/commit/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265f2fa4de8fee5ad2e2c21904e51622de2aec24", "url": "https://api.github.com/repos/rust-lang/rust/commits/265f2fa4de8fee5ad2e2c21904e51622de2aec24", "html_url": "https://github.com/rust-lang/rust/commit/265f2fa4de8fee5ad2e2c21904e51622de2aec24"}], "stats": {"total": 201, "additions": 105, "deletions": 96}, "files": [{"sha": "b174cd8c7ac764d9832858e0dfaf08853afea631", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "patch": "@@ -27,14 +27,14 @@ use std::ptr;\n // All Builders must have an llfn associated with them\n #[must_use]\n pub struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n-    pub llbuilder: &'ll llvm::Builder,\n+    pub llbuilder: &'ll mut llvm::Builder<'ll>,\n     pub cx: &'a CodegenCx<'ll, 'tcx>,\n }\n \n impl Drop for Builder<'a, 'll, 'tcx> {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMDisposeBuilder(self.llbuilder);\n+            llvm::LLVMDisposeBuilder(&mut *(self.llbuilder as *mut _));\n         }\n     }\n }"}, {"sha": "902a344e6ebdadb9028bd510583827613248ba04", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 103, "deletions": 94, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c98ab0dd5b777ba093361cdc85ec3933f8c8eb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=54c98ab0dd5b777ba093361cdc85ec3933f8c8eb", "patch": "@@ -395,7 +395,8 @@ extern { pub type Type; }\n extern { pub type Value; }\n extern { pub type Metadata; }\n extern { pub type BasicBlock; }\n-extern { pub type Builder; }\n+#[repr(C)]\n+pub struct Builder<'a>(InvariantOpaque<'a>);\n extern { pub type MemoryBuffer; }\n #[repr(C)]\n pub struct PassManager<'a>(InvariantOpaque<'a>);\n@@ -682,31 +683,31 @@ extern \"C\" {\n                            Count: c_uint);\n \n     // Instruction builders\n-    pub fn LLVMCreateBuilderInContext(C: &Context) -> &Builder;\n-    pub fn LLVMPositionBuilderAtEnd(Builder: &'a Builder, Block: &'a BasicBlock);\n-    pub fn LLVMGetInsertBlock(Builder: &Builder) -> &BasicBlock;\n-    pub fn LLVMDisposeBuilder(Builder: &Builder);\n+    pub fn LLVMCreateBuilderInContext(C: &'a Context) -> &'a mut Builder<'a>;\n+    pub fn LLVMPositionBuilderAtEnd(Builder: &Builder<'a>, Block: &'a BasicBlock);\n+    pub fn LLVMGetInsertBlock(Builder: &Builder<'a>) -> &'a BasicBlock;\n+    pub fn LLVMDisposeBuilder(Builder: &'a mut Builder<'a>);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: &'a Builder, L: Option<&'a Value>);\n-    pub fn LLVMGetCurrentDebugLocation(Builder: &Builder) -> &Value;\n-    pub fn LLVMSetInstDebugLocation(Builder: &'a Builder, Inst: &'a Value);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: Option<&'a Value>);\n+    pub fn LLVMGetCurrentDebugLocation(Builder: &Builder<'a>) -> &'a Value;\n+    pub fn LLVMSetInstDebugLocation(Builder: &Builder<'a>, Inst: &'a Value);\n \n     // Terminators\n-    pub fn LLVMBuildRetVoid(B: &Builder) -> &Value;\n-    pub fn LLVMBuildRet(B: &'a Builder, V: &'a Value) -> &'a Value;\n-    pub fn LLVMBuildBr(B: &'a Builder, Dest: &'a BasicBlock) -> &'a Value;\n-    pub fn LLVMBuildCondBr(B: &'a Builder,\n+    pub fn LLVMBuildRetVoid(B: &Builder<'a>) -> &'a Value;\n+    pub fn LLVMBuildRet(B: &Builder<'a>, V: &'a Value) -> &'a Value;\n+    pub fn LLVMBuildBr(B: &Builder<'a>, Dest: &'a BasicBlock) -> &'a Value;\n+    pub fn LLVMBuildCondBr(B: &Builder<'a>,\n                            If: &'a Value,\n                            Then: &'a BasicBlock,\n                            Else: &'a BasicBlock)\n                            -> &'a Value;\n-    pub fn LLVMBuildSwitch(B: &'a Builder,\n+    pub fn LLVMBuildSwitch(B: &Builder<'a>,\n                            V: &'a Value,\n                            Else: &'a BasicBlock,\n                            NumCases: c_uint)\n                            -> &'a Value;\n-    pub fn LLVMRustBuildInvoke(B: &'a Builder,\n+    pub fn LLVMRustBuildInvoke(B: &Builder<'a>,\n                                Fn: &'a Value,\n                                Args: *const &'a Value,\n                                NumArgs: c_uint,\n@@ -715,37 +716,37 @@ extern \"C\" {\n                                Bundle: Option<&OperandBundleDef<'a>>,\n                                Name: *const c_char)\n                                -> &'a Value;\n-    pub fn LLVMBuildLandingPad(B: &'a Builder,\n+    pub fn LLVMBuildLandingPad(B: &Builder<'a>,\n                                Ty: &'a Type,\n                                PersFn: &'a Value,\n                                NumClauses: c_uint,\n                                Name: *const c_char)\n                                -> &'a Value;\n-    pub fn LLVMBuildResume(B: &'a Builder, Exn: &'a Value) -> &'a Value;\n-    pub fn LLVMBuildUnreachable(B: &Builder) -> &Value;\n+    pub fn LLVMBuildResume(B: &Builder<'a>, Exn: &'a Value) -> &'a Value;\n+    pub fn LLVMBuildUnreachable(B: &Builder<'a>) -> &'a Value;\n \n-    pub fn LLVMRustBuildCleanupPad(B: &'a Builder,\n+    pub fn LLVMRustBuildCleanupPad(B: &Builder<'a>,\n                                    ParentPad: Option<&'a Value>,\n                                    ArgCnt: c_uint,\n                                    Args: *const &'a Value,\n                                    Name: *const c_char)\n                                    -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCleanupRet(B: &'a Builder,\n+    pub fn LLVMRustBuildCleanupRet(B: &Builder<'a>,\n                                    CleanupPad: &'a Value,\n                                    UnwindBB: Option<&'a BasicBlock>)\n                                    -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchPad(B: &'a Builder,\n+    pub fn LLVMRustBuildCatchPad(B: &Builder<'a>,\n                                  ParentPad: &'a Value,\n                                  ArgCnt: c_uint,\n                                  Args: *const &'a Value,\n                                  Name: *const c_char)\n                                  -> Option<&'a Value>;\n     pub fn LLVMRustBuildCatchRet(\n-        B: &'a Builder,\n+        B: &Builder<'a>,\n         Pad: &'a Value,\n         BB: &'a BasicBlock,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchSwitch(Builder: &'a Builder,\n+    pub fn LLVMRustBuildCatchSwitch(Builder: &Builder<'a>,\n                                     ParentPad: Option<&'a Value>,\n                                     BB: Option<&'a BasicBlock>,\n                                     NumHandlers: c_uint,\n@@ -764,327 +765,335 @@ extern \"C\" {\n     pub fn LLVMSetCleanup(LandingPad: &Value, Val: Bool);\n \n     // Arithmetic\n-    pub fn LLVMBuildAdd(B: &'a Builder,\n+    pub fn LLVMBuildAdd(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildFAdd(B: &'a Builder,\n+    pub fn LLVMBuildFAdd(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildSub(B: &'a Builder,\n+    pub fn LLVMBuildSub(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildFSub(B: &'a Builder,\n+    pub fn LLVMBuildFSub(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildMul(B: &'a Builder,\n+    pub fn LLVMBuildMul(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildFMul(B: &'a Builder,\n+    pub fn LLVMBuildFMul(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildUDiv(B: &'a Builder,\n+    pub fn LLVMBuildUDiv(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildExactUDiv(B: &'a Builder,\n+    pub fn LLVMBuildExactUDiv(B: &Builder<'a>,\n                               LHS: &'a Value,\n                               RHS: &'a Value,\n                               Name: *const c_char)\n                               -> &'a Value;\n-    pub fn LLVMBuildSDiv(B: &'a Builder,\n+    pub fn LLVMBuildSDiv(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildExactSDiv(B: &'a Builder,\n+    pub fn LLVMBuildExactSDiv(B: &Builder<'a>,\n                               LHS: &'a Value,\n                               RHS: &'a Value,\n                               Name: *const c_char)\n                               -> &'a Value;\n-    pub fn LLVMBuildFDiv(B: &'a Builder,\n+    pub fn LLVMBuildFDiv(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildURem(B: &'a Builder,\n+    pub fn LLVMBuildURem(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildSRem(B: &'a Builder,\n+    pub fn LLVMBuildSRem(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildFRem(B: &'a Builder,\n+    pub fn LLVMBuildFRem(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildShl(B: &'a Builder,\n+    pub fn LLVMBuildShl(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildLShr(B: &'a Builder,\n+    pub fn LLVMBuildLShr(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildAShr(B: &'a Builder,\n+    pub fn LLVMBuildAShr(B: &Builder<'a>,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildAnd(B: &'a Builder,\n+    pub fn LLVMBuildAnd(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildOr(B: &'a Builder,\n+    pub fn LLVMBuildOr(B: &Builder<'a>,\n                        LHS: &'a Value,\n                        RHS: &'a Value,\n                        Name: *const c_char)\n                        -> &'a Value;\n-    pub fn LLVMBuildXor(B: &'a Builder,\n+    pub fn LLVMBuildXor(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildNeg(B: &'a Builder, V: &'a Value, Name: *const c_char) -> &'a Value;\n-    pub fn LLVMBuildFNeg(B: &'a Builder, V: &'a Value, Name: *const c_char) -> &'a Value;\n-    pub fn LLVMBuildNot(B: &'a Builder, V: &'a Value, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMBuildNeg(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMBuildFNeg(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMBuildNot(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n     pub fn LLVMRustSetHasUnsafeAlgebra(Instr: &Value);\n \n     // Memory\n-    pub fn LLVMBuildAlloca(B: &'a Builder, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n-    pub fn LLVMBuildLoad(B: &'a Builder, PointerVal: &'a Value, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMBuildAlloca(B: &Builder<'a>, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMBuildLoad(B: &Builder<'a>, PointerVal: &'a Value, Name: *const c_char) -> &'a Value;\n \n-    pub fn LLVMBuildStore(B: &'a Builder, Val: &'a Value, Ptr: &'a Value) -> &'a Value;\n+    pub fn LLVMBuildStore(B: &Builder<'a>, Val: &'a Value, Ptr: &'a Value) -> &'a Value;\n \n-    pub fn LLVMBuildGEP(B: &'a Builder,\n+    pub fn LLVMBuildGEP(B: &Builder<'a>,\n                         Pointer: &'a Value,\n                         Indices: *const &'a Value,\n                         NumIndices: c_uint,\n                         Name: *const c_char)\n                         -> &'a Value;\n-    pub fn LLVMBuildInBoundsGEP(B: &'a Builder,\n+    pub fn LLVMBuildInBoundsGEP(B: &Builder<'a>,\n                                 Pointer: &'a Value,\n                                 Indices: *const &'a Value,\n                                 NumIndices: c_uint,\n                                 Name: *const c_char)\n                                 -> &'a Value;\n-    pub fn LLVMBuildStructGEP(B: &'a Builder,\n+    pub fn LLVMBuildStructGEP(B: &Builder<'a>,\n                               Pointer: &'a Value,\n                               Idx: c_uint,\n                               Name: *const c_char)\n                               -> &'a Value;\n \n     // Casts\n-    pub fn LLVMBuildTrunc(B: &'a Builder,\n+    pub fn LLVMBuildTrunc(B: &Builder<'a>,\n                           Val: &'a Value,\n                           DestTy: &'a Type,\n                           Name: *const c_char)\n                           -> &'a Value;\n-    pub fn LLVMBuildZExt(B: &'a Builder,\n+    pub fn LLVMBuildZExt(B: &Builder<'a>,\n                          Val: &'a Value,\n                          DestTy: &'a Type,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildSExt(B: &'a Builder,\n+    pub fn LLVMBuildSExt(B: &Builder<'a>,\n                          Val: &'a Value,\n                          DestTy: &'a Type,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildFPToUI(B: &'a Builder,\n+    pub fn LLVMBuildFPToUI(B: &Builder<'a>,\n                            Val: &'a Value,\n                            DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> &'a Value;\n-    pub fn LLVMBuildFPToSI(B: &'a Builder,\n+    pub fn LLVMBuildFPToSI(B: &Builder<'a>,\n                            Val: &'a Value,\n                            DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> &'a Value;\n-    pub fn LLVMBuildUIToFP(B: &'a Builder,\n+    pub fn LLVMBuildUIToFP(B: &Builder<'a>,\n                            Val: &'a Value,\n                            DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> &'a Value;\n-    pub fn LLVMBuildSIToFP(B: &'a Builder,\n+    pub fn LLVMBuildSIToFP(B: &Builder<'a>,\n                            Val: &'a Value,\n                            DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> &'a Value;\n-    pub fn LLVMBuildFPTrunc(B: &'a Builder,\n+    pub fn LLVMBuildFPTrunc(B: &Builder<'a>,\n                             Val: &'a Value,\n                             DestTy: &'a Type,\n                             Name: *const c_char)\n                             -> &'a Value;\n-    pub fn LLVMBuildFPExt(B: &'a Builder,\n+    pub fn LLVMBuildFPExt(B: &Builder<'a>,\n                           Val: &'a Value,\n                           DestTy: &'a Type,\n                           Name: *const c_char)\n                           -> &'a Value;\n-    pub fn LLVMBuildPtrToInt(B: &'a Builder,\n+    pub fn LLVMBuildPtrToInt(B: &Builder<'a>,\n                              Val: &'a Value,\n                              DestTy: &'a Type,\n                              Name: *const c_char)\n                              -> &'a Value;\n-    pub fn LLVMBuildIntToPtr(B: &'a Builder,\n+    pub fn LLVMBuildIntToPtr(B: &Builder<'a>,\n                              Val: &'a Value,\n                              DestTy: &'a Type,\n                              Name: *const c_char)\n                              -> &'a Value;\n-    pub fn LLVMBuildBitCast(B: &'a Builder,\n+    pub fn LLVMBuildBitCast(B: &Builder<'a>,\n                             Val: &'a Value,\n                             DestTy: &'a Type,\n                             Name: *const c_char)\n                             -> &'a Value;\n-    pub fn LLVMBuildPointerCast(B: &'a Builder,\n+    pub fn LLVMBuildPointerCast(B: &Builder<'a>,\n                                 Val: &'a Value,\n                                 DestTy: &'a Type,\n                                 Name: *const c_char)\n                                 -> &'a Value;\n-    pub fn LLVMRustBuildIntCast(B: &'a Builder,\n+    pub fn LLVMRustBuildIntCast(B: &Builder<'a>,\n                                 Val: &'a Value,\n                                 DestTy: &'a Type,\n                                 IsSized: bool)\n                                 -> &'a Value;\n \n     // Comparisons\n-    pub fn LLVMBuildICmp(B: &'a Builder,\n+    pub fn LLVMBuildICmp(B: &Builder<'a>,\n                          Op: c_uint,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n-    pub fn LLVMBuildFCmp(B: &'a Builder,\n+    pub fn LLVMBuildFCmp(B: &Builder<'a>,\n                          Op: c_uint,\n                          LHS: &'a Value,\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n \n     // Miscellaneous instructions\n-    pub fn LLVMBuildPhi(B: &'a Builder, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n-    pub fn LLVMRustBuildCall(B: &'a Builder,\n+    pub fn LLVMBuildPhi(B: &Builder<'a>, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n+    pub fn LLVMRustBuildCall(B: &Builder<'a>,\n                              Fn: &'a Value,\n                              Args: *const &'a Value,\n                              NumArgs: c_uint,\n                              Bundle: Option<&OperandBundleDef<'a>>,\n                              Name: *const c_char)\n                              -> &'a Value;\n-    pub fn LLVMBuildSelect(B: &'a Builder,\n+    pub fn LLVMBuildSelect(B: &Builder<'a>,\n                            If: &'a Value,\n                            Then: &'a Value,\n                            Else: &'a Value,\n                            Name: *const c_char)\n                            -> &'a Value;\n-    pub fn LLVMBuildVAArg(B: &'a Builder,\n+    pub fn LLVMBuildVAArg(B: &Builder<'a>,\n                           list: &'a Value,\n                           Ty: &'a Type,\n                           Name: *const c_char)\n                           -> &'a Value;\n-    pub fn LLVMBuildExtractElement(B: &'a Builder,\n+    pub fn LLVMBuildExtractElement(B: &Builder<'a>,\n                                    VecVal: &'a Value,\n                                    Index: &'a Value,\n                                    Name: *const c_char)\n                                    -> &'a Value;\n-    pub fn LLVMBuildInsertElement(B: &'a Builder,\n+    pub fn LLVMBuildInsertElement(B: &Builder<'a>,\n                                   VecVal: &'a Value,\n                                   EltVal: &'a Value,\n                                   Index: &'a Value,\n                                   Name: *const c_char)\n                                   -> &'a Value;\n-    pub fn LLVMBuildShuffleVector(B: &'a Builder,\n+    pub fn LLVMBuildShuffleVector(B: &Builder<'a>,\n                                   V1: &'a Value,\n                                   V2: &'a Value,\n                                   Mask: &'a Value,\n                                   Name: *const c_char)\n                                   -> &'a Value;\n-    pub fn LLVMBuildExtractValue(B: &'a Builder,\n+    pub fn LLVMBuildExtractValue(B: &Builder<'a>,\n                                  AggVal: &'a Value,\n                                  Index: c_uint,\n                                  Name: *const c_char)\n                                  -> &'a Value;\n-    pub fn LLVMBuildInsertValue(B: &'a Builder,\n+    pub fn LLVMBuildInsertValue(B: &Builder<'a>,\n                                 AggVal: &'a Value,\n                                 EltVal: &'a Value,\n                                 Index: c_uint,\n                                 Name: *const c_char)\n                                 -> &'a Value;\n \n-    pub fn LLVMRustBuildVectorReduceFAdd(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceFAdd(B: &Builder<'a>,\n                                          Acc: &'a Value,\n                                          Src: &'a Value)\n                                          -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceFMul(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceFMul(B: &Builder<'a>,\n                                          Acc: &'a Value,\n                                          Src: &'a Value)\n                                          -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceAdd(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceAdd(B: &Builder<'a>,\n                                         Src: &'a Value)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceMul(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceMul(B: &Builder<'a>,\n                                         Src: &'a Value)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceAnd(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceAnd(B: &Builder<'a>,\n                                         Src: &'a Value)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceOr(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceOr(B: &Builder<'a>,\n                                        Src: &'a Value)\n                                        -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceXor(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceXor(B: &Builder<'a>,\n                                         Src: &'a Value)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceMin(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceMin(B: &Builder<'a>,\n                                         Src: &'a Value,\n                                         IsSigned: bool)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceMax(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceMax(B: &Builder<'a>,\n                                         Src: &'a Value,\n                                         IsSigned: bool)\n                                         -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceFMin(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceFMin(B: &Builder<'a>,\n                                          Src: &'a Value,\n                                          IsNaN: bool)\n                                          -> Option<&'a Value>;\n-    pub fn LLVMRustBuildVectorReduceFMax(B: &'a Builder,\n+    pub fn LLVMRustBuildVectorReduceFMax(B: &Builder<'a>,\n                                          Src: &'a Value,\n                                          IsNaN: bool)\n                                          -> Option<&'a Value>;\n \n-    pub fn LLVMRustBuildMinNum(B: &'a Builder, LHS: &'a Value, LHS: &'a Value) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildMaxNum(B: &'a Builder, LHS: &'a Value, LHS: &'a Value) -> Option<&'a Value>;\n+    pub fn LLVMRustBuildMinNum(\n+        B: &Builder<'a>,\n+        LHS: &'a Value,\n+        LHS: &'a Value,\n+    ) -> Option<&'a Value>;\n+    pub fn LLVMRustBuildMaxNum(\n+        B: &Builder<'a>,\n+        LHS: &'a Value,\n+        LHS: &'a Value,\n+    ) -> Option<&'a Value>;\n \n     // Atomic Operations\n-    pub fn LLVMRustBuildAtomicLoad(B: &'a Builder,\n+    pub fn LLVMRustBuildAtomicLoad(B: &Builder<'a>,\n                                    PointerVal: &'a Value,\n                                    Name: *const c_char,\n                                    Order: AtomicOrdering)\n                                    -> &'a Value;\n \n-    pub fn LLVMRustBuildAtomicStore(B: &'a Builder,\n+    pub fn LLVMRustBuildAtomicStore(B: &Builder<'a>,\n                                     Val: &'a Value,\n                                     Ptr: &'a Value,\n                                     Order: AtomicOrdering)\n                                     -> &'a Value;\n \n-    pub fn LLVMRustBuildAtomicCmpXchg(B: &'a Builder,\n+    pub fn LLVMRustBuildAtomicCmpXchg(B: &Builder<'a>,\n                                       LHS: &'a Value,\n                                       CMP: &'a Value,\n                                       RHS: &'a Value,\n@@ -1093,7 +1102,7 @@ extern \"C\" {\n                                       Weak: Bool)\n                                       -> &'a Value;\n \n-    pub fn LLVMBuildAtomicRMW(B: &'a Builder,\n+    pub fn LLVMBuildAtomicRMW(B: &Builder<'a>,\n                               Op: AtomicRmwBinOp,\n                               LHS: &'a Value,\n                               RHS: &'a Value,\n@@ -1564,7 +1573,7 @@ extern \"C\" {\n                                          -> &'a mut OperandBundleDef<'a>;\n     pub fn LLVMRustFreeOperandBundleDef(Bundle: &'a mut OperandBundleDef<'a>);\n \n-    pub fn LLVMRustPositionBuilderAtStart(B: &'a Builder, BB: &'a BasicBlock);\n+    pub fn LLVMRustPositionBuilderAtStart(B: &Builder<'a>, BB: &'a BasicBlock);\n \n     pub fn LLVMRustSetComdat(M: &'a Module, V: &'a Value, Name: *const c_char);\n     pub fn LLVMRustUnsetComdat(V: &Value);"}]}