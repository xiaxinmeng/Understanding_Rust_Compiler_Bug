{"sha": "79abac863e6ef0077d70063518bd34a20f75eae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YWJhYzg2M2U2ZWYwMDc3ZDcwMDYzNTE4YmQzNGEyMGY3NWVhZTY=", "commit": {"author": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T17:29:36Z"}, "committer": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T18:14:27Z"}, "message": "Improved try_macro_suggestion function", "tree": {"sha": "322854a3d2620ea6210a604289e6ddbab9070e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322854a3d2620ea6210a604289e6ddbab9070e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79abac863e6ef0077d70063518bd34a20f75eae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79abac863e6ef0077d70063518bd34a20f75eae6", "html_url": "https://github.com/rust-lang/rust/commit/79abac863e6ef0077d70063518bd34a20f75eae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79abac863e6ef0077d70063518bd34a20f75eae6/comments", "author": null, "committer": null, "parents": [{"sha": "67128f1e4a880dd8c364f38e919bac19afb08282", "url": "https://api.github.com/repos/rust-lang/rust/commits/67128f1e4a880dd8c364f38e919bac19afb08282", "html_url": "https://github.com/rust-lang/rust/commit/67128f1e4a880dd8c364f38e919bac19afb08282"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "552f3d798ae8aa1a010ff54f490cb957bee4922d", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79abac863e6ef0077d70063518bd34a20f75eae6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79abac863e6ef0077d70063518bd34a20f75eae6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=79abac863e6ef0077d70063518bd34a20f75eae6", "patch": "@@ -1071,17 +1071,15 @@ impl<'a> Parser<'a> {\n             self.bump(); //remove )\n             let mut err = self.struct_span_err(lo.to(hi), \"use of deprecated `try` macro\");\n             err.note(\"in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\");\n+            let prefix = if is_empty { \"\" } else { \"alternatively, \" };\n             if !is_empty {\n                 err.multipart_suggestion(\n                     \"you can use the `?` operator instead\",\n                     vec![(try_span, \"\".to_owned()), (hi, \"?\".to_owned())],\n                     Applicability::MachineApplicable,\n                 );\n-                err.span_suggestion(lo.shrink_to_lo(), \"alternatively, you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", \"r#\".to_string(), Applicability::MachineApplicable);\n-            } else {\n-                //if the try! macro is empty, it isn't possible to suggest something using the `?` operator\n-                err.span_suggestion(lo.shrink_to_lo(), \"you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", \"r#\".to_string(), Applicability::MachineApplicable);\n             }\n+            err.span_suggestion(lo.shrink_to_lo(), &format!(\"{}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", prefix), \"r#\".to_string(), Applicability::MachineApplicable);\n             err.emit();\n             Ok(self.mk_expr_err(lo.to(hi)))\n         } else {"}]}