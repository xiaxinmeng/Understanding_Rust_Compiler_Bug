{"sha": "42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "node_id": "C_kwDOAAsO6NoAKDQyY2M4ZThmNGU1ZmUzODY0YTlhY2E0ZjM0MmVlMmFmZjJiYTY5NmE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-18T21:29:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T03:04:54Z"}, "message": "Simplify a bunch of trait ref obligation creations", "tree": {"sha": "c08caf3e09182f251cfe2a6e167bb9dd58ab1b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08caf3e09182f251cfe2a6e167bb9dd58ab1b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOAMNYACgkQgTGiTgx5\n76+lFQ//V/TnZ3L1SYeMc+snOQvl6RWzYroilHKSMEiACHwCKqvw16oyuikM136v\nEcCOZNHbDjOmsEcMkR+gEUeem8hf6RargX3WPNM2o5btY2dPdDYAUdG9qcF85sCZ\nwL0u7jNWaNsHsQk3xDu4sr8VxjkAVtux0wQd/xpQbfSCCkCjE103HsMEJLmeTiV6\n4a2ey0rP9W5noeoUUk4PNG9lbJnEgN0xsZs2BBTDne2Xl0JTCitdPy2FOU105e2P\nePXSbLAjwWG/iQvo815nPnl+sDerkgZQmWrNUMGVKC0mAKJcgvawKXEJjciGbsiL\nbc9TlswCCGbAWjzbXyexJyiYCQ8Z9kAT2l5kliTMBLcyVxdPzGvixbkeaSw32GIn\nZbXGX2A5c1D+qqQAFFI4Uu29LWzFtubJKy4ctAOewRImLu2Gby8TkoBcHh8mlo9+\nKxwjH+j/ABpsbx42pAXXdm8b9b8SyQ1khXhEw6amurE/N+OKgQeq4xTiP7w/ievR\nahL8X5HHoW0WLuTyXZa1yD01vbkZueaqrwmR/B4TIWSkl5EsJXQUdajBKxuVn5GY\nVFEaue3hJNOS1uyyIUJZmlmJV84xdl+r4q/m26mUqdhjNyjVzu5VfBmUdNU0fXv4\nGuSIUK0p7fptUcXpKCBNE0mvq7G83vx5zVe56KoSBTeU+gfXgkY=\n=dZrF\n-----END PGP SIGNATURE-----", "payload": "tree c08caf3e09182f251cfe2a6e167bb9dd58ab1b41\nparent 08afabddac12adc114a8f963f1a10c47f3b3b2d9\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1668806966 +0000\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669345494 -0300\n\nSimplify a bunch of trait ref obligation creations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "html_url": "https://github.com/rust-lang/rust/commit/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08afabddac12adc114a8f963f1a10c47f3b3b2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/08afabddac12adc114a8f963f1a10c47f3b3b2d9", "html_url": "https://github.com/rust-lang/rust/commit/08afabddac12adc114a8f963f1a10c47f3b3b2d9"}], "stats": {"total": 57, "additions": 17, "deletions": 40}, "files": [{"sha": "d4cee305387dc1207b9ac6cef4a36a0307f10433", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n-use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeVisitable};\n+use rustc_middle::ty::{Binder, TraitRef, TypeVisitable};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -735,11 +735,8 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n \n                     let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n-                    let poly_trait_pred = Binder::dummy(TraitPredicate {\n-                        trait_ref,\n-                        constness: ty::BoundConstness::ConstIfConst,\n-                        polarity: ty::ImplPolarity::Positive,\n-                    });\n+                    let poly_trait_pred =\n+                        Binder::dummy(trait_ref).with_constness(ty::BoundConstness::ConstIfConst);\n                     let obligation =\n                         Obligation::new(tcx, ObligationCause::dummy(), param_env, poly_trait_pred);\n \n@@ -828,9 +825,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                     tcx,\n                                     ObligationCause::dummy_with_span(*fn_span),\n                                     param_env,\n-                                    tcx.mk_predicate(\n-                                        poly_trait_pred.map_bound(ty::PredicateKind::Trait),\n-                                    ),\n+                                    poly_trait_pred,\n                                 );\n \n                                 // improve diagnostics by showing what failed. Our requirements are stricter this time"}, {"sha": "bfc950eff5c061d37debf81a532b608a997df070", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -13,10 +13,9 @@ use rustc_middle::mir;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    suggest_constraining_type_param, Adt, Closure, DefIdTree, FnDef, FnPtr, Param, TraitPredicate,\n-    Ty,\n+    suggest_constraining_type_param, Adt, Closure, DefIdTree, FnDef, FnPtr, Param, Ty,\n };\n-use rustc_middle::ty::{Binder, BoundConstness, ImplPolarity, TraitRef};\n+use rustc_middle::ty::{Binder, TraitRef};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Pos, Span, Symbol};\n@@ -150,11 +149,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                         tcx,\n                         ObligationCause::dummy(),\n                         param_env,\n-                        Binder::dummy(TraitPredicate {\n-                            trait_ref,\n-                            constness: BoundConstness::NotConst,\n-                            polarity: ImplPolarity::Positive,\n-                        }),\n+                        Binder::dummy(trait_ref),\n                     );\n \n                     let infcx = tcx.infer_ctxt().build();"}, {"sha": "8ca3fdf400eb3ead2b7450b62ff2ca490e1e5cf8", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -157,11 +157,8 @@ impl Qualif for NeedsNonConstDrop {\n             cx.tcx,\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n-            ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]),\n-                constness: ty::BoundConstness::ConstIfConst,\n-                polarity: ty::ImplPolarity::Positive,\n-            }),\n+            ty::Binder::dummy(cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]))\n+                .with_constness(ty::BoundConstness::ConstIfConst),\n         );\n \n         let infcx = cx.tcx.infer_ctxt().build();"}, {"sha": "d23c41ed6901494ed64f9da18861944b53c10e6c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -1784,7 +1784,7 @@ fn receiver_is_implemented<'tcx>(\n     let tcx = wfcx.tcx();\n     let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n \n-    let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n+    let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref);\n \n     if wfcx.infcx.predicate_must_hold_modulo_regions(&obligation) {\n         true"}, {"sha": "0d47df1b1bf504b99d94ca8e8ff698a5774aba3b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -2149,11 +2149,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx,\n                             traits::ObligationCause::dummy(),\n                             self.param_env,\n-                            ty::Binder::dummy(ty::TraitPredicate {\n-                                trait_ref,\n-                                constness: ty::BoundConstness::NotConst,\n-                                polarity: ty::ImplPolarity::Positive,\n-                            }),\n+                            ty::Binder::dummy(trait_ref),\n                         );\n                         match SelectionContext::new(&self).select(&obligation) {\n                             Ok(Some(traits::ImplSource::UserDefined(impl_source))) => {"}, {"sha": "9c2de1763b080cf43859f8a9540a10a0c6366e03", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     },\n                 ),\n                 self.param_env,\n-                poly_trait_ref.without_const(),\n+                poly_trait_ref,\n             ),\n             substs,\n         )"}, {"sha": "af3a7ae248665057659e04d4ac10f6b84596c540", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             tcx,\n             cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(trait_ref).without_const(),\n+            ty::Binder::dummy(trait_ref),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "5bed10dec09f8ec9a1208a884927ddda65b10593", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -723,8 +723,7 @@ fn receiver_is_dispatchable<'tcx>(\n     let obligation = {\n         let predicate = ty::Binder::dummy(\n             tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n-        )\n-        .without_const();\n+        );\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };"}, {"sha": "85a125d4c1537f1409a0739fb0ae365b658711e6", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -731,12 +731,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // <ty as Deref>\n         let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n \n-        let obligation = traits::Obligation::new(\n-            tcx,\n-            cause.clone(),\n-            param_env,\n-            ty::Binder::dummy(trait_ref).without_const(),\n-        );\n+        let obligation =\n+            traits::Obligation::new(tcx, cause.clone(), param_env, ty::Binder::dummy(trait_ref));\n         if !self.infcx.predicate_may_hold(&obligation) {\n             return None;\n         }"}, {"sha": "8c4cff66f554b371f2b8fca8f15562485c3348f9", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=42cc8e8f4e5fe3864a9aca4f342ee2aff2ba696a", "patch": "@@ -698,9 +698,8 @@ fn matches_preds<'tcx>(\n             cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n-            cx.tcx.mk_predicate(Binder::bind_with_vars(\n+            cx.tcx.mk_predicate(Binder::dummy(\n                 PredicateKind::Projection(p.with_self_ty(cx.tcx, ty)),\n-                List::empty(),\n             )),\n         )),\n         ExistentialPredicate::AutoTrait(p) => infcx"}]}