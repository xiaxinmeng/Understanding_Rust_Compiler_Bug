{"sha": "3d7fdb509a652f3316888ee6f632740eb00f30e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkN2ZkYjUwOWE2NTJmMzMxNjg4OGVlNmY2MzI3NDBlYjAwZjMwZTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-23T16:07:58Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T19:13:25Z"}, "message": "Remove def_obj\n\nSince obj constructors and types have different def_ids now,\ntheir def can simply be a def_fn and a def_ty.", "tree": {"sha": "b7745bbcef00af1e5838c9df7fee334441e641cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7745bbcef00af1e5838c9df7fee334441e641cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7fdb509a652f3316888ee6f632740eb00f30e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7fdb509a652f3316888ee6f632740eb00f30e4", "html_url": "https://github.com/rust-lang/rust/commit/3d7fdb509a652f3316888ee6f632740eb00f30e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7fdb509a652f3316888ee6f632740eb00f30e4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "html_url": "https://github.com/rust-lang/rust/commit/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7"}], "stats": {"total": 35, "additions": 7, "deletions": 28}, "files": [{"sha": "75145a89a104ae4e3ff1ee9364b7c6e24bdd9944", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -28,7 +28,6 @@ type ty_param = ident;\n \n tag def {\n     def_fn(def_id, purity);\n-    def_obj(def_id);\n     def_obj_field(def_id);\n     def_mod(def_id);\n     def_native_mod(def_id);\n@@ -55,7 +54,6 @@ fn variant_def_ids(&def d) -> tup(def_id, def_id) {\n fn def_id_of_def(def d) -> def_id {\n     alt (d) {\n         case (def_fn(?id,_)) { ret id; }\n-        case (def_obj(?id)) { ret id; }\n         case (def_obj_field(?id)) { ret id; }\n         case (def_mod(?id)) { ret id; }\n         case (def_native_mod(?id)) { ret id; }"}, {"sha": "fce7abe714e87ac4381ba91627a9b2b95e4dc6b2", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -701,7 +701,6 @@ fn kind_has_type_params(u8 kind_ch) -> bool {\n             case ('p') { true }\n             case ('F') { true }\n             case ('y') { true }\n-            case ('o') { true }\n             case ('t') { true }\n             case ('T') { false }\n             case ('m') { false }\n@@ -731,13 +730,9 @@ fn lookup_def(int cnum, vec[u8] data, &ast::def_id did_) -> ast::def {\n             case ('p') { ast::def_fn(did, ast::pure_fn) }\n             case ('F') { ast::def_native_fn(did) }\n             case ('y') { ast::def_ty(did) }\n-            case ('o') { ast::def_obj(did) }\n             case ('T') { ast::def_native_ty(did) }\n-            case (\n-                 // We treat references to tags as references to types.\n-                 't') {\n-                ast::def_ty(did)\n-            }\n+            // We treat references to tags as references to types.\n+            case ('t') { ast::def_ty(did) }\n             case ('m') { ast::def_mod(did) }\n             case ('n') { ast::def_native_mod(did) }\n             case ('v') {\n@@ -843,7 +838,6 @@ fn item_kind_to_str(u8 kind) -> str {\n         case ('p') { ret \"pred\"; }\n         case ('F') { ret \"native fn\"; }\n         case ('y') { ret \"type\"; }\n-        case ('o') { ret \"obj\"; }\n         case ('T') { ret \"native type\"; }\n         case ('t') { ret \"type\"; }\n         case ('m') { ret \"mod\"; }"}, {"sha": "0e90b0dbd15c1af32372eae1b6d6c803965df67c", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -556,7 +556,7 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n         case (item_obj(_, ?tps, ?ctor_id)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, local_def(ctor_id));\n-            encode_kind(ebml_w, 'o' as u8);\n+            encode_kind(ebml_w, 'f' as u8);\n             encode_type_param_count(ebml_w, tps);\n             auto fn_ty = trans::node_id_type(cx, item.id);\n             encode_type(cx, ebml_w, fn_ty);"}, {"sha": "3ecb81267c12a91dcf95e712321174251be9d8e7", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -412,7 +412,7 @@ fn resolve_constr(@env e, node_id id, &@ast::constr c, &scopes sc,\n         lookup_path_strict(*e, sc, c.span, c.node.path.node.idents, ns_value);\n     if (option::is_some(new_def)) {\n         alt (option::get(new_def)) {\n-            case (ast::def_fn(?pred_id, _)) {\n+            case (ast::def_fn(?pred_id, ast::pure_fn)) {\n                 let ty::constr_general[uint] c_ =\n                     rec(path=c.node.path, args=c.node.args, id=pred_id);\n                 let ty::constr_def new_constr = respan(c.span, c_);\n@@ -826,8 +826,9 @@ fn found_def_item(&@ast::item i, namespace ns) -> option::t[def] {\n         }\n         case (ast::item_obj(_, _, ?ctor_id)) {\n             alt (ns) {\n-                case (ns_value) { ret some(ast::def_obj(local_def(ctor_id)));}\n-                case (ns_type) { ret some(ast::def_obj(local_def(i.id))); }\n+                case (ns_value) { ret some(ast::def_fn(local_def(ctor_id),\n+                                                       ast::impure_fn)); }\n+                case (ns_type) { ret some(ast::def_ty(local_def(i.id))); }\n                 case (_) { }\n             }\n         }\n@@ -1123,7 +1124,6 @@ fn index_nmod(&ast::native_mod md) -> mod_index {\n fn ns_for_def(def d) -> namespace {\n     ret alt (d) {\n             case (ast::def_fn(?id, _)) { ns_value }\n-            case (ast::def_obj(?id)) { ns_value }\n             case (ast::def_obj_field(?id)) { ns_value }\n             case (ast::def_mod(?id)) { ns_module }\n             case (ast::def_native_mod(?id)) { ns_module }"}, {"sha": "8373ffa8abb52cc0b0e08800930a732cb8841f07", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -4718,10 +4718,6 @@ fn trans_path(&@block_ctxt cx, &ast::path p, ast::node_id id) -> lval_result {\n             auto tyt = ty::lookup_item_type(cx.fcx.lcx.ccx.tcx, did);\n             ret lval_generic_fn(cx, tyt, did, id);\n         }\n-        case (ast::def_obj(?did)) {\n-            auto tyt = ty::lookup_item_type(cx.fcx.lcx.ccx.tcx, did);\n-            ret lval_generic_fn(cx, tyt, did, id);\n-        }\n         case (ast::def_variant(?tid, ?vid)) {\n             auto v_tyt = ty::lookup_item_type(cx.fcx.lcx.ccx.tcx, vid);\n             alt (ty::struct(cx.fcx.lcx.ccx.tcx, v_tyt._1)) {"}, {"sha": "5ae8ac1d7816225ad43a2140291967240afd2d01", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -2658,7 +2658,6 @@ fn substitute_type_params(&ctxt cx, vec[ty::t] substs, t typ) -> t {\n fn def_has_ty_params(&ast::def def) -> bool {\n     alt (def) {\n         case (ast::def_fn(_,_)) { ret true; }\n-        case (ast::def_obj(_)) { ret true; }\n         case (ast::def_obj_field(_)) { ret false; }\n         case (ast::def_mod(_)) { ret false; }\n         case (ast::def_const(_)) { ret false; }"}, {"sha": "92438b007b52608cfb6c1b091644a760ec1d6a03", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7fdb509a652f3316888ee6f632740eb00f30e4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3d7fdb509a652f3316888ee6f632740eb00f30e4", "patch": "@@ -105,9 +105,6 @@ fn ty_param_count_and_ty_for_def(&@fn_ctxt fcx, &span sp, &ast::def defn) ->\n             auto typ = ty::mk_var(fcx.ccx.tcx, fcx.locals.get(id._1));\n             ret tup(0u, typ);\n         }\n-        case (ast::def_obj(?id)) {\n-            ret ty::lookup_item_type(fcx.ccx.tcx, id);\n-        }\n         case (ast::def_mod(_)) {\n             // Hopefully part of a path.\n             // TODO: return a type that's more poisonous, perhaps?\n@@ -327,11 +324,6 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n                                     path.node.types);\n                 }\n                 case (ast::def_native_ty(?id)) { typ = getter(id)._1; }\n-                case (ast::def_obj(?id)) {\n-                    typ =\n-                        instantiate(tcx, ast_ty.span, getter, id,\n-                                    path.node.types);\n-                }\n                 case (ast::def_ty_arg(?id)) { typ = ty::mk_param(tcx, id); }\n                 case (_) {\n                     tcx.sess.span_fatal(ast_ty.span,"}]}