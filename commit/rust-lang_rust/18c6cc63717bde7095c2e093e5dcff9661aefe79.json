{"sha": "18c6cc63717bde7095c2e093e5dcff9661aefe79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzZjYzYzNzE3YmRlNzA5NWMyZTA5M2U1ZGNmZjk2NjFhZWZlNzk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-23T17:50:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-23T17:50:16Z"}, "message": "More steps to arch-specific target libs (#474)", "tree": {"sha": "0d9ab57a0adae1e1b306248da41ea9f8ad6f035c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9ab57a0adae1e1b306248da41ea9f8ad6f035c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c6cc63717bde7095c2e093e5dcff9661aefe79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c6cc63717bde7095c2e093e5dcff9661aefe79", "html_url": "https://github.com/rust-lang/rust/commit/18c6cc63717bde7095c2e093e5dcff9661aefe79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c6cc63717bde7095c2e093e5dcff9661aefe79/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5310cf4f302fd47b8fde4d0bfe156554b17bd905", "url": "https://api.github.com/repos/rust-lang/rust/commits/5310cf4f302fd47b8fde4d0bfe156554b17bd905", "html_url": "https://github.com/rust-lang/rust/commit/5310cf4f302fd47b8fde4d0bfe156554b17bd905"}], "stats": {"total": 188, "additions": 139, "deletions": 49}, "files": [{"sha": "503a4a6d9f43f66d29728e32f0f7ce0b5d5a20e3", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18c6cc63717bde7095c2e093e5dcff9661aefe79/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/18c6cc63717bde7095c2e093e5dcff9661aefe79/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=18c6cc63717bde7095c2e093e5dcff9661aefe79", "patch": "@@ -13,6 +13,7 @@ endif\n \n CFG_INFO := $(info cfg: shell host triple $(CFG_HOST_TRIPLE))\n CFG_INFO := $(info cfg: llvm host triple $(CFG_LLVM_TRIPLE))\n+CFG_INFO := $(info cfg: llvm target triples $(CFG_LLVM_TRIPLES))\n \n ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))"}, {"sha": "881874abd70b3229b8a0e6faaebfc534d9db7dbf", "filename": "configure", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18c6cc63717bde7095c2e093e5dcff9661aefe79/configure", "raw_url": "https://github.com/rust-lang/rust/raw/18c6cc63717bde7095c2e093e5dcff9661aefe79/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=18c6cc63717bde7095c2e093e5dcff9661aefe79", "patch": "@@ -10,6 +10,10 @@ step_msg() {\n     msg\n }\n \n+warn() {\n+    echo \"configure: WARNING: $1\"\n+}\n+\n err() {\n     echo \"configure: error: $1\"\n     exit 1\n@@ -228,7 +232,6 @@ putvar CFG_SRC_DIR\n putvar CFG_BUILD_DIR\n putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n-putvar CFG_HOST_TRIPLE\n putvar CFG_CONFIGURE_ARGS\n \n step_msg \"looking for build programs\"\n@@ -335,6 +338,26 @@ then\n else\n     CFG_C_COMPILER=\"gcc\"\n fi\n+\n+if [ ! -z \"$CFG_LLVM_TRIPLE\" ]\n+then\n+    if [ $CFG_HOST_TRIPLE != $CFG_LLVM_TRIPLE ]\n+    then\n+        warn \"LLVM host-triple $CFG_LLVM_TRIPLE differs from\"\n+        warn \"detected host triple $CFG_HOST_TRIPLE\"\n+        warn \"choosing LLVM host-triple instead\"\n+        msg \"\"\n+        CFG_HOST_TRIPLE=$CFG_LLVM_TRIPLE\n+    fi\n+fi\n+\n+# FIXME: add support for extending the target-triples list\n+CFG_TARGET_TRIPLES=\"${CFG_HOST_TRIPLE}\"\n+\n+putvar CFG_HOST_TRIPLE\n+putvar CFG_TARGET_TRIPLES\n+\n+\n putvar CFG_C_COMPILER\n \n putvar CFG_LLVM_ROOT\n@@ -356,14 +379,31 @@ for i in \\\n     doc \\\n     rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 \\\n     rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n-    rustllvm \\\n-    dl stage{0,1,2,3}{,/lib,/lib/$CFG_LLVM_TRIPLE} \\\n+    rustllvm dl \\\n     test/run-pass test/run-fail test/compile-fail \\\n     test/bench test/perf test/pretty\n do\n     make_dir $i\n done\n \n+for t in $CFG_TARGET_TRIPLES\n+do\n+    for i in 0 1 2 3\n+    do\n+        # old-style \"bin\" dir\n+        make_dir stage$i\n+\n+        # new-style bin dir, not yet used\n+        make_dir stage$i/bin\n+\n+        # old-style non-arch libs\n+        make_dir stage$i/lib\n+\n+        # new-style arch-prefixed libs, not yet used\n+        make_dir stage$i/lib/rustc/$t\n+    done\n+done\n+\n copy ${CFG_SRC_DIR}Makefile.in ./Makefile\n \n copy ${CFG_SRC_DIR}src/rt/libuv/Makefile rt/libuv/Makefile"}, {"sha": "9098c39d17cd171af8f4482620a951b058e3498d", "filename": "mk/stage0.mk", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18c6cc63717bde7095c2e093e5dcff9661aefe79/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/18c6cc63717bde7095c2e093e5dcff9661aefe79/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=18c6cc63717bde7095c2e093e5dcff9661aefe79", "patch": "@@ -17,16 +17,9 @@ stage0/$(CFG_STDLIB): stage0/rustc$(X)\n stage0/$(CFG_RUSTLLVM): stage0/rustc$(X)\n \t$(Q)touch $@\n \n-# Target libs will be made in the process of making rustc above.\n-\n-stage0/lib/glue.o: stage0/rustc$(X)\n-\t$(Q)touch $@\n-\n-stage0/lib/main.o: stage0/rustc$(X)\n-\t$(Q)touch $@\n-\n # Instantiate template (in stageN.mk) for building\n-# stage0/lib/$(CFG_STDLIB) and stage0/lib/libstd.rlib.\n+# target libraries.\n+\n SREQpre = stage0/lib/main.o $(MKFILES)\n-$(eval $(call LIBGEN,pre,0))\n+$(eval $(call TARGET_LIBS,pre,0,$(CFG_HOST_TRIPLE)))\n "}, {"sha": "cd83192129cf270d503a2e3ad5847fd855842cc5", "filename": "mk/stageN.mk", "status": "modified", "additions": 91, "deletions": 35, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/18c6cc63717bde7095c2e093e5dcff9661aefe79/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/18c6cc63717bde7095c2e093e5dcff9661aefe79/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=18c6cc63717bde7095c2e093e5dcff9661aefe79", "patch": "@@ -1,38 +1,15 @@\n-# StageN template: arg 1 is the N we're building *from*, arg 2 is N+1.\n+# STAGE_N template: arg 1 is the N we're building *from*, arg 2 is N+1, arg 3\n+# is the target triple we're building for. You have to invoke this for each\n+# target triple.\n #\n # The easiest way to read this template is to assume we're building stage2\n # using stage1, and mentally gloss $(1) as 1, $(2) as 2.\n #\n-# LIBGEN is pulled out seperately because we need to specially invoke\n+# TARGET_LIBS is pulled out seperately because we need to specially invoke\n # it to build stage0/lib/libstd using stage0/rustc and to use the\n # new rustrt in stage0/lib/.\n \n-define LIBGEN\n-stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                              stage$(2)/rustc$$(X)               \\\n-                              stage$(2)/$$(CFG_RUNTIME)          \\\n-                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                              stage$(2)/lib/glue.o               \\\n-                              $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2))  --lib -o $$@ $$<\n-\n-stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                           stage$(2)/rustc$$(X)               \\\n-                           stage$(2)/$$(CFG_RUNTIME)          \\\n-                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                           stage$(2)/lib/glue.o               \\\n-                           $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n-\n-stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-define STAGEN\n+define STAGE_N\n \n # Host libraries and executables (stage$(2)/rustc and its runtime needs)\n #\n@@ -74,9 +51,14 @@ stage$(2)/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+# Expand out target libraries\n \n-# Target libraries (for binaries generated by stage$(2)/rustc)\n+$(eval $(call TARGET_LIBS,$(1),$(2),$(3)))\n \n+endef\n+\n+\n+define TARGET_LIBS\n stage$(2)/lib/intrinsics.bc: $$(INTRINSICS_BC)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -89,8 +71,6 @@ stage$(2)/lib/glue.o: stage$(2)/rustc$$(X)        \\\n \t@$$(call E, generate: $$@)\n \t$$(STAGE$(2)) -c -o $$@ --glue\n \n-$(eval $(call LIBGEN,$(1),$(2)))\n-\n stage$(2)/lib/main.o: rt/main.o\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -100,10 +80,86 @@ stage$(2)/lib/$$(CFG_LIBRUSTC): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib -o $$@ $$<\n \n+stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                              stage$(2)/rustc$$(X)               \\\n+                              stage$(2)/$$(CFG_RUNTIME)          \\\n+                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                              stage$(2)/lib/glue.o               \\\n+                              $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2))  --lib -o $$@ $$<\n+\n+stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                           stage$(2)/rustc$$(X)               \\\n+                           stage$(2)/$$(CFG_RUNTIME)          \\\n+                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                           stage$(2)/lib/glue.o               \\\n+                           $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n+\n+stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+\n+# New per-target-arch target libraries; when we've transitioned to\n+# using these exclusively, you should delete the non-arch-prefixed\n+# rules above. They're duplicates, redundant.\n+\n+stage$(2)/lib/rustc/$(3)/intrinsics.bc: $$(INTRINSICS_BC)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/lib/rustc/$(3)/glue.o: \\\n+         stage$(2)/rustc$$(X)        \\\n+         stage$(2)/$$(CFG_RUNTIME)   \\\n+         stage$(2)/$$(CFG_RUSTLLVM)  \\\n+         stage$(2)/lib/intrinsics.bc \\\n+         $$(SREQ$(1))\n+\t@$$(call E, generate: $$@)\n+\t$$(STAGE$(2)) -c -o $$@ --glue\n+\n+stage$(2)/lib/rustc/$(3)/main.o: rt/main.o\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/lib/rustc/$(3)/$$(CFG_LIBRUSTC): \\\n+          $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n+          $$(SREQ$(2))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib -o $$@ $$<\n+\n+stage$(2)/lib/rustc/$(3)/$$(CFG_STDLIB): \\\n+        $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+        stage$(2)/rustc$$(X)               \\\n+        stage$(2)/$$(CFG_RUNTIME)          \\\n+        stage$(2)/$$(CFG_RUSTLLVM)         \\\n+        stage$(2)/lib/rustc/$(3)/glue.o     \\\n+        $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2))  --lib -o $$@ $$<\n+\n+stage$(2)/lib/rustc/$(3)/libstd.rlib: \\\n+        $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+        stage$(2)/rustc$$(X)               \\\n+        stage$(2)/$$(CFG_RUNTIME)          \\\n+        stage$(2)/$$(CFG_RUSTLLVM)         \\\n+        stage$(2)/lib/rustc/$(3)/glue.o     \\\n+        $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n+\n+stage$(2)/lib/rustc/$(3)/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n endef\n \n-# Instantiate template for 0->1, 1->2, 2->3 build dirs\n \n-$(eval $(call STAGEN,0,1))\n-$(eval $(call STAGEN,1,2))\n-$(eval $(call STAGEN,2,3))\n+\n+# Instantiate template for 0->1, 1->2, 2->3 build dirs\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call STAGE_N,0,1,$(target)))   \\\n+ $(eval $(call STAGE_N,1,2,$(target)))   \\\n+ $(eval $(call STAGE_N,2,3,$(target))))"}, {"sha": "b1f7fa84f42a22275e1433a134ebcfb3f3b8332c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18c6cc63717bde7095c2e093e5dcff9661aefe79/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6cc63717bde7095c2e093e5dcff9661aefe79/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=18c6cc63717bde7095c2e093e5dcff9661aefe79", "patch": "@@ -372,7 +372,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n         };\n \n     let library_search_paths = [binary_dir + \"/lib\", // FIXME: legacy\n-                                binary_dir + \"/lib/\" + target ];\n+                                binary_dir + \"/lib/rustc/\" + target ];\n     let lsp_vec = getopts::opt_strs(match, \"L\");\n     for lsp: str in lsp_vec { library_search_paths += [lsp]; }\n "}]}