{"sha": "ef3136176609785b77fece21d7cc0aca9208965b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMzEzNjE3NjYwOTc4NWI3N2ZlY2UyMWQ3Y2MwYWNhOTIwODk2NWI=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-04T12:37:28Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-05-13T03:12:43Z"}, "message": "Rename `RealFileName::Named` to `LocalPath`", "tree": {"sha": "dcbb83ca05c75ace30156d76ba1d2339a493080d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbb83ca05c75ace30156d76ba1d2339a493080d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3136176609785b77fece21d7cc0aca9208965b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3136176609785b77fece21d7cc0aca9208965b", "html_url": "https://github.com/rust-lang/rust/commit/ef3136176609785b77fece21d7cc0aca9208965b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3136176609785b77fece21d7cc0aca9208965b/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b5621b0e67fcfc1ee5f912a93559411b345f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b5621b0e67fcfc1ee5f912a93559411b345f7c", "html_url": "https://github.com/rust-lang/rust/commit/e4b5621b0e67fcfc1ee5f912a93559411b345f7c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "5a9a2cbd80c7ec3132e93c054fc7ed1849dd10be", "filename": "src/source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3136176609785b77fece21d7cc0aca9208965b/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3136176609785b77fece21d7cc0aca9208965b/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=ef3136176609785b77fece21d7cc0aca9208965b", "patch": "@@ -70,7 +70,7 @@ where\n         fn from(filename: &FileName) -> rustc_span::FileName {\n             match filename {\n                 FileName::Real(path) => {\n-                    rustc_span::FileName::Real(rustc_span::RealFileName::Named(path.to_owned()))\n+                    rustc_span::FileName::Real(rustc_span::RealFileName::LocalPath(path.to_owned()))\n                 }\n                 FileName::Stdin => rustc_span::FileName::Custom(\"stdin\".to_owned()),\n             }"}, {"sha": "870f0acfe395c527bd0e0a6fee9c833073e766ba", "filename": "src/syntux/session.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef3136176609785b77fece21d7cc0aca9208965b/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3136176609785b77fece21d7cc0aca9208965b/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=ef3136176609785b77fece21d7cc0aca9208965b", "patch": "@@ -65,7 +65,8 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         if let Some(primary_span) = &db.span.primary_span() {\n             let file_name = self.source_map.span_to_filename(*primary_span);\n-            if let rustc_span::FileName::Real(rustc_span::RealFileName::Named(ref path)) = file_name\n+            if let rustc_span::FileName::Real(rustc_span::RealFileName::LocalPath(ref path)) =\n+                file_name\n             {\n                 if self\n                     .ignore_path_set\n@@ -157,7 +158,7 @@ impl ParseSess {\n         self.parse_sess\n             .source_map()\n             .get_source_file(&rustc_span::FileName::Real(\n-                rustc_span::RealFileName::Named(path.to_path_buf()),\n+                rustc_span::RealFileName::LocalPath(path.to_path_buf()),\n             ))\n             .is_some()\n     }\n@@ -347,7 +348,7 @@ mod tests {\n             let source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n@@ -374,7 +375,7 @@ mod tests {\n             let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n@@ -400,7 +401,7 @@ mod tests {\n             let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n@@ -430,15 +431,15 @@ mod tests {\n             let fatal_source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"bar.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"bar.rs\"))),\n                 bar_source,\n             );\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"foo.rs\"))),\n                 foo_source,\n             );\n             source_map.new_source_file(\n-                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"fatal.rs\"))),\n+                SourceMapFileName::Real(RealFileName::LocalPath(PathBuf::from(\"fatal.rs\"))),\n                 fatal_source,\n             );\n             let mut emitter = build_emitter("}]}