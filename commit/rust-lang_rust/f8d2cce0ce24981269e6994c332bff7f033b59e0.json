{"sha": "f8d2cce0ce24981269e6994c332bff7f033b59e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDJjY2UwY2UyNDk4MTI2OWU2OTk0YzMzMmJmZjdmMDMzYjU5ZTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T10:39:13Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T13:28:40Z"}, "message": "Blame user type in pat type error.", "tree": {"sha": "30b8e18d3ec7d8562c55ad66d8e17e9aec2e8ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b8e18d3ec7d8562c55ad66d8e17e9aec2e8ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d2cce0ce24981269e6994c332bff7f033b59e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2cce0ce24981269e6994c332bff7f033b59e0", "html_url": "https://github.com/rust-lang/rust/commit/f8d2cce0ce24981269e6994c332bff7f033b59e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2cce0ce24981269e6994c332bff7f033b59e0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c6a19c0d9ad11620a6f617c1b851e98dad5cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c6a19c0d9ad11620a6f617c1b851e98dad5cb2", "html_url": "https://github.com/rust-lang/rust/commit/f2c6a19c0d9ad11620a6f617c1b851e98dad5cb2"}], "stats": {"total": 158, "additions": 138, "deletions": 20}, "files": [{"sha": "7254bb52d7039f6c866d84554e975987a6c908fa", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -581,8 +581,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         exp_found: Option<ty::error::ExpectedFound<Ty<'tcx>>>,\n     ) {\n         match cause.code {\n-            ObligationCauseCode::Pattern { span, ty } => {\n-                let ty = self.resolve_vars_if_possible(&ty);\n+            ObligationCauseCode::Pattern { origin_expr: true, span: Some(span), root_ty } => {\n+                let ty = self.resolve_vars_if_possible(&root_ty);\n                 if ty.is_suggestable() {\n                     // don't show type `_`\n                     err.span_label(span, format!(\"this expression has type `{}`\", ty));\n@@ -600,6 +600,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n+            ObligationCauseCode::Pattern { origin_expr: false, span: Some(span), .. } => {\n+                err.span_label(span, \"expected due to this\");\n+            }\n             ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 source,\n                 ref prior_arms,"}, {"sha": "f726a52946ed81effee12be5e8676c91d5d9544b", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -251,8 +251,12 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Type error arising from type checking a pattern against an expected type.\n     Pattern {\n-        span: Span,\n-        ty: Ty<'tcx>,\n+        /// The span of the scrutinee or type expression which caused the `root_ty` type.\n+        span: Option<Span>,\n+        /// The root expected type induced by a scrutinee or type expression.\n+        root_ty: Ty<'tcx>,\n+        /// Whether the `Span` came from an expression or a type expression.\n+        origin_expr: bool,\n     },\n \n     /// Constants in patterns must have `Structural` type."}, {"sha": "7b14ada8469a909d6309cf3b703565b2d001eb50", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -521,7 +521,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                     discrim_hir_id,\n                 })\n             }),\n-            super::Pattern { span, ty } => tcx.lift(&ty).map(|ty| super::Pattern { span, ty }),\n+            super::Pattern { span, root_ty, origin_expr } => {\n+                tcx.lift(&root_ty).map(|root_ty| super::Pattern { span, root_ty, origin_expr })\n+            }\n             super::IfExpression(box super::IfExpressionCause { then, outer, semicolon }) => {\n                 Some(super::IfExpression(box super::IfExpressionCause { then, outer, semicolon }))\n             }"}, {"sha": "e4cf54f629c599b526bd8978abab0fbf794e004d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .map(|arm| {\n                 let mut all_pats_diverge = Diverges::WarnedAlways;\n                 self.diverges.set(Diverges::Maybe);\n-                self.check_pat_top(&arm.pat, discrim_ty, Some(discrim.span));\n+                self.check_pat_top(&arm.pat, discrim_ty, Some(discrim.span), true);\n                 all_pats_diverge &= self.diverges.get();\n \n                 // As discussed with @eddyb, this is for disabling unreachable_code"}, {"sha": "2a1297966a94e4f5d3fe58dfd744f81780b74c78", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -1293,9 +1293,11 @@ fn check_fn<'a, 'tcx>(\n     };\n \n     // Add formal parameters.\n-    for (param_ty, param) in fn_sig.inputs().iter().copied().chain(maybe_va_list).zip(body.params) {\n+    let inputs_hir = hir.fn_decl_by_hir_id(fn_id).map(|decl| &decl.inputs);\n+    let inputs_fn = fn_sig.inputs().iter().copied();\n+    for (idx, (param_ty, param)) in inputs_fn.chain(maybe_va_list).zip(body.params).enumerate() {\n         // Check the pattern.\n-        fcx.check_pat_top(&param.pat, param_ty, None);\n+        fcx.check_pat_top(&param.pat, param_ty, try { inputs_hir?.get(idx)?.span }, false);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n@@ -4276,16 +4278,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Type check a `let` statement.\n     pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n+        // Determine and write the type which we'll check the pattern against.\n         let ty = self.local_ty(local.span, local.hir_id).decl_ty;\n         self.write_ty(local.hir_id, ty);\n \n+        // Type check the initializer.\n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n             self.overwrite_local_ty_if_err(local, ty, init_ty);\n         }\n \n-        self.check_pat_top(&local.pat, ty, local.init.map(|init| init.span));\n+        // Does the expected pattern type originate from an expression and what is the span?\n+        let (origin_expr, ty_span) = match (local.ty, local.init) {\n+            (Some(ty), _) => (false, Some(ty.span)), // Bias towards the explicit user type.\n+            (_, Some(init)) => (true, Some(init.span)), // No explicit type; so use the scrutinee.\n+            _ => (false, None), // We have `let $pat;`, so the expected type is unconstrained.\n+        };\n+\n+        // Type check the pattern. Override if necessary to avoid knock-on errors.\n+        self.check_pat_top(&local.pat, ty, ty_span, origin_expr);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n         self.overwrite_local_ty_if_err(local, ty, pat_ty);\n     }\n@@ -4297,7 +4310,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) {\n         if ty.references_error() {\n-            // Override the types everywhere with `types.err` to avoid knock down errors.\n+            // Override the types everywhere with `types.err` to avoid knock on errors.\n             self.write_ty(local.hir_id, ty);\n             self.write_ty(local.pat.hir_id, ty);\n             let local_ty = LocalTy { decl_ty, revealed_ty: ty };"}, {"sha": "759118933960367a89a1159a027a9e331fd9b95c", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -37,9 +37,13 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\";\n struct TopInfo<'tcx> {\n     /// The `expected` type at the top level of type checking a pattern.\n     expected: Ty<'tcx>,\n+    /// Was the origin of the `span` from a scrutinee expression?\n+    ///\n+    /// Otherwise there is no scrutinee and it could be e.g. from the type of a formal parameter.\n+    origin_expr: bool,\n     /// The span giving rise to the `expected` type, if one could be provided.\n     ///\n-    /// This is the span of the scrutinee as in:\n+    /// If `origin_expr` is `true`, then this is the span of the scrutinee as in:\n     ///\n     /// - `match scrutinee { ... }`\n     /// - `let _ = scrutinee;`\n@@ -70,11 +74,8 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n-        let cause = if let Some(span) = ti.span {\n-            self.cause(cause_span, Pattern { span, ty: ti.expected })\n-        } else {\n-            self.misc(cause_span)\n-        };\n+        let code = Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr };\n+        let cause = self.cause(cause_span, code);\n         self.demand_eqtype_with_origin(&cause, expected, actual)\n     }\n \n@@ -92,11 +93,21 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type check the given top level pattern against the `expected` type.\n     ///\n-    /// If a `Some(span)` is provided, then the `span` represents the scrutinee's span.\n+    /// If a `Some(span)` is provided and `origin_expr` holds,\n+    /// then the `span` represents the scrutinee's span.\n     /// The scrutinee is found in e.g. `match scrutinee { ... }` and `let pat = scrutinee;`.\n-    pub fn check_pat_top(&self, pat: &'tcx Pat<'tcx>, expected: Ty<'tcx>, span: Option<Span>) {\n+    ///\n+    /// Otherwise, `Some(span)` represents the span of a type expression\n+    /// which originated the `expected` type.\n+    pub fn check_pat_top(\n+        &self,\n+        pat: &'tcx Pat<'tcx>,\n+        expected: Ty<'tcx>,\n+        span: Option<Span>,\n+        origin_expr: bool,\n+    ) {\n         let def_bm = BindingMode::BindByValue(hir::Mutability::Not);\n-        self.check_pat(pat, expected, def_bm, TopInfo { expected, span });\n+        self.check_pat(pat, expected, def_bm, TopInfo { expected, origin_expr, span });\n     }\n \n     /// Type check the given `pat` against the `expected` type"}, {"sha": "f06fe1e4bf2113ccbd6ec5e23caa3ead106e8136", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -65,6 +65,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n+#![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "7c1638ff94d0f636bf3a3191bcb642c551eaa67e", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -60,7 +60,7 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:13:25\n    |\n LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n-   |                         ^^^^^^^^^                          ------ this expression has type `std::result::Result<&u8, &mut u8>`\n+   |                         ^^^^^^^^^   -------------------- expected due to this\n    |                         |\n    |                         types differ in mutability\n    |"}, {"sha": "54336b3492321f5459ae1fd797c44a563dbc2d13", "filename": "src/test/ui/pattern/pat-type-err-formal-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -0,0 +1,8 @@\n+// Test the `.span_label(..)` to the type when there's a\n+// type error in a pattern due to a the formal parameter.\n+\n+fn main() {}\n+\n+struct Tuple(u8);\n+\n+fn foo(Tuple(_): String) {} //~ ERROR mismatched types"}, {"sha": "2d7eb62faef2bb272697ec7adf116950f06baf93", "filename": "src/test/ui/pattern/pat-type-err-formal-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/pat-type-err-formal-param.rs:8:8\n+   |\n+LL | fn foo(Tuple(_): String) {}\n+   |        ^^^^^^^^  ------ expected due to this\n+   |        |\n+   |        expected struct `std::string::String`, found struct `Tuple`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6e9850b655cb9f67183e68062a65699525443aeb", "filename": "src/test/ui/pattern/pat-type-err-let-stmt.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.rs?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -0,0 +1,16 @@\n+// Test the `.span_label` to the type / scrutinee\n+// when there's a type error in checking a pattern.\n+\n+fn main() {\n+    // We want to point at the `Option<u8>`.\n+    let Ok(0): Option<u8> = 42u8;\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+\n+    // We want to point at the `Option<u8>`.\n+    let Ok(0): Option<u8>;\n+    //~^ ERROR mismatched types\n+\n+    // We want to point at the scrutinee.\n+    let Ok(0) = 42u8; //~ ERROR mismatched types\n+}"}, {"sha": "d75fa3f247c451cc47bc7a81a8303e8edd597be5", "filename": "src/test/ui/pattern/pat-type-err-let-stmt.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2cce0ce24981269e6994c332bff7f033b59e0/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=f8d2cce0ce24981269e6994c332bff7f033b59e0", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+  --> $DIR/pat-type-err-let-stmt.rs:6:29\n+   |\n+LL |     let Ok(0): Option<u8> = 42u8;\n+   |                ----------   ^^^^\n+   |                |            |\n+   |                |            expected enum `std::option::Option`, found `u8`\n+   |                |            help: try using a variant of the expected enum: `Some(42u8)`\n+   |                expected due to this\n+   |\n+   = note: expected enum `std::option::Option<u8>`\n+              found type `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/pat-type-err-let-stmt.rs:6:9\n+   |\n+LL |     let Ok(0): Option<u8> = 42u8;\n+   |         ^^^^^  ---------- expected due to this\n+   |         |\n+   |         expected enum `std::option::Option`, found enum `std::result::Result`\n+   |\n+   = note: expected enum `std::option::Option<u8>`\n+              found enum `std::result::Result<_, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/pat-type-err-let-stmt.rs:11:9\n+   |\n+LL |     let Ok(0): Option<u8>;\n+   |         ^^^^^  ---------- expected due to this\n+   |         |\n+   |         expected enum `std::option::Option`, found enum `std::result::Result`\n+   |\n+   = note: expected enum `std::option::Option<u8>`\n+              found enum `std::result::Result<_, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/pat-type-err-let-stmt.rs:15:9\n+   |\n+LL |     let Ok(0) = 42u8;\n+   |         ^^^^^   ---- this expression has type `u8`\n+   |         |\n+   |         expected `u8`, found enum `std::result::Result`\n+   |\n+   = note: expected type `u8`\n+              found enum `std::result::Result<_, _>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}