{"sha": "d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZDQ4YjRjYTk5MmNjOWRiOGY1NDQzYTY1YzBmZTI4ZjMwMGY3NDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T17:14:00Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T18:03:44Z"}, "message": "Use intra-doc links in alloc::String", "tree": {"sha": "300a6b53bd8aac9b3575e30ff26dd5ccb2af1f09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300a6b53bd8aac9b3575e30ff26dd5ccb2af1f09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "html_url": "https://github.com/rust-lang/rust/commit/d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a594603f50940624e3da3392e1349a53bd64f4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a594603f50940624e3da3392e1349a53bd64f4db", "html_url": "https://github.com/rust-lang/rust/commit/a594603f50940624e3da3392e1349a53bd64f4db"}], "stats": {"total": 153, "additions": 48, "deletions": 105}, "files": [{"sha": "339592728ac24b012451fb6ce5999afcfe458c28", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "patch": "@@ -240,8 +240,6 @@ impl str {\n     /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n     /// replaces them with the replacement string slice.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -280,8 +278,6 @@ impl str {\n     /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n     /// replaces them with the replacement string slice at most `count` times.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -324,8 +320,6 @@ impl str {\n     /// the case, this function returns a [`String`] instead of modifying the\n     /// parameter in-place.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -411,8 +405,6 @@ impl str {\n     /// the case, this function returns a [`String`] instead of modifying the\n     /// parameter in-place.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -459,8 +451,7 @@ impl str {\n \n     /// Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    /// [`Box<str>`]: boxed/struct.Box.html\n+    /// [`Box<str>`]: Box\n     ///\n     /// # Examples\n     ///\n@@ -485,8 +476,6 @@ impl str {\n     ///\n     /// This function will panic if the capacity would overflow.\n     ///\n-    /// [`String`]: string/struct.String.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -525,7 +514,7 @@ impl str {\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n+    /// [`make_ascii_uppercase`]: str::make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n@@ -555,7 +544,7 @@ impl str {\n     /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n+    /// [`make_ascii_lowercase`]: str::make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]"}, {"sha": "f864b763668061eceb5f5cf647f65cbeb1af6e42", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 44, "deletions": 86, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "patch": "@@ -4,8 +4,6 @@\n //! [`ToString`]s, and several error types that may result from working with\n //! [`String`]s.\n //!\n-//! [`ToString`]: trait.ToString.html\n-//!\n //! # Examples\n //!\n //! There are multiple ways to create a new [`String`] from a string literal:\n@@ -20,8 +18,6 @@\n //! You can create a new [`String`] from an existing one by concatenating with\n //! `+`:\n //!\n-//! [`String`]: struct.String.html\n-//!\n //! ```\n //! let s = \"Hello\".to_string();\n //!\n@@ -67,12 +63,12 @@ use crate::vec::Vec;\n /// contents of the string. It has a close relationship with its borrowed\n /// counterpart, the primitive [`str`].\n ///\n-/// [`str`]: ../../std/primitive.str.html\n-///\n /// # Examples\n ///\n /// You can create a `String` from a literal string with [`String::from`]:\n ///\n+/// [`String::from`]: From::from\n+///\n /// ```\n /// let hello = String::from(\"Hello, world!\");\n /// ```\n@@ -87,10 +83,8 @@ use crate::vec::Vec;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n-/// [`String::from`]: #method.from\n-/// [`char`]: ../../std/primitive.char.html\n-/// [`push`]: #method.push\n-/// [`push_str`]: #method.push_str\n+/// [`push`]: String::push\n+/// [`push_str`]: String::push_str\n ///\n /// If you have a vector of UTF-8 bytes, you can create a `String` from it with\n /// the [`from_utf8`] method:\n@@ -105,7 +99,7 @@ use crate::vec::Vec;\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n ///\n-/// [`from_utf8`]: #method.from_utf8\n+/// [`from_utf8`]: String::from_utf8\n ///\n /// # UTF-8\n ///\n@@ -128,8 +122,8 @@ use crate::vec::Vec;\n /// The [`bytes`] and [`chars`] methods return iterators over the first\n /// two, respectively.\n ///\n-/// [`bytes`]: #method.bytes\n-/// [`chars`]: #method.chars\n+/// [`bytes`]: str::bytes\n+/// [`chars`]: str::chars\n ///\n /// # Deref\n ///\n@@ -215,9 +209,9 @@ use crate::vec::Vec;\n /// assert_eq!(String::from(\"Once upon a time...\"), s);\n /// ```\n ///\n-/// [`as_ptr`]: #method.as_ptr\n-/// [`len`]: #method.len\n-/// [`capacity`]: #method.capacity\n+/// [`as_ptr`]: str::as_ptr\n+/// [`len`]: String::len\n+/// [`capacity`]: String::capacity\n ///\n /// If a `String` has enough capacity, adding elements to it will not\n /// re-allocate. For example, consider this program:\n@@ -259,7 +253,7 @@ use crate::vec::Vec;\n /// }\n /// ```\n ///\n-/// [`with_capacity`]: #method.with_capacity\n+/// [`with_capacity`]: String::with_capacity\n ///\n /// We end up with a different output:\n ///\n@@ -274,9 +268,9 @@ use crate::vec::Vec;\n ///\n /// Here, there's no need to allocate more memory inside the loop.\n ///\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`Deref`]: ../../std/ops/trait.Deref.html\n-/// [`as_str()`]: struct.String.html#method.as_str\n+/// [`&str`]: str\n+/// [`Deref`]: core::ops::Deref\n+/// [`as_str()`]: String::as_str\n #[derive(PartialOrd, Eq, Ord)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"string_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -291,20 +285,18 @@ pub struct String {\n /// [`into_bytes`] method will give back the byte vector that was used in the\n /// conversion attempt.\n ///\n-/// [`from_utf8`]: struct.String.html#method.from_utf8\n-/// [`String`]: struct.String.html\n-/// [`into_bytes`]: struct.FromUtf8Error.html#method.into_bytes\n+/// [`from_utf8`]: String::from_utf8\n+/// [`into_bytes`]: FromUtf8Error::into_bytes\n ///\n /// The [`Utf8Error`] type provided by [`std::str`] represents an error that may\n /// occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\n /// an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\n /// through the [`utf8_error`] method.\n ///\n-/// [`Utf8Error`]: ../../std/str/struct.Utf8Error.html\n-/// [`std::str`]: ../../std/str/index.html\n-/// [`u8`]: ../../std/primitive.u8.html\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`utf8_error`]: #method.utf8_error\n+/// [`Utf8Error`]: core::str::Utf8Error\n+/// [`std::str`]: core::str\n+/// [`&str`]: str\n+/// [`utf8_error`]: Self::utf8_error\n ///\n /// # Examples\n ///\n@@ -330,9 +322,7 @@ pub struct FromUtf8Error {\n ///\n /// This type is the error type for the [`from_utf16`] method on [`String`].\n ///\n-/// [`from_utf16`]: struct.String.html#method.from_utf16\n-/// [`String`]: struct.String.html\n-///\n+/// [`from_utf16`]: String::from_utf16\n /// # Examples\n ///\n /// Basic usage:\n@@ -358,7 +348,7 @@ impl String {\n     /// consider the [`with_capacity`] method to prevent excessive\n     /// re-allocation.\n     ///\n-    /// [`with_capacity`]: #method.with_capacity\n+    /// [`with_capacity`]: String::with_capacity\n     ///\n     /// # Examples\n     ///\n@@ -383,12 +373,12 @@ impl String {\n     /// appending a bunch of data to the `String`, reducing the number of\n     /// reallocations it needs to do.\n     ///\n-    /// [`capacity`]: #method.capacity\n+    /// [`capacity`]: String::capacity\n     ///\n     /// If the given capacity is `0`, no allocation will occur, and this method\n     /// is identical to the [`new`] method.\n     ///\n-    /// [`new`]: #method.new\n+    /// [`new`]: String::new\n     ///\n     /// # Examples\n     ///\n@@ -479,15 +469,10 @@ impl String {\n     /// See the docs for [`FromUtf8Error`] for more details on what you can do\n     /// with this error.\n     ///\n-    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n-    /// [`String`]: struct.String.html\n-    /// [`u8`]: ../../std/primitive.u8.html\n-    /// [`Vec<u8>`]: ../../std/vec/struct.Vec.html\n-    /// [`&str`]: ../../std/primitive.str.html\n-    /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n-    /// [`into_bytes`]: struct.String.html#method.into_bytes\n-    /// [`FromUtf8Error`]: struct.FromUtf8Error.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`from_utf8_unchecked`]: String::from_utf8_unchecked\n+    /// [`Vec<u8>`]: crate::vec::Vec\n+    /// [`&str`]: str\n+    /// [`into_bytes`]: String::into_bytes\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n@@ -506,24 +491,23 @@ impl String {\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n-    /// [`u8`]: ../../std/primitive.u8.html\n     /// [byteslice]: ../../std/primitive.slice.html\n-    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n+    /// [U+FFFD]: core::char::REPLACEMENT_CHARACTER\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n     /// of this function, [`from_utf8_unchecked`], which has the same behavior\n     /// but skips the checks.\n     ///\n-    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n+    /// [`from_utf8_unchecked`]: String::from_utf8_unchecked\n     ///\n     /// This function returns a [`Cow<'a, str>`]. If our byte slice is invalid\n     /// UTF-8, then we need to insert the replacement characters, which will\n     /// change the size of the string, and hence, require a `String`. But if\n     /// it's already valid UTF-8, we don't need a new allocation. This return\n     /// type allows us to handle both cases.\n     ///\n-    /// [`Cow<'a, str>`]: ../../std/borrow/enum.Cow.html\n+    /// [`Cow<'a, str>`]: crate::borrow::Cow\n     ///\n     /// # Examples\n     ///\n@@ -583,8 +567,6 @@ impl String {\n     /// Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n     /// if `v` contains any invalid data.\n     ///\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -623,9 +605,9 @@ impl String {\n     /// `from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8\n     /// conversion requires a memory allocation.\n     ///\n-    /// [`from_utf8_lossy`]: #method.from_utf8_lossy\n-    /// [`Cow<'a, str>`]: ../borrow/enum.Cow.html\n-    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n+    /// [`from_utf8_lossy`]: String::from_utf8_lossy\n+    /// [`Cow<'a, str>`]: crate::borrow::Cow\n+    /// [U+FFFD]: core::char::REPLACEMENT_CHARACTER\n     ///\n     /// # Examples\n     ///\n@@ -659,7 +641,7 @@ impl String {\n     /// into a `String` with the [`from_raw_parts`] function, allowing\n     /// the destructor to perform the cleanup.\n     ///\n-    /// [`from_raw_parts`]: #method.from_raw_parts\n+    /// [`from_raw_parts`]: String::from_raw_parts\n     ///\n     /// # Examples\n     ///\n@@ -732,7 +714,7 @@ impl String {\n     ///\n     /// See the safe version, [`from_utf8`], for more details.\n     ///\n-    /// [`from_utf8`]: struct.String.html#method.from_utf8\n+    /// [`from_utf8`]: String::from_utf8\n     ///\n     /// # Safety\n     ///\n@@ -867,8 +849,7 @@ impl String {\n     ///\n     /// Panics if the new capacity overflows [`usize`].\n     ///\n-    /// [`reserve_exact`]: struct.String.html#method.reserve_exact\n-    /// [`usize`]: ../../std/primitive.usize.html\n+    /// [`reserve_exact`]: String::reserve_exact\n     ///\n     /// # Examples\n     ///\n@@ -911,7 +892,7 @@ impl String {\n     /// Consider using the [`reserve`] method unless you absolutely know\n     /// better than the allocator.\n     ///\n-    /// [`reserve`]: #method.reserve\n+    /// [`reserve`]: String::reserve\n     ///\n     /// # Panics\n     ///\n@@ -1076,8 +1057,6 @@ impl String {\n \n     /// Appends the given [`char`] to the end of this `String`.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1104,7 +1083,7 @@ impl String {\n     ///\n     /// The inverse of this method is [`from_utf8`].\n     ///\n-    /// [`from_utf8`]: #method.from_utf8\n+    /// [`from_utf8`]: String::from_utf8\n     ///\n     /// # Examples\n     ///\n@@ -1133,8 +1112,6 @@ impl String {\n     ///\n     /// Panics if `new_len` does not lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1159,8 +1136,6 @@ impl String {\n     ///\n     /// Returns [`None`] if this `String` is empty.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1195,8 +1170,6 @@ impl String {\n     /// Panics if `idx` is larger than or equal to the `String`'s length,\n     /// or if it does not lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1297,8 +1270,6 @@ impl String {\n     /// Panics if `idx` is larger than the `String`'s length, or if it does not\n     /// lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1346,8 +1317,6 @@ impl String {\n     /// Panics if `idx` is larger than the `String`'s length, or if it does not\n     /// lie on a [`char`] boundary.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1507,8 +1476,6 @@ impl String {\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1567,9 +1534,6 @@ impl String {\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`Vec::splice`]: ../../std/vec/struct.Vec.html#method.splice\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1610,9 +1574,6 @@ impl String {\n     ///\n     /// This will drop any excess capacity.\n     ///\n-    /// [`Box`]: ../../std/boxed/struct.Box.html\n-    /// [`str`]: ../../std/primitive.str.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1680,10 +1641,8 @@ impl FromUtf8Error {\n     /// an analogue to `FromUtf8Error`. See its documentation for more details\n     /// on using it.\n     ///\n-    /// [`Utf8Error`]: ../../std/str/struct.Utf8Error.html\n-    /// [`std::str`]: ../../std/str/index.html\n-    /// [`u8`]: ../../std/primitive.u8.html\n-    /// [`&str`]: ../../std/primitive.str.html\n+    /// [`std::str`]: core::str\n+    /// [`&str`]: str\n     ///\n     /// # Examples\n     ///\n@@ -2187,7 +2146,7 @@ impl ops::DerefMut for String {\n ///\n /// This alias exists for backwards compatibility, and may be eventually deprecated.\n ///\n-/// [`Infallible`]: ../../core/convert/enum.Infallible.html\n+/// [`Infallible`]: core::convert::Infallible\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n pub type ParseError = core::convert::Infallible;\n \n@@ -2207,7 +2166,7 @@ impl FromStr for String {\n /// [`Display`] should be implemented instead, and you get the `ToString`\n /// implementation for free.\n ///\n-/// [`Display`]: ../../std/fmt/trait.Display.html\n+/// [`Display`]: fmt::Display\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToString {\n     /// Converts the given value to a `String`.\n@@ -2465,8 +2424,7 @@ impl fmt::Write for String {\n /// This struct is created by the [`drain`] method on [`String`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.String.html#method.drain\n-/// [`String`]: struct.String.html\n+/// [`drain`]: String::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a> {\n     /// Will be used as &'a mut String in the destructor"}, {"sha": "10d3ed50e4bfebc192c0b52ce502d92c45837746", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d48b4ca992cc9db8f5443a65c0fe28f300f748/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=d6d48b4ca992cc9db8f5443a65c0fe28f300f748", "patch": "@@ -121,14 +121,10 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n     // exceptions to get this past `make check` today.\n     // FIXME(#32129)\n     if file.ends_with(\"std/io/struct.IoSlice.html\")\n-        || file.ends_with(\"std/string/struct.String.html\")\n     {\n         return None;\n     }\n-    // FIXME(#32553)\n-    if file.ends_with(\"alloc/string/struct.String.html\") {\n-        return None;\n-    }\n+\n     // FIXME(#32130)\n     if file.ends_with(\"alloc/collections/btree_map/struct.BTreeMap.html\")\n         || file.ends_with(\"alloc/collections/btree_set/struct.BTreeSet.html\")"}]}