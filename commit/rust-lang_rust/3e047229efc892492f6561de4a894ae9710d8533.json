{"sha": "3e047229efc892492f6561de4a894ae9710d8533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMDQ3MjI5ZWZjODkyNDkyZjY1NjFkZTRhODk0YWU5NzEwZDg1MzM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-01-23T19:33:55Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-02-10T19:44:12Z"}, "message": "Add `repr(no_niche)` to `UnsafeCell`. Fix #68303.", "tree": {"sha": "4e55602d76ce78b8850887805a6f3c3cbeae6390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e55602d76ce78b8850887805a6f3c3cbeae6390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e047229efc892492f6561de4a894ae9710d8533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e047229efc892492f6561de4a894ae9710d8533", "html_url": "https://github.com/rust-lang/rust/commit/3e047229efc892492f6561de4a894ae9710d8533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e047229efc892492f6561de4a894ae9710d8533/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e3b4d1d879851610cff152f0996a895da7cae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e3b4d1d879851610cff152f0996a895da7cae1", "html_url": "https://github.com/rust-lang/rust/commit/35e3b4d1d879851610cff152f0996a895da7cae1"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "8b8bda2e6b44fb9c08a9326a5b38da713a5f319c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e047229efc892492f6561de4a894ae9710d8533/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e047229efc892492f6561de4a894ae9710d8533/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3e047229efc892492f6561de4a894ae9710d8533", "patch": "@@ -1475,6 +1475,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n+#[cfg_attr(not(bootstrap), repr(no_niche))] // rust-lang/rust#68303.\n pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }"}, {"sha": "c8865a8f1b397fc3deeed564059ead0f784cf4c8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e047229efc892492f6561de4a894ae9710d8533/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e047229efc892492f6561de4a894ae9710d8533/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3e047229efc892492f6561de4a894ae9710d8533", "patch": "@@ -138,6 +138,7 @@\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n #![feature(assoc_int_consts)]\n+#![cfg_attr(not(bootstrap), feature(no_niche))] // rust-lang/rust#68303\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "4ca3f7a1aad94a50cd1152dc18ce0d72f9aee672", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3e047229efc892492f6561de4a894ae9710d8533/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e047229efc892492f6561de4a894ae9710d8533/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=3e047229efc892492f6561de4a894ae9710d8533", "patch": "@@ -0,0 +1,32 @@\n+// For rust-lang/rust#68303: the contents of `UnsafeCell<T>` cannot\n+// participate in the niche-optimization for enum discriminants. This\n+// test checks that an `Option<UnsafeCell<NonZeroU32>>` has the same\n+// size in memory as an `Option<UnsafeCell<u32>>` (namely, 8 bytes).\n+\n+// run-pass\n+\n+#![feature(no_niche)]\n+\n+use std::cell::UnsafeCell;\n+use std::mem::size_of;\n+use std::num::NonZeroU32 as N32;\n+\n+struct Wrapper<T>(T);\n+\n+#[repr(transparent)]\n+struct Transparent<T>(T);\n+\n+#[repr(no_niche)]\n+struct NoNiche<T>(T);\n+\n+fn main() {\n+    assert_eq!(size_of::<Option<Wrapper<u32>>>(),     8);\n+    assert_eq!(size_of::<Option<Wrapper<N32>>>(),     4);\n+    assert_eq!(size_of::<Option<Transparent<u32>>>(), 8);\n+    assert_eq!(size_of::<Option<Transparent<N32>>>(), 4);\n+    assert_eq!(size_of::<Option<NoNiche<u32>>>(),     8);\n+    assert_eq!(size_of::<Option<NoNiche<N32>>>(),     8);\n+\n+    assert_eq!(size_of::<Option<UnsafeCell<u32>>>(),  8);\n+    assert_eq!(size_of::<Option<UnsafeCell<N32>>>(),  8);\n+}"}]}