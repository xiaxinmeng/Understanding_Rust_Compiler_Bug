{"sha": "411c73c12fa014c568c2ff0b0141042e500910d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMWM3M2MxMmZhMDE0YzU2OGMyZmYwYjAxNDEwNDJlNTAwOTEwZDc=", "commit": {"author": {"name": "Michael Smith", "email": "michael@spinda.net", "date": "2017-08-18T23:50:39Z"}, "committer": {"name": "Michael Smith", "email": "michael@spinda.net", "date": "2017-08-21T21:05:20Z"}, "message": "Add multiline_{closure,match_arm}_forces_block\n\nmultiline_closure_forces_block = false (default):\n    result.and_then(|maybe_value| match maybe_value {\n        None => ...,\n        Some(value) => ...,\n    })\n\nmultiline_closure_forces_block = true:\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None => ...,\n            Some(value) => ...,\n        }\n    })\n\nmultiline_match_arm_forces_block = false (default):\n    match lorem {\n        None => if ipsum {\n            println!(\"Hello World\");\n        },\n        Some(dolor) => ...,\n    }\n\nmultiline_match_arm_forces_block = true:\n    match lorem {\n        None => {\n            if ipsum {\n                println!(\"Hello World\");\n            }\n        }\n        Some(dolor) => ...,\n    }", "tree": {"sha": "65d697984d9fbefc032e599d01801dff8d456634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d697984d9fbefc032e599d01801dff8d456634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/411c73c12fa014c568c2ff0b0141042e500910d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZm0sQAAoJEIZFvfV06PdVm1MQAMINnMCWklr957hBBCr5Kfyd\naji2nvqFO++XPsx6EHKe/U8D0RPUtuaLWfabMPdDDNhA4vzh8bFhhcN+j/NW3XVW\nP/stGyVdkXho09VDW6S4q0qnLBPiMZhHNizNrZASRbAnB+WRqVxYE2N4ae8QDihg\nEdyKCXy1SpMp6dUrCEndU1FL9Oe8BMJ13GSKevsCDL+onZLhe26JKsQV2g2E/FoS\nkC8yqhqkI83BSkVgZe0+u/RU0oR3/U0flwJIVBmWc2GEkPLA28kSXLDZ6ivBQAZZ\n9pGljMlPzUMxZ6Gc4VYwY64/eGqQEIsCMbnhtwTMbDnleAXcFoG0UAjdZtjDL3s+\nLXVkgyK56HrQQpECTIKkfzuRI5Ur7AfO8rMaJKowijU/EhSrj/+SjsQ2Rdb+492E\nsYUGsFDTxR1gCRq7uS8+N/zEZMRFhw0HZ4FyJBzL5+4zcxIvE3gxwkst7CQcVpw7\n7gFjQKPp8pu05LVRMNaHKgb6w8ORnOnaMfQjIFb1xhOBOTOCYF6GbtIl0NDD6POA\njbK27+XIqlPOZ/CQES0j3LRSsLd4QtmK4q8I43PgFuGZ3SybPu9JcMqLAbmpEVYq\nkBfaBLMYhdzBaAZyJuQu+/99IDAYllSwOAzmhmWrTJQccpOgbXe5LSlSskllQfEk\nqfcUOYr76Q8Rgg1Tjqop\n=S9KL\n-----END PGP SIGNATURE-----", "payload": "tree 65d697984d9fbefc032e599d01801dff8d456634\nparent 7e171836c669be2f78e72a1342ce8a4b55761eb0\nauthor Michael Smith <michael@spinda.net> 1503100239 -0700\ncommitter Michael Smith <michael@spinda.net> 1503349520 -0700\n\nAdd multiline_{closure,match_arm}_forces_block\n\nmultiline_closure_forces_block = false (default):\n    result.and_then(|maybe_value| match maybe_value {\n        None => ...,\n        Some(value) => ...,\n    })\n\nmultiline_closure_forces_block = true:\n    result.and_then(|maybe_value| {\n        match maybe_value {\n            None => ...,\n            Some(value) => ...,\n        }\n    })\n\nmultiline_match_arm_forces_block = false (default):\n    match lorem {\n        None => if ipsum {\n            println!(\"Hello World\");\n        },\n        Some(dolor) => ...,\n    }\n\nmultiline_match_arm_forces_block = true:\n    match lorem {\n        None => {\n            if ipsum {\n                println!(\"Hello World\");\n            }\n        }\n        Some(dolor) => ...,\n    }\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/411c73c12fa014c568c2ff0b0141042e500910d7", "html_url": "https://github.com/rust-lang/rust/commit/411c73c12fa014c568c2ff0b0141042e500910d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/411c73c12fa014c568c2ff0b0141042e500910d7/comments", "author": {"login": "spinda", "id": 7958605, "node_id": "MDQ6VXNlcjc5NTg2MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7958605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spinda", "html_url": "https://github.com/spinda", "followers_url": "https://api.github.com/users/spinda/followers", "following_url": "https://api.github.com/users/spinda/following{/other_user}", "gists_url": "https://api.github.com/users/spinda/gists{/gist_id}", "starred_url": "https://api.github.com/users/spinda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spinda/subscriptions", "organizations_url": "https://api.github.com/users/spinda/orgs", "repos_url": "https://api.github.com/users/spinda/repos", "events_url": "https://api.github.com/users/spinda/events{/privacy}", "received_events_url": "https://api.github.com/users/spinda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spinda", "id": 7958605, "node_id": "MDQ6VXNlcjc5NTg2MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7958605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spinda", "html_url": "https://github.com/spinda", "followers_url": "https://api.github.com/users/spinda/followers", "following_url": "https://api.github.com/users/spinda/following{/other_user}", "gists_url": "https://api.github.com/users/spinda/gists{/gist_id}", "starred_url": "https://api.github.com/users/spinda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spinda/subscriptions", "organizations_url": "https://api.github.com/users/spinda/orgs", "repos_url": "https://api.github.com/users/spinda/repos", "events_url": "https://api.github.com/users/spinda/events{/privacy}", "received_events_url": "https://api.github.com/users/spinda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e171836c669be2f78e72a1342ce8a4b55761eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e171836c669be2f78e72a1342ce8a4b55761eb0", "html_url": "https://github.com/rust-lang/rust/commit/7e171836c669be2f78e72a1342ce8a4b55761eb0"}], "stats": {"total": 169, "additions": 167, "deletions": 2}, "files": [{"sha": "13a704240c377afa89c6a2eff0475867592c8ece", "filename": "Configurations.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -1265,6 +1265,64 @@ Maximum width of each line\n \n See also [`error_on_line_overflow`](#error_on_line_overflow).\n \n+## `multiline_closure_forces_block`\n+\n+Force multiline closure bodies to be wrapped in a block\n+\n+- **Default value**: `false`\n+- **Possible values**: `false`, `true`\n+\n+#### `false`:\n+\n+```rust\n+result.and_then(|maybe_value| match maybe_value {\n+    None => ...,\n+    Some(value) => ...,\n+})\n+```\n+\n+#### `true`:\n+\n+```rust\n+result.and_then(|maybe_value| {\n+    match maybe_value {\n+        None => ...,\n+        Some(value) => ...,\n+    }\n+})\n+```\n+\n+## `multiline_match_arm_forces_block`\n+\n+Force multiline match arm bodies to be wrapped in a block\n+\n+- **Default value**: `false`\n+- **Possible values**: `false`, `true`\n+\n+#### `false`:\n+\n+```rust\n+match lorem {\n+    None => if ipsum {\n+        println!(\"Hello World\");\n+    },\n+    Some(dolor) => ...,\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match lorem {\n+    None => {\n+        if ipsum {\n+            println!(\"Hello World\");\n+        }\n+    }\n+    Some(dolor) => ...,\n+}\n+```\n+\n ## `newline_style`\n \n Unix or Windows line endings"}, {"sha": "9659f19377d06227983f8df20608769551656321", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -615,6 +615,10 @@ create_config! {\n         \"Try to put attributes on the same line as fields.\";\n     attributes_on_same_line_as_variant: bool, true,\n         \"Try to put attributes on the same line as variants in enum declarations.\";\n+    multiline_closure_forces_block: bool, false,\n+        \"Force multiline closure bodies to be wrapped in a block\";\n+    multiline_match_arm_forces_block: bool, false,\n+        \"Force multiline match arm bodies to be wrapped in a block\";\n }\n \n #[cfg(test)]"}, {"sha": "a42ab973e0d25ac3a891cb5dae35d35a6bb1b9ff", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -690,6 +690,13 @@ fn rewrite_closure_expr(\n     if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n         rewrite = and_one_line(rewrite);\n     }\n+    rewrite = rewrite.and_then(|rw| {\n+        if context.config.multiline_closure_forces_block() && rw.contains('\\n') {\n+            None\n+        } else {\n+            Some(rw)\n+        }\n+    });\n     rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n@@ -1690,12 +1697,20 @@ fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bo\n             if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>\n         {\n             if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n-                (expr.can_be_overflowed(context, 1), &**expr)\n+                (\n+                    !context.config.multiline_match_arm_forces_block() &&\n+                        expr.can_be_overflowed(context, 1),\n+                    &**expr,\n+                )\n             } else {\n                 (false, &*body)\n             }\n         }\n-        _ => (body.can_be_overflowed(context, 1), &*body),\n+        _ => (\n+            !context.config.multiline_match_arm_forces_block() &&\n+                body.can_be_overflowed(context, 1),\n+            &*body,\n+        ),\n     }\n }\n "}, {"sha": "e885dff5ee6978e15f31701f3a2642b517c9a83c", "filename": "tests/source/configs-multiline_closure_forces_block-false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-false.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_closure_forces_block: false\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => Err(\"oops\"),\n+            Some(value) => Ok(1),\n+        }\n+    });\n+}"}, {"sha": "f267466ac660654e36d5ff415d91084e6dceb997", "filename": "tests/source/configs-multiline_closure_forces_block-true.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_closure_forces_block-true.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-multiline_closure_forces_block: true\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => Err(\"oops\"),\n+        Some(value) => Ok(1),\n+    });\n+}"}, {"sha": "4cbec0c7c1cb5fa4ded30aa5c046c087381f810a", "filename": "tests/source/configs-multiline_match_arm_forces_block-false.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-false.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-multiline_match_arm_forces_block: false\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "602076a4e74bafe665432ddea41efad2f4c906bd", "filename": "tests/source/configs-multiline_match_arm_forces_block-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-multiline_match_arm_forces_block-true.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_match_arm_forces_block: true\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => if ipsum {\n+            println!(\"dolor\");\n+        },\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "7fb3d597da1f90a9534bd63ac9f01b2861431659", "filename": "tests/target/configs-multiline_closure_forces_block-false.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-false.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-multiline_closure_forces_block: false\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => Err(\"oops\"),\n+        Some(value) => Ok(1),\n+    });\n+}"}, {"sha": "01e2de4352779e9d1e843806397119b346cf460e", "filename": "tests/target/configs-multiline_closure_forces_block-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_closure_forces_block-true.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_closure_forces_block: true\n+// Option forces multiline closure bodies to be wrapped in a block\n+\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => Err(\"oops\"),\n+            Some(value) => Ok(1),\n+        }\n+    });\n+}"}, {"sha": "3c4c1470b0f7c58b949b870d0f22c45ad4d179f7", "filename": "tests/target/configs-multiline_match_arm_forces_block-false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-false.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-multiline_match_arm_forces_block: false\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => if ipsum {\n+            println!(\"dolor\");\n+        },\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}, {"sha": "c36d59c315c0abdde3f55af984c3c40500b74ac0", "filename": "tests/target/configs-multiline_match_arm_forces_block-true.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411c73c12fa014c568c2ff0b0141042e500910d7/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-multiline_match_arm_forces_block-true.rs?ref=411c73c12fa014c568c2ff0b0141042e500910d7", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-multiline_match_arm_forces_block: true\n+// Option forces multiline match arm bodies to be wrapped in a block\n+\n+fn main() {\n+    match lorem {\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n+        Lorem::Dolor => println!(\"amet\"),\n+    }\n+}"}]}