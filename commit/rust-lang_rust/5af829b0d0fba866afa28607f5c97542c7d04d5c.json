{"sha": "5af829b0d0fba866afa28607f5c97542c7d04d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjgyOWIwZDBmYmE4NjZhZmEyODYwN2Y1Yzk3NTQyYzdkMDRkNWM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-11T21:30:08Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-11T21:33:01Z"}, "message": "Gen right parameter envirnoment for assoc consts", "tree": {"sha": "e16cedc4b0eeaf6f7e7952240193e36dbe946a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16cedc4b0eeaf6f7e7952240193e36dbe946a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af829b0d0fba866afa28607f5c97542c7d04d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af829b0d0fba866afa28607f5c97542c7d04d5c", "html_url": "https://github.com/rust-lang/rust/commit/5af829b0d0fba866afa28607f5c97542c7d04d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af829b0d0fba866afa28607f5c97542c7d04d5c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd70788e6d0439098ce31d75eda265721e8d3322", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd70788e6d0439098ce31d75eda265721e8d3322", "html_url": "https://github.com/rust-lang/rust/commit/fd70788e6d0439098ce31d75eda265721e8d3322"}], "stats": {"total": 22, "additions": 2, "deletions": 20}, "files": [{"sha": "114e81721ab28df812b170c3ddd1f3b348867252", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5af829b0d0fba866afa28607f5c97542c7d04d5c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af829b0d0fba866afa28607f5c97542c7d04d5c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5af829b0d0fba866afa28607f5c97542c7d04d5c", "patch": "@@ -1260,7 +1260,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n         match tcx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::ImplItemKind::Type(_) => {\n+                    hir::ImplItemKind::Type(_) | hir::ImplItemKind::Const(_, _) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = tcx.map.get_parent(id);\n@@ -1272,15 +1272,6 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             &predicates,\n                                                             tcx.region_maps.item_extent(id))\n                     }\n-                    hir::ImplItemKind::Const(_, _) => {\n-                        let def_id = tcx.map.local_def_id(id);\n-                        let scheme = tcx.lookup_item_type(def_id);\n-                        let predicates = tcx.lookup_predicates(def_id);\n-                        tcx.construct_parameter_environment(impl_item.span,\n-                                                            &scheme.generics,\n-                                                            &predicates,\n-                                                            tcx.region_maps.item_extent(id))\n-                    }\n                     hir::ImplItemKind::Method(_, ref body) => {\n                         let method_def_id = tcx.map.local_def_id(id);\n                         match tcx.impl_or_trait_item(method_def_id) {\n@@ -1303,7 +1294,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeTraitItem(trait_item)) => {\n                 match trait_item.node {\n-                    hir::TypeTraitItem(..) => {\n+                    hir::TypeTraitItem(..) | hir::ConstTraitItem(..) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the trait\n                         let trait_id = tcx.map.get_parent(id);\n@@ -1315,15 +1306,6 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             &predicates,\n                                                             tcx.region_maps.item_extent(id))\n                     }\n-                    hir::ConstTraitItem(..) => {\n-                        let def_id = tcx.map.local_def_id(id);\n-                        let scheme = tcx.lookup_item_type(def_id);\n-                        let predicates = tcx.lookup_predicates(def_id);\n-                        tcx.construct_parameter_environment(trait_item.span,\n-                                                            &scheme.generics,\n-                                                            &predicates,\n-                                                            tcx.region_maps.item_extent(id))\n-                    }\n                     hir::MethodTraitItem(_, ref body) => {\n                         // Use call-site for extent (unless this is a\n                         // trait method with no default; then fallback"}]}