{"sha": "bd441b1eb93475107717ffca59202c11263b5e5e", "node_id": "C_kwDOAAsO6NoAKGJkNDQxYjFlYjkzNDc1MTA3NzE3ZmZjYTU5MjAyYzExMjYzYjVlNWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T23:51:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T11:54:36Z"}, "message": "test for some bad use of vtables", "tree": {"sha": "647523896a0569a9d9622dba40d4a865655af23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647523896a0569a9d9622dba40d4a865655af23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd441b1eb93475107717ffca59202c11263b5e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd441b1eb93475107717ffca59202c11263b5e5e", "html_url": "https://github.com/rust-lang/rust/commit/bd441b1eb93475107717ffca59202c11263b5e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd441b1eb93475107717ffca59202c11263b5e5e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b35412d817dfcb6d4333fb290460044eff742d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b35412d817dfcb6d4333fb290460044eff742d", "html_url": "https://github.com/rust-lang/rust/commit/a6b35412d817dfcb6d4333fb290460044eff742d"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "0e7c3dbcc040fb66137c21358b1f8b3a16ccaf66", "filename": "tests/fail/dyn-call-trait-mismatch.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-call-trait-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-call-trait-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-call-trait-mismatch.rs?ref=bd441b1eb93475107717ffca59202c11263b5e5e", "patch": "@@ -0,0 +1,16 @@\n+trait T1 {\n+    fn method1(self: Box<Self>);\n+}\n+trait T2 {\n+    fn method2(self: Box<Self>);\n+}\n+\n+impl T1 for i32 {\n+    fn method1(self: Box<Self>) {}\n+}\n+\n+fn main() {\n+    let r = Box::new(0) as Box<dyn T1>;\n+    let r2: Box<dyn T2> = unsafe { std::mem::transmute(r) };\n+    r2.method2(); //~ERROR: call on a pointer whose vtable does not match its type\n+}"}, {"sha": "2673a22a3df264ff67e49fe481990b717f423a1c", "filename": "tests/fail/dyn-call-trait-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr?ref=bd441b1eb93475107717ffca59202c11263b5e5e", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `dyn` call on a pointer whose vtable does not match its type\n+  --> $DIR/dyn-call-trait-mismatch.rs:LL:CC\n+   |\n+LL |     r2.method2();\n+   |     ^^^^^^^^^^^^ `dyn` call on a pointer whose vtable does not match its type\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/dyn-call-trait-mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f53e9a03f4bef44814352c5f38ec69fad6b02be8", "filename": "tests/fail/dyn-upcast-trait-mismatch.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-upcast-trait-mismatch.rs?ref=bd441b1eb93475107717ffca59202c11263b5e5e", "patch": "@@ -0,0 +1,58 @@\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+    fn a(&self) -> i32 {\n+        10\n+    }\n+\n+    fn z(&self) -> i32 {\n+        11\n+    }\n+\n+    fn y(&self) -> i32 {\n+        12\n+    }\n+}\n+\n+trait Bar: Foo {\n+    fn b(&self) -> i32 {\n+        20\n+    }\n+\n+    fn w(&self) -> i32 {\n+        21\n+    }\n+}\n+\n+trait Baz: Bar {\n+    fn c(&self) -> i32 {\n+        30\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn a(&self) -> i32 {\n+        100\n+    }\n+}\n+\n+impl Bar for i32 {\n+    fn b(&self) -> i32 {\n+        200\n+    }\n+}\n+\n+impl Baz for i32 {\n+    fn c(&self) -> i32 {\n+        300\n+    }\n+}\n+\n+fn main() {\n+    let baz: &dyn Baz = &1;\n+    // We already fail on the implicit upcast inserted here.\n+    let baz_fake: &dyn Bar = unsafe { std::mem::transmute(baz) };\n+    //~^ERROR: upcast on a pointer whose vtable does not match its type\n+    let _err = baz_fake as &dyn Foo;\n+}"}, {"sha": "0e5e22b9b4b997873b29913d616316b75f7c423c", "filename": "tests/fail/dyn-upcast-trait-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd441b1eb93475107717ffca59202c11263b5e5e/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr?ref=bd441b1eb93475107717ffca59202c11263b5e5e", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: upcast on a pointer whose vtable does not match its type\n+  --> $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n+   |\n+LL |     let baz_fake: &dyn Bar = unsafe { std::mem::transmute(baz) };\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^ upcast on a pointer whose vtable does not match its type\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}