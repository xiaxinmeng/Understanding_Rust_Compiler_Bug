{"sha": "7057c421c0bb1cb75c26f7135b44cb7f98db6508", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTdjNDIxYzBiYjFjYjc1YzI2ZjcxMzViNDRjYjdmOThkYjY1MDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-11T19:46:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-31T21:47:33Z"}, "message": "cache projections in trans", "tree": {"sha": "473fb118d99d784293134948d2744f191debe1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473fb118d99d784293134948d2744f191debe1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7057c421c0bb1cb75c26f7135b44cb7f98db6508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7057c421c0bb1cb75c26f7135b44cb7f98db6508", "html_url": "https://github.com/rust-lang/rust/commit/7057c421c0bb1cb75c26f7135b44cb7f98db6508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7057c421c0bb1cb75c26f7135b44cb7f98db6508/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5be6f6cc6a87368f694faf0874b3b41d359faad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5be6f6cc6a87368f694faf0874b3b41d359faad", "html_url": "https://github.com/rust-lang/rust/commit/c5be6f6cc6a87368f694faf0874b3b41d359faad"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "ab2a39864336fe2703b8cf9b55bb99a71d3617e9", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7057c421c0bb1cb75c26f7135b44cb7f98db6508/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7057c421c0bb1cb75c26f7135b44cb7f98db6508/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=7057c421c0bb1cb75c26f7135b44cb7f98db6508", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use common::*;\n use rustc::hir::def_id::DefId;\n use rustc::infer::TransNormalize;\n+use rustc::ty::fold::{TypeFolder, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n-use common::*;\n use rustc::util::ppaux;\n-\n+use rustc::util::common::MemoizationMap;\n use std::fmt;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -51,10 +52,8 @@ pub fn apply_param_substs<'a, 'tcx, T>(scx: &SharedCrateContext<'a, 'tcx>,\n     let tcx = scx.tcx();\n     debug!(\"apply_param_substs(param_substs={:?}, value={:?})\", param_substs, value);\n     let substituted = value.subst(tcx, param_substs);\n-    debug!(\"apply_param_substs: substituted={:?}{}\",\n-           substituted,\n-           if substituted.has_projection_types() { \" [needs projection]\" } else { \"\" });\n-    tcx.normalize_associated_type(&substituted)\n+    let substituted = scx.tcx().erase_regions(&substituted);\n+    AssociatedTypeNormalizer::new(scx).fold(&substituted)\n }\n \n \n@@ -67,3 +66,39 @@ pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.normalize_associated_type(&f.ty(tcx, param_substs))\n }\n \n+struct AssociatedTypeNormalizer<'a, 'b: 'a, 'gcx: 'b> {\n+    shared: &'a SharedCrateContext<'b, 'gcx>,\n+}\n+\n+impl<'a, 'b, 'gcx> AssociatedTypeNormalizer<'a, 'b, 'gcx> {\n+    fn new(shared: &'a SharedCrateContext<'b, 'gcx>) -> Self {\n+        AssociatedTypeNormalizer {\n+            shared: shared,\n+        }\n+    }\n+\n+    fn fold<T:TypeFoldable<'gcx>>(&mut self, value: &T) -> T {\n+        if !value.has_projection_types() {\n+            value.clone()\n+        } else {\n+            value.fold_with(self)\n+        }\n+    }\n+}\n+\n+impl<'a, 'b, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'b, 'gcx> {\n+    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'gcx> {\n+        self.shared.tcx()\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> {\n+        if !ty.has_projection_types() {\n+            ty\n+        } else {\n+            self.shared.project_cache().memoize(ty, || {\n+                debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n+                self.shared.tcx().normalize_associated_type(&ty)\n+            })\n+        }\n+    }\n+}"}]}