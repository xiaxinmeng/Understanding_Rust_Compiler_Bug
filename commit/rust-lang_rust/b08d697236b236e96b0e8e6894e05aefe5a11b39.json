{"sha": "b08d697236b236e96b0e8e6894e05aefe5a11b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOGQ2OTcyMzZiMjM2ZTk2YjBlOGU2ODk0ZTA1YWVmZTVhMTFiMzk=", "commit": {"author": {"name": "Tommaso Bianchi", "email": "tommaso4.bianchi@mail.polimi.it", "date": "2019-12-16T16:28:28Z"}, "committer": {"name": "Tommaso Bianchi", "email": "tommaso4.bianchi@mail.polimi.it", "date": "2019-12-16T16:28:28Z"}, "message": "Formatting fixes", "tree": {"sha": "d9f1adbbd61066ae0a395cb0fe85e10c381ef610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f1adbbd61066ae0a395cb0fe85e10c381ef610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08d697236b236e96b0e8e6894e05aefe5a11b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08d697236b236e96b0e8e6894e05aefe5a11b39", "html_url": "https://github.com/rust-lang/rust/commit/b08d697236b236e96b0e8e6894e05aefe5a11b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08d697236b236e96b0e8e6894e05aefe5a11b39/comments", "author": {"login": "TommasoBianchi", "id": 10757509, "node_id": "MDQ6VXNlcjEwNzU3NTA5", "avatar_url": "https://avatars.githubusercontent.com/u/10757509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TommasoBianchi", "html_url": "https://github.com/TommasoBianchi", "followers_url": "https://api.github.com/users/TommasoBianchi/followers", "following_url": "https://api.github.com/users/TommasoBianchi/following{/other_user}", "gists_url": "https://api.github.com/users/TommasoBianchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TommasoBianchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TommasoBianchi/subscriptions", "organizations_url": "https://api.github.com/users/TommasoBianchi/orgs", "repos_url": "https://api.github.com/users/TommasoBianchi/repos", "events_url": "https://api.github.com/users/TommasoBianchi/events{/privacy}", "received_events_url": "https://api.github.com/users/TommasoBianchi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TommasoBianchi", "id": 10757509, "node_id": "MDQ6VXNlcjEwNzU3NTA5", "avatar_url": "https://avatars.githubusercontent.com/u/10757509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TommasoBianchi", "html_url": "https://github.com/TommasoBianchi", "followers_url": "https://api.github.com/users/TommasoBianchi/followers", "following_url": "https://api.github.com/users/TommasoBianchi/following{/other_user}", "gists_url": "https://api.github.com/users/TommasoBianchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TommasoBianchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TommasoBianchi/subscriptions", "organizations_url": "https://api.github.com/users/TommasoBianchi/orgs", "repos_url": "https://api.github.com/users/TommasoBianchi/repos", "events_url": "https://api.github.com/users/TommasoBianchi/events{/privacy}", "received_events_url": "https://api.github.com/users/TommasoBianchi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042d8553a1626597a01ce66b70015a834791c990", "url": "https://api.github.com/repos/rust-lang/rust/commits/042d8553a1626597a01ce66b70015a834791c990", "html_url": "https://github.com/rust-lang/rust/commit/042d8553a1626597a01ce66b70015a834791c990"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "59df88f8c70c5ffa74e50a6cbb64ba813ec6ad3e", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08d697236b236e96b0e8e6894e05aefe5a11b39/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d697236b236e96b0e8e6894e05aefe5a11b39/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b08d697236b236e96b0e8e6894e05aefe5a11b39", "patch": "@@ -56,8 +56,10 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             // already checked by coherence, but compilation may\n             // not have been terminated.\n             let span = tcx.def_span(drop_impl_did);\n-            tcx.sess.delay_span_bug(span,\n-                &format!(\"should have been rejected by coherence check: {}\", dtor_self_type));\n+            tcx.sess.delay_span_bug(\n+                span,\n+                &format!(\"should have been rejected by coherence check: {}\", dtor_self_type),\n+            );\n             Err(ErrorReported)\n         }\n     }\n@@ -85,10 +87,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n         let fresh_impl_self_ty = drop_impl_ty.subst(tcx, fresh_impl_substs);\n \n         let cause = &ObligationCause::misc(drop_impl_span, drop_impl_hir_id);\n-        match infcx\n-            .at(cause, impl_param_env)\n-            .eq(named_type, fresh_impl_self_ty)\n-        {\n+        match infcx.at(cause, impl_param_env).eq(named_type, fresh_impl_self_ty) {\n             Ok(InferOk { obligations, .. }) => {\n                 fulfillment_cx.register_predicate_obligations(infcx, obligations);\n             }\n@@ -99,12 +98,13 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n                     drop_impl_span,\n                     E0366,\n                     \"Implementations of Drop cannot be specialized\"\n-                ).span_note(\n+                )\n+                .span_note(\n                     item_span,\n                     \"Use same sequence of generic type and region \\\n                      parameters that is on the struct/enum definition\",\n                 )\n-                    .emit();\n+                .emit();\n                 return Err(ErrorReported);\n             }\n         }\n@@ -245,12 +245,13 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 E0367,\n                 \"The requirement `{}` is added only by the Drop impl.\",\n                 predicate\n-            ).span_note(\n+            )\n+            .span_note(\n                 item_span,\n                 \"The same requirement must be part of \\\n                  the struct/enum definition\",\n             )\n-                .emit();\n+            .emit();\n             result = Err(ErrorReported);\n         }\n     }"}]}