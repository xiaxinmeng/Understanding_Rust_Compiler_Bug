{"sha": "ea730ab20f72196a683f313cbd2797456eb28b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzMwYWIyMGY3MjE5NmE2ODNmMzEzY2JkMjc5NzQ1NmViMjhiM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-10T22:58:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-10T23:15:58Z"}, "message": "update tests for new allocator API", "tree": {"sha": "36000f337097b980ff3fa4c52e6e61f5685e4de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36000f337097b980ff3fa4c52e6e61f5685e4de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea730ab20f72196a683f313cbd2797456eb28b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea730ab20f72196a683f313cbd2797456eb28b3e", "html_url": "https://github.com/rust-lang/rust/commit/ea730ab20f72196a683f313cbd2797456eb28b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea730ab20f72196a683f313cbd2797456eb28b3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2cf3d76b91f936f7dfecf89c52d06dd54335e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cf3d76b91f936f7dfecf89c52d06dd54335e9a", "html_url": "https://github.com/rust-lang/rust/commit/d2cf3d76b91f936f7dfecf89c52d06dd54335e9a"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "a0bcffa47d9fc784a5eb5d8d549ce4a5de35dbdb", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,13 +1,16 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n use alloc::heap::*;\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        deallocate(x, 1, 2);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "d8c4493043dbb7984bda084c8b9f9ffc912f5782", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,13 +1,16 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n use alloc::heap::*;\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        deallocate(x, 1, 2);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        Heap.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "3c4399eaa3ed63e63d15ff3443bbd958fa77a0cd", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,14 +1,17 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n // error-pattern: tried to deallocate with a pointer not to the beginning of an existing object\n \n use alloc::heap::*;\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        deallocate(x, 1, 1);\n-        deallocate(x, 1, 1);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }\n }"}, {"sha": "246d5592957748fe23723720658c1ebf893ac470", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,13 +1,16 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n-// error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n+// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n use alloc::heap::*;\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        let _y = reallocate(x, 1, 1, 2);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 2)).unwrap();\n+        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 2)).unwrap();\n     }\n }"}, {"sha": "2e5a641838020239c98dd28f828dc78fe98bc8af", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,13 +1,16 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n use alloc::heap::*;\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        let _y = reallocate(x, 2, 1, 1);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(2, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n     }\n }"}, {"sha": "290c966a2bc8a8acb3b3e440c5286a713444a554", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea730ab20f72196a683f313cbd2797456eb28b3e/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=ea730ab20f72196a683f313cbd2797456eb28b3e", "patch": "@@ -1,12 +1,14 @@\n-#![feature(alloc, heap_api)]\n+#![feature(alloc, allocator_api)]\n \n extern crate alloc;\n \n-use alloc::heap::*;\n+use alloc::heap::Heap;\n+use alloc::allocator::*;\n+\n fn main() {\n     unsafe {\n-        let x = allocate(1, 1);\n-        let _y = reallocate(x, 1, 1, 1);\n+        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n         let _z = *x; //~ ERROR: dangling pointer was dereferenced\n     }\n }"}]}