{"sha": "1241f1927eb1a8d2c87c2ada680afb16424862e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDFmMTkyN2ViMWE4ZDJjODdjMmFkYTY4MGFmYjE2NDI0ODYyZTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-11T10:56:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-22T12:37:06Z"}, "message": "offset_from: also document same-provenance requirement", "tree": {"sha": "47feb4bf576a6fceb34f9856bbc63b0c985682aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47feb4bf576a6fceb34f9856bbc63b0c985682aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1241f1927eb1a8d2c87c2ada680afb16424862e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1241f1927eb1a8d2c87c2ada680afb16424862e5", "html_url": "https://github.com/rust-lang/rust/commit/1241f1927eb1a8d2c87c2ada680afb16424862e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1241f1927eb1a8d2c87c2ada680afb16424862e5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a8b7b9016731a1992569c5958ca4580c60119c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a8b7b9016731a1992569c5958ca4580c60119c", "html_url": "https://github.com/rust-lang/rust/commit/c5a8b7b9016731a1992569c5958ca4580c60119c"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "82b52b9aaf2eb59885e8a022a6e03b7383df56c8", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1241f1927eb1a8d2c87c2ada680afb16424862e5/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241f1927eb1a8d2c87c2ada680afb16424862e5/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=1241f1927eb1a8d2c87c2ada680afb16424862e5", "patch": "@@ -303,6 +303,9 @@ impl<T: ?Sized> *const T {\n     ///   byte past the end of the same allocated object. Note that in Rust,\n     ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n+    /// * Both pointers must be *derived from* a pointer to the same object.\n+    ///   (See below for an example.)\n+    ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n@@ -348,6 +351,25 @@ impl<T: ?Sized> *const T {\n     ///     assert_eq!(ptr2.offset(-2), ptr1);\n     /// }\n     /// ```\n+    ///\n+    /// *Incorrect* usage:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(ptr_offset_from)]\n+    ///\n+    /// let ptr1 = Box::into_raw(Box::new(0u8)) as *const u8;\n+    /// let ptr2 = Box::into_raw(Box::new(1u8)) as *const u8;\n+    /// let diff = (ptr2 as isize).wrapping_sub(ptr1 as isize);\n+    /// // Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n+    /// let ptr2_other = (ptr1 as *const u8).wrapping_offset(diff);\n+    /// assert_eq!(ptr2 as usize, ptr2_other as usize);\n+    /// // Since ptr2_other and ptr2 are derived from pointers to different objects,\n+    /// // computing their offset is undefined behavior, even though\n+    /// // they point to the same address!\n+    /// unsafe {\n+    ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     #[inline]"}, {"sha": "aa9619755aca683d324b214f76717680e8b61932", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1241f1927eb1a8d2c87c2ada680afb16424862e5/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241f1927eb1a8d2c87c2ada680afb16424862e5/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=1241f1927eb1a8d2c87c2ada680afb16424862e5", "patch": "@@ -474,6 +474,9 @@ impl<T: ?Sized> *mut T {\n     ///   byte past the end of the same allocated object. Note that in Rust,\n     ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n+    /// * Both pointers must be *derived from* a pointer to the same object.\n+    ///   (See below for an example.)\n+    ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n@@ -519,6 +522,25 @@ impl<T: ?Sized> *mut T {\n     ///     assert_eq!(ptr2.offset(-2), ptr1);\n     /// }\n     /// ```\n+    ///\n+    /// *Incorrect* usage:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(ptr_offset_from)]\n+    ///\n+    /// let ptr1 = Box::into_raw(Box::new(0u8));\n+    /// let ptr2 = Box::into_raw(Box::new(1u8));\n+    /// let diff = (ptr2 as isize).wrapping_sub(ptr1 as isize);\n+    /// // Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n+    /// let ptr2_other = (ptr1 as *mut u8).wrapping_offset(diff);\n+    /// assert_eq!(ptr2 as usize, ptr2_other as usize);\n+    /// // Since ptr2_other and ptr2 are derived from pointers to different objects,\n+    /// // computing their offset is undefined behavior, even though\n+    /// // they point to the same address!\n+    /// unsafe {\n+    ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     #[inline]"}]}