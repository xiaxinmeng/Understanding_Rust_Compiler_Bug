{"sha": "7fe83345ef0204eedd8ac3847a527466f6853c0b", "node_id": "C_kwDOAAsO6NoAKDdmZTgzMzQ1ZWYwMjA0ZWVkZDhhYzM4NDdhNTI3NDY2ZjY4NTNjMGI", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-11T19:55:50Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-13T08:51:21Z"}, "message": "improve error for `impl<..> impl Trait for Type`", "tree": {"sha": "4eebd7ea8dbf0aa0663e32a0b28f65638dee6a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eebd7ea8dbf0aa0663e32a0b28f65638dee6a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe83345ef0204eedd8ac3847a527466f6853c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe83345ef0204eedd8ac3847a527466f6853c0b", "html_url": "https://github.com/rust-lang/rust/commit/7fe83345ef0204eedd8ac3847a527466f6853c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe83345ef0204eedd8ac3847a527466f6853c0b/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "html_url": "https://github.com/rust-lang/rust/commit/69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "2d0f466e236cea87c8cd6ef5f68f04e259c0552e", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -478,6 +478,11 @@ parse_missing_for_in_trait_impl = missing `for` in a trait impl\n \n parse_expected_trait_in_trait_impl_found_type = expected a trait, found type\n \n+parse_extra_impl_keyword_in_trait_impl = unexpected `impl` keyword\n+    .suggestion = remove the extra `impl`\n+    .note = this is parsed as an `impl Trait` type, but a trait is expected at this position\n+\n+\n parse_non_item_in_item_list = non-item in item list\n     .suggestion_use_const_not_let = consider using `const` instead of `let` for associated const\n     .label_list_start = item list starts here"}, {"sha": "84494eab855c4ffcedbd08b2be79517c083be1eb", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -1519,6 +1519,16 @@ pub(crate) struct ExpectedTraitInTraitImplFoundType {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_extra_impl_keyword_in_trait_impl)]\n+pub(crate) struct ExtraImplKeywordInTraitImpl {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub extra_impl_kw: Span,\n+    #[note]\n+    pub impl_trait_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_bounds_not_allowed_on_trait_aliases)]\n pub(crate) struct BoundsNotAllowedOnTraitAliases {"}, {"sha": "dc18d400f1e9d1059195c623f78982ab64e86807", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -603,10 +603,24 @@ impl<'a> Parser<'a> {\n                 let path = match ty_first.kind {\n                     // This notably includes paths passed through `ty` macro fragments (#46438).\n                     TyKind::Path(None, path) => path,\n-                    _ => {\n-                        self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n-                            span: ty_first.span,\n-                        });\n+                    other => {\n+                        if let TyKind::ImplTrait(_, bounds) = other\n+                            && let [bound] = bounds.as_slice()\n+                        {\n+                            // Suggest removing extra `impl` keyword:\n+                            // `impl<T: Default> impl Default for Wrapper<T>`\n+                            //                   ^^^^^\n+                            let extra_impl_kw = ty_first.span.until(bound.span());\n+                            self.sess\n+                                .emit_err(errors::ExtraImplKeywordInTraitImpl {\n+                                    extra_impl_kw,\n+                                    impl_trait_span: ty_first.span\n+                                });\n+                        } else {\n+                            self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n+                                span: ty_first.span,\n+                            });\n+                        }\n                         err_path(ty_first.span)\n                     }\n                 };"}, {"sha": "cd4f2610d3f04c6a088d2be38617cf2317c694e0", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "024b703e6f23549103d0170724892b7b5c8a4f9c", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> impl Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "5aafc8b64d4ff476784edab9dfdbd2d4991b3ba5", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83345ef0204eedd8ac3847a527466f6853c0b/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr?ref=7fe83345ef0204eedd8ac3847a527466f6853c0b", "patch": "@@ -0,0 +1,26 @@\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^^^^^^^^\n+\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}