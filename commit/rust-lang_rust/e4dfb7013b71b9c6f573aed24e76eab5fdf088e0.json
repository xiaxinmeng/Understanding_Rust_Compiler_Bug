{"sha": "e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZGZiNzAxM2I3MWI5YzZmNTczYWVkMjRlNzZlYWI1ZmRmMDg4ZTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T09:24:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T09:24:22Z"}, "message": "enable validation per default, but add a flag to disable it and use that for some run-pass tests\n\ncompile-fail does not do validation yet", "tree": {"sha": "3668a5cafe284e1aa3f3cee8cd394d5f57e9f4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3668a5cafe284e1aa3f3cee8cd394d5f57e9f4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "html_url": "https://github.com/rust-lang/rust/commit/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94d32e937c672317527cb440788138f688bf3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94d32e937c672317527cb440788138f688bf3c4", "html_url": "https://github.com/rust-lang/rust/commit/d94d32e937c672317527cb440788138f688bf3c4"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "d7207da0b3c08cbb90143fa0cf5766851b78c253", "filename": "src/bin/miri.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -25,10 +25,14 @@ use std::path::PathBuf;\n \n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n-    /// Whether to begin interpretation at the start_fn lang item or not\n+\n+    /// Whether to begin interpretation at the start_fn lang item or not.\n     ///\n-    /// If false, the interpretation begins at the `main` function\n+    /// If false, the interpretation begins at the `main` function.\n     start_fn: bool,\n+\n+    /// Whether to enforce the validity invariant.\n+    validate: bool,\n }\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n@@ -87,7 +91,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         let start_fn = this.start_fn;\n-        control.after_analysis.callback = Box::new(move |state| after_analysis(state, start_fn));\n+        let validate = this.validate;\n+        control.after_analysis.callback =\n+            Box::new(move |state| after_analysis(state, start_fn, validate));\n         control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n@@ -101,38 +107,43 @@ fn after_hir_lowering(state: &mut CompileState) {\n     state.session.plugin_attributes.borrow_mut().push(attr);\n }\n \n-fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>, use_start_fn: bool) {\n+fn after_analysis<'a, 'tcx>(\n+    state: &mut CompileState<'a, 'tcx>,\n+    use_start_fn: bool,\n+    validate: bool,\n+) {\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n \n     if std::env::args().any(|arg| arg == \"--test\") {\n-        struct Visitor<'a, 'tcx: 'a>(\n-            TyCtxt<'a, 'tcx, 'tcx>,\n-            &'a CompileState<'a, 'tcx>\n-        );\n+        struct Visitor<'a, 'tcx: 'a> {\n+            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+            state: &'a CompileState<'a, 'tcx>,\n+            validate: bool,\n+        };\n         impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::ItemKind::Fn(.., body_id) = i.node {\n                     if i.attrs.iter().any(|attr| {\n                         attr.name() == \"test\"\n                     })\n                     {\n-                        let did = self.0.hir.body_owner_def_id(body_id);\n+                        let did = self.tcx.hir.body_owner_def_id(body_id);\n                         println!(\n                             \"running test: {}\",\n-                            self.0.def_path_debug_str(did),\n+                            self.tcx.def_path_debug_str(did),\n                         );\n-                        miri::eval_main(self.0, did, None);\n-                        self.1.session.abort_if_errors();\n+                        miri::eval_main(self.tcx, did, None, self.validate);\n+                        self.state.session.abort_if_errors();\n                     }\n                 }\n             }\n             fn visit_trait_item(&mut self, _trait_item: &'hir hir::TraitItem) {}\n             fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n         }\n         state.hir_crate.unwrap().visit_all_item_likes(\n-            &mut Visitor(tcx, state),\n+            &mut Visitor { tcx, state, validate }\n         );\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n@@ -142,7 +153,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>, use_start_fn: bo\n         } else {\n             None\n         };\n-        miri::eval_main(tcx, entry_def_id, start_wrapper);\n+        miri::eval_main(tcx, entry_def_id, start_wrapper, validate);\n \n         state.session.abort_if_errors();\n     } else {\n@@ -221,12 +232,18 @@ fn main() {\n     }\n \n     let mut start_fn = false;\n+    let mut validate = true;\n     args.retain(|arg| {\n-        if arg == \"-Zmiri-start-fn\" {\n-            start_fn = true;\n-            false\n-        } else {\n-            true\n+        match arg.as_str() {\n+            \"-Zmiri-start-fn\" => {\n+                start_fn = true;\n+                false\n+            },\n+            \"-Zmiri-disable-validation\" => {\n+                validate = false;\n+                false\n+            },\n+            _ => true\n         }\n     });\n \n@@ -235,6 +252,7 @@ fn main() {\n         rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n             default: Box::new(RustcDefaultCalls),\n             start_fn,\n+            validate,\n         }), None, None)\n     });\n     std::process::exit(result as i32);"}, {"sha": "13b42d8e3c2720227f399b3249bf92d2277ce876", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -50,11 +50,12 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n     start_wrapper: Option<DefId>,\n+    validate: bool,\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = EvalContext::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Default::default(),\n+        Evaluator::new(validate),\n         Default::default(),\n     );\n \n@@ -145,8 +146,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n     start_wrapper: Option<DefId>,\n+    validate: bool,\n ) {\n-    let mut ecx = create_ecx(tcx, main_id, start_wrapper).expect(\"Couldn't create ecx\");\n+    let mut ecx = create_ecx(tcx, main_id, start_wrapper, validate).expect(\"Couldn't create ecx\");\n \n     let res: EvalResult = (|| {\n         ecx.run()?;\n@@ -221,14 +223,27 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n }\n \n \n-#[derive(Clone, Default, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, Pointer>,\n \n     /// TLS state\n     pub(crate) tls: TlsData<'tcx>,\n+\n+    /// Whether to enforce the validity invariant\n+    pub(crate) validate: bool,\n+}\n+\n+impl<'tcx> Evaluator<'tcx> {\n+    fn new(validate: bool) -> Self {\n+        Evaluator {\n+            env_vars: HashMap::default(),\n+            tls: TlsData::default(),\n+            validate,\n+        }\n+    }\n }\n \n impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n@@ -241,8 +256,8 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n     #[inline(always)]\n-    fn enforce_validity(_ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n-        false // this is still WIP\n+    fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+        ecx.machine.validate\n     }\n \n     /// Returns Ok() when the function was handled, fail otherwise"}, {"sha": "151aa89be3f3af0396a9f64ab5d539d4521f229a", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -64,6 +64,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n+    flags.push(\"-Zmiri-disable-validation\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();\n     config.host = host.to_owned();"}, {"sha": "dc0fa0987aebb65a577263747c00507924d42775", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -1,5 +1,5 @@\n-// mir validation can't cope with `mem::uninitialized()`, so this test fails with validation & full-MIR.\n-// compile-flags: -Zmir-emit-validate=0\n+// FIXME: Validation disabled due to https://github.com/rust-lang/rust/issues/54957\n+// compile-flags: -Zmiri-disable-validation\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n pub enum Foo {\n@@ -14,4 +14,6 @@ pub fn main() {\n     b.insert(Foo::A(\"/=\"));\n     b.insert(Foo::A(\"#\"));\n     b.insert(Foo::A(\"0o\"));\n+    assert!(b.remove(&Foo::A(\"/=\")));\n+    assert!(!b.remove(&Foo::A(\"/=\")));\n }"}, {"sha": "b0e336c0480a9f38c717ade5e1e61582c6d1bec1", "filename": "tests/run-pass/call_drop_through_owned_slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -1,3 +1,6 @@\n+// FIXME validation disabled because ptr::read uses mem::uninitialized\n+// compile-flags: -Zmiri-disable-validation\n+\n struct Bar;\n \n static mut DROP_COUNT: usize = 0;"}, {"sha": "94ca146db1cdf848997029d2e4bbb0b9180a24ee", "filename": "tests/run-pass/issue-29746.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-29746.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME validation disabled because ptr::read uses mem::uninitialized\n+// compile-flags: -Zmiri-disable-validation\n+\n // zip!(a1,a2,a3,a4) is equivalent to:\n //  a1.zip(a2).zip(a3).zip(a4).map(|(((x1,x2),x3),x4)| (x1,x2,x3,x4))\n macro_rules! zip {"}, {"sha": "4d89066035cebb97cba9ea33ad75a811faac25c5", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: Validation disabled due to https://github.com/rust-lang/rust/issues/54908\n+// compile-flags: -Zmiri-disable-validation\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "627c821a9f307bd088fdffb249f51ff28dd64cd7", "filename": "tests/run-pass/ref-invalid-ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fref-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fref-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fref-invalid-ptr.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -1,3 +1,6 @@\n+// FIXME validation disabled because it checks these references too eagerly\n+// compile-flags: -Zmiri-disable-validation\n+\n fn main() {\n     let x = 2usize as *const u32;\n     // this is not aligned, but we immediately cast it to a raw ptr so that must be okay"}, {"sha": "7ca4e1a90841af77467843d1a11de6e004b914fd", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME validation disabled because ptr::read uses mem::uninitialized\n+// compile-flags: -Zmiri-disable-validation\n+\n // Test that a class with only sendable fields can be sent\n \n use std::sync::mpsc::channel;"}, {"sha": "8a48d331f4544028693f8ae466284e001ac3480d", "filename": "tests/run-pass/unique-send.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4dfb7013b71b9c6f573aed24e76eab5fdf088e0/tests%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funique-send.rs?ref=e4dfb7013b71b9c6f573aed24e76eab5fdf088e0", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME validation disabled because ptr::read uses mem::uninitialized\n+// compile-flags: -Zmiri-disable-validation\n+\n #![feature(box_syntax)]\n \n use std::sync::mpsc::channel;"}]}