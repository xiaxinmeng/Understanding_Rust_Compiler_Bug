{"sha": "7606f580a15da4e093eb51795304c983180a286f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDZmNTgwYTE1ZGE0ZTA5M2ViNTE3OTUzMDRjOTgzMTgwYTI4NmY=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-08-16T15:10:38Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-08-16T20:42:38Z"}, "message": "Add `use a::b::{c, mod};` to the manual", "tree": {"sha": "835720970e89aa3094159bf1203e4f5535933551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835720970e89aa3094159bf1203e4f5535933551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7606f580a15da4e093eb51795304c983180a286f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7606f580a15da4e093eb51795304c983180a286f", "html_url": "https://github.com/rust-lang/rust/commit/7606f580a15da4e093eb51795304c983180a286f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7606f580a15da4e093eb51795304c983180a286f/comments", "author": null, "committer": null, "parents": [{"sha": "cf71f1c7b077c93b33360fd5af6442fff2e39876", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf71f1c7b077c93b33360fd5af6442fff2e39876", "html_url": "https://github.com/rust-lang/rust/commit/cf71f1c7b077c93b33360fd5af6442fff2e39876"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "7fe6585f07ca5814840086a8b47a386c9c5ec253", "filename": "src/doc/rust.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7606f580a15da4e093eb51795304c983180a286f/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/7606f580a15da4e093eb51795304c983180a286f/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=7606f580a15da4e093eb51795304c983180a286f", "patch": "@@ -924,7 +924,9 @@ use_decl : \"pub\" ? \"use\" [ path \"as\" ident\n \n path_glob : ident [ \"::\" [ path_glob\n                           | '*' ] ] ?\n-          | '{' ident [ ',' ident ] * '}' ;\n+          | '{' path_item [ ',' path_item ] * '}' ;\n+\n+path_item : ident | \"mod\" ;\n ~~~~\n \n A _use declaration_ creates one or more local name bindings synonymous\n@@ -943,14 +945,18 @@ Use declarations support a number of convenient shortcuts:\n   * Simultaneously binding a list of paths differing only in their final element,\n     using the glob-like brace syntax `use a::b::{c,d,e,f};`\n   * Binding all paths matching a given prefix, using the asterisk wildcard syntax `use a::b::*;`\n+  * Simultaneously binding a list of paths differing only in their final element\n+    and their immediate parent module, using the `mod` keyword, such as `use a::b::{mod, c, d};`\n \n An example of `use` declarations:\n \n ~~~~\n use std::iter::range_step;\n use std::option::{Some, None};\n+use std::collections::hashmap::{mod, HashMap};\n \n # fn foo<T>(_: T){}\n+# fn bar(map: HashMap<String, uint>, set: hashmap::HashSet<String>){}\n \n fn main() {\n     // Equivalent to 'std::iter::range_step(0u, 10u, 2u);'\n@@ -959,6 +965,11 @@ fn main() {\n     // Equivalent to 'foo(vec![std::option::Some(1.0f64),\n     // std::option::None]);'\n     foo(vec![Some(1.0f64), None]);\n+\n+    // Both `hash` and `HashMap` are in scope.\n+    let map = HashMap::new();\n+    let set = hashmap::HashSet::new();\n+    bar(map, set);\n }\n ~~~~\n "}]}