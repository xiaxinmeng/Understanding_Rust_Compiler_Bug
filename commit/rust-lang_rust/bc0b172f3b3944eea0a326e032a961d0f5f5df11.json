{"sha": "bc0b172f3b3944eea0a326e032a961d0f5f5df11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMGIxNzJmM2IzOTQ0ZWVhMGEzMjZlMDMyYTk2MWQwZjVmNWRmMTE=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T17:48:46Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:53Z"}, "message": "Remove BlockAndBuilder.funclet", "tree": {"sha": "5671232d6d939d5c734161780c5c6173afa2e417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5671232d6d939d5c734161780c5c6173afa2e417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0b172f3b3944eea0a326e032a961d0f5f5df11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0b172f3b3944eea0a326e032a961d0f5f5df11", "html_url": "https://github.com/rust-lang/rust/commit/bc0b172f3b3944eea0a326e032a961d0f5f5df11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0b172f3b3944eea0a326e032a961d0f5f5df11/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f511cfbd9faaec4cc54ea002b43bacb3da497c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f511cfbd9faaec4cc54ea002b43bacb3da497c", "html_url": "https://github.com/rust-lang/rust/commit/28f511cfbd9faaec4cc54ea002b43bacb3da497c"}], "stats": {"total": 25, "additions": 1, "deletions": 24}, "files": [{"sha": "bd387ccae2055f98c9b1e6424b61da70bf6854a9", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0b172f3b3944eea0a326e032a961d0f5f5df11/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0b172f3b3944eea0a326e032a961d0f5f5df11/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=bc0b172f3b3944eea0a326e032a961d0f5f5df11", "patch": "@@ -99,7 +99,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         custom_scope: Option<CleanupScope<'tcx>>\n     ) {\n         if let Some(scope) = custom_scope {\n-            scope.cleanup.trans(bcx.funclet(), &bcx);\n+            scope.cleanup.trans(None, &bcx);\n         }\n     }\n "}, {"sha": "e2abb7779c98fd165c26aab5c541bef09306dfd4", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc0b172f3b3944eea0a326e032a961d0f5f5df11/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0b172f3b3944eea0a326e032a961d0f5f5df11/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=bc0b172f3b3944eea0a326e032a961d0f5f5df11", "patch": "@@ -42,7 +42,6 @@ use rustc::traits::{self, SelectionContext, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::hir;\n \n-use arena::TypedArena;\n use libc::{c_uint, c_char};\n use std::borrow::Cow;\n use std::iter;\n@@ -304,9 +303,6 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // error reporting and symbol generation.\n     pub span: Option<Span>,\n \n-    // The arena that landing pads are allocated from.\n-    pub funclet_arena: TypedArena<Funclet>,\n-\n     // This function's enclosing crate context.\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n \n@@ -364,7 +360,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             fn_ty: fn_ty,\n             param_substs: param_substs,\n             span: None,\n-            funclet_arena: TypedArena::new(),\n             ccx: ccx,\n             debug_context: debug_context,\n             owned_builder: OwnedBuilder::new_with_ccx(ccx),\n@@ -564,10 +559,6 @@ pub struct BlockAndBuilder<'blk, 'tcx: 'blk> {\n     // The block pointing to this one in the function's digraph.\n     llbb: BasicBlockRef,\n \n-    // If this block part of a landing pad, then this is `Some` indicating what\n-    // kind of landing pad its in, otherwise this is none.\n-    funclet: Option<&'blk Funclet>,\n-\n     // The function context for the function to which this block is\n     // attached.\n     fcx: &'blk FunctionContext<'blk, 'tcx>,\n@@ -582,7 +573,6 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n         owned_builder.builder.position_at_end(llbb);\n         BlockAndBuilder {\n             llbb: llbb,\n-            funclet: None,\n             fcx: fcx,\n             owned_builder: owned_builder,\n         }\n@@ -617,19 +607,6 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n     pub fn mir(&self) -> Ref<'tcx, Mir<'tcx>> {\n         self.fcx.mir()\n     }\n-\n-    pub fn set_funclet(&mut self, funclet: Option<Funclet>) {\n-        self.funclet = funclet.map(|p| &*self.fcx().funclet_arena.alloc(p));\n-    }\n-\n-    pub fn set_funclet_ref(&mut self, funclet: Option<&'blk Funclet>) {\n-        // FIXME: use an IVar?\n-        self.funclet = funclet;\n-    }\n-\n-    pub fn funclet(&self) -> Option<&'blk Funclet> {\n-        self.funclet\n-    }\n }\n \n impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> {"}]}