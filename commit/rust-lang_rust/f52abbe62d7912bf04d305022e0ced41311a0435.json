{"sha": "f52abbe62d7912bf04d305022e0ced41311a0435", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MmFiYmU2MmQ3OTEyYmYwNGQzMDUwMjJlMGNlZDQxMzExYTA0MzU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-27T21:52:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-27T21:52:22Z"}, "message": "Coalesce flycheck events", "tree": {"sha": "1d5898fdd15406761c92e62e394f7602bead8321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d5898fdd15406761c92e62e394f7602bead8321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52abbe62d7912bf04d305022e0ced41311a0435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52abbe62d7912bf04d305022e0ced41311a0435", "html_url": "https://github.com/rust-lang/rust/commit/f52abbe62d7912bf04d305022e0ced41311a0435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52abbe62d7912bf04d305022e0ced41311a0435/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c4975b54066417d22ab4ae028f53e1ee1e847d", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c4975b54066417d22ab4ae028f53e1ee1e847d", "html_url": "https://github.com/rust-lang/rust/commit/59c4975b54066417d22ab4ae028f53e1ee1e847d"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "f349b081034fd46239e2c34a08d2616d5f954063", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f52abbe62d7912bf04d305022e0ced41311a0435/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52abbe62d7912bf04d305022e0ced41311a0435/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f52abbe62d7912bf04d305022e0ced41311a0435", "patch": "@@ -289,55 +289,69 @@ impl GlobalState {\n                     }\n                 }\n             }\n-            Event::Flycheck(task) => match task {\n-                flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n-                    let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n-                        &self.config.diagnostics_map,\n-                        &diagnostic,\n-                        &workspace_root,\n-                    );\n-                    for diag in diagnostics {\n-                        match url_to_file_id(&self.vfs.read().0, &diag.url) {\n-                            Ok(file_id) => self.diagnostics.add_check_diagnostic(\n-                                file_id,\n-                                diag.diagnostic,\n-                                diag.fixes,\n-                            ),\n-                            Err(err) => {\n-                                log::error!(\"File with cargo diagnostic not found in VFS: {}\", err);\n-                            }\n-                        };\n-                    }\n-                }\n-\n-                flycheck::Message::Progress { id, progress } => {\n-                    let (state, message) = match progress {\n-                        flycheck::Progress::DidStart => {\n-                            self.diagnostics.clear_check();\n-                            (Progress::Begin, None)\n-                        }\n-                        flycheck::Progress::DidCheckCrate(target) => {\n-                            (Progress::Report, Some(target))\n-                        }\n-                        flycheck::Progress::DidCancel => (Progress::End, None),\n-                        flycheck::Progress::DidFinish(result) => {\n-                            if let Err(err) = result {\n-                                log::error!(\"cargo check failed: {}\", err)\n+            Event::Flycheck(mut task) => {\n+                let _p = profile::span(\"GlobalState::handle_event/flycheck\");\n+                loop {\n+                    match task {\n+                        flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n+                            let diagnostics =\n+                                crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n+                                    &self.config.diagnostics_map,\n+                                    &diagnostic,\n+                                    &workspace_root,\n+                                );\n+                            for diag in diagnostics {\n+                                match url_to_file_id(&self.vfs.read().0, &diag.url) {\n+                                    Ok(file_id) => self.diagnostics.add_check_diagnostic(\n+                                        file_id,\n+                                        diag.diagnostic,\n+                                        diag.fixes,\n+                                    ),\n+                                    Err(err) => {\n+                                        log::error!(\n+                                            \"File with cargo diagnostic not found in VFS: {}\",\n+                                            err\n+                                        );\n+                                    }\n+                                };\n                             }\n-                            (Progress::End, None)\n                         }\n-                    };\n \n-                    // When we're running multiple flychecks, we have to include a disambiguator in\n-                    // the title, or the editor complains. Note that this is a user-facing string.\n-                    let title = if self.flycheck.len() == 1 {\n-                        \"cargo check\".to_string()\n-                    } else {\n-                        format!(\"cargo check (#{})\", id + 1)\n-                    };\n-                    self.report_progress(&title, state, message, None);\n+                        flycheck::Message::Progress { id, progress } => {\n+                            let (state, message) = match progress {\n+                                flycheck::Progress::DidStart => {\n+                                    self.diagnostics.clear_check();\n+                                    (Progress::Begin, None)\n+                                }\n+                                flycheck::Progress::DidCheckCrate(target) => {\n+                                    (Progress::Report, Some(target))\n+                                }\n+                                flycheck::Progress::DidCancel => (Progress::End, None),\n+                                flycheck::Progress::DidFinish(result) => {\n+                                    if let Err(err) = result {\n+                                        log::error!(\"cargo check failed: {}\", err)\n+                                    }\n+                                    (Progress::End, None)\n+                                }\n+                            };\n+\n+                            // When we're running multiple flychecks, we have to include a disambiguator in\n+                            // the title, or the editor complains. Note that this is a user-facing string.\n+                            let title = if self.flycheck.len() == 1 {\n+                                \"cargo check\".to_string()\n+                            } else {\n+                                format!(\"cargo check (#{})\", id + 1)\n+                            };\n+                            self.report_progress(&title, state, message, None);\n+                        }\n+                    }\n+                    // Coalesce many flycheck updates into a single loop turn\n+                    task = match self.flycheck_receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n+                    }\n                 }\n-            },\n+            }\n         }\n \n         let state_changed = self.process_changes();"}]}