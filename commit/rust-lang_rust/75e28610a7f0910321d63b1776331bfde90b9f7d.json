{"sha": "75e28610a7f0910321d63b1776331bfde90b9f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTI4NjEwYTdmMDkxMDMyMWQ2M2IxNzc2MzMxYmZkZTkwYjlmN2Q=", "commit": {"author": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-27T02:32:41Z"}, "committer": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-27T02:57:47Z"}, "message": "Merged drop_forget_ref.rs with drop_forget_copy.rs.\nMoved constant message strings out of declare_lint! macros.", "tree": {"sha": "5937f9824e2cd4f7a204d6c1fc285e6e163904aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5937f9824e2cd4f7a204d6c1fc285e6e163904aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e28610a7f0910321d63b1776331bfde90b9f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e28610a7f0910321d63b1776331bfde90b9f7d", "html_url": "https://github.com/rust-lang/rust/commit/75e28610a7f0910321d63b1776331bfde90b9f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e28610a7f0910321d63b1776331bfde90b9f7d/comments", "author": null, "committer": null, "parents": [{"sha": "3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "html_url": "https://github.com/rust-lang/rust/commit/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e"}], "stats": {"total": 534, "additions": 108, "deletions": 426}, "files": [{"sha": "8c6f6a2773838cfd4224bdcef5ceb6841a2f4808", "filename": "clippy_lints/src/drop_forget_copy.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs?ref=3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "patch": "@@ -1,94 +0,0 @@\n-use rustc::lint::*;\n-use rustc::hir::*;\n-use utils::{match_def_path, paths, span_note_and_lint, is_copy};\n-\n-const DROP_COPY_SUMMARY:&'static str = \"calls to `std::mem::drop` with a value that implements Copy\";\n-const FORGET_COPY_SUMMARY:&'static str = \"calls to `std::mem::forget` with a value that implements Copy\";\n-\n-/// **What it does:** Checks for calls to `std::mem::drop` with a value\n-/// that derives the Copy trait\n-///\n-/// **Why is this bad?** Calling `std::mem::drop` [does nothing for types that\n-/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n-/// value will be copied and moved into the function on invocation.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let x:i32 = 42;   // i32 implements Copy\n-/// std::mem::drop(x) // A copy of x is passed to the function, leaving the original unaffected\n-/// ```\n-declare_lint! {\n-    pub DROP_COPY,\n-    Warn,\n-    DROP_COPY_SUMMARY\n-}\n-\n-/// **What it does:** Checks for calls to `std::mem::forget` with a value that\n-/// derives the Copy trait\n-///\n-/// **Why is this bad?** Calling `std::mem::forget` [does nothing for types that\n-/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n-/// value will be copied and moved into the function on invocation.\n-///\n-/// An alternative, but also valid, explanation is that Copy types do not implement\n-/// the Drop trait, which means they have no destructors. Without a destructor, there\n-/// is nothing for `std::mem::forget` to ignore.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let x:i32 = 42;     // i32 implements Copy\n-/// std::mem::forget(x) // A copy of x is passed to the function, leaving the original unaffected\n-/// ```\n-declare_lint! {\n-    pub FORGET_COPY,\n-    Warn,\n-    FORGET_COPY_SUMMARY\n-}\n-\n-#[allow(missing_copy_implementations)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_COPY, FORGET_COPY)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if_let_chain!{[\n-            let ExprCall(ref path, ref args) = expr.node,\n-            let ExprPath(ref qpath) = path.node,\n-            args.len() == 1,\n-        ], {\n-            let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n-            let lint;\n-            let msg;\n-\n-            if match_def_path(cx.tcx, def_id, &paths::DROP) {\n-                lint = DROP_COPY;\n-                msg = DROP_COPY_SUMMARY.to_string() + \". Dropping a copy leaves the original intact.\";\n-            } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n-                lint = FORGET_COPY;\n-                msg = FORGET_COPY_SUMMARY.to_string() + \". Forgetting a copy leaves the original intact.\";\n-            } else {\n-                return;\n-            }\n-\n-            let arg = &args[0];\n-            let arg_ty = cx.tables.expr_ty(arg);\n-            if is_copy(cx, arg_ty, cx.tcx.hir.get_parent(arg.id)) {\n-                span_note_and_lint(cx,\n-                                   lint,\n-                                   expr.span,\n-                                   &msg,\n-                                   arg.span,\n-                                   &format!(\"argument has type {}\", arg_ty.sty));\n-            }\n-        }}\n-    }\n-}"}, {"sha": "9424f6dbbd65d254ced2573969b245294ec2fd57", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/75e28610a7f0910321d63b1776331bfde90b9f7d/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e28610a7f0910321d63b1776331bfde90b9f7d/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=75e28610a7f0910321d63b1776331bfde90b9f7d", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, paths, span_note_and_lint};\n+use utils::{match_def_path, paths, span_note_and_lint, is_copy};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n /// instead of an owned value.\n@@ -45,6 +45,59 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n \n+/// **What it does:** Checks for calls to `std::mem::drop` with a value\n+/// that derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::drop` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;   // i32 implements Copy\n+/// std::mem::drop(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+/// **What it does:** Checks for calls to `std::mem::forget` with a value that\n+/// derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::forget` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// An alternative, but also valid, explanation is that Copy types do not implement\n+/// the Drop trait, which means they have no destructors. Without a destructor, there\n+/// is nothing for `std::mem::forget` to ignore.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;     // i32 implements Copy\n+/// std::mem::forget(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+const DROP_REF_SUMMARY:&str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n+                               Dropping a reference does nothing.\";\n+const FORGET_REF_SUMMARY:&str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n+                                 Forgetting a reference does nothing.\";\n+const DROP_COPY_SUMMARY:&str = \"calls to `std::mem::drop` with a value that implements Copy. \\\n+                                Dropping a copy leaves the original intact.\";\n+const FORGET_COPY_SUMMARY:&str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n+                                  Forgetting a copy leaves the original intact.\";\n+\n #[allow(missing_copy_implementations)]\n pub struct Pass;\n \n@@ -64,24 +117,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n             let lint;\n             let msg;\n-            if match_def_path(cx.tcx, def_id, &paths::DROP) {\n-                lint = DROP_REF;\n-                msg = \"call to `std::mem::drop` with a reference argument. \\\n-                       Dropping a reference does nothing\";\n-            } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n-                lint = FORGET_REF;\n-                msg = \"call to `std::mem::forget` with a reference argument. \\\n-                       Forgetting a reference does nothing\";\n-            } else {\n-                return;\n-            }\n             let arg = &args[0];\n             let arg_ty = cx.tables.expr_ty(arg);\n+\n             if let ty::TyRef(..) = arg_ty.sty {\n+                if match_def_path(cx.tcx, def_id, &paths::DROP) {\n+                    lint = DROP_REF;\n+                    msg = DROP_REF_SUMMARY.to_string();\n+                } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n+                    lint = FORGET_REF;\n+                    msg = FORGET_REF_SUMMARY.to_string();\n+                } else {\n+                    return;\n+                }\n+                span_note_and_lint(cx,\n+                                   lint,\n+                                   expr.span,\n+                                   &msg,\n+                                   arg.span,\n+                                   &format!(\"argument has type {}\", arg_ty.sty));\n+            } else if is_copy(cx, arg_ty, cx.tcx.hir.get_parent(arg.id)) {\n+                if match_def_path(cx.tcx, def_id, &paths::DROP) {\n+                    lint = DROP_COPY;\n+                    msg = DROP_COPY_SUMMARY.to_string();\n+                } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n+                    lint = FORGET_COPY;\n+                    msg = FORGET_COPY_SUMMARY.to_string();\n+                } else {\n+                    return;\n+                }\n                 span_note_and_lint(cx,\n                                    lint,\n                                    expr.span,\n-                                   msg,\n+                                   &msg,\n                                    arg.span,\n                                    &format!(\"argument has type {}\", arg_ty.sty));\n             }"}, {"sha": "7ad8bcb9848837df303c98a1f58881b0d83020d5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75e28610a7f0910321d63b1776331bfde90b9f7d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e28610a7f0910321d63b1776331bfde90b9f7d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=75e28610a7f0910321d63b1776331bfde90b9f7d", "patch": "@@ -72,7 +72,6 @@ pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod doc;\n pub mod double_parens;\n-pub mod drop_forget_copy;\n pub mod drop_forget_ref;\n pub mod empty_enum;\n pub mod entry;\n@@ -270,7 +269,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         max_single_char_names: conf.max_single_char_names,\n     });\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n-    reg.register_late_lint_pass(box drop_forget_copy::Pass);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n@@ -377,9 +375,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,\n         double_parens::DOUBLE_PARENS,\n-        drop_forget_copy::DROP_COPY,\n-        drop_forget_copy::FORGET_COPY,\n+        drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_COPY,\n         drop_forget_ref::FORGET_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,"}, {"sha": "5d95e9f868520cbe0c85ddf78ca1084027dffbb9", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 7, "deletions": 115, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/75e28610a7f0910321d63b1776331bfde90b9f7d/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e28610a7f0910321d63b1776331bfde90b9f7d/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=75e28610a7f0910321d63b1776331bfde90b9f7d", "patch": "@@ -1,4 +1,4 @@\n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:33:5\n    |\n 33 |     drop(s1);\n@@ -15,7 +15,7 @@ note: argument has type SomeStruct\n 33 |     drop(s1);\n    |          ^^\n \n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:34:5\n    |\n 34 |     drop(s2);\n@@ -27,19 +27,7 @@ note: argument has type SomeStruct\n 34 |     drop(s2);\n    |          ^^\n \n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:35:5\n-   |\n-35 |     drop(s3);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_copy.rs:35:10\n-   |\n-35 |     drop(s3);\n-   |          ^^\n-\n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:36:5\n    |\n 36 |     drop(s4);\n@@ -51,19 +39,7 @@ note: argument has type SomeStruct\n 36 |     drop(s4);\n    |          ^^\n \n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:37:5\n-   |\n-37 |     drop(s5);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_copy.rs:37:10\n-   |\n-37 |     drop(s5);\n-   |          ^^\n-\n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:39:5\n    |\n 39 |     forget(s1);\n@@ -80,7 +56,7 @@ note: argument has type SomeStruct\n 39 |     forget(s1);\n    |            ^^\n \n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:40:5\n    |\n 40 |     forget(s2);\n@@ -92,19 +68,7 @@ note: argument has type SomeStruct\n 40 |     forget(s2);\n    |            ^^\n \n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:41:5\n-   |\n-41 |     forget(s3);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_copy.rs:41:12\n-   |\n-41 |     forget(s3);\n-   |            ^^\n-\n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:42:5\n    |\n 42 |     forget(s4);\n@@ -116,77 +80,5 @@ note: argument has type SomeStruct\n 42 |     forget(s4);\n    |            ^^\n \n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:43:5\n-   |\n-43 |     forget(s5);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_copy.rs:43:12\n-   |\n-43 |     forget(s5);\n-   |            ^^\n-\n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:51:5\n-   |\n-51 |     drop(a2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type &AnotherStruct\n-  --> $DIR/drop_forget_copy.rs:51:10\n-   |\n-51 |     drop(a2);\n-   |          ^^\n-\n-error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:53:5\n-   |\n-53 |     drop(a4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type &AnotherStruct\n-  --> $DIR/drop_forget_copy.rs:53:10\n-   |\n-53 |     drop(a4);\n-   |          ^^\n-\n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:56:5\n-   |\n-56 |     forget(a2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type &AnotherStruct\n-  --> $DIR/drop_forget_copy.rs:56:12\n-   |\n-56 |     forget(a2);\n-   |            ^^\n-\n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:58:5\n-   |\n-58 |     forget(a3);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type &AnotherStruct\n-  --> $DIR/drop_forget_copy.rs:58:12\n-   |\n-58 |     forget(a3);\n-   |            ^^\n-\n-error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_copy.rs:59:5\n-   |\n-59 |     forget(a4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type &AnotherStruct\n-  --> $DIR/drop_forget_copy.rs:59:12\n-   |\n-59 |     forget(a4);\n-   |            ^^\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "3bd36303ce80073ce1004a034d2ed7267ed814b4", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 200, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/75e28610a7f0910321d63b1776331bfde90b9f7d/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e28610a7f0910321d63b1776331bfde90b9f7d/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=75e28610a7f0910321d63b1776331bfde90b9f7d", "patch": "@@ -1,4 +1,4 @@\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:12:5\n    |\n 12 |     drop(&SomeStruct);\n@@ -15,20 +15,7 @@ note: argument has type &SomeStruct\n 12 |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:12:5\n-   |\n-12 |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(drop_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:12:10\n-   |\n-12 |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-\n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:13:5\n    |\n 13 |     forget(&SomeStruct);\n@@ -45,20 +32,7 @@ note: argument has type &SomeStruct\n 13 |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:13:5\n-   |\n-13 |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(forget_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:13:12\n-   |\n-13 |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:16:5\n    |\n 16 |     drop(&owned1);\n@@ -70,20 +44,7 @@ note: argument has type &SomeStruct\n 16 |     drop(&owned1);\n    |          ^^^^^^^\n \n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:16:5\n-   |\n-16 |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(drop_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:16:10\n-   |\n-16 |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:17:5\n    |\n 17 |     drop(&&owned1);\n@@ -95,20 +56,7 @@ note: argument has type &&SomeStruct\n 17 |     drop(&&owned1);\n    |          ^^^^^^^^\n \n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:17:5\n-   |\n-17 |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(drop_copy)] on by default\n-note: argument has type &&SomeStruct\n-  --> $DIR/drop_forget_ref.rs:17:10\n-   |\n-17 |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:18:5\n    |\n 18 |     drop(&mut owned1);\n@@ -120,7 +68,7 @@ note: argument has type &mut SomeStruct\n 18 |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:21:5\n    |\n 21 |     forget(&owned2);\n@@ -132,45 +80,19 @@ note: argument has type &SomeStruct\n 21 |     forget(&owned2);\n    |            ^^^^^^^\n \n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:21:5\n-   |\n-21 |     forget(&owned2);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(forget_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:21:12\n-   |\n-21 |     forget(&owned2);\n-   |            ^^^^^^^\n-\n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n-  --> $DIR/drop_forget_ref.rs:22:5\n-   |\n-22 |     forget(&&owned2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type &&SomeStruct\n-  --> $DIR/drop_forget_ref.rs:22:12\n-   |\n-22 |     forget(&&owned2);\n-   |            ^^^^^^^^\n-\n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:22:5\n    |\n 22 |     forget(&&owned2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(forget_copy)] on by default\n note: argument has type &&SomeStruct\n   --> $DIR/drop_forget_ref.rs:22:12\n    |\n 22 |     forget(&&owned2);\n    |            ^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:23:5\n    |\n 23 |     forget(&mut owned2);\n@@ -182,32 +104,19 @@ note: argument has type &mut SomeStruct\n 23 |     forget(&mut owned2);\n    |            ^^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n-  --> $DIR/drop_forget_ref.rs:27:5\n-   |\n-27 |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:27:10\n-   |\n-27 |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:27:5\n    |\n 27 |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(drop_copy)] on by default\n note: argument has type &SomeStruct\n   --> $DIR/drop_forget_ref.rs:27:10\n    |\n 27 |     drop(reference1);\n    |          ^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:28:5\n    |\n 28 |     forget(&*reference1);\n@@ -219,20 +128,7 @@ note: argument has type &SomeStruct\n 28 |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:28:5\n-   |\n-28 |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(forget_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:28:12\n-   |\n-28 |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:31:5\n    |\n 31 |     drop(reference2);\n@@ -244,7 +140,7 @@ note: argument has type &mut SomeStruct\n 31 |     drop(reference2);\n    |          ^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:33:5\n    |\n 33 |     forget(reference3);\n@@ -256,7 +152,7 @@ note: argument has type &mut SomeStruct\n 33 |     forget(reference3);\n    |            ^^^^^^^^^^\n \n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:36:5\n    |\n 36 |     drop(reference4);\n@@ -268,20 +164,7 @@ note: argument has type &SomeStruct\n 36 |     drop(reference4);\n    |          ^^^^^^^^^^\n \n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:36:5\n-   |\n-36 |     drop(reference4);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(drop_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:36:10\n-   |\n-36 |     drop(reference4);\n-   |          ^^^^^^^^^^\n-\n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:37:5\n    |\n 37 |     forget(reference4);\n@@ -293,20 +176,7 @@ note: argument has type &SomeStruct\n 37 |     forget(reference4);\n    |            ^^^^^^^^^^\n \n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:37:5\n-   |\n-37 |     forget(reference4);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(forget_copy)] on by default\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:37:12\n-   |\n-37 |     forget(reference4);\n-   |            ^^^^^^^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:42:5\n    |\n 42 |     drop(&val);\n@@ -318,20 +188,7 @@ note: argument has type &T\n 42 |     drop(&val);\n    |          ^^^^\n \n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:42:5\n-   |\n-42 |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-   = note: #[warn(drop_copy)] on by default\n-note: argument has type &T\n-  --> $DIR/drop_forget_ref.rs:42:10\n-   |\n-42 |     drop(&val);\n-   |          ^^^^\n-\n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:48:5\n    |\n 48 |     forget(&val);\n@@ -343,63 +200,24 @@ note: argument has type &T\n 48 |     forget(&val);\n    |            ^^^^\n \n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n-  --> $DIR/drop_forget_ref.rs:48:5\n-   |\n-48 |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: #[warn(forget_copy)] on by default\n-note: argument has type &T\n-  --> $DIR/drop_forget_ref.rs:48:12\n-   |\n-48 |     forget(&val);\n-   |            ^^^^\n-\n-error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n-  --> $DIR/drop_forget_ref.rs:56:5\n-   |\n-56 |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:56:20\n-   |\n-56 |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:56:5\n    |\n 56 |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(drop_copy)] on by default\n note: argument has type &SomeStruct\n   --> $DIR/drop_forget_ref.rs:56:20\n    |\n 56 |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n-error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n-  --> $DIR/drop_forget_ref.rs:59:5\n-   |\n-59 |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type &SomeStruct\n-  --> $DIR/drop_forget_ref.rs:59:22\n-   |\n-59 |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n-\n-warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:59:5\n    |\n 59 |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(forget_copy)] on by default\n note: argument has type &SomeStruct\n   --> $DIR/drop_forget_ref.rs:59:22\n    |"}]}