{"sha": "7fd3c27345c69c5f0eac5372467427408293c045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZDNjMjczNDVjNjljNWYwZWFjNTM3MjQ2NzQyNzQwODI5M2MwNDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-30T05:21:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-30T15:39:18Z"}, "message": "Write directly to the RETURN_PLACE in tuple_like_shim", "tree": {"sha": "f8aea51e6b986acc2db24fe37c14b46d6b23a9e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8aea51e6b986acc2db24fe37c14b46d6b23a9e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fd3c27345c69c5f0eac5372467427408293c045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd3c27345c69c5f0eac5372467427408293c045", "html_url": "https://github.com/rust-lang/rust/commit/7fd3c27345c69c5f0eac5372467427408293c045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fd3c27345c69c5f0eac5372467427408293c045/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07aecde4896c3752256eb8baded936b07fee4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07aecde4896c3752256eb8baded936b07fee4d0", "html_url": "https://github.com/rust-lang/rust/commit/e07aecde4896c3752256eb8baded936b07fee4d0"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "cc351368233c598fd6c0079736813a9f2d7939a8", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7fd3c27345c69c5f0eac5372467427408293c045/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fd3c27345c69c5f0eac5372467427408293c045/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=7fd3c27345c69c5f0eac5372467427408293c045", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         rcvr_field: Place<'tcx>,\n         next: BasicBlock,\n         cleanup: BasicBlock,\n-        place: Place<'tcx>\n+        dest: Place<'tcx>\n     ) {\n         let tcx = self.tcx;\n \n@@ -452,7 +452,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![statement], TerminatorKind::Call {\n             func,\n             args: vec![Operand::Move(ref_loc)],\n-            destination: Some((place, next)),\n+            destination: Some((dest, next)),\n             cleanup: Some(cleanup),\n         }, false);\n     }\n@@ -633,12 +633,13 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n         let rcvr = Place::Local(Local::new(1+0)).deref();\n \n-        let mut returns = Vec::new();\n+        let mut previous_place = None;\n+        let return_place = Place::Local(RETURN_PLACE);\n         for (i, ity) in tys.iter().enumerate() {\n-            let rcvr_field = rcvr.clone().field(Field::new(i), *ity);\n+            let field = Field::new(i);\n+            let rcvr_field = rcvr.clone().field(field, *ity);\n \n-            let place = self.make_place(Mutability::Not, ity);\n-            returns.push(place.clone());\n+            let place = return_place.clone().field(field, *ity);\n \n             // BB #(2i)\n             // `returns[i] = Clone::clone(&rcvr.i);`\n@@ -648,34 +649,26 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n                 rcvr_field,\n                 BasicBlock::new(2 * i + 2),\n                 BasicBlock::new(2 * i + 1),\n-                place\n+                place.clone()\n             );\n \n             // BB #(2i + 1) (cleanup)\n-            if i == 0 {\n-                // Nothing to drop, just resume.\n-                self.block(vec![], TerminatorKind::Resume, true);\n-            } else {\n+            if let Some(previous_place) = previous_place.take() {\n                 // Drop previous field and goto previous cleanup block.\n                 self.block(vec![], TerminatorKind::Drop {\n-                    location: returns[i - 1].clone(),\n+                    location: previous_place,\n                     target: BasicBlock::new(2 * i - 1),\n                     unwind: None,\n                 }, true);\n+            } else {\n+                // Nothing to drop, just resume.\n+                self.block(vec![], TerminatorKind::Resume, true);\n             }\n+\n+            previous_place = Some(place);\n         }\n \n-        // `return kind(returns[0], returns[1], ..., returns[tys.len() - 1]);`\n-        let ret_statement = self.make_statement(\n-            StatementKind::Assign(\n-                Place::Local(RETURN_PLACE),\n-                Rvalue::Aggregate(\n-                    box kind,\n-                    returns.into_iter().map(Operand::Move).collect()\n-                )\n-            )\n-        );\n-        self.block(vec![ret_statement], TerminatorKind::Return, false);\n+        self.block(vec![], TerminatorKind::Return, false);\n     }\n }\n "}]}