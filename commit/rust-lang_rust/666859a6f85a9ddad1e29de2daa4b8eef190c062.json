{"sha": "666859a6f85a9ddad1e29de2daa4b8eef190c062", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Njg1OWE2Zjg1YTlkZGFkMWUyOWRlMmRhYTRiOGVlZjE5MGMwNjI=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-11-15T22:06:58Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:15:56Z"}, "message": "Make late and late_anon regions track the bound var position", "tree": {"sha": "2da158ad955819854c184ad7ecd9c592a898e36a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da158ad955819854c184ad7ecd9c592a898e36a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666859a6f85a9ddad1e29de2daa4b8eef190c062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666859a6f85a9ddad1e29de2daa4b8eef190c062", "html_url": "https://github.com/rust-lang/rust/commit/666859a6f85a9ddad1e29de2daa4b8eef190c062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666859a6f85a9ddad1e29de2daa4b8eef190c062/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f82d348c1b9d9c20579ded7e2dd2981ed454b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f82d348c1b9d9c20579ded7e2dd2981ed454b9", "html_url": "https://github.com/rust-lang/rust/commit/84f82d348c1b9d9c20579ded7e2dd2981ed454b9"}], "stats": {"total": 153, "additions": 99, "deletions": 54}, "files": [{"sha": "58eb1e9aa12cb0aa4e61980155ace21c0ca33b8b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -115,7 +115,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n                     (\n-                        Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)),\n+                        Some(rl::Region::LateBoundAnon(debruijn_index, _, anon_index)),\n                         ty::BrAnon(br_index),\n                     ) => {\n                         debug!(\n@@ -143,7 +143,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // error. We will then search the function parameters for a bound\n                     // region at the right depth with the same index\n                     (\n-                        Some(rl::Region::LateBound(debruijn_index, id, _)),\n+                        Some(rl::Region::LateBound(debruijn_index, _, id, _)),\n                         ty::BrNamed(def_id, _),\n                     ) => {\n                         debug!(\n@@ -162,8 +162,8 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                             rl::Region::Static\n                             | rl::Region::Free(_, _)\n                             | rl::Region::EarlyBound(_, _, _)\n-                            | rl::Region::LateBound(_, _, _)\n-                            | rl::Region::LateBoundAnon(_, _),\n+                            | rl::Region::LateBound(_, _, _, _)\n+                            | rl::Region::LateBoundAnon(_, _, _),\n                         )\n                         | None,\n                         _,\n@@ -217,7 +217,10 @@ impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n         match (self.tcx.named_region(lifetime.hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n-            (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n+            (\n+                Some(rl::Region::LateBoundAnon(debruijn_index, _, anon_index)),\n+                ty::BrAnon(br_index),\n+            ) => {\n                 if debruijn_index == self.current_index && anon_index == br_index {\n                     self.found_it = true;\n                     return;\n@@ -232,7 +235,7 @@ impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n                 }\n             }\n \n-            (Some(rl::Region::LateBound(debruijn_index, id, _)), ty::BrNamed(def_id, _)) => {\n+            (Some(rl::Region::LateBound(debruijn_index, _, id, _)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\", debruijn_index,);\n                 debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n@@ -246,8 +249,8 @@ impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n                 Some(\n                     rl::Region::Static\n                     | rl::Region::EarlyBound(_, _, _)\n-                    | rl::Region::LateBound(_, _, _)\n-                    | rl::Region::LateBoundAnon(_, _)\n+                    | rl::Region::LateBound(_, _, _, _)\n+                    | rl::Region::LateBoundAnon(_, _, _)\n                     | rl::Region::Free(_, _),\n                 )\n                 | None,"}, {"sha": "988027219546b1c71081d1b31079c93b783e5f65", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -39,8 +39,13 @@ impl LifetimeDefOrigin {\n pub enum Region {\n     Static,\n     EarlyBound(/* index */ u32, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBound(ty::DebruijnIndex, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBoundAnon(ty::DebruijnIndex, /* anon index */ u32),\n+    LateBound(\n+        ty::DebruijnIndex,\n+        /* late-bound index */ u32,\n+        /* lifetime decl */ DefId,\n+        LifetimeDefOrigin,\n+    ),\n+    LateBoundAnon(ty::DebruijnIndex, /* late-bound index */ u32, /* anon index */ u32),\n     Free(DefId, /* lifetime decl */ DefId),\n }\n "}, {"sha": "8e0309225deeb21115c7e7067d6a2e6a3bedb817", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 75, "deletions": 39, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -42,9 +42,9 @@ pub enum LifetimeUseSet<'tcx> {\n trait RegionExt {\n     fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region);\n \n-    fn late(hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region);\n+    fn late(index: u32, hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region);\n \n-    fn late_anon(index: &Cell<u32>) -> Region;\n+    fn late_anon(named_late_bound_vars: u32, anon_index: &Cell<u32>) -> Region;\n \n     fn id(&self) -> Option<DefId>;\n \n@@ -67,53 +67,56 @@ impl RegionExt for Region {\n         (param.name.normalize_to_macros_2_0(), Region::EarlyBound(i, def_id.to_def_id(), origin))\n     }\n \n-    fn late(hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n+    fn late(idx: u32, hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\n             \"Region::late: param={:?} depth={:?} def_id={:?} origin={:?}\",\n             param, depth, def_id, origin,\n         );\n-        (param.name.normalize_to_macros_2_0(), Region::LateBound(depth, def_id.to_def_id(), origin))\n+        (\n+            param.name.normalize_to_macros_2_0(),\n+            Region::LateBound(depth, idx, def_id.to_def_id(), origin),\n+        )\n     }\n \n-    fn late_anon(index: &Cell<u32>) -> Region {\n+    fn late_anon(named_late_bound_vars: u32, index: &Cell<u32>) -> Region {\n         let i = index.get();\n         index.set(i + 1);\n         let depth = ty::INNERMOST;\n-        Region::LateBoundAnon(depth, i)\n+        Region::LateBoundAnon(depth, named_late_bound_vars + i, i)\n     }\n \n     fn id(&self) -> Option<DefId> {\n         match *self {\n             Region::Static | Region::LateBoundAnon(..) => None,\n \n-            Region::EarlyBound(_, id, _) | Region::LateBound(_, id, _) | Region::Free(_, id) => {\n+            Region::EarlyBound(_, id, _) | Region::LateBound(_, _, id, _) | Region::Free(_, id) => {\n                 Some(id)\n             }\n         }\n     }\n \n     fn shifted(self, amount: u32) -> Region {\n         match self {\n-            Region::LateBound(debruijn, id, origin) => {\n-                Region::LateBound(debruijn.shifted_in(amount), id, origin)\n+            Region::LateBound(debruijn, idx, id, origin) => {\n+                Region::LateBound(debruijn.shifted_in(amount), idx, id, origin)\n             }\n-            Region::LateBoundAnon(debruijn, index) => {\n-                Region::LateBoundAnon(debruijn.shifted_in(amount), index)\n+            Region::LateBoundAnon(debruijn, index, anon_index) => {\n+                Region::LateBoundAnon(debruijn.shifted_in(amount), index, anon_index)\n             }\n             _ => self,\n         }\n     }\n \n     fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n         match self {\n-            Region::LateBound(debruijn, id, origin) => {\n-                Region::LateBound(debruijn.shifted_out_to_binder(binder), id, origin)\n+            Region::LateBound(debruijn, index, id, origin) => {\n+                Region::LateBound(debruijn.shifted_out_to_binder(binder), index, id, origin)\n             }\n-            Region::LateBoundAnon(debruijn, index) => {\n-                Region::LateBoundAnon(debruijn.shifted_out_to_binder(binder), index)\n+            Region::LateBoundAnon(debruijn, index, anon_index) => {\n+                Region::LateBoundAnon(debruijn.shifted_out_to_binder(binder), index, anon_index)\n             }\n             _ => self,\n         }\n@@ -225,6 +228,8 @@ enum Scope<'a> {\n         /// of the resulting opaque type.\n         opaque_type_parent: bool,\n \n+        named_late_bound_vars: u32,\n+\n         s: ScopeRef<'a>,\n     },\n \n@@ -266,13 +271,15 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 next_early_index,\n                 track_lifetime_uses,\n                 opaque_type_parent,\n+                named_late_bound_vars,\n                 s: _,\n             } => f\n                 .debug_struct(\"Binder\")\n                 .field(\"lifetimes\", lifetimes)\n                 .field(\"next_early_index\", next_early_index)\n                 .field(\"track_lifetime_uses\", track_lifetime_uses)\n                 .field(\"opaque_type_parent\", opaque_type_parent)\n+                .field(\"named_late_bound_vars\", named_late_bound_vars)\n                 .field(\"s\", &\"..\")\n                 .finish(),\n             Scope::Body { id, s: _ } => {\n@@ -294,8 +301,9 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n #[derive(Clone, Debug)]\n enum Elide {\n     /// Use a fresh anonymous late-bound lifetime each time, by\n-    /// incrementing the counter to generate sequential indices.\n-    FreshLateAnon(Cell<u32>),\n+    /// incrementing the counter to generate sequential indices. All\n+    /// anonymous lifetimes must start *after* named bound vars.\n+    FreshLateAnon(u32, Cell<u32>),\n     /// Always use this one lifetime.\n     Exact(Region),\n     /// Less or more than one lifetime were found, error on unspecified.\n@@ -626,6 +634,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index: index + non_lifetime_count,\n                     opaque_type_parent: true,\n                     track_lifetime_uses,\n+                    named_late_bound_vars: 0,\n                     s: ROOT_SCOPE,\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -676,9 +685,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     lifetimes: c\n                         .generic_params\n                         .iter()\n-                        .filter_map(|param| match param.kind {\n+                        .enumerate()\n+                        .filter_map(|(idx, param)| match param.kind {\n                             GenericParamKind::Lifetime { .. } => {\n-                                Some(Region::late(&self.tcx.hir(), param))\n+                                Some(Region::late(idx as u32, &self.tcx.hir(), param))\n                             }\n                             _ => None,\n                         })\n@@ -687,6 +697,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n+                    named_late_bound_vars: c.generic_params.len() as u32,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     // a bare fn has no bounds, so everything\n@@ -721,7 +732,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // resolved the same as the `'_` in `&'_ Foo`.\n                         //\n                         // cc #48468\n-                        self.resolve_elided_lifetimes(vec![lifetime])\n+                        self.resolve_elided_lifetimes(&[lifetime])\n                     }\n                     LifetimeName::Param(_) | LifetimeName::Static => {\n                         // If the user wrote an explicit name, use that.\n@@ -784,7 +795,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // well-supported at the moment, so this doesn't work.\n                         // In the future, this should be fixed and this error should be removed.\n                         let def = self.map.defs.get(&lifetime.hir_id).cloned();\n-                        if let Some(Region::LateBound(_, def_id, _)) = def {\n+                        if let Some(Region::LateBound(_, _, def_id, _)) = def {\n                             if let Some(def_id) = def_id.as_local() {\n                                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                                 // Ensure that the parent of the def is an item, not HRTB\n@@ -874,6 +885,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             s: this.scope,\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n+                            named_late_bound_vars: 0,\n                         };\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n@@ -889,6 +901,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         s: self.scope,\n                         track_lifetime_uses: true,\n                         opaque_type_parent: false,\n+                        named_late_bound_vars: 0,\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         this.visit_generics(generics);\n@@ -941,6 +954,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n+                    named_late_bound_vars: 0,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1003,6 +1017,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n+                    named_late_bound_vars: 0,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1024,7 +1039,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         if lifetime_ref.is_elided() {\n-            self.resolve_elided_lifetimes(vec![lifetime_ref]);\n+            self.resolve_elided_lifetimes(&[lifetime_ref]);\n             return;\n         }\n         if lifetime_ref.is_static() {\n@@ -1087,9 +1102,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 }) => {\n                     let lifetimes: FxHashMap<_, _> = bound_generic_params\n                         .iter()\n-                        .filter_map(|param| match param.kind {\n+                        .enumerate()\n+                        .filter_map(|(idx, param)| match param.kind {\n                             GenericParamKind::Lifetime { .. } => {\n-                                Some(Region::late(&self.tcx.hir(), param))\n+                                Some(Region::late(idx as u32, &self.tcx.hir(), param))\n                             }\n                             _ => None,\n                         })\n@@ -1102,6 +1118,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             next_early_index,\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n+                            named_late_bound_vars: bound_generic_params.len() as u32,\n                         };\n                         let result = self.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n@@ -1145,6 +1162,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index: self.next_early_index(),\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n+                    named_late_bound_vars: 0,\n                 };\n                 self.with(scope, |_, this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1184,9 +1202,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 lifetimes: trait_ref\n                     .bound_generic_params\n                     .iter()\n-                    .filter_map(|param| match param.kind {\n+                    .enumerate()\n+                    .filter_map(|(idx, param)| match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::late(&self.tcx.hir(), param))\n+                            Some(Region::late(idx as u32, &self.tcx.hir(), param))\n                         }\n                         _ => None,\n                     })\n@@ -1195,6 +1214,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 next_early_index,\n                 track_lifetime_uses: true,\n                 opaque_type_parent: false,\n+                named_late_bound_vars: trait_ref.bound_generic_params.len() as u32,\n             };\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n@@ -1715,7 +1735,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .values()\n             .flat_map(|region| match region {\n                 Region::EarlyBound(_, def_id, _)\n-                | Region::LateBound(_, def_id, _)\n+                | Region::LateBound(_, _, def_id, _)\n                 | Region::Free(_, def_id) => Some(*def_id),\n \n                 Region::LateBoundAnon(..) | Region::Static => None,\n@@ -1886,13 +1906,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let mut non_lifetime_count = 0;\n+        let mut named_late_bound_vars = 0;\n         let lifetimes = generics\n             .params\n             .iter()\n-            .filter_map(|param| match param.kind {\n+            .enumerate()\n+            .filter_map(|(idx, param)| match param.kind {\n                 GenericParamKind::Lifetime { .. } => {\n                     if self.map.late_bound.contains(&param.hir_id) {\n-                        Some(Region::late(&self.tcx.hir(), param))\n+                        named_late_bound_vars += 1;\n+                        Some(Region::late(idx as u32, &self.tcx.hir(), param))\n                     } else {\n                         Some(Region::early(&self.tcx.hir(), &mut index, param))\n                     }\n@@ -1911,6 +1934,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             s: self.scope,\n             opaque_type_parent: true,\n             track_lifetime_uses: false,\n+            named_late_bound_vars,\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -2025,7 +2049,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             if !self.trait_definition_only && self.is_in_fn_syntax {\n                 match def {\n                     Region::EarlyBound(_, _, LifetimeDefOrigin::InBand)\n-                    | Region::LateBound(_, _, LifetimeDefOrigin::InBand) => {\n+                    | Region::LateBound(_, _, _, LifetimeDefOrigin::InBand) => {\n                         struct_span_err!(\n                             self.tcx.sess,\n                             lifetime_ref.span,\n@@ -2044,6 +2068,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n                     )\n                     | Region::LateBound(\n+                        _,\n                         _,\n                         _,\n                         LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n@@ -2079,7 +2104,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let mut elide_lifetimes = true;\n-        let lifetimes = generic_args\n+        let lifetimes: Vec<_> = generic_args\n             .args\n             .iter()\n             .filter_map(|arg| match arg {\n@@ -2093,7 +2118,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             })\n             .collect();\n         if elide_lifetimes {\n-            self.resolve_elided_lifetimes(lifetimes);\n+            self.resolve_elided_lifetimes(&lifetimes);\n         } else {\n             lifetimes.iter().for_each(|lt| self.visit_lifetime(lt));\n         }\n@@ -2261,7 +2286,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         inputs: &'tcx [hir::Ty<'tcx>],\n         output: Option<&'tcx hir::Ty<'tcx>>,\n     ) {\n-        let arg_scope = Scope::Elision { elide: Elide::FreshLateAnon(Cell::new(0)), s: self.scope };\n+        debug!(\"visit_fn_like_elision: enter\");\n+        let named_late_bound_vars = match *self.scope {\n+            Scope::Binder { named_late_bound_vars, .. } => named_late_bound_vars,\n+            Scope::Body { .. } => 0,\n+            _ => bug!(\"{:?}\", self.scope),\n+        };\n+        let arg_scope = Scope::Elision {\n+            elide: Elide::FreshLateAnon(named_late_bound_vars, Cell::new(0)),\n+            s: self.scope,\n+        };\n         self.with(arg_scope, |_, this| {\n             for input in inputs {\n                 this.visit_ty(input);\n@@ -2516,7 +2550,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n                 if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n                     match lifetime {\n-                        Region::LateBound(debruijn, _, _) | Region::LateBoundAnon(debruijn, _)\n+                        Region::LateBound(debruijn, _, _, _)\n+                        | Region::LateBoundAnon(debruijn, _, _)\n                             if debruijn < self.outer_index =>\n                         {\n                             self.have_bound_regions = true;\n@@ -2530,7 +2565,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_elided_lifetimes(&mut self, lifetime_refs: Vec<&'tcx hir::Lifetime>) {\n+    fn resolve_elided_lifetimes(&mut self, lifetime_refs: &[&'tcx hir::Lifetime]) {\n         debug!(\"resolve_elided_lifetimes(lifetime_refs={:?})\", lifetime_refs);\n \n         if lifetime_refs.is_empty() {\n@@ -2563,9 +2598,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::Elision { ref elide, ref s, .. } => {\n                     let lifetime = match *elide {\n-                        Elide::FreshLateAnon(ref counter) => {\n+                        Elide::FreshLateAnon(named_late_bound_vars, ref counter) => {\n                             for lifetime_ref in lifetime_refs {\n-                                let lifetime = Region::late_anon(counter).shifted(late_depth);\n+                                let lifetime = Region::late_anon(named_late_bound_vars, counter)\n+                                    .shifted(late_depth);\n                                 self.insert_lifetime(lifetime_ref, lifetime);\n                             }\n                             return;\n@@ -2890,7 +2926,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 // A lifetime only used in a fn argument could as well\n                 // be replaced with `'_`, as that would generate a\n                 // fresh name, too.\n-                Scope::Elision { elide: Elide::FreshLateAnon(_), .. } => break true,\n+                Scope::Elision { elide: Elide::FreshLateAnon(_, _), .. } => break true,\n \n                 // In the return type or other such place, `'_` is not\n                 // going to make a fresh name, so we cannot\n@@ -2919,7 +2955,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             Region::Free(_, def_id)\n-            | Region::LateBound(_, def_id, _)\n+            | Region::LateBound(_, _, def_id, _)\n             | Region::EarlyBound(_, def_id, _) => {\n                 // A lifetime declared by the user.\n                 let track_lifetime_uses = self.track_lifetime_uses();"}, {"sha": "711466e774dfcac74ac2169fb2b004deb7274ba6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -210,14 +210,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => tcx.lifetimes.re_static,\n \n-            Some(rl::Region::LateBound(debruijn, id, _)) => {\n+            Some(rl::Region::LateBound(debruijn, _, id, _)) => {\n                 let name = lifetime_name(id.expect_local());\n                 let br = ty::BoundRegion { kind: ty::BrNamed(id, name) };\n                 tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n \n-            Some(rl::Region::LateBoundAnon(debruijn, index)) => {\n-                let br = ty::BoundRegion { kind: ty::BrAnon(index) };\n+            Some(rl::Region::LateBoundAnon(debruijn, _index, anon_index)) => {\n+                let br = ty::BoundRegion { kind: ty::BrAnon(anon_index) };\n                 tcx.mk_region(ty::ReLateBound(debruijn, br))\n             }\n "}, {"sha": "ed4c0f8b828fd7230fbaefce4d258ff51dcc3026", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -1244,7 +1244,8 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n                 Some(\n-                    rl::Region::LateBound(debruijn, _, _) | rl::Region::LateBoundAnon(debruijn, _),\n+                    rl::Region::LateBound(debruijn, _, _, _)\n+                    | rl::Region::LateBoundAnon(debruijn, _, _),\n                 ) if debruijn < self.outer_index => {}\n                 Some(\n                     rl::Region::LateBound(..)"}, {"sha": "58869296d09e9467feecd01432f976e82617e85f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/666859a6f85a9ddad1e29de2daa4b8eef190c062/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666859a6f85a9ddad1e29de2daa4b8eef190c062/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=666859a6f85a9ddad1e29de2daa4b8eef190c062", "patch": "@@ -352,7 +352,7 @@ impl Clean<Lifetime> for hir::Lifetime {\n         match def {\n             Some(\n                 rl::Region::EarlyBound(_, node_id, _)\n-                | rl::Region::LateBound(_, node_id, _)\n+                | rl::Region::LateBound(_, _, node_id, _)\n                 | rl::Region::Free(_, node_id),\n             ) => {\n                 if let Some(lt) = cx.lt_substs.get(&node_id).cloned() {"}]}