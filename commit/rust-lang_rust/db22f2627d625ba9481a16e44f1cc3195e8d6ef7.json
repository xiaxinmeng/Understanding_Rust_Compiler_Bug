{"sha": "db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjJmMjYyN2Q2MjViYTk0ODFhMTZlNDRmMWNjMzE5NWU4ZDZlZjc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T18:00:14Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T18:06:26Z"}, "message": "std: Implement .rposition() on double-ended iterators with known size\n\nThis is a generalization of the vector .rposition() method, to all\ndouble-ended iterators that have the ExactSizeHint trait.\n\nThis resolves the slight asymmetry around `position` and `rposition`\n\n* position from front is `vec.iter().position()`\n* position from the back was, `vec.rposition()` is now `vec.iter().rposition()`\n\nAdditionally, other indexed sequences (only `extra::ringbuf` I think),\nwill have the same method available once it implements ExactSizeHint.", "tree": {"sha": "05798c19961773f2bc6469599d280232ee7dcf88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05798c19961773f2bc6469599d280232ee7dcf88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "html_url": "https://github.com/rust-lang/rust/commit/db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/comments", "author": null, "committer": null, "parents": [{"sha": "e7955b2a7d880ecf2de30e5bc3a452bea0db4fd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7955b2a7d880ecf2de30e5bc3a452bea0db4fd4", "html_url": "https://github.com/rust-lang/rust/commit/e7955b2a7d880ecf2de30e5bc3a452bea0db4fd4"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "cb76422815530686b23e5f562edeab5f15be9fef", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "patch": "@@ -525,7 +525,7 @@ impl BigUint {\n     #[inline]\n     pub fn new(v: ~[BigDigit]) -> BigUint {\n         // omit trailing zeros\n-        let new_len = v.rposition(|n| *n != 0).map_move_default(0, |p| p + 1);\n+        let new_len = v.iter().rposition(|n| *n != 0).map_move_default(0, |p| p + 1);\n \n         if new_len == v.len() { return BigUint { data: v }; }\n         let mut v = v;"}, {"sha": "d1b59c30978623add267fd0de27f5644b48225ec", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "patch": "@@ -18,7 +18,7 @@ implementing the `Iterator` trait.\n */\n \n use cmp;\n-use num::{Zero, One, Integer, CheckedAdd, Saturating};\n+use num::{Zero, One, Integer, CheckedAdd, CheckedSub, Saturating};\n use option::{Option, Some, None};\n use ops::{Add, Mul, Sub};\n use cmp::Ord;\n@@ -604,6 +604,37 @@ impl<'self, A, T: DoubleEndedIterator<&'self mut A>> MutableDoubleEndedIterator\n     }\n }\n \n+/// A double-ended iterator with known size\n+pub trait ExactSizeDoubleEndedIterator<A> {\n+    /// Return the index of the last element satisfying the specified predicate\n+    ///\n+    /// If no element matches, None is returned.\n+    #[inline]\n+    fn rposition(&mut self, predicate: &fn(A) -> bool) -> Option<uint>;\n+}\n+\n+impl<A, T: DoubleEndedIterator<A> + ExactSizeHint> ExactSizeDoubleEndedIterator<A> for T {\n+    fn rposition(&mut self, predicate: &fn(A) -> bool) -> Option<uint> {\n+        let (size, _) = self.size_hint();\n+        let mut i = size;\n+        loop {\n+            match self.next_back() {\n+                None => break,\n+                Some(x) => {\n+                    i = match i.checked_sub(&1) {\n+                        Some(x) => x,\n+                        None => fail!(\"rposition: incorrect ExactSizeHint\")\n+                    };\n+                    if predicate(x) {\n+                        return Some(i)\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n+}\n+\n /// An object implementing random access indexing by `uint`\n ///\n /// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`."}, {"sha": "e8eb6d871ee677960d23894f48b158d83e9b9169", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "patch": "@@ -52,7 +52,7 @@ pub use hash::Hash;\n pub use num::Times;\n pub use iterator::{FromIterator, Extendable};\n pub use iterator::{Iterator, DoubleEndedIterator, RandomAccessIterator, ClonableIterator};\n-pub use iterator::{OrdIterator, MutableDoubleEndedIterator};\n+pub use iterator::{OrdIterator, MutableDoubleEndedIterator, ExactSizeDoubleEndedIterator};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "39560bd47e61af326f915b40604b2ac9ac3a8f80", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db22f2627d625ba9481a16e44f1cc3195e8d6ef7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=db22f2627d625ba9481a16e44f1cc3195e8d6ef7", "patch": "@@ -274,7 +274,7 @@ impl<'self, T> Iterator<&'self [T]> for RSplitIterator<'self, T> {\n             return Some(self.v);\n         }\n \n-        match self.v.rposition(|x| (self.pred)(x)) {\n+        match self.v.iter().rposition(|x| (self.pred)(x)) {\n             None => {\n                 self.finished = true;\n                 Some(self.v)\n@@ -832,7 +832,6 @@ pub trait ImmutableVector<'self, T> {\n     fn initn(&self, n: uint) -> &'self [T];\n     fn last(&self) -> &'self T;\n     fn last_opt(&self) -> Option<&'self T>;\n-    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n     fn flat_map<U>(&self, f: &fn(t: &T) -> ~[U]) -> ~[U];\n     unsafe fn unsafe_ref(&self, index: uint) -> *T;\n \n@@ -1048,21 +1047,6 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n             if self.len() == 0 { None } else { Some(&self[self.len() - 1]) }\n     }\n \n-    /**\n-     * Find the last index matching some predicate\n-     *\n-     * Apply function `f` to each element of `v` in reverse order.  When\n-     * function `f` returns true then an option containing the index is\n-     * returned. If `f` matches no elements then None is returned.\n-     */\n-    #[inline]\n-    fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint> {\n-        for (i, t) in self.rev_iter().enumerate() {\n-            if f(t) { return Some(self.len() - i - 1); }\n-        }\n-        None\n-    }\n-\n     /**\n      * Apply a function to each element of a vector and return a concatenation\n      * of each result vector\n@@ -1145,7 +1129,7 @@ impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n     /// Find the last index containing a matching value\n     #[inline]\n     fn rposition_elem(&self, t: &T) -> Option<uint> {\n-        self.rposition(|x| *x == *t)\n+        self.iter().rposition(|x| *x == *t)\n     }\n \n     /// Return true if a vector contains an element with the given value\n@@ -2932,8 +2916,8 @@ mod tests {\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert_eq!(v.rposition(f), Some(3u));\n-        assert!(v.rposition(g).is_none());\n+        assert_eq!(v.iter().rposition(f), Some(3u));\n+        assert!(v.iter().rposition(g).is_none());\n     }\n \n     #[test]\n@@ -3215,20 +3199,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_rposition_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do v.rposition |_elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 1;\n-            false\n-        };\n-    }\n-\n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {"}]}