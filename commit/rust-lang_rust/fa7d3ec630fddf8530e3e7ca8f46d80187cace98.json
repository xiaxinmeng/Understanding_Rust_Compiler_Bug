{"sha": "fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "node_id": "C_kwDOAAsO6NoAKGZhN2QzZWM2MzBmZGRmODUzMGUzZTdjYThmNDZkODAxODdjYWNlOTg", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-12-06T03:48:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T03:48:52Z"}, "message": "Rollup merge of #105289 - Rageking8:fix-dupe-word-typos, r=cjgillot\n\nFix dupe word typos", "tree": {"sha": "275419c9f309990128cee81c604c35ebc3e3bc8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275419c9f309990128cee81c604c35ebc3e3bc8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjrukCRBK7hj4Ov3rIwAAoecIADL9fvdo+zzvhMxCPS05O/DA\n40ImQuy9edtCw8mbrXvJZhjnSZMqM1XX/gElmdRALaOLxFYqnRRRiDZ6LUUgOvjN\ngV8eB+XxqQGmmg1qcDG7CPZJML3hP0Ss313sdNLCEUPcSBL5FuFxSWClubHCFo+K\nzqSEPluQmv8iDktapAjPaqQqt7QUFRnJYcAI2K/BJP6SWwu1FDygkFyL9sbUBc1b\nAKDZrOGYkDFibpxCGelK1FcfCrODYGMfR+Vq3ZUCqttu8pKte0B9pcMNBbmK8gH+\nKZAwqKcw0gsamBcY8sNSWAWkknWTMjIKt5gGXqG9LOsHd4s8WuLQh6WF/N9bh1U=\n=SNHI\n-----END PGP SIGNATURE-----\n", "payload": "tree 275419c9f309990128cee81c604c35ebc3e3bc8d\nparent f04454d4c8d2c283b2d2ae9b71cad347fdebc42b\nparent 58110572fb23e0ad1944bdf3d8cdb3f84cb91aa2\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1670298532 +0900\ncommitter GitHub <noreply@github.com> 1670298532 +0900\n\nRollup merge of #105289 - Rageking8:fix-dupe-word-typos, r=cjgillot\n\nFix dupe word typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "html_url": "https://github.com/rust-lang/rust/commit/fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04454d4c8d2c283b2d2ae9b71cad347fdebc42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04454d4c8d2c283b2d2ae9b71cad347fdebc42b", "html_url": "https://github.com/rust-lang/rust/commit/f04454d4c8d2c283b2d2ae9b71cad347fdebc42b"}, {"sha": "58110572fb23e0ad1944bdf3d8cdb3f84cb91aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/58110572fb23e0ad1944bdf3d8cdb3f84cb91aa2", "html_url": "https://github.com/rust-lang/rust/commit/58110572fb23e0ad1944bdf3d8cdb3f84cb91aa2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3dfded2d930a052c305859ed257536285303eda8", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -240,7 +240,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                     let align = ImmTy::from_uint(target_align, args[1].layout).into();\n                     let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty())?;\n \n-                    // We replace the entire entire function call with a \"tail call\".\n+                    // We replace the entire function call with a \"tail call\".\n                     // Note that this happens before the frame of the original function\n                     // is pushed on the stack.\n                     self.eval_fn_call("}, {"sha": "7df0114226418c890378eea776e08cc4b6b82973", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -406,7 +406,7 @@ impl<V: Clone> Clone for StateData<V> {\n /// The dataflow state for an instance of [`ValueAnalysis`].\n ///\n /// Every instance specifies a lattice that represents the possible values of a single tracked\n-/// place. If we call this lattice `V` and set set of tracked places `P`, then a [`State`] is an\n+/// place. If we call this lattice `V` and set of tracked places `P`, then a [`State`] is an\n /// element of `{unreachable} \u222a (P -> V)`. This again forms a lattice, where the bottom element is\n /// `unreachable` and the top element is the mapping `p \u21a6 \u22a4`. Note that the mapping `p \u21a6 \u22a5` is not\n /// the bottom element (because joining an unreachable and any other reachable state yields a"}, {"sha": "cf3e5946053fe514f5b9195784e93e37d63e053f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -1927,7 +1927,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 // We have a single lifetime => success.\n                                 elision_lifetime = Elision::Param(res)\n                             } else {\n-                                // We have have multiple lifetimes => error.\n+                                // We have multiple lifetimes => error.\n                                 elision_lifetime = Elision::Err;\n                             }\n                         }"}, {"sha": "fd8d25ce1a55e3b2280652cbf9bf2ac593edf4fd", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -20,7 +20,7 @@ use crate::mem::ManuallyDrop;\n /// #![feature(iter_repeat_n)]\n /// use std::iter;\n ///\n-/// // four of the the number four:\n+/// // four of the number four:\n /// let mut four_fours = iter::repeat_n(4, 4);\n ///\n /// assert_eq!(Some(4), four_fours.next());"}, {"sha": "19da6d2fbecbc678960fcd282219f63cc5c2264a", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -1894,7 +1894,7 @@ unsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n     // Thus, derefencing both `px` and `py` in the loop below is safe.\n     //\n     // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n-    // end of of `px` and `py`. Thus, the final dereference outside of the\n+    // end of `px` and `py`. Thus, the final dereference outside of the\n     // loop is guaranteed to be valid. (The final comparison will overlap with\n     // the last comparison done in the loop for lengths that aren't multiples\n     // of four.)"}, {"sha": "f71edc6c525a2aeb61abe424c19588741786326b", "filename": "library/std/src/sync/mpmc/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -225,7 +225,7 @@ impl<T> Channel<T> {\n             let slot = unsafe { self.buffer.get_unchecked(index) };\n             let stamp = slot.stamp.load(Ordering::Acquire);\n \n-            // If the the stamp is ahead of the head by 1, we may attempt to pop.\n+            // If the stamp is ahead of the head by 1, we may attempt to pop.\n             if head + 1 == stamp {\n                 let new = if index + 1 < self.cap {\n                     // Same lap, incremented index."}, {"sha": "ada69aa8269f6cb1ea4779486c5e07d90e8c30a6", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -46,7 +46,7 @@ impl ScopeData {\n         // We check for 'overflow' with usize::MAX / 2, to make sure there's no\n         // chance it overflows to 0, which would result in unsoundness.\n         if self.num_running_threads.fetch_add(1, Ordering::Relaxed) > usize::MAX / 2 {\n-            // This can only reasonably happen by mem::forget()'ing many many ScopedJoinHandles.\n+            // This can only reasonably happen by mem::forget()'ing a lot of ScopedJoinHandles.\n             self.decrement_num_running_threads(false);\n             panic!(\"too many running threads in thread scope\");\n         }"}, {"sha": "a8deb8a7550bc5e5ea8e7ec586386ec431061595", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7d3ec630fddf8530e3e7ca8f46d80187cace98/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs?ref=fa7d3ec630fddf8530e3e7ca8f46d80187cace98", "patch": "@@ -5,7 +5,7 @@ struct Foo {\n \n impl PartialEq for Foo {\n     fn eq(&self, _: &Foo) -> bool {\n-        false // ha ha sucker!\n+        false // ha ha!\n     }\n }\n "}]}