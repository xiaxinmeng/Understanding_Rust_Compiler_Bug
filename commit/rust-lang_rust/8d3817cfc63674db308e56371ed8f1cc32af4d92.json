{"sha": "8d3817cfc63674db308e56371ed8f1cc32af4d92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMzgxN2NmYzYzNjc0ZGIzMDhlNTYzNzFlZDhmMWNjMzJhZjRkOTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-07T09:20:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-07T09:20:46Z"}, "message": "use usize instead of u64 for memory limits", "tree": {"sha": "de81a85f1de902cbd303f57625a31f298b309ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de81a85f1de902cbd303f57625a31f298b309ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3817cfc63674db308e56371ed8f1cc32af4d92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXfh7uAAoJEFbW7qD8Z6xGjyQQAKoVsB13KRF4P1r28dfm7zPW\nzv1BKUtZZd4sIyRySAHZ7qdrkbfrZIFM3idD+O6pzfou7WsCdY7ZmKBKXtVsMqOS\nui3xn1uKlTpqeJnD/TELb6W8iRPzX7f8xD7HMmNv9wKRYQuHG2g6lT5y/qkegpLY\nm7Oz7W+eoGQai2Be5bkGxMtnhctiqI1clI9v4tpsOw2M+Gr2a3KNQ64JYVdxPTdb\nLvxQvp/4t2O4GMaOX+EVVA4op5M1b5x0QH91fXVbtGoOVzg2V4WyObfIPHWUbfmY\nVIcgpqvveujwhqS+3H6ObyNMDt9tKUNtfW8QQ3Tn0/h6ntuZWFHMmtgnzIaq34Yu\nysSCTj63dAJxmdFnQFQuN2dO3cNfGHVlKJSLTbExGsLxOqkYRIf8X84+0poovUZh\nRRGVU+eXclc6WirqUra9eeqQeLXokX0RAj8zWtMM0xXkaHBrofYAgyL4tw6v+++s\nv7DNgLBUgE4tiHp3WY6zJExTxoS+r8hfSer+FWbcSRkI6Pv8yurFrT0BrYB7kIiy\nTVKgg818D/ppJwAze5ekXge//6ZbQNrtKZQV7WE+ZbIRN1snyhUG0mE90Z0veAJO\nw7moemQi+gfyyXymlwgbxX0IgMZGYFZ3Kj733yYrO31A3hih5VzlvbdocuKxrTsU\nMpp8hTNL+m4FOHBLBU8Z\n=NkHf\n-----END PGP SIGNATURE-----", "payload": "tree de81a85f1de902cbd303f57625a31f298b309ca4\nparent a7d3a85d9e22e978e8156c2ad57b9d3c4a67dd13\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467883246 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467883246 +0200\n\nuse usize instead of u64 for memory limits"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3817cfc63674db308e56371ed8f1cc32af4d92", "html_url": "https://github.com/rust-lang/rust/commit/8d3817cfc63674db308e56371ed8f1cc32af4d92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3817cfc63674db308e56371ed8f1cc32af4d92/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d3a85d9e22e978e8156c2ad57b9d3c4a67dd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d3a85d9e22e978e8156c2ad57b9d3c4a67dd13", "html_url": "https://github.com/rust-lang/rust/commit/a7d3a85d9e22e978e8156c2ad57b9d3c4a67dd13"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "2d723e692352522afe291bd0c938e87133a8c132", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=8d3817cfc63674db308e56371ed8f1cc32af4d92", "patch": "@@ -30,9 +30,9 @@ pub enum EvalError<'tcx> {\n     Math(Span, ConstMathErr),\n     InvalidChar(u32),\n     OutOfMemory {\n-        allocation_size: u64,\n-        memory_size: u64,\n-        memory_usage: u64,\n+        allocation_size: usize,\n+        memory_size: usize,\n+        memory_usage: usize,\n     },\n     ExecutionTimeLimitReached,\n     StackFrameLimitReached,"}, {"sha": "04d7d9f9d0509598cb539fdd6e4b41be3693d563", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=8d3817cfc63674db308e56371ed8f1cc32af4d92", "patch": "@@ -136,16 +136,15 @@ enum ConstantKind {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: u64, stack_limit: u64) -> Self {\n-        assert_eq!(stack_limit as usize as u64, stack_limit);\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n         EvalContext {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n             memory: Memory::new(&tcx.data_layout, memory_size),\n             statics: HashMap::new(),\n             stack: Vec::new(),\n-            stack_limit: stack_limit as usize,\n+            stack_limit: stack_limit,\n         }\n     }\n \n@@ -937,9 +936,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir_map: &'a MirMap<'tcx>,\n     node_id: ast::NodeId,\n-    memory_size: u64,\n+    memory_size: usize,\n     step_limit: u64,\n-    stack_limit: u64,\n+    stack_limit: usize,\n ) {\n     let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n     let def_id = tcx.map.local_def_id(node_id);"}, {"sha": "79130b4e24b1d5c7ca0288f43f5cc25ed000a7bc", "filename": "src/memory.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3817cfc63674db308e56371ed8f1cc32af4d92/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=8d3817cfc63674db308e56371ed8f1cc32af4d92", "patch": "@@ -67,9 +67,9 @@ pub struct Memory<'a, 'tcx> {\n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations)\n     alloc_map: HashMap<AllocId, Allocation>,\n     /// Number of virtual bytes allocated\n-    memory_usage: u64,\n+    memory_usage: usize,\n     /// Maximum number of virtual bytes that may be allocated\n-    memory_size: u64,\n+    memory_size: usize,\n     /// Function \"allocations\". They exist solely so pointers have something to point to, and\n     /// we can figure out what they point to.\n     functions: HashMap<AllocId, FunctionDefinition<'tcx>>,\n@@ -82,7 +82,7 @@ pub struct Memory<'a, 'tcx> {\n const ZST_ALLOC_ID: AllocId = AllocId(0);\n \n impl<'a, 'tcx> Memory<'a, 'tcx> {\n-    pub fn new(layout: &'a TargetDataLayout, max_memory: u64) -> Self {\n+    pub fn new(layout: &'a TargetDataLayout, max_memory: usize) -> Self {\n         let mut mem = Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n@@ -137,14 +137,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(Pointer::zst_ptr());\n         }\n-        if self.memory_size - self.memory_usage < size as u64 {\n+        if self.memory_size - self.memory_usage < size {\n             return Err(EvalError::OutOfMemory {\n-                allocation_size: size as u64,\n+                allocation_size: size,\n                 memory_size: self.memory_size,\n                 memory_usage: self.memory_usage,\n             });\n         }\n-        self.memory_usage += size as u64;\n+        self.memory_usage += size;\n         let alloc = Allocation {\n             bytes: vec![0; size],\n             relocations: BTreeMap::new(),\n@@ -174,14 +174,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n         if new_size > size {\n             let amount = new_size - size;\n-            self.memory_usage += amount as u64;\n+            self.memory_usage += amount;\n             let alloc = self.get_mut(ptr.alloc_id)?;\n             alloc.bytes.extend(iter::repeat(0).take(amount));\n             alloc.undef_mask.grow(amount, false);\n         } else if size > new_size {\n             // it's possible to cause miri to use arbitrary amounts of memory that aren't detectable\n             // through the memory_usage value, by allocating a lot and reallocating to zero\n-            self.memory_usage -= (size - new_size) as u64;\n+            self.memory_usage -= size - new_size;\n             self.clear_relocations(ptr.offset(new_size as isize), size - new_size)?;\n             let alloc = self.get_mut(ptr.alloc_id)?;\n             alloc.bytes.truncate(new_size);\n@@ -202,7 +202,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n \n         if let Some(alloc) = self.alloc_map.remove(&ptr.alloc_id) {\n-            self.memory_usage -= alloc.bytes.len() as u64;\n+            self.memory_usage -= alloc.bytes.len();\n         } else {\n             debug!(\"deallocated a pointer twice: {}\", ptr.alloc_id);\n             // TODO(solson): Report error about erroneous free. This is blocked on properly tracking"}]}