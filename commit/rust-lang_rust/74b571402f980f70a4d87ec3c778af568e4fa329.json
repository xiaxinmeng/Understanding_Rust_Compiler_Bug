{"sha": "74b571402f980f70a4d87ec3c778af568e4fa329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YjU3MTQwMmY5ODBmNzBhNGQ4N2VjM2M3NzhhZjU2OGU0ZmEzMjk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-25T16:11:20Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-11-18T14:56:26Z"}, "message": "Use `drop_in_place` in `array::IntoIter::drop`\n\nThis skips the loop when the element type is known not to have drop glue, even in debug mode.", "tree": {"sha": "abfad347e5f2a16d428988e4bec341880fbb2d22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abfad347e5f2a16d428988e4bec341880fbb2d22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b571402f980f70a4d87ec3c778af568e4fa329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b571402f980f70a4d87ec3c778af568e4fa329", "html_url": "https://github.com/rust-lang/rust/commit/74b571402f980f70a4d87ec3c778af568e4fa329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b571402f980f70a4d87ec3c778af568e4fa329/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "html_url": "https://github.com/rust-lang/rust/commit/a0d40f8bdfcc3c28355467973f97fd4c45ac5876"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "aab9463e3aade248452fb74a883dd77e92ab28a4", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74b571402f980f70a4d87ec3c778af568e4fa329/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b571402f980f70a4d87ec3c778af568e4fa329/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=74b571402f980f70a4d87ec3c778af568e4fa329", "patch": "@@ -92,6 +92,18 @@ where\n             mem::transmute::<&[MaybeUninit<T>], &[T]>(slice)\n         }\n     }\n+\n+    /// Returns a mutable slice of all elements that have not been yielded yet.\n+    fn as_mut_slice(&mut self) -> &mut [T] {\n+        // This transmute is safe, same as in `as_slice` above.\n+        let slice = &mut self.data[self.alive.clone()];\n+        // SAFETY: This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n+        // the size and alignment of `T`. Furthermore, we know that all\n+        // elements within `alive` are properly initialized.\n+        unsafe {\n+            mem::transmute::<&mut [MaybeUninit<T>], &mut [T]>(slice)\n+        }\n+    }\n }\n \n \n@@ -184,10 +196,12 @@ where\n     [T; N]: LengthAtMost32,\n {\n     fn drop(&mut self) {\n-        // We simply drop each element via `for_each`. This should not incur\n-        // any significant runtime overhead and avoids adding another `unsafe`\n-        // block.\n-        self.by_ref().for_each(drop);\n+        // SAFETY: This is safe: `as_mut_slice` returns exactly the sub-slice\n+        // of elements that have not been moved out yet and that remain\n+        // to be dropped.\n+        unsafe {\n+            ptr::drop_in_place(self.as_mut_slice())\n+        }\n     }\n }\n "}]}