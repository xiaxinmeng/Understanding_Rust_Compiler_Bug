{"sha": "daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTA3NDU4ODZjMjM4MmMzN2Q1ZDM0NWY0YzViMWI4ZjdiOWEzODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-03T22:57:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-03T22:57:40Z"}, "message": "auto merge of #18749 : nikomatsakis/rust/builtin-bounds-like-other-traits, r=pcwalton\n\nTreat builtin bounds like all other kinds of trait matches. Introduce a simple hashset in the fulfillment context to catch cases where we register the exact same obligation twice. This helps prevent duplicate error reports but also handles the recursive obligations created by builtin bounds.\r\n\r\nr? @pcwalton \r\ncc @FlaPer87", "tree": {"sha": "d5cfba1aad65a35c42d8563a75df82901e66eaf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5cfba1aad65a35c42d8563a75df82901e66eaf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "html_url": "https://github.com/rust-lang/rust/commit/daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc379a66eae8504b663b0032da518595335d872", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc379a66eae8504b663b0032da518595335d872", "html_url": "https://github.com/rust-lang/rust/commit/dbc379a66eae8504b663b0032da518595335d872"}, {"sha": "931758c88a3d6deb95d55ef30fba71144815009e", "url": "https://api.github.com/repos/rust-lang/rust/commits/931758c88a3d6deb95d55ef30fba71144815009e", "html_url": "https://github.com/rust-lang/rust/commit/931758c88a3d6deb95d55ef30fba71144815009e"}], "stats": {"total": 166, "additions": 112, "deletions": 54}, "files": [{"sha": "25c86be993f70e86ea81dde9f8af69d0769449cb", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -11,6 +11,8 @@\n use middle::mem_categorization::Typer;\n use middle::ty;\n use middle::typeck::infer::InferCtxt;\n+use std::collections::HashSet;\n+use std::rc::Rc;\n use util::ppaux::Repr;\n \n use super::CodeAmbiguity;\n@@ -30,6 +32,13 @@ use super::select::SelectionContext;\n /// method `select_all_or_error` can be used to report any remaining\n /// ambiguous cases as errors.\n pub struct FulfillmentContext<'tcx> {\n+    // a simple cache that aims to cache *exact duplicate obligations*\n+    // and avoid adding them twice. This serves a different purpose\n+    // than the `SelectionCache`: it avoids duplicate errors and\n+    // permits recursive obligations, which are often generated from\n+    // traits like `Send` et al.\n+    duplicate_set: HashSet<Rc<ty::TraitRef<'tcx>>>,\n+\n     // A list of all obligations that have been registered with this\n     // fulfillment context.\n     trait_obligations: Vec<Obligation<'tcx>>,\n@@ -43,6 +52,7 @@ pub struct FulfillmentContext<'tcx> {\n impl<'tcx> FulfillmentContext<'tcx> {\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n+            duplicate_set: HashSet::new(),\n             trait_obligations: Vec::new(),\n             attempted_mark: 0,\n         }\n@@ -52,9 +62,13 @@ impl<'tcx> FulfillmentContext<'tcx> {\n                                tcx: &ty::ctxt<'tcx>,\n                                obligation: Obligation<'tcx>)\n     {\n-        debug!(\"register_obligation({})\", obligation.repr(tcx));\n-        assert!(!obligation.trait_ref.has_escaping_regions());\n-        self.trait_obligations.push(obligation);\n+        if self.duplicate_set.insert(obligation.trait_ref.clone()) {\n+            debug!(\"register_obligation({})\", obligation.repr(tcx));\n+            assert!(!obligation.trait_ref.has_escaping_regions());\n+            self.trait_obligations.push(obligation);\n+        } else {\n+            debug!(\"register_obligation({}) -- already seen, skip\", obligation.repr(tcx));\n+        }\n     }\n \n     pub fn select_all_or_error<'a>(&mut self,"}, {"sha": "71a183b475c6f370438d76c8e6e642c8a846969b", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -113,7 +113,7 @@ pub enum MethodMatchedData {\n /// candidate is one that might match or might not, depending on how\n /// type variables wind up being resolved. This only occurs during inference.\n ///\n-/// For selection to suceed, there must be exactly one non-ambiguous\n+/// For selection to succeed, there must be exactly one non-ambiguous\n /// candidate.  Usually, it is not possible to have more than one\n /// definitive candidate, due to the coherence rules. However, there is\n /// one case where it could occur: if there is a blanket impl for a\n@@ -1149,24 +1149,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                              candidates: &mut CandidateSet<'tcx>)\n                                              -> Result<(),SelectionError<'tcx>>\n     {\n-        // FIXME -- To be more like a normal impl, we should just\n-        // ignore the nested cases here, and instead generate nested\n-        // obligations in `confirm_candidate`. However, this doesn't\n-        // work because we require handling the recursive cases to\n-        // avoid infinite cycles (that is, with recursive types,\n-        // sometimes `Foo : Copy` only holds if `Foo : Copy`).\n-\n         match self.builtin_bound(bound, stack.obligation.self_ty()) {\n-            Ok(If(nested)) => {\n-                debug!(\"builtin_bound: bound={} nested={}\",\n-                       bound.repr(self.tcx()),\n-                       nested.repr(self.tcx()));\n-                let data = self.vtable_builtin_data(stack.obligation, bound, nested);\n-                match self.winnow_selection(Some(stack), VtableBuiltin(data)) {\n-                    EvaluatedToOk => { Ok(candidates.vec.push(BuiltinCandidate(bound))) }\n-                    EvaluatedToAmbig => { Ok(candidates.ambiguous = true) }\n-                    EvaluatedToErr => { Err(Unimplemented) }\n-                }\n+            Ok(If(_)) => {\n+                debug!(\"builtin_bound: bound={}\",\n+                       bound.repr(self.tcx()));\n+                candidates.vec.push(BuiltinCandidate(bound));\n+                Ok(())\n             }\n             Ok(ParameterBuiltin) => { Ok(()) }\n             Ok(AmbiguousBuiltin) => { Ok(candidates.ambiguous = true) }\n@@ -1539,8 +1527,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                candidate.repr(self.tcx()));\n \n         match candidate {\n-            // FIXME -- see assemble_builtin_bound_candidates()\n-            BuiltinCandidate(_) |\n+            BuiltinCandidate(builtin_bound) => {\n+                Ok(VtableBuiltin(\n+                    try!(self.confirm_builtin_candidate(obligation, builtin_bound))))\n+            }\n+\n             ErrorCandidate => {\n                 Ok(VtableBuiltin(VtableBuiltinData { nested: VecPerParamSpace::empty() }))\n             }\n@@ -1590,8 +1581,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match try!(self.builtin_bound(bound, obligation.self_ty())) {\n             If(nested) => Ok(self.vtable_builtin_data(obligation, bound, nested)),\n-            AmbiguousBuiltin |\n-            ParameterBuiltin => {\n+            AmbiguousBuiltin | ParameterBuiltin => {\n                 self.tcx().sess.span_bug(\n                     obligation.cause.span,\n                     format!(\"builtin bound for {} was ambig\","}, {"sha": "23072dee3b6b1491651af2c6d3530076845fd643", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -965,7 +965,7 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                           llfn: ValueRef,\n-                          llargs: Vec<ValueRef> ,\n+                          llargs: &[ValueRef],\n                           fn_ty: Ty<'tcx>,\n                           call_info: Option<NodeInfo>,\n                           // FIXME(15064) is_lang_item is a horrible hack, please remove it"}, {"sha": "50d2f885afa17f69015c0d9a42c1345d94ab17be", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -808,7 +808,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         // Invoke the actual rust fn and update bcx/llresult.\n         let (llret, b) = base::invoke(bcx,\n                                       llfn,\n-                                      llargs,\n+                                      llargs[],\n                                       callee_ty,\n                                       call_info,\n                                       dest.is_none());"}, {"sha": "fbaf1e6581060ccb5f360462679b598663d879a6", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -291,7 +291,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let dtor_ty = ty::mk_ctor_fn(bcx.tcx(),\n                                      &[get_drop_glue_type(bcx.ccx(), t)],\n                                      ty::mk_nil(bcx.tcx()));\n-        let (_, variant_cx) = invoke(variant_cx, dtor_addr, args, dtor_ty, None, false);\n+        let (_, variant_cx) = invoke(variant_cx, dtor_addr, args[], dtor_ty, None, false);\n \n         variant_cx.fcx.pop_and_trans_custom_cleanup_scope(variant_cx, field_scope);\n         variant_cx"}, {"sha": "8cb4b6328c490dd5731b6cd598ea4a96c48ab704", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn test<T: Sync>() {}\n+\n+fn main() {\n+    test::<Receiver<int>>();   //~ ERROR: `core::kinds::Sync` is not implemented\n+}"}, {"sha": "8c17895eb8a02e8dc5b309c61d46d7a19951eac9", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -11,7 +11,5 @@\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n-    test::<Receiver<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n-    test::<Sender<int>>();  //~ ERROR: `core::kinds::Sync` is not implemented\n+    test::<Sender<int>>();     //~ ERROR: `core::kinds::Sync` is not implemented\n }"}, {"sha": "99c63c3c6e95e01c0b4f7e68f96997a670333864", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -13,18 +13,24 @@\n trait Foo for Sized? {}\n impl Foo for str {}\n \n-fn test<Sized? T: Foo>(t: &T) {\n+fn test1<Sized? T: Foo>(t: &T) {\n     let u: &Foo = t;\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n+}\n \n+fn test2<Sized? T: Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n }\n \n-fn main() {\n+fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n+}\n \n+fn test4() {\n     let _: &Foo = \"hi\" as &Foo;\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n }\n+\n+fn main() { }"}, {"sha": "e6ac30139c37fba489a4bf4c19708529db799cc2", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -18,7 +18,6 @@ fn new_struct(r: A+'static)\n     -> Struct { //~^  ERROR the trait `core::kinds::Sized` is not implemented\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n     Struct { r: r }\n-    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n trait Curve {}"}, {"sha": "bef8ca6b86cba026c43aef7b1e8521273d4044de", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -32,5 +32,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type `B`\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }"}, {"sha": "d1a86d334cb44e631c7705f20fb61a0cf8570878", "filename": "src/test/compile-fail/issue-8727.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:reached the recursion limit during monomorphization\n+\n // Verify the compiler fails with an error on infinite function\n // recursions.\n \n-\n struct Data(Box<Option<Data>>);\n \n fn generic<T>( _ : Vec<(Data,T)> ) {\n-    //~^ ERROR reached the recursion limit during monomorphization\n     let rec : Vec<(Data,(bool,T))> = Vec::new();\n     generic( rec );\n }"}, {"sha": "f0c4a4243acc977e62897556d38544cf8f8c75f3", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -22,7 +22,7 @@ struct MyStruct {\n }\n \n struct MyNoncopyStruct {\n-    x: Box<int>,\n+    x: Box<char>,\n }\n \n fn test<'a,T,U:Copy>(_: &'a int) {"}, {"sha": "1a82a2b3832cbba7c090ac329464c21a08c1a71a", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-//~^ ERROR the trait `core::kinds::Send` is not implemented for the type `Foo`\n+//~^ ERROR the trait `core::kinds::Send` is not implemented\n //~^^ NOTE cannot implement a destructor on a structure or enumeration that does not satisfy Send\n     fn drop(&mut self) {\n     }"}, {"sha": "a430fe72333cd783607b25b8ebc559dbbd994580", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -22,6 +22,10 @@ fn f<T>(val: T) {\n     let a = &t as &Gettable<T>;\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n     //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n+}\n+\n+fn g<T>(val: T) {\n+    let t: S<T> = S;\n     let a: &Gettable<T> = &t;\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n     //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n@@ -30,9 +34,15 @@ fn f<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a int> = S;\n     let a = &t as &Gettable<&'a int>;\n+}\n+\n+fn foo2<'a>() {\n     let t: Box<S<String>> = box S;\n     let a = t as Box<Gettable<String>>;\n     //~^ ERROR the trait `core::kinds::Copy` is not implemented\n+}\n+\n+fn foo3<'a>() {\n     let t: Box<S<String>> = box S;\n     let a: Box<Gettable<String>> = t;\n     //~^ ERROR the trait `core::kinds::Copy` is not implemented"}, {"sha": "d694fd2c79512a6d8c3ddd50e461265eda3d5d61", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -13,10 +13,14 @@ use std::rc::Rc;\n \n fn foo(_x: Rc<uint>) {}\n \n-fn main() {\n+fn bar() {\n     let x = Rc::new(3u);\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n-    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n-    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n+}\n+\n+fn bar2() {\n+    let x = Rc::new(3u);\n     let _: proc() = proc() foo(x);\n }\n+\n+fn main() { }"}, {"sha": "d988a245700f200b3d31f25b13e3c5dc392be8be", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -29,5 +29,5 @@ fn foo(i:int, j: Rc<String>) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n-  tx.send(foo(42, Rc::new(cat))); //~ ERROR `core::kinds::Send` is not implemented\n+  tx.send(foo(42, Rc::new(cat)));\n }"}, {"sha": "0462a2025d2ce72dac239bede11451bbe31b6242", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -8,14 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo<T> { FooSome(T), FooNone }\n \n-fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<Foo<T>>() }\n+fn is_sized<T:Sized>() { }\n+fn not_sized<Sized? T>() { }\n+\n+enum Foo<U> { FooSome(U), FooNone }\n+fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n+fn foo2<Sized? T>() { not_sized::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//\n+// Not OK: `T` is not sized.\n+\n+enum Bar<Sized? U> { BarSome(U), BarNone }\n+fn bar1<Sized? T>() { not_sized::<Bar<T>>() }\n+fn bar2<Sized? T>() { is_sized::<Bar<T>>() }\n //~^ ERROR the trait `core::kinds::Sized` is not implemented\n-//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n //\n-// One error is for T being provided to Foo<T>, the other is\n-// for Foo<T> being provided to bar.\n+// Not OK: `Bar<T>` is not sized, but it should be.\n \n fn main() { }"}, {"sha": "db2e9cb932800d5d4aa7c1f2482e6303874dad98", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -8,13 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+fn is_sized<T:Sized>() { }\n+fn not_sized<Sized? T>() { }\n+\n struct Foo<T> { data: T }\n+fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n+fn foo2<Sized? T>() { not_sized::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//\n+// Not OK: `T` is not sized.\n \n-fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<Foo<T>>() }\n+struct Bar<Sized? T> { data: T }\n+fn bar1<Sized? T>() { not_sized::<Bar<T>>() }\n+fn bar2<Sized? T>() { is_sized::<Bar<T>>() }\n //~^ ERROR the trait `core::kinds::Sized` is not implemented\n-//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n-// One error is for the T in Foo<T>, the other is for Foo<T> as a value\n-// for bar's type parameter.\n+//\n+// Not OK: `Bar<T>` is not sized, but it should be.\n \n fn main() { }"}, {"sha": "0a75240f2d89df613224e0d8fd16e8299df98441", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -57,6 +57,9 @@ fn f8<Sized? X>(x1: &S<X>, x2: &S<X>) {\n fn f9<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34i));\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n+}\n+\n+fn f10<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32i, *x2));\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }"}, {"sha": "d9d7a86889f5771f741b6a76cf458000ae01bd42", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0745886c2382c37d5d345f4c5b1b8f7b9a387/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "patch": "@@ -29,6 +29,8 @@ struct S4 {\n }\n enum E<Sized? X> {\n     V1(X, int), //~ERROR `core::kinds::Sized` is not implemented\n+}\n+enum F<Sized? X> {\n     V2{f1: X, f: int}, //~ERROR `core::kinds::Sized` is not implemented\n }\n "}]}