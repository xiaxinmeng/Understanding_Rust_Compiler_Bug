{"sha": "b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTQ0ZTdhMjBhM2ZmOWQ1YmEwM2VjMjJlYzIzMjM3NzI2ODNmNWI=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-13T18:11:43Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-13T19:10:08Z"}, "message": "yeet ya fixme into the void", "tree": {"sha": "803fe75205d5394465d7d7243ec41fb862be0797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803fe75205d5394465d7d7243ec41fb862be0797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "html_url": "https://github.com/rust-lang/rust/commit/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68405fdc2ed194db2d206a82f336f3813a2b3a8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68405fdc2ed194db2d206a82f336f3813a2b3a8c", "html_url": "https://github.com/rust-lang/rust/commit/68405fdc2ed194db2d206a82f336f3813a2b3a8c"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "074c9252481aa5bd709d8cd4306addc194b84b56", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "patch": "@@ -639,6 +639,10 @@ struct QueryTypeRelatingDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}, {"sha": "e720a6f13086de9a47b4bb70d19f816f28ec42e8", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "patch": "@@ -72,6 +72,8 @@ where\n }\n \n pub trait TypeRelatingDelegate<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx>;\n+\n     /// Push a constraint `sup: sub` -- this constraint must be\n     /// satisfied for the two types to be related. `sub` and `sup` may\n     /// be regions from the type or new variables created through the\n@@ -473,9 +475,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {\n@@ -819,9 +820,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {"}, {"sha": "bf83bb026457fbd1850ae9f76ee9313180efcb0d", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "patch": "@@ -1098,6 +1098,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ) -> Fallible<()> {\n         relate_tys::relate_types(\n             self.infcx,\n+            self.param_env,\n             a,\n             v,\n             b,"}, {"sha": "249945f04b7b05748410f88697ca187fd6872bd2", "filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6144e7a20a3ff9d5ba03ec22ec2323772683f5b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=b6144e7a20a3ff9d5ba03ec22ec2323772683f5b", "patch": "@@ -18,6 +18,7 @@ use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n /// variables, but not the type `b`.\n pub(super) fn relate_types<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     v: ty::Variance,\n     b: Ty<'tcx>,\n@@ -28,7 +29,7 @@ pub(super) fn relate_types<'tcx>(\n     debug!(\"relate_types(a={:?}, v={:?}, b={:?}, locations={:?})\", a, v, b, locations);\n     TypeRelating::new(\n         infcx,\n-        NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n+        NllTypeRelatingDelegate::new(infcx, borrowck_context, param_env, locations, category),\n         v,\n     )\n     .relate(a, b)?;\n@@ -39,6 +40,8 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n \n+    param_env: ty::ParamEnv<'tcx>,\n+\n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n \n@@ -50,14 +53,19 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         infcx: &'me InferCtxt<'me, 'tcx>,\n         borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n+        param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Self {\n-        Self { infcx, borrowck_context, locations, category }\n+        Self { infcx, borrowck_context, param_env, locations, category }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}]}