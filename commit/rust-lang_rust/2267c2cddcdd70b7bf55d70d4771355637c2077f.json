{"sha": "2267c2cddcdd70b7bf55d70d4771355637c2077f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjdjMmNkZGNkZDcwYjdiZjU1ZDcwZDQ3NzEzNTU2MzdjMjA3N2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-18T22:43:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T22:43:21Z"}, "message": "Merge pull request #3001 from scampi/issue2977\n\npropagate errors about failing to rewrite a macro", "tree": {"sha": "418d6c513aa8c2a7053b9223c7808b17add76098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418d6c513aa8c2a7053b9223c7808b17add76098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2267c2cddcdd70b7bf55d70d4771355637c2077f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboX+JCRBK7hj4Ov3rIwAAdHIIABGDzZIAp/JfQL4qf460YAOK\njL+NasFzkz1YBE1Tqlma/5Xp1GrtgZTtO8WI4k99GM15ji5Wj4Tv6yXf8Ilwm0vK\n9z+7UqKn9Kxx3f0ZxCInaCPi0v+2HLaPt6S5yYydWBoL5p06L3iNyexIrSIQEtiL\nm4zdPhz6jb8CmkcYLsYLSTnMyg5N62xutJrXSlhVptRLlH1RabiqT2jXuXi4XKml\nT4HqrMfD7Ry1joET3TkYTY1kYWxo6DioG14ZdQFl5KF/So+2XJnTF5NkfMTPxenY\ntnymmEKnNAJTAmT6359FSAwqzFSQtakaqArJQXFFSUt1IQOeeccGbrYXqOsjFCM=\n=SYQf\n-----END PGP SIGNATURE-----\n", "payload": "tree 418d6c513aa8c2a7053b9223c7808b17add76098\nparent 14fdf2e6b1c41c47a725b5a5aad1c0f977f8752a\nparent 1befc93ba02e2fff85c985573652147de3b7aab2\nauthor Nick Cameron <nrc@ncameron.org> 1537310601 +1200\ncommitter GitHub <noreply@github.com> 1537310601 +1200\n\nMerge pull request #3001 from scampi/issue2977\n\npropagate errors about failing to rewrite a macro"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2267c2cddcdd70b7bf55d70d4771355637c2077f", "html_url": "https://github.com/rust-lang/rust/commit/2267c2cddcdd70b7bf55d70d4771355637c2077f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2267c2cddcdd70b7bf55d70d4771355637c2077f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14fdf2e6b1c41c47a725b5a5aad1c0f977f8752a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14fdf2e6b1c41c47a725b5a5aad1c0f977f8752a", "html_url": "https://github.com/rust-lang/rust/commit/14fdf2e6b1c41c47a725b5a5aad1c0f977f8752a"}, {"sha": "1befc93ba02e2fff85c985573652147de3b7aab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1befc93ba02e2fff85c985573652147de3b7aab2", "html_url": "https://github.com/rust-lang/rust/commit/1befc93ba02e2fff85c985573652147de3b7aab2"}], "stats": {"total": 244, "additions": 236, "deletions": 8}, "files": [{"sha": "90fb5899098218e33e2fc9c37e4d3f349ff74add", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -175,7 +175,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         }\n \n         self.handler\n-            .handle_formatted_file(path, visitor.buffer, &mut self.report)\n+            .handle_formatted_file(path, visitor.buffer.to_owned(), &mut self.report)\n     }\n }\n "}, {"sha": "2cc8482a1b0297b42a959fe79a8ade09b6819c90", "filename": "src/macros.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -69,7 +69,7 @@ impl Rewrite for ast::Item {\n         visitor.block_indent = shape.indent;\n         visitor.last_pos = self.span().lo();\n         visitor.visit_item(self);\n-        Some(visitor.buffer)\n+        Some(visitor.buffer.to_owned())\n     }\n }\n \n@@ -406,7 +406,15 @@ pub fn rewrite_macro_def(\n         \";\",\n         |branch| branch.span.lo(),\n         |branch| branch.span.hi(),\n-        |branch| branch.rewrite(context, arm_shape, multi_branch_style),\n+        |branch| match branch.rewrite(context, arm_shape, multi_branch_style) {\n+            Some(v) => Some(v),\n+            // if the rewrite returned None because a macro could not be rewritten, then return the\n+            // original body\n+            None if *context.macro_rewrite_failure.borrow() == true => {\n+                Some(context.snippet(branch.body).trim().to_string())\n+            }\n+            None => None,\n+        },\n         context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,"}, {"sha": "f27a399beed22ba2eef1abdc052707ac2e22784a", "filename": "src/visitor.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -60,6 +60,7 @@ impl<'a> SnippetProvider<'a> {\n }\n \n pub struct FmtVisitor<'a> {\n+    parent_context: Option<&'a RewriteContext<'a>>,\n     pub parse_session: &'a ParseSess,\n     pub source_map: &'a SourceMap,\n     pub buffer: String,\n@@ -75,7 +76,21 @@ pub struct FmtVisitor<'a> {\n     pub(crate) report: FormatReport,\n }\n \n+impl<'a> Drop for FmtVisitor<'a> {\n+    fn drop(&mut self) {\n+        if let Some(ctx) = self.parent_context {\n+            if self.macro_rewrite_failure {\n+                ctx.macro_rewrite_failure.replace(true);\n+            }\n+        }\n+    }\n+}\n+\n impl<'b, 'a: 'b> FmtVisitor<'a> {\n+    fn set_parent_context(&mut self, context: &'a RewriteContext) {\n+        self.parent_context = Some(context);\n+    }\n+\n     pub fn shape(&self) -> Shape {\n         Shape::indented(self.block_indent, self.config)\n     }\n@@ -97,7 +112,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 if contains_skip(get_attrs_from_stmt(stmt)) {\n                     self.push_skipped_with_span(stmt.span());\n                 } else {\n-                    let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n+                    let shape = self.shape().clone();\n+                    let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n             }\n@@ -350,11 +366,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n-                let rw = format_impl(&self.get_context(), item, self.block_indent, where_span_end);\n+                let block_indent = self.block_indent.clone();\n+                let rw =\n+                    self.with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Trait(..) => {\n-                let rw = format_trait(&self.get_context(), item, self.block_indent);\n+                let block_indent = self.block_indent.clone();\n+                let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::TraitAlias(ref generics, ref generic_bounds) => {\n@@ -575,12 +594,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     pub fn from_context(ctx: &'a RewriteContext) -> FmtVisitor<'a> {\n-        FmtVisitor::from_source_map(\n+        let mut visitor = FmtVisitor::from_source_map(\n             ctx.parse_session,\n             ctx.config,\n             ctx.snippet_provider,\n             ctx.report.clone(),\n-        )\n+        );\n+        visitor.set_parent_context(ctx);\n+        visitor\n     }\n \n     pub(crate) fn from_source_map(\n@@ -590,6 +611,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         report: FormatReport,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n+            parent_context: None,\n             parse_session,\n             source_map: parse_session.source_map(),\n             buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),"}, {"sha": "8d7bb9414eb7b06d1398b5966d241b8df10235a5", "filename": "tests/source/issue-2977/impl.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Fsource%2Fissue-2977%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Fsource%2Fissue-2977%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2977%2Fimpl.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        impl AtomicBits for $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "ae20668cd75f29d3d8c603f17d900a518b216b1c", "filename": "tests/source/issue-2977/trait.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Fsource%2Fissue-2977%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Fsource%2Fissue-2977%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2977%2Ftrait.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        trait $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "d376e370c72e9184dfe8c06923402263030858fc", "filename": "tests/target/issue-2977/block.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fblock.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! atomic_bits {\n+    ($ldrex:expr) => {\n+        execute(|| {\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+        })\n+    };\n+}"}, {"sha": "8d7bb9414eb7b06d1398b5966d241b8df10235a5", "filename": "tests/target/issue-2977/impl.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fimpl.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        impl AtomicBits for $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "857065ca93f7ab89e9d063e8537f53cd224b9cb3", "filename": "tests/target/issue-2977/item.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fitem.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! atomic_bits {\n+    ($ldrex:expr) => {\n+        some_macro!(pub fn foo() {\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+        })\n+    };\n+}"}, {"sha": "ae20668cd75f29d3d8c603f17d900a518b216b1c", "filename": "tests/target/issue-2977/trait.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2267c2cddcdd70b7bf55d70d4771355637c2077f/tests%2Ftarget%2Fissue-2977%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Ftrait.rs?ref=2267c2cddcdd70b7bf55d70d4771355637c2077f", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        trait $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}]}