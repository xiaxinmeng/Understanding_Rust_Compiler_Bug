{"sha": "994006585be6850b250b21aac76a58f1324cad5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NDAwNjU4NWJlNjg1MGIyNTBiMjFhYWM3NmE1OGYxMzI0Y2FkNWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-02T09:16:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T06:28:12Z"}, "message": "Start documenting review process", "tree": {"sha": "313ea0641e991a04af3f074946899013ee20564d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313ea0641e991a04af3f074946899013ee20564d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994006585be6850b250b21aac76a58f1324cad5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994006585be6850b250b21aac76a58f1324cad5d", "html_url": "https://github.com/rust-lang/rust/commit/994006585be6850b250b21aac76a58f1324cad5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994006585be6850b250b21aac76a58f1324cad5d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21132a7a748a70351f5d1ae6d8c51a3a0065013e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21132a7a748a70351f5d1ae6d8c51a3a0065013e", "html_url": "https://github.com/rust-lang/rust/commit/21132a7a748a70351f5d1ae6d8c51a3a0065013e"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "1de5a2aab1d75d6c4c3d5158d842ed11271d9281", "filename": "docs/dev/README.md", "status": "modified", "additions": 104, "deletions": 1, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/994006585be6850b250b21aac76a58f1324cad5d/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/994006585be6850b250b21aac76a58f1324cad5d/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=994006585be6850b250b21aac76a58f1324cad5d", "patch": "@@ -30,7 +30,7 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n \n * [good-first-issue](https://github.com/rust-analyzer/rust-analyzer/labels/good%20first%20issue)\n   are good issues to get into the project.\n-* [E-mentor](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor)\n+* [E-has-instructions](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-has-instructions)\n   issues have links to the code in question and tests.\n * [E-easy](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n   [E-medium](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n@@ -117,6 +117,109 @@ Additionally, I use `cargo run --release -p rust-analyzer -- analysis-stats\n path/to/some/rust/crate` to run a batch analysis. This is primarily useful for\n performance optimizations, or for bug minimization.\n \n+# Code Style & Review Process\n+\n+Our approach to \"clean code\" is two fold:\n+\n+* We generally don't block PRs on style changes.\n+* At the same time, all code in rust-analyzer is constantly refactored.\n+\n+It is explicitly OK for reviewer to flag only some nits in the PR, and than send a follow up cleanup PR for things which are easier to explain by example, cc-ing the original author.\n+Sending small cleanup PRs (like rename a single local variable) is encouraged.\n+\n+## Scale of Changes\n+\n+Everyone knows that it's better to send small & focused pull requests.\n+The problem is, sometimes you *have* to, eg, rewrite the whole compiler, and that just doesn't fit into a set of isolated PRs.\n+\n+The main thing too keep an eye on is the boundaries between various components.\n+There are three kinds of changes:\n+\n+1. Internals of a single component are changed.\n+   Specifically, you don't change any `pub` items.\n+   A good example here would be an addition of a new assist.\n+\n+2. API of a component is expanded.\n+   Specifically, you add a new `pub` function which wasn't there before.\n+   A good example here would be expansion of assist API, for example, to implement lazy assists or assists groups.\n+\n+3. A new dependency between components is introduced.\n+   Specifically, you add a `pub use` reexport from another crate or you add a new line to `[dependencies]` section of `Cargo.toml`.\n+   A good example here would be adding reference search capability to the assists crates.\n+\n+For the first group, the change is generally merged as long as:\n+\n+* it works for the happy case,\n+* it has tests,\n+* it doesn't panic for unhappy case.\n+\n+For the second group, the change would be subjected to quite a bit of scrutiny and iteration.\n+The new API needs to be right (or at least easy to change later).\n+The actual implementation doesn't matter that much.\n+It's very important to minimize the amount of changed lines of code for changes of the second kind.\n+Often, you start doing change of the first kind, only to realise that you need to elevate to a change of the second kind.\n+In this case, we'll probably ask you to split API changes into a separate PR.\n+\n+Changes of the third group should be pretty rare, so we don't specify any specific process for them.\n+That said, adding an innocent-looking `pub use` is a very simple way to break encapsulation, keep an eye on it!\n+\n+Note: if you enjoyed this abstract hand-waving about boundaries, you might appreciate\n+https://www.tedinski.com/2018/02/06/system-boundaries.html\n+\n+## Order of Imports\n+\n+We separate import groups with blank lines\n+\n+```\n+mod x;\n+mod y;\n+\n+use std::{ ... }\n+\n+use crate_foo::{ ... }\n+use crate_bar::{ ... }\n+\n+use crate::{}\n+\n+use super::{} // but prefer `use crate::`\n+```\n+\n+## Order of Items\n+\n+Optimize for the reader who sees the file for the first time, and wants to get the general idea about what's going on.\n+People read things from top to bottom, so place most important things first.\n+\n+Specifically, if all items except one are private, always put the non-private item on top.\n+\n+Put `struct`s and `enum`s first, functions and impls last.\n+\n+Do\n+\n+```\n+// Good\n+struct Foo {\n+  bars: Vec<Bar>\n+}\n+\n+struct Bar;\n+```\n+\n+rather than\n+\n+```\n+// Not as good\n+struct Bar;\n+\n+struct Foo {\n+  bars: Vec<Bar>\n+}\n+```\n+\n+## Documentation\n+\n+For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n+If the line is too long, you want to split the sentence in two :-)\n+\n # Logging\n \n Logging is done by both rust-analyzer and VS Code, so it might be tricky to"}]}