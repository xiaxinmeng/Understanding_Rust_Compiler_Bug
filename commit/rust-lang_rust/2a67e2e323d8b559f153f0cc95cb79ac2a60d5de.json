{"sha": "2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjdlMmUzMjNkOGI1NTlmMTUzZjBjYzk1Y2I3OWFjMmE2MGQ1ZGU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-06T15:38:14Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-08T18:51:28Z"}, "message": "Revert \"Get rid of custom pretty-printing in rustdoc\"\n\nThis reverts commit 31375d2074aeed0c6f173aa200f0bd3bf6d36756.", "tree": {"sha": "9cf33de4f479584e608707d4f47b8af06d7a97a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf33de4f479584e608707d4f47b8af06d7a97a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "html_url": "https://github.com/rust-lang/rust/commit/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921ec4b3fca17cc777766c240038d7d50ba98e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/921ec4b3fca17cc777766c240038d7d50ba98e0d", "html_url": "https://github.com/rust-lang/rust/commit/921ec4b3fca17cc777766c240038d7d50ba98e0d"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "4d0d7e75aec624f9e644f6ea26be2cc6b583bffe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "patch": "@@ -961,7 +961,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| Argument {\n-                    name: Symbol::intern(&rustc_hir_pretty::param_to_string(&body.params[i])),\n+                    name: name_from_pat(&body.params[i].pat),\n                     type_: ty.clean(cx),\n                 })\n                 .collect(),"}, {"sha": "ef59e13f8fb17e87e432065415ea104fbd1e0dac", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a67e2e323d8b559f153f0cc95cb79ac2a60d5de/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=2a67e2e323d8b559f153f0cc95cb79ac2a60d5de", "patch": "@@ -195,6 +195,25 @@ crate fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n+crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n+    let segments = match *p {\n+        hir::QPath::Resolved(_, ref path) => &path.segments,\n+        hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n+        hir::QPath::LangItem(lang_item, ..) => return lang_item.name().to_string(),\n+    };\n+\n+    let mut s = String::new();\n+    for (i, seg) in segments.iter().enumerate() {\n+        if i > 0 {\n+            s.push_str(\"::\");\n+        }\n+        if seg.ident.name != kw::PathRoot {\n+            s.push_str(&seg.ident.as_str());\n+        }\n+    }\n+    s\n+}\n+\n crate fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -232,6 +251,57 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n+crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n+    use rustc_hir::*;\n+    debug!(\"trying to get a name from pattern: {:?}\", p);\n+\n+    Symbol::intern(&match p.kind {\n+        PatKind::Wild => return kw::Underscore,\n+        PatKind::Binding(_, _, ident, _) => return ident.name,\n+        PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n+        PatKind::Struct(ref name, ref fields, etc) => format!(\n+            \"{} {{ {}{} }}\",\n+            qpath_to_string(name),\n+            fields\n+                .iter()\n+                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n+                .collect::<Vec<String>>()\n+                .join(\", \"),\n+            if etc { \", ..\" } else { \"\" }\n+        ),\n+        PatKind::Or(ref pats) => pats\n+            .iter()\n+            .map(|p| name_from_pat(&**p).to_string())\n+            .collect::<Vec<String>>()\n+            .join(\" | \"),\n+        PatKind::Tuple(ref elts, _) => format!(\n+            \"({})\",\n+            elts.iter()\n+                .map(|p| name_from_pat(&**p).to_string())\n+                .collect::<Vec<String>>()\n+                .join(\", \")\n+        ),\n+        PatKind::Box(ref p) => return name_from_pat(&**p),\n+        PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n+        PatKind::Lit(..) => {\n+            warn!(\n+                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n+            );\n+            return Symbol::intern(\"()\");\n+        }\n+        PatKind::Range(..) => panic!(\n+            \"tried to get argument name from PatKind::Range, \\\n+             which is not allowed in function arguments\"\n+        ),\n+        PatKind::Slice(ref begin, ref mid, ref end) => {\n+            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n+            let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n+            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n+            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n+        }\n+    })\n+}\n+\n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def, _, promoted) => {"}]}