{"sha": "78274bc17c671655aaadba2096490fad59de2133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Mjc0YmMxN2M2NzE2NTVhYWFkYmEyMDk2NDkwZmFkNTlkZTIxMzM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-04T13:53:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-17T21:17:31Z"}, "message": "Don't create AST fragments when lowering to HIR", "tree": {"sha": "f95b995d62ecb4890f39e93040d5b46d1432d303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95b995d62ecb4890f39e93040d5b46d1432d303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78274bc17c671655aaadba2096490fad59de2133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78274bc17c671655aaadba2096490fad59de2133", "html_url": "https://github.com/rust-lang/rust/commit/78274bc17c671655aaadba2096490fad59de2133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78274bc17c671655aaadba2096490fad59de2133/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e419168bb8256444ab98f220c03545b8824037d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e419168bb8256444ab98f220c03545b8824037d4", "html_url": "https://github.com/rust-lang/rust/commit/e419168bb8256444ab98f220c03545b8824037d4"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "a212f0a71077b32618db04b0f5ca676de90b4089", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/78274bc17c671655aaadba2096490fad59de2133/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78274bc17c671655aaadba2096490fad59de2133/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=78274bc17c671655aaadba2096490fad59de2133", "patch": "@@ -10,7 +10,6 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::DUMMY_SP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {\n@@ -471,6 +470,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n+    /// Lower an `async` construct to a generator that is then wrapped so it implements `Future`.\n+    ///\n+    /// This results in:\n+    ///\n+    /// ```text\n+    /// std::future::from_generator(static move? |_task_context| -> <ret_ty> {\n+    ///     <body>\n+    /// })\n+    /// ```\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n@@ -481,46 +489,42 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n-            Some(ty) => FnRetTy::Ty(ty),\n-            None => FnRetTy::Default(span),\n+            Some(ty) => hir::FnRetTy::Return(self.lower_ty(&ty, ImplTraitContext::disallowed())),\n+            None => hir::FnRetTy::DefaultReturn(span),\n         };\n \n-        let task_context_id = self.resolver.next_node_id();\n-        let task_context_hid = self.lower_node_id(task_context_id);\n+        // Resume argument type. We let the compiler infer this to simplify the lowering. It is\n+        // fully constrained by `future::from_generator`.\n+        let input_ty = hir::Ty { hir_id: self.next_id(), kind: hir::TyKind::Infer, span };\n \n-        let arg_ty = Ty { id: self.resolver.next_node_id(), kind: TyKind::Infer, span: DUMMY_SP };\n-        let arg_pat = Pat {\n-            id: task_context_id,\n-            kind: PatKind::Ident(\n-                BindingMode::ByValue(Mutability::Mut),\n-                Ident::with_dummy_span(sym::_task_context),\n-                None,\n-            ),\n-            span: DUMMY_SP,\n-        };\n-        let ast_decl = FnDecl {\n-            inputs: vec![Param {\n-                attrs: AttrVec::new(),\n-                ty: AstP(arg_ty),\n-                pat: AstP(arg_pat),\n-                id: self.resolver.next_node_id(),\n-                span: DUMMY_SP,\n-                is_placeholder: false,\n-            }],\n+        // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n+        let decl = self.arena.alloc(hir::FnDecl {\n+            inputs: arena_vec![self; input_ty],\n             output,\n-        };\n-        let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n-        let body_id = self.lower_fn_body(&ast_decl, |this| {\n+            c_variadic: false,\n+            implicit_self: hir::ImplicitSelfKind::None,\n+        });\n+\n+        // Lower the argument pattern/ident. The ident is used again in the `.await` lowering.\n+        let (pat, task_context_hid) = self.pat_ident_binding_mode(\n+            span,\n+            Ident::with_dummy_span(sym::_task_context),\n+            hir::BindingAnnotation::Mutable,\n+        );\n+        let param = hir::Param { attrs: &[], hir_id: self.next_id(), pat, span };\n+        let params = arena_vec![self; param];\n+\n+        let body_id = self.lower_body(move |this| {\n             this.generator_kind = Some(hir::GeneratorKind::Async(async_gen_kind));\n \n             let old_ctx = this.task_context;\n             this.task_context = Some(task_context_hid);\n             let res = body(this);\n             this.task_context = old_ctx;\n-            res\n+            (params, res)\n         });\n \n-        // `static |task_context| -> <ret_ty> { body }`:\n+        // `static |_task_context| -> <ret_ty> { body }`:\n         let generator_kind = hir::ExprKind::Closure(\n             capture_clause,\n             decl,"}, {"sha": "5f056ef6a4d86572a6c07802d479c00d1aeb7dff", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78274bc17c671655aaadba2096490fad59de2133/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78274bc17c671655aaadba2096490fad59de2133/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=78274bc17c671655aaadba2096490fad59de2133", "patch": "@@ -955,7 +955,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id\n     }\n \n-    fn lower_body(\n+    pub(super) fn lower_body(\n         &mut self,\n         f: impl FnOnce(&mut Self) -> (&'hir [hir::Param<'hir>], hir::Expr<'hir>),\n     ) -> hir::BodyId {"}]}