{"sha": "35acd910bb8869ead179b81104010c0179cde0b9", "node_id": "C_kwDOAAsO6NoAKDM1YWNkOTEwYmI4ODY5ZWFkMTc5YjgxMTA0MDEwYzAxNzljZGUwYjk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-26T08:22:10Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-26T08:22:10Z"}, "message": "Sync from rust a2b1646c597329d0a25efa3889b66650f65de1de", "tree": {"sha": "b84aa20ad2ba24640346088b274eadb0d39713aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b84aa20ad2ba24640346088b274eadb0d39713aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35acd910bb8869ead179b81104010c0179cde0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35acd910bb8869ead179b81104010c0179cde0b9", "html_url": "https://github.com/rust-lang/rust/commit/35acd910bb8869ead179b81104010c0179cde0b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35acd910bb8869ead179b81104010c0179cde0b9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134dc334857e453c50f8ea31b13cbda106204f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/134dc334857e453c50f8ea31b13cbda106204f20", "html_url": "https://github.com/rust-lang/rust/commit/134dc334857e453c50f8ea31b13cbda106204f20"}, {"sha": "e6d1a0ed95efaabdb42e605feb6008369ff75c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d1a0ed95efaabdb42e605feb6008369ff75c8d", "html_url": "https://github.com/rust-lang/rust/commit/e6d1a0ed95efaabdb42e605feb6008369ff75c8d"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "84e09cf0abe4fe54d1f82263d110a1f8c0c733b5", "filename": "src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=35acd910bb8869ead179b81104010c0179cde0b9", "patch": "@@ -432,11 +432,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     let is_cold = if fn_sig.abi() == Abi::RustCold {\n         true\n     } else {\n-        instance\n-            .map(|inst| {\n-                fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD)\n-            })\n-            .unwrap_or(false)\n+        instance.is_some_and(|inst| {\n+            fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD)\n+        })\n     };\n     if is_cold {\n         fx.bcx.set_cold_block(fx.bcx.current_block().unwrap());\n@@ -470,7 +468,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     // Pass the caller location for `#[track_caller]`.\n-    if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n+    if instance.is_some_and(|inst| inst.def.requires_caller_location(fx.tcx)) {\n         let caller_location = fx.get_caller_location(source_info);\n         args.push(CallArgument { value: caller_location, is_owned: false });\n     }"}, {"sha": "e92280b26b0534c671edec99266d29cd1f514a3a", "filename": "src/allocator.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=35acd910bb8869ead179b81104010c0179cde0b9", "patch": "@@ -3,10 +3,12 @@\n \n use crate::prelude::*;\n \n-use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{\n+    alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n+};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -34,41 +36,43 @@ fn codegen_inner(\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n-    for method in ALLOCATOR_METHODS {\n-        let mut arg_tys = Vec::with_capacity(method.inputs.len());\n-        for ty in method.inputs.iter() {\n-            match *ty {\n-                AllocatorTy::Layout => {\n-                    arg_tys.push(usize_ty); // size\n-                    arg_tys.push(usize_ty); // align\n-                }\n-                AllocatorTy::Ptr => arg_tys.push(usize_ty),\n-                AllocatorTy::Usize => arg_tys.push(usize_ty),\n+    if kind == AllocatorKind::Default {\n+        for method in ALLOCATOR_METHODS {\n+            let mut arg_tys = Vec::with_capacity(method.inputs.len());\n+            for ty in method.inputs.iter() {\n+                match *ty {\n+                    AllocatorTy::Layout => {\n+                        arg_tys.push(usize_ty); // size\n+                        arg_tys.push(usize_ty); // align\n+                    }\n+                    AllocatorTy::Ptr => arg_tys.push(usize_ty),\n+                    AllocatorTy::Usize => arg_tys.push(usize_ty),\n \n-                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                    AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                }\n             }\n-        }\n-        let output = match method.output {\n-            AllocatorTy::ResultPtr => Some(usize_ty),\n-            AllocatorTy::Unit => None,\n+            let output = match method.output {\n+                AllocatorTy::ResultPtr => Some(usize_ty),\n+                AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"invalid allocator output\")\n-            }\n-        };\n+                AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                    panic!(\"invalid allocator output\")\n+                }\n+            };\n \n-        let sig = Signature {\n-            call_conv: module.target_config().default_call_conv,\n-            params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n-            returns: output.into_iter().map(AbiParam::new).collect(),\n-        };\n-        crate::common::create_wrapper_function(\n-            module,\n-            unwind_context,\n-            sig,\n-            &format!(\"__rust_{}\", method.name),\n-            &kind.fn_name(method.name),\n-        );\n+            let sig = Signature {\n+                call_conv: module.target_config().default_call_conv,\n+                params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n+                returns: output.into_iter().map(AbiParam::new).collect(),\n+            };\n+            crate::common::create_wrapper_function(\n+                module,\n+                unwind_context,\n+                sig,\n+                &global_fn_name(method.name),\n+                &default_fn_name(method.name),\n+            );\n+        }\n     }\n \n     let sig = Signature {\n@@ -81,7 +85,7 @@ fn codegen_inner(\n         unwind_context,\n         sig,\n         \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n+        &alloc_error_handler_name(alloc_error_handler_kind),\n     );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n@@ -90,4 +94,11 @@ fn codegen_inner(\n     let val = oom_strategy.should_panic();\n     data.define(Box::new([val]));\n     module.define_data(data_id, &data).unwrap();\n+\n+    let data_id =\n+        module.declare_data(NO_ALLOC_SHIM_IS_UNSTABLE, Linkage::Export, false, false).unwrap();\n+    let mut data = DataDescription::new();\n+    data.set_align(1);\n+    data.define(Box::new([0]));\n+    module.define_data(data_id, &data).unwrap();\n }"}, {"sha": "cf6b0136297641ead2fa0a453ad732bffa7730e9", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=35acd910bb8869ead179b81104010c0179cde0b9", "patch": "@@ -631,11 +631,11 @@ fn codegen_stmt<'tcx>(\n                     let to_ty = fx.monomorphize(to_ty);\n \n                     fn is_fat_ptr<'tcx>(fx: &FunctionCx<'_, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-                        ty.builtin_deref(true)\n-                            .map(|ty::TypeAndMut { ty: pointee_ty, mutbl: _ }| {\n+                        ty.builtin_deref(true).is_some_and(\n+                            |ty::TypeAndMut { ty: pointee_ty, mutbl: _ }| {\n                                 has_ptr_meta(fx.tcx, pointee_ty)\n-                            })\n-                            .unwrap_or(false)\n+                            },\n+                        )\n                     }\n \n                     if is_fat_ptr(fx, from_ty) {\n@@ -967,11 +967,7 @@ fn codegen_panic_inner<'tcx>(\n     args: &[Value],\n     span: Span,\n ) {\n-    let def_id = fx\n-        .tcx\n-        .lang_items()\n-        .require(lang_item)\n-        .unwrap_or_else(|e| fx.tcx.sess.span_fatal(span, e.to_string()));\n+    let def_id = fx.tcx.require_lang_item(lang_item, Some(span));\n \n     let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n     let symbol_name = fx.tcx.symbol_name(instance).name;"}, {"sha": "1007b33eca42d73aa787779cac302f09d70c07b8", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35acd910bb8869ead179b81104010c0179cde0b9/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=35acd910bb8869ead179b81104010c0179cde0b9", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn write_ir_file(\n         // Using early_warn as no Session is available here\n         rustc_session::early_warn(\n             rustc_session::config::ErrorOutputType::default(),\n-            &format!(\"error writing ir file: {}\", err),\n+            format!(\"error writing ir file: {}\", err),\n         );\n     }\n }"}]}