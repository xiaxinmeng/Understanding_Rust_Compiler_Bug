{"sha": "7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjViOWY3YTYyZDk5ZTBmN2VmMjY0MjJmMThmNjBjNzBjZmE2YjM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T12:16:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:45Z"}, "message": "Use () for visible_parent_map.", "tree": {"sha": "398de9bbbec247b3267d54de649fe15a50db556c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398de9bbbec247b3267d54de649fe15a50db556c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "html_url": "https://github.com/rust-lang/rust/commit/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437a46ddfa12389de8f0e3522db53388434222f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/437a46ddfa12389de8f0e3522db53388434222f1", "html_url": "https://github.com/rust-lang/rust/commit/437a46ddfa12389de8f0e3522db53388434222f1"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "82c8ef0b5843fd53066a7d22409a02d5cca7631f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "patch": "@@ -283,11 +283,10 @@ pub fn provide(providers: &mut Providers) {\n         // external item that is visible from at least one local module) to a\n         // sufficiently visible parent (considering modules that re-export the\n         // external item to be parents).\n-        visible_parent_map: |tcx, cnum| {\n+        visible_parent_map: |tcx, ()| {\n             use std::collections::hash_map::Entry;\n             use std::collections::vec_deque::VecDeque;\n \n-            assert_eq!(cnum, LOCAL_CRATE);\n             let mut visible_parent_map: DefIdMap<DefId> = Default::default();\n \n             // Issue 46112: We want the map to prefer the shortest\n@@ -335,7 +334,7 @@ pub fn provide(providers: &mut Providers) {\n                                 Entry::Occupied(mut entry) => {\n                                     // If `child` is defined in crate `cnum`, ensure\n                                     // that it is mapped to a parent in `cnum`.\n-                                    if child.krate == cnum && entry.get().krate != cnum {\n+                                    if child.is_local() && entry.get().is_local() {\n                                         entry.insert(parent);\n                                     }\n                                 }"}, {"sha": "1165199aeccb2b5cc4ed6ee78bbb1f168f4d9c0c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "patch": "@@ -1367,13 +1367,11 @@ rustc_queries! {\n     query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n         desc { \"calculating the missing lang items in a crate\" }\n     }\n-    query visible_parent_map(_: CrateNum)\n-        -> DefIdMap<DefId> {\n+    query visible_parent_map(_: ()) -> DefIdMap<DefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the visible parent map\" }\n     }\n-    query trimmed_def_paths(_: CrateNum)\n-        -> FxHashMap<DefId, Symbol> {\n+    query trimmed_def_paths(_: ()) -> FxHashMap<DefId, Symbol> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating trimmed def paths\" }\n     }"}, {"sha": "b79042f9ad2ae9122850afd65b8f3cb5b9ea80d4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7f25b9f7a62d99e0f7ef26422f18f60c70cfa6b3", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n@@ -285,7 +285,7 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok((self, false));\n         }\n \n-        match self.tcx().trimmed_def_paths(LOCAL_CRATE).get(&def_id) {\n+        match self.tcx().trimmed_def_paths(()).get(&def_id) {\n             None => Ok((self, false)),\n             Some(symbol) => {\n                 self.write_str(&symbol.as_str())?;\n@@ -361,7 +361,7 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok((self, false));\n         }\n \n-        let visible_parent_map = self.tcx().visible_parent_map(LOCAL_CRATE);\n+        let visible_parent_map = self.tcx().visible_parent_map(());\n \n         let mut cur_def_key = self.tcx().def_key(def_id);\n         debug!(\"try_print_visible_def_path: cur_def_key={:?}\", cur_def_key);\n@@ -2286,9 +2286,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n /// `std::vec::Vec` to just `Vec`, as long as there is no other `Vec` importable anywhere.\n ///\n /// The implementation uses similar import discovery logic to that of 'use' suggestions.\n-fn trimmed_def_paths(tcx: TyCtxt<'_>, crate_num: CrateNum) -> FxHashMap<DefId, Symbol> {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     let mut map = FxHashMap::default();\n \n     if let TrimmedDefPaths::GoodPath = tcx.sess.opts.trimmed_def_paths {"}]}