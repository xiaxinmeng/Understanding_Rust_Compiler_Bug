{"sha": "8f88acdbfa6073eefbfcd773619d460fdfec122a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODhhY2RiZmE2MDczZWVmYmZjZDc3MzYxOWQ0NjBmZGZlYzEyMmE=", "commit": {"author": {"name": "Labelray", "email": "labelray@icloud.com", "date": "2021-09-07T01:59:21Z"}, "committer": {"name": "Labelray", "email": "labelray@icloud.com", "date": "2021-09-09T01:21:38Z"}, "message": "add new lint `iter_not_returning_iterator`", "tree": {"sha": "3735b33c7b2c0955291fa9cc67a8e9fb55d40e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3735b33c7b2c0955291fa9cc67a8e9fb55d40e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f88acdbfa6073eefbfcd773619d460fdfec122a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f88acdbfa6073eefbfcd773619d460fdfec122a", "html_url": "https://github.com/rust-lang/rust/commit/8f88acdbfa6073eefbfcd773619d460fdfec122a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f88acdbfa6073eefbfcd773619d460fdfec122a/comments", "author": {"login": "Labelray", "id": 19207711, "node_id": "MDQ6VXNlcjE5MjA3NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/19207711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Labelray", "html_url": "https://github.com/Labelray", "followers_url": "https://api.github.com/users/Labelray/followers", "following_url": "https://api.github.com/users/Labelray/following{/other_user}", "gists_url": "https://api.github.com/users/Labelray/gists{/gist_id}", "starred_url": "https://api.github.com/users/Labelray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Labelray/subscriptions", "organizations_url": "https://api.github.com/users/Labelray/orgs", "repos_url": "https://api.github.com/users/Labelray/repos", "events_url": "https://api.github.com/users/Labelray/events{/privacy}", "received_events_url": "https://api.github.com/users/Labelray/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Labelray", "id": 19207711, "node_id": "MDQ6VXNlcjE5MjA3NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/19207711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Labelray", "html_url": "https://github.com/Labelray", "followers_url": "https://api.github.com/users/Labelray/followers", "following_url": "https://api.github.com/users/Labelray/following{/other_user}", "gists_url": "https://api.github.com/users/Labelray/gists{/gist_id}", "starred_url": "https://api.github.com/users/Labelray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Labelray/subscriptions", "organizations_url": "https://api.github.com/users/Labelray/orgs", "repos_url": "https://api.github.com/users/Labelray/repos", "events_url": "https://api.github.com/users/Labelray/events{/privacy}", "received_events_url": "https://api.github.com/users/Labelray/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17294b816156efa3a61f504823e75dfabd481357", "url": "https://api.github.com/repos/rust-lang/rust/commits/17294b816156efa3a61f504823e75dfabd481357", "html_url": "https://github.com/rust-lang/rust/commit/17294b816156efa3a61f504823e75dfabd481357"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "71383e8116b04f2321e4cb6feb9e993c73af4fd1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f88acdbfa6073eefbfcd773619d460fdfec122a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f88acdbfa6073eefbfcd773619d460fdfec122a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8f88acdbfa6073eefbfcd773619d460fdfec122a", "patch": "@@ -2722,6 +2722,7 @@ Released 2018-09-13\n [`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n+[`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next"}, {"sha": "6c779348ca28a4f5e6484392c033350f31188747", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8f88acdbfa6073eefbfcd773619d460fdfec122a/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f88acdbfa6073eefbfcd773619d460fdfec122a/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=8f88acdbfa6073eefbfcd773619d460fdfec122a", "patch": "@@ -0,0 +1,64 @@\n+use clippy_utils::{diagnostics::span_lint, return_ty, ty::implements_trait};\n+use rustc_hir::{ImplItem, ImplItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n+use rustc_span::symbol::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects methods named `iter` or `iter_mut` that do not have a return type that implements `Iterator`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Methods named `iter` or `iter_mut` conventionally return an `Iterator`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // `String` does not implement `Iterator`\n+    /// struct Data {}\n+    /// impl Data {\n+    ///     fn iter(&self) -> String {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::str::Chars;\n+    /// struct Data {}\n+    /// impl Data {\n+    ///    fn iter(&self) -> Chars<'static> {\n+    ///        todo!()\n+    ///    }\n+    /// }\n+    /// ```\n+    pub ITER_NOT_RETURNING_ITERATOR,\n+    pedantic,\n+    \"methods named `iter` or `iter_mut` that do not return an `Iterator`\"\n+}\n+\n+declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n+\n+impl LateLintPass<'_> for IterNotReturningIterator {\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n+        let name: &str = &impl_item.ident.name.as_str();\n+        if_chain! {\n+            if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n+            let ret_ty = return_ty(cx, impl_item.hir_id());\n+            if matches!(name, \"iter\" | \"iter_mut\");\n+            if let [param] = cx.tcx.fn_arg_names(impl_item.def_id);\n+            if param.name == kw::SelfLower;\n+            if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n+            if !implements_trait(cx, ret_ty, iter_trait_id, &[]);\n+\n+            then {\n+                span_lint(\n+                    cx,\n+                    ITER_NOT_RETURNING_ITERATOR,\n+                    fn_sig.span,\n+                    &format!(\"this method is named `{}` but its return type does not implement `Iterator`\", name),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "63deb46dc736ffd75e88415a4b864b035f410b58", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f88acdbfa6073eefbfcd773619d460fdfec122a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f88acdbfa6073eefbfcd773619d460fdfec122a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8f88acdbfa6073eefbfcd773619d460fdfec122a", "patch": "@@ -241,6 +241,7 @@ mod int_plus_one;\n mod integer_division;\n mod invalid_upcast_comparisons;\n mod items_after_statements;\n+mod iter_not_returning_iterator;\n mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n@@ -674,6 +675,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         integer_division::INTEGER_DIVISION,\n         invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n         large_const_arrays::LARGE_CONST_ARRAYS,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         large_stack_arrays::LARGE_STACK_ARRAYS,\n@@ -1104,6 +1106,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n         LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n+        LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n         LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n         LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n         LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n@@ -2131,6 +2134,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n     store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n+    store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n }\n \n #[rustfmt::skip]"}, {"sha": "377f760b3c4b20c26ad51cb0d3d1b5dd8169aa01", "filename": "tests/ui/iter_not_returning_iterator.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8f88acdbfa6073eefbfcd773619d460fdfec122a/tests%2Fui%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f88acdbfa6073eefbfcd773619d460fdfec122a/tests%2Fui%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.rs?ref=8f88acdbfa6073eefbfcd773619d460fdfec122a", "patch": "@@ -0,0 +1,47 @@\n+#![warn(clippy::iter_not_returning_iterator)]\n+\n+struct Data {\n+    begin: u32,\n+}\n+\n+struct Counter {\n+    count: u32,\n+}\n+\n+impl Data {\n+    fn iter(&self) -> Counter {\n+        todo!()\n+    }\n+\n+    fn iter_mut(&self) -> Counter {\n+        todo!()\n+    }\n+}\n+\n+struct Data2 {\n+    begin: u32,\n+}\n+\n+struct Counter2 {\n+    count: u32,\n+}\n+\n+impl Data2 {\n+    fn iter(&self) -> Counter2 {\n+        todo!()\n+    }\n+\n+    fn iter_mut(&self) -> Counter2 {\n+        todo!()\n+    }\n+}\n+\n+impl Iterator for Counter {\n+    type Item = u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2273cd0be66ffe2c11562a78733726214feb951e", "filename": "tests/ui/iter_not_returning_iterator.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f88acdbfa6073eefbfcd773619d460fdfec122a/tests%2Fui%2Fiter_not_returning_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f88acdbfa6073eefbfcd773619d460fdfec122a/tests%2Fui%2Fiter_not_returning_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.stderr?ref=8f88acdbfa6073eefbfcd773619d460fdfec122a", "patch": "@@ -0,0 +1,16 @@\n+error: this method is named `iter` but its return type does not implement `Iterator`\n+  --> $DIR/iter_not_returning_iterator.rs:30:5\n+   |\n+LL |     fn iter(&self) -> Counter2 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iter-not-returning-iterator` implied by `-D warnings`\n+\n+error: this method is named `iter_mut` but its return type does not implement `Iterator`\n+  --> $DIR/iter_not_returning_iterator.rs:34:5\n+   |\n+LL |     fn iter_mut(&self) -> Counter2 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}