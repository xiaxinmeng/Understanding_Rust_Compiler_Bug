{"sha": "8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjlkZGFkYzRmODJiNDNhODY1M2RkMWY0MDgzOTUxM2I2ZmIyZjA=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-20T13:35:03Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-20T14:10:15Z"}, "message": "remove visit_static from librustc::mir", "tree": {"sha": "c9356fe92d4c9b2ae39327589990795ff3891dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9356fe92d4c9b2ae39327589990795ff3891dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "html_url": "https://github.com/rust-lang/rust/commit/8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/comments", "author": null, "committer": null, "parents": [{"sha": "776407e4e65e537ee7471a90d8a48eb26e7f0fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/776407e4e65e537ee7471a90d8a48eb26e7f0fd7", "html_url": "https://github.com/rust-lang/rust/commit/776407e4e65e537ee7471a90d8a48eb26e7f0fd7"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "3f6133a7331a1fa186bea937744c0290e118c2ba", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "patch": "@@ -156,13 +156,6 @@ macro_rules! make_mir_visitor {\n                 self.super_place(place, context, location);\n             }\n \n-            fn visit_static(&mut self,\n-                            static_: & $($mutability)? Static<'tcx>,\n-                            context: PlaceContext<'tcx>,\n-                            location: Location) {\n-                self.super_static(static_, context, location);\n-            }\n-\n             fn visit_projection(&mut self,\n                                 place: & $($mutability)? PlaceProjection<'tcx>,\n                                 context: PlaceContext<'tcx>,\n@@ -737,23 +730,17 @@ macro_rules! make_mir_visitor {\n                         self.visit_local(local, context, location);\n                     }\n                     Place::Base(PlaceBase::Static(static_)) => {\n-                        self.visit_static(static_, context, location);\n+                        if static_.promoted.is_none() {\n+                            self.visit_def_id(& $($mutability)? static_.def_id, location);\n+                        }\n+                        self.visit_ty(& $($mutability)? static_.ty, TyContext::Location(location));\n                     }\n                     Place::Projection(proj) => {\n                         self.visit_projection(proj, context, location);\n                     }\n                 }\n             }\n \n-            fn super_static(&mut self,\n-                            static_: & $($mutability)? Static<'tcx>,\n-                            _context: PlaceContext<'tcx>,\n-                            location: Location) {\n-                let Static { def_id, ty, promoted: _ } = static_;\n-                self.visit_def_id(def_id, location);\n-                self.visit_ty(ty, TyContext::Location(location));\n-            }\n-\n             fn super_projection(&mut self,\n                                 proj: & $($mutability)? PlaceProjection<'tcx>,\n                                 context: PlaceContext<'tcx>,"}, {"sha": "075b81e9fd98f67985c086efd49b82d85c08011d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "patch": "@@ -650,19 +650,26 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator_kind(block, kind, location);\n     }\n \n-    fn visit_static(&mut self,\n-                    static_: &mir::Static<'tcx>,\n+    fn visit_place(&mut self,\n+                    place: &mir::Place<'tcx>,\n                     context: mir::visit::PlaceContext<'tcx>,\n                     location: Location) {\n-        debug!(\"visiting static {:?} @ {:?}\", static_.def_id, location);\n+        match place {\n+            mir::Place::Base(\n+                mir::PlaceBase::Static(box mir::Static{def_id, promoted:None, ..})\n+            ) => {\n+                debug!(\"visiting static {:?} @ {:?}\", def_id, location);\n \n-        let tcx = self.tcx;\n-        let instance = Instance::mono(tcx, static_.def_id);\n-        if should_monomorphize_locally(tcx, &instance) {\n-            self.output.push(MonoItem::Static(static_.def_id));\n+                let tcx = self.tcx;\n+                let instance = Instance::mono(tcx, *def_id);\n+                if should_monomorphize_locally(tcx, &instance) {\n+                    self.output.push(MonoItem::Static(*def_id));\n+                }\n+            }\n+            _ => {}\n         }\n \n-        self.super_static(static_, context, location);\n+        self.super_place(place, context, location);\n     }\n }\n "}, {"sha": "da849faf40aaea0a18113001f2d55cf371210822", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8829ddadc4f82b43a8653dd1f40839513b6fb2f0/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "patch": "@@ -256,13 +256,10 @@ fn check_place(\n ) -> McfResult {\n     match place {\n         Place::Base(PlaceBase::Local(_)) => Ok(()),\n-        Place::Base(PlaceBase::Static(st)) => {\n-            match st.promoted {\n-                // promoteds are always fine, they are essentially constants\n-                Some(..) => Ok(()),\n-                None => Err((span, \"cannot access `static` items in const fn\".into())),\n-            }\n-        }\n+        // promoteds are always fine, they are essentially constants\n+        Place::Base(PlaceBase::Static(box Static {def_id: _, ty: _, promoted: Some(_)})) => Ok(()),\n+        Place::Base(PlaceBase::Static(box Static {def_id: _, ty: _, promoted: None})) =>\n+            Err((span, \"cannot access `static` items in const fn\".into())),\n         Place::Projection(proj) => {\n             match proj.elem {\n                 | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }"}]}