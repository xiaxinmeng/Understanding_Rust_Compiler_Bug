{"sha": "0b3df19c6a02a743dae904245c6f98424e75af8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiM2RmMTljNmEwMmE3NDNkYWU5MDQyNDVjNmY5ODQyNGU3NWFmOGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-12T16:49:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-16T05:26:36Z"}, "message": "rustc: Tweak where -lmorestack is on link commands\n\nIn removing many fields from the crate map, executables no longer always have an\nexplicit dependency on all upstream libraries. This means that the linker is no\nlonger picking them up as it used to.\n\nTo the best of my knowledge, the current situation is happening:\n\n* On linux, we're passing the --as-needed flag to the linker, meaning that\n  libraries are stripped out if there are no references to symbols in them.\n* Executables may not reference libstd at all, such as \"fn main() {}\"\n* When linking, the linker will discard libstd because there are no references\n  to symbols in it. I presume that this means that all previous libs have had\n  all their symbols resolved, so none of the libs are pulling in libstd as a\n  dependency.\n* The only real dependence on libstd comes from the rust_stack_exhausted symbol\n  (which comes from libmorestack), but -lmorestack is at the end so by the time\n  this comes up libstd is completely gone, leading to undefined references to\n  rust_stack_exhausted\n\nI'm not entirely convinced that this is what's happening, but it appears to be\nalong these lines. The one thing that I'm sure of is that removing the crate map\n(and hence implicit dependency on all upstream libraries) has changed how\nobjects depend on upstream libraries.", "tree": {"sha": "2b0fbe5eb5646258f5a1bfd5675edd2b2d608f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0fbe5eb5646258f5a1bfd5675edd2b2d608f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3df19c6a02a743dae904245c6f98424e75af8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3df19c6a02a743dae904245c6f98424e75af8c", "html_url": "https://github.com/rust-lang/rust/commit/0b3df19c6a02a743dae904245c6f98424e75af8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3df19c6a02a743dae904245c6f98424e75af8c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a921dc487319e926467f8e6afd9900ed2f03aaa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a921dc487319e926467f8e6afd9900ed2f03aaa9", "html_url": "https://github.com/rust-lang/rust/commit/a921dc487319e926467f8e6afd9900ed2f03aaa9"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "d68fa0ca24134b24f3fde08d040b6570020b53e4", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0b3df19c6a02a743dae904245c6f98424e75af8c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3df19c6a02a743dae904245c6f98424e75af8c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=0b3df19c6a02a743dae904245c6f98424e75af8c", "patch": "@@ -1085,6 +1085,23 @@ fn link_args(sess: Session,\n         ~\"-o\", out_filename.as_str().unwrap().to_owned(),\n         obj_filename.as_str().unwrap().to_owned()]);\n \n+    // Stack growth requires statically linking a __morestack function. Note\n+    // that this is listed *before* all other libraries, even though it may be\n+    // used to resolve symbols in other libraries. The only case that this\n+    // wouldn't be pulled in by the object file is if the object file had no\n+    // functions.\n+    //\n+    // If we're building an executable, there must be at least one function (the\n+    // main function), and if we're building a dylib then we don't need it for\n+    // later libraries because they're all dylibs (not rlibs).\n+    //\n+    // I'm honestly not entirely sure why this needs to come first. Apparently\n+    // the --as-needed flag above sometimes strips out libstd from the command\n+    // line, but inserting this farther to the left makes the\n+    // \"rust_stack_exhausted\" symbol an outstanding undefined symbol, which\n+    // flags libstd as a required library (or whatever provides the symbol).\n+    args.push(~\"-lmorestack\");\n+\n     // When linking a dynamic library, we put the metadata into a section of the\n     // executable. This metadata is in a separate object file from the main\n     // object file, so we link that in here.\n@@ -1200,11 +1217,13 @@ fn link_args(sess: Session,\n         args.push_all(rpath::get_rpath_flags(sess, out_filename).as_slice());\n     }\n \n-    // Stack growth requires statically linking a __morestack function\n-    args.push(~\"-lmorestack\");\n-    // compiler-rt contains implementations of low-level LLVM helpers\n-    // It should go before platform and user libraries, so it has first dibs\n-    // at resolving symbols that also appear in libgcc.\n+    // compiler-rt contains implementations of low-level LLVM helpers. This is\n+    // used to resolve symbols from the object file we just created, as well as\n+    // any system static libraries that may be expecting gcc instead. Most\n+    // symbols in libgcc also appear in compiler-rt.\n+    //\n+    // This is the end of the command line, so this library is used to resolve\n+    // *all* undefined symbols in all other libraries, and this is intentional.\n     args.push(~\"-lcompiler-rt\");\n \n     // Finally add all the linker arguments provided on the command line along"}]}