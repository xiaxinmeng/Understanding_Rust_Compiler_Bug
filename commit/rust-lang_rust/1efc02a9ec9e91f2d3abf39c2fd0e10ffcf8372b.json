{"sha": "1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZmMwMmE5ZWM5ZTkxZjJkM2FiZjM5YzJmZDBlMTBmZmNmODM3MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-23T07:26:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-23T07:26:37Z"}, "message": "auto merge of #15083 : edwardw/rust/destructure-trait-ref, r=pcwalton\n\nCloses #15031.", "tree": {"sha": "ad5f6fcad64be89fb9a981ef638c059f5d4fab1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad5f6fcad64be89fb9a981ef638c059f5d4fab1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "html_url": "https://github.com/rust-lang/rust/commit/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f86e41a162427a7ffe6c74663566ebf235cbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f86e41a162427a7ffe6c74663566ebf235cbe1", "html_url": "https://github.com/rust-lang/rust/commit/c6f86e41a162427a7ffe6c74663566ebf235cbe1"}, {"sha": "f87bc6a5d186fa12234f283a90dfc310d133e567", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87bc6a5d186fa12234f283a90dfc310d133e567", "html_url": "https://github.com/rust-lang/rust/commit/f87bc6a5d186fa12234f283a90dfc310d133e567"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "67437da44c5d612d4ab6e76318e9bae24f48a9b1", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "patch": "@@ -726,22 +726,38 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n }\n \n // Helper function to check gc, box and & patterns\n-pub fn check_pointer_pat(pcx: &pat_ctxt,\n-                         pointer_kind: PointerKind,\n-                         inner: &ast::Pat,\n-                         pat_id: ast::NodeId,\n-                         span: Span,\n-                         expected: ty::t) {\n+fn check_pointer_pat(pcx: &pat_ctxt,\n+                     pointer_kind: PointerKind,\n+                     inner: &ast::Pat,\n+                     pat_id: ast::NodeId,\n+                     span: Span,\n+                     expected: ty::t) {\n     let fcx = pcx.fcx;\n+    let tcx = fcx.ccx.tcx;\n     let check_inner: |ty::t| = |e_inner| {\n-        check_pat(pcx, inner, e_inner);\n-        fcx.write_ty(pat_id, expected);\n+        match ty::get(e_inner).sty {\n+            ty::ty_trait(_) if pat_is_binding(&tcx.def_map, inner) => {\n+                // This is \"x = SomeTrait\" being reduced from\n+                // \"let &x = &SomeTrait\" or \"let box x = Box<SomeTrait>\", an error.\n+                check_pat(pcx, inner, ty::mk_err());\n+                tcx.sess.span_err(\n+                    span,\n+                    format!(\"type `{}` cannot be dereferenced\",\n+                            fcx.infcx().ty_to_str(expected)).as_slice());\n+                fcx.write_error(pat_id);\n+            }\n+            _ => {\n+                check_pat(pcx, inner, e_inner);\n+                fcx.write_ty(pat_id, expected);\n+            }\n+        }\n     };\n+\n     match *structure_of(fcx, span, expected) {\n-        ty::ty_uniq(e_inner) if pointer_kind == Send && !ty::type_is_trait(e_inner) => {\n+        ty::ty_uniq(e_inner) if pointer_kind == Send => {\n             check_inner(e_inner);\n         }\n-        ty::ty_rptr(_, e_inner) if pointer_kind == Borrowed && !ty::type_is_trait(e_inner.ty) => {\n+        ty::ty_rptr(_, e_inner) if pointer_kind == Borrowed => {\n             check_inner(e_inner.ty);\n         }\n         _ => {"}, {"sha": "671bf45c9338fa68d9549546e57c6151ea30e29b", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The regression test for #15031 to make sure destructuring trait\n+// reference work properly.\n+\n+trait T {}\n+impl T for int {}\n+\n+fn main() {\n+    // For an expression of the form:\n+    //\n+    //      let &...&x = &..&SomeTrait;\n+    //\n+    // Say we have n `&` at the left hand and m `&` right hand, then:\n+    // if n < m, we are golden;\n+    // if n == m, it's a derefing non-derefable type error;\n+    // if n > m, it's a type mismatch error.\n+\n+    // n < m\n+    let &x = &(&1 as &T);\n+    let &x = &&(&1 as &T);\n+    let &&x = &&(&1 as &T);\n+\n+    // n == m\n+    let &x = &1 as &T;      //~ ERROR cannot be dereferenced\n+    let &&x = &(&1 as &T);  //~ ERROR cannot be dereferenced\n+    let box x = box 1 as Box<T>; //~ ERROR cannot be dereferenced\n+\n+    // n > m\n+    let &&x = &1 as &T;     //~ ERROR found an `&`-pointer pattern\n+    let &&&x = &(&1 as &T); //~ ERROR found an `&`-pointer pattern\n+    let box box x = box 1 as Box<T>;    //~ ERROR found a box pattern\n+}"}, {"sha": "edd6932aec6f0d3900614ad11699aced0a25fb3f", "filename": "src/test/compile-fail/issue-4972.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=1efc02a9ec9e91f2d3abf39c2fd0e10ffcf8372b", "patch": "@@ -17,7 +17,7 @@ pub enum TraitWrapper {\n \n fn get_tw_map<'lt>(tw: &'lt TraitWrapper) -> &'lt MyTrait {\n     match *tw {\n-        A(box ref map) => map, //~ ERROR found a box pattern\n+        A(box ref map) => map, //~ ERROR cannot be dereferenced\n     }\n }\n "}]}