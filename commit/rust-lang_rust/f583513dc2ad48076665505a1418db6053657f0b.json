{"sha": "f583513dc2ad48076665505a1418db6053657f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODM1MTNkYzJhZDQ4MDc2NjY1NTA1YTE0MThkYjYwNTM2NTdmMGI=", "commit": {"author": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-18T01:43:29Z"}, "committer": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-18T01:44:11Z"}, "message": "Intorduced MiniMap - a tiny small storage optimized map implementation\n\nThis makes everything about 1% faster in rustc-perf,\nmostly negating performance hit of previous commit.", "tree": {"sha": "e0f78b5633ca17ab240121f459f3fb8143bedb43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f78b5633ca17ab240121f459f3fb8143bedb43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f583513dc2ad48076665505a1418db6053657f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f583513dc2ad48076665505a1418db6053657f0b", "html_url": "https://github.com/rust-lang/rust/commit/f583513dc2ad48076665505a1418db6053657f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f583513dc2ad48076665505a1418db6053657f0b/comments", "author": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d2e3b5d208d29d156ff94f112b5bc95acee351", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d2e3b5d208d29d156ff94f112b5bc95acee351", "html_url": "https://github.com/rust-lang/rust/commit/17d2e3b5d208d29d156ff94f112b5bc95acee351"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "23878f7ade7a85f38072af3469cd502707f93390", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f583513dc2ad48076665505a1418db6053657f0b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f583513dc2ad48076665505a1418db6053657f0b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f583513dc2ad48076665505a1418db6053657f0b", "patch": "@@ -3594,6 +3594,7 @@ dependencies = [\n name = \"rustc_infer\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arrayvec\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "a8c1a370cef821eeefab90a84eedd6c6dfd280fb", "filename": "compiler/rustc_infer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f583513dc2ad48076665505a1418db6053657f0b/compiler%2Frustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f583513dc2ad48076665505a1418db6053657f0b/compiler%2Frustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2FCargo.toml?ref=f583513dc2ad48076665505a1418db6053657f0b", "patch": "@@ -21,4 +21,5 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+arrayvec = { version = \"0.5.1\", default-features = false }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "68197f75b9f7bc5f52c1b74aaedf4bacb09665a8", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f583513dc2ad48076665505a1418db6053657f0b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f583513dc2ad48076665505a1418db6053657f0b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=f583513dc2ad48076665505a1418db6053657f0b", "patch": "@@ -31,7 +31,9 @@ use super::unify_key::replace_if_possible;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n+use arrayvec::ArrayVec;\n use rustc_data_structures::fx::FxHashMap;\n+use std::hash::Hash;\n \n use crate::traits::{Obligation, PredicateObligations};\n \n@@ -45,6 +47,63 @@ use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::DUMMY_SP;\n \n+/// Small-storage-optimized implementation of a map\n+/// made specifically for caching results.\n+///\n+/// Stores elements in a small array up to a certain length\n+/// and switches to `HashMap` when that length is exceeded.\n+enum MiniMap<K, V> {\n+    Array(ArrayVec<[(K, V); 8]>),\n+    Map(FxHashMap<K, V>),\n+}\n+\n+impl<K: Eq + Hash, V> MiniMap<K, V> {\n+    /// Creates an empty `MiniMap`.\n+    pub fn new() -> Self {\n+        MiniMap::Array(ArrayVec::new())\n+    }\n+\n+    /// Inserts or updates value in the map.\n+    pub fn insert(&mut self, key: K, value: V) {\n+        match self {\n+            MiniMap::Array(array) => {\n+                for pair in array.iter_mut() {\n+                    if pair.0 == key {\n+                        pair.1 = value;\n+                        return;\n+                    }\n+                }\n+                if let Err(error) = array.try_push((key, value)) {\n+                    let mut map: FxHashMap<K, V> = array.drain(..).collect();\n+                    let (key, value) = error.element();\n+                    map.insert(key, value);\n+                    *self = MiniMap::Map(map);\n+                }\n+            }\n+            MiniMap::Map(map) => {\n+                map.insert(key, value);\n+            }\n+        }\n+    }\n+\n+    /// Return value by key if any.\n+    pub fn get(&self, key: &K) -> Option<&V> {\n+        match self {\n+            MiniMap::Array(array) => {\n+                for pair in array {\n+                    if pair.0 == *key {\n+                        return Some(&pair.1);\n+                    }\n+                }\n+                return None;\n+            }\n+            MiniMap::Map(map) => {\n+                return map.get(key);\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n     pub infcx: &'infcx InferCtxt<'infcx, 'tcx>,\n@@ -380,7 +439,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             needs_wf: false,\n             root_ty: ty,\n             param_env: self.param_env,\n-            cache: FxHashMap::default(),\n+            cache: MiniMap::new(),\n         };\n \n         let ty = match generalize.relate(ty, ty) {\n@@ -441,7 +500,7 @@ struct Generalizer<'cx, 'tcx> {\n \n     param_env: ty::ParamEnv<'tcx>,\n \n-    cache: FxHashMap<(Ty<'tcx>, Ty<'tcx>), RelateResult<'tcx, Ty<'tcx>>>,\n+    cache: MiniMap<(Ty<'tcx>, Ty<'tcx>), RelateResult<'tcx, Ty<'tcx>>>,\n }\n \n /// Result from a generalization operation. This includes"}]}