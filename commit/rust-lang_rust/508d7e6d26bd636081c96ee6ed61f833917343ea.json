{"sha": "508d7e6d26bd636081c96ee6ed61f833917343ea", "node_id": "C_kwDOAAsO6NoAKDUwOGQ3ZTZkMjZiZDYzNjA4MWM5NmVlNmVkNjFmODMzOTE3MzQzZWE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-03T13:02:49Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-10T13:20:16Z"}, "message": "errors: use `HashMap` to store diagnostic args\n\nEager translation will enable subdiagnostics to be translated multiple\ntimes with different arguments - this requires the ability to replace\nthe value of one argument with a new value, which is better suited to a\n`HashMap` than the previous storage, a `Vec`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "e49e445b601f1532a438e10fa1b5a58e3957a484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49e445b601f1532a438e10fa1b5a58e3957a484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508d7e6d26bd636081c96ee6ed61f833917343ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508d7e6d26bd636081c96ee6ed61f833917343ea", "html_url": "https://github.com/rust-lang/rust/commit/508d7e6d26bd636081c96ee6ed61f833917343ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508d7e6d26bd636081c96ee6ed61f833917343ea/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febbf71219001cd7948c3d1e5ffa68706896d955", "url": "https://api.github.com/repos/rust-lang/rust/commits/febbf71219001cd7948c3d1e5ffa68706896d955", "html_url": "https://github.com/rust-lang/rust/commit/febbf71219001cd7948c3d1e5ffa68706896d955"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "e3534544b6810c3d369694f5a9f580a184e960cf", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -15,7 +15,10 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n-use rustc_errors::{translation::Translate, DiagnosticId, FatalError, Handler, Level};\n+use rustc_errors::{\n+    translation::{to_fluent_args, Translate},\n+    DiagnosticId, FatalError, Handler, Level,\n+};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n@@ -1750,7 +1753,7 @@ impl Translate for SharedEmitter {\n \n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n-        let fluent_args = self.to_fluent_args(diag.args());\n+        let fluent_args = to_fluent_args(diag.args());\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: self.translate_messages(&diag.message, &fluent_args).to_string(),\n             code: diag.code.clone(),"}, {"sha": "f14b8ee3254f33608b0bbe0b16c6374ec0c5ad9e", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -7,7 +7,7 @@\n \n use crate::emitter::FileWithAnnotatedLines;\n use crate::snippet::Line;\n-use crate::translation::Translate;\n+use crate::translation::{to_fluent_args, Translate};\n use crate::{\n     CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Emitter, FluentBundle,\n     LazyFallbackBundle, Level, MultiSpan, Style, SubDiagnostic,\n@@ -46,7 +46,7 @@ impl Translate for AnnotateSnippetEmitterWriter {\n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n-        let fluent_args = self.to_fluent_args(diag.args());\n+        let fluent_args = to_fluent_args(diag.args());\n \n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);"}, {"sha": "a267bf6c0b4d1968f8c3c921ee3457bc7e25703d", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -27,7 +27,11 @@ pub struct SuggestionsDisabled;\n /// Simplified version of `FluentArg` that can implement `Encodable` and `Decodable`. Collection of\n /// `DiagnosticArg` are converted to `FluentArgs` (consuming the collection) at the start of\n /// diagnostic emission.\n-pub type DiagnosticArg<'source> = (Cow<'source, str>, DiagnosticArgValue<'source>);\n+pub type DiagnosticArg<'iter, 'source> =\n+    (&'iter DiagnosticArgName<'source>, &'iter DiagnosticArgValue<'source>);\n+\n+/// Name of a diagnostic argument.\n+pub type DiagnosticArgName<'source> = Cow<'source, str>;\n \n /// Simplified version of `FluentValue` that can implement `Encodable` and `Decodable`. Converted\n /// to a `FluentValue` by the emitter to be used in diagnostic translation.\n@@ -229,7 +233,7 @@ pub struct Diagnostic {\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n     pub suggestions: Result<Vec<CodeSuggestion>, SuggestionsDisabled>,\n-    args: Vec<DiagnosticArg<'static>>,\n+    args: FxHashMap<DiagnosticArgName<'static>, DiagnosticArgValue<'static>>,\n \n     /// This is not used for highlighting or rendering any error message.  Rather, it can be used\n     /// as a sort key to sort a buffer of diagnostics.  By default, it is the primary span of\n@@ -321,7 +325,7 @@ impl Diagnostic {\n             span: MultiSpan::new(),\n             children: vec![],\n             suggestions: Ok(vec![]),\n-            args: vec![],\n+            args: Default::default(),\n             sort_span: DUMMY_SP,\n             is_lint: false,\n         }\n@@ -956,16 +960,19 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn args(&self) -> &[DiagnosticArg<'static>] {\n-        &self.args\n+    // Exact iteration order of diagnostic arguments shouldn't make a difference to output because\n+    // they're only used in interpolation.\n+    #[allow(rustc::potential_query_instability)]\n+    pub fn args<'a>(&'a self) -> impl Iterator<Item = DiagnosticArg<'a, 'static>> {\n+        self.args.iter()\n     }\n \n     pub fn set_arg(\n         &mut self,\n         name: impl Into<Cow<'static, str>>,\n         arg: impl IntoDiagnosticArg,\n     ) -> &mut Self {\n-        self.args.push((name.into(), arg.into_diagnostic_arg()));\n+        self.args.insert(name.into(), arg.into_diagnostic_arg());\n         self\n     }\n "}, {"sha": "cd6413bc3ec622de739180b0d7a012fa8619ebbb", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -14,7 +14,7 @@ use rustc_span::{FileLines, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n-use crate::translation::Translate;\n+use crate::translation::{to_fluent_args, Translate};\n use crate::{\n     CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, FluentBundle, Handler,\n     LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n@@ -535,7 +535,7 @@ impl Emitter for EmitterWriter {\n     }\n \n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n-        let fluent_args = self.to_fluent_args(diag.args());\n+        let fluent_args = to_fluent_args(diag.args());\n \n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);"}, {"sha": "4cc7be47fc2c69c79d2d53c7f24cae7271cbde3f", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -13,7 +13,7 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n-use crate::translation::Translate;\n+use crate::translation::{to_fluent_args, Translate};\n use crate::DiagnosticId;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n@@ -312,7 +312,7 @@ struct UnusedExterns<'a, 'b, 'c> {\n \n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n-        let args = je.to_fluent_args(diag.args());\n+        let args = to_fluent_args(diag.args());\n         let sugg = diag.suggestions.iter().flatten().map(|sugg| {\n             let translated_message = je.translate_message(&sugg.msg, &args);\n             Diagnostic {"}, {"sha": "c2ec2526a4aeaa3125c12c06c30d599908608f90", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -4,6 +4,27 @@ use rustc_data_structures::sync::Lrc;\n use rustc_error_messages::FluentArgs;\n use std::borrow::Cow;\n \n+/// Convert diagnostic arguments (a rustc internal type that exists to implement\n+/// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n+///\n+/// Typically performed once for each diagnostic at the start of `emit_diagnostic` and then\n+/// passed around as a reference thereafter.\n+pub fn to_fluent_args<'iter, 'arg: 'iter>(\n+    iter: impl Iterator<Item = DiagnosticArg<'iter, 'arg>>,\n+) -> FluentArgs<'arg> {\n+    let mut args = if let Some(size) = iter.size_hint().1 {\n+        FluentArgs::with_capacity(size)\n+    } else {\n+        FluentArgs::new()\n+    };\n+\n+    for (k, v) in iter {\n+        args.set(k.clone(), v.clone());\n+    }\n+\n+    args\n+}\n+\n pub trait Translate {\n     /// Return `FluentBundle` with localized diagnostics for the locale requested by the user. If no\n     /// language was requested by the user then this will be `None` and `fallback_fluent_bundle`\n@@ -15,15 +36,6 @@ pub trait Translate {\n     /// unavailable for the requested locale.\n     fn fallback_fluent_bundle(&self) -> &FluentBundle;\n \n-    /// Convert diagnostic arguments (a rustc internal type that exists to implement\n-    /// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n-    ///\n-    /// Typically performed once for each diagnostic at the start of `emit_diagnostic` and then\n-    /// passed around as a reference thereafter.\n-    fn to_fluent_args<'arg>(&self, args: &[DiagnosticArg<'arg>]) -> FluentArgs<'arg> {\n-        FromIterator::from_iter(args.iter().cloned())\n-    }\n-\n     /// Convert `DiagnosticMessage`s to a string, performing translation if necessary.\n     fn translate_messages(\n         &self,"}, {"sha": "2e651b5387419fa2441abbda60e515a66b00e4c1", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/508d7e6d26bd636081c96ee6ed61f833917343ea/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d7e6d26bd636081c96ee6ed61f833917343ea/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=508d7e6d26bd636081c96ee6ed61f833917343ea", "patch": "@@ -1,8 +1,9 @@\n //! Validates syntax inside Rust code blocks (\\`\\`\\`rust).\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{\n-    emitter::Emitter, translation::Translate, Applicability, Diagnostic, Handler,\n-    LazyFallbackBundle,\n+    emitter::Emitter,\n+    translation::{to_fluent_args, Translate},\n+    Applicability, Diagnostic, Handler, LazyFallbackBundle,\n };\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -193,7 +194,7 @@ impl Emitter for BufferEmitter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut buffer = self.buffer.borrow_mut();\n \n-        let fluent_args = self.to_fluent_args(diag.args());\n+        let fluent_args = to_fluent_args(diag.args());\n         let translated_main_message = self.translate_message(&diag.message[0].0, &fluent_args);\n \n         buffer.messages.push(format!(\"error from rustc: {}\", translated_main_message));"}]}