{"sha": "c679c71defc386fc1ea699d57630b07a001d0cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzljNzFkZWZjMzg2ZmMxZWE2OTlkNTc2MzBiMDdhMDAxZDBjYzE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T10:10:18Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T10:10:18Z"}, "message": "Freeze static memory of string constants.", "tree": {"sha": "72ebaf5abcde4def449850495293d19f6cda6061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ebaf5abcde4def449850495293d19f6cda6061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c679c71defc386fc1ea699d57630b07a001d0cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c679c71defc386fc1ea699d57630b07a001d0cc1", "html_url": "https://github.com/rust-lang/rust/commit/c679c71defc386fc1ea699d57630b07a001d0cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c679c71defc386fc1ea699d57630b07a001d0cc1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85cba42a7bb154361519aafc4a3ec5121eb6691c", "url": "https://api.github.com/repos/rust-lang/rust/commits/85cba42a7bb154361519aafc4a3ec5121eb6691c", "html_url": "https://github.com/rust-lang/rust/commit/85cba42a7bb154361519aafc4a3ec5121eb6691c"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "5664a3b9c08b59ae174565b609fd8245cfb6c4c1", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c679c71defc386fc1ea699d57630b07a001d0cc1/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c679c71defc386fc1ea699d57630b07a001d0cc1/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=c679c71defc386fc1ea699d57630b07a001d0cc1", "patch": "@@ -217,11 +217,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Char(c) => Value::ByVal(PrimVal::Char(c)),\n \n             Str(ref s) => {\n-                let psize = self.memory.pointer_size();\n+                // Create and freeze the allocation holding the characters.\n                 let static_ptr = self.memory.allocate(s.len(), 1)?;\n+                self.memory.write_bytes(static_ptr, s.as_bytes())?;\n+                self.memory.freeze(static_ptr.alloc_id)?;\n+\n+                // Create an allocation to hold the fat pointer to the above char allocation.\n+                // FIXME(solson): Introduce Value::ByValPair to remove this allocation.\n+                let psize = self.memory.pointer_size();\n                 let ptr = self.memory.allocate(psize * 2, psize)?;\n                 let (ptr, extra) = self.get_fat_ptr(ptr);\n-                self.memory.write_bytes(static_ptr, s.as_bytes())?;\n                 self.memory.write_ptr(ptr, static_ptr)?;\n                 self.memory.write_usize(extra, s.len() as u64)?;\n                 Value::ByRef(ptr)\n@@ -230,6 +235,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ByteStr(ref bs) => {\n                 let ptr = self.memory.allocate(bs.len(), 1)?;\n                 self.memory.write_bytes(ptr, bs)?;\n+                self.memory.freeze(ptr.alloc_id)?;\n                 Value::ByVal(PrimVal::AbstractPtr(ptr))\n             }\n "}, {"sha": "ede76b4728e0ecb771b3d8c4f333b73c87e99535", "filename": "src/memory.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c679c71defc386fc1ea699d57630b07a001d0cc1/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c679c71defc386fc1ea699d57630b07a001d0cc1/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=c679c71defc386fc1ea699d57630b07a001d0cc1", "patch": "@@ -444,9 +444,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n /// Reading and writing\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n-\n     pub fn freeze(&mut self, alloc_id: AllocId) -> EvalResult<'tcx, ()> {\n-        self.get_mut(alloc_id)?.immutable = true;\n+        // Never freeze the zero-sized allocation. If you do that, then getting a mutable handle to\n+        // _any_ ZST becomes an error, since they all share the same allocation.\n+        if alloc_id != ZST_ALLOC_ID {\n+            self.get_mut(alloc_id)?.immutable = true;\n+        }\n         Ok(())\n     }\n "}, {"sha": "89d69cf7d7f4b3d99adee01ea621564885281c61", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c679c71defc386fc1ea699d57630b07a001d0cc1/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c679c71defc386fc1ea699d57630b07a001d0cc1/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=c679c71defc386fc1ea699d57630b07a001d0cc1", "patch": "@@ -0,0 +1,9 @@\n+use std::mem::transmute;\n+\n+#[allow(mutable_transmutes)]\n+fn main() {\n+    unsafe {\n+        let s = \"this is a test\";\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR: tried to modify constant memory\n+    }\n+}"}, {"sha": "743fbe60efff69c9e5197678bad7dc90c7ade13e", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c679c71defc386fc1ea699d57630b07a001d0cc1/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c679c71defc386fc1ea699d57630b07a001d0cc1/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=c679c71defc386fc1ea699d57630b07a001d0cc1", "patch": "@@ -0,0 +1,9 @@\n+use std::mem::transmute;\n+\n+#[allow(mutable_transmutes)]\n+fn main() {\n+    unsafe {\n+        let bs = b\"this is a test\";\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR: tried to modify constant memory\n+    }\n+}"}]}