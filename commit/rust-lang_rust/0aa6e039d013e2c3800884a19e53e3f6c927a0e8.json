{"sha": "0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTZlMDM5ZDAxM2UyYzM4MDA4ODRhMTllNTNlM2Y2YzkyN2EwZTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-24T12:55:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-30T16:18:32Z"}, "message": "Remove the `UnequalTypes` error variant", "tree": {"sha": "e7273ae7a0636426b652d8e78db5d4be18dc0ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7273ae7a0636426b652d8e78db5d4be18dc0ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrnQdgsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARI\ndRAApebolAY1zzx0W/i/+Qzw/Yomtl16a/rHyIdNaw+S6tFNxnpyJbT4DuFGm1Yn\nC9vQvQ9XwimBk9pdfmP+5/fuILjwViTc2sl8Xbv76mBtMWJ0yRYurNeg0qi1RizA\nuhZ+k2t8TNpWNuYwxUAdszYwPA+FuUsxtKdUVfC75PiiyH82O9SzEs7p4ApzJ+JZ\nef/Z9jERfh4oYu/oldqyDnRu4wKnYP1kBysEtgwB5SCmvOr/o2M/EKXJ6zTtPNCl\n6FmjJrMW0+uZM/zbS+Be67GYW9y+3lFzotGfvyJsHjLFDzBw9wmTTBvvPgzqwLog\nOGidanAU0MECQF5W8lagUnLghwntdih2qH7Lsumjwgy27C/kVw9pFt4xpTXlnNbt\ny8/WzklJKeoaw3BpDoapwTWHo5J226jtmo+mPVa2n13vHp5hoa+F9tLH4KHowd9R\nLLeeGUP9Uec3rgLg+R3wTr9MHeJ1YGlcID3Cr3lMWqDrbSi2MqjFSy8h7Uvq5zdb\n3bTZDQtH0eqep03OrL1FYFFm2T3MBMB4gy+yo4vwDhL56zEc03hSWConj4hmaKV4\nCpOFo9anPbTs1AjNGk2GMBX6AgUSzZeich1juX4ASSOdEOvseN8VFIIP0qE0uii7\nEx05qDR9k0p/MXXajDAOvmaL7dtdS46SuB04vaZ5/7d97gg=\n=7qxo\n-----END PGP SIGNATURE-----", "payload": "tree e7273ae7a0636426b652d8e78db5d4be18dc0ecc\nparent 7d982fdcf439799efbcc9f0cfcda99fa87b07460\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524574534 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525105112 +0200\n\nRemove the `UnequalTypes` error variant\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "html_url": "https://github.com/rust-lang/rust/commit/0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d982fdcf439799efbcc9f0cfcda99fa87b07460", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d982fdcf439799efbcc9f0cfcda99fa87b07460", "html_url": "https://github.com/rust-lang/rust/commit/7d982fdcf439799efbcc9f0cfcda99fa87b07460"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "494fa49b53de9032ee945c2095000918378f4b1d", "filename": "src/librustc/ich/impls_const_math.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc%2Fich%2Fimpls_const_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc%2Fich%2Fimpls_const_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_const_math.rs?ref=0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "patch": "@@ -17,7 +17,6 @@ impl_stable_hash_for!(struct ::rustc_const_math::ConstFloat {\n });\n \n impl_stable_hash_for!(enum ::rustc_const_math::ConstMathErr {\n-    UnequalTypes(op),\n     Overflow(op),\n     DivisionByZero,\n     RemainderByZero,"}, {"sha": "94a51c23a5ea63f44ed248e04c25b000e27d48ad", "filename": "src/librustc_const_math/err.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc_const_math%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc_const_math%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ferr.rs?ref=0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "patch": "@@ -10,7 +10,6 @@\n \n #[derive(Debug, PartialEq, Eq, Clone, RustcEncodable, RustcDecodable)]\n pub enum ConstMathErr {\n-    UnequalTypes(Op),\n     Overflow(Op),\n     DivisionByZero,\n     RemainderByZero,\n@@ -36,17 +35,6 @@ impl ConstMathErr {\n     pub fn description(&self) -> &'static str {\n         use self::Op::*;\n         match *self {\n-            UnequalTypes(Add) => \"tried to add two values of different types\",\n-            UnequalTypes(Sub) => \"tried to subtract two values of different types\",\n-            UnequalTypes(Mul) => \"tried to multiply two values of different types\",\n-            UnequalTypes(Div) => \"tried to divide two values of different types\",\n-            UnequalTypes(Rem) => {\n-                \"tried to calculate the remainder of two values of different types\"\n-            },\n-            UnequalTypes(BitAnd) => \"tried to bitand two values of different types\",\n-            UnequalTypes(BitOr) => \"tried to bitor two values of different types\",\n-            UnequalTypes(BitXor) => \"tried to xor two values of different types\",\n-            UnequalTypes(_) => unreachable!(),\n             Overflow(Add) => \"attempt to add with overflow\",\n             Overflow(Sub) => \"attempt to subtract with overflow\",\n             Overflow(Mul) => \"attempt to multiply with overflow\","}, {"sha": "35cfe466c8a735574a3157872974474e44cbdd84", "filename": "src/librustc_const_math/float.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc_const_math%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6e039d013e2c3800884a19e53e3f6c927a0e8/src%2Flibrustc_const_math%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ffloat.rs?ref=0aa6e039d013e2c3800884a19e53e3f6c927a0e8", "patch": "@@ -16,8 +16,6 @@ use syntax::ast;\n use rustc_apfloat::{Float, FloatConvert, Status};\n use rustc_apfloat::ieee::{Single, Double};\n \n-use super::err::*;\n-\n // Note that equality for `ConstFloat` means that the it is the same\n // constant, not that the rust values are equal. In particular, `NaN\n // == NaN` (at least if it's the same NaN; distinct encodings for NaN\n@@ -172,8 +170,8 @@ impl ::std::fmt::Debug for ConstFloat {\n macro_rules! derive_binop {\n     ($op:ident, $func:ident) => {\n         impl ::std::ops::$op for ConstFloat {\n-            type Output = Result<Self, ConstMathErr>;\n-            fn $func(self, rhs: Self) -> Result<Self, ConstMathErr> {\n+            type Output = Option<Self>;\n+            fn $func(self, rhs: Self) -> Option<Self> {\n                 let bits = match (self.ty, rhs.ty) {\n                     (ast::FloatTy::F32, ast::FloatTy::F32) =>{\n                         let a = Single::from_bits(self.bits);\n@@ -185,9 +183,9 @@ macro_rules! derive_binop {\n                         let b = Double::from_bits(rhs.bits);\n                         a.$func(b).value.to_bits()\n                     }\n-                    _ => return Err(UnequalTypes(Op::$op)),\n+                    _ => return None,\n                 };\n-                Ok(ConstFloat { bits, ty: self.ty })\n+                Some(ConstFloat { bits, ty: self.ty })\n             }\n         }\n     }"}]}