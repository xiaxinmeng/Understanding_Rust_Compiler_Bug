{"sha": "daf28a421aece474dfcd4c5185709ca789fe29e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjI4YTQyMWFlY2U0NzRkZmNkNGM1MTg1NzA5Y2E3ODlmZTI5ZTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-30T19:24:16Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-30T20:45:10Z"}, "message": "Disallow dereferencing enum types when the variant is private\n\nIf an enum type's only variant is private, disallow dereferencing\nvalues of its type.\n\nDue to #4082, this only applies to enums that are in the same crate.\n\nr=pcwalton\n\nCloses #818", "tree": {"sha": "4d7a357363dec4e51049ea989b2731161234c3b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7a357363dec4e51049ea989b2731161234c3b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf28a421aece474dfcd4c5185709ca789fe29e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf28a421aece474dfcd4c5185709ca789fe29e3", "html_url": "https://github.com/rust-lang/rust/commit/daf28a421aece474dfcd4c5185709ca789fe29e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf28a421aece474dfcd4c5185709ca789fe29e3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89d4ac8306dbe597f0bfef7cf92bea372eece1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d4ac8306dbe597f0bfef7cf92bea372eece1d", "html_url": "https://github.com/rust-lang/rust/commit/f89d4ac8306dbe597f0bfef7cf92bea372eece1d"}], "stats": {"total": 264, "additions": 186, "deletions": 78}, "files": [{"sha": "d6c74ae33f4827e05224a14596c0d80e9e6d2a6c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -99,7 +99,7 @@ fn maybe_get_item_ast(tcx: ty::ctxt, def: ast::def_id,\n }\n \n fn get_enum_variants(tcx: ty::ctxt, def: ast::def_id)\n-    -> ~[ty::variant_info] {\n+    -> ~[ty::VariantInfo] {\n     let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     return decoder::get_enum_variants(cstore.intr, cdata, def.node, tcx)"}, {"sha": "0df86fac044421c0ce4d35c1415ceab303a53360", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -612,11 +612,11 @@ fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n }\n \n fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n-                     tcx: ty::ctxt) -> ~[ty::variant_info] {\n+                     tcx: ty::ctxt) -> ~[ty::VariantInfo] {\n     let data = cdata.data;\n     let items = Reader::get_doc(Reader::Doc(data), tag_items);\n     let item = find_item(id, items);\n-    let mut infos: ~[ty::variant_info] = ~[];\n+    let mut infos: ~[ty::VariantInfo] = ~[];\n     let variant_ids = enum_variant_ids(item, cdata);\n     let mut disr_val = 0;\n     for variant_ids.each |did| {\n@@ -634,8 +634,11 @@ fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n           Some(val) => { disr_val = val; }\n           _         => { /* empty */ }\n         }\n-        infos.push(@{args: arg_tys, ctor_ty: ctor_ty, name: name,\n-                           id: *did, disr_val: disr_val});\n+        infos.push(@ty::VariantInfo_{args: arg_tys,\n+                       ctor_ty: ctor_ty, name: name,\n+                  // I'm not even sure if we encode visibility\n+                  // for variants -- TEST -- tjc\n+                  id: *did, disr_val: disr_val, vis: ast::inherited});\n         disr_val += 1;\n     }\n     return infos;"}, {"sha": "75cf4d7aff8cbd3a355ff2645a459a53fee6889e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -3,10 +3,15 @@\n \n use /*mod*/ syntax::ast;\n use /*mod*/ syntax::visit;\n-use syntax::ast::{def_variant, expr_field, expr_struct, ident, item_class};\n-use syntax::ast::{item_impl, item_trait, local_crate, node_id, pat_struct};\n+use syntax::ast_map;\n+use syntax::ast::{def_variant, expr_field, expr_struct, expr_unary, ident,\n+                  item_class};\n+use syntax::ast::{item_impl, item_trait, item_enum, local_crate, node_id,\n+                  pat_struct};\n use syntax::ast::{private, provided, required};\n use syntax::ast_map::{node_item, node_method};\n+use syntax::ast_util::{has_legacy_export_attr, is_local,\n+                       visibility_to_privacy, Private, Public};\n use ty::{ty_class, ty_enum};\n use typeck::{method_map, method_origin, method_param, method_self};\n use typeck::{method_static, method_trait};\n@@ -16,13 +21,15 @@ use dvec::DVec;\n \n fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     let privileged_items = @DVec();\n+    let legacy_exports = has_legacy_export_attr(crate.node.attrs);\n \n     // Adds structs that are privileged to this scope.\n     let add_privileged_items = |items: &[@ast::item]| {\n         let mut count = 0;\n         for items.each |item| {\n             match item.node {\n-                item_class(*) | item_trait(*) | item_impl(*) => {\n+                item_class(*) | item_trait(*) | item_impl(*)\n+                | item_enum(*) => {\n                     privileged_items.push(item.id);\n                     count += 1;\n                 }\n@@ -32,6 +39,34 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n         count\n     };\n \n+    // Checks that an enum variant is in scope\n+    let check_variant = |span, enum_id| {\n+        let variant_info = ty::enum_variants(tcx, enum_id)[0];\n+        let parental_privacy = if is_local(enum_id) {\n+            let parent_vis = ast_map::node_item_query(tcx.items, enum_id.node,\n+                                   |it| { it.vis },\n+                                   ~\"unbound enum parent when checking \\\n+                                    dereference of enum type\");\n+            visibility_to_privacy(parent_vis, legacy_exports)\n+        }\n+        else {\n+            // WRONG\n+            Public\n+        };\n+        debug!(\"parental_privacy = %?\", parental_privacy);\n+        debug!(\"vis = %?, priv = %?, legacy_exports = %?\",\n+               variant_info.vis,\n+               visibility_to_privacy(variant_info.vis, legacy_exports),\n+               legacy_exports);\n+        // inherited => privacy of the enum item\n+        if visibility_to_privacy(variant_info.vis,\n+                                 parental_privacy == Public) == Private {\n+            tcx.sess.span_err(span,\n+                ~\"can only dereference enums \\\n+                  with a single, public variant\");\n+        }\n+    };\n+\n     // Checks that a private field is in scope.\n     let check_field = |span, id, ident| {\n         let fields = ty::lookup_class_fields(tcx, id);\n@@ -222,6 +257,21 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                         }\n                     }\n                 }\n+                expr_unary(ast::deref, operand) => {\n+                    // In *e, we need to check that if e's type is an\n+                    // enum type t, then t's first variant is public or\n+                    // privileged. (We can assume it has only one variant\n+                    // since typeck already happened.)\n+                    match ty::get(ty::expr_ty(tcx, operand)).sty {\n+                        ty_enum(id, _) => {\n+                            if id.crate != local_crate ||\n+                                !privileged_items.contains(&(id.node)) {\n+                                check_variant(expr.span, id);\n+                            }\n+                        }\n+                        _ => { /* No check needed */ }\n+                    }\n+                }\n                 _ => {}\n             }\n "}, {"sha": "8d04a2beb020eb4804e6b68039553dd08ba78973", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -44,6 +44,8 @@ use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named};\n use syntax::ast_util::{def_id_of_def, dummy_sp, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n+use syntax::ast_util::{Privacy, Public, Private, visibility_to_privacy};\n+use syntax::ast_util::has_legacy_export_attr;\n use syntax::attr::{attr_metas, contains_name};\n use syntax::print::pprust::{pat_to_str, path_to_str};\n use syntax::codemap::span;\n@@ -539,18 +541,6 @@ fn unused_import_lint_level(session: Session) -> level {\n     return allow;\n }\n \n-enum Privacy {\n-    Private,\n-    Public\n-}\n-\n-impl Privacy : cmp::Eq {\n-    pure fn eq(&self, other: &Privacy) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &Privacy) -> bool { !(*self).eq(other) }\n-}\n-\n // Records a possibly-private type definition.\n struct TypeNsDef {\n     mut privacy: Privacy,\n@@ -780,18 +770,6 @@ fn namespace_to_str(ns: Namespace) -> ~str {\n     }\n }\n \n-fn has_legacy_export_attr(attrs: &[syntax::ast::attribute]) -> bool {\n-    for attrs.each |attribute| {\n-        match attribute.node.value.node {\n-          syntax::ast::meta_word(w) if w == ~\"legacy_exports\" => {\n-            return true;\n-          }\n-          _ => {}\n-        }\n-    }\n-    return false;\n-}\n-\n fn Resolver(session: Session, lang_items: LanguageItems,\n             crate: @crate) -> Resolver {\n     let graph_root = @NameBindings();\n@@ -950,21 +928,6 @@ impl Resolver {\n         }));\n     }\n \n-    fn visibility_to_privacy(visibility: visibility,\n-                             legacy_exports: bool) -> Privacy {\n-        if legacy_exports {\n-            match visibility {\n-              inherited | public => Public,\n-              private => Private\n-            }\n-        } else {\n-            match visibility {\n-              public => Public,\n-              inherited | private => Private\n-            }\n-        }\n-    }\n-\n     /// Returns the current module tracked by the reduced graph parent.\n     fn get_module_from_parent(reduced_graph_parent: ReducedGraphParent)\n                            -> @Module {\n@@ -1121,7 +1084,7 @@ impl Resolver {\n         let legacy = match parent {\n           ModuleReducedGraphParent(m) => m.legacy_exports\n         };\n-        let privacy = self.visibility_to_privacy(item.vis, legacy);\n+        let privacy = visibility_to_privacy(item.vis, legacy);\n \n         match item.node {\n             item_mod(module_) => {\n@@ -1205,8 +1168,8 @@ impl Resolver {\n                     self.build_reduced_graph_for_variant(*variant,\n                         local_def(item.id),\n                         // inherited => privacy of the enum item\n-                        self.visibility_to_privacy(variant.node.vis,\n-                                                   privacy == Public),\n+                        visibility_to_privacy(variant.node.vis,\n+                                              privacy == Public),\n                         new_parent, visitor);\n                 }\n             }\n@@ -1455,7 +1418,7 @@ impl Resolver {\n         let legacy = match parent {\n           ModuleReducedGraphParent(m) => m.legacy_exports\n         };\n-        let privacy = self.visibility_to_privacy(view_item.vis, legacy);\n+        let privacy = visibility_to_privacy(view_item.vis, legacy);\n         match view_item.node {\n             view_item_import(view_paths) => {\n                 for view_paths.each |view_path| {"}, {"sha": "83877b7117cde6726b5bb0d5916b738a1685cac3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -517,7 +517,7 @@ fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n     let _icx = cx.insn_ctxt(\"iter_structural_ty\");\n \n     fn iter_variant(cx: block, a_tup: ValueRef,\n-                    variant: ty::variant_info,\n+                    variant: ty::VariantInfo,\n                     tps: ~[ty::t], tid: ast::def_id,\n                     f: val_and_ty_fn) -> block {\n         let _icx = cx.insn_ctxt(\"iter_variant\");\n@@ -1802,7 +1802,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n \n fn trans_enum_def(ccx: @crate_ctxt, enum_definition: ast::enum_def,\n                   id: ast::node_id, tps: ~[ast::ty_param], degen: bool,\n-                  path: @ast_map::path, vi: @~[ty::variant_info],\n+                  path: @ast_map::path, vi: @~[ty::VariantInfo],\n                   i: &mut uint) {\n     for vec::each(enum_definition.variants) |variant| {\n         let disr_val = vi[*i].disr_val;"}, {"sha": "cd70f7b19586d939bcd3ba1a770db42adf09a51a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -1,4 +1,3 @@\n-// #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n use std::{map, smallintmap};\n@@ -158,7 +157,7 @@ export resolved_mode;\n export arg_mode;\n export unify_mode;\n export set_default_mode;\n-export variant_info;\n+export VariantInfo, VariantInfo_;\n export walk_ty, maybe_walk_ty;\n export occurs_check;\n export param_ty;\n@@ -388,7 +387,7 @@ type ctxt =\n       needs_unwind_cleanup_cache: HashMap<t, bool>,\n       kind_cache: HashMap<t, Kind>,\n       ast_ty_to_ty_cache: HashMap<@ast::Ty, ast_ty_to_ty_cache_entry>,\n-      enum_var_cache: HashMap<def_id, @~[variant_info]>,\n+      enum_var_cache: HashMap<def_id, @~[VariantInfo]>,\n       trait_method_cache: HashMap<def_id, @~[method]>,\n       ty_param_bounds: HashMap<ast::node_id, param_bounds>,\n       inferred_modes: HashMap<ast::node_id, ast::mode>,\n@@ -3638,19 +3637,28 @@ fn struct_ctor_id(cx: ctxt, struct_did: ast::def_id) -> Option<ast::def_id> {\n }\n \n // Enum information\n-type variant_info = @{args: ~[t], ctor_ty: t, name: ast::ident,\n-                      id: ast::def_id, disr_val: int};\n+struct VariantInfo_ {\n+    args: ~[t],\n+    ctor_ty: t,\n+    name: ast::ident,\n+    id: ast::def_id,\n+    disr_val: int,\n+    vis: visibility\n+}\n+\n+type VariantInfo = @VariantInfo_;\n \n fn substd_enum_variants(cx: ctxt,\n                         id: ast::def_id,\n-                        substs: &substs) -> ~[variant_info] {\n+                        substs: &substs) -> ~[VariantInfo] {\n     do vec::map(*enum_variants(cx, id)) |variant_info| {\n         let substd_args = vec::map(variant_info.args,\n                                    |aty| subst(cx, substs, *aty));\n \n         let substd_ctor_ty = subst(cx, substs, variant_info.ctor_ty);\n \n-        @{args: substd_args, ctor_ty: substd_ctor_ty, ..**variant_info}\n+        @VariantInfo_{args: substd_args, ctor_ty: substd_ctor_ty,\n+                      ..**variant_info}\n     }\n }\n \n@@ -3761,7 +3769,7 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n }\n \n fn enum_is_univariant(cx: ctxt, id: ast::def_id) -> bool {\n-    vec::len(*enum_variants(cx, id)) == 1u\n+    enum_variants(cx, id).len() == 1\n }\n \n fn type_is_empty(cx: ctxt, t: t) -> bool {\n@@ -3771,7 +3779,7 @@ fn type_is_empty(cx: ctxt, t: t) -> bool {\n      }\n }\n \n-fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n+fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n     match cx.enum_var_cache.find(id) {\n       Some(variants) => return variants,\n       _ => { /* fallthrough */ }\n@@ -3811,11 +3819,12 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n                           }\n                           _ => disr_val += 1\n                         }\n-                        @{args: arg_tys,\n+                        @VariantInfo_{args: arg_tys,\n                           ctor_ty: ctor_ty,\n                           name: variant.node.name,\n                           id: ast_util::local_def(variant.node.id),\n-                          disr_val: disr_val\n+                          disr_val: disr_val,\n+                          vis: variant.node.vis\n                          }\n                     }\n                     ast::struct_variant_kind(_) => {\n@@ -3837,13 +3846,13 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n \n // Returns information about the enum variant with the given ID:\n fn enum_variant_with_id(cx: ctxt, enum_id: ast::def_id,\n-                        variant_id: ast::def_id) -> variant_info {\n+                        variant_id: ast::def_id) -> VariantInfo {\n     let variants = enum_variants(cx, enum_id);\n-    let mut i = 0u;\n-    while i < vec::len::<variant_info>(*variants) {\n+    let mut i = 0;\n+    while i < variants.len() {\n         let variant = variants[i];\n         if variant.id == variant_id { return variant; }\n-        i += 1u;\n+        i += 1;\n     }\n     cx.sess.bug(~\"enum_variant_with_id(): no variant exists with that ID\");\n }"}, {"sha": "b9795c11ed50a09cd2e8b87ca3c2c1c76990d7de", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -68,7 +68,7 @@ type parameter).\n \n use astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n use astconv::{ast_region_to_region};\n-use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig};\n+use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_};\n use regionmanip::{replace_bound_regions_in_fn_ty};\n use rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n use rscope::{in_binding_rscope, region_scope, type_rscope,\n@@ -78,6 +78,7 @@ use typeck::infer::{resolve_type, force_tvar};\n use result::{Result, Ok, Err};\n use syntax::print::pprust;\n use syntax::parse::token::special_idents;\n+use syntax::ast_util::{is_local, visibility_to_privacy, Private, Public};\n use vtable::{LocationInfo, VtableContext};\n \n use std::map::HashMap;\n@@ -1785,9 +1786,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           ast::deref => {\n             let sty = structure_of(fcx, expr.span, oprnd_t);\n \n-            // deref'ing an unsafe pointer requires that we be in an unsafe\n-            // context\n             match sty {\n+              // deref'ing an unsafe pointer requires that we be in an unsafe\n+              // context\n               ty::ty_ptr(*) => {\n                 fcx.require_unsafe(\n                     expr.span,\n@@ -1796,8 +1797,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               _ => { /*ok*/ }\n             }\n \n-            match ty::deref_sty(tcx, &sty, true) {\n-              Some(mt) => { oprnd_t = mt.ty }\n+            let operand_ty = ty::deref_sty(tcx, &sty, true);\n+\n+            match operand_ty {\n+              Some(mt) => {\n+                  oprnd_t = mt.ty\n+              }\n               None => {\n                 match sty {\n                   ty::ty_enum(*) => {\n@@ -2460,7 +2465,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n                        id: ast::node_id) {\n     fn do_check(ccx: @crate_ctxt, sp: span, vs: ~[ast::variant],\n                 id: ast::node_id, disr_vals: &mut ~[int], disr_val: &mut int,\n-                variants: &mut ~[ty::variant_info]) {\n+                variants: &mut ~[ty::VariantInfo]) {\n         let rty = ty::node_id_to_type(ccx.tcx, id);\n         for vs.each |v| {\n             do v.node.disr_expr.iter |e_ref| {\n@@ -2522,9 +2527,9 @@ fn check_enum_variants(ccx: @crate_ctxt,\n                 None => {}\n                 Some(arg_tys) => {\n                     variants.push(\n-                        @{args: arg_tys, ctor_ty: ctor_ty,\n+                        @VariantInfo_{args: arg_tys, ctor_ty: ctor_ty,\n                           name: v.node.name, id: local_def(v.node.id),\n-                          disr_val: this_disr_val});\n+                          disr_val: this_disr_val, vis: v.node.vis});\n                 }\n             }\n         }"}, {"sha": "eb82b95389da1dc8ff2d8bbce509a04c5fe3bc3e", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -45,7 +45,8 @@ use syntax::{ast, ast_util, ast_map};\n use ast::spanned;\n use ast::{required, provided};\n use syntax::ast_map::node_id_to_str;\n-use syntax::ast_util::{local_def, respan, split_trait_methods};\n+use syntax::ast_util::{local_def, respan, split_trait_methods,\n+                       has_legacy_export_attr};\n use syntax::visit;\n use metadata::csearch;\n use util::common::{block_query, loop_query};\n@@ -372,7 +373,8 @@ fn check_crate(tcx: ty::ctxt,\n                             method_map: std::map::HashMap(),\n                             vtable_map: std::map::HashMap(),\n                             coherence_info: @coherence::CoherenceInfo(),\n-                            tcx: tcx});\n+                            tcx: tcx\n+                           });\n     collect::collect_item_types(ccx, crate);\n     coherence::check_coherence(ccx, crate);\n     deriving::check_deriving(ccx, crate);"}, {"sha": "6e0069a649aed793c07882a0a3db175e9f05c67f", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -391,6 +391,16 @@ fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n       }\n     }\n }\n+\n+fn node_item_query<Result>(items: map, id: node_id,\n+                           query: fn(@item) -> Result,\n+                           error_msg: ~str) -> Result {\n+    match items.find(id) {\n+        Some(node_item(it, _)) => query(it),\n+        _ => fail(error_msg)\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "e4e29d1fb45507b9f14fa411b01022ce565e48a3", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -602,6 +602,46 @@ fn struct_def_is_tuple_like(struct_def: @ast::struct_def) -> bool {\n     struct_def.ctor_id.is_some()\n }\n \n+\n+fn visibility_to_privacy(visibility: visibility,\n+                         legacy_exports: bool) -> Privacy {\n+    if legacy_exports {\n+        match visibility {\n+            inherited | public => Public,\n+            private => Private\n+        }\n+    } else {\n+        match visibility {\n+            public => Public,\n+            inherited | private => Private\n+        }\n+    }\n+}\n+\n+enum Privacy {\n+    Private,\n+    Public\n+}\n+\n+impl Privacy : cmp::Eq {\n+    pure fn eq(&self, other: &Privacy) -> bool {\n+        ((*self) as uint) == ((*other) as uint)\n+    }\n+    pure fn ne(&self, other: &Privacy) -> bool { !(*self).eq(other) }\n+}\n+\n+fn has_legacy_export_attr(attrs: &[attribute]) -> bool {\n+    for attrs.each |attribute| {\n+        match attribute.node.value.node {\n+          meta_word(w) if w == ~\"legacy_exports\" => {\n+            return true;\n+          }\n+          _ => {}\n+        }\n+    }\n+    return false;\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "dcde6e5a0377f49d2e3bf4e0cd2fd4dfed21b786", "filename": "src/test/auxiliary/private_variant_1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -0,0 +1,5 @@\n+mod super_sekrit {\n+    pub enum sooper_sekrit {\n+        pub quux, priv baz\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "7b8c986dded65f8f6c0c0c35183ca6c2b70f669c", "filename": "src/test/compile-fail/issue-818.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-818.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -0,0 +1,14 @@\n+mod ctr {\n+\n+    pub enum ctr { priv mkCtr(int) }\n+\n+    pub fn new(i: int) -> ctr { mkCtr(i) }\n+    pub fn inc(c: ctr) -> ctr { mkCtr(*c + 1) }\n+}\n+\n+\n+fn main() {\n+    let c = ctr::new(42);\n+    let c2 = ctr::inc(c);\n+    assert *c2 == 5; //~ ERROR can only dereference enums with a single, public variant\n+}\n\\ No newline at end of file"}, {"sha": "cfea536fd32c5d997eabf178a62aa40970cf2c8c", "filename": "src/test/compile-fail/private_variant_2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf28a421aece474dfcd4c5185709ca789fe29e3/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs?ref=daf28a421aece474dfcd4c5185709ca789fe29e3", "patch": "@@ -0,0 +1,7 @@\n+// xfail-test\n+// aux-build:private_variant_1.rs\n+extern mod private_variant_1;\n+\n+fn main() {\n+    let _x = private_variant_1::super_sekrit::baz; //~ ERROR baz is private\n+}\n\\ No newline at end of file"}]}