{"sha": "1e4aaee7bbc1d56698e70158aa35f578422623d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNGFhZWU3YmJjMWQ1NjY5OGU3MDE1OGFhMzVmNTc4NDIyNjIzZDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T14:51:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T14:51:44Z"}, "message": "internal: refactor unresolved proc macro diagnostic", "tree": {"sha": "0d7a63a204895fb6c9f3425bb6fce9d6a46b1de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d7a63a204895fb6c9f3425bb6fce9d6a46b1de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e4aaee7bbc1d56698e70158aa35f578422623d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4aaee7bbc1d56698e70158aa35f578422623d9", "html_url": "https://github.com/rust-lang/rust/commit/1e4aaee7bbc1d56698e70158aa35f578422623d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e4aaee7bbc1d56698e70158aa35f578422623d9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f85e383b94376d55bb5ee6be375ef3dc0006590f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85e383b94376d55bb5ee6be375ef3dc0006590f", "html_url": "https://github.com/rust-lang/rust/commit/f85e383b94376d55bb5ee6be375ef3dc0006590f"}], "stats": {"total": 120, "additions": 59, "deletions": 61}, "files": [{"sha": "2039d2b433c2176e4fff68786ba839b250cdb4de", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -36,6 +36,7 @@ diagnostics![\n     UnresolvedExternCrate,\n     UnresolvedImport,\n     UnresolvedMacroCall,\n+    UnresolvedProcMacro,\n     MissingFields,\n     InactiveCode,\n ];\n@@ -69,46 +70,15 @@ pub struct InactiveCode {\n     pub opts: CfgOptions,\n }\n \n-// Diagnostic: unresolved-proc-macro\n-//\n-// This diagnostic is shown when a procedural macro can not be found. This usually means that\n-// procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n-// but can also indicate project setup problems.\n-//\n-// If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n-// `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n-// enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct UnresolvedProcMacro {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n+    pub node: InFile<SyntaxNodePtr>,\n     /// If the diagnostic can be pinpointed more accurately than via `node`, this is the `TextRange`\n     /// to use instead.\n     pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n }\n \n-impl Diagnostic for UnresolvedProcMacro {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unresolved-proc-macro\")\n-    }\n-\n-    fn message(&self) -> String {\n-        match &self.macro_name {\n-            Some(name) => format!(\"proc macro `{}` not expanded\", name),\n-            None => \"proc macro not expanded\".to_string(),\n-        }\n-    }\n-\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: macro-error\n //\n // This diagnostic is shown for macro expansion errors."}, {"sha": "87a3db946a0ca0696c19eaae79f55a4220757563", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -518,10 +518,10 @@ impl Module {\n \n                 DefDiagnosticKind::UnresolvedProcMacro { ast } => {\n                     let mut precise_location = None;\n-                    let (file, ast, name) = match ast {\n+                    let (node, name) = match ast {\n                         MacroCallKind::FnLike { ast_id, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n+                            (ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))), None)\n                         }\n                         MacroCallKind::Derive { ast_id, derive_name, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n@@ -554,8 +554,7 @@ impl Module {\n                             }\n \n                             (\n-                                ast_id.file_id,\n-                                SyntaxNodePtr::from(AstPtr::new(&node)),\n+                                ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n                                 Some(derive_name.clone()),\n                             )\n                         }\n@@ -566,18 +565,14 @@ impl Module {\n                                     || panic!(\"cannot find attribute #{}\", invoc_attr_index),\n                                 );\n                             (\n-                                ast_id.file_id,\n-                                SyntaxNodePtr::from(AstPtr::new(&attr)),\n+                                ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),\n                                 Some(attr_name.clone()),\n                             )\n                         }\n                     };\n-                    sink.push(UnresolvedProcMacro {\n-                        file,\n-                        node: ast,\n-                        precise_location,\n-                        macro_name: name,\n-                    });\n+                    acc.push(\n+                        UnresolvedProcMacro { node, precise_location, macro_name: name }.into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n@@ -1056,12 +1051,14 @@ impl Function {\n                     node: node.value.clone().into(),\n                     message: message.to_string(),\n                 }),\n-                BodyDiagnostic::UnresolvedProcMacro { node } => sink.push(UnresolvedProcMacro {\n-                    file: node.file_id,\n-                    node: node.value.clone().into(),\n-                    precise_location: None,\n-                    macro_name: None,\n-                }),\n+                BodyDiagnostic::UnresolvedProcMacro { node } => acc.push(\n+                    UnresolvedProcMacro {\n+                        node: node.clone().map(|it| it.into()),\n+                        precise_location: None,\n+                        macro_name: None,\n+                    }\n+                    .into(),\n+                ),\n                 BodyDiagnostic::UnresolvedMacroCall { node, path } => acc.push(\n                     UnresolvedMacroCall { macro_call: node.clone(), path: path.clone() }.into(),\n                 ),"}, {"sha": "f7965326d78bcc8f71bba7b182c0a19b06e6c6e5", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -8,6 +8,7 @@ mod unresolved_module;\n mod unresolved_extern_crate;\n mod unresolved_import;\n mod unresolved_macro_call;\n+mod unresolved_proc_macro;\n mod inactive_code;\n mod missing_fields;\n \n@@ -68,6 +69,11 @@ impl Diagnostic {\n         self\n     }\n \n+    fn severity(mut self, severity: Severity) -> Diagnostic {\n+        self.severity = severity;\n+        self\n+    }\n+\n     fn error(range: TextRange, message: String) -> Self {\n         Self {\n             message,\n@@ -178,16 +184,6 @@ pub(crate) fn diagnostics(\n                     .with_code(Some(d.code())),\n             );\n         })\n-        .on::<hir::diagnostics::UnresolvedProcMacro, _>(|d| {\n-            // Use more accurate position if available.\n-            let display_range = d\n-                .precise_location\n-                .unwrap_or_else(|| sema.diagnostics_display_range(d.display_source()).range);\n-\n-            // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n-            res.borrow_mut()\n-                .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n-        })\n         .on::<hir::diagnostics::UnimplementedBuiltinMacro, _>(|d| {\n             let display_range = sema.diagnostics_display_range(d.display_source()).range;\n             res.borrow_mut()\n@@ -231,6 +227,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n             AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n+            AnyDiagnostic::UnresolvedProcMacro(d) => unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n \n             AnyDiagnostic::InactiveCode(d) => match inactive_code::inactive_code(&ctx, &d) {"}, {"sha": "afe333204f0b3ef7675b62c15c34e4932cc3facf", "filename": "crates/ide/src/diagnostics/inactive_code.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -1,7 +1,10 @@\n use cfg::DnfExpr;\n use stdx::format_to;\n \n-use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+use crate::{\n+    diagnostics::{Diagnostic, DiagnosticsContext},\n+    Severity,\n+};\n \n // Diagnostic: inactive-code\n //\n@@ -27,6 +30,7 @@ pub(super) fn inactive_code(\n         message,\n         ctx.sema.diagnostics_display_range(d.node.clone()).range,\n     )\n+    .severity(Severity::WeakWarning)\n     .with_unused(true);\n     Some(res)\n }"}, {"sha": "3dc6ab451e0ecc25f66f82d28464da4f917f758b", "filename": "crates/ide/src/diagnostics/unresolved_proc_macro.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4aaee7bbc1d56698e70158aa35f578422623d9/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs?ref=1e4aaee7bbc1d56698e70158aa35f578422623d9", "patch": "@@ -0,0 +1,30 @@\n+use crate::{\n+    diagnostics::{Diagnostic, DiagnosticsContext},\n+    Severity,\n+};\n+\n+// Diagnostic: unresolved-proc-macro\n+//\n+// This diagnostic is shown when a procedural macro can not be found. This usually means that\n+// procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n+// but can also indicate project setup problems.\n+//\n+// If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n+// `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n+// enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n+pub(super) fn unresolved_proc_macro(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnresolvedProcMacro,\n+) -> Diagnostic {\n+    // Use more accurate position if available.\n+    let display_range = d\n+        .precise_location\n+        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n+    // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n+    let message = match &d.macro_name {\n+        Some(name) => format!(\"proc macro `{}` not expanded\", name),\n+        None => \"proc macro not expanded\".to_string(),\n+    };\n+\n+    Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(Severity::WeakWarning)\n+}"}]}