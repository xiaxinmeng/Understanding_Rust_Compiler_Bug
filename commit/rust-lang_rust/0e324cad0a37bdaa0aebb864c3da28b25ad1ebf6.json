{"sha": "0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzI0Y2FkMGEzN2JkYWEwYWViYjg2NGMzZGEyOGIyNWFkMWViZjY=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T19:08:31Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T19:08:31Z"}, "message": "Dead code.", "tree": {"sha": "830b74e7c1e4d5eab2dd039ed02d563f82a9ffb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830b74e7c1e4d5eab2dd039ed02d563f82a9ffb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "html_url": "https://github.com/rust-lang/rust/commit/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6/comments", "author": null, "committer": null, "parents": [{"sha": "9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "html_url": "https://github.com/rust-lang/rust/commit/9a3624466b1a1ff0908be0efdaca631f9a3bab7a"}], "stats": {"total": 240, "additions": 1, "deletions": 239}, "files": [{"sha": "bee15f50048e91bf93b13b28557a9d74e52b187e", "filename": "src/rt/rust_crate_reader.cpp", "status": "modified", "additions": 1, "deletions": 170, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6/src%2Frt%2Frust_crate_reader.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6/src%2Frt%2Frust_crate_reader.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_reader.cpp?ref=0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "patch": "@@ -1,104 +1,6 @@\n \n #include \"rust_internal.h\"\n \n-bool\n-rust_crate_reader::mem_reader::is_ok()\n-{\n-  return ok;\n-}\n-\n-bool\n-rust_crate_reader::mem_reader::at_end()\n-{\n-  return pos == mem.lim;\n-}\n-\n-void\n-rust_crate_reader::mem_reader::fail()\n-{\n-  ok = false;\n-}\n-\n-void\n-rust_crate_reader::mem_reader::reset()\n-{\n-  pos = mem.base;\n-  ok = true;\n-}\n-\n-rust_crate_reader::mem_reader::mem_reader(rust_crate::mem_area &m)\n-  : mem(m),\n-    ok(true),\n-    pos(m.base)\n-{}\n-\n-size_t\n-rust_crate_reader::mem_reader::tell_abs()\n-{\n-  return pos;\n-}\n-\n-size_t\n-rust_crate_reader::mem_reader::tell_off()\n-{\n-  return pos - mem.base;\n-}\n-\n-void\n-rust_crate_reader::mem_reader::seek_abs(uintptr_t p)\n-{\n-  if (!ok || p < mem.base || p >= mem.lim)\n-    ok = false;\n-  else\n-    pos = p;\n-}\n-\n-void\n-rust_crate_reader::mem_reader::seek_off(uintptr_t p)\n-{\n-  seek_abs(p + mem.base);\n-}\n-\n-\n-bool\n-rust_crate_reader::mem_reader::adv_zstr(size_t sz)\n-{\n-  sz = 0;\n-  while (ok) {\n-    char c = 0;\n-    get(c);\n-    ++sz;\n-    if (c == '\\0')\n-      return true;\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::mem_reader::get_zstr(char const *&c, size_t &sz)\n-{\n-  if (!ok)\n-    return false;\n-  c = (char const *)(pos);\n-  return adv_zstr(sz);\n-}\n-\n-void\n-rust_crate_reader::mem_reader::adv(size_t amt)\n-{\n-  if (pos < mem.base\n-      || pos >= mem.lim\n-      || pos + amt > mem.lim)\n-    ok = false;\n-  if (!ok)\n-    return;\n-  // mem.DLOG(dom, mem, \"adv %d bytes\", amt);\n-  pos += amt;\n-  ok &= !at_end();\n-  I(mem.dom, at_end() || (mem.base <= pos && pos < mem.lim));\n-}\n-\n-\n rust_crate_reader::abbrev::abbrev(rust_dom *dom,\n                                   uintptr_t body_off,\n                                   size_t body_sz,\n@@ -111,72 +13,6 @@ rust_crate_reader::abbrev::abbrev(rust_dom *dom,\n   idx(0)\n {}\n \n-\n-rust_crate_reader::abbrev_reader::abbrev_reader\n-  (rust_crate::mem_area &abbrev_mem)\n-  : mem_reader(abbrev_mem),\n-    abbrevs(abbrev_mem.dom)\n-{\n-  rust_dom *dom = mem.dom;\n-  while (is_ok() && !at_end()) {\n-\n-    // DLOG(dom, dwarf, \"reading new abbrev at 0x%\" PRIxPTR,\n-    //          tell_off());\n-\n-    uintptr_t idx, tag;\n-    uint8_t has_children = 0;\n-    get_uleb(idx);\n-    get_uleb(tag);\n-    get(has_children);\n-\n-    uintptr_t attr, form;\n-    size_t body_off = tell_off();\n-    while (is_ok() && step_attr_form_pair(attr, form));\n-\n-    // DLOG(dom, dwarf,\n-    //         \"finished scanning attr/form pairs, pos=0x%\"\n-    //         PRIxPTR \", lim=0x%\" PRIxPTR \", is_ok=%d, at_end=%d\",\n-    //        pos, mem.lim, is_ok(), at_end());\n-\n-    if (is_ok() || at_end()) {\n-      DLOG(dom, dwarf, \"read abbrev: %\" PRIdPTR, idx);\n-      I(dom, idx = abbrevs.length() + 1);\n-      abbrevs.push(new (dom) abbrev(dom, body_off,\n-                                    tell_off() - body_off,\n-                                    tag, has_children));\n-    }\n-  }\n-}\n-\n-rust_crate_reader::abbrev *\n-rust_crate_reader::abbrev_reader::get_abbrev(size_t i) {\n-  i -= 1;\n-  if (i < abbrevs.length())\n-    return abbrevs[i];\n-  return NULL;\n-}\n-\n-bool\n-rust_crate_reader::abbrev_reader::step_attr_form_pair(uintptr_t &attr,\n-                                                      uintptr_t &form)\n-{\n-  attr = 0;\n-  form = 0;\n-  // mem.DLOG(dom, dwarf, \"reading attr/form pair at 0x%\" PRIxPTR,\n-  //              tell_off());\n-  get_uleb(attr);\n-  get_uleb(form);\n-  // mem.DLOG(dom, dwarf, \"attr 0x%\" PRIxPTR \", form 0x%\" PRIxPTR,\n-  //              attr, form);\n-  return ! (attr == 0 && form == 0);\n-}\n-rust_crate_reader::abbrev_reader::~abbrev_reader() {\n-  while (abbrevs.length()) {\n-    delete abbrevs.pop();\n-  }\n-}\n-\n-\n bool\n rust_crate_reader::attr::is_numeric() const\n {\n@@ -227,14 +63,9 @@ rust_crate_reader::attr::is_unknown() const {\n \n rust_crate_reader::rust_crate_reader(rust_dom *dom,\n                                      rust_crate const *crate)\n-  : dom(dom),\n-    abbrev_mem(crate->get_debug_abbrev(dom)),\n-    abbrevs(abbrev_mem),\n-    die_mem(crate->get_debug_info(dom))\n+  : dom(dom)\n {\n   DLOG(dom, mem, \"crate_reader on crate: 0x%\" PRIxPTR, this);\n-  DLOG(dom, mem, \"debug_abbrev: 0x%\" PRIxPTR, abbrev_mem.base);\n-  DLOG(dom, mem, \"debug_info: 0x%\" PRIxPTR, die_mem.base);\n }\n \n "}, {"sha": "0f8b10c2bb11f6c34b21643d11c0511bab3585c2", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=0e324cad0a37bdaa0aebb864c3da28b25ad1ebf6", "patch": "@@ -312,60 +312,6 @@ rust_crate_cache : public dom_owned<rust_crate_cache>,\n class\n rust_crate_reader\n {\n-    struct mem_reader\n-    {\n-        rust_crate::mem_area &mem;\n-        bool ok;\n-        uintptr_t pos;\n-\n-        bool is_ok();\n-        bool at_end();\n-        void fail();\n-        void reset();\n-        mem_reader(rust_crate::mem_area &m);\n-        size_t tell_abs();\n-        size_t tell_off();\n-        void seek_abs(uintptr_t p);\n-        void seek_off(uintptr_t p);\n-\n-        template<typename T>\n-        void get(T &out) {\n-            if (pos < mem.base\n-                || pos >= mem.lim\n-                || pos + sizeof(T) > mem.lim)\n-                ok = false;\n-            if (!ok)\n-                return;\n-            out = *((T*)(pos));\n-            pos += sizeof(T);\n-            ok &= !at_end();\n-            I(mem.dom, at_end() || (mem.base <= pos && pos < mem.lim));\n-        }\n-\n-        template<typename T>\n-        void get_uleb(T &out) {\n-            out = T(0);\n-            for (size_t i = 0; i < sizeof(T) && ok; ++i) {\n-                uint8_t byte = 0;\n-                get(byte);\n-                out <<= 7;\n-                out |= byte & 0x7f;\n-                if (!(byte & 0x80))\n-                    break;\n-            }\n-            I(mem.dom, at_end() || (mem.base <= pos && pos < mem.lim));\n-        }\n-\n-        template<typename T>\n-        void adv_sizeof(T &) {\n-            adv(sizeof(T));\n-        }\n-\n-        bool adv_zstr(size_t sz);\n-        bool get_zstr(char const *&c, size_t &sz);\n-        void adv(size_t amt);\n-    };\n-\n     struct\n     abbrev : dom_owned<abbrev>\n     {\n@@ -379,24 +325,9 @@ rust_crate_reader\n                uintptr_t tag, uint8_t has_children);\n     };\n \n-    class\n-    abbrev_reader : public mem_reader\n-    {\n-        ptr_vec<abbrev> abbrevs;\n-    public:\n-        abbrev_reader(rust_crate::mem_area &abbrev_mem);\n-        abbrev *get_abbrev(size_t i);\n-        bool step_attr_form_pair(uintptr_t &attr, uintptr_t &form);\n-        ~abbrev_reader();\n-    };\n-\n     rust_dom *dom;\n     size_t idx;\n \n-    rust_crate::mem_area abbrev_mem;\n-    abbrev_reader abbrevs;\n-\n-    rust_crate::mem_area die_mem;\n \n public:\n "}]}