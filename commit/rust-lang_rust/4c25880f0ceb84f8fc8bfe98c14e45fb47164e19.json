{"sha": "4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "node_id": "C_kwDOAAsO6NoAKDRjMjU4ODBmMGNlYjg0ZjhmYzhiZmU5OGMxNGU0NWZiNDcxNjRlMTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-21T00:27:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-21T00:27:13Z"}, "message": "Auto merge of #8716 - binggh:stable-sort-message-update, r=giraffate\n\nLess authoritative stable_sort_primitive message\n\nfixes #8241\n\nHey all - first contribution here so I'm deciding to start with something small.\n\nUpdated the linked message to be less authoritative as well as moved the lint grouping from `perf` to `pedantic` as suggested by `@camsteffen` under the issue.\n\nchangelog: [`stable_sort_primitive`]: emit less authoritative message and move to `pedantic`", "tree": {"sha": "e71748d05c3644f3e9c449e0f8996596c0ad9c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71748d05c3644f3e9c449e0f8996596c0ad9c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "html_url": "https://github.com/rust-lang/rust/commit/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99ad82f9ece452f0db1bfb42405db36fdb9cb5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99ad82f9ece452f0db1bfb42405db36fdb9cb5b", "html_url": "https://github.com/rust-lang/rust/commit/f99ad82f9ece452f0db1bfb42405db36fdb9cb5b"}, {"sha": "1b6b802b99a1c0ce575bb80eca6d8f53db20af0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b802b99a1c0ce575bb80eca6d8f53db20af0a", "html_url": "https://github.com/rust-lang/rust/commit/1b6b802b99a1c0ce575bb80eca6d8f53db20af0a"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "1cccfdb24c27dc5f5b0f36594f2ab2197603e08f", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "patch": "@@ -280,7 +280,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n     LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n     LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),"}, {"sha": "63232fd41130538765c6b4f547c8c9ba7e9d9ab8", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "patch": "@@ -82,6 +82,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(ref_option_ref::REF_OPTION_REF),\n     LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n+    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n     LintId::of(strings::STRING_ADD_ASSIGN),\n     LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n     LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),"}, {"sha": "82431863e6cfd56cf3482b2f9f03c6d3ebbd003c", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "patch": "@@ -24,7 +24,6 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(misc::CMP_OWNED),\n     LintId::of(redundant_clone::REDUNDANT_CLONE),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n     LintId::of(types::BOX_COLLECTION),\n     LintId::of(types::REDUNDANT_ALLOCATION),\n     LintId::of(vec::USELESS_VEC),"}, {"sha": "a6c685df721d6fac310117306cb98cd2b46f9a96", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "patch": "@@ -9,15 +9,25 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// ### What it does\n     /// When sorting primitive values (integers, bools, chars, as well\n-    /// as arrays, slices, and tuples of such items), it is better to\n+    /// as arrays, slices, and tuples of such items), it is typically better to\n     /// use an unstable sort than a stable sort.\n     ///\n     /// ### Why is this bad?\n-    /// Using a stable sort consumes more memory and cpu cycles. Because\n-    /// values which compare equal are identical, preserving their\n+    /// Typically, using a stable sort consumes more memory and cpu cycles.\n+    /// Because values which compare equal are identical, preserving their\n     /// relative order (the guarantee that a stable sort provides) means\n     /// nothing, while the extra costs still apply.\n     ///\n+    /// ### Known problems\n+    ///\n+    /// As pointed out in\n+    /// [issue #8241](https://github.com/rust-lang/rust-clippy/issues/8241),\n+    /// a stable sort can instead be significantly faster for certain scenarios\n+    /// (eg. when a sorted vector is extended with new data and resorted).\n+    ///\n+    /// For more information and benchmarking results, please refer to the\n+    /// issue linked above.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// let mut vec = vec![2, 1, 3];\n@@ -30,7 +40,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.47.0\"]\n     pub STABLE_SORT_PRIMITIVE,\n-    perf,\n+    pedantic,\n     \"use of sort() when sort_unstable() is equivalent\"\n }\n \n@@ -126,7 +136,7 @@ impl LateLintPass<'_> for StableSortPrimitive {\n                         Applicability::MachineApplicable,\n                     );\n                     diag.note(\n-                        \"an unstable sort would perform faster without any observable difference for this data type\",\n+                        \"an unstable sort typically performs faster without any observable difference for this data type\",\n                     );\n                 },\n             );"}, {"sha": "c35e0c22ae8994a4cced07921e44d0b281f306c6", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c25880f0ceb84f8fc8bfe98c14e45fb47164e19/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=4c25880f0ceb84f8fc8bfe98c14e45fb47164e19", "patch": "@@ -5,55 +5,55 @@ LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n    = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `bool`\n   --> $DIR/stable_sort_primitive.rs:9:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `char`\n   --> $DIR/stable_sort_primitive.rs:11:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `str`\n   --> $DIR/stable_sort_primitive.rs:13:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `tuple`\n   --> $DIR/stable_sort_primitive.rs:15:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `array`\n   --> $DIR/stable_sort_primitive.rs:17:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: used `sort` on primitive type `i32`\n   --> $DIR/stable_sort_primitive.rs:19:5\n    |\n LL |     arr.sort();\n    |     ^^^^^^^^^^ help: try: `arr.sort_unstable()`\n    |\n-   = note: an unstable sort would perform faster without any observable difference for this data type\n+   = note: an unstable sort typically performs faster without any observable difference for this data type\n \n error: aborting due to 7 previous errors\n "}]}