{"sha": "931151f72d41cc70f14f945a3589a3f35195b5de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTE1MWY3MmQ0MWNjNzBmMTRmOTQ1YTM1ODlhM2YzNTE5NWI1ZGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T06:51:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T06:51:44Z"}, "message": "Rollup merge of #59532 - mbrubeck:docs, r=Centril\n\nIn doc examples, don't ignore read/write results\n\nCalling `Read::read` or `Write::write` without checking the returned `usize` value is almost always an error.  Example code in the documentation should demonstrate how to use the return value correctly.  Otherwise, people might copy the example code thinking that it is okay to \"fire and forget\" these methods.", "tree": {"sha": "bae80d23cf79c971c89acfa3225a24f4729806c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bae80d23cf79c971c89acfa3225a24f4729806c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931151f72d41cc70f14f945a3589a3f35195b5de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnxIACRBK7hj4Ov3rIwAAdHIIAF9UZwT7v/QViRZpM5aXeU29\nuU2Drwwf7+bG+KJCSf6HBMqZ7HsbmyVpDlzKC8V9BoOZsVRBWvE6BEjER9PZJlgT\n2DcfnzukUucv9GjRCo7qVsC4+xdMty6kML5+p0R1kFqQAlCX6BOcOKG9bX7rqdWq\ntNsoj79Vbbe+IKRrKhxQSkDLGQYM5ZYtubYy+cx/vFLIEiehMsqRopakTiUveMFv\nzDExF5e6+cmYEmEjRWqOxUbbo3J3B59QeKolNvHBnzsQwcxzkpc2mtzcSZUIP6/o\n2VPqfl4+Rqscj29ZsU4nGnF3i8Kh0EKX7pcKm/t91UGDToYcVe95MQ8/y/rgAlM=\n=RVts\n-----END PGP SIGNATURE-----\n", "payload": "tree bae80d23cf79c971c89acfa3225a24f4729806c6\nparent 183afcd8c89bf95a7cf2f42d2987739756413d3b\nparent b6fb3e34117008f7f97094b0f1521116a4e66473\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553928704 +0100\ncommitter GitHub <noreply@github.com> 1553928704 +0100\n\nRollup merge of #59532 - mbrubeck:docs, r=Centril\n\nIn doc examples, don't ignore read/write results\n\nCalling `Read::read` or `Write::write` without checking the returned `usize` value is almost always an error.  Example code in the documentation should demonstrate how to use the return value correctly.  Otherwise, people might copy the example code thinking that it is okay to \"fire and forget\" these methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931151f72d41cc70f14f945a3589a3f35195b5de", "html_url": "https://github.com/rust-lang/rust/commit/931151f72d41cc70f14f945a3589a3f35195b5de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931151f72d41cc70f14f945a3589a3f35195b5de/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "183afcd8c89bf95a7cf2f42d2987739756413d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/183afcd8c89bf95a7cf2f42d2987739756413d3b", "html_url": "https://github.com/rust-lang/rust/commit/183afcd8c89bf95a7cf2f42d2987739756413d3b"}, {"sha": "b6fb3e34117008f7f97094b0f1521116a4e66473", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fb3e34117008f7f97094b0f1521116a4e66473", "html_url": "https://github.com/rust-lang/rust/commit/b6fb3e34117008f7f97094b0f1521116a4e66473"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "14a16f3fc0f045dde8e1bf29b3e7895e6ac4d7d7", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/931151f72d41cc70f14f945a3589a3f35195b5de/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931151f72d41cc70f14f945a3589a3f35195b5de/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=931151f72d41cc70f14f945a3589a3f35195b5de", "patch": "@@ -24,9 +24,9 @@\n //!     let mut buffer = [0; 10];\n //!\n //!     // read up to 10 bytes\n-//!     f.read(&mut buffer)?;\n+//!     let n = f.read(&mut buffer)?;\n //!\n-//!     println!(\"The bytes: {:?}\", buffer);\n+//!     println!(\"The bytes: {:?}\", &buffer[..n]);\n //!     Ok(())\n //! }\n //! ```\n@@ -56,9 +56,9 @@\n //!     f.seek(SeekFrom::End(-10))?;\n //!\n //!     // read up to 10 bytes\n-//!     f.read(&mut buffer)?;\n+//!     let n = f.read(&mut buffer)?;\n //!\n-//!     println!(\"The bytes: {:?}\", buffer);\n+//!     println!(\"The bytes: {:?}\", &buffer[..n]);\n //!     Ok(())\n //! }\n //! ```\n@@ -537,7 +537,9 @@ pub trait Read {\n     ///     let mut buffer = [0; 10];\n     ///\n     ///     // read up to 10 bytes\n-    ///     f.read(&mut buffer[..])?;\n+    ///     let n = f.read(&mut buffer[..])?;\n+    ///\n+    ///     println!(\"The bytes: {:?}\", &buffer[..n]);\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -1062,12 +1064,23 @@ impl Initializer {\n /// use std::fs::File;\n ///\n /// fn main() -> std::io::Result<()> {\n+///     let data = b\"some bytes\";\n+///\n+///     let mut pos = 0;\n ///     let mut buffer = File::create(\"foo.txt\")?;\n ///\n-///     buffer.write(b\"some bytes\")?;\n+///     while pos < data.len() {\n+///         let bytes_written = buffer.write(&data[pos..])?;\n+///         pos += bytes_written;\n+///     }\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// The trait also provides convenience methods like [`write_all`], which calls\n+/// `write` in a loop until its entire input has been written.\n+///\n+/// [`write_all`]: #method.write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Write {"}]}