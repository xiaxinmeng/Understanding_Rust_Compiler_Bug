{"sha": "2793b4090c2acef5380bfb6f972f79a3d338f968", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTNiNDA5MGMyYWNlZjUzODBiZmI2Zjk3MmY3OWEzZDMzOGY5Njg=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T02:05:20Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T02:05:20Z"}, "message": "Added tests", "tree": {"sha": "a34c581bc9cb29d32ad75a2c69d1d5d7df386618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34c581bc9cb29d32ad75a2c69d1d5d7df386618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2793b4090c2acef5380bfb6f972f79a3d338f968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2793b4090c2acef5380bfb6f972f79a3d338f968", "html_url": "https://github.com/rust-lang/rust/commit/2793b4090c2acef5380bfb6f972f79a3d338f968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2793b4090c2acef5380bfb6f972f79a3d338f968/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "html_url": "https://github.com/rust-lang/rust/commit/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "5f8345593ee47ea90427848c175d0ba56d48b798", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -1034,9 +1034,7 @@ pub fn rewrite_associated_type(prefix: &str,\n         let bounds: &[_] = &ty_param_bounds.as_slice();\n         let bound_str = bounds.iter()\n                               .filter_map(|ty_bound| {\n-                                  ty_bound.rewrite(context,\n-                                                   context.config.max_width,\n-                                                   indent)\n+                                  ty_bound.rewrite(context, context.config.max_width, indent)\n                               })\n                               .collect::<Vec<String>>()\n                               .join(\" + \");\n@@ -1052,7 +1050,8 @@ pub fn rewrite_associated_type(prefix: &str,\n     if let Some(ty) = ty_opt {\n         let ty_str = try_opt!(ty.rewrite(context,\n                                          context.config.max_width - context.block_indent.width() -\n-                                         prefix.len() - 2,\n+                                         prefix.len() -\n+                                         2,\n                                          context.block_indent));\n         Some(format!(\"{} = {};\", prefix, ty_str))\n     } else {\n@@ -1083,7 +1082,8 @@ pub fn rewrite_associated_static(prefix: &str,\n         let lhs = format!(\"{}{} =\", prefix, ty_str);\n         // 1 = ;\n         let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n-        rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent).map(|s| s + \";\")\n+        rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent)\n+            .map(|s| s + \";\")\n     } else {\n         let lhs = format!(\"{}{};\", prefix, ty_str);\n         Some(lhs)\n@@ -1740,7 +1740,6 @@ fn rewrite_where_clause(context: &RewriteContext,\n         config: context.config,\n     };\n     let preds_str = try_opt!(write_list(&item_vec, &fmt));\n-    println!(\"{:?}\", preds_str);\n \n     let end_length = if terminator == \"{\" {\n         // If the brace is on the next line we don't need to count it otherwise it needs two"}, {"sha": "5db7b3960322a70dff5600c7207ea83e341298fb", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -21,7 +21,8 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, rewrite_associated_static, rewrite_associated_type, rewrite_type_alias, format_impl, format_trait};\n+use items::{rewrite_static, rewrite_associated_static, rewrite_associated_type,\n+            rewrite_type_alias, format_impl, format_trait};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -316,12 +317,12 @@ impl<'a> FmtVisitor<'a> {\n         match ti.node {\n             ast::TraitItemKind::Const(ref ty, ref expr) => {\n                 let rewrite = rewrite_associated_static(\"const\",\n-                                             ast::Visibility::Inherited,\n-                                             ti.ident,\n-                                             ty,\n-                                             ast::Mutability::Immutable,\n-                                             expr,\n-                                             &self.get_context());\n+                                                        ast::Visibility::Inherited,\n+                                                        ti.ident,\n+                                                        ty,\n+                                                        ast::Mutability::Immutable,\n+                                                        expr,\n+                                                        &self.get_context());\n                 self.push_rewrite(ti.span, rewrite);\n             }\n             ast::TraitItemKind::Method(ref sig, None) => {"}, {"sha": "9f34db7ae0780dc4c2a8cf838526aee4eb9ec3ae", "filename": "tests/source/impls.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -1,6 +1,10 @@\n impl Foo for Bar { fn foo() { \"hi\" } }\n \n pub impl Foo for Bar {\n+    // Associated Constants\n+    const   Baz:   i32 =   16;\n+    // Associated Types\n+    type   FooBar  =   usize;\n     // Comment 1\n     fn foo() { \"hi\" }\n     // Comment 2\n@@ -9,20 +13,20 @@ pub impl Foo for Bar {\n }\n \n pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z> {\n-    fn foo() { \"hi\" }    \n+    fn foo() { \"hi\" }\n }\n \n impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Fooooooooooooooooooooooooooooo<'a, Z>\n {\n-    fn foo() { \"hi\" }    \n+    fn foo() { \"hi\" }\n }\n \n impl<'a, 'b, X, Y: Foo<Bar>> Foo<'a, X> for Bar<'b, Y> where X: Foooooooooooooooooooooooooooo<'a, Z>\n {\n-    fn foo() { \"hi\" }    \n+    fn foo() { \"hi\" }\n }\n \n-impl<T> Foo for Bar<T> where T: Baz \n+impl<T> Foo for Bar<T> where T: Baz\n {\n }\n \n@@ -38,8 +42,8 @@ impl Boo {\n     fn boo() {}\n     // FOO\n \n-    \n-    \n+\n+\n }\n \n mod a {"}, {"sha": "3fb6a1b85e226682a39cf20895fb3db1d81d0d98", "filename": "tests/source/trait.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -37,3 +37,9 @@ trait Test {\n }\n \n trait T<> {}\n+\n+trait Foo { type Bar: Baz;}\n+\n+trait ConstCheck<T>:Foo   where   T: Baz { \n+        const   J:   i32;\n+}"}, {"sha": "c2c1a3185bcb0b3be36e327ad4dee1fd1e57a5f3", "filename": "tests/source/where-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Fsource%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwhere-trailing-comma.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -20,7 +20,7 @@ struct Pair<S, T> where T: P, S: P + Q {\n \n struct TupPair<S, T> (S, T) where T: P, S: P + Q;\n \n-enum E<S, T> where S: P, T: P { \n+enum E<S, T> where S: P, T: P {\n     A {a: T},\n }\n \n@@ -30,7 +30,6 @@ extern \"C\" {\n     fn f<S, T>(x: T, y: S) -> T where T: P, S: Q;\n }\n \n-// Note: trait declarations are not fully formatted (issue #78)\n trait Q<S, T> where T: P, S: R\n {\n     fn f<U, V>(self, x: T, y: S, z: U) -> Self where U: P, V: P;"}, {"sha": "c81de4d40fea99f3d1bdeb99c03c04419a448b6e", "filename": "tests/target/impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -5,6 +5,10 @@ impl Foo for Bar {\n }\n \n pub impl Foo for Bar {\n+    // Associated Constants\n+    const Baz: i32 = 16;\n+    // Associated Types\n+    type FooBar = usize;\n     // Comment 1\n     fn foo() {\n         \"hi\""}, {"sha": "f784fa145301c44eb86b135b0370662e7671b3bf", "filename": "tests/target/trait.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -36,3 +36,12 @@ trait Test {\n }\n \n trait T {}\n+\n+trait Foo {\n+    type Bar: Baz;\n+}\n+\n+trait ConstCheck<T>: Foo where T: Baz\n+{\n+    const J: i32;\n+}"}, {"sha": "c8682237ae6afab7cf4e6a07550590a00e857b4b", "filename": "tests/target/where-trailing-comma.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2793b4090c2acef5380bfb6f972f79a3d338f968/tests%2Ftarget%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-trailing-comma.rs?ref=2793b4090c2acef5380bfb6f972f79a3d338f968", "patch": "@@ -48,8 +48,9 @@ extern \"C\" {\n               S: Q;\n }\n \n-// Note: trait declarations are not fully formatted (issue #78)\n-trait Q<S, T> where T: P, S: R\n+trait Q<S, T>\n+    where T: P,\n+          S: R,\n {\n     fn f<U, V>(self, x: T, y: S, z: U) -> Self\n         where U: P,"}]}