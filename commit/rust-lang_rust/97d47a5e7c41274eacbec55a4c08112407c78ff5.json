{"sha": "97d47a5e7c41274eacbec55a4c08112407c78ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDQ3YTVlN2M0MTI3NGVhY2JlYzU1YTRjMDgxMTI0MDdjNzhmZjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-09T04:02:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-09T04:43:22Z"}, "message": "Account for type params on method without parens", "tree": {"sha": "d416e3893d29d03bf1bf0f50f485fbaecb72298e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d416e3893d29d03bf1bf0f50f485fbaecb72298e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d47a5e7c41274eacbec55a4c08112407c78ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d47a5e7c41274eacbec55a4c08112407c78ff5", "html_url": "https://github.com/rust-lang/rust/commit/97d47a5e7c41274eacbec55a4c08112407c78ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d47a5e7c41274eacbec55a4c08112407c78ff5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19edd6b161521a4f66716b3b45b8cf4d3f03f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19edd6b161521a4f66716b3b45b8cf4d3f03f3a", "html_url": "https://github.com/rust-lang/rust/commit/a19edd6b161521a4f66716b3b45b8cf4d3f03f3a"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "90b7b300da9d5c51b4f42427a96cb8768c592788", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=97d47a5e7c41274eacbec55a4c08112407c78ff5", "patch": "@@ -1586,7 +1586,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &format!(\"a method `{}` also exists, call it with parentheses\", field),\n                 field,\n                 expr_t,\n-                expr.hir_id,\n+                expr,\n             );\n         }\n         err.emit();\n@@ -1609,7 +1609,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 \"use parentheses to call the method\",\n                 field,\n                 expr_t,\n-                expr.hir_id,\n+                expr,\n             );\n         } else {\n             err.help(\"methods are immutable and cannot be assigned to\");"}, {"sha": "a75154b160a5c2f4ea80ed0a3678bf49e08960eb", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=97d47a5e7c41274eacbec55a4c08112407c78ff5", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         msg: &str,\n         method_name: ast::Ident,\n         self_ty: Ty<'tcx>,\n-        call_expr_id: hir::HirId,\n+        call_expr: &hir::Expr<'_>,\n     ) {\n         let has_params = self\n             .probe_for_name(\n@@ -144,21 +144,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name,\n                 IsSuggestion(false),\n                 self_ty,\n-                call_expr_id,\n+                call_expr.hir_id,\n                 ProbeScope::TraitsInScope,\n             )\n             .and_then(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n                 Ok(sig.inputs().skip_binder().len() > 1)\n             });\n \n+        // Account for `foo.bar<T>`;\n+        let sugg_span = method_name.span.with_hi(call_expr.span.hi());\n+        let snippet = self\n+            .tcx\n+            .sess\n+            .source_map()\n+            .span_to_snippet(sugg_span)\n+            .unwrap_or_else(|_| method_name.to_string());\n         let (suggestion, applicability) = if has_params.unwrap_or_default() {\n-            (format!(\"{}(...)\", method_name), Applicability::HasPlaceholders)\n+            (format!(\"{}(...)\", snippet), Applicability::HasPlaceholders)\n         } else {\n-            (format!(\"{}()\", method_name), Applicability::MaybeIncorrect)\n+            (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n         };\n \n-        err.span_suggestion(method_name.span, msg, suggestion, applicability);\n+        err.span_suggestion(sugg_span, msg, suggestion, applicability);\n     }\n \n     /// Performs method lookup. If lookup is successful, it will return the callee"}, {"sha": "e1a85271ad0a3da17ba43b499636893c7719dc36", "filename": "src/test/ui/suggestions/method-missing-parentheses.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.rs?ref=97d47a5e7c41274eacbec55a4c08112407c78ff5", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _ = vec![].into_iter().collect::<usize>;\n+    //~^ ERROR attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n+    //~| ERROR field expressions may not have generic arguments\n+}"}, {"sha": "8569eb6f4ad1ebae2286f5eb4030e1dc828e9590", "filename": "src/test/ui/suggestions/method-missing-parentheses.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d47a5e7c41274eacbec55a4c08112407c78ff5/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr?ref=97d47a5e7c41274eacbec55a4c08112407c78ff5", "patch": "@@ -0,0 +1,17 @@\n+error: field expressions may not have generic arguments\n+  --> $DIR/method-missing-parentheses.rs:2:41\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>;\n+   |                                         ^^^^^^^\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::vec::IntoIter<_>`\n+  --> $DIR/method-missing-parentheses.rs:2:32\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>;\n+   |                                ^^^^^^^---------\n+   |                                |\n+   |                                help: use parentheses to call the method: `collect::<usize>()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0615`."}]}