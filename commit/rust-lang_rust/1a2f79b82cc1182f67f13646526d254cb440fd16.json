{"sha": "1a2f79b82cc1182f67f13646526d254cb440fd16", "node_id": "C_kwDOAAsO6NoAKDFhMmY3OWI4MmNjMTE4MmY2N2YxMzY0NjUyNmQyNTRjYjQ0MGZkMTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-03T16:37:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-03T16:37:42Z"}, "message": "Rollup merge of #105050 - WaffleLapkin:uselessrefign, r=jyn514\n\nRemove useless borrows and derefs\n\nThey are nothing more than noise.\n<sub>These are not all of them, but my clippy started crashing (stack overflow), so rip :(</sub>", "tree": {"sha": "04458254aa81f06c17915a48345fb92ddfdd2f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04458254aa81f06c17915a48345fb92ddfdd2f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2f79b82cc1182f67f13646526d254cb440fd16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJji3tWCRBK7hj4Ov3rIwAAyUYIAFP15mhjnICV0z0kmw2sEGvd\nd18WxVdt8m2d6A0a9kICaTXDLUYQnkVuyWxQ9f51FJ00UQwjJuAo8xNblSi0Oe4D\n0Wp1ACz9UH+W3OuQ9hCRTA8XXAUcb/0R/3bRCHHnSIiJFZORfTiZPUuQVVcgOhum\n6hqk+QGyd1pe3V1lkiHU3YxQp+a0VA/Ns3/oZ7/ANzRGfUcCsF65hdkHWMto++VE\nG6Y4uSrLeBxjkS52hfzh5kCikkAebNMQUaXGqj54HgiFGeeMlFGLaUIlbl3hactu\nb+CszLB51/Z2EoS3F9HzXAU7z/4SyyNyNecTkVOXWsOfnhjDbm3LMVBWgX6/NHQ=\n=w8GK\n-----END PGP SIGNATURE-----\n", "payload": "tree 04458254aa81f06c17915a48345fb92ddfdd2f67\nparent c89bff29e562540c14497aa8cc8490e6a2cdeb73\nparent 083ef4545807e8e940ff1378416f2b3cf8019f94\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670085462 +0100\ncommitter GitHub <noreply@github.com> 1670085462 +0100\n\nRollup merge of #105050 - WaffleLapkin:uselessrefign, r=jyn514\n\nRemove useless borrows and derefs\n\nThey are nothing more than noise.\n<sub>These are not all of them, but my clippy started crashing (stack overflow), so rip :(</sub>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2f79b82cc1182f67f13646526d254cb440fd16", "html_url": "https://github.com/rust-lang/rust/commit/1a2f79b82cc1182f67f13646526d254cb440fd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2f79b82cc1182f67f13646526d254cb440fd16/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89bff29e562540c14497aa8cc8490e6a2cdeb73", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89bff29e562540c14497aa8cc8490e6a2cdeb73", "html_url": "https://github.com/rust-lang/rust/commit/c89bff29e562540c14497aa8cc8490e6a2cdeb73"}, {"sha": "083ef4545807e8e940ff1378416f2b3cf8019f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/083ef4545807e8e940ff1378416f2b3cf8019f94", "html_url": "https://github.com/rust-lang/rust/commit/083ef4545807e8e940ff1378416f2b3cf8019f94"}], "stats": {"total": 315, "additions": 157, "deletions": 158}, "files": [{"sha": "9c2cf58efed4a30ef37d0f522a1b6d6ba96c6e03", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -354,7 +354,7 @@ pub trait LayoutCalculator {\n                 if !always_sized { StructKind::MaybeUnsized } else { StructKind::AlwaysSized }\n             };\n \n-            let mut st = self.univariant(dl, &variants[v], &repr, kind)?;\n+            let mut st = self.univariant(dl, &variants[v], repr, kind)?;\n             st.variants = Variants::Single { index: v };\n \n             if is_unsafe_cell {\n@@ -457,7 +457,7 @@ pub trait LayoutCalculator {\n             let mut variant_layouts = variants\n                 .iter_enumerated()\n                 .map(|(j, v)| {\n-                    let mut st = self.univariant(dl, v, &repr, StructKind::AlwaysSized)?;\n+                    let mut st = self.univariant(dl, v, repr, StructKind::AlwaysSized)?;\n                     st.variants = Variants::Single { index: j };\n \n                     align = align.max(st.align);\n@@ -647,8 +647,8 @@ pub trait LayoutCalculator {\n             .map(|(i, field_layouts)| {\n                 let mut st = self.univariant(\n                     dl,\n-                    &field_layouts,\n-                    &repr,\n+                    field_layouts,\n+                    repr,\n                     StructKind::Prefixed(min_ity.size(), prefix_align),\n                 )?;\n                 st.variants = Variants::Single { index: i };\n@@ -755,7 +755,7 @@ pub trait LayoutCalculator {\n             // Try to use a ScalarPair for all tagged enums.\n             let mut common_prim = None;\n             let mut common_prim_initialized_in_all_variants = true;\n-            for (field_layouts, layout_variant) in iter::zip(&*variants, &layout_variants) {\n+            for (field_layouts, layout_variant) in iter::zip(variants, &layout_variants) {\n                 let FieldsShape::Arbitrary { ref offsets, .. } = layout_variant.fields else {\n                     panic!();\n                 };"}, {"sha": "4d80f904ac461beafd03f212c83931e981fa1cff", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -1179,7 +1179,7 @@ impl Expr {\n     pub fn peel_parens(&self) -> &Expr {\n         let mut expr = self;\n         while let ExprKind::Paren(inner) = &expr.kind {\n-            expr = &inner;\n+            expr = inner;\n         }\n         expr\n     }\n@@ -2029,7 +2029,7 @@ impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n         while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n-            final_ty = &ty;\n+            final_ty = ty;\n         }\n         final_ty\n     }"}, {"sha": "a45ee6067bbaedb5c541d91dd2ccff91f23228e1", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -736,8 +736,7 @@ pub fn visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {\n             return; // Avoid visiting the span for the second time.\n         }\n         token::Interpolated(nt) => {\n-            let mut nt = Lrc::make_mut(nt);\n-            visit_nonterminal(&mut nt, vis);\n+            visit_nonterminal(Lrc::make_mut(nt), vis);\n         }\n         _ => {}\n     }"}, {"sha": "482c302950f01ae7e20b16002afb4b4e114e97f1", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -64,7 +64,7 @@ impl TokenTree {\n         match (self, other) {\n             (TokenTree::Token(token, _), TokenTree::Token(token2, _)) => token.kind == token2.kind,\n             (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-                delim == delim2 && tts.eq_unspanned(&tts2)\n+                delim == delim2 && tts.eq_unspanned(tts2)\n             }\n             _ => false,\n         }\n@@ -402,7 +402,7 @@ impl TokenStream {\n         let mut t1 = self.trees();\n         let mut t2 = other.trees();\n         for (t1, t2) in iter::zip(&mut t1, &mut t2) {\n-            if !t1.eq_unspanned(&t2) {\n+            if !t1.eq_unspanned(t2) {\n                 return false;\n             }\n         }\n@@ -475,7 +475,7 @@ impl TokenStream {\n             token::Interpolated(nt) => TokenTree::Delimited(\n                 DelimSpan::from_single(token.span),\n                 Delimiter::Invisible,\n-                TokenStream::from_nonterminal_ast(&nt).flattened(),\n+                TokenStream::from_nonterminal_ast(nt).flattened(),\n             ),\n             _ => TokenTree::Token(token.clone(), spacing),\n         }\n@@ -511,7 +511,7 @@ impl TokenStream {\n     fn try_glue_to_last(vec: &mut Vec<TokenTree>, tt: &TokenTree) -> bool {\n         if let Some(TokenTree::Token(last_tok, Spacing::Joint)) = vec.last()\n             && let TokenTree::Token(tok, spacing) = tt\n-            && let Some(glued_tok) = last_tok.glue(&tok)\n+            && let Some(glued_tok) = last_tok.glue(tok)\n         {\n             // ...then overwrite the last token tree in `vec` with the\n             // glued token, and skip the first token tree from `stream`."}, {"sha": "35454c3a6709224ce20ca3a20d2d915824047895", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -110,7 +110,7 @@ pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {\n         } else {\n             &mut lines\n         };\n-        if let Some(horizontal) = get_horizontal_trim(&lines, kind) {\n+        if let Some(horizontal) = get_horizontal_trim(lines, kind) {\n             changes = true;\n             // remove a \"[ \\t]*\\*\" block from each line, if possible\n             for line in lines.iter_mut() {\n@@ -147,7 +147,7 @@ fn all_whitespace(s: &str, col: CharPos) -> Option<usize> {\n \n fn trim_whitespace_prefix(s: &str, col: CharPos) -> &str {\n     let len = s.len();\n-    match all_whitespace(&s, col) {\n+    match all_whitespace(s, col) {\n         Some(col) => {\n             if col < len {\n                 &s[col..]"}, {"sha": "f6f186b51073b788d46438e87583c6afbcb755bc", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -52,14 +52,14 @@ impl LitKind {\n                 // new symbol because the string in the LitKind is different to the\n                 // string in the token.\n                 let s = symbol.as_str();\n-                let symbol = if s.contains(&['\\\\', '\\r']) {\n+                let symbol = if s.contains(['\\\\', '\\r']) {\n                     let mut buf = String::with_capacity(s.len());\n                     let mut error = Ok(());\n                     // Force-inlining here is aggressive but the closure is\n                     // called on every char in the string, so it can be\n                     // hot in programs with many long strings.\n                     unescape_literal(\n-                        &s,\n+                        s,\n                         Mode::Str,\n                         &mut #[inline(always)]\n                         |_, unescaped_char| match unescaped_char {\n@@ -85,7 +85,7 @@ impl LitKind {\n                     if s.contains('\\r') {\n                         let mut buf = String::with_capacity(s.len());\n                         let mut error = Ok(());\n-                        unescape_literal(&s, Mode::RawStr, &mut |_, unescaped_char| {\n+                        unescape_literal(s, Mode::RawStr, &mut |_, unescaped_char| {\n                             match unescaped_char {\n                                 Ok(c) => buf.push(c),\n                                 Err(err) => {\n@@ -106,7 +106,7 @@ impl LitKind {\n                 let s = symbol.as_str();\n                 let mut buf = Vec::with_capacity(s.len());\n                 let mut error = Ok(());\n-                unescape_literal(&s, Mode::ByteStr, &mut |_, c| match c {\n+                unescape_literal(s, Mode::ByteStr, &mut |_, c| match c {\n                     Ok(c) => buf.push(byte_from_char(c)),\n                     Err(err) => {\n                         if err.is_fatal() {\n@@ -122,7 +122,7 @@ impl LitKind {\n                 let bytes = if s.contains('\\r') {\n                     let mut buf = Vec::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_literal(&s, Mode::RawByteStr, &mut |_, c| match c {\n+                    unescape_literal(s, Mode::RawByteStr, &mut |_, c| match c {\n                         Ok(c) => buf.push(byte_from_char(c)),\n                         Err(err) => {\n                             if err.is_fatal() {"}, {"sha": "819f1884a06922ca5861679de032dde2b2db47a7", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -384,7 +384,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n         | ast::ExprKind::AssignOp(_, lhs, rhs)\n         | ast::ExprKind::Binary(_, lhs, rhs) => {\n             // X { y: 1 } + X { y: 2 }\n-            contains_exterior_struct_lit(&lhs) || contains_exterior_struct_lit(&rhs)\n+            contains_exterior_struct_lit(lhs) || contains_exterior_struct_lit(rhs)\n         }\n         ast::ExprKind::Await(x)\n         | ast::ExprKind::Unary(_, x)\n@@ -393,12 +393,12 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n         | ast::ExprKind::Field(x, _)\n         | ast::ExprKind::Index(x, _) => {\n             // &X { y: 1 }, X { y: 1 }.y\n-            contains_exterior_struct_lit(&x)\n+            contains_exterior_struct_lit(x)\n         }\n \n         ast::ExprKind::MethodCall(box ast::MethodCall { receiver, .. }) => {\n             // X { y: 1 }.bar(...)\n-            contains_exterior_struct_lit(&receiver)\n+            contains_exterior_struct_lit(receiver)\n         }\n \n         _ => false,"}, {"sha": "0eae791b25e1c66e8da0b93bdfefa0ce7c5585bb", "filename": "compiler/rustc_ast/src/util/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -17,7 +17,7 @@ pub fn contains_text_flow_control_chars(s: &str) -> bool {\n     // U+2069 - E2 81 A9\n     let mut bytes = s.as_bytes();\n     loop {\n-        match core::slice::memchr::memchr(0xE2, &bytes) {\n+        match core::slice::memchr::memchr(0xE2, bytes) {\n             Some(idx) => {\n                 // bytes are valid UTF-8 -> E2 must be followed by two bytes\n                 let ch = &bytes[idx..idx + 3];"}, {"sha": "d3d8431c163c728efa42dd52a248c6f692271a84", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -519,7 +519,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             ast::MetaItemKind::List(items) => {\n                 self.print_path(&item.path, false, 0);\n                 self.popen();\n-                self.commasep(Consistent, &items, |s, i| s.print_meta_list_item(i));\n+                self.commasep(Consistent, items, |s, i| s.print_meta_list_item(i));\n                 self.pclose();\n             }\n         }\n@@ -536,7 +536,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn print_tt(&mut self, tt: &TokenTree, convert_dollar_crate: bool) {\n         match tt {\n             TokenTree::Token(token, _) => {\n-                let token_str = self.token_to_string_ext(&token, convert_dollar_crate);\n+                let token_str = self.token_to_string_ext(token, convert_dollar_crate);\n                 self.word(token_str);\n                 if let token::DocComment(..) = token.kind {\n                     self.hardbreak()\n@@ -998,7 +998,7 @@ impl<'a> State<'a> {\n             ast::AssocConstraintKind::Bound { bounds } => {\n                 if !bounds.is_empty() {\n                     self.word_nbsp(\":\");\n-                    self.print_type_bounds(&bounds);\n+                    self.print_type_bounds(bounds);\n                 }\n             }\n         }\n@@ -1035,7 +1035,7 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::Tup(elts) => {\n                 self.popen();\n-                self.commasep(Inconsistent, &elts, |s, ty| s.print_type(ty));\n+                self.commasep(Inconsistent, elts, |s, ty| s.print_type(ty));\n                 if elts.len() == 1 {\n                     self.word(\",\");\n                 }\n@@ -1254,7 +1254,7 @@ impl<'a> State<'a> {\n \n         self.popen();\n         self.commasep(Consistent, &args, |s, arg| match arg {\n-            AsmArg::Template(template) => s.print_string(&template, ast::StrStyle::Cooked),\n+            AsmArg::Template(template) => s.print_string(template, ast::StrStyle::Cooked),\n             AsmArg::Operand(op) => {\n                 let print_reg_or_class = |s: &mut Self, r: &InlineAsmRegOrRegClass| match r {\n                     InlineAsmRegOrRegClass::Reg(r) => s.print_symbol(*r, ast::StrStyle::Cooked),\n@@ -1424,11 +1424,11 @@ impl<'a> State<'a> {\n                     self.print_path(path, true, 0);\n                 }\n                 self.popen();\n-                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, elts, |s, p| s.print_pat(p));\n                 self.pclose();\n             }\n             PatKind::Or(pats) => {\n-                self.strsep(\"|\", true, Inconsistent, &pats, |s, p| s.print_pat(p));\n+                self.strsep(\"|\", true, Inconsistent, pats, |s, p| s.print_pat(p));\n             }\n             PatKind::Path(None, path) => {\n                 self.print_path(path, true, 0);\n@@ -1450,7 +1450,7 @@ impl<'a> State<'a> {\n                 }\n                 self.commasep_cmnt(\n                     Consistent,\n-                    &fields,\n+                    fields,\n                     |s, f| {\n                         s.cbox(INDENT_UNIT);\n                         if !f.is_shorthand {\n@@ -1475,7 +1475,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Tuple(elts) => {\n                 self.popen();\n-                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, elts, |s, p| s.print_pat(p));\n                 if elts.len() == 1 {\n                     self.word(\",\");\n                 }\n@@ -1498,7 +1498,7 @@ impl<'a> State<'a> {\n                     self.print_pat(inner);\n                 }\n             }\n-            PatKind::Lit(e) => self.print_expr(&**e),\n+            PatKind::Lit(e) => self.print_expr(e),\n             PatKind::Range(begin, end, Spanned { node: end_kind, .. }) => {\n                 if let Some(e) = begin {\n                     self.print_expr(e);\n@@ -1514,7 +1514,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Slice(elts) => {\n                 self.word(\"[\");\n-                self.commasep(Inconsistent, &elts, |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, elts, |s, p| s.print_pat(p));\n                 self.word(\"]\");\n             }\n             PatKind::Rest => self.word(\"..\"),\n@@ -1600,7 +1600,7 @@ impl<'a> State<'a> {\n \n         self.word(\"<\");\n \n-        self.commasep(Inconsistent, &generic_params, |s, param| {\n+        self.commasep(Inconsistent, generic_params, |s, param| {\n             s.print_outer_attributes_inline(&param.attrs);\n \n             match &param.kind {"}, {"sha": "4ed16e337d297483ce5cec9d914ef69c03313a10", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -305,10 +305,10 @@ impl<'a> State<'a> {\n                 self.print_expr_tup(exprs);\n             }\n             ast::ExprKind::Call(func, args) => {\n-                self.print_expr_call(func, &args);\n+                self.print_expr_call(func, args);\n             }\n             ast::ExprKind::MethodCall(box ast::MethodCall { seg, receiver, args, .. }) => {\n-                self.print_expr_method_call(seg, &receiver, &args);\n+                self.print_expr_method_call(seg, receiver, args);\n             }\n             ast::ExprKind::Binary(op, lhs, rhs) => {\n                 self.print_expr_binary(*op, lhs, rhs);\n@@ -606,7 +606,7 @@ impl<'a> State<'a> {\n         match binder {\n             ast::ClosureBinder::NotPresent => {}\n             ast::ClosureBinder::For { generic_params, .. } => {\n-                self.print_formal_generic_params(&generic_params)\n+                self.print_formal_generic_params(generic_params)\n             }\n         }\n     }"}, {"sha": "76a1288e6d3512622ea743779239605942bf82cf", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -72,7 +72,7 @@ impl<'a, T: PartialOrd> PartialOrd for Interned<'a, T> {\n         if ptr::eq(self.0, other.0) {\n             Some(Ordering::Equal)\n         } else {\n-            let res = self.0.partial_cmp(&other.0);\n+            let res = self.0.partial_cmp(other.0);\n             debug_assert_ne!(res, Some(Ordering::Equal));\n             res\n         }\n@@ -86,7 +86,7 @@ impl<'a, T: Ord> Ord for Interned<'a, T> {\n         if ptr::eq(self.0, other.0) {\n             Ordering::Equal\n         } else {\n-            let res = self.0.cmp(&other.0);\n+            let res = self.0.cmp(other.0);\n             debug_assert_ne!(res, Ordering::Equal);\n             res\n         }"}, {"sha": "b95c1af3c26a7da3a3510dcd2ddb28534f54a8be", "filename": "compiler/rustc_data_structures/src/memmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -36,7 +36,7 @@ impl Deref for Mmap {\n \n     #[inline]\n     fn deref(&self) -> &[u8] {\n-        &*self.0\n+        &self.0\n     }\n }\n \n@@ -96,13 +96,13 @@ impl Deref for MmapMut {\n \n     #[inline]\n     fn deref(&self) -> &[u8] {\n-        &*self.0\n+        &self.0\n     }\n }\n \n impl DerefMut for MmapMut {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut [u8] {\n-        &mut *self.0\n+        &mut self.0\n     }\n }"}, {"sha": "980a540ccba7a5c0758f954cabd9cc5b8fc4a05a", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -899,25 +899,25 @@ unsafe impl<O, T: ?Sized> StableAddress for OwningRef<O, T> {}\n \n impl<O, T: ?Sized> AsRef<T> for OwningRef<O, T> {\n     fn as_ref(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> AsRef<T> for OwningRefMut<O, T> {\n     fn as_ref(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> AsMut<T> for OwningRefMut<O, T> {\n     fn as_mut(&mut self) -> &mut T {\n-        &mut *self\n+        self\n     }\n }\n \n impl<O, T: ?Sized> Borrow<T> for OwningRef<O, T> {\n     fn borrow(&self) -> &T {\n-        &*self\n+        self\n     }\n }\n \n@@ -1021,7 +1021,7 @@ where\n     T: PartialEq,\n {\n     fn eq(&self, other: &Self) -> bool {\n-        (&*self as &T).eq(&*other as &T)\n+        self.deref().eq(other.deref())\n     }\n }\n \n@@ -1032,7 +1032,7 @@ where\n     T: PartialOrd,\n {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        (&*self as &T).partial_cmp(&*other as &T)\n+        self.deref().partial_cmp(other.deref())\n     }\n }\n \n@@ -1041,7 +1041,7 @@ where\n     T: Ord,\n {\n     fn cmp(&self, other: &Self) -> Ordering {\n-        (&*self as &T).cmp(&*other as &T)\n+        self.deref().cmp(other.deref())\n     }\n }\n \n@@ -1050,7 +1050,7 @@ where\n     T: Hash,\n {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        (&*self as &T).hash(state);\n+        self.deref().hash(state);\n     }\n }\n \n@@ -1059,7 +1059,7 @@ where\n     T: PartialEq,\n {\n     fn eq(&self, other: &Self) -> bool {\n-        (&*self as &T).eq(&*other as &T)\n+        self.deref().eq(other.deref())\n     }\n }\n \n@@ -1070,7 +1070,7 @@ where\n     T: PartialOrd,\n {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        (&*self as &T).partial_cmp(&*other as &T)\n+        self.deref().partial_cmp(other.deref())\n     }\n }\n \n@@ -1079,7 +1079,7 @@ where\n     T: Ord,\n {\n     fn cmp(&self, other: &Self) -> Ordering {\n-        (&*self as &T).cmp(&*other as &T)\n+        self.deref().cmp(other.deref())\n     }\n }\n \n@@ -1088,7 +1088,7 @@ where\n     T: Hash,\n {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        (&*self as &T).hash(state);\n+        self.deref().hash(state);\n     }\n }\n "}, {"sha": "aa7a01eed15c9a1438dbfb133632091fc4018a02", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -192,7 +192,7 @@ impl SelfProfilerRef {\n             F: for<'a> FnOnce(&'a SelfProfiler) -> TimingGuard<'a>,\n         {\n             let profiler = profiler_ref.profiler.as_ref().unwrap();\n-            f(&**profiler)\n+            f(profiler)\n         }\n \n         if self.event_filter_mask.contains(event_filter) {\n@@ -466,7 +466,7 @@ impl SelfProfilerRef {\n \n     pub fn with_profiler(&self, f: impl FnOnce(&SelfProfiler)) {\n         if let Some(profiler) = &self.profiler {\n-            f(&profiler)\n+            f(profiler)\n         }\n     }\n \n@@ -733,7 +733,7 @@ impl Drop for VerboseTimingGuard<'_> {\n         if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n             let end_rss = get_resident_set_size();\n             let dur = start_time.elapsed();\n-            print_time_passes_entry(&message, dur, start_rss, end_rss);\n+            print_time_passes_entry(message, dur, start_rss, end_rss);\n         }\n     }\n }"}, {"sha": "cd392a7b678b66ee470e2b36cf8fda14aec9247b", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -366,7 +366,7 @@ impl<CTX> HashStable<CTX> for [u8] {\n impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Vec<T> {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        (&self[..]).hash_stable(ctx, hasher);\n+        self[..].hash_stable(ctx, hasher);\n     }\n }\n \n@@ -405,7 +405,7 @@ where\n {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        (&self[..]).hash_stable(ctx, hasher);\n+        self[..].hash_stable(ctx, hasher);\n     }\n }\n \n@@ -440,7 +440,7 @@ impl<CTX> HashStable<CTX> for str {\n impl<CTX> HashStable<CTX> for String {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        (&self[..]).hash_stable(hcx, hasher);\n+        self[..].hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "e4f47b22ac3584d5336ed0d42d5c030f2e82872e", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -201,7 +201,7 @@ cfg_if! {\n \n             #[inline(always)]\n             fn deref(&self) -> &T {\n-                &*self.0\n+                &self.0\n             }\n         }\n "}, {"sha": "d8879bf70ed39730ee41f5029b51f096b17278b2", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -39,7 +39,7 @@ impl Translate for AnnotateSnippetEmitterWriter {\n     }\n \n     fn fallback_fluent_bundle(&self) -> &FluentBundle {\n-        &**self.fallback_bundle\n+        &self.fallback_bundle\n     }\n }\n \n@@ -49,7 +49,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let fluent_args = to_fluent_args(diag.args());\n \n         let mut children = diag.children.clone();\n-        let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(diag, &fluent_args);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &mut primary_span,\n@@ -65,7 +65,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n             &diag.code,\n             &primary_span,\n             &children,\n-            &suggestions,\n+            suggestions,\n         );\n     }\n "}, {"sha": "06bb5edc090f48c8b6c326961982ce9730aa6957", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -292,7 +292,7 @@ impl Diagnostic {\n             let lint_index = expectation_id.get_lint_index();\n             expectation_id.set_lint_index(None);\n             let mut stable_id = unstable_to_stable\n-                .get(&expectation_id)\n+                .get(expectation_id)\n                 .expect(\"each unstable `LintExpectationId` must have a matching stable id\")\n                 .normalize();\n "}, {"sha": "db595df8ec18c8cfc2c8c5428996a4bfda4febde", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -283,7 +283,7 @@ pub trait Emitter: Translate {\n                         if self\n                             .source_map()\n                             .map(|sm| is_case_difference(\n-                                &**sm,\n+                                sm,\n                                 substitution,\n                                 sugg.substitutions[0].parts[0].span,\n                             ))\n@@ -525,7 +525,7 @@ impl Translate for EmitterWriter {\n     }\n \n     fn fallback_fluent_bundle(&self) -> &FluentBundle {\n-        &**self.fallback_bundle\n+        &self.fallback_bundle\n     }\n }\n \n@@ -538,7 +538,7 @@ impl Emitter for EmitterWriter {\n         let fluent_args = to_fluent_args(diag.args());\n \n         let mut children = diag.children.clone();\n-        let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(diag, &fluent_args);\n         debug!(\"emit_diagnostic: suggestions={:?}\", suggestions);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n@@ -555,7 +555,7 @@ impl Emitter for EmitterWriter {\n             &diag.code,\n             &primary_span,\n             &children,\n-            &suggestions,\n+            suggestions,\n             self.track_diagnostics.then_some(&diag.emitted_at),\n         );\n     }\n@@ -801,7 +801,7 @@ impl EmitterWriter {\n         }\n \n         let source_string = match file.get_line(line.line_index - 1) {\n-            Some(s) => normalize_whitespace(&*s),\n+            Some(s) => normalize_whitespace(&s),\n             None => return Vec::new(),\n         };\n \n@@ -1148,7 +1148,7 @@ impl EmitterWriter {\n                 (pos + 2, annotation.start_col.saturating_sub(left))\n             };\n             if let Some(ref label) = annotation.label {\n-                buffer.puts(line_offset + pos, code_offset + col, &label, style);\n+                buffer.puts(line_offset + pos, code_offset + col, label, style);\n             }\n         }\n \n@@ -1358,7 +1358,7 @@ impl EmitterWriter {\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n-                buffer.append(0, &code, Style::Level(*level));\n+                buffer.append(0, code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n                 label_width += 2 + code.len();\n             }\n@@ -1683,7 +1683,7 @@ impl EmitterWriter {\n         };\n \n         // Render the replacements for each suggestion\n-        let suggestions = suggestion.splice_lines(&**sm);\n+        let suggestions = suggestion.splice_lines(sm);\n         debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n \n         if suggestions.is_empty() {\n@@ -1784,7 +1784,7 @@ impl EmitterWriter {\n                     buffer.puts(\n                         row_num - 1 + line - line_start,\n                         max_line_num_len + 3,\n-                        &normalize_whitespace(&*file_lines.file.get_line(line - 1).unwrap()),\n+                        &normalize_whitespace(&file_lines.file.get_line(line - 1).unwrap()),\n                         Style::Removal,\n                     );\n                 }\n@@ -1926,7 +1926,7 @@ impl EmitterWriter {\n                             buffer.putc(\n                                 row_num,\n                                 (padding as isize + p) as usize,\n-                                if part.is_addition(&sm) { '+' } else { '~' },\n+                                if part.is_addition(sm) { '+' } else { '~' },\n                                 Style::Addition,\n                             );\n                         }\n@@ -1973,7 +1973,7 @@ impl EmitterWriter {\n             buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n         } else if notice_capitalization {\n             let msg = \"notice the capitalization difference\";\n-            buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n+            buffer.puts(row_num, max_line_num_len + 3, msg, Style::NoStyle);\n         }\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n         Ok(())\n@@ -2028,7 +2028,7 @@ impl EmitterWriter {\n                     for child in children {\n                         let span = child.render_span.as_ref().unwrap_or(&child.span);\n                         if let Err(err) = self.emit_message_default(\n-                            &span,\n+                            span,\n                             &child.message,\n                             args,\n                             &None,\n@@ -2113,7 +2113,7 @@ impl EmitterWriter {\n                 *row_num - 1,\n                 max_line_num_len + 3,\n                 &normalize_whitespace(\n-                    &*file_lines.file.get_line(file_lines.lines[line_pos].line_index).unwrap(),\n+                    &file_lines.file.get_line(file_lines.lines[line_pos].line_index).unwrap(),\n                 ),\n                 Style::NoStyle,\n             );"}, {"sha": "a37073d8fa32a5a653bdce4cc2280429e4cbb4b3", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -136,7 +136,7 @@ impl Translate for JsonEmitter {\n     }\n \n     fn fallback_fluent_bundle(&self) -> &FluentBundle {\n-        &**self.fallback_bundle\n+        &self.fallback_bundle\n     }\n }\n "}, {"sha": "6176120b3016bfe31e97b12b505a5c8977a25383", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -1328,7 +1328,7 @@ impl HandlerInner {\n \n             diagnostic.children.drain_filter(already_emitted_sub).for_each(|_| {});\n \n-            self.emitter.emit_diagnostic(&diagnostic);\n+            self.emitter.emit_diagnostic(diagnostic);\n             if diagnostic.is_error() {\n                 self.deduplicated_err_count += 1;\n             } else if let Warning(_) = diagnostic.level {"}, {"sha": "afd660ff1bf1fb6c13d70c6a385243e8c0294f33", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -59,21 +59,21 @@ pub trait Translate {\n         trace!(?message, ?args);\n         let (identifier, attr) = match message {\n             DiagnosticMessage::Str(msg) | DiagnosticMessage::Eager(msg) => {\n-                return Cow::Borrowed(&msg);\n+                return Cow::Borrowed(msg);\n             }\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n \n         let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n-            let message = bundle.get_message(&identifier)?;\n+            let message = bundle.get_message(identifier)?;\n             let value = match attr {\n                 Some(attr) => message.get_attribute(attr)?.value(),\n                 None => message.value()?,\n             };\n             debug!(?message, ?value);\n \n             let mut errs = vec![];\n-            let translated = bundle.format_pattern(value, Some(&args), &mut errs);\n+            let translated = bundle.format_pattern(value, Some(args), &mut errs);\n             debug!(?translated, ?errs);\n             Some((translated, errs))\n         };"}, {"sha": "a7dfce3b9b8fce1ed528e61df14fc8cad1a2a699", "filename": "compiler/rustc_fs_util/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -65,7 +65,7 @@ pub enum LinkOrCopy {\n pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<LinkOrCopy> {\n     let p = p.as_ref();\n     let q = q.as_ref();\n-    match fs::remove_file(&q) {\n+    match fs::remove_file(q) {\n         Ok(()) => (),\n         Err(err) if err.kind() == io::ErrorKind::NotFound => (),\n         Err(err) => return Err(err),"}, {"sha": "1f8268cc17c539b813021c21f1f1c88fd2689bdc", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -410,7 +410,7 @@ impl<'a> Id<'a> {\n     }\n \n     pub fn as_slice(&'a self) -> &'a str {\n-        &*self.name\n+        &self.name\n     }\n }\n \n@@ -515,7 +515,7 @@ impl<'a> LabelText<'a> {\n     pub fn to_dot_string(&self) -> String {\n         match *self {\n             LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n-            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s)),\n+            EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(s)),\n             HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }\n@@ -529,7 +529,7 @@ impl<'a> LabelText<'a> {\n             EscStr(s) => s,\n             LabelStr(s) => {\n                 if s.contains('\\\\') {\n-                    (&*s).escape_default().to_string().into()\n+                    s.escape_default().to_string().into()\n                 } else {\n                     s\n                 }"}, {"sha": "636e6e1b48d0ed61e8c64ca9aca4dd3442bddd77", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -2437,7 +2437,7 @@ impl<'hir> Ty<'hir> {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n         while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n-            final_ty = &ty;\n+            final_ty = ty;\n         }\n         final_ty\n     }"}, {"sha": "93613ef27d404df43e5429ce36591de783b983ef", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -116,7 +116,7 @@ impl Ord for HirId {\n \n impl PartialOrd for HirId {\n     fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\n-        Some(self.cmp(&other))\n+        Some(self.cmp(other))\n     }\n }\n "}, {"sha": "938ace2c785bbf1aa7d2bd9cfd50a5bf98146979", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -448,7 +448,7 @@ pub trait Visitor<'v>: Sized {\n \n pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param<'v>) {\n     visitor.visit_id(param.hir_id);\n-    visitor.visit_pat(&param.pat);\n+    visitor.visit_pat(param.pat);\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n@@ -470,7 +470,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         }\n         ItemKind::Fn(ref sig, ref generics, body_id) => visitor.visit_fn(\n             FnKind::ItemFn(item.ident, generics, sig.header),\n-            &sig.decl,\n+            sig.decl,\n             body_id,\n             item.span,\n             item.hir_id(),\n@@ -544,7 +544,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n \n pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body<'v>) {\n     walk_list!(visitor, visit_param, body.params);\n-    visitor.visit_expr(&body.value);\n+    visitor.visit_expr(body.value);\n }\n \n pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, ident: Ident) {\n@@ -580,7 +580,7 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {\n     // dominates the local's definition.\n     walk_list!(visitor, visit_expr, &local.init);\n     visitor.visit_id(local.hir_id);\n-    visitor.visit_pat(&local.pat);\n+    visitor.visit_pat(local.pat);\n     if let Some(els) = local.els {\n         visitor.visit_block(els);\n     }\n@@ -606,7 +606,7 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n \n pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     visitor.visit_id(arm.hir_id);\n-    visitor.visit_pat(&arm.pat);\n+    visitor.visit_pat(arm.pat);\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),\n@@ -615,7 +615,7 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n             }\n         }\n     }\n-    visitor.visit_expr(&arm.body);\n+    visitor.visit_expr(arm.body);\n }\n \n pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n@@ -660,7 +660,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n pub fn walk_pat_field<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v PatField<'v>) {\n     visitor.visit_id(field.hir_id);\n     visitor.visit_ident(field.ident);\n-    visitor.visit_pat(&field.pat)\n+    visitor.visit_pat(field.pat)\n }\n \n pub fn walk_array_len<'v, V: Visitor<'v>>(visitor: &mut V, len: &'v ArrayLen) {\n@@ -800,26 +800,26 @@ pub fn walk_let_expr<'v, V: Visitor<'v>>(visitor: &mut V, let_expr: &'v Let<'v>)\n pub fn walk_expr_field<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v ExprField<'v>) {\n     visitor.visit_id(field.hir_id);\n     visitor.visit_ident(field.ident);\n-    visitor.visit_expr(&field.expr)\n+    visitor.visit_expr(field.expr)\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n     visitor.visit_id(typ.hir_id);\n \n     match typ.kind {\n         TyKind::Slice(ref ty) => visitor.visit_ty(ty),\n-        TyKind::Ptr(ref mutable_type) => visitor.visit_ty(&mutable_type.ty),\n+        TyKind::Ptr(ref mutable_type) => visitor.visit_ty(mutable_type.ty),\n         TyKind::Rptr(ref lifetime, ref mutable_type) => {\n             visitor.visit_lifetime(lifetime);\n-            visitor.visit_ty(&mutable_type.ty)\n+            visitor.visit_ty(mutable_type.ty)\n         }\n         TyKind::Never => {}\n         TyKind::Tup(tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyKind::BareFn(ref function_declaration) => {\n             walk_list!(visitor, visit_generic_param, function_declaration.generic_params);\n-            visitor.visit_fn_decl(&function_declaration.decl);\n+            visitor.visit_fn_decl(function_declaration.decl);\n         }\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n@@ -952,8 +952,8 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     let TraitItem { ident, generics, ref defaultness, ref kind, span, owner_id: _ } = *trait_item;\n     let hir_id = trait_item.hir_id();\n     visitor.visit_ident(ident);\n-    visitor.visit_generics(&generics);\n-    visitor.visit_defaultness(&defaultness);\n+    visitor.visit_generics(generics);\n+    visitor.visit_defaultness(defaultness);\n     match *kind {\n         TraitItemKind::Const(ref ty, default) => {\n             visitor.visit_id(hir_id);\n@@ -962,13 +962,13 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Fn(ref sig, TraitFn::Required(param_names)) => {\n             visitor.visit_id(hir_id);\n-            visitor.visit_fn_decl(&sig.decl);\n+            visitor.visit_fn_decl(sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n         TraitItemKind::Fn(ref sig, TraitFn::Provided(body_id)) => {\n-            visitor.visit_fn(FnKind::Method(ident, sig), &sig.decl, body_id, span, hir_id);\n+            visitor.visit_fn(FnKind::Method(ident, sig), sig.decl, body_id, span, hir_id);\n         }\n         TraitItemKind::Type(bounds, ref default) => {\n             visitor.visit_id(hir_id);\n@@ -1010,7 +1010,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         ImplItemKind::Fn(ref sig, body_id) => {\n             visitor.visit_fn(\n                 FnKind::Method(impl_item.ident, sig),\n-                &sig.decl,\n+                sig.decl,\n                 body_id,\n                 impl_item.span,\n                 impl_item.hir_id(),\n@@ -1043,7 +1043,7 @@ pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'\n \n pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef<'v>) {\n     visitor.visit_id(trait_ref.hir_ref_id);\n-    visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)\n+    visitor.visit_path(trait_ref.path, trait_ref.hir_ref_id)\n }\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound<'v>) {\n@@ -1075,7 +1075,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n pub fn walk_field_def<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v FieldDef<'v>) {\n     visitor.visit_id(field.hir_id);\n     visitor.visit_ident(field.ident);\n-    visitor.visit_ty(&field.ty);\n+    visitor.visit_ty(field.ty);\n }\n \n pub fn walk_enum_def<'v, V: Visitor<'v>>("}, {"sha": "684835d8c5c86b88e60713d8639ab1962a4eb0da", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -29,8 +29,8 @@ impl<'a> DiagnosticDerive<'a> {\n         let DiagnosticDerive { mut structure, mut builder } = self;\n \n         let implementation = builder.each_variant(&mut structure, |mut builder, variant| {\n-            let preamble = builder.preamble(&variant);\n-            let body = builder.body(&variant);\n+            let preamble = builder.preamble(variant);\n+            let body = builder.body(variant);\n \n             let diag = &builder.parent.diag;\n             let DiagnosticDeriveKind::Diagnostic { handler } = &builder.parent.kind else {\n@@ -39,7 +39,7 @@ impl<'a> DiagnosticDerive<'a> {\n             let init = match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(&format!(\n+                        .help(format!(\n                             \"specify the slug as the first argument to the `#[diag(...)]` \\\n                             attribute, such as `#[diag(hir_analysis_example_error)]`\",\n                         ))\n@@ -48,10 +48,10 @@ impl<'a> DiagnosticDerive<'a> {\n                 }\n                 Some(slug) if let Some( Mismatch { slug_name, crate_name, slug_prefix }) = Mismatch::check(slug) => {\n                     span_err(slug.span().unwrap(), \"diagnostic slug and crate name do not match\")\n-                        .note(&format!(\n+                        .note(format!(\n                             \"slug is `{slug_name}` but the crate name is `{crate_name}`\"\n                         ))\n-                        .help(&format!(\n+                        .help(format!(\n                             \"expected a slug starting with `{slug_prefix}_...`\"\n                         ))\n                         .emit();\n@@ -113,8 +113,8 @@ impl<'a> LintDiagnosticDerive<'a> {\n         let LintDiagnosticDerive { mut structure, mut builder } = self;\n \n         let implementation = builder.each_variant(&mut structure, |mut builder, variant| {\n-            let preamble = builder.preamble(&variant);\n-            let body = builder.body(&variant);\n+            let preamble = builder.preamble(variant);\n+            let body = builder.body(variant);\n \n             let diag = &builder.parent.diag;\n             let formatting_init = &builder.formatting_init;\n@@ -128,28 +128,28 @@ impl<'a> LintDiagnosticDerive<'a> {\n \n         let msg = builder.each_variant(&mut structure, |mut builder, variant| {\n             // Collect the slug by generating the preamble.\n-            let _ = builder.preamble(&variant);\n+            let _ = builder.preamble(variant);\n \n             match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(&format!(\n+                        .help(format!(\n                             \"specify the slug as the first argument to the attribute, such as \\\n                             `#[diag(compiletest_example)]`\",\n                         ))\n                         .emit();\n-                    return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n+                    DiagnosticDeriveError::ErrorHandled.to_compile_error()\n                 }\n                 Some(slug) if let Some( Mismatch { slug_name, crate_name, slug_prefix }) = Mismatch::check(slug) => {\n                     span_err(slug.span().unwrap(), \"diagnostic slug and crate name do not match\")\n-                        .note(&format!(\n+                        .note(format!(\n                             \"slug is `{slug_name}` but the crate name is `{crate_name}`\"\n                         ))\n-                        .help(&format!(\n+                        .help(format!(\n                             \"expected a slug starting with `{slug_prefix}_...`\"\n                         ))\n                         .emit();\n-                    return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n+                    DiagnosticDeriveError::ErrorHandled.to_compile_error()\n                 }\n                 Some(slug) => {\n                     quote! {"}, {"sha": "9f2ac5112f1cd9d3aa4b78a9cf1deeda1c0ae799", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -100,7 +100,7 @@ impl DiagnosticDeriveBuilder {\n                 _ => variant.ast().ident.span().unwrap(),\n             };\n             let builder = DiagnosticDeriveVariantBuilder {\n-                parent: &self,\n+                parent: self,\n                 span,\n                 field_map: build_field_mapping(variant),\n                 formatting_init: TokenStream::new(),\n@@ -211,7 +211,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                     nested_iter.next();\n                 }\n                 Some(NestedMeta::Meta(Meta::NameValue { .. })) => {}\n-                Some(nested_attr) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| diag\n+                Some(nested_attr) => throw_invalid_nested_attr!(attr, nested_attr, |diag| diag\n                     .help(\"a diagnostic slug is required as the first argument\")),\n                 None => throw_invalid_attr!(attr, &meta, |diag| diag\n                     .help(\"a diagnostic slug is required as the first argument\")),\n@@ -227,13 +227,13 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                         ..\n                     })) => (value, path),\n                     NestedMeta::Meta(Meta::Path(_)) => {\n-                        invalid_nested_attr(attr, &nested_attr)\n+                        invalid_nested_attr(attr, nested_attr)\n                             .help(\"diagnostic slug must be the first argument\")\n                             .emit();\n                         continue;\n                     }\n                     _ => {\n-                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        invalid_nested_attr(attr, nested_attr).emit();\n                         continue;\n                     }\n                 };\n@@ -251,7 +251,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                             #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n                         });\n                     }\n-                    _ => invalid_nested_attr(attr, &nested_attr)\n+                    _ => invalid_nested_attr(attr, nested_attr)\n                         .help(\"only `code` is a valid nested attributes following the slug\")\n                         .emit(),\n                 }\n@@ -427,9 +427,9 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                 Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n             }\n             SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n-                if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                if type_matches_path(info.ty, &[\"rustc_span\", \"Span\"]) {\n                     Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n-                } else if type_is_unit(&info.ty) {\n+                } else if type_is_unit(info.ty) {\n                     Ok(self.add_subdiagnostic(&fn_ident, slug))\n                 } else {\n                     report_type_error(attr, \"`Span` or `()`\")?"}, {"sha": "446aebe4f83f59a3d95a4903227bd4fa7b9cbb92", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -409,7 +409,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                 let mut code = None;\n                 for nested_attr in list.nested.iter() {\n                     let NestedMeta::Meta(ref meta) = nested_attr else {\n-                        throw_invalid_nested_attr!(attr, &nested_attr);\n+                        throw_invalid_nested_attr!(attr, nested_attr);\n                     };\n \n                     let span = meta.span().unwrap();\n@@ -427,7 +427,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                             );\n                             code.set_once((code_field, formatting_init), span);\n                         }\n-                        _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                        _ => throw_invalid_nested_attr!(attr, nested_attr, |diag| {\n                             diag.help(\"`code` is the only valid nested attribute\")\n                         }),\n                     }"}, {"sha": "da90233523ca3c83e503f45bb351207bcdcd5f74", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -80,7 +80,7 @@ fn report_error_if_not_applied_to_ty(\n     path: &[&str],\n     ty_name: &str,\n ) -> Result<(), DiagnosticDeriveError> {\n-    if !type_matches_path(&info.ty, path) {\n+    if !type_matches_path(info.ty, path) {\n         report_type_error(attr, ty_name)?;\n     }\n \n@@ -105,8 +105,8 @@ pub(crate) fn report_error_if_not_applied_to_span(\n     attr: &Attribute,\n     info: &FieldInfo<'_>,\n ) -> Result<(), DiagnosticDeriveError> {\n-    if !type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"])\n-        && !type_matches_path(&info.ty, &[\"rustc_errors\", \"MultiSpan\"])\n+    if !type_matches_path(info.ty, &[\"rustc_span\", \"Span\"])\n+        && !type_matches_path(info.ty, &[\"rustc_errors\", \"MultiSpan\"])\n     {\n         report_type_error(attr, \"`Span` or `MultiSpan`\")?;\n     }\n@@ -686,7 +686,7 @@ impl SubdiagnosticKind {\n             let meta = match nested_attr {\n                 NestedMeta::Meta(ref meta) => meta,\n                 NestedMeta::Lit(_) => {\n-                    invalid_nested_attr(attr, &nested_attr).emit();\n+                    invalid_nested_attr(attr, nested_attr).emit();\n                     continue;\n                 }\n             };\n@@ -698,7 +698,7 @@ impl SubdiagnosticKind {\n             let string_value = match meta {\n                 Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => Some(value),\n \n-                Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                Meta::Path(_) => throw_invalid_nested_attr!(attr, nested_attr, |diag| {\n                     diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n                 }),\n                 _ => None,\n@@ -720,7 +720,7 @@ impl SubdiagnosticKind {\n                     | SubdiagnosticKind::MultipartSuggestion { ref mut applicability, .. },\n                 ) => {\n                     let Some(value) = string_value else {\n-                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        invalid_nested_attr(attr, nested_attr).emit();\n                         continue;\n                     };\n \n@@ -736,7 +736,7 @@ impl SubdiagnosticKind {\n                     | SubdiagnosticKind::MultipartSuggestion { .. },\n                 ) => {\n                     let Some(value) = string_value else {\n-                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        invalid_nested_attr(attr, nested_attr).emit();\n                         continue;\n                     };\n \n@@ -752,19 +752,19 @@ impl SubdiagnosticKind {\n \n                 // Invalid nested attribute\n                 (_, SubdiagnosticKind::Suggestion { .. }) => {\n-                    invalid_nested_attr(attr, &nested_attr)\n+                    invalid_nested_attr(attr, nested_attr)\n                         .help(\n                             \"only `style`, `code` and `applicability` are valid nested attributes\",\n                         )\n                         .emit();\n                 }\n                 (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n-                    invalid_nested_attr(attr, &nested_attr)\n+                    invalid_nested_attr(attr, nested_attr)\n                         .help(\"only `style` and `applicability` are valid nested attributes\")\n                         .emit()\n                 }\n                 _ => {\n-                    invalid_nested_attr(attr, &nested_attr).emit();\n+                    invalid_nested_attr(attr, nested_attr).emit();\n                 }\n             }\n         }"}, {"sha": "8703e5754655f3c0a39792a7813da26054e0e5e4", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -121,7 +121,7 @@ impl CguReuseTracker {\n                         let at_least = if at_least { 1 } else { 0 };\n                         IncorrectCguReuseType {\n                             span: error_span.0,\n-                            cgu_user_name: &cgu_user_name,\n+                            cgu_user_name,\n                             actual_reuse,\n                             expected_reuse,\n                             at_least,"}, {"sha": "d8c4b0845d0acb67bc60114c74b98196ec25ed31", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -622,7 +622,7 @@ impl OutputFilenames {\n     /// should be placed on disk.\n     pub fn output_path(&self, flavor: OutputType) -> PathBuf {\n         let extension = flavor.extension();\n-        self.with_directory_and_extension(&self.out_directory, &extension)\n+        self.with_directory_and_extension(&self.out_directory, extension)\n     }\n \n     /// Gets the path where a compilation artifact of the given type for the\n@@ -659,7 +659,7 @@ impl OutputFilenames {\n \n         let temps_directory = self.temps_directory.as_ref().unwrap_or(&self.out_directory);\n \n-        self.with_directory_and_extension(&temps_directory, &extension)\n+        self.with_directory_and_extension(temps_directory, &extension)\n     }\n \n     pub fn with_extension(&self, extension: &str) -> PathBuf {\n@@ -1159,7 +1159,7 @@ impl CrateCheckConfig {\n                 values_target_family\n                     .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n                 values_target_arch.insert(Symbol::intern(&target.arch));\n-                values_target_endian.insert(Symbol::intern(&target.options.endian.as_str()));\n+                values_target_endian.insert(Symbol::intern(target.options.endian.as_str()));\n                 values_target_env.insert(Symbol::intern(&target.options.env));\n                 values_target_abi.insert(Symbol::intern(&target.options.abi));\n                 values_target_vendor.insert(Symbol::intern(&target.options.vendor));\n@@ -1846,7 +1846,7 @@ pub fn parse_target_triple(\n     match matches.opt_str(\"target\") {\n         Some(target) if target.ends_with(\".json\") => {\n             let path = Path::new(&target);\n-            TargetTriple::from_path(&path).unwrap_or_else(|_| {\n+            TargetTriple::from_path(path).unwrap_or_else(|_| {\n                 early_error(error_format, &format!(\"target file {path:?} does not exist\"))\n             })\n         }\n@@ -1992,7 +1992,7 @@ fn parse_native_lib_modifiers(\n ) -> (NativeLibKind, Option<bool>) {\n     let mut verbatim = None;\n     for modifier in modifiers.split(',') {\n-        let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n+        let (modifier, value) = match modifier.strip_prefix(['+', '-']) {\n             Some(m) => (m, modifier.starts_with('+')),\n             None => early_error(\n                 error_format,\n@@ -2421,7 +2421,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let mut search_paths = vec![];\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.push(SearchPath::from_cli_opt(&s, error_format));\n+        search_paths.push(SearchPath::from_cli_opt(s, error_format));\n     }\n \n     let libs = parse_libs(matches, error_format);"}, {"sha": "8cb9e1a6f1ae81462eb65293fb736409083ddef2", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -317,7 +317,7 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n         LitError::InvalidIntSuffix => {\n             let suf = suffix.expect(\"suffix error with no suffix\");\n             let suf = suf.as_str();\n-            if looks_like_width_suffix(&['i', 'u'], &suf) {\n+            if looks_like_width_suffix(&['i', 'u'], suf) {\n                 // If it looks like a width, try to be helpful.\n                 sess.emit_err(InvalidIntLiteralWidth { span, width: suf[1..].into() });\n             } else if let Some(fixed) = fix_base_capitalisation(suf) {"}, {"sha": "d3c2c5113bcdec663f1b00fb9d873d316d7bccae", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -247,7 +247,7 @@ fn analyze_source_file_generic(\n             // The slow path:\n             // This is either ASCII control character \"DEL\" or the beginning of\n             // a multibyte char. Just decode to `char`.\n-            let c = (&src[i..]).chars().next().unwrap();\n+            let c = src[i..].chars().next().unwrap();\n             char_len = c.len_utf8();\n \n             let pos = BytePos::from_usize(i) + output_offset;"}, {"sha": "886112769a977f78db57a95c9ddabafe985133dc", "filename": "compiler/rustc_span/src/caching_source_map_view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -165,7 +165,7 @@ impl<'sm> CachingSourceMapView<'sm> {\n             Some(new_file_and_idx)\n         } else {\n             let file = &self.line_cache[oldest].file;\n-            if !file_contains(&file, span_data.hi) {\n+            if !file_contains(file, span_data.hi) {\n                 return None;\n             }\n "}, {"sha": "038699154c727dc72d9add71fc1e6ecc6f70b78c", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -381,7 +381,7 @@ impl HygieneData {\n     }\n \n     pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {\n-        with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n+        with_session_globals(|session_globals| f(&mut session_globals.hygiene_data.borrow_mut()))\n     }\n \n     #[inline]"}, {"sha": "cef4c6f79cefd9d813824284f5d2886d973f0b86", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -238,7 +238,7 @@ impl RealFileName {\n     pub fn remapped_path_if_available(&self) -> &Path {\n         match self {\n             RealFileName::LocalPath(p)\n-            | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,\n+            | RealFileName::Remapped { local_path: _, virtual_name: p } => p,\n         }\n     }\n "}, {"sha": "f0e91e5a6a917c3373fa399a2e496fe243ab805d", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -166,5 +166,5 @@ impl SpanInterner {\n // If an interner exists, return it. Otherwise, prepare a fresh one.\n #[inline]\n fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {\n-    crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))\n+    crate::with_session_globals(|session_globals| f(&mut session_globals.span_interner.lock()))\n }"}, {"sha": "9e446c96db319cc11d2221a23aad75c005f7438a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -1877,7 +1877,7 @@ impl<S: Encoder> Encodable<S> for Symbol {\n impl<D: Decoder> Decodable<D> for Symbol {\n     #[inline]\n     default fn decode(d: &mut D) -> Symbol {\n-        Symbol::intern(&d.read_str())\n+        Symbol::intern(d.read_str())\n     }\n }\n "}, {"sha": "c8b6ac5ae25b2eb60152c2f3ae166471d0bb3f58", "filename": "compiler/rustc_target/src/abi/call/sparc64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -78,7 +78,7 @@ fn arg_scalar_pair<C>(\n where\n     C: HasDataLayout,\n {\n-    data = arg_scalar(cx, &scalar1, offset, data);\n+    data = arg_scalar(cx, scalar1, offset, data);\n     match (scalar1.primitive(), scalar2.primitive()) {\n         (abi::F32, _) => offset += Reg::f32().size,\n         (_, abi::F64) => offset += Reg::f64().size,\n@@ -90,7 +90,7 @@ where\n     if (offset.bytes() % 4) != 0 && scalar2.primitive().is_float() {\n         offset += Size::from_bytes(4 - (offset.bytes() % 4));\n     }\n-    data = arg_scalar(cx, &scalar2, offset, data);\n+    data = arg_scalar(cx, scalar2, offset, data);\n     return data;\n }\n "}, {"sha": "d05b8aa420067a9b4f8d1a66aa1650ce924f0216", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2f79b82cc1182f67f13646526d254cb440fd16/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1a2f79b82cc1182f67f13646526d254cb440fd16", "patch": "@@ -2658,7 +2658,7 @@ impl Target {\n \n                 // Additionally look in the sysroot under `lib/rustlib/<triple>/target.json`\n                 // as a fallback.\n-                let rustlib_path = crate::target_rustlib_path(&sysroot, &target_triple);\n+                let rustlib_path = crate::target_rustlib_path(sysroot, target_triple);\n                 let p = PathBuf::from_iter([\n                     Path::new(sysroot),\n                     Path::new(&rustlib_path),"}]}