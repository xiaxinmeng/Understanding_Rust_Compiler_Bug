{"sha": "3084a55d54c2e0ee1c97525f64f40b54091b93e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODRhNTVkNTRjMmUwZWUxYzk3NTI1ZjY0ZjQwYjU0MDkxYjkzZTQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-05T02:42:37Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-05T02:44:40Z"}, "message": "Don't use `crate` in link text\n\n`crate::` -> `core::`\n\nIt looks weird to have `crate::` in the link text and we use the actual\ncrate name everywhere else.\n\nIf anyone is curious, I used this Vim command to update all the links:\n\n    %s/\\(\\s\\)\\[`crate::\\(.*\\)`\\]/\\1[`core::\\2`](crate::\\2)/g", "tree": {"sha": "089ea7f67bad94b3a72cea8b2de56e9cd19be6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089ea7f67bad94b3a72cea8b2de56e9cd19be6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3084a55d54c2e0ee1c97525f64f40b54091b93e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3084a55d54c2e0ee1c97525f64f40b54091b93e4", "html_url": "https://github.com/rust-lang/rust/commit/3084a55d54c2e0ee1c97525f64f40b54091b93e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3084a55d54c2e0ee1c97525f64f40b54091b93e4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2bbdd0a3257cc980c934a92c5bf9808cf31728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bbdd0a3257cc980c934a92c5bf9808cf31728c", "html_url": "https://github.com/rust-lang/rust/commit/f2bbdd0a3257cc980c934a92c5bf9808cf31728c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7d0ba97de6eba6a13efd2144e5d0eb90287212d7", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3084a55d54c2e0ee1c97525f64f40b54091b93e4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3084a55d54c2e0ee1c97525f64f40b54091b93e4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3084a55d54c2e0ee1c97525f64f40b54091b93e4", "patch": "@@ -719,7 +719,7 @@ extern \"rust-intrinsic\" {\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::hint::unreachable_unchecked`].\n+    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -764,20 +764,20 @@ extern \"rust-intrinsic\" {\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::size_of`].\n+    /// The stabilized version of this intrinsic is [`core::mem::size_of`](crate::mem::size_of).\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::write`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::write`](crate::ptr::write).\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n     /// The minimum alignment of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::align_of`].\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of`](crate::mem::align_of).\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n@@ -793,21 +793,21 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::align_of_val`].\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`](crate::mem::align_of_val).\n     #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::any::type_name`].\n+    /// The stabilized version of this intrinsic is [`core::any::type_name`](crate::any::type_name).\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::any::TypeId::of`].\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`](crate::any::TypeId::of).\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -831,7 +831,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`crate::panic::Location::caller`] instead.\n+    /// Consider using [`core::panic::Location::caller`](crate::panic::Location::caller) instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n@@ -1152,11 +1152,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs a volatile load from the `src` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::read_volatile`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`](crate::ptr::read_volatile).\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::write_volatile`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`](crate::ptr::write_volatile).\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Performs a volatile load from the `src` pointer\n@@ -1697,7 +1697,7 @@ extern \"rust-intrinsic\" {\n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::discriminant`].\n+    /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n "}]}