{"sha": "03660b647690c3dea12a20468f9f798bacd14d82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjYwYjY0NzY5MGMzZGVhMTJhMjA0NjhmOWY3OThiYWNkMTRkODI=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-06-24T07:20:27Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-06-29T12:25:35Z"}, "message": "Move unsized_tuple_coercion behind a feature gate.", "tree": {"sha": "d132feb401ad434efda260612205aaff4ce1d84a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d132feb401ad434efda260612205aaff4ce1d84a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03660b647690c3dea12a20468f9f798bacd14d82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZVPG/AAoJEHynqF4EmoLokxwP/R/iXBrm1lzqGpZB6gfPlZ0i\nvCzSKNyN6CcXBSCpc10uCUxOwap+dgrL7e+Ew5arxB7PdAWXsCD7LbO2CkStYVC/\nS4n64Cf0bk5AkJqKVMnmlkSwKbq8bA7Vba+YGvibc8BWZff8C6YScq8v4M2fKafs\ngzcW3jBx39nbupnSa89724QO0MliHhK8UglzCqt1xxh6vWb4O3ITwBsk6+7SDIgy\nNy3IDitDbLepsnHDutMJ9w8NA5kxg5V95E4pm04DgiF4rTq2mGhH1kZ/RhixP/mJ\nax+tviJsJSiChNe8rdxHJ9UnKHR36LHXO4jiqYhgUy+nMDvwTMwMkVdwnaknkSnS\nKYCkSrF9BkU6P+ShswrwBLYYy62zJiytjjw6mxuFl/6WvOprMBCi3Oe9qR9VDwsl\ncdm18a3KOC0xyvGlV/mDVBWLVli2BzdSG72np3POrypB2qMIfEuyiugvHaAPAbFE\ntKh+Na9firgs/8VoBoT4NJwxDV9zyCENodlEkQtPEdfxFQ9XrKhsfQN5SPzSWv3F\ne7FhdWOpqfQ5kucFfPXxsg3MXkpgTLD8za7rE0NH4bPgY4y/wA4ZfEue2OkoYhej\nTsygq2LxDNBjBDrwzkbOwScB1aq4ApA4o/uNi4Urn37Zn1thHT0cBUSHzut07R1M\nwaIkPWNj/cbJ1MART4Ca\n=KPQf\n-----END PGP SIGNATURE-----", "payload": "tree d132feb401ad434efda260612205aaff4ce1d84a\nparent b0bf1b46820d74c30a725a7ea332305098bf3def\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1498288827 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1498739135 +0900\n\nMove unsized_tuple_coercion behind a feature gate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03660b647690c3dea12a20468f9f798bacd14d82", "html_url": "https://github.com/rust-lang/rust/commit/03660b647690c3dea12a20468f9f798bacd14d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03660b647690c3dea12a20468f9f798bacd14d82/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0bf1b46820d74c30a725a7ea332305098bf3def", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bf1b46820d74c30a725a7ea332305098bf3def", "html_url": "https://github.com/rust-lang/rust/commit/b0bf1b46820d74c30a725a7ea332305098bf3def"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "c243737e1be530589a8f17445eef9aaf49d62ed2", "filename": "src/doc/unstable-book/src/language-features/unsized-tuple-coercion.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -0,0 +1,27 @@\n+# `unsized_tuple_coercion`\n+\n+The tracking issue for this feature is: [#XXXXX]\n+\n+[#XXXXX]: https://github.com/rust-lang/rust/issues/XXXXX\n+\n+------------------------\n+\n+This is a part of [RFC0401]. According to the RFC, there should be an implementation like this:\n+\n+```rust\n+impl<..., T, U: ?Sized> Unsized<(..., U)> for (..., T) where T: Unsized<U> {}\n+```\n+\n+This implementation is currently gated behind `#[feature(unsized_tuple_coercion)]` to avoid insta-stability. Therefore you can use it like this:\n+\n+```rust\n+#![feature(unsized_tuple_coercion)]\n+\n+fn main() {\n+    let x : ([i32; 3], [i32; 3]) = ([1, 2, 3], [4, 5, 6]);\n+    let y : &([i32; 3], [i32]) = &x;\n+    assert_eq!(y.1[0], 4);\n+}\n+```\n+\n+[RFC0401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md"}, {"sha": "968e893b9a00b422862e26713fcd6aabbbfb0767", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -76,6 +76,7 @@ use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::Subst;\n use errors::DiagnosticBuilder;\n use syntax::abi;\n+use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos;\n \n@@ -520,14 +521,24 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                                                          coerce_source,\n                                                          &[coerce_target]));\n \n+        let mut has_unsized_tuple_coercion = false;\n+\n         // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid\n         // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where\n         // inference might unify those two inner type variables later.\n         let traits = [coerce_unsized_did, unsize_did];\n         while let Some(obligation) = queue.pop_front() {\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n-                ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => tr.clone(),\n+                ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {\n+                    if unsize_did == tr.def_id() {\n+                        if let ty::TyTuple(..) = tr.0.input_types().nth(1).unwrap().sty {\n+                            debug!(\"coerce_unsized: found unsized tuple coercion\");\n+                            has_unsized_tuple_coercion = true;\n+                        }\n+                    }\n+                    tr.clone()\n+                }\n                 _ => {\n                     coercion.obligations.push(obligation);\n                     continue;\n@@ -557,6 +568,14 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             }\n         }\n \n+        if has_unsized_tuple_coercion && !self.tcx.sess.features.borrow().unsized_tuple_coercion {\n+            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n+                                           \"unsized_tuple_coercion\",\n+                                           self.cause.span,\n+                                           feature_gate::GateIssue::Language,\n+                                           feature_gate::EXPLAIN_UNSIZED_TUPLE_COERCION);\n+        }\n+\n         Ok(coercion)\n     }\n "}, {"sha": "5de9062de74871a15051f0f2739f49ae1cd6041a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -357,6 +357,9 @@ declare_features! (\n \n     // Allows a test to fail without failing the whole suite\n     (active, allow_fail, \"1.19.0\", Some(42219)),\n+\n+    // Allows unsized tuple coercion.\n+    (active, unsized_tuple_coercion, \"1.20.0\", None),\n );\n \n declare_features! (\n@@ -1041,6 +1044,9 @@ pub const EXPLAIN_VIS_MATCHER: &'static str =\n pub const EXPLAIN_PLACEMENT_IN: &'static str =\n     \"placement-in expression syntax is experimental and subject to change.\";\n \n+pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n+    \"Unsized tuple coercion is not stable enough for use and is subject to change\";\n+\n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n }"}, {"sha": "1c3bad5ba56434357fd5e9eef7588ef058f70e13", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // Forbid assignment into a dynamically sized type.\n \n+#![feature(unsized_tuple_coercion)]\n+\n type Fat<T: ?Sized> = (isize, &'static str, T);\n //~^ WARNING trait bounds are not (yet) enforced\n "}, {"sha": "b0de84a53007258bd394517b85cc4d58c4a1f7b7", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // Attempt to change the type as well as unsizing.\n \n+#![feature(unsized_tuple_coercion)]\n+\n struct Fat<T: ?Sized> {\n     ptr: T\n }"}, {"sha": "35a147c15bb433beb6baf7f168a3b98dbb4d3af5", "filename": "src/test/compile-fail/dst-bad-coerce3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // Attempt to extend the lifetime as well as unsizing.\n \n+#![feature(unsized_tuple_coercion)]\n+\n struct Fat<T: ?Sized> {\n     ptr: T\n }"}, {"sha": "874b7588ff9bb572a2a01530c48ac43389568d25", "filename": "src/test/compile-fail/dst-bad-coerce4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // Attempt to coerce from unsized to sized.\n \n+#![feature(unsized_tuple_coercion)]\n+\n struct Fat<T: ?Sized> {\n     ptr: T\n }"}, {"sha": "0c812b1d815ab000da92254d3c9cf6d4affb9a6e", "filename": "src/test/compile-fail/dst-bad-deep-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -13,6 +13,8 @@\n // because it would require stack allocation of an unsized temporary (*g in the\n // test).\n \n+#![feature(unsized_tuple_coercion)]\n+\n pub fn main() {\n     let f: ([isize; 3],) = ([5, 6, 7],);\n     let g: &([isize],) = &f;"}, {"sha": "4ddde01126363524b22040d662bd5d792d28a411", "filename": "src/test/compile-fail/feature-gate-unsized_tuple_coercion.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unsized_tuple_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unsized_tuple_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unsized_tuple_coercion.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _ : &(Send,) = &((),);\n+    //~^ ERROR Unsized tuple coercion is not stable enough\n+}"}, {"sha": "1ae66a28a849ea4fa85c5810dc0ce1e100219d97", "filename": "src/test/run-pass-valgrind/dst-dtor-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-3.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // no-prefer-dynamic\n \n+#![feature(unsized_tuple_coercion)]\n+\n static mut DROP_RAN: bool = false;\n \n struct Foo;"}, {"sha": "e416f25bc03a0141ae35f566316f565a060bb6c6", "filename": "src/test/run-pass-valgrind/dst-dtor-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-4.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -10,6 +10,8 @@\n \n // no-prefer-dynamic\n \n+#![feature(unsized_tuple_coercion)]\n+\n static mut DROP_RAN: isize = 0;\n \n struct Foo;"}, {"sha": "b1d6c732e7fbb0a9caecb48a8733a84cd11751ff", "filename": "src/test/run-pass/dst-irrefutable-bind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unsized_tuple_coercion)]\n+\n struct Test<T: ?Sized>(T);\n \n fn main() {"}, {"sha": "9ebfbee8a330213363a9906b518d9685cf13694e", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -11,6 +11,8 @@\n // Test DST raw pointers\n \n \n+#![feature(unsized_tuple_coercion)]\n+\n trait Trait {\n     fn foo(&self) -> isize;\n }"}, {"sha": "9803e26f5f8591a47cad98b813f10702b1100de1", "filename": "src/test/run-pass/dst-trait-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait-tuple.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -11,6 +11,7 @@\n \n #![allow(unused_features)]\n #![feature(box_syntax)]\n+#![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n "}, {"sha": "a788e25218eb46c044da5ba6d4e10335eeb6ee2c", "filename": "src/test/run-pass/dst-tuple-sole.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-tuple-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-tuple-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-tuple-sole.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -11,6 +11,8 @@\n // As dst-tuple.rs, but the unsized field is the only field in the tuple.\n \n \n+#![feature(unsized_tuple_coercion)]\n+\n type Fat<T: ?Sized> = (T,);\n \n // x is a fat pointer"}, {"sha": "2f5b28495b8aed7c3d8b3b0745dadcbf57b18ec1", "filename": "src/test/run-pass/dst-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03660b647690c3dea12a20468f9f798bacd14d82/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-tuple.rs?ref=03660b647690c3dea12a20468f9f798bacd14d82", "patch": "@@ -11,6 +11,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n+#![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n "}]}