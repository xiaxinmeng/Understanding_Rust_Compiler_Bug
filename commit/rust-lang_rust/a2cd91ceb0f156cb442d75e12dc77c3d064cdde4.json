{"sha": "a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2Q5MWNlYjBmMTU2Y2I0NDJkNzVlMTJkYzc3YzNkMDY0Y2RkZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-11T06:09:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-11T06:09:50Z"}, "message": "Auto merge of #80905 - JohnTitor:rollup-tmmwmnb, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #80809 (Use standard formatting for \"rust-call\" ABI message)\n - #80872 (Fix typo in source-based-code-coverage.md)\n - #80878 (Add ABI argument to `find_mir_or_eval_fn`)\n - #80881 ( Fix intra-doc links to `Self` and `crate` )\n - #80887 (log-color: Detect TTY based on stderr, not stdout)\n - #80892 (rustdoc: Remove `*` intra-doc alias for `pointer`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "208c016b62b3962a7913c8189d3aa884adf3e6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/208c016b62b3962a7913c8189d3aa884adf3e6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "html_url": "https://github.com/rust-lang/rust/commit/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c5c3922f5f638b4173bd821f57c94bbb18d43c", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c5c3922f5f638b4173bd821f57c94bbb18d43c", "html_url": "https://github.com/rust-lang/rust/commit/00c5c3922f5f638b4173bd821f57c94bbb18d43c"}, {"sha": "a7f7d70860634b08a1ff9a3de04b7aceaa4f5d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f7d70860634b08a1ff9a3de04b7aceaa4f5d9e", "html_url": "https://github.com/rust-lang/rust/commit/a7f7d70860634b08a1ff9a3de04b7aceaa4f5d9e"}], "stats": {"total": 121, "additions": 76, "deletions": 45}, "files": [{"sha": "c2a0d8ef7ea119434c6b473276ffbe7323245a08", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -566,6 +566,25 @@ fn stdout_isatty() -> bool {\n     }\n }\n \n+// FIXME remove these and use winapi 0.3 instead\n+#[cfg(unix)]\n+fn stderr_isatty() -> bool {\n+    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n+}\n+\n+#[cfg(windows)]\n+fn stderr_isatty() -> bool {\n+    use winapi::um::consoleapi::GetConsoleMode;\n+    use winapi::um::processenv::GetStdHandle;\n+    use winapi::um::winbase::STD_ERROR_HANDLE;\n+\n+    unsafe {\n+        let handle = GetStdHandle(STD_ERROR_HANDLE);\n+        let mut out = 0;\n+        GetConsoleMode(handle, &mut out) != 0\n+    }\n+}\n+\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised =\n         if code.starts_with('E') { code.to_string() } else { format!(\"E{0:0>4}\", code) };\n@@ -1290,7 +1309,7 @@ pub fn init_env_logger(env: &str) {\n         Ok(value) => match value.as_ref() {\n             \"always\" => true,\n             \"never\" => false,\n-            \"auto\" => stdout_isatty(),\n+            \"auto\" => stderr_isatty(),\n             _ => early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n@@ -1299,7 +1318,7 @@ pub fn init_env_logger(env: &str) {\n                 ),\n             ),\n         },\n-        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n+        Err(std::env::VarError::NotPresent) => stderr_isatty(),\n         Err(std::env::VarError::NotUnicode(_value)) => early_error(\n             ErrorOutputType::default(),\n             \"non-Unicode log color value: expected one of always, never, or auto\","}, {"sha": "02a9ec4df16d556f165f05edc4b38239518a52f0", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::mir::AssertMessage;\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Align, Size};\n+use rustc_target::spec::abi::Abi;\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, InterpCx, InterpResult, Memory,\n@@ -203,6 +204,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n+        _abi: Abi,\n         args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>, // unwinding is not supported in consts"}, {"sha": "a1a825b3268aea2269e91835b39e97dcf3b04354", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n+use rustc_target::spec::abi::Abi;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n@@ -144,6 +145,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -154,6 +156,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Self::ExtraFnVal,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -405,6 +408,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,\n         fn_val: !,\n+        _abi: Abi,\n         _args: &[OpTy<$tcx>],\n         _ret: Option<(PlaceTy<$tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>,"}, {"sha": "575667f9a95258e17b6b17f4cb72643e4b0db861", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -219,7 +219,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let instance = match fn_val {\n             FnVal::Instance(instance) => instance,\n             FnVal::Other(extra) => {\n-                return M::call_extra_fn(self, extra, args, ret, unwind);\n+                return M::call_extra_fn(self, extra, caller_abi, args, ret, unwind);\n             }\n         };\n \n@@ -264,10 +264,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::CloneShim(..)\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n-                let body = match M::find_mir_or_eval_fn(self, instance, args, ret, unwind)? {\n-                    Some(body) => body,\n-                    None => return Ok(()),\n-                };\n+                let body =\n+                    match M::find_mir_or_eval_fn(self, instance, caller_abi, args, ret, unwind)? {\n+                        Some(body) => body,\n+                        None => return Ok(()),\n+                    };\n \n                 self.push_stack_frame(\n                     instance,"}, {"sha": "2d6d0adf3bccd1734c54caa205f1a100ebe7221c", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::{\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n use crate::const_eval::ConstEvalErr;\n@@ -187,6 +188,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n+        _abi: Abi,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,"}, {"sha": "9bb4c9b3719e3308d9d7e0f9eb6911d07d469ed5", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -113,7 +113,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             };\n \n             if let Some(header) = item {\n-                tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n             }\n         };\n "}, {"sha": "8aca005214724426c92e579e9dbce170c63a46c8", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -123,7 +123,7 @@ The `rustup` option is guaranteed to install a compatible version of the LLVM to\n ```shell\n $ rustup component add llvm-tools-preview\n $ cargo install cargo-binutils\n-$ cargo profdata -- --help  # note the additional \"--\" preceeding the tool-specific arguments\n+$ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specific arguments\n ```\n \n ## Creating coverage reports"}, {"sha": "9cba1b7b0f1cb1002d7e5d1f8e9846c464e72def", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -504,15 +504,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             match res {\n                 // FIXME(#76467): make this fallthrough to lookup the associated\n                 // item a separate function.\n-                Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => {\n-                    assert_eq!(ns, ValueNS);\n-                }\n-                Res::Def(DefKind::AssocTy, _) => {\n-                    assert_eq!(ns, TypeNS);\n-                }\n-                Res::Def(DefKind::Variant, _) => {\n-                    return handle_variant(cx, res, extra_fragment);\n-                }\n+                Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => assert_eq!(ns, ValueNS),\n+                Res::Def(DefKind::AssocTy, _) => assert_eq!(ns, TypeNS),\n+                Res::Def(DefKind::Variant, _) => return handle_variant(cx, res, extra_fragment),\n                 // Not a trait item; just return what we found.\n                 Res::Primitive(ty) => {\n                     if extra_fragment.is_some() {\n@@ -522,12 +516,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     }\n                     return Ok((res, Some(ty.as_str().to_owned())));\n                 }\n-                Res::Def(DefKind::Mod, _) => {\n-                    return Ok((res, extra_fragment.clone()));\n-                }\n-                _ => {\n-                    return Ok((res, extra_fragment.clone()));\n-                }\n+                _ => return Ok((res, extra_fragment.clone())),\n             }\n         }\n \n@@ -1024,12 +1013,18 @@ impl LinkCollector<'_, '_> {\n \n         let resolved_self;\n         // replace `Self` with suitable item's parent name\n-        if path_str.starts_with(\"Self::\") {\n+        let is_lone_self = path_str == \"Self\";\n+        let is_lone_crate = path_str == \"crate\";\n+        if path_str.starts_with(\"Self::\") || is_lone_self {\n             if let Some(ref name) = self_name {\n-                resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n-                path_str = &resolved_self;\n+                if is_lone_self {\n+                    path_str = name;\n+                } else {\n+                    resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n+                    path_str = &resolved_self;\n+                }\n             }\n-        } else if path_str.starts_with(\"crate::\") {\n+        } else if path_str.starts_with(\"crate::\") || is_lone_crate {\n             use rustc_span::def_id::CRATE_DEF_INDEX;\n \n             // HACK(jynelson): rustc_resolve thinks that `crate` is the crate currently being documented.\n@@ -1038,8 +1033,12 @@ impl LinkCollector<'_, '_> {\n             // HACK(jynelson)(2): If we just strip `crate::` then suddenly primitives become ambiguous\n             // (consider `crate::char`). Instead, change it to `self::`. This works because 'self' is now the crate root.\n             // FIXME(#78696): This doesn't always work.\n-            resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n-            path_str = &resolved_self;\n+            if is_lone_crate {\n+                path_str = \"self\";\n+            } else {\n+                resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n+                path_str = &resolved_self;\n+            }\n             module_id = DefId { krate, index: CRATE_DEF_INDEX };\n         }\n \n@@ -2092,7 +2091,7 @@ fn resolve_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n         \"array\" => Array,\n         \"tuple\" => Tuple,\n         \"unit\" => Unit,\n-        \"pointer\" | \"*\" | \"*const\" | \"*mut\" => RawPointer,\n+        \"pointer\" | \"*const\" | \"*mut\" => RawPointer,\n         \"reference\" | \"&\" | \"&mut\" => Reference,\n         \"fn\" => Fn,\n         \"never\" | \"!\" => Never,"}, {"sha": "54902f12eb18ccc70c209d2fb905dc6c3fe3e720", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -1,4 +1,7 @@\n #![crate_name = \"cross_crate_self\"]\n+\n+/// Link to [Self]\n+/// Link to [crate]\n pub struct S;\n \n impl S {"}, {"sha": "4db63b12b6bb75f16306674fd2c65b19d1990ed0", "filename": "src/test/rustdoc/intra-doc-crate/self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -1,6 +1,9 @@\n // aux-build:self.rs\n+// build-aux-docs\n \n extern crate cross_crate_self;\n \n // @has self/struct.S.html '//a[@href=\"../self/struct.S.html#method.f\"]' \"Self::f\"\n+// @has self/struct.S.html '//a[@href=\"../self/struct.S.html\"]' \"Self\"\n+// @has self/struct.S.html '//a[@href=\"../cross_crate_self/index.html\"]' \"crate\"\n pub use cross_crate_self::S;"}, {"sha": "a409744e409b09cf59269832d8ebc2be324c8f61", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -11,11 +11,9 @@\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' 'pointer::is_null'\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*const::is_null'\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*mut::is_null'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*::is_null'\n //! [pointer::is_null]\n //! [*const::is_null]\n //! [*mut::is_null]\n-//! [*::is_null]\n \n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\"]' 'unit'\n //! [unit]"}, {"sha": "a08e0bfb5e5da8589998c8767adac633502d6295", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -1,25 +1,25 @@\n #![feature(unboxed_closures)]\n \n extern \"rust-call\" fn b(_i: i32) {}\n-//~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+//~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n \n trait Tr {\n     extern \"rust-call\" fn a();\n \n     extern \"rust-call\" fn b() {}\n-    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n struct Foo;\n \n impl Foo {\n     extern \"rust-call\" fn bar() {}\n-    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl Tr for Foo {\n     extern \"rust-call\" fn a() {}\n-    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n fn main () {"}, {"sha": "3eee10bc5e95191209b38081c849179bc01edb5c", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -1,22 +1,22 @@\n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/issue-22565-rust-call.rs:3:1\n    |\n LL | extern \"rust-call\" fn b(_i: i32) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/issue-22565-rust-call.rs:9:5\n    |\n LL |     extern \"rust-call\" fn b() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/issue-22565-rust-call.rs:16:5\n    |\n LL |     extern \"rust-call\" fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/issue-22565-rust-call.rs:21:5\n    |\n LL |     extern \"rust-call\" fn a() {}"}, {"sha": "07d44ff82b133daec527c5463cd488565006e0cd", "filename": "src/test/ui/overloaded-calls-nontuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -11,13 +11,13 @@ impl FnMut<isize> for S {\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n-    //~^^^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+    //~^^^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl FnOnce<isize> for S {\n     type Output = isize;\n     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n-    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n+    //~^ ERROR functions with the \"rust-call\" ABI must take a single non-self argument\n }\n \n fn main() {"}, {"sha": "8f299bc9434f38e416275da1809ec55d72225e42", "filename": "src/test/ui/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cd91ceb0f156cb442d75e12dc77c3d064cdde4/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr?ref=a2cd91ceb0f156cb442d75e12dc77c3d064cdde4", "patch": "@@ -1,10 +1,10 @@\n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/overloaded-calls-nontuple.rs:11:5\n    |\n LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+error: functions with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n   --> $DIR/overloaded-calls-nontuple.rs:19:5\n    |\n LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }"}]}