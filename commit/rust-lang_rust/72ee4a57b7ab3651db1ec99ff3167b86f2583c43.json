{"sha": "72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWU0YTU3YjdhYjM2NTFkYjFlYzk5ZmYzMTY3Yjg2ZjI1ODNjNDM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-09T20:25:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-09T20:25:28Z"}, "message": "Updated librustdoc and librustpkg to use the proper UpperCase names from libsyntax.", "tree": {"sha": "df2ace956c0631a5c6f3edb2e9f020330f863a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2ace956c0631a5c6f3edb2e9f020330f863a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "html_url": "https://github.com/rust-lang/rust/commit/72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b221768cfe4585a70cc5c3b647ceda0c7319c25", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b221768cfe4585a70cc5c3b647ceda0c7319c25", "html_url": "https://github.com/rust-lang/rust/commit/6b221768cfe4585a70cc5c3b647ceda0c7319c25"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "bc70dcb935a975536dc0fef8a059a3c1dc7361e1", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "patch": "@@ -598,9 +598,9 @@ pub enum Type {\n     FixedVector(~Type, ~str),\n     String,\n     Bool,\n-    /// aka ty_nil\n+    /// aka TyNil\n     Unit,\n-    /// aka ty_bot\n+    /// aka TyBot\n     Bottom,\n     Unique(~Type),\n     Managed(~Type),\n@@ -624,22 +624,22 @@ impl Clean<Type> for ast::Ty {\n         let codemap = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess.codemap;\n         debug!(\"span corresponds to `{}`\", codemap.span_to_str(self.span));\n         match self.node {\n-            ty_nil => Unit,\n-            ty_ptr(ref m) => RawPointer(m.mutbl.clean(), ~m.ty.clean()),\n-            ty_rptr(ref l, ref m) =>\n+            TyNil => Unit,\n+            TyPtr(ref m) => RawPointer(m.mutbl.clean(), ~m.ty.clean()),\n+            TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n                              type_: ~m.ty.clean()},\n-            ty_box(ty) => Managed(~ty.clean()),\n-            ty_uniq(ty) => Unique(~ty.clean()),\n-            ty_vec(ty) => Vector(~ty.clean()),\n-            ty_fixed_length_vec(ty, ref e) => FixedVector(~ty.clean(),\n-                                                          e.span.to_src()),\n-            ty_tup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n-            ty_path(ref p, ref tpbs, id) =>\n+            TyBox(ty) => Managed(~ty.clean()),\n+            TyUniq(ty) => Unique(~ty.clean()),\n+            TyVec(ty) => Vector(~ty.clean()),\n+            TyFixedLengthVec(ty, ref e) => FixedVector(~ty.clean(),\n+                                                       e.span.to_src()),\n+            TyTup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n+            TyPath(ref p, ref tpbs, id) =>\n                 resolve_type(p.clean(), tpbs.clean(), id),\n-            ty_closure(ref c) => Closure(~c.clean()),\n-            ty_bare_fn(ref barefn) => BareFunction(~barefn.clean()),\n-            ty_bot => Bottom,\n+            TyClosure(ref c) => Closure(~c.clean()),\n+            TyBareFn(ref barefn) => BareFunction(~barefn.clean()),\n+            TyBot => Bottom,\n             ref x => fail!(\"Unimplemented type {:?}\", x),\n         }\n     }\n@@ -1204,9 +1204,8 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n         let fqn = csearch::get_item_path(tycx, def_id);\n         let fqn = fqn.move_iter().map(|i| {\n             match i {\n-                ast_map::path_mod(id) |\n-                ast_map::path_name(id) |\n-                ast_map::path_pretty_name(id, _) => id.clean()\n+                ast_map::PathMod(id) | ast_map::PathName(id) |\n+                ast_map::PathPrettyName(id, _) => id.clean()\n             }\n         }).to_owned_vec();\n         ExternalPath{ path: path, typarams: tpbs, fqn: fqn, kind: kind,"}, {"sha": "f1bd3a62e01623ad7f8107ac4e75b88cbd18b269", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "patch": "@@ -39,7 +39,7 @@ impl Module {\n         Module {\n             name       : name,\n             id: 0,\n-            vis: ast::private,\n+            vis: ast::Private,\n             where: syntax::codemap::DUMMY_SP,\n             attrs      : ~[],\n             structs    : ~[],"}, {"sha": "ce29584f5b9d12774de6fc3b9f426a1488fb871a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "patch": "@@ -121,36 +121,36 @@ impl<'a> RustdocVisitor<'a> {\n         om\n     }\n \n-    pub fn visit_view_item(&mut self, item: &ast::view_item, om: &mut Module) {\n-        if item.vis != ast::public {\n+    pub fn visit_view_item(&mut self, item: &ast::ViewItem, om: &mut Module) {\n+        if item.vis != ast::Public {\n             return om.view_items.push(item.clone());\n         }\n         let item = match item.node {\n-            ast::view_item_use(ref paths) => {\n+            ast::ViewItemUse(ref paths) => {\n                 // rustc no longer supports \"use foo, bar;\"\n                 assert_eq!(paths.len(), 1);\n                 match self.visit_view_path(paths[0], om) {\n                     None => return,\n                     Some(path) => {\n-                        ast::view_item {\n-                            node: ast::view_item_use(~[path]),\n+                        ast::ViewItem {\n+                            node: ast::ViewItemUse(~[path]),\n                             .. item.clone()\n                         }\n                     }\n                 }\n             }\n-            ast::view_item_extern_mod(..) => item.clone()\n+            ast::ViewItemExternMod(..) => item.clone()\n         };\n         om.view_items.push(item);\n     }\n \n-    fn visit_view_path(&mut self, path: @ast::view_path,\n-                       om: &mut Module) -> Option<@ast::view_path> {\n+    fn visit_view_path(&mut self, path: @ast::ViewPath,\n+                       om: &mut Module) -> Option<@ast::ViewPath> {\n         match path.node {\n-            ast::view_path_simple(_, _, id) => {\n+            ast::ViewPathSimple(_, _, id) => {\n                 if self.resolve_id(id, false, om) { return None }\n             }\n-            ast::view_path_list(ref p, ref paths, ref b) => {\n+            ast::ViewPathList(ref p, ref paths, ref b) => {\n                 let mut mine = ~[];\n                 for path in paths.iter() {\n                     if !self.resolve_id(path.node.id, false, om) {\n@@ -160,13 +160,13 @@ impl<'a> RustdocVisitor<'a> {\n \n                 if mine.len() == 0 { return None }\n                 return Some(@::syntax::codemap::Spanned {\n-                    node: ast::view_path_list(p.clone(), mine, b.clone()),\n+                    node: ast::ViewPathList(p.clone(), mine, b.clone()),\n                     span: path.span,\n                 })\n             }\n \n             // these are feature gated anyway\n-            ast::view_path_glob(_, id) => {\n+            ast::ViewPathGlob(_, id) => {\n                 if self.resolve_id(id, true, om) { return None }\n             }\n         }"}, {"sha": "135b659871dd74f74fbe26f57d3216f5ca3cce0d", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee4a57b7ab3651db1ec99ff3167b86f2583c43/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=72ee4a57b7ab3651db1ec99ff3167b86f2583c43", "patch": "@@ -88,7 +88,7 @@ struct PkgScript<'a> {\n     /// The config for compiling the custom build script\n     cfg: ast::CrateConfig,\n     /// The crate and ast_map for the custom build script\n-    crate_and_map: Option<(ast::Crate, syntax::ast_map::map)>,\n+    crate_and_map: Option<(ast::Crate, syntax::ast_map::Map)>,\n     /// Directory in which to store build output\n     build_dir: Path\n }"}]}