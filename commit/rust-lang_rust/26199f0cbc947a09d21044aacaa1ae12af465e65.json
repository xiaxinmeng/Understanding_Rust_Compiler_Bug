{"sha": "26199f0cbc947a09d21044aacaa1ae12af465e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTk5ZjBjYmM5NDdhMDlkMjEwNDRhYWNhYTFhZTEyYWY0NjVlNjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-20T05:42:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-06T18:55:50Z"}, "message": "ty/walk: switch `walk_shallow` from `Ty` to `GenericArg`.", "tree": {"sha": "894e9a4dc5d1c724334f807dfd3d71c59138b143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894e9a4dc5d1c724334f807dfd3d71c59138b143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26199f0cbc947a09d21044aacaa1ae12af465e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26199f0cbc947a09d21044aacaa1ae12af465e65", "html_url": "https://github.com/rust-lang/rust/commit/26199f0cbc947a09d21044aacaa1ae12af465e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26199f0cbc947a09d21044aacaa1ae12af465e65/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4705b0097a132cbb721095997d91090e8cdb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4705b0097a132cbb721095997d91090e8cdb21", "html_url": "https://github.com/rust-lang/rust/commit/0d4705b0097a132cbb721095997d91090e8cdb21"}], "stats": {"total": 138, "additions": 58, "deletions": 80}, "files": [{"sha": "ed967f7ab3a0bac8c146e996bacb3eb345bebf28", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=26199f0cbc947a09d21044aacaa1ae12af465e65", "patch": "@@ -3,11 +3,9 @@ use crate::infer::{GenericKind, VerifyBound};\n use crate::traits;\n use rustc_data_structures::captures::Captures;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-use smallvec::smallvec;\n-\n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as\n /// described on the module comment. The final constraints are emitted\n@@ -44,7 +42,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match ty.kind {\n             ty::Param(p) => self.param_bound(p),\n             ty::Projection(data) => self.projection_bound(data),\n-            _ => self.recursive_type_bound(ty),\n+            _ => self.recursive_bound(ty.into()),\n         }\n     }\n \n@@ -144,25 +142,33 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n \n         // see the extensive comment in projection_must_outlive\n         let ty = self.tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs);\n-        let recursive_bound = self.recursive_type_bound(ty);\n+        let recursive_bound = self.recursive_bound(ty.into());\n \n         VerifyBound::AnyBound(env_bounds.chain(trait_bounds).collect()).or(recursive_bound)\n     }\n \n-    fn recursive_type_bound(&self, ty: Ty<'tcx>) -> VerifyBound<'tcx> {\n-        let mut bounds = ty.walk_shallow().map(|subty| self.type_bound(subty)).collect::<Vec<_>>();\n-\n-        let mut regions = smallvec![];\n-        ty.push_regions(&mut regions);\n-        regions.retain(|r| !r.is_late_bound()); // ignore late-bound regions\n-        bounds.push(VerifyBound::AllBounds(\n-            regions.into_iter().map(|r| VerifyBound::OutlivedBy(r)).collect(),\n-        ));\n-\n-        // remove bounds that must hold, since they are not interesting\n-        bounds.retain(|b| !b.must_hold());\n+    fn recursive_bound(&self, parent: GenericArg<'tcx>) -> VerifyBound<'tcx> {\n+        let mut bounds = parent\n+            .walk_shallow()\n+            .filter_map(|child| match child.unpack() {\n+                GenericArgKind::Type(ty) => Some(self.type_bound(ty)),\n+                GenericArgKind::Lifetime(lt) => {\n+                    // Ignore late-bound regions.\n+                    if !lt.is_late_bound() { Some(VerifyBound::OutlivedBy(lt)) } else { None }\n+                }\n+                GenericArgKind::Const(_) => Some(self.recursive_bound(child)),\n+            })\n+            .filter(|bound| {\n+                // Remove bounds that must hold, since they are not interesting.\n+                !bound.must_hold()\n+            });\n \n-        if bounds.len() == 1 { bounds.pop().unwrap() } else { VerifyBound::AllBounds(bounds) }\n+        match (bounds.next(), bounds.next()) {\n+            (Some(first), None) => first,\n+            (first, second) => {\n+                VerifyBound::AllBounds(first.into_iter().chain(second).chain(bounds).collect())\n+            }\n+        }\n     }\n \n     /// Searches the environment for where-clauses like `G: 'a` where"}, {"sha": "bc12b96164b08f733e768b3051f3248b83dd360a", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=26199f0cbc947a09d21044aacaa1ae12af465e65", "patch": "@@ -2701,13 +2701,6 @@ impl<'tcx> TyS<'tcx> {\n         TypeWalker::new(self.into())\n     }\n \n-    /// Iterator that walks the immediate children of `self`. Hence\n-    /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n-    /// (but not `i32`, like `walk`).\n-    pub fn walk_shallow(&'tcx self) -> impl Iterator<Item = Ty<'tcx>> {\n-        walk::walk_shallow(self.into())\n-    }\n-\n     /// Walks `ty` and any types appearing within `ty`, invoking the\n     /// callback `f` on each type. If the callback returns `false`, then the\n     /// children of the current type are ignored."}, {"sha": "950539fbb0a169fec21e652bcf7bfc22a6f565e9", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=26199f0cbc947a09d21044aacaa1ae12af465e65", "patch": "@@ -2,6 +2,7 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n+use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use smallvec::SmallVec;\n \n@@ -107,8 +108,9 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                     // fallback case: hard code\n                     // OutlivesProjectionComponents.  Continue walking\n                     // through and constrain Pi.\n-                    let subcomponents = capture_components(tcx, ty);\n-                    out.push(Component::EscapingProjection(subcomponents));\n+                    let mut subcomponents = smallvec![];\n+                    compute_components_recursive(tcx, ty.into(), &mut subcomponents);\n+                    out.push(Component::EscapingProjection(subcomponents.into_iter().collect()));\n                 }\n             }\n \n@@ -153,26 +155,30 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 // \"bound regions list\".  In our representation, no such\n                 // list is maintained explicitly, because bound regions\n                 // themselves can be readily identified.\n-\n-                push_region_constraints(ty, out);\n-                for subty in ty.walk_shallow() {\n-                    compute_components(tcx, subty, out);\n-                }\n+                compute_components_recursive(tcx, ty.into(), out);\n             }\n         }\n }\n \n-fn capture_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<Component<'tcx>> {\n-    let mut temp = smallvec![];\n-    push_region_constraints(ty, &mut temp);\n-    for subty in ty.walk_shallow() {\n-        compute_components(tcx, subty, &mut temp);\n+fn compute_components_recursive(\n+    tcx: TyCtxt<'tcx>,\n+    parent: GenericArg<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+) {\n+    for child in parent.walk_shallow() {\n+        match child.unpack() {\n+            GenericArgKind::Type(ty) => {\n+                compute_components(tcx, ty, out);\n+            }\n+            GenericArgKind::Lifetime(lt) => {\n+                // Ignore late-bound regions.\n+                if !lt.is_late_bound() {\n+                    out.push(Component::Region(lt));\n+                }\n+            }\n+            GenericArgKind::Const(_) => {\n+                compute_components_recursive(tcx, child, out);\n+            }\n+        }\n     }\n-    temp.into_iter().collect()\n-}\n-\n-fn push_region_constraints<'tcx>(ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-    let mut regions = smallvec![];\n-    ty.push_regions(&mut regions);\n-    out.extend(regions.iter().filter(|&r| !r.is_late_bound()).map(|r| Component::Region(r)));\n }"}, {"sha": "acbfdbafa17e804a508256cf7c9dd74892079810", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=26199f0cbc947a09d21044aacaa1ae12af465e65", "patch": "@@ -25,7 +25,6 @@ use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_target::spec::abi;\n-use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::marker::PhantomData;\n@@ -2152,31 +2151,6 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Pushes onto `out` the regions directly referenced from this type (but not\n-    /// types reachable from this type via `walk_tys`). This ignores late-bound\n-    /// regions binders.\n-    pub fn push_regions(&self, out: &mut SmallVec<[ty::Region<'tcx>; 4]>) {\n-        match self.kind {\n-            Ref(region, _, _) => {\n-                out.push(region);\n-            }\n-            Dynamic(ref obj, region) => {\n-                out.push(region);\n-                if let Some(principal) = obj.principal() {\n-                    out.extend(principal.skip_binder().substs.regions());\n-                }\n-            }\n-            Adt(_, substs) | Opaque(_, substs) => out.extend(substs.regions()),\n-            Closure(_, ref substs) | Generator(_, ref substs, _) => out.extend(substs.regions()),\n-            Projection(ref data) | UnnormalizedProjection(ref data) => {\n-                out.extend(data.substs.regions())\n-            }\n-            FnDef(..) | FnPtr(_) | GeneratorWitness(..) | Bool | Char | Int(_) | Uint(_)\n-            | Float(_) | Str | Array(..) | Slice(_) | RawPtr(_) | Never | Tuple(..)\n-            | Foreign(..) | Param(_) | Bound(..) | Placeholder(..) | Infer(_) | Error => {}\n-        }\n-    }\n-\n     /// When we create a closure, we record its kind (i.e., what trait\n     /// it implements) into its `ClosureSubsts` using a type\n     /// parameter. This is kind of a phantom type, except that the"}, {"sha": "5dfede37b58dc2cfdbafec9a1d112e61fc696385", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26199f0cbc947a09d21044aacaa1ae12af465e65/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=26199f0cbc947a09d21044aacaa1ae12af465e65", "patch": "@@ -57,16 +57,15 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-pub fn walk_shallow(parent: GenericArg<'tcx>) -> impl Iterator<Item = Ty<'tcx>> {\n-    let mut stack = SmallVec::new();\n-    push_inner(&mut stack, parent);\n-    stack.into_iter().filter_map(|child| {\n-        // FIXME(eddyb) remove this filter and expose all `GenericArg`s.\n-        match child.unpack() {\n-            GenericArgKind::Type(ty) => Some(ty),\n-            GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => None,\n-        }\n-    })\n+impl GenericArg<'tcx> {\n+    /// Iterator that walks the immediate children of `self`. Hence\n+    /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n+    /// (but not `i32`, like `walk`).\n+    pub fn walk_shallow(self) -> impl Iterator<Item = GenericArg<'tcx>> {\n+        let mut stack = SmallVec::new();\n+        push_inner(&mut stack, self);\n+        stack.into_iter()\n+    }\n }\n \n // We push `GenericArg`s on the stack in reverse order so as to"}]}