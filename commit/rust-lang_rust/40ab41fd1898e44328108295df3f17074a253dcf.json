{"sha": "40ab41fd1898e44328108295df3f17074a253dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWI0MWZkMTg5OGU0NDMyODEwODI5NWRmM2YxNzA3NGEyNTNkY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T23:03:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T23:20:37Z"}, "message": "add pattern type ascriptions for tuple/brace structs/enums", "tree": {"sha": "75d251206feaf01a9145f992899c6788af439920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d251206feaf01a9145f992899c6788af439920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ab41fd1898e44328108295df3f17074a253dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ab41fd1898e44328108295df3f17074a253dcf", "html_url": "https://github.com/rust-lang/rust/commit/40ab41fd1898e44328108295df3f17074a253dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ab41fd1898e44328108295df3f17074a253dcf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a609384561944c24b076dcecbcd84adb0243c0fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a609384561944c24b076dcecbcd84adb0243c0fb", "html_url": "https://github.com/rust-lang/rust/commit/a609384561944c24b076dcecbcd84adb0243c0fb"}], "stats": {"total": 254, "additions": 246, "deletions": 8}, "files": [{"sha": "c2a7172d54cca22cf2a105366bf4d27a510d2c67", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -1307,6 +1307,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     ) {\n         for ascription in ascriptions {\n             let source_info = self.source_info(ascription.span);\n+\n+            debug!(\n+                \"adding user ascription at span {:?} of place {:?} and {:?}\",\n+                source_info.span,\n+                ascription.source,\n+                ascription.user_ty,\n+            );\n+\n             self.cfg.push(\n                 block,\n                 Statement {"}, {"sha": "04090e5087ffc47c21a579d03e231bc195909447", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -18,6 +18,8 @@ pub(crate) use self::check_match::check_match;\n \n use const_eval::{const_field, const_variant_index};\n \n+use hair::util::UserAnnotatedTyHelpers;\n+\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, CanonicalTy, TyCtxt, AdtDef, Ty, Region};\n@@ -529,8 +531,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                        field: Field::new(i),\n                                        pattern: self.lower_pattern(field),\n                                    })\n-                                   .collect();\n-                self.lower_variant_or_leaf(def, pat.span, ty, subpatterns)\n+                    .collect();\n+\n+                self.lower_variant_or_leaf(def, pat.hir_id, pat.span, ty, subpatterns)\n             }\n \n             PatKind::Struct(ref qpath, ref fields, _) => {\n@@ -546,7 +549,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                           })\n                           .collect();\n \n-                self.lower_variant_or_leaf(def, pat.span, ty, subpatterns)\n+                self.lower_variant_or_leaf(def, pat.hir_id, pat.span, ty, subpatterns)\n             }\n         };\n \n@@ -637,12 +640,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn lower_variant_or_leaf(\n         &mut self,\n         def: Def,\n+        hir_id: hir::HirId,\n         span: Span,\n         ty: Ty<'tcx>,\n-        subpatterns: Vec<FieldPattern<'tcx>>)\n-        -> PatternKind<'tcx>\n-    {\n-        match def {\n+        subpatterns: Vec<FieldPattern<'tcx>>,\n+    ) -> PatternKind<'tcx> {\n+        let mut kind = match def {\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 let enum_id = self.tcx.parent_def_id(variant_id).unwrap();\n                 let adt_def = self.tcx.adt_def(enum_id);\n@@ -675,7 +678,24 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 self.errors.push(PatternError::NonConstPath(span));\n                 PatternKind::Wild\n             }\n+        };\n+\n+        if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n+            let subpattern = Pattern {\n+                span,\n+                ty,\n+                kind: Box::new(kind),\n+            };\n+\n+            debug!(\"pattern user_ty = {:?} for pattern at {:?}\", user_ty, span);\n+\n+            kind = PatternKind::AscribeUserType {\n+                subpattern,\n+                user_ty,\n+            };\n         }\n+\n+        kind\n     }\n \n     /// Takes a HIR Path. If the path is a constant, evaluates it and feeds\n@@ -729,7 +749,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     },\n                 }\n             }\n-            _ => self.lower_variant_or_leaf(def, span, ty, vec![]),\n+            _ => self.lower_variant_or_leaf(def, id, span, ty, vec![]),\n         };\n \n         Pattern {\n@@ -894,6 +914,17 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n }\n \n+impl UserAnnotatedTyHelpers<'tcx, 'tcx> for PatternContext<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx> {\n+        self.tables\n+    }\n+}\n+\n+\n pub trait PatternFoldable<'tcx> : Sized {\n     fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.super_fold_with(folder)"}, {"sha": "52ed279b853935466f78e6760b6508d5b81c4970", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -2164,6 +2164,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// occurred**, so that annotations like `Vec<_>` are preserved\n     /// properly.\n     pub fn write_user_substs_from_substs(&self, hir_id: hir::HirId, substs: &'tcx Substs<'tcx>) {\n+        debug!(\n+            \"write_user_substs_from_substs({:?}, {:?}) in fcx {}\",\n+            hir_id,\n+            substs,\n+            self.tag(),\n+        );\n+\n         if !substs.is_noop() {\n             let user_substs = self.infcx.canonicalize_response(&substs);\n             debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);"}, {"sha": "526134b6e4b3c2ae22e26744a8a501e0cefa3e09", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,24 @@\n+#![feature(nll)]\n+\n+enum Foo<'a> {\n+    Bar { field: &'a u32 }\n+}\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo::Bar { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::Bar::<'static> { field: _z } = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo::Bar { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::Bar::<'static> { field: _z } => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "5dbbf7c5b4811d388413e20b7b4d06bb74312bb7", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:9:33\n+   |\n+LL |     let foo = Foo::Bar { field: &y };\n+   |                                 ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:16:33\n+   |\n+LL |     let foo = Foo::Bar { field: &y };\n+   |                                 ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "1c92858eb3a08cd9d8c1c5c58f4a60129de7b5ae", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,22 @@\n+#![feature(nll)]\n+\n+struct Foo<'a> { field: &'a u32 }\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::<'static> { field: _z } = foo;\n+}\n+\n+fn in_main() {\n+    let y = 22;\n+    let foo = Foo { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::<'static> { field: _z } => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0108a185b1f3ea9b20eec34a01f0acf347229b6e", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_struct.rs:7:28\n+   |\n+LL |     let foo = Foo { field: &y };\n+   |                            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_struct.rs:14:28\n+   |\n+LL |     let foo = Foo { field: &y };\n+   |                            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d6c364f8e3f0c83afc4b14f08ceb155aac72e591", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,24 @@\n+#![feature(nll)]\n+\n+enum Foo<'a> {\n+    Bar(&'a u32)\n+}\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo::Bar(&y);\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::Bar::<'static>(_z) = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo::Bar(&y);\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::Bar::<'static>(_z) => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "b18fdc30ac2d62a551e07da0ea56db657b82bac4", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:9:24\n+   |\n+LL |     let foo = Foo::Bar(&y);\n+   |                        ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:16:24\n+   |\n+LL |     let foo = Foo::Bar(&y);\n+   |                        ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "626ca908797876dfb9a1bd067f45f4b28df4aafe", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,22 @@\n+#![feature(nll)]\n+\n+struct Foo<'a>(&'a u32);\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo(&y);\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::<'static>(_z) = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo(&y);\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::<'static>(_z) => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "b72fda955801c65068486cdc645b5a163a4bb1c4", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ab41fd1898e44328108295df3f17074a253dcf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr?ref=40ab41fd1898e44328108295df3f17074a253dcf", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:7:19\n+   |\n+LL |     let foo = Foo(&y);\n+   |                   ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:14:19\n+   |\n+LL |     let foo = Foo(&y);\n+   |                   ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}