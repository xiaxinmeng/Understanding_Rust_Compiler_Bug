{"sha": "fb65d7563c93509c343a98e5cccf8e5ab4506924", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNjVkNzU2M2M5MzUwOWMzNDNhOThlNWNjY2Y4ZTVhYjQ1MDY5MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-09T22:05:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-09T22:05:18Z"}, "message": "Auto merge of #52788 - LukasKalbertodt:improve-index-mut-error, r=estebank\n\nAdd help message for missing `IndexMut` impl\n\nCode:\n```rust\nlet mut map = HashMap::new();\nmap.insert(\"peter\", 23);\nmap[\"peter\"] = 27;\n```\n\nBefore:\n```\nerror[E0594]: cannot assign to immutable indexed content\n --> src/main.rs:7:5\n  |\n7 |     map[\"peter\"] = 27;\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n```\n\nWith this change (just the `help` was added):\n```\nerror[E0594]: cannot assign to immutable indexed content\n --> index-error.rs:7:5\n  |\n7 |     map[\"peter\"] = 27;\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n  |\n  = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for std::collections::HashMap<&str, i32>\n```\n\n---\n\nYesterday I did some pair programming with a Rust-beginner. We created a type and implemented `Index` for it. Trying to modify the value returned by the index operation returns in a rather vague error that was not very clear for the Rust beginner. So I tried to improve the situation.\n\n## Notes/questions for reviewers:\n- Is the formulation OK like that? I'm fine with changing it.\n- Can we be absolutely sure that `IndexMut` is actually not implemented in the case my `help` message is added? I'm fairly sure myself, but there could be some cases I didn't think of. Also, I don't know the compiler very well, so I don't know what exactly certain enum variants are used for.\n  - It would be nice to test if `IndexMut` is in fact not implemented for the type, but I couldn't figure out how to check that. If you think that additional check would be beneficial, could you tell me how to check if a trait is implemented?\n- Do you think I should change the error message instead of only adding an additional help message?", "tree": {"sha": "2694839888f65ed4f411cd8701def0275c2ca280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2694839888f65ed4f411cd8701def0275c2ca280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb65d7563c93509c343a98e5cccf8e5ab4506924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb65d7563c93509c343a98e5cccf8e5ab4506924", "html_url": "https://github.com/rust-lang/rust/commit/fb65d7563c93509c343a98e5cccf8e5ab4506924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb65d7563c93509c343a98e5cccf8e5ab4506924/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8958ed672298148841b3b8d6371ce301e1cbbac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8958ed672298148841b3b8d6371ce301e1cbbac1", "html_url": "https://github.com/rust-lang/rust/commit/8958ed672298148841b3b8d6371ce301e1cbbac1"}, {"sha": "24abef3689840ec2ad0bb6ccdbc7cbcfb3844a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/24abef3689840ec2ad0bb6ccdbc7cbcfb3844a82", "html_url": "https://github.com/rust-lang/rust/commit/24abef3689840ec2ad0bb6ccdbc7cbcfb3844a82"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "a97fc666e25a66bb797dea8dcf0291ba67d28051", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fb65d7563c93509c343a98e5cccf8e5ab4506924", "patch": "@@ -898,6 +898,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 }\n                             }\n                         }\n+\n                         db\n                     }\n                     BorrowViolation(euv::ClosureCapture(_)) => {\n@@ -918,6 +919,28 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     }\n                 };\n \n+                // We add a special note about `IndexMut`, if the source of this error\n+                // is the fact that `Index` is implemented, but `IndexMut` is not. Needing\n+                // to implement two traits for \"one operator\" is not very intuitive for\n+                // many programmers.\n+                if err.cmt.note == mc::NoteIndex {\n+                    let node_id = self.tcx.hir.hir_to_node_id(err.cmt.hir_id);\n+                    let node =  self.tcx.hir.get(node_id);\n+\n+                    // This pattern probably always matches.\n+                    if let hir_map::NodeExpr(\n+                        hir::Expr { node: hir::ExprKind::Index(lhs, _), ..}\n+                    ) = node {\n+                        let ty = self.tables.expr_ty(lhs);\n+\n+                        db.help(&format!(\n+                            \"trait `IndexMut` is required to modify indexed content, but \\\n+                             it is not implemented for `{}`\",\n+                            ty\n+                        ));\n+                    }\n+                }\n+\n                 self.note_and_explain_mutbl_error(&mut db, &err, &error_span);\n                 self.note_immutability_blame(\n                     &mut db,"}, {"sha": "cc058f1fde5da7cc549b5612a6f0c1ff03367453", "filename": "src/test/ui/borrowck/index-mut-help.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.nll.stderr?ref=fb65d7563c93509c343a98e5cccf8e5ab4506924", "patch": "@@ -0,0 +1,22 @@\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/index-mut-help.rs:21:5\n+   |\n+LL |     map[\"peter\"].clear();           //~ ERROR\n+   |     ^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to data in a `&` reference\n+  --> $DIR/index-mut-help.rs:22:5\n+   |\n+LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+   |     ^^^^^^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/index-mut-help.rs:23:13\n+   |\n+LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+   |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "a4df0ced2f292b856333c7a8a2aeda3d0ef893e9", "filename": "src/test/ui/borrowck/index-mut-help.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.rs?ref=fb65d7563c93509c343a98e5cccf8e5ab4506924", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When mutably indexing a type that implements `Index` but not `IndexMut`, a\n+// special 'help' message is added to the output.\n+\n+\n+fn main() {\n+    use std::collections::HashMap;\n+\n+    let mut map = HashMap::new();\n+    map.insert(\"peter\", \"23\".to_string());\n+\n+    map[\"peter\"].clear();           //~ ERROR\n+    map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+    let _ = &mut map[\"peter\"];      //~ ERROR\n+}"}, {"sha": "b8b35ed3ed30ae4f9aaeb964a0629d29f01d382a", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=fb65d7563c93509c343a98e5cccf8e5ab4506924", "patch": "@@ -0,0 +1,28 @@\n+error[E0596]: cannot borrow immutable indexed content as mutable\n+  --> $DIR/index-mut-help.rs:21:5\n+   |\n+LL |     map[\"peter\"].clear();           //~ ERROR\n+   |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+\n+error[E0594]: cannot assign to immutable indexed content\n+  --> $DIR/index-mut-help.rs:22:5\n+   |\n+LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+\n+error[E0596]: cannot borrow immutable indexed content as mutable\n+  --> $DIR/index-mut-help.rs:23:18\n+   |\n+LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+   |                  ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "c79196e014042c7ad38e7f416642efe2c0badcd4", "filename": "src/test/ui/issue-41726.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fissue-41726.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb65d7563c93509c343a98e5cccf8e5ab4506924/src%2Ftest%2Fui%2Fissue-41726.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41726.stderr?ref=fb65d7563c93509c343a98e5cccf8e5ab4506924", "patch": "@@ -3,6 +3,8 @@ error[E0596]: cannot borrow immutable indexed content as mutable\n    |\n LL |         things[src.as_str()].sort(); //~ ERROR cannot borrow immutable\n    |         ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>`\n \n error: aborting due to previous error\n "}]}