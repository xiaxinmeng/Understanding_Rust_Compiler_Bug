{"sha": "ff7ea7c30843e576be6ab3fb70f79d8053006652", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmN2VhN2MzMDg0M2U1NzZiZTZhYjNmYjcwZjc5ZDgwNTMwMDY2NTI=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:26:58Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:27:57Z"}, "message": "use generate_impl_text in generate_from_impl", "tree": {"sha": "0e284b6b5a860f35e211d43ca3315959ac99fe7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e284b6b5a860f35e211d43ca3315959ac99fe7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff7ea7c30843e576be6ab3fb70f79d8053006652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7ea7c30843e576be6ab3fb70f79d8053006652", "html_url": "https://github.com/rust-lang/rust/commit/ff7ea7c30843e576be6ab3fb70f79d8053006652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff7ea7c30843e576be6ab3fb70f79d8053006652/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fdc556632e39145678219ace8476e12d7d70d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdc556632e39145678219ace8476e12d7d70d41", "html_url": "https://github.com/rust-lang/rust/commit/3fdc556632e39145678219ace8476e12d7d70d41"}], "stats": {"total": 75, "additions": 30, "deletions": 45}, "files": [{"sha": "fac2447c9aa77ce3ee0f6c3086686f8b542cfff1", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 16, "deletions": 45, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ff7ea7c30843e576be6ab3fb70f79d8053006652/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7ea7c30843e576be6ab3fb70f79d8053006652/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=ff7ea7c30843e576be6ab3fb70f79d8053006652", "patch": "@@ -1,15 +1,9 @@\n-use ast::GenericParamsOwner;\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n-use itertools::Itertools;\n-use stdx::format_to;\n-use syntax::{\n-    ast::{self, AstNode, NameOwner},\n-    SmolStr,\n-};\n+use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, utils::generate_trait_impl_text};\n \n // Assist: generate_from_impl_for_enum\n //\n@@ -31,8 +25,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n-    let enum_name = variant.parent_enum().name()?;\n-    let enum_type_params = variant.parent_enum().generic_param_list();\n+    let enum_ = ast::Adt::Enum(variant.parent_enum());\n     let (field_name, field_type) = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             if field_list.fields().count() != 1 {\n@@ -62,49 +55,27 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n         target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n-            let mut buf = String::from(\"\\n\\nimpl\");\n-            if let Some(type_params) = &enum_type_params {\n-                format_to!(buf, \"{}\", type_params.syntax());\n-            }\n-            format_to!(buf, \" From<{}> for {}\", field_type.syntax(), enum_name);\n-            if let Some(type_params) = enum_type_params {\n-                let lifetime_params = type_params\n-                    .lifetime_params()\n-                    .filter_map(|it| it.lifetime())\n-                    .map(|it| SmolStr::from(it.text()));\n-                let type_params = type_params\n-                    .type_params()\n-                    .filter_map(|it| it.name())\n-                    .map(|it| SmolStr::from(it.text()));\n-\n-                let generic_params = lifetime_params.chain(type_params).format(\", \");\n-                format_to!(buf, \"<{}>\", generic_params)\n-            }\n-            if let Some(name) = field_name {\n-                format_to!(\n-                    buf,\n-                    r#\" {{\n-    fn from({0}: {1}) -> Self {{\n+            let from_trait = format!(\"From<{}>\", field_type.syntax());\n+            let impl_code = if let Some(name) = field_name {\n+                format!(\n+                    r#\"    fn from({0}: {1}) -> Self {{\n         Self::{2} {{ {0} }}\n-    }}\n-}}\"#,\n+    }}\"#,\n                     name.text(),\n                     field_type.syntax(),\n                     variant_name,\n-                );\n+                )\n             } else {\n-                format_to!(\n-                    buf,\n-                    r#\" {{\n-    fn from(v: {}) -> Self {{\n+                format!(\n+                    r#\"    fn from(v: {}) -> Self {{\n         Self::{}(v)\n-    }}\n-}}\"#,\n+    }}\"#,\n                     field_type.syntax(),\n                     variant_name,\n-                );\n-            }\n-            edit.insert(start_offset, buf);\n+                )\n+            };\n+            let from_impl = generate_trait_impl_text(&enum_, &from_trait, &impl_code);\n+            edit.insert(start_offset, from_impl);\n         },\n     )\n }"}, {"sha": "69c107f63182f51a002fb45bc778752ff3934ca4", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff7ea7c30843e576be6ab3fb70f79d8053006652/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7ea7c30843e576be6ab3fb70f79d8053006652/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=ff7ea7c30843e576be6ab3fb70f79d8053006652", "patch": "@@ -367,13 +367,27 @@ pub(crate) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Opti\n // Generates the surrounding `impl Type { <code> }` including type and lifetime\n // parameters\n pub(crate) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {\n+    generate_impl_text_inner(adt, None, code)\n+}\n+\n+// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+// and lifetime parameters\n+pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &str) -> String {\n+    generate_impl_text_inner(adt, Some(trait_text), code)\n+}\n+\n+fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n     let type_params = adt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n     buf.push_str(\"\\n\\nimpl\");\n     if let Some(type_params) = &type_params {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }\n     buf.push(' ');\n+    if let Some(trait_text) = trait_text {\n+        buf.push_str(trait_text);\n+        buf.push_str(\" for \");\n+    }\n     buf.push_str(adt.name().unwrap().text());\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params"}]}