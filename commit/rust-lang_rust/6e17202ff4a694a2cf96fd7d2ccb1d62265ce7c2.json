{"sha": "6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMTcyMDJmZjRhNjk0YTJjZjk2ZmQ3ZDJjY2IxZDYyMjY1Y2U3YzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T09:41:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T21:50:06Z"}, "message": "core::rt: Add `next_test_ip4` for generating test addresses", "tree": {"sha": "a51ff45464e0d8b8ed8a3ffaa8a6b9e0e42b8790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51ff45464e0d8b8ed8a3ffaa8a6b9e0e42b8790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "html_url": "https://github.com/rust-lang/rust/commit/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11c032f36658667bb08382cc409455b0a1d0a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11c032f36658667bb08382cc409455b0a1d0a61", "html_url": "https://github.com/rust-lang/rust/commit/a11c032f36658667bb08382cc409455b0a1d0a61"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "585d43a3ade8ba785b5bc088db56762ee721208a", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use super::io::net::ip::{IpAddr, Ipv4};\n+\n // For setting up tests of the new scheduler\n pub fn run_in_newsched_task(f: ~fn()) {\n     use cell::Cell;\n@@ -53,3 +55,8 @@ pub fn next_test_port() -> u16 {\n         fn rust_dbg_next_port() -> ::libc::uintptr_t;\n     }\n }\n+\n+/// Get a unique localhost:port pair starting at 9600\n+pub fn next_test_ip4() -> IpAddr {\n+    Ipv4(127, 0, 0, 1, next_test_port())\n+}"}, {"sha": "860c988b9c9907a61e781a54b7e1bd3132ca4e68", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "patch": "@@ -22,7 +22,7 @@ use super::super::io::net::ip::{IpAddr, Ipv4, Ipv6};\n #[cfg(test)] use cell::Cell;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use super::super::thread::Thread;\n-#[cfg(test)] use super::super::test::next_test_port;\n+#[cfg(test)] use super::super::test::*;\n \n fn ip4_as_uv_ip4(addr: IpAddr, f: &fn(*sockaddr_in)) {\n     match addr {\n@@ -359,7 +359,7 @@ fn connect_close() {\n         let mut loop_ = Loop::new();\n         let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n         // Connect to a port where nobody is listening\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n         do tcp_watcher.connect(addr) |stream_watcher, status| {\n             rtdebug!(\"tcp_watcher.connect!\");\n             assert!(status.is_some());\n@@ -377,7 +377,7 @@ fn listen() {\n         static MAX: int = 10;\n         let mut loop_ = Loop::new();\n         let mut server_tcp_watcher = { TcpWatcher::new(&mut loop_) };\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n         server_tcp_watcher.bind(addr);\n         let loop_ = loop_;\n         rtdebug!(\"listening\");"}, {"sha": "92439a41b342b3ad4b3bc19bc8b15334598c7420", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=6e17202ff4a694a2cf96fd7d2ccb1d62265ce7c2", "patch": "@@ -338,7 +338,7 @@ impl Stream for UvStream {\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n         let io = unsafe { local_sched::unsafe_borrow_io() };\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n         let maybe_chan = io.connect(addr);\n         assert!(maybe_chan.is_none());\n     }\n@@ -347,7 +347,7 @@ fn test_simple_io_no_connect() {\n #[test]\n fn test_simple_tcp_server_and_client() {\n     do run_in_newsched_task {\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n \n         // Start the server first so it's listening when we connect\n         do spawn_immediately {\n@@ -381,7 +381,7 @@ fn test_simple_tcp_server_and_client() {\n #[test] #[ignore(reason = \"busted\")]\n fn test_read_and_block() {\n     do run_in_newsched_task {\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n \n         do spawn_immediately {\n             let io = unsafe { local_sched::unsafe_borrow_io() };\n@@ -437,7 +437,7 @@ fn test_read_and_block() {\n #[test]\n fn test_read_read_read() {\n     do run_in_newsched_task {\n-        let addr = Ipv4(127, 0, 0, 1, next_test_port());\n+        let addr = next_test_ip4();\n         static MAX: uint = 5000000;\n         \n         do spawn_immediately {"}]}