{"sha": "b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZGRjYjA2NTJmM2VjODY4MzAyM2FmYzFlMWY1MTY2ZDZhNzEyZjQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-18T12:53:02Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-18T14:03:08Z"}, "message": "Run cargo +nightly fix --clippy -Z unstable-options", "tree": {"sha": "ea95a1e2083280d84e99f274e5b2b8b269545297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea95a1e2083280d84e99f274e5b2b8b269545297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "html_url": "https://github.com/rust-lang/rust/commit/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab80cd961919b9321e1d34343ae3f3adb0502e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab80cd961919b9321e1d34343ae3f3adb0502e5", "html_url": "https://github.com/rust-lang/rust/commit/eab80cd961919b9321e1d34343ae3f3adb0502e5"}], "stats": {"total": 281, "additions": 132, "deletions": 149}, "files": [{"sha": "4d3a72c1861862e7b74b5cb675ef116ed9de5bde", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n     let trait_token =\n         ctx.token_at_offset().filter(|t| t.kind() == IDENT && *t.text() != attr_name).next()?;\n \n-    let annotated = attr.syntax().siblings(Direction::Next).find_map(|s| ast::Name::cast(s))?;\n+    let annotated = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n     let annotated_name = annotated.syntax().text().to_string();\n     let start_offset = annotated.syntax().parent()?.text_range().end();\n \n@@ -62,7 +62,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n             .filter_map(|t| t.into_token().map(|t| t.text().clone()))\n             .filter(|t| t != trait_token.text())\n             .collect::<Vec<SmolStr>>();\n-        let has_more_derives = new_attr_input.len() > 0;\n+        let has_more_derives = !new_attr_input.is_empty();\n         let new_attr_input =\n             join(new_attr_input.iter()).separator(\", \").surround_with(\"(\", \")\").to_string();\n         let new_attr_input_len = new_attr_input.len();"}, {"sha": "dd070e8ec0385dac2517c7aedee17f5c04678584", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n         }\n \n         let vis = strukt.visibility().map(|v| format!(\"{} \", v.syntax()));\n-        let vis = vis.as_ref().map(String::as_str).unwrap_or(\"\");\n+        let vis = vis.as_deref().unwrap_or(\"\");\n         write!(&mut buf, \"    {}fn new(\", vis).unwrap();\n \n         join(field_list.fields().filter_map(|f| {"}, {"sha": "0a0a88f3dcff2e773b2beeec4b71eb0bf8128110", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n \n         edit.target(if_expr.syntax().text_range());\n         edit.set_cursor(if_expr.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr.into());\n+        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n     })\n }\n "}, {"sha": "a0e7fe17e8ea095ebb1fc60e4b28b4699731a798", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -38,8 +38,8 @@ pub struct GroupLabel(pub String);\n impl AssistLabel {\n     pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n-        assert!(label.chars().nth(0).unwrap().is_uppercase());\n-        AssistLabel { label: label.into(), id }\n+        assert!(label.chars().next().unwrap().is_uppercase());\n+        AssistLabel { label, id }\n     }\n }\n "}, {"sha": "0246adfb5213dbc0ce6954e8ffe17df3f6ec8801", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -234,7 +234,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         let child = map_rust_child_diagnostic(&child, workspace_root);\n         match child {\n             MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n-            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action.into()),\n+            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n             MappedRustChildDiagnostic::MessageLine(message_line) => {\n                 write!(&mut message, \"\\n{}\", message_line).unwrap();\n "}, {"sha": "78d121683bb74f455c3cc13360fa0bc27c6a5d9c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -249,7 +249,7 @@ impl FromStr for Edition {\n         let res = match s {\n             \"2015\" => Edition::Edition2015,\n             \"2018\" => Edition::Edition2018,\n-            _ => Err(ParseEditionError { invalid_input: s.to_string() })?,\n+            _ => return Err(ParseEditionError { invalid_input: s.to_string() }),\n         };\n         Ok(res)\n     }"}, {"sha": "fe9149c9d80ae8fbfb24f2e8d30a64025a18bb0c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -283,7 +283,7 @@ impl StructField {\n         };\n         let substs = Substs::type_params(db, generic_def_id);\n         let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n-        Type::new(db, self.parent.module(db).id.krate.into(), var_id, ty)\n+        Type::new(db, self.parent.module(db).id.krate, var_id, ty)\n     }\n \n     pub fn parent_def(&self, _db: &impl HirDatabase) -> VariantDef {\n@@ -315,11 +315,11 @@ impl Struct {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {\n-        db.struct_data(self.id.into()).name.clone()\n+        db.struct_data(self.id).name.clone()\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        db.struct_data(self.id.into())\n+        db.struct_data(self.id)\n             .variant_data\n             .fields()\n             .iter()\n@@ -332,7 +332,7 @@ impl Struct {\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self.id.into()).variant_data.clone()\n+        db.struct_data(self.id).variant_data.clone()\n     }\n }\n \n@@ -1049,7 +1049,7 @@ impl Type {\n         // FIXME check that?\n         let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n         let environment = self.ty.environment.clone();\n-        let ty = InEnvironment { value: canonical, environment: environment.clone() };\n+        let ty = InEnvironment { value: canonical, environment };\n         autoderef(db, Some(self.krate), ty)\n             .map(|canonical| canonical.value)\n             .map(move |ty| self.derived(ty))"}, {"sha": "efa3f8a79cb2535e2201d41e07c2025bcd68a47a", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -361,9 +361,8 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<Expansion> {\n-        let macro_call_id = macro_call.as_call_id(db, |path| {\n-            self.resolver.resolve_path_as_macro(db, &path).map(|it| it.into())\n-        })?;\n+        let macro_call_id =\n+            macro_call.as_call_id(db, |path| self.resolver.resolve_path_as_macro(db, &path))?;\n         Some(Expansion { macro_call_id })\n     }\n }"}, {"sha": "b1626fa1160d086ad635d270fbee705455700fd6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -448,7 +448,7 @@ where\n             // FIXME expand to statements in statement position\n             ast::Expr::MacroCall(e) => {\n                 let macro_call = self.expander.to_source(AstPtr::new(&e));\n-                match self.expander.enter_expand(self.db, e.clone()) {\n+                match self.expander.enter_expand(self.db, e) {\n                     Some((mark, expansion)) => {\n                         self.source_map\n                             .expansions"}, {"sha": "e07a4f947b1ace25565662b3a5a21fda5801c062", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -71,7 +71,7 @@ impl GenericParams {\n         db: &impl DefDatabase,\n         def: GenericDefId,\n     ) -> Arc<GenericParams> {\n-        let (params, _source_map) = GenericParams::new(db, def.into());\n+        let (params, _source_map) = GenericParams::new(db, def);\n         Arc::new(params)\n     }\n "}, {"sha": "f8dc06d1065e6c2717b421a10409b05c3c2ae56e", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -138,7 +138,7 @@ impl ItemScope {\n \n     pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n         let mut changed = false;\n-        let existing = self.visible.entry(name.clone()).or_default();\n+        let existing = self.visible.entry(name).or_default();\n \n         if existing.types.is_none() && def.types.is_some() {\n             existing.types = def.types;"}, {"sha": "c5137a0abcfdb90499b8b510bbf722d60198e564", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -156,7 +156,7 @@ impl ModuleOrigin {\n             ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n                 let file_id = *definition;\n                 let sf = db.parse(file_id).tree();\n-                return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n+                InFile::new(file_id.into(), ModuleSource::SourceFile(sf))\n             }\n             ModuleOrigin::Inline { definition } => {\n                 InFile::new(definition.file_id, ModuleSource::Module(definition.to_node(db)))"}, {"sha": "0e8c9da763cfa7838a3493c2f13e1b621910d056", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -357,9 +357,7 @@ impl RawItemsCollector {\n             let visibility =\n                 RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n             let alias = extern_crate.alias().map(|a| {\n-                a.name()\n-                    .map(|it| it.as_name())\n-                    .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+                a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n             });\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr"}, {"sha": "83f429c291139ec624ad3bf23c59de6eaa11fd41", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -116,7 +116,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.resolutions().collect::<Vec<_>>().len(), 1);\n+            assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n@@ -126,7 +126,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.resolutions().collect::<Vec<_>>().len(), 1);\n+            assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }"}, {"sha": "b6d1125e20ebe1835bc624047bdfcc095c5433bc", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -32,9 +32,7 @@ pub(crate) fn lower_use_tree(\n         }\n     } else {\n         let alias = tree.alias().map(|a| {\n-            a.name()\n-                .map(|it| it.as_name())\n-                .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+            a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n         let is_glob = tree.has_star();\n         if let Some(ast_path) = tree.path() {"}, {"sha": "5365b80e2181cecb2b48a92290a09d8baba3b84e", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -474,7 +474,7 @@ impl Scope {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_, Visibility::Public)));\n                 });\n                 m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n-                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def.into(), Visibility::Public)));\n+                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n                 });\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n@@ -499,10 +499,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(name![Self], ScopeDef::ImplSelfType((*i).into()));\n+                f(name![Self], ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n-                f(name![Self], ScopeDef::AdtSelfType((*i).into()));\n+                f(name![Self], ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(scope) => {\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {"}, {"sha": "d0e3eaf7e9bd76bca9d70f63654e418fca0df343", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -235,7 +235,7 @@ mod tests {\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(|it| ast::ModuleItem::cast(it)).collect();\n+            parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n "}, {"sha": "4adaa9b0783b0723d0a9d707313a246a148ea1b1", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -158,7 +158,7 @@ fn compile_error_expand(\n         match &tt.token_trees[0] {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => {\n                 let s = it.text.as_str();\n-                if s.contains(r#\"\"\"#) {\n+                if s.contains('\"') {\n                     return Ok(quote! { loop { #it }});\n                 }\n             }\n@@ -222,7 +222,7 @@ mod tests {\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let macro_calls: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(|it| ast::MacroCall::cast(it)).collect();\n+            parsed.syntax_node().descendants().filter_map(ast::MacroCall::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n "}, {"sha": "b54e00b688c45e3c7a8e30e026b8ea329deab5bf", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -259,8 +259,7 @@ mod tests {\n         // }\n         let struct_name = mk_ident(\"Foo\");\n         let fields = [mk_ident(\"name\"), mk_ident(\"id\")];\n-        let fields =\n-            fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone()).flatten();\n+        let fields = fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees).flatten();\n \n         let list = tt::Subtree {\n             delimiter: Some(tt::Delimiter {"}, {"sha": "76069eb9c22c48532ca3e4404e27d61055af46a2", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -225,14 +225,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,\n-            body: db.body(owner.into()),\n+            body: db.body(owner),\n             resolver,\n         }\n     }\n \n     fn resolve_all(mut self) -> InferenceResult {\n         // FIXME resolve obligations as well (use Guidance if necessary)\n-        let mut result = mem::replace(&mut self.result, InferenceResult::default());\n+        let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n             let resolved = self.table.resolve_ty_completely(mem::replace(ty, Ty::Unknown));\n             *ty = resolved;\n@@ -261,7 +261,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItemId) {\n-        self.result.assoc_resolutions.insert(id, item.into());\n+        self.result.assoc_resolutions.insert(id, item);\n     }\n \n     fn write_pat_ty(&mut self, pat: PatId, ty: Ty) {\n@@ -312,9 +312,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for obligation in obligations {\n             let in_env = InEnvironment::new(self.trait_env.clone(), obligation.clone());\n             let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n-            let solution = self\n-                .db\n-                .trait_solve(self.resolver.krate().unwrap().into(), canonicalized.value.clone());\n+            let solution =\n+                self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n \n             match solution {\n                 Some(Solution::Unique(substs)) => {"}, {"sha": "4a0eabdfc6ed8fdb8832c166f3341b5c61b20d8d", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -44,10 +44,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         resolver: &Resolver,\n     ) -> FxHashMap<(TypeCtor, TypeCtor), usize> {\n         let krate = resolver.krate().unwrap();\n-        let impls = match db.lang_item(krate.into(), \"coerce_unsized\".into()) {\n-            Some(LangItemTarget::TraitId(trait_)) => {\n-                db.impls_for_trait(krate.into(), trait_.into())\n-            }\n+        let impls = match db.lang_item(krate, \"coerce_unsized\".into()) {\n+            Some(LangItemTarget::TraitId(trait_)) => db.impls_for_trait(krate, trait_),\n             _ => return FxHashMap::default(),\n         };\n "}, {"sha": "0af94ae324ec596d0e048b747942ec9c413c52bf", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -127,10 +127,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n                     Substs(sig_tys.into()),\n                 );\n-                let closure_ty = Ty::apply_one(\n-                    TypeCtor::Closure { def: self.owner.into(), expr: tgt_expr },\n-                    sig_ty,\n-                );\n+                let closure_ty =\n+                    Ty::apply_one(TypeCtor::Closure { def: self.owner, expr: tgt_expr }, sig_ty);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to\n@@ -165,7 +163,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n-                let mut result_ty = if arms.len() == 0 {\n+                let mut result_ty = if arms.is_empty() {\n                     Ty::simple(TypeCtor::Never)\n                 } else {\n                     self.table.new_type_var()\n@@ -188,7 +186,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n-                let resolver = resolver_for_expr(self.db, self.owner.into(), tgt_expr);\n+                let resolver = resolver_for_expr(self.db, self.owner, tgt_expr);\n                 self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(Ty::Unknown)\n             }\n             Expr::Continue => Ty::simple(TypeCtor::Never),\n@@ -217,8 +215,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.unify(&ty, &expected.ty);\n \n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n-                let field_types =\n-                    def_id.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+                let field_types = def_id.map(|it| self.db.field_types(it)).unwrap_or_default();\n                 let variant_data = def_id.map(|it| variant_data(self.db, it));\n                 for (field_idx, field) in fields.iter().enumerate() {\n                     let field_def =\n@@ -264,7 +261,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             .and_then(|idx| a_ty.parameters.0.get(idx).cloned()),\n                         TypeCtor::Adt(AdtId::StructId(s)) => {\n                             self.db.struct_data(s).variant_data.field(name).map(|local_id| {\n-                                let field = StructFieldId { parent: s.into(), local_id }.into();\n+                                let field = StructFieldId { parent: s.into(), local_id };\n                                 self.write_field_resolution(tgt_expr, field);\n                                 self.db.field_types(s.into())[field.local_id]\n                                     .clone()\n@@ -700,10 +697,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             // construct a TraitDef\n                             let substs =\n                                 a_ty.parameters.prefix(generics(self.db, trait_.into()).len());\n-                            self.obligations.push(Obligation::Trait(TraitRef {\n-                                trait_: trait_.into(),\n-                                substs,\n-                            }));\n+                            self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }\n                     }\n                     CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {}"}, {"sha": "a495ecbfeb05667a7c4600446ea5c16c57667b9e", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -28,7 +28,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n-        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+        let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n \n         for (i, &subpat) in subpats.iter().enumerate() {\n             let expected_ty = var_data\n@@ -60,7 +60,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n-        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+        let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         for subpat in subpats {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n             let expected_ty ="}, {"sha": "471d603423dc8bd1dafdbc1c2d1661ef4586810e", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -104,8 +104,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n                 let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n-                let trait_ref =\n-                    TraitRef::from_resolved_path(&ctx, trait_.into(), resolved_segment, None);\n+                let trait_ref = TraitRef::from_resolved_path(&ctx, trait_, resolved_segment, None);\n                 self.resolve_trait_assoc_item(trait_ref, segment, id)\n             }\n             (def, _) => {\n@@ -144,30 +143,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         let trait_ = trait_ref.trait_;\n-        let item = self\n-            .db\n-            .trait_data(trait_)\n-            .items\n-            .iter()\n-            .map(|(_name, id)| (*id).into())\n-            .find_map(|item| match item {\n-                AssocItemId::FunctionId(func) => {\n-                    if segment.name == &self.db.function_data(func).name {\n-                        Some(AssocItemId::FunctionId(func))\n-                    } else {\n-                        None\n+        let item =\n+            self.db.trait_data(trait_).items.iter().map(|(_name, id)| (*id)).find_map(|item| {\n+                match item {\n+                    AssocItemId::FunctionId(func) => {\n+                        if segment.name == &self.db.function_data(func).name {\n+                            Some(AssocItemId::FunctionId(func))\n+                        } else {\n+                            None\n+                        }\n                     }\n-                }\n \n-                AssocItemId::ConstId(konst) => {\n-                    if self.db.const_data(konst).name.as_ref().map_or(false, |n| n == segment.name)\n-                    {\n-                        Some(AssocItemId::ConstId(konst))\n-                    } else {\n-                        None\n+                    AssocItemId::ConstId(konst) => {\n+                        if self\n+                            .db\n+                            .const_data(konst)\n+                            .name\n+                            .as_ref()\n+                            .map_or(false, |n| n == segment.name)\n+                        {\n+                            Some(AssocItemId::ConstId(konst))\n+                        } else {\n+                            None\n+                        }\n                     }\n+                    AssocItemId::TypeAliasId(_) => None,\n                 }\n-                AssocItemId::TypeAliasId(_) => None,\n             })?;\n         let def = match item {\n             AssocItemId::FunctionId(f) => ValueNs::FunctionId(f),\n@@ -233,7 +234,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     AssocContainerId::ContainerId(_) => None,\n                 };\n \n-                self.write_assoc_resolution(id, item.into());\n+                self.write_assoc_resolution(id, item);\n                 Some((def, substs))\n             },\n         )"}, {"sha": "302bb8aa2cc0c238c427b3ec3ecd6bd61501f9a2", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -167,7 +167,7 @@ impl TypeCtor {\n             | TypeCtor::Closure { .. } // 1 param representing the signature of the closure\n             => 1,\n             TypeCtor::Adt(adt) => {\n-                let generic_params = generics(db, AdtId::from(adt).into());\n+                let generic_params = generics(db, adt.into());\n                 generic_params.len()\n             }\n             TypeCtor::FnDef(callable) => {\n@@ -247,7 +247,7 @@ pub struct ProjectionTy {\n \n impl ProjectionTy {\n     pub fn trait_ref(&self, db: &impl HirDatabase) -> TraitRef {\n-        TraitRef { trait_: self.trait_(db).into(), substs: self.parameters.clone() }\n+        TraitRef { trait_: self.trait_(db), substs: self.parameters.clone() }\n     }\n \n     fn trait_(&self, db: &impl HirDatabase) -> TraitId {"}, {"sha": "52da34574cd95ecae76db08584979ba2fef9d223", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -361,10 +361,8 @@ impl Ty {\n         for t in traits {\n             if let Some(associated_ty) = ctx.db.trait_data(t).associated_type_by_name(&segment.name)\n             {\n-                let substs = Substs::build_for_def(ctx.db, t)\n-                    .push(self_ty.clone())\n-                    .fill_with_unknown()\n-                    .build();\n+                let substs =\n+                    Substs::build_for_def(ctx.db, t).push(self_ty).fill_with_unknown().build();\n                 // FIXME handle type parameters on the segment\n                 return Ty::Projection(ProjectionTy { associated_ty, parameters: substs });\n             }\n@@ -428,7 +426,7 @@ pub(super) fn substs_from_path_segment(\n     _add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n-    let def_generics = def_generic.map(|def| generics(ctx.db, def.into()));\n+    let def_generics = def_generic.map(|def| generics(ctx.db, def));\n \n     let (parent_params, self_params, type_params, impl_trait_params) =\n         def_generics.map_or((0, 0, 0, 0), |g| g.provenance_split());\n@@ -459,7 +457,7 @@ pub(super) fn substs_from_path_segment(\n \n     // handle defaults\n     if let Some(def_generic) = def_generic {\n-        let default_substs = ctx.db.generic_defaults(def_generic.into());\n+        let default_substs = ctx.db.generic_defaults(def_generic);\n         assert_eq!(substs.len(), default_substs.len());\n \n         for (i, default_ty) in default_substs.iter().enumerate() {\n@@ -483,7 +481,7 @@ impl TraitRef {\n             _ => return None,\n         };\n         let segment = path.segments().last().expect(\"path should have at least one segment\");\n-        Some(TraitRef::from_resolved_path(ctx, resolved.into(), segment, explicit_self_ty))\n+        Some(TraitRef::from_resolved_path(ctx, resolved, segment, explicit_self_ty))\n     }\n \n     pub(crate) fn from_resolved_path(\n@@ -728,7 +726,7 @@ pub(crate) fn generic_predicates_query(\n pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -> Substs {\n     let resolver = def.resolver(db);\n     let ctx = TyLoweringContext::new(db, &resolver);\n-    let generic_params = generics(db, def.into());\n+    let generic_params = generics(db, def);\n \n     let defaults = generic_params\n         .iter()\n@@ -792,7 +790,7 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n }\n \n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFnSig {\n-    let struct_data = db.struct_data(def.into());\n+    let struct_data = db.struct_data(def);\n     let fields = struct_data.variant_data.fields();\n     let resolver = def.resolver(db);\n     let ctx =\n@@ -805,7 +803,7 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFn\n \n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n-    let struct_data = db.struct_data(def.into());\n+    let struct_data = db.struct_data(def);\n     if let StructKind::Unit = struct_data.variant_data.kind() {\n         return type_for_adt(db, def.into());\n     }\n@@ -836,7 +834,7 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId)\n     }\n     let generics = generics(db, def.parent.into());\n     let substs = Substs::bound_vars(&generics);\n-    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(EnumVariantId::from(def).into()), substs))\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n fn type_for_adt(db: &impl HirDatabase, adt: AdtId) -> Binders<Ty> {\n@@ -964,6 +962,6 @@ pub(crate) fn impl_trait_query(\n     let target_trait = impl_data.target_trait.as_ref()?;\n     Some(Binders::new(\n         self_ty.num_binders,\n-        TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value.clone()))?,\n+        TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value))?,\n     ))\n }"}, {"sha": "964acdb0980c1bb224cfd793ee9fe83e21b010e4", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -214,7 +214,7 @@ pub fn iterate_method_candidates<T>(\n             // the methods by autoderef order of *receiver types*, not *self\n             // types*.\n \n-            let deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty.clone()).collect();\n+            let deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty).collect();\n             for i in 0..deref_chain.len() {\n                 if let Some(result) = iterate_method_candidates_with_autoref(\n                     &deref_chain[i..],\n@@ -290,7 +290,7 @@ fn iterate_method_candidates_with_autoref<T>(\n         &ref_muted,\n         deref_chain,\n         db,\n-        env.clone(),\n+        env,\n         krate,\n         &traits_in_scope,\n         name,\n@@ -391,17 +391,17 @@ fn iterate_trait_method_candidates<T>(\n         // iteration\n         let mut known_implemented = false;\n         for (_name, item) in data.items.iter() {\n-            if !is_valid_candidate(db, name, receiver_ty, (*item).into(), self_ty) {\n+            if !is_valid_candidate(db, name, receiver_ty, *item, self_ty) {\n                 continue;\n             }\n             if !known_implemented {\n                 let goal = generic_implements_goal(db, env.clone(), t, self_ty.clone());\n-                if db.trait_solve(krate.into(), goal).is_none() {\n+                if db.trait_solve(krate, goal).is_none() {\n                     continue 'traits;\n                 }\n             }\n             known_implemented = true;\n-            if let Some(result) = callback(&self_ty.value, (*item).into()) {\n+            if let Some(result) = callback(&self_ty.value, *item) {\n                 return Some(result);\n             }\n         }\n@@ -521,7 +521,7 @@ pub fn implements_trait(\n         return true;\n     }\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n-    let solution = db.trait_solve(krate.into(), goal);\n+    let solution = db.trait_solve(krate, goal);\n \n     solution.is_some()\n }"}, {"sha": "67120abf6f467db090a7736c6556153f27af45f3", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -98,7 +98,7 @@ fn closure_fn_trait_impl_datum(\n         // the existence of the Fn trait has been checked before\n         .expect(\"fn trait for closure impl missing\");\n \n-    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n+    let num_args: u16 = match &db.body(data.def)[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);\n@@ -118,7 +118,7 @@ fn closure_fn_trait_impl_datum(\n     let self_ty = Ty::apply_one(TypeCtor::Closure { def: data.def, expr: data.expr }, sig_ty);\n \n     let trait_ref = TraitRef {\n-        trait_: trait_.into(),\n+        trait_,\n         substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n     };\n \n@@ -139,7 +139,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n ) -> BuiltinImplAssocTyValueData {\n     let impl_ = Impl::ClosureFnTraitImpl(data.clone());\n \n-    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n+    let num_args: u16 = match &db.body(data.def)[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);"}, {"sha": "306909ec2358d23a1997361581ea8c62b890d702", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -565,10 +565,10 @@ where\n         // and will panic if the trait can't be resolved.\n         let mut result: Vec<_> = self\n             .db\n-            .impls_for_trait(self.krate, trait_.into())\n+            .impls_for_trait(self.krate, trait_)\n             .iter()\n             .copied()\n-            .map(|it| Impl::ImplBlock(it.into()))\n+            .map(Impl::ImplBlock)\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n@@ -586,7 +586,7 @@ where\n         false // FIXME\n     }\n     fn associated_ty_value(&self, id: AssociatedTyValueId) -> Arc<AssociatedTyValue> {\n-        self.db.associated_ty_value(self.krate.into(), id)\n+        self.db.associated_ty_value(self.krate, id)\n     }\n     fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<TypeFamily>> {\n         vec![]\n@@ -674,7 +674,7 @@ pub(crate) fn struct_datum_query(\n     let where_clauses = type_ctor\n         .as_generic_def()\n         .map(|generic_def| {\n-            let generic_params = generics(db, generic_def.into());\n+            let generic_params = generics(db, generic_def);\n             let bound_vars = Substs::bound_vars(&generic_params);\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n@@ -805,7 +805,7 @@ fn type_alias_associated_ty_value(\n     let ty = db.ty(type_alias.into());\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = chalk_rust_ir::AssociatedTyValue {\n-        impl_id: Impl::ImplBlock(impl_id.into()).to_chalk(db),\n+        impl_id: Impl::ImplBlock(impl_id).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, ty.num_binders),\n     };"}, {"sha": "7e9310005a331090f6d1a59a3d06b728fe2bb23f", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -44,7 +44,7 @@ impl fmt::Debug for AnalysisChange {\n         if !self.libraries_added.is_empty() {\n             d.field(\"libraries_added\", &self.libraries_added.len());\n         }\n-        if !self.crate_graph.is_none() {\n+        if self.crate_graph.is_some() {\n             d.field(\"crate_graph\", &self.crate_graph);\n         }\n         d.finish()"}, {"sha": "2bdea11e14c9bf941f0e4bd856cf1df675f368ab", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -101,7 +101,7 @@ fn match_subtree(\n                         tt::Leaf::Literal(tt::Literal { text: lhs, .. }),\n                         tt::Leaf::Literal(tt::Literal { text: rhs, .. }),\n                     ) if lhs == rhs => (),\n-                    _ => Err(ExpandError::UnexpectedToken)?,\n+                    _ => return Err(ExpandError::UnexpectedToken),\n                 }\n             }\n             Op::TokenTree(tt::TokenTree::Subtree(lhs)) => {"}, {"sha": "1cdebc21666945e8c4b34a6c4ea1d224ef9f6006", "filename": "crates/ra_mbe/src/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fparser.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -100,7 +100,7 @@ fn next_op<'a>(\n                     Op::Repeat { subtree, separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n-                    tt::Leaf::Punct(..) => Err(ExpandError::UnexpectedToken)?,\n+                    tt::Leaf::Punct(..) => return Err(ExpandError::UnexpectedToken),\n                     tt::Leaf::Ident(ident) => {\n                         let name = &ident.text;\n                         let kind = eat_fragment_kind(src, mode)?;\n@@ -147,15 +147,15 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Exp\n     for tt in src {\n         let tt = match tt {\n             tt::TokenTree::Leaf(leaf) => leaf,\n-            tt::TokenTree::Subtree(_) => Err(ExpandError::InvalidRepeat)?,\n+            tt::TokenTree::Subtree(_) => return Err(ExpandError::InvalidRepeat),\n         };\n         let has_sep = match &separator {\n-            Separator::Puncts(puncts) => puncts.len() != 0,\n+            Separator::Puncts(puncts) => !puncts.is_empty(),\n             _ => true,\n         };\n         match tt {\n             tt::Leaf::Ident(_) | tt::Leaf::Literal(_) if has_sep => {\n-                Err(ExpandError::InvalidRepeat)?\n+                return Err(ExpandError::InvalidRepeat)\n             }\n             tt::Leaf::Ident(ident) => separator = Separator::Ident(ident.clone()),\n             tt::Leaf::Literal(lit) => separator = Separator::Literal(lit.clone()),\n@@ -168,11 +168,11 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Exp\n                         match &mut separator {\n                             Separator::Puncts(puncts) => {\n                                 if puncts.len() == 3 {\n-                                    Err(ExpandError::InvalidRepeat)?\n+                                    return Err(ExpandError::InvalidRepeat);\n                                 }\n                                 puncts.push(punct.clone())\n                             }\n-                            _ => Err(ExpandError::InvalidRepeat)?,\n+                            _ => return Err(ExpandError::InvalidRepeat),\n                         }\n                         continue;\n                     }"}, {"sha": "eb8b79e9a8019f888a994f7d9f258ab8fcc94a9a", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -124,7 +124,7 @@ fn convert_delim(d: Option<tt::DelimiterKind>, closing: bool) -> TtToken {\n \n     let idx = closing as usize;\n     let kind = kinds[idx];\n-    let text = if texts.len() > 0 { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n+    let text = if !texts.is_empty() { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n     TtToken { kind, is_joint_to_next: false, text: SmolStr::new(text) }\n }\n "}, {"sha": "b77b683b57c96e370bb8f81b5b3cf66b02726fbc", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -230,10 +230,8 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(T![async]);\n     p.eat(T![move]);\n     params::param_list_closure(p);\n-    if opt_fn_ret_type(p) {\n-        if !p.at(T!['{']) {\n-            p.error(\"expected `{`\");\n-        }\n+    if opt_fn_ret_type(p) && !p.at(T!['{']) {\n+        p.error(\"expected `{`\");\n     }\n \n     if p.at_ts(EXPR_FIRST) {"}, {"sha": "332acc1a018a2672980b1dd8f8c1abf973329175", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -94,7 +94,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n \n fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n     match mode {\n-        Mode::Use => return,\n+        Mode::Use => {}\n         Mode::Type => {\n             // test path_fn_trait_args\n             // type F = Box<Fn(i32) -> ()>;"}, {"sha": "660d85b4237d0aeae82ab323cda7324c0baba4d4", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -214,7 +214,7 @@ impl Drop for Profiler {\n                     let start = stack.starts.pop().unwrap();\n                     let duration = start.elapsed();\n                     let level = stack.starts.len();\n-                    stack.messages.push(Message { level, duration, label: label });\n+                    stack.messages.push(Message { level, duration, label });\n                     if level == 0 {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;"}, {"sha": "34fd73bb74912c89888164f140de8c5c3ad5880a", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -164,7 +164,7 @@ impl CargoWorkspace {\n             // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n             // https://github.com/oli-obk/cargo_metadata/issues/79\n             meta.features(CargoOpt::NoDefaultFeatures);\n-        } else if cargo_features.features.len() > 0 {\n+        } else if !cargo_features.features.is_empty() {\n             meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n         }\n         if let Some(parent) = cargo_toml.parent() {"}, {"sha": "9e67d24989aa920f01eeb05c18cc4e8f0aa4a5a6", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -409,7 +409,7 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    Err(CargoTomlNotFoundError(path.to_path_buf()))?\n+    Err(CargoTomlNotFoundError(path.to_path_buf()).into())\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {"}, {"sha": "21fca99a6f2601e11e074aa05c1e5a504e0a546d", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -95,16 +95,17 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n         lhs: SyntaxElement,\n         rhs: SyntaxElement,\n     ) {\n-        if lhs.kind() == rhs.kind() && lhs.text_range().len() == rhs.text_range().len() {\n-            if match (&lhs, &rhs) {\n+        if lhs.kind() == rhs.kind()\n+            && lhs.text_range().len() == rhs.text_range().len()\n+            && match (&lhs, &rhs) {\n                 (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => {\n                     lhs.green() == rhs.green() || lhs.text() == rhs.text()\n                 }\n                 (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n                 _ => false,\n-            } {\n-                return;\n             }\n+        {\n+            return;\n         }\n         if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n             if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {"}, {"sha": "77cceb382536fb5e9df62cb72f63121c266d3ea0", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -30,7 +30,7 @@ pub enum ElseBranch {\n \n impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n-        self.blocks().nth(0)\n+        self.blocks().next()\n     }\n     pub fn else_branch(&self) -> Option<ElseBranch> {\n         let res = match self.blocks().nth(1) {\n@@ -208,7 +208,7 @@ impl ast::BinExpr {\n     }\n \n     pub fn lhs(&self) -> Option<ast::Expr> {\n-        children(self).nth(0)\n+        children(self).next()\n     }\n \n     pub fn rhs(&self) -> Option<ast::Expr> {\n@@ -271,7 +271,7 @@ impl ast::RangeExpr {\n \n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n-        children(self).nth(0)\n+        children(self).next()\n     }\n     pub fn index(&self) -> Option<ast::Expr> {\n         children(self).nth(1)\n@@ -287,7 +287,7 @@ impl ast::ArrayExpr {\n     pub fn kind(&self) -> ArrayExprKind {\n         if self.is_repeat() {\n             ArrayExprKind::Repeat {\n-                initializer: children(self).nth(0),\n+                initializer: children(self).next(),\n                 repeat: children(self).nth(1),\n             }\n         } else {\n@@ -328,10 +328,10 @@ impl ast::Literal {\n     }\n \n     pub fn kind(&self) -> LiteralKind {\n-        const INT_SUFFIXES: [&'static str; 12] = [\n+        const INT_SUFFIXES: [&str; 12] = [\n             \"u64\", \"u32\", \"u16\", \"u8\", \"usize\", \"isize\", \"i64\", \"i32\", \"i16\", \"i8\", \"u128\", \"i128\",\n         ];\n-        const FLOAT_SUFFIXES: [&'static str; 2] = [\"f32\", \"f64\"];\n+        const FLOAT_SUFFIXES: [&str; 2] = [\"f32\", \"f64\"];\n \n         let token = self.token();\n "}, {"sha": "7c20fcc1047b2d0150c173a14949964d36689c13", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -152,7 +152,7 @@ pub fn match_arm_list(arms: impl IntoIterator<Item = ast::MatchArm>) -> ast::Mat\n             format!(\"    {}{}\\n\", arm.syntax(), comma)\n         })\n         .collect::<String>();\n-    return from_text(&format!(\"{}\", arms_str));\n+    return from_text(&arms_str);\n \n     fn from_text(text: &str) -> ast::MatchArmList {\n         ast_from_text(&format!(\"fn f() {{ match () {{\\n{}}} }}\", text))"}, {"sha": "e2433913cadf10a52586dcd7c28b20bec758ed16", "filename": "crates/ra_syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -48,7 +48,7 @@ impl<'t> TokenSource for TextTokenSource<'t> {\n \n     fn is_keyword(&self, kw: &str) -> bool {\n         let pos = self.curr.1;\n-        if !(pos < self.tokens.len()) {\n+        if pos >= self.tokens.len() {\n             return false;\n         }\n         let range = TextRange::offset_len(self.start_offsets[pos], self.tokens[pos].len);"}, {"sha": "dd15b3458700cb2a61203275c069a376e79eb1ab", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -4,7 +4,7 @@\n mod args;\n \n use lsp_server::Connection;\n-use ra_prof;\n+\n use rust_analyzer::{cli, from_json, show_message, Result, ServerConfig};\n \n use crate::args::HelpPrinted;"}, {"sha": "4d59db1ee787ebd1f9128390f4dc6ca73da1b434", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -130,7 +130,7 @@ pub fn analysis_stats(\n             write!(msg, \" ({:?} {})\", path, syntax_range).unwrap();\n         }\n         if verbosity.is_spammy() {\n-            bar.println(format!(\"{}\", msg));\n+            bar.println(msg.to_string());\n         }\n         bar.set_message(&msg);\n         let f_id = FunctionId::from(f);"}, {"sha": "71917a62eaf70f9304cbea596623c9f587af7984", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -206,17 +206,17 @@ pub fn main_loop(\n             let event = select! {\n                 recv(&connection.receiver) -> msg => match msg {\n                     Ok(msg) => Event::Msg(msg),\n-                    Err(RecvError) => Err(\"client exited without shutdown\")?,\n+                    Err(RecvError) => return Err(\"client exited without shutdown\".into()),\n                 },\n                 recv(task_receiver) -> task => Event::Task(task.unwrap()),\n                 recv(world_state.task_receiver) -> task => match task {\n                     Ok(task) => Event::Vfs(task),\n-                    Err(RecvError) => Err(\"vfs died\")?,\n+                    Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n                 recv(libdata_receiver) -> data => Event::Lib(data.unwrap()),\n                 recv(world_state.check_watcher.task_recv) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n-                    Err(RecvError) => Err(\"check watcher died\")?,\n+                    Err(RecvError) => return Err(\"check watcher died\".into()),\n                 }\n             };\n             if let Event::Msg(Message::Request(req)) = &event {"}, {"sha": "970185deca3fcaf5a897e013088ad1f92ee13e95", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -17,7 +17,7 @@ use test_utils::skip_slow_tests;\n \n use crate::support::{project, Project};\n \n-const PROFILE: &'static str = \"\";\n+const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n \n #[test]"}, {"sha": "e28ae61fe533933e8bfb1049c0cf7d20d53b800b", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -52,7 +52,7 @@ impl<'a> Project<'a> {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n-            let _ = env_logger::builder().is_test(true).try_init().unwrap();\n+            env_logger::builder().is_test(true).try_init().unwrap();\n             ra_prof::set_filter(if crate::PROFILE.is_empty() {\n                 ra_prof::Filter::disabled()\n             } else {"}, {"sha": "e6e8d71103be39a5aacfb25bf32a7ce011985780", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "patch": "@@ -279,7 +279,7 @@ pub fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a\n                 return Some((expected, actual));\n             }\n \n-            l.values().zip(r.values()).filter_map(|(l, r)| find_mismatch(l, r)).nth(0)\n+            l.values().zip(r.values()).filter_map(|(l, r)| find_mismatch(l, r)).next()\n         }\n         (&Null, &Null) => None,\n         // magic string literal \"{...}\" acts as wildcard for any sub-JSON"}]}