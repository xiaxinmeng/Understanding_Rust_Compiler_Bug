{"sha": "f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTUxM2IyYjJkZDE3M2YxNmI4NGYwNTMxZmMzNjI4ZDYyYmViNGQ=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-05-31T13:13:46Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-06-20T15:08:57Z"}, "message": "Check pattern refutability the same way exhaustiveness is checked", "tree": {"sha": "26e7abc4c449cb9887303f77ae009a14ede0b80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e7abc4c449cb9887303f77ae009a14ede0b80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "html_url": "https://github.com/rust-lang/rust/commit/f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e513b2b2dd173f16b84f0531fc3628d62beb4d/comments", "author": null, "committer": null, "parents": [{"sha": "6750eb5a05042fe3fb84708909074f33ad86d3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/6750eb5a05042fe3fb84708909074f33ad86d3ec", "html_url": "https://github.com/rust-lang/rust/commit/6750eb5a05042fe3fb84708909074f33ad86d3ec"}], "stats": {"total": 139, "additions": 44, "deletions": 95}, "files": [{"sha": "8483ffaa438afdd40d78d244d39fc2baf48168b5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 26, "deletions": 63, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f5e513b2b2dd173f16b84f0531fc3628d62beb4d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e513b2b2dd173f16b84f0531fc3628d62beb4d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "patch": "@@ -750,12 +750,15 @@ fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) {\n         LocalFor => \"`for` loop\"\n     };\n \n-    let mut spans = vec![];\n-    find_refutable(cx, &*loc.pat, &mut spans);\n-\n-    for span in spans.iter() {\n-        cx.tcx.sess.span_err(*span,\n-                             format!(\"refutable pattern in {} binding\", name).as_slice());\n+    match is_refutable(cx, loc.pat) {\n+        Some(pat) => {\n+            let msg = format!(\n+                \"refutable pattern in {} binding: {} not covered\",\n+                name, pat_to_str(&*pat)\n+            );\n+            cx.tcx.sess.span_err(loc.pat.span, msg.as_slice());\n+        },\n+        None => ()\n     }\n \n     // Check legality of move bindings.\n@@ -769,67 +772,27 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span) {\n     visit::walk_fn(cx, kind, decl, body, sp, ());\n     for input in decl.inputs.iter() {\n-        let mut spans = vec![];\n-        find_refutable(cx, &*input.pat, &mut spans);\n-\n-        for span in spans.iter() {\n-            cx.tcx.sess.span_err(*span,\n-                                 \"refutable pattern in function argument\");\n+        match is_refutable(cx, input.pat) {\n+            Some(pat) => {\n+                let msg = format!(\n+                    \"refutable pattern in function argument: {} not covered\",\n+                    pat_to_str(&*pat)\n+                );\n+                cx.tcx.sess.span_err(input.pat.span, msg.as_slice());\n+            },\n+            None => ()\n         }\n     }\n }\n \n-fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n-    macro_rules! this_pattern {\n-        () => {\n-            {\n-                spans.push(pat.span);\n-                return\n-            }\n-        }\n-    }\n-    let opt_def = cx.tcx.def_map.borrow().find_copy(&pat.id);\n-    match opt_def {\n-      Some(DefVariant(enum_id, _, _)) => {\n-        if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n-            this_pattern!()\n-        }\n-      }\n-      Some(DefStatic(..)) => this_pattern!(),\n-      _ => ()\n-    }\n-\n-    match pat.node {\n-      PatBox(ref sub) | PatRegion(ref sub) | PatIdent(_, _, Some(ref sub)) => {\n-        find_refutable(cx, &**sub, spans)\n-      }\n-      PatWild | PatWildMulti | PatIdent(_, _, None) => {}\n-      PatLit(lit) => {\n-          match lit.node {\n-            ExprLit(lit) => {\n-                match lit.node {\n-                    LitNil => {}    // `()`\n-                    _ => this_pattern!(),\n-                }\n-            }\n-            _ => this_pattern!(),\n-          }\n-      }\n-      PatRange(_, _) => { this_pattern!() }\n-      PatStruct(_, ref fields, _) => {\n-          for f in fields.iter() {\n-              find_refutable(cx, &*f.pat, spans);\n-          }\n-      }\n-      PatTup(ref elts) | PatEnum(_, Some(ref elts))=> {\n-          for elt in elts.iter() {\n-              find_refutable(cx, &**elt, spans)\n-          }\n-      }\n-      PatEnum(_,_) => {}\n-      PatVec(..) => { this_pattern!() }\n-      PatMac(_) => cx.tcx.sess.bug(\"unexpanded macro\"),\n-    }\n+fn is_refutable(cx: &MatchCheckCtxt, pat: Gc<Pat>) -> Option<Gc<Pat>> {\n+    let pats = vec!(vec!(pat));\n+    is_useful(cx, &pats, [wild()])\n+        .useful()\n+        .map(|pats| {\n+            assert_eq!(pats.len(), 1);\n+            pats.get(0).clone()\n+        })\n }\n \n // Legality of move bindings checking"}, {"sha": "efa2dbad83fdaa9f65c747fc3f61ad2fea730443", "filename": "src/test/compile-fail/precise-refutable-pattern-errors.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6750eb5a05042fe3fb84708909074f33ad86d3ec/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6750eb5a05042fe3fb84708909074f33ad86d3ec/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs?ref=6750eb5a05042fe3fb84708909074f33ad86d3ec", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-fn func(\n-    (\n-        1, //~ ERROR refutable pattern in function argument\n-        (\n-            Some( //~ ERROR refutable pattern in function argument\n-                1), // nested, so no warning.\n-            2..3 //~ ERROR refutable pattern in function argument\n-            )\n-        ): (int, (Option<int>, int))\n-        ) {}\n-\n-fn main() {\n-    let (\n-        1, //~ ERROR refutable pattern in local binding\n-        (\n-            Some( //~ ERROR refutable pattern in local binding\n-                1), // nested, so no warning.\n-            2..3 //~ ERROR refutable pattern in local binding\n-            )\n-        ) = (1, (None, 2));\n-}"}, {"sha": "38b9b888e06bfb0186346bfed23d76701b64a4ea", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5e513b2b2dd173f16b84f0531fc3628d62beb4d/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e513b2b2dd173f16b84f0531fc3628d62beb4d/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=f5e513b2b2dd173f16b84f0531fc3628d62beb4d", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn func((1, (Some(1), 2..3)): (int, (Option<int>, int))) { }\n+//~^ ERROR refutable pattern in function argument\n+\n+fn main() {\n+    let (1, (Some(1), 2..3)) = (1, (None, 2));\n+    //~^ ERROR refutable pattern in local binding\n+}"}]}