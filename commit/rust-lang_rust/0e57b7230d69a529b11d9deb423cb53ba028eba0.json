{"sha": "0e57b7230d69a529b11d9deb423cb53ba028eba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNTdiNzIzMGQ2OWE1MjliMTFkOWRlYjQyM2NiNTNiYTAyOGViYTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:38Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:39:44Z"}, "message": "Rollup merge of #59072 - RalfJung:miri-alloc-tests, r=kennytm\n\nwe can now skip should_panic tests with the libtest harness", "tree": {"sha": "512d573b7c89982c64808e58054988d1ba40adb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512d573b7c89982c64808e58054988d1ba40adb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e57b7230d69a529b11d9deb423cb53ba028eba0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCrAACgkQ/vbIBR0O\nATwreBAAmHLLmjmcy+kktN1ZfhmxzLIraOKv075xeQiz2yr2hS/yCR1W50w4Qp+k\neRAI8F+cc+/xmeknW699VtVh0gs8iGYjJPk2hqTnM7T/z9+/k2aFmBVFrLUF+oh3\nsGAE1eASkwH5Uc0/5p69bTl3mHcjlerKb7Ethr47S0aGqh0kIW5d8oRchDC/k+f4\nZQenL9nyXL+Z7buOz6QrxkO95Wn57nzK3DU8M2DS1KWob74AzCo+v6hjpWA0WYju\nmoGPdDhytzPETZWrYw7EosKmk7yZymrH6anV+OEgixCqdNNlykXvIdfZOPClLNWj\n3XIQ/XG/N+5bN80SJGlCtDns03XoRytkCsJ9YgnAiXhAO1VMAcJWBOd4Yi3NsTCU\nMPMwrofb6eQIBm91ffgzDPlZddrvZDWTWpSaJpUyUS3cp5j5YaQZyvtoxXr4Vq1c\nutHbegd5GZWqXyJ8khJtWFR5i/vwu0ZnmgZ0BC2ejjXo4ZbPxvMS9S3tHx4JFWBh\nHttX+EyJoEi6msigkViU5xjML/t9xpiyZXXZIhYWXczWTb+VfgoFHLt0JrO28zsv\npKBRlIRaKWnybvJ+khCvRqnfMZTDMCXnzH5f+h93NDwpi01DEskD7s4oZJrJ8d7B\n5GS6rLe2NYydNkosPyb+eT8hDPrPJjZo16ChSYghER8JnkA8/ds=\n=uF2E\n-----END PGP SIGNATURE-----", "payload": "tree 512d573b7c89982c64808e58054988d1ba40adb4\nparent 76749844dad23817683e35fc5f064f5c1c5bcd12\nparent 52d9fa827d3cf5ef5fc0e2042ca1fc7f6dc391ed\nauthor kennytm <kennytm@gmail.com> 1552719398 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747184 +0800\n\nRollup merge of #59072 - RalfJung:miri-alloc-tests, r=kennytm\n\nwe can now skip should_panic tests with the libtest harness\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e57b7230d69a529b11d9deb423cb53ba028eba0", "html_url": "https://github.com/rust-lang/rust/commit/0e57b7230d69a529b11d9deb423cb53ba028eba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e57b7230d69a529b11d9deb423cb53ba028eba0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76749844dad23817683e35fc5f064f5c1c5bcd12", "url": "https://api.github.com/repos/rust-lang/rust/commits/76749844dad23817683e35fc5f064f5c1c5bcd12", "html_url": "https://github.com/rust-lang/rust/commit/76749844dad23817683e35fc5f064f5c1c5bcd12"}, {"sha": "52d9fa827d3cf5ef5fc0e2042ca1fc7f6dc391ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d9fa827d3cf5ef5fc0e2042ca1fc7f6dc391ed", "html_url": "https://github.com/rust-lang/rust/commit/52d9fa827d3cf5ef5fc0e2042ca1fc7f6dc391ed"}], "stats": {"total": 94, "additions": 3, "deletions": 91}, "files": [{"sha": "0930f8dacd494e7e6619989f086eca2c3a5405e2", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -282,7 +282,7 @@ fn assert_covariance() {\n //\n // Destructors must be called exactly once per element.\n #[test]\n-#[cfg(not(miri))] // Miri does not support panics\n+#[cfg(not(miri))] // Miri does not support panics nor entropy\n fn panic_safe() {\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "844afe870766ba1d2c161ecd9af933d96ee0890a", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -226,39 +226,34 @@ fn test_range_equal_empty_cases() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_range_equal_excluded() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(2), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_1() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_2() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_3() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_4() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Excluded(2)));"}, {"sha": "b54c128a0249a59d7d00c77b5f2efcf2249027b7", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -258,7 +258,6 @@ fn test_swap_remove() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_swap_remove_fail() {\n     let mut v = vec![1];\n     let _ = v.swap_remove(0);\n@@ -632,7 +631,6 @@ fn test_insert() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_insert_oob() {\n     let mut a = vec![1, 2, 3];\n     a.insert(4, 5);\n@@ -657,7 +655,6 @@ fn test_remove() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_remove_fail() {\n     let mut a = vec![1];\n     let _ = a.remove(0);\n@@ -939,7 +936,6 @@ fn test_windowsator() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_windowsator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.windows(0);\n@@ -964,7 +960,6 @@ fn test_chunksator() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_chunksator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks(0);\n@@ -989,7 +984,6 @@ fn test_chunks_exactator() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_chunks_exactator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks_exact(0);\n@@ -1014,7 +1008,6 @@ fn test_rchunksator() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_rchunksator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks(0);\n@@ -1039,7 +1032,6 @@ fn test_rchunks_exactator() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_rchunks_exactator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks_exact(0);\n@@ -1092,7 +1084,6 @@ fn test_vec_default() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_overflow_does_not_cause_segfault() {\n     let mut v = vec![];\n     v.reserve_exact(!0);\n@@ -1102,7 +1093,6 @@ fn test_overflow_does_not_cause_segfault() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_overflow_does_not_cause_segfault_managed() {\n     let mut v = vec![Rc::new(1)];\n     v.reserve_exact(!0);\n@@ -1278,7 +1268,6 @@ fn test_mut_chunks_rev() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_chunks_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.chunks_mut(0);\n@@ -1311,7 +1300,6 @@ fn test_mut_chunks_exact_rev() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_chunks_exact_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.chunks_exact_mut(0);\n@@ -1344,7 +1332,6 @@ fn test_mut_rchunks_rev() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_rchunks_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.rchunks_mut(0);\n@@ -1377,7 +1364,6 @@ fn test_mut_rchunks_exact_rev() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_rchunks_exact_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.rchunks_exact_mut(0);\n@@ -1411,7 +1397,7 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support panics\n+#[cfg(not(miri))] // Miri does not support threads nor entropy\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -1476,7 +1462,6 @@ fn test_copy_from_slice() {\n \n #[test]\n #[should_panic(expected = \"destination and source slices have different lengths\")]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_from_slice_dst_longer() {\n     let src = [0, 1, 2, 3];\n     let mut dst = [0; 5];\n@@ -1485,7 +1470,6 @@ fn test_copy_from_slice_dst_longer() {\n \n #[test]\n #[should_panic(expected = \"destination and source slices have different lengths\")]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_from_slice_dst_shorter() {\n     let src = [0, 1, 2, 3];\n     let mut dst = [0; 3];\n@@ -1605,7 +1589,7 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n-#[cfg(not(miri))] // Miri does not support panics\n+#[cfg(not(miri))] // Miri does not support threads nor entropy\n fn panic_safe() {\n     let prev = panic::take_hook();\n     panic::set_hook(Box::new(move |info| {"}, {"sha": "f2dc19a42296a53c4b1ac208009c4b1880609fc7", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -351,7 +351,6 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of bounds\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!(\"abc\", 0..5, \"abc\");\n     }\n@@ -361,7 +360,6 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!(\"abc\", 0..2, \"abc\");\n     }\n@@ -409,7 +407,6 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_fail() {\n                     let v: String = $data.into();\n                     let v: &str = &v;\n@@ -418,7 +415,6 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_mut_fail() {\n                     let mut v: String = $data.into();\n                     let v: &mut str = &mut v;\n@@ -514,7 +510,6 @@ mod slice_index {\n \n     #[test]\n     #[should_panic]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail() {\n         &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n     }\n@@ -666,14 +661,12 @@ mod slice_index {\n     // check the panic includes the prefix of the sliced string\n     #[test]\n     #[should_panic(expected=\"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail_truncated_1() {\n         &LOREM_PARAGRAPH[..1024];\n     }\n     // check the truncation in the panic message\n     #[test]\n     #[should_panic(expected=\"luctus, im`[...]\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail_truncated_2() {\n         &LOREM_PARAGRAPH[..1024];\n     }\n@@ -688,7 +681,6 @@ fn test_str_slice_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_str_slice_rangetoinclusive_notok() {\n     let s = \"abc\u03b1\u03b2\u03b3\";\n     &s[..=3];\n@@ -704,7 +696,6 @@ fn test_str_slicemut_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n@@ -894,7 +885,6 @@ fn test_as_bytes() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_as_bytes_fail() {\n     // Don't double free. (I'm not sure if this exercises the\n     // original problem code path anymore.)\n@@ -984,7 +974,6 @@ fn test_split_at_mut() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n     s.split_at(1);"}, {"sha": "7e75b8c4f28c80687b2e77a22c5fa69d1c7e06da", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -231,7 +231,6 @@ fn test_split_off_empty() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_past_end() {\n     let orig = \"Hello, world!\";\n     let mut split = String::from(orig);\n@@ -240,7 +239,6 @@ fn test_split_off_past_end() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_mid_char() {\n     let mut orig = String::from(\"\u5c71\");\n     orig.split_off(1);\n@@ -289,7 +287,6 @@ fn test_str_truncate_invalid_len() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_str_truncate_split_codepoint() {\n     let mut s = String::from(\"\\u{FC}\"); // \u00fc\n     s.truncate(1);\n@@ -324,7 +321,6 @@ fn remove() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn remove_bad() {\n     \"\u0e28\".to_string().remove(1);\n }\n@@ -360,13 +356,11 @@ fn insert() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad1() {\n     \"\".to_string().insert(1, 't');\n }\n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad2() {\n     \"\u1ec7\".to_string().insert(1, 't');\n }\n@@ -447,7 +441,6 @@ fn test_replace_range() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n     s.replace_range(..8, \"\");\n@@ -464,15 +457,13 @@ fn test_replace_range_inclusive_range() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..=5, \"789\");"}, {"sha": "545332bcd6a2f3985c5243bcb08b7f3417e7ce7f", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -368,7 +368,6 @@ fn test_vec_truncate_drop() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_vec_truncate_fail() {\n     struct BadElem(i32);\n     impl Drop for BadElem {\n@@ -392,55 +391,48 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_index_out_of_bounds() {\n     let vec = vec![1, 2, 3];\n     let _ = vec[3];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_1() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[!0..];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_2() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[..6];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_3() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[!0..4];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_4() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[1..6];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_5() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[3..2];\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_swap_remove_empty() {\n     let mut vec = Vec::<i32>::new();\n     vec.swap_remove(0);\n@@ -511,7 +503,6 @@ fn test_drain_items_zero_sized() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_drain_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     v.drain(5..6);\n@@ -585,7 +576,6 @@ fn test_drain_max_vec_size() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_drain_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     v.drain(5..=5);\n@@ -615,7 +605,6 @@ fn test_splice_inclusive_range() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_splice_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n@@ -624,7 +613,6 @@ fn test_splice_out_of_bounds() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_splice_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];"}, {"sha": "e0fe10a55f55c5623692cb5a3ef310de9f5d6100", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -108,7 +108,6 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_index_out_of_bounds() {\n     let mut deq = VecDeque::new();\n     for i in 1..4 {"}, {"sha": "56f295dff8e430c1818aeb7a16f3cd2213decf50", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -109,7 +109,6 @@ fn double_borrow_single_release_no_borrow_mut() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn discard_doesnt_unborrow() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -350,7 +349,6 @@ fn refcell_ref_coercion() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn refcell_swap_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -360,7 +358,6 @@ fn refcell_swap_borrows() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn refcell_replace_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();"}, {"sha": "a3f0b02e2fe33f76b042cfb9ba445831cb2c2013", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -253,7 +253,6 @@ fn test_iterator_step_by_nth_overflow() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_iterator_step_by_zero() {\n     let mut it = (0..).step_by(0);\n     it.next();\n@@ -1442,7 +1441,6 @@ fn test_rposition() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_rposition_panic() {\n     let v: [(Box<_>, Box<_>); 4] =\n         [(box 0, box 0), (box 0, box 0),"}, {"sha": "b873f1dd0652f82855570caaf898692f2bac3354", "filename": "src/libcore/tests/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -3,7 +3,6 @@ use core::num::bignum::tests::Big8x3 as Big;\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_from_u64_overflow() {\n     Big::from_u64(0x1000000);\n }\n@@ -20,14 +19,12 @@ fn test_add() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_1() {\n     Big::from_small(1).add(&Big::from_u64(0xffffff));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_2() {\n     Big::from_u64(0xffffff).add(&Big::from_small(1));\n }\n@@ -45,7 +42,6 @@ fn test_add_small() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_add_small_overflow() {\n     Big::from_u64(0xffffff).add_small(1);\n }\n@@ -61,14 +57,12 @@ fn test_sub() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_1() {\n     Big::from_u64(0x10665).sub(&Big::from_u64(0x10666));\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_2() {\n     Big::from_small(0).sub(&Big::from_u64(0x123456));\n }\n@@ -82,7 +76,6 @@ fn test_mul_small() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_small_overflow() {\n     Big::from_u64(0x800000).mul_small(2);\n }\n@@ -101,14 +94,12 @@ fn test_mul_pow2() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_1() {\n     Big::from_u64(0x1).mul_pow2(24);\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_2() {\n     Big::from_u64(0x123).mul_pow2(16);\n }\n@@ -127,14 +118,12 @@ fn test_mul_pow5() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_1() {\n     Big::from_small(1).mul_pow5(12);\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_2() {\n     Big::from_small(230).mul_pow5(8);\n }\n@@ -152,14 +141,12 @@ fn test_mul_digits() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_1() {\n     Big::from_u64(0x800000).mul_digits(&[2]);\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_2() {\n     Big::from_u64(0x1000).mul_digits(&[0, 0x10]);\n }\n@@ -219,7 +206,6 @@ fn test_get_bit() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_get_bit_out_of_range() {\n     Big::from_small(42).get_bit(24);\n }"}, {"sha": "b059b134868d999fae75fe4e75eba3c2ea03a3a7", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -69,7 +69,6 @@ fn test_option_dance() {\n }\n \n #[test] #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_option_too_much_dance() {\n     struct A;\n     let mut y = Some(A);\n@@ -130,15 +129,13 @@ fn test_unwrap() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_unwrap_panic1() {\n     let x: Option<isize> = None;\n     x.unwrap();\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_unwrap_panic2() {\n     let x: Option<String> = None;\n     x.unwrap();"}, {"sha": "1fab07526a07f7f3954a1faa84b802cb4751e795", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -117,7 +117,6 @@ fn test_unwrap_or_else() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n@@ -139,7 +138,6 @@ pub fn test_expect_ok() {\n }\n #[test]\n #[should_panic(expected=\"Got expected error: \\\"All good\\\"\")]\n-#[cfg(not(miri))] // Miri does not support panics\n pub fn test_expect_err() {\n     let err: Result<isize, &'static str> = Err(\"All good\");\n     err.expect(\"Got expected error\");\n@@ -153,7 +151,6 @@ pub fn test_expect_err_err() {\n }\n #[test]\n #[should_panic(expected=\"Got expected ok: \\\"All good\\\"\")]\n-#[cfg(not(miri))] // Miri does not support panics\n pub fn test_expect_err_ok() {\n     let err: Result<&'static str, isize> = Ok(\"All good\");\n     err.expect_err(\"Got expected ok\");"}, {"sha": "ac9c17a0f7c356ec4962927297b2490ad09044d5", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -782,7 +782,6 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of range\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!([0, 1, 2], 0..5, [0, 1, 2]);\n     }\n@@ -792,7 +791,6 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n-    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!([0, 1, 2], 0..2, [0, 1, 2]);\n     }\n@@ -842,7 +840,6 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_fail() {\n                     let v = $data;\n                     let v: &[_] = &v;\n@@ -851,7 +848,6 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_mut_fail() {\n                     let mut v = $data;\n                     let v: &mut [_] = &mut v;\n@@ -1304,7 +1300,6 @@ fn test_copy_within() {\n \n #[test]\n #[should_panic(expected = \"src is out of bounds\")]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_src_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so 14 is out of bounds.\n@@ -1313,15 +1308,13 @@ fn test_copy_within_panics_src_too_long() {\n \n #[test]\n #[should_panic(expected = \"dest is out of bounds\")]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_dest_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n     bytes.copy_within(0..4, 10);\n }\n #[test]\n #[should_panic(expected = \"src end is before src start\")]\n-#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_src_inverted() {\n     let mut bytes = *b\"Hello, World!\";\n     // 2 is greater than 1, so this range is invalid."}, {"sha": "6efd22572dc185d57fe9b06062cfccd93754e48a", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e57b7230d69a529b11d9deb423cb53ba028eba0/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=0e57b7230d69a529b11d9deb423cb53ba028eba0", "patch": "@@ -107,14 +107,12 @@ fn checked_sub() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad1() {\n     let _ = Duration::new(0, 0) - Duration::new(0, 1);\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad2() {\n     let _ = Duration::new(0, 0) - Duration::new(1, 0);\n }"}]}