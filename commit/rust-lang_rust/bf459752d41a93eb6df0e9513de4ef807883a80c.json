{"sha": "bf459752d41a93eb6df0e9513de4ef807883a80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDU5NzUyZDQxYTkzZWI2ZGYwZTk1MTNkZTRlZjgwNzg4M2E4MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-30T07:04:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-30T07:04:43Z"}, "message": "Auto merge of #70175 - Amanieu:remove_nlp, r=pnkfelix\n\nRemove -Z no-landing-pads flag\n\nSince #67502, `-Z no-landing-pads` will cause all attempted unwinds to abort since we don't generate a `try` / `catch`. This previously worked because `__rust_try` was located in libpanic_unwind which is always compiled with `-C panic=unwind`, but `__rust_try` is now directly inline into the crate that uses `catch_unwind`.\n\nAs such, `-Z no-landing-pads` is now mostly useless and people should use `-C panic=abort` instead.", "tree": {"sha": "6a6e05a05077a1f72fcf055196b69be3eb341b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a6e05a05077a1f72fcf055196b69be3eb341b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf459752d41a93eb6df0e9513de4ef807883a80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf459752d41a93eb6df0e9513de4ef807883a80c", "html_url": "https://github.com/rust-lang/rust/commit/bf459752d41a93eb6df0e9513de4ef807883a80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf459752d41a93eb6df0e9513de4ef807883a80c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "html_url": "https://github.com/rust-lang/rust/commit/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2"}, {"sha": "c6817ffb2cadae7f80414e13d99e89ec83db9a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6817ffb2cadae7f80414e13d99e89ec83db9a77", "html_url": "https://github.com/rust-lang/rust/commit/c6817ffb2cadae7f80414e13d99e89ec83db9a77"}], "stats": {"total": 171, "additions": 57, "deletions": 114}, "files": [{"sha": "6ef303c848dc34900b53c0f86e62476f3ff6a38d", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n+use rustc_target::spec::PanicStrategy;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n@@ -270,7 +271,9 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     //\n     // You can also find more info on why Windows is whitelisted here in:\n     //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n-    if !cx.sess().no_landing_pads() || cx.sess().target.target.options.requires_uwtable {\n+    if cx.sess().panic_strategy() == PanicStrategy::Unwind\n+        || cx.sess().target.target.options.requires_uwtable\n+    {\n         attributes::emit_uwtable(llfn, true);\n     }\n "}, {"sha": "ddf21ff6338eba44d7bee10c897304d30a44b5f3", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::Span;\n use rustc_target::abi::{self, HasDataLayout, LayoutOf, Primitive};\n+use rustc_target::spec::PanicStrategy;\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -804,7 +805,7 @@ fn try_intrinsic(\n     catch_func: &'ll Value,\n     dest: &'ll Value,\n ) {\n-    if bx.sess().no_landing_pads() {\n+    if bx.sess().panic_strategy() == PanicStrategy::Abort {\n         bx.call(try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind."}, {"sha": "094c57b24012724a2f912c1f202f2c451d023501", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -35,7 +35,7 @@ use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::spec::MergeFunctions;\n+use rustc_target::spec::{MergeFunctions, PanicStrategy};\n \n use std::any::Any;\n use std::fs;\n@@ -995,7 +995,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         crate_types: sess.crate_types.borrow().clone(),\n         each_linked_rlib_for_lto,\n         lto: sess.lto(),\n-        no_landing_pads: sess.no_landing_pads(),\n+        no_landing_pads: sess.panic_strategy() == PanicStrategy::Abort,\n         fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),"}, {"sha": "0b3ba73f86a86a343ae1ad62a62dad23ffacb110", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -546,7 +546,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(new_llvm_pass_manager, true);\n     tracked!(no_codegen, true);\n     tracked!(no_generate_arange_section, true);\n-    tracked!(no_landing_pads, true);\n     tracked!(no_link, true);\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);"}, {"sha": "00caa06a6c0ff51656c4d3e26dd3be3620a6f86b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -68,6 +68,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::GeneratorSubsts;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n+use rustc_target::spec::PanicStrategy;\n use std::borrow::Cow;\n use std::iter;\n \n@@ -978,7 +979,7 @@ fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n \n fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n     // Nothing can unwind when landing pads are off.\n-    if tcx.sess.no_landing_pads() {\n+    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n         return false;\n     }\n "}, {"sha": "3bffafa1b2f9ce27bc9ff50b652d7029936291f4", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -5,6 +5,7 @@ use crate::transform::{MirPass, MirSource};\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_target::spec::PanicStrategy;\n \n pub struct NoLandingPads<'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -23,7 +24,7 @@ impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n }\n \n pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    if tcx.sess.no_landing_pads() {\n+    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n         NoLandingPads::new(tcx).visit_body(body);\n     }\n }"}, {"sha": "a86ef7f2f522ad314ad66cdb4031a3d54c929575", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -3,14 +3,15 @@ use crate::util::patch::MirPatch;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_target::spec::PanicStrategy;\n \n /// A pass that removes noop landing pads and replaces jumps to them with\n /// `None`. This is important because otherwise LLVM generates terrible\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    if tcx.sess.no_landing_pads() {\n+    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n         return;\n     }\n     debug!(\"remove_noop_landing_pads({:?})\", body);"}, {"sha": "e2f75e6f227f15f5d6680af687d59bc43b3036cc", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -536,11 +536,6 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, _abi: Abi) -> b\n         return false;\n     }\n \n-    // We cannot add landing pads, so don't add one.\n-    if tcx.sess.no_landing_pads() {\n-        return false;\n-    }\n-\n     // This is a special case: some functions have a C abi but are meant to\n     // unwind anyway. Don't stop them.\n     match unwind_attr {"}, {"sha": "be78d46b981964de8061f75c09f62b1d41c13023", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -878,8 +878,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"omit DWARF address ranges that give faster lookups\"),\n     no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n         \"execute lints separately; allows benchmarking individual lints\"),\n-    no_landing_pads: bool = (false, parse_no_flag, [TRACKED],\n-        \"omit landing pads for unwinding\"),\n     no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n     no_link: bool = (false, parse_no_flag, [TRACKED],"}, {"sha": "3b7c2f268ce5d08b94b58cae9764617c6729371a", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -540,9 +540,6 @@ impl Session {\n         self.opts.debugging_opts.fewer_names || !more_names\n     }\n \n-    pub fn no_landing_pads(&self) -> bool {\n-        self.opts.debugging_opts.no_landing_pads || self.panic_strategy() == PanicStrategy::Abort\n-    }\n     pub fn unstable_options(&self) -> bool {\n         self.opts.debugging_opts.unstable_options\n     }"}, {"sha": "c86e2865ca8a48970baf96c344a049503f35bde5", "filename": "src/test/mir-opt/generator-tiny.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -1,7 +1,8 @@\n //! Tests that generators that cannot return or unwind don't have unnecessary\n //! panic branches.\n \n-// compile-flags: -Zno-landing-pads\n+// compile-flags: -C panic=abort\n+// no-prefer-dynamic\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "75c2fb3d1307dbae31f6f7ef496987b8dde0c8b0", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bf459752d41a93eb6df0e9513de4ef807883a80c/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=bf459752d41a93eb6df0e9513de4ef807883a80c", "patch": "@@ -1,78 +1,78 @@\n // MIR for `main::{{closure}}#0` 0 generator_resume\n // generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n \n-fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n-    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:18:17: 18:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:20:9: 23:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:21:13: 21:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:21:13: 21:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:18:25: 18:25\n-    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:18:17: 18:19\n-    let mut _11: isize;                  // in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n+    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n+    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n+    let mut _11: isize;                  // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:19:13: 19:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))); // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]))); // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:19:18: 19:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))) = 3; // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:21:17: 21:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:21:18: 21:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n-        _8 = const callee() -> bb4;      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:17: 22:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n+        _8 = const callee() -> bb4;      // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n                                          // ty::Const\n                                          // + ty: fn() {callee}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/generator-tiny.rs:22:13: 22:19\n+                                         // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:22:21: 22:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/generator-tiny.rs:20:14: 23:10\n+                                         // + span: $DIR/generator-tiny.rs:21:14: 24:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     }\n }"}, {"sha": "f3384dc45f3d232aac913bb6db884f0cadee6e44", "filename": "src/test/run-fail/mir_codegen_no_landing_pads.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads.rs?ref=7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "patch": "@@ -1,27 +0,0 @@\n-// compile-flags: -Z no-landing-pads -C codegen-units=1\n-// error-pattern:converging_fn called\n-// ignore-cloudabi no std::process\n-\n-use std::io::{self, Write};\n-\n-struct Droppable;\n-impl Drop for Droppable {\n-    fn drop(&mut self) {\n-        ::std::process::exit(1)\n-    }\n-}\n-\n-fn converging_fn() {\n-    panic!(\"converging_fn called\")\n-}\n-\n-fn mir(d: Droppable) {\n-    let x = Droppable;\n-    converging_fn();\n-    drop(x);\n-    drop(d);\n-}\n-\n-fn main() {\n-    mir(Droppable);\n-}"}, {"sha": "08f6d578bb2e050049d8b3000eef20416af5b9c2", "filename": "src/test/run-fail/mir_codegen_no_landing_pads_diverging.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_codegen_no_landing_pads_diverging.rs?ref=7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "patch": "@@ -1,27 +0,0 @@\n-// compile-flags: -Z no-landing-pads -C codegen-units=1\n-// error-pattern:diverging_fn called\n-// ignore-cloudabi no std::process\n-\n-use std::io::{self, Write};\n-\n-struct Droppable;\n-impl Drop for Droppable {\n-    fn drop(&mut self) {\n-        ::std::process::exit(1)\n-    }\n-}\n-\n-fn diverging_fn() -> ! {\n-    panic!(\"diverging_fn called\")\n-}\n-\n-fn mir(d: Droppable) {\n-    let x = Droppable;\n-    diverging_fn();\n-    drop(x);\n-    drop(d);\n-}\n-\n-fn main() {\n-    mir(Droppable);\n-}"}]}