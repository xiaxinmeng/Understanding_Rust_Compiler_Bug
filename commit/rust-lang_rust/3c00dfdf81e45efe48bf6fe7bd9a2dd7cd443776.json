{"sha": "3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDBkZmRmODFlNDVlZmU0OGJmNmZlN2JkOWEyZGQ3Y2Q0NDM3NzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-28T23:46:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-30T01:23:23Z"}, "message": "Cleanup 'active' declare_features! with uniform style + sorting.", "tree": {"sha": "e7866f342ea3a14783f11ba7b524a8339acc80b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7866f342ea3a14783f11ba7b524a8339acc80b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "html_url": "https://github.com/rust-lang/rust/commit/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00859e3e653973120006aaf3227823062dde1ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/00859e3e653973120006aaf3227823062dde1ba7", "html_url": "https://github.com/rust-lang/rust/commit/00859e3e653973120006aaf3227823062dde1ba7"}], "stats": {"total": 461, "additions": 268, "deletions": 193}, "files": [{"sha": "65624f0b317a46deecab84d39bf8ae402068ed7b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 252, "deletions": 183, "changes": 435, "blob_url": "https://github.com/rust-lang/rust/blob/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "patch": "@@ -108,124 +108,227 @@ macro_rules! declare_features {\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n //\n+// Note that the features should be grouped into internal/user-facing\n+// and then sorted by version inside those groups.\n+// FIXME(60361): Enforce ^-- with tidy.\n+//\n // N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n // source, so take care when modifying it.\n \n declare_features! (\n-    (active, asm, \"1.0.0\", Some(29722), None),\n-    (active, concat_idents, \"1.0.0\", Some(29599), None),\n-    (active, link_args, \"1.0.0\", Some(29596), None),\n-    (active, log_syntax, \"1.0.0\", Some(29598), None),\n-    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n-    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n-    (active, thread_local, \"1.0.0\", Some(29594), None),\n-    (active, trace_macros, \"1.0.0\", Some(29598), None),\n+    // -------------------------------------------------------------------------\n+    // Internal feature gates.\n+    // -------------------------------------------------------------------------\n \n-    // rustc internal, for now\n+    // no tracking issue START\n+\n+    // Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n+\n+    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n-    (active, format_args_nl, \"1.29.0\", None, None),\n \n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n-    (active, linkage, \"1.0.0\", Some(29603), None),\n+    // Allows using the `#[stable]` and `#[unstable]` attributes.\n+    (active, staged_api, \"1.0.0\", None, None),\n \n-    // rustc internal\n+    // Allows using `#[allow_internal_unstable]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n+\n+    // Allows using `#[allow_internal_unsafe]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+\n+    // Allows using the macros:\n+    // + `__diagnostic_used`\n+    // + `__register_diagnostic`\n+    // +`__build_diagnostic_array`\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+\n+    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n+    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n+\n+    // no tracking issue END\n+\n+    // Allows using `#[link_name=\"llvm.*\"]`.\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+\n+    // Allows using `rustc_*` attributes (RFC 572).\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using `#[on_unimplemented(..)]` on traits.\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+\n+    // Allows using the `box $expr` syntax.\n     (active, box_syntax, \"1.0.0\", Some(49733), None),\n-    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n     (active, main, \"1.0.0\", Some(29634), None),\n-    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n-    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n-    (active, plugin, \"1.0.0\", Some(29597), None),\n-    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+\n+    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n-    (active, structural_match, \"1.8.0\", Some(31434), None),\n-    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Features specific to OIBIT (auto traits)\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n+    // Allows using the `#[fundamental]` attribute.\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n \n-    // Allows `#[staged_api]`.\n-    //\n-    // rustc internal\n-    (active, staged_api, \"1.0.0\", None, None),\n+    // Allows using the `rust-call` ABI.\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    // Allows `#![no_core]`.\n-    (active, no_core, \"1.3.0\", Some(29639), None),\n+    // Allows using the `#[linkage = \"..\"]` attribute.\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+\n+    // Allows features specific to OIBIT (auto traits).\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n-    // Allows the use of `box` in patterns (RFC 469).\n+    // Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n-    // Allows the use of the `unsafe_destructor_blind_to_params` attribute (RFC 1238).\n+    // no tracking issue START\n+\n+    // Allows using `#[prelude_import]` on glob `use` items.\n+    (active, prelude_import, \"1.2.0\", None, None),\n+\n+    // no tracking issue END\n+\n+    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n \n+    // FIXME(Centril): Investigate whether this gate actually has any effect.\n+    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n+\n+    // no tracking issue START\n+\n+    // Allows using `#[omit_gdb_pretty_printer_section]`.\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n+\n+    // Allows using the `vectorcall` ABI.\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n+\n+    // no tracking issue END\n+\n     // Allows using the `may_dangle` attribute (RFC 1327).\n     (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n-    // Allows the use of custom attributes (RFC 572).\n-    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n+    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n \n-    // Allows the use of `rustc_*` attributes (RFC 572).\n-    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n+    // Allows using the `#![panic_runtime]` attribute.\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows the use of non lexical lifetimes (RFC 2094).\n-    (active, nll, \"1.0.0\", Some(43234), None),\n+    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows the use of `#[allow_internal_unstable]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    //\n-    // rustc internal\n-    (active, allow_internal_unstable, \"1.0.0\", None, None),\n+    // no tracking issue START\n \n-    // Allows the use of `#[allow_internal_unsafe]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    //\n-    // rustc internal\n-    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+    // Allows identifying the `compiler_builtins` crate.\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n \n-    // Allows the use of slice patterns (issue #23121).\n-    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n+    // Allows using the `unadjusted` ABI; perma-unstable.\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    // Allows the definition of `const` functions with some advanced features.\n-    (active, const_fn, \"1.2.0\", Some(57563), None),\n+    // Allows identifying crates that contain sanitizer runtimes.\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n-    // Allows accessing fields of unions inside `const` functions.\n-    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n+    // Used to identify crates that contain the profiler runtime.\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n \n-    // Allows casting raw pointers to `usize` during const eval.\n-    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n+    // Allows using the `thiscall` ABI.\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n \n-    // Allows dereferencing raw pointers during const eval.\n-    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    (active, allocator_internals, \"1.20.0\", None, None),\n \n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n-    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+    // Allows using the `format_args_nl` macro.\n+    (active, format_args_nl, \"1.29.0\", None, None),\n \n-    // Allows comparing raw pointers during const eval.\n-    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n+    // no tracking issue END\n \n-    // Allows panicking during const eval (producing compile-time errors).\n-    (active, const_panic, \"1.30.0\", Some(51999), None),\n+    // Added for testing E0705; perma-unstable.\n+    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n-    // Allows using `#[prelude_import]` on glob `use` items.\n-    //\n-    // rustc internal\n-    (active, prelude_import, \"1.2.0\", None, None),\n+    // -------------------------------------------------------------------------\n+    // Actual feature gates (target features).\n+    // -------------------------------------------------------------------------\n \n-    // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+    // FIXME: Document these and merge with the list below.\n+\n+    // Unstable `#[target_feature]` directives.\n+    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n+    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n+    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n+    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n+\n+    // -------------------------------------------------------------------------\n+    // Actual feature gates.\n+    // -------------------------------------------------------------------------\n+\n+    // Allows using `asm!` macro with which inline assembly can be embedded.\n+    (active, asm, \"1.0.0\", Some(29722), None),\n+\n+    // Allows using the `concat_idents!` macro with which identifiers can be concatenated.\n+    (active, concat_idents, \"1.0.0\", Some(29599), None),\n+\n+    // Allows using the `#[link_args]` attribute.\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+\n+    // Allows defining identifiers beyond ASCII.\n+    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n+\n+    // Allows using `#[plugin_registrar]` on functions.\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#![plugin(myplugin)]`.\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#[thread_local]` on `static` items.\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+\n+    // Allows using the `log_syntax!` macro.\n+    (active, log_syntax, \"1.0.0\", Some(29598), None),\n+\n+    // Allows using the `trace_macros!` macro.\n+    (active, trace_macros, \"1.0.0\", Some(29598), None),\n+\n+    // Allows the use of SIMD types in functions declared in `extern` blocks.\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+\n+    // Allows using custom attributes (RFC 572).\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using non lexical lifetimes (RFC 2094).\n+    (active, nll, \"1.0.0\", Some(43234), None),\n+\n+    // Allows using slice patterns.\n+    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n+\n+    // Allows the definition of `const` functions with some advanced features.\n+    (active, const_fn, \"1.2.0\", Some(57563), None),\n \n     // Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n+    // Allows `#![no_core]`.\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n+\n+    // Allows default type parameters to influence type inference.\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+\n     // Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n@@ -237,17 +340,12 @@ declare_features! (\n     // Permits specifying whether a function should permit unwinding or abort on unwind.\n     (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n-    // Allows the use of `#[naked]` on functions.\n+    // Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n     // Allows `#[no_debug]`.\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // Allows `#[omit_gdb_pretty_printer_section]`.\n-    //\n-    // rustc internal\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n-\n     // Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n@@ -257,19 +355,16 @@ declare_features! (\n     // Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n-    // rustc internal\n-    (active, abi_vectorcall, \"1.7.0\", None, None),\n-\n-    // Allows `X..Y` patterns.\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n-\n-    // impl specialization (RFC 1210)\n+    // Allows specialization of implementations (RFC 1210).\n     (active, specialization, \"1.7.0\", Some(31844), None),\n \n     // Allows `cfg(target_has_atomic = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n-    // The `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    // Allows `X..Y` patterns.\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n+\n+    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n@@ -278,175 +373,143 @@ declare_features! (\n     // Allows untagged unions `union U { ... }`.\n     (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n-    // Used to identify the `compiler_builtins` crate.\n-    //\n-    // rustc internal.\n-    (active, compiler_builtins, \"1.13.0\", None, None),\n-\n     // Allows `#[link(..., cfg(..))]`.\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n     // Allows `extern \"ptx-*\" fn()`.\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n-    // The `repr(i128)` annotation for enums.\n+    // Allows the `#[repr(i128)]` attribute for enums.\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n-    // Allows the use of `#[ffi_returns_twice]` on foreign functions.\n-    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n-\n-    // The `unadjusted` ABI; perma-unstable.\n-    //\n-    // rustc internal\n-    (active, abi_unadjusted, \"1.16.0\", None, None),\n-\n-    // Declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412), None),\n-\n     // Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n     // Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n-    // Used to identify crates that contain sanitizer runtimes.\n-    //\n-    // rustc internal\n-    (active, sanitizer_runtime, \"1.17.0\", None, None),\n-\n-    // Used to identify crates that contain the profiler runtime.\n-    //\n-    // rustc internal\n-    (active, profiler_runtime, \"1.18.0\", None, None),\n+    // Allows declarative macros 2.0 (`macro`).\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n     // Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows the `try {...}` expression.\n-    (active, try_blocks, \"1.29.0\", Some(31436), None),\n-\n     // Allows module-level inline assembly by way of `global_asm!()`.\n     (active, global_asm, \"1.18.0\", Some(35119), None),\n \n     // Allows overlapping impls of marker traits.\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n-    // Trait attribute to allow overlapping impls.\n-    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n-\n-    // rustc internal\n-    (active, abi_thiscall, \"1.19.0\", None, None),\n-\n     // Allows a test to fail without failing the whole suite.\n     (active, allow_fail, \"1.19.0\", Some(46488), None),\n \n     // Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n-    // Generators\n+    // Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n \n-    // Trait aliases\n-    (active, trait_alias, \"1.24.0\", Some(41517), None),\n-\n-    // rustc internal\n-    (active, allocator_internals, \"1.20.0\", None, None),\n-\n-    // `#[doc(cfg(...))]`\n+    // Allows `#[doc(cfg(...))]`.\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n-    // `#[doc(masked)]`\n+\n+    // Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n-    // `#[doc(spotlight)]`\n+\n+    // Allows `#[doc(spotlight)]`.\n     (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n-    // `#[doc(include = \"some-file\")]`\n+\n+    // Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    // Future-proofing enums/structs with `#[non_exhaustive]` attribute (RFC 2008).\n+    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Adds `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n \n-    // extern types\n+    // Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n     // Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n-    // In-band lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // Generic associated types (RFC 1598)\n+    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // Infer static outlives requirements (RFC 2093).\n+    // Allows defining `trait X = A + B;` alias items.\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n+\n+    // Allows infering `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n     // Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n-    // `existential type`\n-    (active, existential_type, \"1.28.0\", Some(34511), None),\n+    // Allows accessing fields of unions inside `const` functions.\n+    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    // unstable `#[target_feature]` directives\n-    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n-    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n-    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n-    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n+    // Allows casting raw pointers to `usize` during const eval.\n+    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n \n-    // Allows macro invocations on modules expressions and statements and\n-    // procedural macros to expand to non-items.\n-    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n+    // Allows dereferencing raw pointers during const eval.\n+    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+\n+    // Allows comparing raw pointers during const eval.\n+    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n-    // `#[doc(alias = \"...\")]`\n+    // Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // inconsistent bounds in where clauses\n+    // Allows defining `existential type`s.\n+    (active, existential_type, \"1.28.0\", Some(34511), None),\n+\n+    // Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n-    // `'a: { break 'a; }`\n+    // Allows `'a: { break 'a; }`.\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Exhaustive pattern matching on `usize` and `isize`.\n-    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n-\n-    // `#[doc(keyword = \"...\")]`\n+    // Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n     // Allows async and await syntax.\n     (active, async_await, \"1.28.0\", Some(50547), None),\n \n-    // `#[alloc_error_handler]`\n+    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n+    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+\n+    // Allows using `try {...}` expressions.\n+    (active, try_blocks, \"1.29.0\", Some(31436), None),\n+\n+    // Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n \n+    // Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    // Added for testing E0705; perma-unstable.\n-    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n+    // Allows panicking during const eval (producing compile-time errors).\n+    (active, const_panic, \"1.30.0\", Some(51999), None),\n+\n+    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+\n+    // Allows macro invocations on modules expressions and statements and\n+    // procedural macros to expand to non-items.\n+    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n \n     // Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n-    // `#![test_runner]`\n-    // `#[test_case]`\n+    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n-    // non-builtin attributes in inner attribute position\n+    // Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Allow mixing of bind-by-move in patterns and references to\n-    // those identifiers in guards.\n+    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n \n     // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n@@ -455,25 +518,32 @@ declare_features! (\n     // Allows `const _: TYPE = VALUE`.\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n \n-    // Adds `reason` and `expect` lint attributes.\n+    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n     // Allows paths to enum variants on type aliases.\n     (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n \n-    // Re-Rebalance coherence\n+    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n+\n+    // Allows relaxing the coherence rules such that\n+    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n-    // Const generic types.\n+    // Allows using `#[ffi_returns_twice]` on foreign functions.\n+    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n+\n+    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (active, const_generics, \"1.34.0\", Some(44580), None),\n \n-    // #[optimize(X)]\n+    // Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n-    // #[repr(align(X))] on enums\n+    // Allows using `#[repr(align(X))]` on enums.\n     (active, repr_align_enum, \"1.34.0\", Some(57996), None),\n \n-    // Allows the use of C-variadics\n+    // Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n );\n \n@@ -499,7 +569,6 @@ declare_features! (\n     (removed, visible_private_types, \"1.0.0\", None, None, None),\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n     // Allows using items which are missing stability attributes\n-    // rustc internal\n     (removed, unmarked_api, \"1.0.0\", None, None, None),\n     (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n     (removed, allocator, \"1.0.0\", None, None, None),"}, {"sha": "8239fd9dce0c14d98fdf54e6de40908b97b4b420", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=3c00dfdf81e45efe48bf6fe7bd9a2dd7cd443776", "patch": "@@ -173,18 +173,25 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n     let contents = t!(fs::read_to_string(base_src_path.join(\"libsyntax/feature_gate.rs\")));\n \n     // We allow rustc-internal features to omit a tracking issue.\n-    // These features must be marked with a `// rustc internal` in its own group.\n-    let mut next_feature_is_rustc_internal = false;\n+    // To make tidy accept omitting a tracking issue, group the list of features\n+    // without one inside `// no tracking issue START` and `// no tracking issue END`.\n+    let mut next_feature_omits_tracking_issue = false;\n \n     contents.lines().zip(1..)\n         .filter_map(|(line, line_number)| {\n             let line = line.trim();\n-            if line.starts_with(\"// rustc internal\") {\n-                next_feature_is_rustc_internal = true;\n-                return None;\n-            } else if line.is_empty() {\n-                next_feature_is_rustc_internal = false;\n-                return None;\n+\n+            // Within START and END, the tracking issue can be omitted.\n+            match line {\n+                \"// no tracking issue START\" => {\n+                    next_feature_omits_tracking_issue = true;\n+                    return None;\n+                }\n+                \"// no tracking issue END\" => {\n+                    next_feature_omits_tracking_issue = false;\n+                    return None;\n+                }\n+                _ => {}\n             }\n \n             let mut parts = line.split(',');\n@@ -198,7 +205,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n             let issue_str = parts.next().unwrap().trim();\n             let tracking_issue = if issue_str.starts_with(\"None\") {\n-                if level == Status::Unstable && !next_feature_is_rustc_internal {\n+                if level == Status::Unstable && !next_feature_omits_tracking_issue {\n                     *bad = true;\n                     tidy_error!(\n                         bad,\n@@ -209,7 +216,6 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n                 }\n                 None\n             } else {\n-                next_feature_is_rustc_internal = false;\n                 let s = issue_str.split('(').nth(1).unwrap().split(')').nth(0).unwrap();\n                 Some(s.parse().unwrap())\n             };"}]}