{"sha": "7d45d8a29a55aad636c00108854c15be134870d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDVkOGEyOWE1NWFhZDYzNmMwMDEwODg1NGMxNWJlMTM0ODcwZDM=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-20T15:31:39Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-20T15:31:39Z"}, "message": "Split `match_single_binding` tests in 2 files (too many lines for CI)", "tree": {"sha": "e556f31698031586e7ab63df714ff001bbb36911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e556f31698031586e7ab63df714ff001bbb36911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d45d8a29a55aad636c00108854c15be134870d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d45d8a29a55aad636c00108854c15be134870d3", "html_url": "https://github.com/rust-lang/rust/commit/7d45d8a29a55aad636c00108854c15be134870d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d45d8a29a55aad636c00108854c15be134870d3/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00a2d7ad7e1a041e47f618a019702bfb37eca680", "url": "https://api.github.com/repos/rust-lang/rust/commits/00a2d7ad7e1a041e47f618a019702bfb37eca680", "html_url": "https://github.com/rust-lang/rust/commit/00a2d7ad7e1a041e47f618a019702bfb37eca680"}], "stats": {"total": 199, "additions": 109, "deletions": 90}, "files": [{"sha": "526e94b10bd0ee460bf57dc993222fc47da3b2c8", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -115,33 +115,4 @@ fn main() {\n         // =>\n         _ => println!(\"Not an array index start\"),\n     }\n-    // Lint (additional curly braces needed, see #6572)\n-    struct AppendIter<I>\n-    where\n-        I: Iterator,\n-    {\n-        inner: Option<(I, <I as Iterator>::Item)>,\n-    }\n-\n-    #[allow(dead_code)]\n-    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n-        match &iter.inner {\n-            Some((iter, _item)) => {\n-                let (min, max) = iter.size_hint();\n-                (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n-            },\n-            None => (0, Some(0)),\n-        }\n-    }\n-    // Lint (no additional curly braces needed)\n-    let opt = Some((5, 2));\n-    let get_tup = || -> (i32, i32) { (1, 2) };\n-    match opt {\n-        #[rustfmt::skip]\n-        Some((first, _second)) => {\n-            let (a, b) = get_tup();\n-            println!(\"a {:?} and b {:?}\", a, b);\n-        },\n-        None => println!(\"nothing\"),\n-    }\n }"}, {"sha": "6a2ca7c5e9340d132cea73a483a703888ea2ee69", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -132,33 +132,4 @@ fn main() {\n         // =>\n         _ => println!(\"Not an array index start\"),\n     }\n-    // Lint (additional curly braces needed, see #6572)\n-    struct AppendIter<I>\n-    where\n-        I: Iterator,\n-    {\n-        inner: Option<(I, <I as Iterator>::Item)>,\n-    }\n-\n-    #[allow(dead_code)]\n-    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n-        match &iter.inner {\n-            Some((iter, _item)) => match iter.size_hint() {\n-                (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n-            },\n-            None => (0, Some(0)),\n-        }\n-    }\n-    // Lint (no additional curly braces needed)\n-    let opt = Some((5, 2));\n-    let get_tup = || -> (i32, i32) { (1, 2) };\n-    match opt {\n-        #[rustfmt::skip]\n-        Some((first, _second)) => {\n-            match get_tup() {\n-                (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n-            }\n-        },\n-        None => println!(\"nothing\"),\n-    }\n }"}, {"sha": "cbbf5d29c02471a024d0ef8c072768030ed9d026", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -178,36 +178,5 @@ LL | |         _ => println!(\"Single branch\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"Single branch\");`\n \n-error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:146:36\n-   |\n-LL |               Some((iter, _item)) => match iter.size_hint() {\n-   |  ____________________________________^\n-LL | |                 (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n-LL | |             },\n-   | |_____________^\n-   |\n-help: consider using `let` statement\n-   |\n-LL |             Some((iter, _item)) => {\n-LL |                 let (min, max) = iter.size_hint();\n-LL |                 (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n-LL |             },\n-   |\n-\n-error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:158:13\n-   |\n-LL | /             match get_tup() {\n-LL | |                 (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n-LL | |             }\n-   | |_____________^\n-   |\n-help: consider using `let` statement\n-   |\n-LL |             let (a, b) = get_tup();\n-LL |             println!(\"a {:?} and b {:?}\", a, b);\n-   |\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "e73a85b73d7c67b3a74882b04a1cc66d32c88848", "filename": "tests/ui/match_single_binding2.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.fixed?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_single_binding)]\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => {\n+                let (min, max) = iter.size_hint();\n+                (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            let (a, b) = get_tup();\n+            println!(\"a {:?} and b {:?}\", a, b);\n+        },\n+        None => println!(\"nothing\"),\n+    }\n+}"}, {"sha": "7362cb390e5e8ad44539d29ff6ebb3503fe7c72e", "filename": "tests/ui/match_single_binding2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.rs?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_single_binding)]\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => match iter.size_hint() {\n+                (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            match get_tup() {\n+                (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+            }\n+        },\n+        None => println!(\"nothing\"),\n+    }\n+}"}, {"sha": "bc18d191aa3f8effc55934d108ec1387faf4bd74", "filename": "tests/ui/match_single_binding2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d45d8a29a55aad636c00108854c15be134870d3/tests%2Fui%2Fmatch_single_binding2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.stderr?ref=7d45d8a29a55aad636c00108854c15be134870d3", "patch": "@@ -0,0 +1,34 @@\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding2.rs:18:36\n+   |\n+LL |               Some((iter, _item)) => match iter.size_hint() {\n+   |  ____________________________________^\n+LL | |                 (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::match-single-binding` implied by `-D warnings`\n+help: consider using `let` statement\n+   |\n+LL |             Some((iter, _item)) => {\n+LL |                 let (min, max) = iter.size_hint();\n+LL |                 (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+LL |             },\n+   |\n+\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding2.rs:31:13\n+   |\n+LL | /             match get_tup() {\n+LL | |                 (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+LL | |             }\n+   | |_____________^\n+   |\n+help: consider using `let` statement\n+   |\n+LL |             let (a, b) = get_tup();\n+LL |             println!(\"a {:?} and b {:?}\", a, b);\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}]}