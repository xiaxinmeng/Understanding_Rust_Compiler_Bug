{"sha": "b22679366a6faab9f3790697f8be0a1dce38c285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjY3OTM2NmE2ZmFhYjlmMzc5MDY5N2Y4YmUwYTFkY2UzOGMyODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T15:49:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T15:49:36Z"}, "message": "Auto merge of #45775 - petrochenkov:patnopat, r=nikomatsakis\n\nAccept interpolated patterns in trait method parameters\n\nPermit this, basically\n```rust\nmacro_rules! m {\n    ($pat: pat) => {\n        trait Tr {\n            fn f($pat: u8) {}\n        }\n    }\n}\n```\nit previously caused a parsing error during expansion because trait methods accept only very restricted set of patterns during parsing due to ambiguities caused by [anonymous parameters](https://github.com/rust-lang/rust/issues/41686), and this set didn't include interpolated patterns.\n\nSome outdated messages from \"no patterns allowed\" errors are also removed.\n\nAddresses https://github.com/rust-lang/rust/issues/35203#issuecomment-341937159", "tree": {"sha": "2b94c0aedcf667fd9b50e240e3cc6537a42a36d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b94c0aedcf667fd9b50e240e3cc6537a42a36d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22679366a6faab9f3790697f8be0a1dce38c285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22679366a6faab9f3790697f8be0a1dce38c285", "html_url": "https://github.com/rust-lang/rust/commit/b22679366a6faab9f3790697f8be0a1dce38c285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22679366a6faab9f3790697f8be0a1dce38c285/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f", "html_url": "https://github.com/rust-lang/rust/commit/965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f"}, {"sha": "f7b4b88840d872909a67e5f9623281e3e2165fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b4b88840d872909a67e5f9623281e3e2165fba", "html_url": "https://github.com/rust-lang/rust/commit/f7b4b88840d872909a67e5f9623281e3e2165fba"}], "stats": {"total": 113, "additions": 64, "deletions": 49}, "files": [{"sha": "40adc6bcb122fb727542c02d9504f246d7593502", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -72,7 +72,8 @@ impl<'a> AstValidator<'a> {\n             match arg.pat.node {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n                 PatKind::Wild => {}\n-                PatKind::Ident(..) => report_err(arg.pat.span, true),\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Mutable), _, None) =>\n+                    report_err(arg.pat.span, true),\n                 _ => report_err(arg.pat.span, false),\n             }\n         }\n@@ -151,14 +152,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match ty.node {\n             TyKind::BareFn(ref bfty) => {\n                 self.check_decl_no_pat(&bfty.decl, |span, _| {\n-                    let mut err = struct_span_err!(self.session,\n-                                                   span,\n-                                                   E0561,\n-                                                   \"patterns aren't allowed in function pointer \\\n-                                                    types\");\n-                    err.span_note(span,\n-                                  \"this is a recent error, see issue #35203 for more details\");\n-                    err.emit();\n+                    struct_span_err!(self.session, span, E0561,\n+                                     \"patterns aren't allowed in function pointer types\").emit();\n                 });\n             }\n             TyKind::TraitObject(ref bounds, ..) => {\n@@ -260,12 +255,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);\n                         if block.is_none() {\n-                            self.check_decl_no_pat(&sig.decl, |span, _| {\n-                                self.session.buffer_lint(\n-                                    lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n-                                    trait_item.id, span,\n-                                    \"patterns aren't allowed in methods \\\n-                                     without bodies\");\n+                            self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+                                if mut_ident {\n+                                    self.session.buffer_lint(\n+                                        lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                                        trait_item.id, span,\n+                                        \"patterns aren't allowed in methods without bodies\");\n+                                } else {\n+                                    struct_span_err!(self.session, span, E0642,\n+                                        \"patterns aren't allowed in methods without bodies\").emit();\n+                                }\n                             });\n                         }\n                     }\n@@ -299,18 +298,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match fi.node {\n             ForeignItemKind::Fn(ref decl, _) => {\n-                self.check_decl_no_pat(decl, |span, is_recent| {\n-                    let mut err = struct_span_err!(self.session,\n-                                                   span,\n-                                                   E0130,\n-                                                   \"patterns aren't allowed in foreign function \\\n-                                                    declarations\");\n-                    err.span_label(span, \"pattern not allowed in foreign function\");\n-                    if is_recent {\n-                        err.span_note(span,\n-                                      \"this is a recent error, see issue #35203 for more details\");\n-                    }\n-                    err.emit();\n+                self.check_decl_no_pat(decl, |span, _| {\n+                    struct_span_err!(self.session, span, E0130,\n+                                     \"patterns aren't allowed in foreign function declarations\")\n+                        .span_label(span, \"pattern not allowed in foreign function\").emit();\n                 });\n             }\n             ForeignItemKind::Static(..) | ForeignItemKind::Ty => {}"}, {"sha": "3597a6f18287e62e2e9d41640e2b918f8587b84e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -264,4 +264,5 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n+    E0642, // patterns aren't allowed in methods without bodies\n }"}, {"sha": "c1819307928ba0fe18af88ad93b43ebbdb1a4d94", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -360,10 +360,6 @@ impl TokenType {\n     }\n }\n \n-fn is_ident_or_underscore(t: &token::Token) -> bool {\n-    t.is_ident() || *t == token::Underscore\n-}\n-\n // Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n // `IDENT<<u8 as Trait>::AssocTy>`, `IDENT(u8, u8) -> u8`.\n fn can_continue_type_after_ident(t: &token::Token) -> bool {\n@@ -1625,23 +1621,19 @@ impl<'a> Parser<'a> {\n         Ok(MutTy { ty: t, mutbl: mutbl })\n     }\n \n-    pub fn is_named_argument(&mut self) -> bool {\n+    fn is_named_argument(&mut self) -> bool {\n         let offset = match self.token {\n-            token::BinOp(token::And) |\n-            token::AndAnd => 1,\n+            token::Interpolated(ref nt) => match nt.0 {\n+                token::NtPat(..) => return self.look_ahead(1, |t| t == &token::Colon),\n+                _ => 0,\n+            }\n+            token::BinOp(token::And) | token::AndAnd => 1,\n             _ if self.token.is_keyword(keywords::Mut) => 1,\n-            _ => 0\n+            _ => 0,\n         };\n \n-        debug!(\"parser is_named_argument offset:{}\", offset);\n-\n-        if offset == 0 {\n-            is_ident_or_underscore(&self.token)\n-                && self.look_ahead(1, |t| *t == token::Colon)\n-        } else {\n-            self.look_ahead(offset, |t| is_ident_or_underscore(t))\n-                && self.look_ahead(offset + 1, |t| *t == token::Colon)\n-        }\n+        self.look_ahead(offset, |t| t.is_ident() || t == &token::Underscore) &&\n+        self.look_ahead(offset + 1, |t| t == &token::Colon)\n     }\n \n     /// This version of parse arg doesn't necessarily require"}, {"sha": "4d2412c34a5faf46984fe06e6326ba2f68b4641d", "filename": "src/test/compile-fail/no-patterns-in-args-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -14,7 +14,6 @@ trait Tr {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n                         //~^ WARN was previously accepted\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n-                     //~^ WARN was previously accepted\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     #[allow(anonymous_parameters)]"}, {"sha": "f85ce8f57ea716e174e9e62cfa31f32a5fcddeb2", "filename": "src/test/compile-fail/no-patterns-in-args-macro.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ($pat: pat) => {\n+        trait Tr {\n+            fn trait_method($pat: u8);\n+        }\n+\n+        type A = fn($pat: u8);\n+\n+        extern {\n+            fn foreign_fn($pat: u8);\n+        }\n+    }\n+}\n+\n+mod good_pat {\n+    m!(good_pat); // OK\n+}\n+\n+mod bad_pat {\n+    m!((bad, pat));\n+    //~^ ERROR patterns aren't allowed in function pointer types\n+    //~| ERROR patterns aren't allowed in foreign function declarations\n+    //~| ERROR patterns aren't allowed in methods without bodies\n+}\n+\n+fn main() {}"}, {"sha": "081d6caaa13c9387b28f2d2eb0754c3c7b877526", "filename": "src/test/compile-fail/no-patterns-in-args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22679366a6faab9f3790697f8be0a1dce38c285/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs?ref=b22679366a6faab9f3790697f8be0a1dce38c285", "patch": "@@ -11,21 +11,17 @@\n extern {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                         //~^ NOTE pattern not allowed in foreign function\n-                        //~| NOTE this is a recent error\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                      //~^ NOTE pattern not allowed in foreign function\n     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                         //~^ NOTE pattern not allowed in foreign function\n-                        //~| NOTE this is a recent error\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     // fn g3(u8); // Not yet\n }\n \n type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n-                           //~^ NOTE this is a recent error\n type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n-                        //~^ NOTE this is a recent error\n type B1 = fn(arg: u8); // OK\n type B2 = fn(_: u8); // OK\n type B3 = fn(u8); // OK"}]}