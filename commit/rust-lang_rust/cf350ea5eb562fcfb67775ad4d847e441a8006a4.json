{"sha": "cf350ea5eb562fcfb67775ad4d847e441a8006a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzUwZWE1ZWI1NjJmY2ZiNjc3NzVhZDRkODQ3ZTQ0MWE4MDA2YTQ=", "commit": {"author": {"name": "bluss", "email": "bluss", "date": "2014-12-19T20:54:50Z"}, "committer": {"name": "bluss", "email": "bluss", "date": "2014-12-19T20:54:50Z"}, "message": "hashset: Clean up and rename the HashSet iterators\n\nThis removes the type SetAlgebraItems and replaces it with the\nstructs Intersection and Difference.\n\nRename the existing HashSet iterators according to RFC #344:\n\n* SetItems -> Iter\n* SetMoveItems -> IntoIter\n* Remaining set combination iterators renamed to Union and SymmetricDifference\n\n[breaking-change]", "tree": {"sha": "ee9d0adb2276f1f9be811868a73ea229987b25db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9d0adb2276f1f9be811868a73ea229987b25db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf350ea5eb562fcfb67775ad4d847e441a8006a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf350ea5eb562fcfb67775ad4d847e441a8006a4", "html_url": "https://github.com/rust-lang/rust/commit/cf350ea5eb562fcfb67775ad4d847e441a8006a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf350ea5eb562fcfb67775ad4d847e441a8006a4/comments", "author": null, "committer": null, "parents": [{"sha": "22a9f250b5e2de64c13c0f056aec13eb086ef79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a9f250b5e2de64c13c0f056aec13eb086ef79d", "html_url": "https://github.com/rust-lang/rust/commit/22a9f250b5e2de64c13c0f056aec13eb086ef79d"}], "stats": {"total": 129, "additions": 83, "deletions": 46}, "files": [{"sha": "99fe6696ec78d92157169245f10142608c1fa763", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 83, "deletions": 46, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/cf350ea5eb562fcfb67775ad4d847e441a8006a4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf350ea5eb562fcfb67775ad4d847e441a8006a4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=cf350ea5eb562fcfb67775ad4d847e441a8006a4", "patch": "@@ -17,7 +17,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, IteratorExt, FromIterator, Map, FilterMap, Chain, Repeat, Zip, Extend, repeat};\n+use iter::{Iterator, IteratorExt, FromIterator, Map, Chain, Extend};\n use option::Option::{Some, None, mod};\n use result::Result::{Ok, Err};\n \n@@ -250,8 +250,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// }\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn iter<'a>(&'a self) -> SetItems<'a, T> {\n-        SetItems { iter: self.map.keys() }\n+    pub fn iter<'a>(&'a self) -> Iter<'a, T> {\n+        Iter { iter: self.map.keys() }\n     }\n \n     /// Creates a consuming iterator, that is, one that moves each value out\n@@ -275,10 +275,10 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// }\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn into_iter(self) -> SetMoveItems<T> {\n+    pub fn into_iter(self) -> IntoIter<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n \n-        SetMoveItems { iter: self.map.into_iter().map(first) }\n+        IntoIter { iter: self.map.into_iter().map(first) }\n     }\n \n     /// Visit the values representing the difference.\n@@ -304,14 +304,11 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// assert_eq!(diff, [4i].iter().map(|&x| x).collect());\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn difference<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n-        fn filter<'a, T, S, H>((other, elt): (&HashSet<T, H>, &'a T)) -> Option<&'a T> where\n-            T: Eq + Hash<S>, H: Hasher<S>\n-        {\n-            if !other.contains(elt) { Some(elt) } else { None }\n+    pub fn difference<'a>(&'a self, other: &'a HashSet<T, H>) -> Difference<'a, T, H> {\n+        Difference {\n+            iter: self.iter(),\n+            other: other,\n         }\n-\n-        SetAlgebraItems { iter: repeat(other).zip(self.iter()).filter_map(filter) }\n     }\n \n     /// Visit the values representing the symmetric difference.\n@@ -336,8 +333,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn symmetric_difference<'a>(&'a self, other: &'a HashSet<T, H>)\n-        -> SymDifferenceItems<'a, T, H> {\n-        SymDifferenceItems { iter: self.difference(other).chain(other.difference(self)) }\n+        -> SymmetricDifference<'a, T, H> {\n+        SymmetricDifference { iter: self.difference(other).chain(other.difference(self)) }\n     }\n \n     /// Visit the values representing the intersection.\n@@ -358,14 +355,11 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// assert_eq!(diff, [2i, 3].iter().map(|&x| x).collect());\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n-        fn filter<'a, T, S, H>((other, elt): (&HashSet<T, H>, &'a T)) -> Option<&'a T> where\n-            T: Eq + Hash<S>, H: Hasher<S>\n-        {\n-            if other.contains(elt) { Some(elt) } else { None }\n+    pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>) -> Intersection<'a, T, H> {\n+        Intersection {\n+            iter: self.iter(),\n+            other: other,\n         }\n-\n-        SetAlgebraItems { iter: repeat(other).zip(self.iter()).filter_map(filter) }\n     }\n \n     /// Visit the values representing the union.\n@@ -386,8 +380,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// assert_eq!(diff, [1i, 2, 3, 4].iter().map(|&x| x).collect());\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn union<'a>(&'a self, other: &'a HashSet<T, H>) -> UnionItems<'a, T, H> {\n-        UnionItems { iter: self.iter().chain(other.difference(self)) }\n+    pub fn union<'a>(&'a self, other: &'a HashSet<T, H>) -> Union<'a, T, H> {\n+        Union { iter: self.iter().chain(other.difference(self)) }\n     }\n \n     /// Return the number of elements in the set\n@@ -617,58 +611,101 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n }\n \n /// HashSet iterator\n-pub struct SetItems<'a, K: 'a> {\n+pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>\n }\n \n /// HashSet move iterator\n-pub struct SetMoveItems<K> {\n+pub struct IntoIter<K> {\n     iter: Map<(K, ()), K, MoveEntries<K, ()>, fn((K, ())) -> K>\n }\n \n-// `Repeat` is used to feed the filter closure an explicit capture\n-// of a reference to the other set\n-/// Set operations iterator, used directly for intersection and difference\n-pub struct SetAlgebraItems<'a, T: 'a, H: 'a> {\n-    iter: FilterMap<\n-        (&'a HashSet<T, H>, &'a T),\n-        &'a T,\n-        Zip<Repeat<&'a HashSet<T, H>>, SetItems<'a, T>>,\n-        for<'b> fn((&HashSet<T, H>, &'b T)) -> Option<&'b T>,\n-    >\n+/// Intersection iterator\n+pub struct Intersection<'a, T: 'a, H: 'a> {\n+    // iterator of the first set\n+    iter: Iter<'a, T>,\n+    // the second set\n+    other: &'a HashSet<T, H>,\n+}\n+\n+/// Difference iterator\n+pub struct Difference<'a, T: 'a, H: 'a> {\n+    // iterator of the first set\n+    iter: Iter<'a, T>,\n+    // the second set\n+    other: &'a HashSet<T, H>,\n }\n \n /// Symmetric difference iterator.\n-pub struct SymDifferenceItems<'a, T: 'a, H: 'a> {\n-    iter: Chain<SetAlgebraItems<'a, T, H>, SetAlgebraItems<'a, T, H>>\n+pub struct SymmetricDifference<'a, T: 'a, H: 'a> {\n+    iter: Chain<Difference<'a, T, H>, Difference<'a, T, H>>\n }\n \n /// Set union iterator.\n-pub struct UnionItems<'a, T: 'a, H: 'a> {\n-    iter: Chain<SetItems<'a, T>, SetAlgebraItems<'a, T, H>>\n+pub struct Union<'a, T: 'a, H: 'a> {\n+    iter: Chain<Iter<'a, T>, Difference<'a, T, H>>\n }\n \n-impl<'a, K> Iterator<&'a K> for SetItems<'a, K> {\n+impl<'a, K> Iterator<&'a K> for Iter<'a, K> {\n     fn next(&mut self) -> Option<&'a K> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<K> Iterator<K> for SetMoveItems<K> {\n+impl<K> Iterator<K> for IntoIter<K> {\n     fn next(&mut self) -> Option<K> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<'a, T, H> Iterator<&'a T> for SetAlgebraItems<'a, T, H> {\n-    fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+impl<'a, T, S, H> Iterator<&'a T> for Intersection<'a, T, H>\n+    where T: Eq + Hash<S>, H: Hasher<S>\n+{\n+    fn next(&mut self) -> Option<&'a T> {\n+        loop {\n+            match self.iter.next() {\n+                None => return None,\n+                Some(elt) => if self.other.contains(elt) {\n+                    return Some(elt)\n+                },\n+            }\n+        }\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n+}\n+\n+impl<'a, T, S, H> Iterator<&'a T> for Difference<'a, T, H>\n+    where T: Eq + Hash<S>, H: Hasher<S>\n+{\n+    fn next(&mut self) -> Option<&'a T> {\n+        loop {\n+            match self.iter.next() {\n+                None => return None,\n+                Some(elt) => if !self.other.contains(elt) {\n+                    return Some(elt)\n+                },\n+            }\n+        }\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n }\n \n-impl<'a, T, H> Iterator<&'a T> for SymDifferenceItems<'a, T, H> {\n+impl<'a, T, S, H> Iterator<&'a T> for SymmetricDifference<'a, T, H>\n+    where T: Eq + Hash<S>, H: Hasher<S>\n+{\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<'a, T, H> Iterator<&'a T> for UnionItems<'a, T, H> {\n+impl<'a, T, S, H> Iterator<&'a T> for Union<'a, T, H>\n+    where T: Eq + Hash<S>, H: Hasher<S>\n+{\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }"}]}