{"sha": "50a2de233af392083ae3a1a8284028b352602c00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYTJkZTIzM2FmMzkyMDgzYWUzYTFhODI4NDAyOGIzNTI2MDJjMDA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-22T09:26:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T09:26:13Z"}, "message": "Rollup merge of #82379 - nagisa:nagisa/hexagon-enums, r=estebank\n\nFix sizes of repr(C) enums on hexagon\n\nEnums on hexagon use a smallest size (but at least 1 byte) that fits all\nthe enumeration values. This is unlike many other ABIs where enums are\nat least 32 bits.\n\nFixes #82100", "tree": {"sha": "0e316094ffef99669e0e27936960a06f986350e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e316094ffef99669e0e27936960a06f986350e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50a2de233af392083ae3a1a8284028b352602c00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM3i1CRBK7hj4Ov3rIwAAdHIIAIJQbXubwSrztsFIqZj82pCw\nIXWAjho4U5YuA9LGPeheUKhkWpDmYSIi3/v4sPEF0T27FD5FIf7Sg3qYrpcjAXmd\ndEYB4f4Xf3t+mLe20Eck0DidnMDt5bmD2RH8wr846/AjK/1pHRDjPd/Tg5GfufJD\n7CqpYdDLxBGGKXrv72d1KPRwuognutKE+4JnAkm+zNMB6DTi9XWdYlXyMvBJqTP7\n3M7EWj74vdxllILHPkgx/10qZsxpAUaSXmst28d5NfllO31Bzv98VIgBaUOoCint\ndG5VDOtCxrt5jkgDdwt3eRUiCnaogHsH85YOykmCIDOY1CSRHoRv+ull1nkD9z8=\n=4j29\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e316094ffef99669e0e27936960a06f986350e0\nparent 7958166300cc92da90b95a8c13cbf8f469832485\nparent 7130e462eeecb3fd0f5614f577896712b1b7bb2a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613985973 +0900\ncommitter GitHub <noreply@github.com> 1613985973 +0900\n\nRollup merge of #82379 - nagisa:nagisa/hexagon-enums, r=estebank\n\nFix sizes of repr(C) enums on hexagon\n\nEnums on hexagon use a smallest size (but at least 1 byte) that fits all\nthe enumeration values. This is unlike many other ABIs where enums are\nat least 32 bits.\n\nFixes #82100\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50a2de233af392083ae3a1a8284028b352602c00", "html_url": "https://github.com/rust-lang/rust/commit/50a2de233af392083ae3a1a8284028b352602c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50a2de233af392083ae3a1a8284028b352602c00/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7958166300cc92da90b95a8c13cbf8f469832485", "url": "https://api.github.com/repos/rust-lang/rust/commits/7958166300cc92da90b95a8c13cbf8f469832485", "html_url": "https://github.com/rust-lang/rust/commit/7958166300cc92da90b95a8c13cbf8f469832485"}, {"sha": "7130e462eeecb3fd0f5614f577896712b1b7bb2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7130e462eeecb3fd0f5614f577896712b1b7bb2a", "html_url": "https://github.com/rust-lang/rust/commit/7130e462eeecb3fd0f5614f577896712b1b7bb2a"}], "stats": {"total": 476, "additions": 476, "deletions": 0}, "files": [{"sha": "12dcb95187cff4b32ae52ada59f6448a0ca0fddd", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50a2de233af392083ae3a1a8284028b352602c00/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a2de233af392083ae3a1a8284028b352602c00/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=50a2de233af392083ae3a1a8284028b352602c00", "patch": "@@ -130,6 +130,7 @@ impl IntegerExt for Integer {\n \n         if repr.c() {\n             match &tcx.sess.target.arch[..] {\n+                \"hexagon\" => min_from_extern = Some(I8),\n                 // WARNING: the ARM EABI has two variants; the one corresponding\n                 // to `at_least == I32` appears to be used on Linux and NetBSD,\n                 // but some systems may use the variant corresponding to no"}, {"sha": "4bcfa58f7cf1595036815140fc862d56edf54c1e", "filename": "src/test/ui/layout/hexagon-enum.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/50a2de233af392083ae3a1a8284028b352602c00/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a2de233af392083ae3a1a8284028b352602c00/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs?ref=50a2de233af392083ae3a1a8284028b352602c00", "patch": "@@ -0,0 +1,33 @@\n+// compile-flags: --target hexagon-unknown-linux-musl\n+//\n+// Verify that the hexagon targets implement the repr(C) for enums correctly.\n+//\n+// See #82100\n+#![feature(never_type, rustc_attrs, type_alias_impl_trait, no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum A { Apple } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum B { Banana = 255, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum C { Chaenomeles = 256, } //~ ERROR: layout_of\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum P { Peach = 0x1000_0000isize, } //~ ERROR: layout_of\n+\n+const TANGERINE: usize = 0x8100_0000; // hack to get negative numbers without negation operator!\n+\n+#[rustc_layout(debug)]\n+#[repr(C)]\n+enum T { Tangerine = TANGERINE as isize } //~ ERROR: layout_of"}, {"sha": "390eff6e5b957b96e11e3c43c400a8d329026029", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/50a2de233af392083ae3a1a8284028b352602c00/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50a2de233af392083ae3a1a8284028b352602c00/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=50a2de233af392083ae3a1a8284028b352602c00", "patch": "@@ -0,0 +1,442 @@\n+error: layout_of(A) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 0,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 0..=0,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 0..=0,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 0,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/hexagon-enum.rs:15:1\n+   |\n+LL | enum A { Apple }\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: layout_of(B) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 0,\n+                    },\n+                    pref: Align {\n+                        pow2: 0,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 1,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I8,\n+                false,\n+            ),\n+            valid_range: 255..=255,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I8,\n+                    false,\n+                ),\n+                valid_range: 255..=255,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 0,\n+        },\n+        pref: Align {\n+            pow2: 0,\n+        },\n+    },\n+    size: Size {\n+        raw: 1,\n+    },\n+}\n+  --> $DIR/hexagon-enum.rs:19:1\n+   |\n+LL | enum B { Banana = 255, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(C) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 1,\n+                    },\n+                    pref: Align {\n+                        pow2: 1,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 2,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I16,\n+                false,\n+            ),\n+            valid_range: 256..=256,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I16,\n+                    false,\n+                ),\n+                valid_range: 256..=256,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 1,\n+        },\n+        pref: Align {\n+            pow2: 1,\n+        },\n+    },\n+    size: Size {\n+        raw: 2,\n+    },\n+}\n+  --> $DIR/hexagon-enum.rs:23:1\n+   |\n+LL | enum C { Chaenomeles = 256, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(P) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 268435456..=268435456,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 268435456..=268435456,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/hexagon-enum.rs:27:1\n+   |\n+LL | enum P { Peach = 0x1000_0000isize, }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(T) = Layout {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        tag: Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+        tag_encoding: Direct,\n+        tag_field: 0,\n+        variants: [\n+            Layout {\n+                fields: Arbitrary {\n+                    offsets: [],\n+                    memory_index: [],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 2,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 4,\n+                },\n+            },\n+        ],\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 2164260864..=2164260864,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    true,\n+                ),\n+                valid_range: 2164260864..=2164260864,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 2,\n+        },\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/hexagon-enum.rs:33:1\n+   |\n+LL | enum T { Tangerine = TANGERINE as isize }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}