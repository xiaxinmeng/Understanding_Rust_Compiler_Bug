{"sha": "0d531c37375006917a151ed3932fb09d3e6a431d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTMxYzM3Mzc1MDA2OTE3YTE1MWVkMzkzMmZiMDlkM2U2YTQzMWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-04T13:10:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-04T13:10:06Z"}, "message": "Better config parsing and allow specifying host and target triple in config", "tree": {"sha": "3958586531a2a4137fb5d4ecee741225f6b3260f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3958586531a2a4137fb5d4ecee741225f6b3260f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d531c37375006917a151ed3932fb09d3e6a431d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d531c37375006917a151ed3932fb09d3e6a431d", "html_url": "https://github.com/rust-lang/rust/commit/0d531c37375006917a151ed3932fb09d3e6a431d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d531c37375006917a151ed3932fb09d3e6a431d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83cca1b03c808998032295ab845589d4a4316908", "url": "https://api.github.com/repos/rust-lang/rust/commits/83cca1b03c808998032295ab845589d4a4316908", "html_url": "https://github.com/rust-lang/rust/commit/83cca1b03c808998032295ab845589d4a4316908"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "00735ac1493950c0c9219471566f4f7f5eb38ec8", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d531c37375006917a151ed3932fb09d3e6a431d/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d531c37375006917a151ed3932fb09d3e6a431d/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=0d531c37375006917a151ed3932fb09d3e6a431d", "patch": "@@ -165,9 +165,7 @@ fn build_clif_sysroot_for_triple(\n \n     let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n \n-    let keep_sysroot =\n-        fs::read_to_string(\"config.txt\").unwrap().lines().any(|line| line.trim() == \"keep_sysroot\");\n-    if !keep_sysroot {\n+    if !crate::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the target dir with the exception of build scripts and the incremental cache\n         for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n             if build_dir.join(dir).exists() {"}, {"sha": "ef540cf1f822b467b80adbc23f2c490e96c647ac", "filename": "build_system/config.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0d531c37375006917a151ed3932fb09d3e6a431d/build_system%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d531c37375006917a151ed3932fb09d3e6a431d/build_system%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fconfig.rs?ref=0d531c37375006917a151ed3932fb09d3e6a431d", "patch": "@@ -0,0 +1,55 @@\n+use std::{fs, process};\n+\n+fn load_config_file() -> Vec<(String, Option<String>)> {\n+    fs::read_to_string(\"config.txt\")\n+        .unwrap()\n+        .lines()\n+        .map(|line| if let Some((line, _comment)) = line.split_once('#') { line } else { line })\n+        .map(|line| line.trim())\n+        .filter(|line| !line.is_empty())\n+        .map(|line| {\n+            if let Some((key, val)) = line.split_once('=') {\n+                (key.trim().to_owned(), Some(val.trim().to_owned()))\n+            } else {\n+                (line.to_owned(), None)\n+            }\n+        })\n+        .collect()\n+}\n+\n+pub(crate) fn get_bool(name: &str) -> bool {\n+    let values = load_config_file()\n+        .into_iter()\n+        .filter(|(key, _)| key == name)\n+        .map(|(_, val)| val)\n+        .collect::<Vec<_>>();\n+    if values.is_empty() {\n+        false\n+    } else {\n+        if values.iter().any(|val| val.is_some()) {\n+            eprintln!(\"Boolean config `{}` has a value\", name);\n+            process::exit(1);\n+        }\n+        true\n+    }\n+}\n+\n+pub(crate) fn get_value(name: &str) -> Option<String> {\n+    let values = load_config_file()\n+        .into_iter()\n+        .filter(|(key, _)| key == name)\n+        .map(|(_, val)| val)\n+        .collect::<Vec<_>>();\n+    if values.is_empty() {\n+        None\n+    } else if values.len() == 1 {\n+        if values[0].is_none() {\n+            eprintln!(\"Config `{}` missing value\", name);\n+            process::exit(1);\n+        }\n+        values.into_iter().next().unwrap()\n+    } else {\n+        eprintln!(\"Config `{}` given multiple values: {:?}\", name, values);\n+        process::exit(1);\n+    }\n+}"}, {"sha": "c5fd7beb7471bf6ff959694152bbdbb065a565b3", "filename": "config.txt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d531c37375006917a151ed3932fb09d3e6a431d/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0d531c37375006917a151ed3932fb09d3e6a431d/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=0d531c37375006917a151ed3932fb09d3e6a431d", "patch": "@@ -1,5 +1,11 @@\n # This file allows configuring the build system.\n \n+# The host triple\n+#host = x86_64-unknown-linux-gnu\n+\n+# The target triple\n+#target = x86_64-unknown-linux-gnu\n+\n # Disables cleaning of the sysroot dir. This will cause old compiled artifacts to be re-used when\n # the sysroot source hasn't changed. This is useful when the codegen backend hasn't been modified.\n # This option can be changed while the build system is already running for as long as sysroot"}, {"sha": "aeaac59fff00a59e8ffdadb7ad9db35911bad069", "filename": "y.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d531c37375006917a151ed3932fb09d3e6a431d/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d531c37375006917a151ed3932fb09d3e6a431d/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=0d531c37375006917a151ed3932fb09d3e6a431d", "patch": "@@ -31,6 +31,8 @@ use std::process;\n mod build_backend;\n #[path = \"build_system/build_sysroot.rs\"]\n mod build_sysroot;\n+#[path = \"build_system/config.rs\"]\n+mod config;\n #[path = \"build_system/prepare.rs\"]\n mod prepare;\n #[path = \"build_system/rustc_info.rs\"]\n@@ -114,6 +116,8 @@ fn main() {\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple\n+    } else if let Some(host_triple) = crate::config::get_value(\"host\") {\n+        host_triple\n     } else {\n         rustc_info::get_host_triple()\n     };\n@@ -123,6 +127,8 @@ fn main() {\n         } else {\n             host_triple.clone() // Empty target triple can happen on GHA\n         }\n+    } else if let Some(target_triple) = crate::config::get_value(\"target\") {\n+        target_triple\n     } else {\n         host_triple.clone()\n     };"}]}