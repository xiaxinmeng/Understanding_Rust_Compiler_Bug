{"sha": "fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTYyNDEwNjRkZDg2MGM3YmYzYTM2MWM3ZTZmZDYzYmM4ZWI1MDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-12T21:26:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-12T21:26:50Z"}, "message": "Rollup merge of #53025 - ljedrz:debug_asserts_limited, r=varkor\n\nConsider changing assert! to debug_assert! when it calls visit_with\n\nThe perf run from #52956 revealed that there were 3 benchmarks that benefited most from changing `assert!`s to `debug_assert!`s:\n\n- issue #46449: avg -4.7% for -check\n- deeply-nested (AKA #38528): avg -3.4% for -check\n- regression #31157: avg -3.2% for -check\n\nI analyzed their fixing PRs and decided to look for potentially heavy assertions in the files they modified. I noticed that all of the non-trivial ones contained indirect calls to `visit_with()`.\n\nIt might be a good idea to consider changing `assert!` to `debug_assert!` in those places in order to get the performance wins shown by the benchmarks.", "tree": {"sha": "ba8c532d6af8b6d6b11e085ab535f4f163f23748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8c532d6af8b6d6b11e085ab535f4f163f23748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcKYaCRBK7hj4Ov3rIwAAdHIIACjWE2PyLcp1bXsw+8Nfd4tS\niSovr/NT8gGFctbc/gS7IkmA/UuX1AlUxh/IgZrTRMWHVkG+9hfH3kvDqCHeQKwH\nLXwHKB+9uR5VMBTiQKxKt6CVUNngmgHEzx6Y17Pmn2z6i+qhN3WALMYvC86eg8If\n5fYdtU1AJxER0cYn2YOfRyV94HrPkaIXg4ARCnc+OUtadXm5MhPvQrj0bDYw128j\n9ujCqlxJcbMl3mFtsiroEDrnC+ZLy4HYHMF4+/+iJyU0qxgQFRZ1JRBz3FzeWlKe\n3+jElhRA4/gxZ3xThsPBsA2W4ShUGVius4HmwRa0gg5PStc0a26289/FDfbK73U=\n=F0d4\n-----END PGP SIGNATURE-----\n", "payload": "tree ba8c532d6af8b6d6b11e085ab535f4f163f23748\nparent 7d3864954ef5bc2a076aa9db9da12b0481425a07\nparent b187c4268c50374075d50f9dd173b13c0de2de81\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534109210 +0200\ncommitter GitHub <noreply@github.com> 1534109210 +0200\n\nRollup merge of #53025 - ljedrz:debug_asserts_limited, r=varkor\n\nConsider changing assert! to debug_assert! when it calls visit_with\n\nThe perf run from #52956 revealed that there were 3 benchmarks that benefited most from changing `assert!`s to `debug_assert!`s:\n\n- issue #46449: avg -4.7% for -check\n- deeply-nested (AKA #38528): avg -3.4% for -check\n- regression #31157: avg -3.2% for -check\n\nI analyzed their fixing PRs and decided to look for potentially heavy assertions in the files they modified. I noticed that all of the non-trivial ones contained indirect calls to `visit_with()`.\n\nIt might be a good idea to consider changing `assert!` to `debug_assert!` in those places in order to get the performance wins shown by the benchmarks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "html_url": "https://github.com/rust-lang/rust/commit/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3864954ef5bc2a076aa9db9da12b0481425a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3864954ef5bc2a076aa9db9da12b0481425a07", "html_url": "https://github.com/rust-lang/rust/commit/7d3864954ef5bc2a076aa9db9da12b0481425a07"}, {"sha": "b187c4268c50374075d50f9dd173b13c0de2de81", "url": "https://api.github.com/repos/rust-lang/rust/commits/b187c4268c50374075d50f9dd173b13c0de2de81", "html_url": "https://github.com/rust-lang/rust/commit/b187c4268c50374075d50f9dd173b13c0de2de81"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5113f3cde32843b588faee72e8e485fd5d0e2677", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         debug!(\"normalize_projection_type(projection_ty={:?})\",\n                projection_ty);\n \n-        assert!(!projection_ty.has_escaping_regions());\n+        debug_assert!(!projection_ty.has_escaping_regions());\n \n         // FIXME(#20304) -- cache\n "}, {"sha": "8d03f532660963e733c0a73a5b27387adb3fefa3", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "patch": "@@ -1142,7 +1142,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                 if !is_default {\n                     true\n                 } else if obligation.param_env.reveal == Reveal::All {\n-                    assert!(!poly_trait_ref.needs_infer());\n+                    debug_assert!(!poly_trait_ref.needs_infer());\n                     if !poly_trait_ref.needs_subst() {\n                         true\n                     } else {"}, {"sha": "fbd12c9fe8ecaf796a8f2be66c3c5944fa69d979", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "patch": "@@ -563,7 +563,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     pub fn select(&mut self, obligation: &TraitObligation<'tcx>)\n                   -> SelectionResult<'tcx, Selection<'tcx>> {\n         debug!(\"select({:?})\", obligation);\n-        assert!(!obligation.predicate.has_escaping_regions());\n+        debug_assert!(!obligation.predicate.has_escaping_regions());\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n \n@@ -662,7 +662,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         match obligation.predicate {\n             ty::Predicate::Trait(ref t) => {\n-                assert!(!t.has_escaping_regions());\n+                debug_assert!(!t.has_escaping_regions());\n                 let obligation = obligation.with(t.clone());\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n             }\n@@ -1076,7 +1076,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"candidate_from_obligation(cache_fresh_trait_pred={:?}, obligation={:?})\",\n                cache_fresh_trait_pred,\n                stack);\n-        assert!(!stack.obligation.predicate.has_escaping_regions());\n+        debug_assert!(!stack.obligation.predicate.has_escaping_regions());\n \n         if let Some(c) = self.check_candidate_cache(stack.obligation.param_env,\n                                                     &cache_fresh_trait_pred) {\n@@ -1586,7 +1586,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         snapshot: &infer::CombinedSnapshot<'cx, 'tcx>)\n                         -> bool\n     {\n-        assert!(!skol_trait_ref.has_escaping_regions());\n+        debug_assert!(!skol_trait_ref.has_escaping_regions());\n         if self.infcx.at(&obligation.cause, obligation.param_env)\n                      .sup(ty::Binder::dummy(skol_trait_ref), trait_bound).is_err() {\n             return false;"}, {"sha": "0da4d5ddea2f264a5bea4abb08f7d51866f6ef1a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "patch": "@@ -466,7 +466,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         let univariant = |fields: &[TyLayout], repr: &ReprOptions, kind| {\n             Ok(tcx.intern_layout(univariant_uninterned(fields, repr, kind)?))\n         };\n-        assert!(!ty.has_infer_types());\n+        debug_assert!(!ty.has_infer_types());\n \n         Ok(match ty.sty {\n             // Basic scalars.\n@@ -1283,7 +1283,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>)\n                    -> Result<SizeSkeleton<'tcx>, LayoutError<'tcx>> {\n-        assert!(!ty.has_infer_types());\n+        debug_assert!(!ty.has_infer_types());\n \n         // First try computing a static layout.\n         let err = match tcx.layout_of(param_env.and(ty)) {\n@@ -1300,7 +1300,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail(pointee);\n                 match tail.sty {\n                     ty::TyParam(_) | ty::TyProjection(_) => {\n-                        assert!(tail.has_param_types() || tail.has_self_ty());\n+                        debug_assert!(tail.has_param_types() || tail.has_self_ty());\n                         Ok(SizeSkeleton::Pointer {\n                             non_zero,\n                             tail: tcx.erase_regions(&tail)"}, {"sha": "65e31f21792d209fc42d3fddbbff94f98db1d094", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>  {\n         // otherwise the escaping regions would be captured by the binder\n-        assert!(!self_ty.has_escaping_regions());\n+        debug_assert!(!self_ty.has_escaping_regions());\n \n         ty::TraitRef {\n             def_id: self.def_id,\n@@ -753,7 +753,7 @@ impl<T> Binder<T> {\n     pub fn dummy<'tcx>(value: T) -> Binder<T>\n         where T: TypeFoldable<'tcx>\n     {\n-        assert!(!value.has_escaping_regions());\n+        debug_assert!(!value.has_escaping_regions());\n         Binder(value)\n     }\n \n@@ -1247,7 +1247,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n                         -> ty::ProjectionPredicate<'tcx>\n     {\n         // otherwise the escaping regions would be captured by the binders\n-        assert!(!self_ty.has_escaping_regions());\n+        debug_assert!(!self_ty.has_escaping_regions());\n \n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {"}]}