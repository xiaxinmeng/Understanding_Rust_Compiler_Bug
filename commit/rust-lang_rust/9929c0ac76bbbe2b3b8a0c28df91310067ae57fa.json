{"sha": "9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "node_id": "C_kwDOAAsO6NoAKDk5MjljMGFjNzZiYmJlMmIzYjhhMGMyOGRmOTEzMTAwNjdhZTU3ZmE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:20:11Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:20:11Z"}, "message": "Add AscribeUserTypeProvePredicate", "tree": {"sha": "696ecea54a52961e5257e4137714ba37acb8bf3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/696ecea54a52961e5257e4137714ba37acb8bf3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "html_url": "https://github.com/rust-lang/rust/commit/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec17be2656fc69e212d9079f79322a68a3cfbc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec17be2656fc69e212d9079f79322a68a3cfbc19", "html_url": "https://github.com/rust-lang/rust/commit/ec17be2656fc69e212d9079f79322a68a3cfbc19"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "65371a285911e22f03a45c7cb8a1811b9593f63c", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "patch": "@@ -110,6 +110,7 @@ infer_relate_param_bound = ...so that the type `{$name}` will meet its required\n infer_relate_param_bound_2 = ...that is required by this bound\n infer_relate_region_param_bound = ...so that the declared lifetime parameter bounds are satisfied\n infer_compare_impl_item_obligation = ...so that the definition in impl matches the definition from the trait\n+infer_ascribe_user_type_prove_predicate = ...so that the where clause holds\n \n infer_nothing = {\"\"}\n "}, {"sha": "adaa47c01402303a297990a385fb1910f0826a55", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "patch": "@@ -77,6 +77,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::CheckAssociatedTypeBounds { ref parent, .. } => {\n                 self.note_region_origin(err, &parent);\n             }\n+            infer::AscribeUserTypeProvePredicate(span) => {\n+                RegionOriginNote::Plain {\n+                    span,\n+                    msg: fluent::infer::ascribe_user_type_prove_predicate,\n+                }\n+                .add_to_diagnostic(err);\n+            }\n         }\n     }\n \n@@ -356,6 +363,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                 err\n             }\n+            infer::AscribeUserTypeProvePredicate(span) => {\n+                let mut err =\n+                    struct_span_err!(self.tcx.sess, span, E0478, \"lifetime bound not satisfied\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"lifetime instantiated with \",\n+                    sup,\n+                    \"\",\n+                    None,\n+                );\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"but lifetime must outlive \",\n+                    sub,\n+                    \"\",\n+                    None,\n+                );\n+                err\n+            }\n         }\n     }\n "}, {"sha": "4d8e64ef4f7e65598c3f62e2297d63edb010b28c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "patch": "@@ -409,14 +409,20 @@ pub enum SubregionOrigin<'tcx> {\n \n     /// Comparing the signature and requirements of an impl method against\n     /// the containing trait.\n-    CompareImplItemObligation { span: Span, impl_item_def_id: LocalDefId, trait_item_def_id: DefId },\n+    CompareImplItemObligation {\n+        span: Span,\n+        impl_item_def_id: LocalDefId,\n+        trait_item_def_id: DefId,\n+    },\n \n     /// Checking that the bounds of a trait's associated type hold for a given impl\n     CheckAssociatedTypeBounds {\n         parent: Box<SubregionOrigin<'tcx>>,\n         impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n     },\n+\n+    AscribeUserTypeProvePredicate(Span),\n }\n \n // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -2001,6 +2007,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,\n+            AscribeUserTypeProvePredicate(span) => span,\n             CheckAssociatedTypeBounds { ref parent, .. } => parent.span(),\n         }\n     }\n@@ -2033,6 +2040,10 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                 parent: Box::new(default()),\n             },\n \n+            traits::ObligationCauseCode::AscribeUserTypeProvePredicate(span) => {\n+                SubregionOrigin::AscribeUserTypeProvePredicate(span)\n+            }\n+\n             _ => default(),\n         }\n     }"}, {"sha": "68a7af0b8c8d75669028135952d7f8e921431d45", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "patch": "@@ -188,6 +188,9 @@ impl<'tcx> ObligationCause<'tcx> {\n     pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self.code() {\n             MatchImpl(cause, _) => cause.to_constraint_category(),\n+            AscribeUserTypeProvePredicate(predicate_span) => {\n+                ConstraintCategory::Predicate(*predicate_span)\n+            }\n             _ => ConstraintCategory::BoringNoLocation,\n         }\n     }\n@@ -426,6 +429,8 @@ pub enum ObligationCauseCode<'tcx> {\n         is_lit: bool,\n         output_ty: Option<Ty<'tcx>>,\n     },\n+\n+    AscribeUserTypeProvePredicate(Span),\n }\n \n /// The 'location' at which we try to perform HIR-based wf checking."}, {"sha": "13d9c160038f2820e580a2c45b1936c49d1dc527", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9929c0ac76bbbe2b3b8a0c28df91310067ae57fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9929c0ac76bbbe2b3b8a0c28df91310067ae57fa", "patch": "@@ -2256,7 +2256,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::QuestionMark\n             | ObligationCauseCode::CheckAssociatedTypeBounds { .. }\n             | ObligationCauseCode::LetElse\n-            | ObligationCauseCode::BinOp { .. } => {}\n+            | ObligationCauseCode::BinOp { .. }\n+            | ObligationCauseCode::AscribeUserTypeProvePredicate(..) => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}]}