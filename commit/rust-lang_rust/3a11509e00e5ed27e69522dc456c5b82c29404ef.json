{"sha": "3a11509e00e5ed27e69522dc456c5b82c29404ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTE1MDllMDBlNWVkMjdlNjk1MjJkYzQ1NmM1YjgyYzI5NDA0ZWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-07T06:33:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-07T21:12:43Z"}, "message": "std: Reorder definitions in cast\n\nPrioritize `transmute` and `forget`.", "tree": {"sha": "15d689716762a4bcd8e75b2c54a6697bf5c4fabd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d689716762a4bcd8e75b2c54a6697bf5c4fabd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a11509e00e5ed27e69522dc456c5b82c29404ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a11509e00e5ed27e69522dc456c5b82c29404ef", "html_url": "https://github.com/rust-lang/rust/commit/3a11509e00e5ed27e69522dc456c5b82c29404ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a11509e00e5ed27e69522dc456c5b82c29404ef/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a993703f93cdfa210f9e790de6683e86e0204a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a993703f93cdfa210f9e790de6683e86e0204a1a", "html_url": "https://github.com/rust-lang/rust/commit/a993703f93cdfa210f9e790de6683e86e0204a1a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "e0edeb53c6ebc797613ac1a724e2cda919df7b1d", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3a11509e00e5ed27e69522dc456c5b82c29404ef/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a11509e00e5ed27e69522dc456c5b82c29404ef/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=3a11509e00e5ed27e69522dc456c5b82c29404ef", "patch": "@@ -14,25 +14,6 @@ use mem;\n use intrinsics;\n use ptr::copy_nonoverlapping_memory;\n \n-/// Casts the value at `src` to U. The two types must have the same length.\n-#[inline]\n-pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    let mut dest: U = mem::uninit();\n-    let dest_ptr: *mut u8 = transmute(&mut dest);\n-    let src_ptr: *u8 = transmute(src);\n-    copy_nonoverlapping_memory(dest_ptr, src_ptr, mem::size_of::<U>());\n-    dest\n-}\n-\n-/**\n- * Move a thing into the void\n- *\n- * The forget function will take ownership of the provided value but neglect\n- * to run any required cleanup or memory-management operations on it.\n- */\n-#[inline]\n-pub unsafe fn forget<T>(thing: T) { intrinsics::forget(thing); }\n-\n /**\n  * Transform a value of one type into a value of another type.\n  * Both types must have the same size and alignment.\n@@ -51,6 +32,25 @@ pub unsafe fn transmute<L, G>(thing: L) -> G {\n     intrinsics::transmute(thing)\n }\n \n+/**\n+ * Move a thing into the void\n+ *\n+ * The forget function will take ownership of the provided value but neglect\n+ * to run any required cleanup or memory-management operations on it.\n+ */\n+#[inline]\n+pub unsafe fn forget<T>(thing: T) { intrinsics::forget(thing); }\n+\n+/// Casts the value at `src` to U. The two types must have the same length.\n+#[inline]\n+pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    let mut dest: U = mem::uninit();\n+    let dest_ptr: *mut u8 = transmute(&mut dest);\n+    let src_ptr: *u8 = transmute(src);\n+    copy_nonoverlapping_memory(dest_ptr, src_ptr, mem::size_of::<U>());\n+    dest\n+}\n+\n /// Coerce an immutable reference to be mutable.\n #[inline]\n #[deprecated=\"casting &T to &mut T is undefined behaviour: use Cell<T>, RefCell<T> or Unsafe<T>\"]"}]}