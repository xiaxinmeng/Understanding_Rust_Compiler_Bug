{"sha": "95602a759d9190cad92279aa5929d30166f2255c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NjAyYTc1OWQ5MTkwY2FkOTIyNzlhYTU5MjlkMzAxNjZmMjI1NWM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-20T04:15:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T21:03:57Z"}, "message": "Add trivial cast lints.\n\nThis permits all coercions to be performed in casts, but adds lints to warn in those cases.\n\nPart of this patch moves cast checking to a later stage of type checking. We acquire obligations to check casts as part of type checking where we previously checked them. Once we have type checked a function or module, then we check any cast obligations which have been acquired. That means we have more type information available to check casts (this was crucial to making coercions work properly in place of some casts), but it means that casts cannot feed input into type inference.\n\n[breaking change]\n\n* Adds two new lints for trivial casts and trivial numeric casts, these are warn by default, but can cause errors if you build with warnings as errors. Previously, trivial numeric casts and casts to trait objects were allowed.\n* The unused casts lint has gone.\n* Interactions between casting and type inference have changed in subtle ways. Two ways this might manifest are:\n- You may need to 'direct' casts more with extra type information, for example, in some cases where `foo as _ as T` succeeded, you may now need to specify the type for `_`\n- Casts do not influence inference of integer types. E.g., the following used to type check:\n\n```\nlet x = 42;\nlet y = &x as *const u32;\n```\n\nBecause the cast would inform inference that `x` must have type `u32`. This no longer applies and the compiler will fallback to `i32` for `x` and thus there will be a type error in the cast. The solution is to add more type information:\n\n```\nlet x: u32 = 42;\nlet y = &x as *const u32;\n```", "tree": {"sha": "a3f7026e046eda5326c70ba47c3c91c5b1e54a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f7026e046eda5326c70ba47c3c91c5b1e54a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95602a759d9190cad92279aa5929d30166f2255c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95602a759d9190cad92279aa5929d30166f2255c", "html_url": "https://github.com/rust-lang/rust/commit/95602a759d9190cad92279aa5929d30166f2255c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95602a759d9190cad92279aa5929d30166f2255c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed810385045ab0db90303574ba3ea47dfa2a36d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed810385045ab0db90303574ba3ea47dfa2a36d5", "html_url": "https://github.com/rust-lang/rust/commit/ed810385045ab0db90303574ba3ea47dfa2a36d5"}], "stats": {"total": 736, "additions": 287, "deletions": 449}, "files": [{"sha": "7843be0b483ebd8750e7eab20e73ae1014ea04b7", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -429,7 +429,8 @@ impl<T> TypedArenaChunk<T> {\n         // Destroy the next chunk.\n         let next = self.next;\n         let size = calculate_size::<T>(self.capacity);\n-        deallocate(self as *mut TypedArenaChunk<T> as *mut u8, size,\n+        let self_ptr: *mut TypedArenaChunk<T> = self;\n+        deallocate(self_ptr as *mut u8, size,\n                    mem::min_align_of::<TypedArenaChunk<T>>());\n         if !next.is_null() {\n             let capacity = (*next).capacity;"}, {"sha": "0a61eeb6e1c63b9ea6a19817fee42882b3c872f9", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -24,6 +24,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![doc(test(no_crate_inject))]\n \n+#![allow(trivial_cast)]\n+#![allow(trivial_numeric_cast)]\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]"}, {"sha": "af2daabc2d02ca080d5756c0bb9f12aa89d2826a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -1199,8 +1199,8 @@ impl<T: PartialEq> Vec<T> {\n \n             // Avoid bounds checks by using unsafe pointers.\n             let p = self.as_mut_ptr();\n-            let mut r = 1;\n-            let mut w = 1;\n+            let mut r: usize = 1;\n+            let mut w: usize = 1;\n \n             while r < ln {\n                 let p_r = p.offset(r as isize);"}, {"sha": "f5db3e63c7ad478ff5800167290c1a8b013d15d5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -713,7 +713,11 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get(&self) -> *mut T { &self.value as *const T as *mut T }\n+    pub fn get(&self) -> *mut T {\n+        // FIXME(#23542) Replace with type ascription.\n+        #![allow(trivial_cast)]\n+        &self.value as *const T as *mut T\n+    }\n \n     /// Unwraps the value\n     ///"}, {"sha": "e00cdc9de88da8e84c5a7dd4da1d2378b2d9bbda", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -833,20 +833,26 @@ impl<T> Pointer for *const T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Pointer for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n+        // FIXME(#23542) Replace with type ascription.\n+        #![allow(trivial_cast)]\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Pointer for &'a T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n+        // FIXME(#23542) Replace with type ascription.\n+        #![allow(trivial_cast)]\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Pointer for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n+        // FIXME(#23542) Replace with type ascription.\n+        #![allow(trivial_cast)]\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n }"}, {"sha": "d01d240e5b5f1eb80fe77b81d6d9d8b3ca00d86b", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -13,6 +13,7 @@\n // FIXME: #6220 Implement floating point formatting\n \n #![allow(unsigned_negation)]\n+#![allow(trivial_numeric_cast)]\n \n use fmt;\n use iter::IteratorExt;"}, {"sha": "ccc1d32eab35bd098c552f357da29bcacd46ca56", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -182,6 +182,8 @@ mod impls {\n                 }\n \n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n+                    // FIXME(#23542) Replace with type ascription.\n+                    #![allow(trivial_cast)]\n                     let newlen = data.len() * ::$ty::BYTES as usize;\n                     let ptr = data.as_ptr() as *const u8;\n                     state.write(unsafe { slice::from_raw_parts(ptr, newlen) })"}, {"sha": "0bc41eb2c6eae3b0f6e614a325cd7ce7c970efc5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -313,6 +313,8 @@ pub fn drop<T>(_x: T) { }\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    // FIXME(#23542) Replace with type ascription.\n+    #![allow(trivial_cast)]\n     ptr::read(src as *const T as *const U)\n }\n "}, {"sha": "1557434a28a27004aa4ab0ea0c9315e591e92a3c", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i16\")]\n+#![allow(trivial_numeric_cast)]\n \n int_module! { i16, 16 }"}, {"sha": "bdccab4cb9a9f4920c158d31232856da7f4e7c91", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i32\")]\n+#![allow(trivial_numeric_cast)]\n \n int_module! { i32, 32 }"}, {"sha": "d8f5aa6e54836a3e81d12728e5cc0bfbf5fcb651", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i64\")]\n+#![allow(trivial_numeric_cast)]\n \n int_module! { i64, 64 }"}, {"sha": "da2410a04cfe47d28db9bd94c16bb1396049c242", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i8\")]\n+#![allow(trivial_numeric_cast)]\n \n int_module! { i8, 8 }"}, {"sha": "5f697e02a9943ea1d50c51f816f79a3ffe91ecc3", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![doc(hidden)]\n+#![allow(trivial_numeric_cast)]\n \n macro_rules! int_module { ($T:ty, $bits:expr) => (\n "}, {"sha": "838caa59e47176e274720a6503e011169c64a11f", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -16,6 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"isize\")]\n+#![allow(trivial_numeric_cast)]\n \n #[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }"}, {"sha": "7686a990acc9d8f1c8598d2355edcb499fb86e04", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -14,6 +14,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n+#![allow(trivial_numeric_cast)]\n \n use self::wrapping::{OverflowingOps, WrappingOps};\n "}, {"sha": "9d91bbc7f9019b9d594873cd589111fe3377fbdc", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u16\")]\n+#![allow(trivial_numeric_cast)]\n \n uint_module! { u16, i16, 16 }"}, {"sha": "2d5f163e093c7fc53cbb4d7c4df1959287740cdb", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u32\")]\n+#![allow(trivial_numeric_cast)]\n \n uint_module! { u32, i32, 32 }"}, {"sha": "26813aa281c66d3deb79b85e22735d04f1c717e6", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u64\")]\n+#![allow(trivial_numeric_cast)]\n \n uint_module! { u64, i64, 64 }"}, {"sha": "7fb28f27d62aab254ae08ffdcd3aaa166189922a", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,5 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u8\")]\n+#![allow(trivial_numeric_cast)]\n \n uint_module! { u8, i8, 8 }"}, {"sha": "9f502e3ea4312402eb3551f0acdd64106f9dbd2b", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![doc(hidden)]\n+#![allow(trivial_numeric_cast)]\n \n macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n "}, {"sha": "be5acaac92aea3529db25a6d1f589b32abb5ba5e", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -16,5 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"usize\")]\n+#![allow(trivial_numeric_cast)]\n \n uint_module! { usize, isize, ::isize::BITS }"}, {"sha": "9b3ee3ef5e0c28fb1a402d0b6100bf1af5ad2288", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -529,7 +529,7 @@ impl<T: ?Sized> Unique<T> {\n     /// Create a new `Unique`.\n     #[unstable(feature = \"unique\")]\n     pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n-        Unique { pointer: NonZero::new(ptr as *const T), _marker: PhantomData }\n+        Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n \n     /// Dereference the content."}, {"sha": "035d070cd6d43f24348e4b992bf9b8e5ea01a30b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -261,7 +261,7 @@ pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n              reason = \"use std::ffi::c_str_to_bytes + str::from_utf8\")]\n pub unsafe fn from_c_str(s: *const i8) -> &'static str {\n     let s = s as *const u8;\n-    let mut len = 0;\n+    let mut len: usize = 0;\n     while *s.offset(len as isize) != 0 {\n         len += 1;\n     }"}, {"sha": "17d6b684c50e80a1111ee80cc5e47a1b329f347d", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -95,7 +95,7 @@ fn test_transmute() {\n     trait Foo { fn dummy(&self) { } }\n     impl Foo for int {}\n \n-    let a = box 100 as Box<Foo>;\n+    let a = box 100isize as Box<Foo>;\n     unsafe {\n         let x: ::core::raw::TraitObject = transmute(a);\n         assert!(*(x.data as *const int) == 100);"}, {"sha": "4f5f269d4375d0c0a6e2ec2c24ad3f19b476a065", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -84,9 +84,9 @@ fn test_as_ref() {\n         assert_eq!(q.as_ref().unwrap(), &2);\n \n         // Lifetime inference\n-        let u = 2;\n+        let u = 2isize;\n         {\n-            let p: *const int = &u as *const _;\n+            let p = &u as *const int;\n             assert_eq!(p.as_ref().unwrap(), &2);\n         }\n     }\n@@ -102,9 +102,9 @@ fn test_as_mut() {\n         assert!(q.as_mut().unwrap() == &mut 2);\n \n         // Lifetime inference\n-        let mut u = 2;\n+        let mut u = 2isize;\n         {\n-            let p: *mut int = &mut u as *mut _;\n+            let p = &mut u as *mut int;\n             assert!(p.as_mut().unwrap() == &mut 2);\n         }\n     }\n@@ -170,9 +170,9 @@ fn test_set_memory() {\n \n #[test]\n fn test_unsized_unique() {\n-    let xs: &mut [_] = &mut [1, 2, 3];\n-    let ptr = unsafe { Unique::new(xs as *mut [_]) };\n+    let xs: &mut [i32] = &mut [1, 2, 3];\n+    let ptr = unsafe { Unique::new(xs as *mut [i32]) };\n     let ys = unsafe { &mut **ptr };\n-    let zs: &mut [_] = &mut [1, 2, 3];\n+    let zs: &mut [i32] = &mut [1, 2, 3];\n     assert!(ys == zs);\n }"}, {"sha": "2c431e1e05088ffacad06f7679eb6217d1261231", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -304,10 +304,10 @@ pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) {\n     // Completely remove the local logger from TLS in case anyone attempts to\n     // frob the slot while we're doing the logging. This will destroy any logger\n     // set during logging.\n-    let mut logger = LOCAL_LOGGER.with(|s| {\n+    let mut logger: Box<Logger + Send> = LOCAL_LOGGER.with(|s| {\n         s.borrow_mut().take()\n     }).unwrap_or_else(|| {\n-        box DefaultLogger { handle: io::stderr() } as Box<Logger + Send>\n+        box DefaultLogger { handle: io::stderr() }\n     });\n     logger.log(&LogRecord {\n         level: LogLevel(level),"}, {"sha": "0001cb6e0caafaccd31026205ccd1632f1a83a50", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -10,6 +10,8 @@\n \n //! Generating numbers between two others.\n \n+#![allow(trivial_numeric_cast)]\n+\n // this is surprisingly complicated to be both generic & correct\n \n use core::prelude::{PartialOrd};"}, {"sha": "673246fe30dc1500d84e3a43dc53b66e97d2843b", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -447,6 +447,7 @@ impl Rng for Isaac64Rng {\n \n     #[inline]\n     fn next_u64(&mut self) -> u64 {\n+        #![allow(trivial_numeric_cast)]\n         if self.cnt == 0 {\n             // make some more numbers\n             self.isaac64();"}, {"sha": "182b05acbb61860d2133cd1db0027485f5f89b84", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -353,7 +353,7 @@ pub mod reader {\n             let (shift, mask) = SHIFT_MASK_TABLE[i];\n             Ok(Res {\n                 val: ((val >> shift) & mask) as uint,\n-                next: start + (((32 - shift) >> 3) as uint)\n+                next: start + ((32 - shift) >> 3),\n             })\n         }\n     }\n@@ -573,7 +573,7 @@ pub mod reader {\n                     0 => doc_as_u8(r_doc) as u64,\n                     1 => doc_as_u16(r_doc) as u64,\n                     2 => doc_as_u32(r_doc) as u64,\n-                    3 => doc_as_u64(r_doc) as u64,\n+                    3 => doc_as_u64(r_doc),\n                     _ => unreachable!(),\n                 }\n             } else {"}, {"sha": "dd5f3cccea54453557d0107b47affbe0677b0518", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -47,6 +47,9 @@\n #![feature(into_cow)]\n #![cfg_attr(test, feature(test))]\n \n+#![allow(trivial_cast)]\n+#![allow(trivial_numeric_cast)]\n+\n extern crate arena;\n extern crate flate;\n extern crate fmt_macros;"}, {"sha": "4f56f2441dc4199da1b1e6381b77d6592c1c0bd1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -100,6 +100,17 @@ declare_lint! {\n     \"detects transmutes of fat pointers\"\n }\n \n+declare_lint! {\n+    pub TRIVIAL_CAST,\n+    Warn,\n+    \"detects trivial casts which could be removed\"\n+}\n+\n+declare_lint! {\n+    pub TRIVIAL_NUMERIC_CAST,\n+    Warn,\n+    \"detects trivial casts of numeric types which could be removed\"\n+}\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy)]\n@@ -121,7 +132,9 @@ impl LintPass for HardwiredLints {\n             STABLE_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             VARIANT_SIZE_DIFFERENCES,\n-            FAT_PTR_TRANSMUTES\n+            FAT_PTR_TRANSMUTES,\n+            TRIVIAL_CAST,\n+            TRIVIAL_NUMERIC_CAST\n         )\n     }\n }"}, {"sha": "38a20c61d2e631f263faa0fa19832fe662f22f28", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -968,7 +968,7 @@ impl<'tcx> Eq for TyS<'tcx> {}\n \n impl<'tcx> Hash for TyS<'tcx> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        (self as *const _).hash(s)\n+        (self as *const TyS).hash(s)\n     }\n }\n \n@@ -2721,7 +2721,7 @@ fn intern_ty<'tcx>(type_arena: &'tcx TypedArena<TyS<'tcx>>,\n     };\n \n     debug!(\"Interned type: {:?} Pointer: {:?}\",\n-           ty, ty as *const _);\n+           ty, ty as *const TyS);\n \n     interner.insert(InternedTy { ty: ty }, ty);\n \n@@ -4806,32 +4806,6 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n             RvalueDpsExpr\n         }\n \n-        ast::ExprCast(..) => {\n-            match tcx.node_types.borrow().get(&expr.id) {\n-                Some(&ty) => {\n-                    if type_is_trait(ty) {\n-                        RvalueDpsExpr\n-                    } else {\n-                        RvalueDatumExpr\n-                    }\n-                }\n-                None => {\n-                    // Technically, it should not happen that the expr is not\n-                    // present within the table.  However, it DOES happen\n-                    // during type check, because the final types from the\n-                    // expressions are not yet recorded in the tcx.  At that\n-                    // time, though, we are only interested in knowing lvalue\n-                    // vs rvalue.  It would be better to base this decision on\n-                    // the AST type in cast node---but (at the time of this\n-                    // writing) it's not easy to distinguish casts to traits\n-                    // from other casts based on the AST.  This should be\n-                    // easier in the future, when casts to traits\n-                    // would like @Foo, Box<Foo>, or &Foo.\n-                    RvalueDatumExpr\n-                }\n-            }\n-        }\n-\n         ast::ExprBreak(..) |\n         ast::ExprAgain(..) |\n         ast::ExprRet(..) |\n@@ -4847,7 +4821,8 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprUnary(..) |\n         ast::ExprBox(None, _) |\n         ast::ExprAddrOf(..) |\n-        ast::ExprBinary(..) => {\n+        ast::ExprBinary(..) |\n+        ast::ExprCast(..) => {\n             RvalueDatumExpr\n         }\n "}, {"sha": "ef82a465ef4bf9944093a8bab32f72e37b8c0551", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -1804,6 +1804,9 @@ impl LintPass for UnconditionalRecursion {\n \n     fn check_fn(&mut self, cx: &Context, fn_kind: visit::FnKind, _: &ast::FnDecl,\n                 blk: &ast::Block, sp: Span, id: ast::NodeId) {\n+        // FIXME(#23542) Replace with type ascription.\n+        #![allow(trivial_cast)]\n+\n         type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n "}, {"sha": "f2d2db18da4b5e20496ea464bd0c714dce5fd186", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -56,7 +56,7 @@ pub use rustc::session as session;\n pub use rustc::util as util;\n \n use session::Session;\n-use lint::{LintPassObject, LintId};\n+use lint::LintId;\n \n mod builtin;\n \n@@ -67,15 +67,15 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     macro_rules! add_builtin {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n-                store.register_pass($sess, false, box builtin::$name as LintPassObject);\n+                store.register_pass($sess, false, box builtin::$name);\n                 )*}\n             )\n     }\n \n     macro_rules! add_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n-                store.register_pass($sess, false, box builtin::$name::new() as LintPassObject);\n+                store.register_pass($sess, false, box builtin::$name::new());\n                 )*}\n             )\n     }\n@@ -129,7 +129,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_UNSAFE, PATH_STATEMENTS);\n \n     // We have one lint pass defined specially\n-    store.register_pass(sess, false, box lint::GatherNodeLevels as LintPassObject);\n+    store.register_pass(sess, false, box lint::GatherNodeLevels);\n \n     // Insert temporary renamings for a one-time deprecation\n     store.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");"}, {"sha": "4d821df72a6e0d7cc7948951001c30f0c7c01510", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -14,6 +14,8 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n+#![allow(trivial_cast)]\n+#![allow(trivial_numeric_cast)]\n \n #![crate_name = \"rustc_llvm\"]\n #![unstable(feature = \"rustc_private\")]"}, {"sha": "ef43b9c0de420364a32c39f7ce50e258b63395aa", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -43,6 +43,9 @@\n #![feature(convert)]\n #![feature(path_relative_from)]\n \n+#![allow(trivial_cast)]\n+#![allow(trivial_numeric_cast)]\n+\n extern crate arena;\n extern crate flate;\n extern crate getopts;"}, {"sha": "15738d1e61ac14122f0161df205f0d536ebca146", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -471,15 +471,6 @@ impl<'tcx> Datum<'tcx, Expr> {\n             })\n     }\n \n-    /// Ensures that `self` will get cleaned up, if it is not an lvalue already.\n-    pub fn clean<'blk>(self,\n-                       bcx: Block<'blk, 'tcx>,\n-                       name: &'static str,\n-                       expr_id: ast::NodeId)\n-                       -> Block<'blk, 'tcx> {\n-        self.to_lvalue_datum(bcx, name, expr_id).bcx\n-    }\n-\n     pub fn to_lvalue_datum<'blk>(self,\n                                  bcx: Block<'blk, 'tcx>,\n                                  name: &str,"}, {"sha": "4d7431a20b707e098f3ef6ea54f03b7853ea2763", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -1227,22 +1227,9 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id), base,\n                                 vec![(idx_datum, idx.id)], Some(dest), true).bcx\n         }\n-        ast::ExprCast(ref val, _) => {\n-            // DPS output mode means this is a trait cast:\n-            if ty::type_is_trait(node_id_type(bcx, expr.id)) {\n-                let trait_ref =\n-                    bcx.tcx().object_cast_map.borrow()\n-                                             .get(&expr.id)\n-                                             .cloned()\n-                                             .unwrap();\n-                let trait_ref = bcx.monomorphize(&trait_ref);\n-                let datum = unpack_datum!(bcx, trans(bcx, &**val));\n-                meth::trans_trait_cast(bcx, datum, expr.id,\n-                                       trait_ref, dest)\n-            } else {\n-                bcx.tcx().sess.span_bug(expr.span,\n-                                        \"expr_cast of non-trait\");\n-            }\n+        ast::ExprCast(..) => {\n+            // Trait casts used to come this way, now they should be coercions.\n+            bcx.tcx().sess.span_bug(expr.span, \"DPS expr_cast (residual trait cast?)\")\n         }\n         ast::ExprAssignOp(op, ref dst, ref src) => {\n             trans_assign_op(bcx, expr, op, &**dst, &**src)\n@@ -2091,7 +2078,7 @@ fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = bcx;\n     let ccx = bcx.ccx();\n \n-    let t_in = expr_ty(bcx, expr);\n+    let t_in = expr_ty_adjusted(bcx, expr);\n     let t_out = node_id_type(bcx, id);\n     let k_in = cast_type_kind(bcx.tcx(), t_in);\n     let k_out = cast_type_kind(bcx.tcx(), t_out);\n@@ -2103,7 +2090,8 @@ fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // by-value as appropriate given its type:\n     let mut datum = unpack_datum!(bcx, trans(bcx, expr));\n \n-    if cast_is_noop(datum.ty, t_out) {\n+    let datum_ty = monomorphize_type(bcx, datum.ty);\n+    if cast_is_noop(datum_ty, t_out) {\n         datum.ty = t_out;\n         return DatumBlock::new(bcx, datum);\n     }"}, {"sha": "d13076df637619767345910d37ced49b6ab7e879", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -26,7 +26,7 @@ use trans::common::*;\n use trans::consts;\n use trans::datum::*;\n use trans::debuginfo::DebugLoc;\n-use trans::expr::{SaveIn, Ignore};\n+use trans::expr::SaveIn;\n use trans::expr;\n use trans::glue;\n use trans::machine;\n@@ -861,44 +861,6 @@ fn emit_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         .collect()\n }\n \n-/// Generates the code to convert from a pointer (`Box<T>`, `&T`, etc) into an object\n-/// (`Box<Trait>`, `&Trait`, etc). This means creating a pair where the first word is the vtable\n-/// and the second word is the pointer.\n-pub fn trans_trait_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                    datum: Datum<'tcx, Expr>,\n-                                    id: ast::NodeId,\n-                                    trait_ref: ty::PolyTraitRef<'tcx>,\n-                                    dest: expr::Dest)\n-                                    -> Block<'blk, 'tcx> {\n-    let mut bcx = bcx;\n-    let _icx = push_ctxt(\"meth::trans_trait_cast\");\n-\n-    let lldest = match dest {\n-        Ignore => {\n-            return datum.clean(bcx, \"trait_trait_cast\", id);\n-        }\n-        SaveIn(dest) => dest\n-    };\n-\n-    debug!(\"trans_trait_cast: trait_ref={}\",\n-           trait_ref.repr(bcx.tcx()));\n-\n-    let llty = type_of(bcx.ccx(), datum.ty);\n-\n-    // Store the pointer into the first half of pair.\n-    let llboxdest = GEPi(bcx, lldest, &[0, abi::FAT_PTR_ADDR]);\n-    let llboxdest = PointerCast(bcx, llboxdest, llty.ptr_to());\n-    bcx = datum.store_to(bcx, llboxdest);\n-\n-    // Store the vtable into the second half of pair.\n-    let vtable = get_vtable(bcx.ccx(), trait_ref, bcx.fcx.param_substs);\n-    let llvtabledest = GEPi(bcx, lldest, &[0, abi::FAT_PTR_EXTRA]);\n-    let llvtabledest = PointerCast(bcx, llvtabledest, val_ty(vtable).ptr_to());\n-    Store(bcx, vtable, llvtabledest);\n-\n-    bcx\n-}\n-\n /// Replace the self type (&Self or Box<Self>) with an opaque pointer.\n pub fn opaque_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)\n         -> &'tcx ty::BareFnTy<'tcx> {"}, {"sha": "920154bc916f48f19603e62c82886dc3e761842d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -332,14 +332,14 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     // E.g., `[T, ..n]` -> `([T], UnsizeLength(n))`\n     fn unsize_ty(&self,\n                  ty_a: Ty<'tcx>,\n-                 a: Ty<'tcx>,\n+                 a: Ty<'tcx>, // TODO unwrap ty_a here, not in the caller\n                  ty_b: Ty<'tcx>)\n-                 -> Option<(Ty<'tcx>, ty::UnsizeKind<'tcx>)> {\n-        debug!(\"unsize_ty(a={:?}, ty_b={})\", a, ty_b.repr(self.tcx()));\n-\n+                 -> Option<(Ty<'tcx>, ty::UnsizeKind<'tcx>)>\n+    {\n         let tcx = self.tcx();\n \n-        self.unpack_actual_value(ty_b, |b|\n+        self.unpack_actual_value(ty_b, |b| {\n+            debug!(\"unsize_ty(a={}, b={})\", a.repr(self.tcx()), b.repr(self.tcx()));\n             match (&a.sty, &b.sty) {\n                 (&ty::ty_vec(t_a, Some(len)), &ty::ty_vec(_, None)) => {\n                     let ty = ty::mk_vec(tcx, t_a, None);\n@@ -438,7 +438,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 }\n                 _ => None\n             }\n-        )\n+        })\n     }\n \n     fn coerce_from_fn_pointer(&self,"}, {"sha": "cd6a1226e00c9d639d8c83d38891caaf13122e85", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -53,9 +53,11 @@ pub fn eqtype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n     }\n }\n \n-// Checks that the type `actual` can be coerced to `expected`.\n-pub fn coerce<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n-                        expected: Ty<'tcx>, expr: &ast::Expr) {\n+// Checks that the type of `expr` can be coerced to `expected`.\n+pub fn coerce<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                        sp: Span,\n+                        expected: Ty<'tcx>,\n+                        expr: &ast::Expr) {\n     let expr_ty = fcx.expr_ty(expr);\n     debug!(\"demand::coerce(expected = {}, expr_ty = {})\",\n            expected.repr(fcx.ccx.tcx),"}, {"sha": "4eddf8ae97a9019bfd2eaed2c1320f7bceabf424", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 87, "deletions": 63, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -184,6 +184,8 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     // def-id of the closure, so that once we decide, we can easily go\n     // back and process them.\n     deferred_call_resolutions: RefCell<DefIdMap<Vec<DeferredCallResolutionHandler<'tcx>>>>,\n+\n+    deferred_cast_checks: RefCell<Vec<CastCheck<'tcx>>>,\n }\n \n trait DeferredCallResolution<'tcx> {\n@@ -192,6 +194,15 @@ trait DeferredCallResolution<'tcx> {\n \n type DeferredCallResolutionHandler<'tcx> = Box<DeferredCallResolution<'tcx>+'tcx>;\n \n+/// Reifies a cast check to be checked once we have full type information for\n+/// a function context.\n+struct CastCheck<'tcx> {\n+    expr: ast::Expr,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: Ty<'tcx>,\n+    span: Span,\n+}\n+\n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n #[derive(Copy)]\n@@ -399,6 +410,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             fn_sig_map: RefCell::new(NodeMap()),\n             fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n             deferred_call_resolutions: RefCell::new(DefIdMap()),\n+            deferred_cast_checks: RefCell::new(Vec::new()),\n         }\n     }\n \n@@ -508,6 +520,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             vtable::select_all_fcx_obligations_and_apply_defaults(&fcx);\n             upvar::closure_analyze_fn(&fcx, fn_id, decl, body);\n             vtable::select_all_fcx_obligations_or_error(&fcx);\n+            fcx.check_casts();\n             regionck::regionck_fn(&fcx, fn_id, fn_span, decl, body);\n             writeback::resolve_type_vars_in_fn(&fcx, decl, body);\n         }\n@@ -1053,11 +1066,7 @@ fn report_cast_to_unsized_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n \n-fn check_cast_inner<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                              span: Span,\n-                              t_1: Ty<'tcx>,\n-                              t_e: Ty<'tcx>,\n-                              e: &ast::Expr) {\n+fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n     fn cast_through_integer_err<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                           span: Span,\n                                           t_1: Ty<'tcx>,\n@@ -1070,6 +1079,33 @@ fn check_cast_inner<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }, t_e, None);\n     }\n \n+    let span = cast.span;\n+    let e = &cast.expr;\n+    let t_e = structurally_resolved_type(fcx, span, cast.expr_ty);\n+    let t_1 = structurally_resolved_type(fcx, span, cast.cast_ty);\n+\n+    // Check for trivial casts.\n+    if !ty::type_has_ty_infer(t_1) {\n+        if let Ok(()) = coercion::mk_assignty(fcx, e, t_e, t_1) {\n+            if ty::type_is_numeric(t_1) && ty::type_is_numeric(t_e) {\n+                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CAST,\n+                                        e.id,\n+                                        span,\n+                                        format!(\"trivial numeric cast: {} as {}\",\n+                                                fcx.infcx().ty_to_string(t_e),\n+                                                fcx.infcx().ty_to_string(t_1)));\n+            } else {\n+                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_CAST,\n+                                        e.id,\n+                                        span,\n+                                        format!(\"trivial cast: {} as {}\",\n+                                                fcx.infcx().ty_to_string(t_e),\n+                                                fcx.infcx().ty_to_string(t_1)));\n+            }\n+            return;\n+        }\n+    }\n+\n     let t_e_is_bare_fn_item = ty::type_is_bare_fn_item(t_e);\n     let t_e_is_scalar = ty::type_is_scalar(t_e);\n     let t_e_is_integral = ty::type_is_integral(t_e);\n@@ -1085,18 +1121,17 @@ fn check_cast_inner<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let t_1_is_trivial = t_1_is_scalar && !t_1_is_char && !t_1_is_bare_fn;\n \n     if t_e_is_bare_fn_item && t_1_is_bare_fn {\n-        demand::coerce(fcx, e.span, t_1, &*e);\n+        demand::coerce(fcx, e.span, t_1, &e);\n     } else if t_1_is_char {\n         let t_e = fcx.infcx().shallow_resolve(t_e);\n         if t_e.sty != ty::ty_uint(ast::TyU8) {\n             fcx.type_error_message(span, |actual| {\n-                format!(\"only `u8` can be cast as \\\n-                         `char`, not `{}`\", actual)\n+                format!(\"only `u8` can be cast as `char`, not `{}`\", actual)\n             }, t_e, None);\n         }\n     } else if t_1.sty == ty::ty_bool {\n         span_err!(fcx.tcx().sess, span, E0054,\n-            \"cannot cast as `bool`, compare with zero instead\");\n+                  \"cannot cast as `bool`, compare with zero instead\");\n     } else if t_1_is_float && (t_e_is_scalar || t_e_is_c_enum) && !(\n         t_e_is_integral || t_e_is_float || t_e.sty == ty::ty_bool) {\n         // Casts to float must go through an integer or boolean\n@@ -1145,7 +1180,7 @@ fn check_cast_inner<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 /* this case is allowed */\n             }\n             _ => {\n-                demand::coerce(fcx, e.span, t_1, &*e);\n+                demand::coerce(fcx, e.span, t_1, &e);\n             }\n         }\n     } else if !(t_e_is_scalar && t_1_is_trivial) {\n@@ -1162,49 +1197,6 @@ fn check_cast_inner<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n }\n \n-fn check_cast<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                       cast_expr: &ast::Expr,\n-                       e: &'tcx ast::Expr,\n-                       t: &ast::Ty) {\n-    let id = cast_expr.id;\n-    let span = cast_expr.span;\n-\n-    // Find the type of `e`. Supply hints based on the type we are casting to,\n-    // if appropriate.\n-    let t_1 = fcx.to_ty(t);\n-    let t_1 = structurally_resolved_type(fcx, span, t_1);\n-\n-    check_expr_with_expectation(fcx, e, ExpectCastableToType(t_1));\n-\n-    let t_e = fcx.expr_ty(e);\n-\n-    debug!(\"t_1={}\", fcx.infcx().ty_to_string(t_1));\n-    debug!(\"t_e={}\", fcx.infcx().ty_to_string(t_e));\n-\n-    if ty::type_is_error(t_e) {\n-        fcx.write_error(id);\n-        return\n-    }\n-\n-    if !fcx.type_is_known_to_be_sized(t_1, cast_expr.span) {\n-        report_cast_to_unsized_type(fcx, span, t.span, e.span, t_1, t_e, id);\n-        return\n-    }\n-\n-    if ty::type_is_trait(t_1) {\n-        // This will be looked up later on.\n-        vtable::check_object_cast(fcx, cast_expr, e, t_1);\n-        fcx.write_ty(id, t_1);\n-        return\n-    }\n-\n-    let t_1 = structurally_resolved_type(fcx, span, t_1);\n-    let t_e = structurally_resolved_type(fcx, span, t_e);\n-\n-    check_cast_inner(fcx, span, t_1, t_e, e);\n-    fcx.write_ty(id, t_1);\n-}\n-\n impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     fn tcx(&self) -> &ty::ctxt<'tcx> { self.ccx.tcx }\n \n@@ -1372,7 +1364,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn tag(&self) -> String {\n-        format!(\"{:?}\", self as *const FnCtxt)\n+        let self_ptr: *const FnCtxt = self;\n+        format!(\"{:?}\", self_ptr)\n     }\n \n     pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> Ty<'tcx> {\n@@ -1416,14 +1409,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.inh.node_types.borrow_mut().insert(node_id, ty);\n     }\n \n-    pub fn write_object_cast(&self,\n-                             key: ast::NodeId,\n-                             trait_ref: ty::PolyTraitRef<'tcx>) {\n-        debug!(\"write_object_cast key={} trait_ref={}\",\n-               key, trait_ref.repr(self.tcx()));\n-        self.inh.object_cast_map.borrow_mut().insert(key, trait_ref);\n-    }\n-\n     pub fn write_substs(&self, node_id: ast::NodeId, substs: ty::ItemSubsts<'tcx>) {\n         if !substs.substs.is_noop() {\n             debug!(\"write_substs({}, {}) in fcx {}\",\n@@ -1923,6 +1908,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         o_field.map(|f| ty::lookup_field_type(self.tcx(), class_id, f.id, substs))\n                .map(|t| self.normalize_associated_types_in(span, &t))\n     }\n+\n+    fn check_casts(&self) {\n+        let mut deferred_cast_checks = self.inh.deferred_cast_checks.borrow_mut();\n+        for check in deferred_cast_checks.iter() {\n+            check_cast(self, check);\n+        }\n+\n+        deferred_cast_checks.clear();\n+    }\n }\n \n impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n@@ -3828,7 +3822,33 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         if let ast::TyFixedLengthVec(_, ref count_expr) = t.node {\n             check_expr_with_hint(fcx, &**count_expr, tcx.types.uint);\n         }\n-        check_cast(fcx, expr, &**e, &**t);\n+\n+        // Find the type of `e`. Supply hints based on the type we are casting to,\n+        // if appropriate.\n+        let t_1 = fcx.to_ty(t);\n+        let t_1 = structurally_resolved_type(fcx, expr.span, t_1);\n+        check_expr_with_expectation(fcx, e, ExpectCastableToType(t_1));\n+        let t_e = fcx.expr_ty(e);\n+\n+        // Eagerly check for some obvious errors.\n+        if ty::type_is_error(t_e) {\n+            fcx.write_error(id);\n+        } else if !fcx.type_is_known_to_be_sized(t_1, expr.span) {\n+            report_cast_to_unsized_type(fcx, expr.span, t.span, e.span, t_1, t_e, id);\n+        } else {\n+            // Write a type for the whole expression, assuming everything is going\n+            // to work out Ok.\n+            fcx.write_ty(id, t_1);\n+\n+            // Defer other checks until we're done type checking.\n+            let mut deferred_cast_checks = fcx.inh.deferred_cast_checks.borrow_mut();\n+            deferred_cast_checks.push(CastCheck {\n+                expr: (**e).clone(),\n+                expr_ty: t_e,\n+                cast_ty: t_1,\n+                span: expr.span,\n+            });\n+        }\n       }\n       ast::ExprVec(ref args) => {\n         let uty = expected.to_option(fcx).and_then(|uty| {\n@@ -4461,6 +4481,7 @@ fn check_const_with_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     check_expr_with_hint(fcx, e, declty);\n     demand::coerce(fcx, e.span, declty, e);\n     vtable::select_all_fcx_obligations_or_error(fcx);\n+    fcx.check_casts();\n     regionck::regionck_expr(fcx, e);\n     writeback::resolve_type_vars_in_expr(fcx, e);\n }\n@@ -4560,6 +4581,8 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                      ty: attr::IntType,\n                      disr: ty::Disr) -> bool {\n         fn uint_in_range(ccx: &CrateCtxt, ty: ast::UintTy, disr: ty::Disr) -> bool {\n+            #![allow(trivial_numeric_cast)]\n+\n             match ty {\n                 ast::TyU8 => disr as u8 as Disr == disr,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n@@ -4588,6 +4611,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                           id: ast::NodeId,\n                           hint: attr::ReprAttr)\n                           -> Vec<Rc<ty::VariantInfo<'tcx>>> {\n+        #![allow(trivial_numeric_cast)]\n         use std::num::Int;\n \n         let rty = ty::node_id_to_type(ccx.tcx, id);"}, {"sha": "2858dc9b569fe1adaa22ffb7cde199e4e375404a", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use check::{FnCtxt};\n-use check::demand;\n use middle::traits::{self, ObjectSafetyViolation, MethodViolationCode};\n use middle::traits::{Obligation, ObligationCause};\n use middle::traits::report_fulfillment_errors;\n@@ -19,83 +18,6 @@ use syntax::codemap::Span;\n use util::nodemap::FnvHashSet;\n use util::ppaux::{Repr, UserString};\n \n-pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                   cast_expr: &ast::Expr,\n-                                   source_expr: &ast::Expr,\n-                                   target_object_ty: Ty<'tcx>)\n-{\n-    let tcx = fcx.tcx();\n-    debug!(\"check_object_cast(cast_expr={}, target_object_ty={})\",\n-           cast_expr.repr(tcx),\n-           target_object_ty.repr(tcx));\n-\n-    // Look up vtables for the type we're casting to,\n-    // passing in the source and target type.  The source\n-    // must be a pointer type suitable to the object sigil,\n-    // e.g.: `&x as &Trait` or `box x as Box<Trait>`\n-\n-    // First, construct a fresh type that we can feed into `<expr>`\n-    // within `<expr> as <type>` to inform type inference (e.g. to\n-    // tell it that we are expecting a `Box<_>` or an `&_`).\n-    let fresh_ty = fcx.infcx().next_ty_var();\n-    let (object_trait_ty, source_expected_ty) = match target_object_ty.sty {\n-        ty::ty_uniq(object_trait_ty) => {\n-            (object_trait_ty, ty::mk_uniq(fcx.tcx(), fresh_ty))\n-        }\n-        ty::ty_rptr(target_region, ty::mt { ty: object_trait_ty,\n-                                            mutbl: target_mutbl }) => {\n-            (object_trait_ty,\n-             ty::mk_rptr(fcx.tcx(),\n-                         target_region, ty::mt { ty: fresh_ty,\n-                                                 mutbl: target_mutbl }))\n-        }\n-        _ => {\n-            fcx.tcx().sess.span_bug(source_expr.span, \"expected object type\");\n-        }\n-    };\n-\n-    let source_ty = fcx.expr_ty(source_expr);\n-    debug!(\"check_object_cast pre unify source_ty={}\", source_ty.repr(tcx));\n-\n-    // This ensures that the source_ty <: source_expected_ty, which\n-    // will ensure e.g. that &'a T <: &'b T when doing `&'a T as &'b Trait`\n-    //\n-    // FIXME (pnkfelix): do we need to use suptype_with_fn in order to\n-    // override the error message emitted when the types do not work\n-    // out in the manner desired?\n-    demand::suptype(fcx, source_expr.span, source_expected_ty, source_ty);\n-\n-    debug!(\"check_object_cast postunify source_ty={}\", source_ty.repr(tcx));\n-\n-    let object_trait = object_trait(&object_trait_ty);\n-\n-    // Ensure that if Ptr<T> is cast to Ptr<Trait>, then T : Trait.\n-    push_cast_obligation(fcx, cast_expr, object_trait, fresh_ty);\n-    check_object_safety(tcx, object_trait, source_expr.span);\n-\n-    fn object_trait<'a, 'tcx>(t: &'a Ty<'tcx>) -> &'a ty::TyTrait<'tcx> {\n-        match t.sty {\n-            ty::ty_trait(ref ty_trait) => &**ty_trait,\n-            _ => panic!(\"expected ty_trait\")\n-        }\n-    }\n-\n-    fn push_cast_obligation<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                      cast_expr: &ast::Expr,\n-                                      object_trait: &ty::TyTrait<'tcx>,\n-                                      referent_ty: Ty<'tcx>) {\n-        let object_trait_ref =\n-            register_object_cast_obligations(fcx,\n-                                             cast_expr.span,\n-                                             object_trait,\n-                                             referent_ty);\n-\n-        // Finally record the object_trait_ref for use during trans\n-        // (it would prob be better not to do this, but it's just kind\n-        // of a pain to have to reconstruct it).\n-        fcx.write_object_cast(cast_expr.id, object_trait_ref);\n-    }\n-}\n \n // Check that a trait is 'object-safe'. This should be checked whenever a trait object\n // is created (by casting or coercion, etc.). A trait is object-safe if all its"}, {"sha": "cfa84de5ca7c9f37577877f1bc6f38ea347300ca", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -308,8 +308,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n         (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n                 = &mut opaque as *mut _ as *mut libc::c_void;\n-        (*renderer).blockcode = Some(block as blockcodefn);\n-        (*renderer).header = Some(header as headerfn);\n+        (*renderer).blockcode = Some(block);\n+        (*renderer).header = Some(header);\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, s.as_ptr(),\n@@ -380,8 +380,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);\n-        (*renderer).blockcode = Some(block as blockcodefn);\n-        (*renderer).header = Some(header as headerfn);\n+        (*renderer).blockcode = Some(block);\n+        (*renderer).header = Some(header);\n         (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n                 = tests as *mut _ as *mut libc::c_void;\n \n@@ -501,10 +501,10 @@ pub fn plain_summary_line(md: &str) -> String {\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let mut plain_renderer: hoedown_renderer = ::std::mem::zeroed();\n-        let renderer = &mut plain_renderer as *mut hoedown_renderer;\n+        let renderer: *mut hoedown_renderer = &mut plain_renderer;\n         (*renderer).opaque = ob as *mut libc::c_void;\n-        (*renderer).link = Some(link as linkfn);\n-        (*renderer).normal_text = Some(normal_text as normaltextfn);\n+        (*renderer).link = Some(link);\n+        (*renderer).normal_text = Some(normal_text);\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, md.as_ptr(),"}, {"sha": "17c414485407b146325ce97aa35d60f726ece9ef", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -2429,7 +2429,10 @@ pub trait ToJson {\n macro_rules! to_json_impl_i64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n-            fn to_json(&self) -> Json { Json::I64(*self as i64) }\n+            fn to_json(&self) -> Json {\n+                #![allow(trivial_numeric_cast)]\n+                Json::I64(*self as i64)\n+            }\n         })+\n     )\n }\n@@ -2439,7 +2442,10 @@ to_json_impl_i64! { int, i8, i16, i32, i64 }\n macro_rules! to_json_impl_u64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n-            fn to_json(&self) -> Json { Json::U64(*self as u64) }\n+            fn to_json(&self) -> Json {\n+                #![allow(trivial_numeric_cast)]\n+                Json::U64(*self as u64)\n+            }\n         })+\n     )\n }"}, {"sha": "228b885b653c0671e6bd6e997d7498b07a6fc682", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -135,6 +135,8 @@\n #![feature(no_std)]\n #![no_std]\n \n+#![allow(trivial_cast)]\n+#![allow(trivial_numeric_cast)]\n #![deny(missing_docs)]\n \n #[cfg(test)] extern crate test;"}, {"sha": "b77c8d50997f5edd07a01879cb022d31af248eb1", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -337,10 +337,10 @@ pub fn set_stderr(_stderr: Box<Writer + Send>) -> Option<Box<Writer + Send>> {\n //      })\n //  })\n fn with_task_stdout<F>(f: F) where F: FnOnce(&mut Writer) -> IoResult<()> {\n-    let mut my_stdout = LOCAL_STDOUT.with(|slot| {\n+    let mut my_stdout: Box<Writer + Send> = LOCAL_STDOUT.with(|slot| {\n         slot.borrow_mut().take()\n     }).unwrap_or_else(|| {\n-        box stdout() as Box<Writer + Send>\n+        box stdout()\n     });\n     let result = f(&mut *my_stdout);\n     let mut var = Some(my_stdout);"}, {"sha": "86b1d031f688bee52a99417607893f6aa76827c2", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -73,7 +73,7 @@ fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n     use thread::Thread;\n \n     let something_around_the_top_of_the_stack = 1;\n-    let addr = &something_around_the_top_of_the_stack as *const int;\n+    let addr = &something_around_the_top_of_the_stack as *const _ as *const int;\n     let my_stack_top = addr as uint;\n \n     // FIXME #11359 we just assume that this thread has a stack of a"}, {"sha": "6a00fff186002f4383ec2b0e24da9556d3b25dcd", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -284,7 +284,7 @@ pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(-2);\n \n impl ExpnId {\n     pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {\n-        ExpnId(cookie as u32)\n+        ExpnId(cookie)\n     }\n \n     pub fn to_llvm_cookie(self) -> i32 {\n@@ -376,7 +376,7 @@ impl Encodable for FileMap {\n                         match bytes_per_diff {\n                             1 => for diff in diff_iter { try! { (diff.0 as u8).encode(s) } },\n                             2 => for diff in diff_iter { try! { (diff.0 as u16).encode(s) } },\n-                            4 => for diff in diff_iter { try! { (diff.0 as u32).encode(s) } },\n+                            4 => for diff in diff_iter { try! { diff.0.encode(s) } },\n                             _ => unreachable!()\n                         }\n                     }\n@@ -650,7 +650,7 @@ impl CodeMap {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         let mut lines = Vec::new();\n-        for i in lo.line - 1..hi.line as usize {\n+        for i in lo.line - 1..hi.line {\n             lines.push(i);\n         };\n         FileLines {file: lo.file, lines: lines}"}, {"sha": "b679456b3537ba00ea448ec2ca0706e7da07bbd3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -264,7 +264,7 @@ macro_rules! make_MacEager {\n                     box MacEager {\n                         $fld: Some(v),\n                         ..Default::default()\n-                    } as Box<MacResult>\n+                    }\n                 }\n             )*\n         }\n@@ -330,7 +330,7 @@ impl DummyResult {\n     /// Use this as a return value after hitting any errors and\n     /// calling `span_err`.\n     pub fn any(sp: Span) -> Box<MacResult+'static> {\n-        box DummyResult { expr_only: false, span: sp } as Box<MacResult+'static>\n+        box DummyResult { expr_only: false, span: sp }\n     }\n \n     /// Create a default MacResult that can only be an expression.\n@@ -339,7 +339,7 @@ impl DummyResult {\n     /// if an error is encountered internally, the user will receive\n     /// an error that they also used it in the wrong place.\n     pub fn expr(sp: Span) -> Box<MacResult+'static> {\n-        box DummyResult { expr_only: true, span: sp } as Box<MacResult+'static>\n+        box DummyResult { expr_only: true, span: sp }\n     }\n \n     /// A plain dummy expression."}, {"sha": "1aceec310e1afb1f8137e0a4a1412b7c3d5e500b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -262,6 +262,7 @@ pub mod rt {\n         (unsigned, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n+                    #![allow(trivial_numeric_cast)]\n                     let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }"}, {"sha": "1e53db6030143bbcad443e12b866da8fa706c273", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -169,7 +169,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 // Weird, but useful for X-macros.\n                 return box ParserAnyMacro {\n                     parser: RefCell::new(p),\n-                } as Box<MacResult+'cx>\n+                }\n               }\n               Failure(sp, ref msg) => if sp.lo >= best_fail_spot.lo {\n                 best_fail_spot = sp;"}, {"sha": "0843713681bbdaad8b27502a7b8c34956ba151de", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -758,7 +758,7 @@ impl<'a> StringReader<'a> {\n                 self.err_span_char(self.last_pos, self.pos,\n                               \"illegal character in numeric character escape\", c);\n                 0\n-            }) as u32;\n+            });\n             self.bump();\n         }\n \n@@ -887,7 +887,7 @@ impl<'a> StringReader<'a> {\n                     self.fatal_span_char(self.last_pos, self.pos,\n                                    \"illegal character in unicode escape\", c);\n                 }\n-            }) as u32;\n+            });\n             self.bump();\n             count += 1;\n         }"}, {"sha": "44097ffeb205921da76a16ec591b2d2a1831862e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -865,7 +865,7 @@ impl<'a> Parser<'a> {\n         } else {\n             // Avoid token copies with `replace`.\n             let buffer_start = self.buffer_start as usize;\n-            let next_index = (buffer_start + 1) & 3 as usize;\n+            let next_index = (buffer_start + 1) & 3;\n             self.buffer_start = next_index as isize;\n \n             let placeholder = TokenAndSpan {"}, {"sha": "5941f044a078a8975c8926b607284910bdcaea0c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -2831,7 +2831,7 @@ impl<'a> State<'a> {\n             ast::LitBinary(ref v) => {\n                 let mut escaped: String = String::new();\n                 for &ch in &**v {\n-                    escaped.extend(ascii::escape_default(ch as u8)\n+                    escaped.extend(ascii::escape_default(ch)\n                                          .map(|c| c as char));\n                 }\n                 word(&mut self.s, &format!(\"b\\\"{}\\\"\", escaped))"}, {"sha": "41e066cc94a92b2aab65ea336f0c2b16639bffe6", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -103,7 +103,7 @@ impl Write for WriterWrapper {\n /// opened.\n pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stdout() as Box<Write + Send>,\n+        wrapped: box std::io::stdout(),\n     })\n }\n \n@@ -112,14 +112,14 @@ pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     let ti = TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stdout() as Box<Write + Send>,\n+        wrapped: box std::io::stdout(),\n     });\n \n     match ti {\n         Some(t) => Some(t),\n         None => {\n             WinConsole::new(WriterWrapper {\n-                wrapped: box std::io::stdout() as Box<Write + Send>,\n+                wrapped: box std::io::stdout(),\n             })\n         }\n     }\n@@ -130,7 +130,7 @@ pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stderr() as Box<Write + Send>,\n+        wrapped: box std::io::stderr(),\n     })\n }\n \n@@ -139,14 +139,14 @@ pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     let ti = TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stderr() as Box<Write + Send>,\n+        wrapped: box std::io::stderr(),\n     });\n \n     match ti {\n         Some(t) => Some(t),\n         None => {\n             WinConsole::new(WriterWrapper {\n-                wrapped: box std::io::stderr() as Box<Write + Send>,\n+                wrapped: box std::io::stderr(),\n             })\n         }\n     }"}, {"sha": "1d6657d5932c0d5a410282254e8a7056571dc148", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -190,7 +190,7 @@ impl<T: Write+Send+'static> TerminfoTerminal<T> {\n                         out: out,\n                         ti: msys_terminfo(),\n                         num_colors: 8,\n-                    } as Box<Terminal<T>+Send>)\n+                    })\n                 },\n                 _ => {\n                     debug!(\"error finding terminfo entry: {:?}\", err);\n@@ -213,7 +213,7 @@ impl<T: Write+Send+'static> TerminfoTerminal<T> {\n \n         return Some(box TerminfoTerminal {out: out,\n                                           ti: inf,\n-                                          num_colors: nc} as Box<Terminal<T>+Send>);\n+                                          num_colors: nc});\n     }\n \n     fn dim_if_necessary(&self, color: color::Color) -> color::Color {"}, {"sha": "8d0a9e6e9717d502d2e7b17fa1dd34dceddc90e4", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -186,7 +186,7 @@ pub fn parse(file: &mut Read, longnames: bool)\n     let magic = try!(read_le_u16(file));\n     if magic != 0x011A {\n         return Err(format!(\"invalid magic number: expected {:x}, found {:x}\",\n-                           0x011A as usize, magic as usize));\n+                           0x011A_usize, magic as usize));\n     }\n \n     let names_bytes          = try!(read_le_u16(file)) as int;"}, {"sha": "c48c7e413d03baa961ec62c60a07b19e82da678c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -1021,7 +1021,7 @@ impl MetricMap {\n         let MetricMap(ref mm) = *self;\n         let v : Vec<String> = mm.iter()\n             .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n-                                 v.value as f64, v.noise as f64))\n+                                 v.value, v.noise))\n             .collect();\n         v.connect(\", \")\n     }"}, {"sha": "44af43be7877344cfd878700984662adb9f60058", "filename": "src/rustbook/subcommand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Frustbook%2Fsubcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Frustbook%2Fsubcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fsubcommand.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -32,11 +32,11 @@ pub trait Subcommand {\n \n /// Create a Subcommand object based on its name.\n pub fn parse_name(name: &str) -> Option<Box<Subcommand>> {\n-    for parser in [\n-        help::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n-        build::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n-        serve::parse_cmd as fn(&str) -> Option<Box<Subcommand>>,\n-        test::parse_cmd as fn(&str) -> Option<Box<Subcommand>>].iter() {\n+    let cmds: [fn(&str) -> Option<Box<Subcommand>>; 4] = [help::parse_cmd,\n+                                                          build::parse_cmd,\n+                                                          serve::parse_cmd,\n+                                                          test::parse_cmd];\n+    for parser in cmds.iter() {\n         let parsed = (*parser)(name);\n         if parsed.is_some() { return parsed }\n     }"}, {"sha": "d66cfe9bf636b716867370a728bd5f52091142c6", "filename": "src/test/auxiliary/issue-11224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11224.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -21,6 +21,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a = &1 as &inner::Trait;\n+    let a = &1i as &inner::Trait;\n     a.f();\n }"}, {"sha": "3f994102a173e0853f052c0b7ba9f3d65e0864bc", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -22,11 +22,11 @@ fn main() {\n     //~| expected u8\n     //~| found array of 1 elements\n \n-    let local = [0];\n+    let local: [u8; 1] = [0];\n     let _v = &local as *mut u8;\n     //~^ ERROR mismatched types\n     //~| expected `*mut u8`\n-    //~| found `&[_; 1]`\n+    //~| found `&[u8; 1]`\n     //~| expected u8,\n     //~| found array of 1 elements\n }"}, {"sha": "a4e0f69b63b39e0b55c2353ca65c1d95221c6180", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -19,8 +19,7 @@ mod Y {\n }\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR cannot refer to other statics by value\n-//~| ERROR the trait `core::marker::Sync` is not implemented for the type\n+//~^ ERROR the trait `core::marker::Sync` is not implemented for the type\n //~| ERROR function calls in statics are limited to struct and enum constructors\n \n fn main() {}"}, {"sha": "c27362eea3e3c6cea897f9fe8ac073de693fc3d6", "filename": "src/test/compile-fail/issue-5543.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=ed810385045ab0db90303574ba3ea47dfa2a36d5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Foo { fn foo(&self) {} }\n-impl Foo for u8 {}\n-\n-fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let r: Box<Foo> = Box::new(5);\n-    let _m: Box<Foo> = r as Box<Foo>;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `Foo`\n-}"}, {"sha": "71494fd5f38dcef2116756b89e57a7c6edabdb7f", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -28,6 +28,7 @@ fn f<T>(val: T) {\n     let a = &t as &Gettable<T>;\n     //~^ ERROR the trait `core::marker::Send` is not implemented\n     //~^^ ERROR the trait `core::marker::Copy` is not implemented\n+    //~^^^ ERROR the parameter type `T` may not live long enough\n }\n \n fn g<T>(val: T) {"}, {"sha": "ba1b7f03b0f419b2fe15570b7594b77bf4a93f7d", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -86,6 +86,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a = &1 as &inner::Trait;\n+    let a: &inner::Trait = &1_isize;\n     a.f();\n }"}, {"sha": "b3cf8257b8f6efa42e6a2f0538e98d0b8a10f554", "filename": "src/test/compile-fail/lint-unnecessary-casts.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs?ref=ed810385045ab0db90303574ba3ea47dfa2a36d5", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![forbid(unused_typecasts)]\n-\n-fn foo_i32(_: i32) {}\n-\n-fn foo_u64(a: u64) {\n-    let b: i32 = a as i32;\n-    foo_i32(b as i32); //~ ERROR: unnecessary type cast\n-}\n-\n-fn main() {\n-    let x: u64 = 1;\n-    let y: u64 = x as u64; //~ ERROR: unnecessary type cast\n-    foo_u64(y as u64); //~ ERROR: unnecessary type cast\n-}"}, {"sha": "addeba03ab87025493ac7eedb62b944433a71bbe", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_cast)]\n \n fn f1(x: isize) {\n     //~^ ERROR unused variable: `x`"}, {"sha": "3b0e5786f3db3bc16a6f6fe0cf0df939789f2cb7", "filename": "src/test/compile-fail/object-safety-by-value-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n+#![allow(trivial_cast)]\n \n trait Bar {\n     fn bar(self);"}, {"sha": "253132e5f07d02ed93ea98fcb613cb440934a750", "filename": "src/test/compile-fail/regions-close-object-into-object-5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -24,6 +24,7 @@ impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n     box B(&*v) as Box<X> //~ ERROR the parameter type `T` may not live long enough\n+        //~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "924044647d84a08473c547d8da2366d2bb8b34b6", "filename": "src/test/compile-fail/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -19,6 +19,7 @@ trait SomeTrait { fn get(&self) -> isize; }\n fn make_object1<A:SomeTrait>(v: A) -> Box<SomeTrait+'static> {\n     box v as Box<SomeTrait+'static>\n         //~^ ERROR the parameter type `A` may not live long enough\n+        //~^^ ERROR the parameter type `A` may not live long enough\n }\n \n fn make_object2<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n@@ -28,6 +29,7 @@ fn make_object2<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'b> {\n     box v as Box<SomeTrait+'b>\n         //~^ ERROR the parameter type `A` may not live long enough\n+        //~^^ ERROR the parameter type `A` may not live long enough\n }\n \n fn main() { }"}, {"sha": "8cc531625d17956c0d01223736884c2601774dc1", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -20,7 +20,7 @@ impl MyAdd for i32 {\n }\n \n fn main() {\n-    let x = 5;\n+    let x: i32 = 5;\n     let y = x as MyAdd<i32>;\n     //~^ ERROR as `MyAdd<i32>`\n }"}, {"sha": "cac52306d6ae0e1a4d08dfd13763c4552f6099a7", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #14893. Tests that casts from vectors don't behave strangely in the\n // presence of the `_` type shorthand notation.\n+// Update: after a change to the way casts are done, we have more type information\n+// around and so the errors here are no longer exactly the same.\n \n struct X {\n     y: [u8; 2],\n@@ -18,12 +20,14 @@ struct X {\n fn main() {\n     let x1 = X { y: [0, 0] };\n \n-    let p1: *const u8 = &x1.y as *const _;  //~ ERROR mismatched types\n+    // No longer a type mismatch - the `_` can be fully resolved by type inference.\n+    let p1: *const u8 = &x1.y as *const _;\n     let t1: *const [u8; 2] = &x1.y as *const _;\n     let h1: *const [u8; 2] = &x1.y as *const [u8; 2];\n \n     let mut x1 = X { y: [0, 0] };\n \n+    // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n     let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR mismatched types\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];"}, {"sha": "d4cbd255e34c2861bcc35fee75c15dc6134a9038", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -291,15 +291,15 @@ fn main() {\n     let slice2 = &*vec2;\n \n     // Trait Objects\n-    let box_trait = (box 0) as Box<Trait1>;\n-    let ref_trait = &0 as &Trait1;\n-    let mut mut_int1 = 0;\n+    let box_trait = (box 0_isize) as Box<Trait1>;\n+    let ref_trait = &0_isize as &Trait1;\n+    let mut mut_int1 = 0_isize;\n     let mut_ref_trait = (&mut mut_int1) as &mut Trait1;\n \n-    let generic_box_trait = (box 0) as Box<Trait2<i32, Mod1::Struct2>>;\n-    let generic_ref_trait  = (&0) as &Trait2<Struct1, Struct1>;\n+    let generic_box_trait = (box 0_isize) as Box<Trait2<i32, Mod1::Struct2>>;\n+    let generic_ref_trait  = (&0_isize) as &Trait2<Struct1, Struct1>;\n \n-    let mut generic_mut_ref_trait_impl = 0;\n+    let mut generic_mut_ref_trait_impl = 0_isize;\n     let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl) as\n         &mut Trait2<Mod1::Mod2::Struct3, GenericStruct<usize, isize>>;\n "}, {"sha": "42b2fe806e95f605bbd91febc4a4737d8fa117e4", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -21,5 +21,5 @@ fn foo<'a>(x: Box<Tr+ Sync + 'a>) -> Box<Tr+ Sync + 'a> { x }\n fn main() {\n     let x: Box<Tr+ Sync>;\n \n-    Box::new(1) as Box<Tr+ Sync>;\n+    Box::new(1isize) as Box<Tr+ Sync>;\n }"}, {"sha": "474a6782b616b3af1ea845be56b948c662cda0b6", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -16,5 +16,5 @@ impl Foo for uint {}\n \n pub fn dummy() {\n     // force the vtable to be created\n-    let _x = &1 as &Foo;\n+    let _x = &1u as &Foo;\n }"}, {"sha": "0bec3af4273afad2819f79523f6bba194425dae8", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -22,6 +22,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x: Box<_> = box() (box 3 as Box<double>);\n+    let x: Box<_> = box() (box 3u as Box<double>);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "deb0c0d0dc0df884c4c0c2ba01d3df22e309b47e", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 3;\n+    let x: int = 3;\n     println!(\"&x={:x}\", (&x as *const int as uint));\n }"}, {"sha": "7347ded99e7c4e10ed96ce895b6a1147f36369b2", "filename": "src/test/run-pass/infer-container-across-object-cast.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Frun-pass%2Finfer-container-across-object-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed810385045ab0db90303574ba3ea47dfa2a36d5/src%2Ftest%2Frun-pass%2Finfer-container-across-object-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-container-across-object-cast.rs?ref=ed810385045ab0db90303574ba3ea47dfa2a36d5", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Given `<expr> as Box<Trait>`, we should be able to infer that a\n-// `Box<_>` is the expected type.\n-\n-// pretty-expanded FIXME #23616\n-\n-trait Foo { fn foo(&self) -> u32; }\n-impl Foo for u32 { fn foo(&self) -> u32 { *self } }\n-\n-// (another impl to ensure trait-matching cannot just choose from a singleton set)\n-impl Foo for  () { fn foo(&self) -> u32 { -176 } }\n-\n-trait Boxed { fn make() -> Self; }\n-impl Boxed for Box<u32> { fn make() -> Self { Box::new(7) } }\n-\n-// (another impl to ensure trait-matching cannot just choose from a singleton set)\n-impl Boxed for () { fn make() -> Self { () } }\n-\n-fn boxed_foo() {\n-    let b7 = Boxed::make() as Box<Foo>;\n-    assert_eq!(b7.foo(), 7);\n-}\n-\n-trait Refed<'a,T> { fn make(&'a T) -> Self; }\n-impl<'a> Refed<'a, u32> for &'a u32 { fn make(x: &'a u32) -> Self { x } }\n-\n-// (another impl to ensure trait-matching cannot just choose from a singleton set)\n-impl<'a,'b> Refed<'a, ()> for &'b () { fn make(_: &'a ()) -> Self { static U: () = (); &U } }\n-\n-fn refed_foo() {\n-    let a = 8;\n-    let b7 = Refed::make(&a) as &Foo;\n-    assert_eq!(b7.foo(), 8);\n-}\n-\n-fn check_subtyping_works() {\n-    fn inner<'short, 'long:'short>(_s: &'short u32,\n-                                   l: &'long u32) -> &'short (Foo+'short) {\n-        Refed::make(l) as &Foo\n-    }\n-\n-    let a = 9;\n-    let b = 10;\n-    let r = inner(&b, &a);\n-    assert_eq!(r.foo(), 9);\n-}\n-\n-pub fn main() {\n-    boxed_foo();\n-    refed_foo();\n-    check_subtyping_works();\n-}"}, {"sha": "f30991a19635251797a88dc08e06e72980789f41", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -87,12 +87,12 @@ fn main() {\n     assert_eq!(cc().unwrap(), 3);\n     assert_eq!(dd().unwrap(), 3);\n \n-    let i = box 32 as Box<A>;\n+    let i = box 32i as Box<A>;\n     assert_eq!(i.aaa(), 3);\n-    let i = box 32 as Box<A>;\n+    let i = box 32i as Box<A>;\n     assert_eq!(i.bbb(), 3);\n-    let i = box 32 as Box<A>;\n+    let i = box 32i as Box<A>;\n     assert_eq!(i.ccc().unwrap(), 3);\n-    let i = box 32 as Box<A>;\n+    let i = box 32i as Box<A>;\n     assert_eq!(i.ddd().unwrap(), 3);\n }"}, {"sha": "54773d71cbec0464575cabb24c2ea131181cadab", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -41,7 +41,7 @@ impl<'a> Outer<'a> {\n }\n \n pub fn main() {\n-    let inner = 5;\n+    let inner: int = 5;\n     let outer = Outer::new(&inner as &Inner);\n     outer.inner.print();\n }"}, {"sha": "6e88379f9a41b2676b33eb65002d535cb57376a5", "filename": "src/test/run-pass/issue-9719.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9719.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -21,7 +21,7 @@ mod a {\n     impl X for int {}\n \n     pub struct Z<'a>(Enum<&'a (X+'a)>);\n-    fn foo() { let x = 42; let z = Z(Enum::A(&x as &X)); let _ = z; }\n+    fn foo() { let x: int = 42; let z = Z(Enum::A(&x as &X)); let _ = z; }\n }\n \n mod b {\n@@ -34,7 +34,7 @@ mod b {\n     }\n \n     fn bar() {\n-        let x = 42;\n+        let x: int = 42;\n         let _y = Y { x: Some(&x as &X) };\n     }\n }\n@@ -43,7 +43,7 @@ mod c {\n     pub trait X { fn f(&self); }\n     impl X for int { fn f(&self) {} }\n     pub struct Z<'a>(Option<&'a (X+'a)>);\n-    fn main() { let x = 42; let z = Z(Some(&x as &X)); let _ = z; }\n+    fn main() { let x: int = 42; let z = Z(Some(&x as &X)); let _ = z; }\n }\n \n pub fn main() {}"}, {"sha": "de8d116255ba227a2ae18f36f8a9103871d2bca3", "filename": "src/test/run-pass/method-two-traits-distinguished-via-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -33,6 +33,6 @@ impl<T> B for *const [T] {\n \n fn main() {\n     let x: [int; 4] = [1,2,3,4];\n-    let xptr = x.as_slice() as *const _;\n+    let xptr = x.as_slice() as *const [int];\n     xptr.foo();\n }"}, {"sha": "baf8c6e4c97913e459911e0940be8e47220833d3", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -35,7 +35,7 @@ fn is<T:'static>(x: &Any) -> bool {\n }\n \n fn main() {\n-    let x = box 22 as Box<Wrap>;\n+    let x = box 22isize as Box<Wrap>;\n     println!(\"x={}\", x.get());\n     let y = x.wrap();\n }"}, {"sha": "368842ed1b0304244841ae3d233670baf9351281", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -42,7 +42,7 @@ fn do_it_imm(obj: &Foo, v: uint) {\n }\n \n pub fn main() {\n-    let mut x = 22;\n+    let mut x: uint = 22;\n     let obj = &mut x as &mut Foo;\n     do_it_mut(obj);\n     do_it_imm(obj, 23);"}, {"sha": "c87c79ca24edaab83cd7ac4aba3063342ff95493", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -83,7 +83,10 @@ impl<'s> Trait<'s> for (int,int) {\n }\n \n impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n-    fn mk() -> Box<Trait<'t>+'static> { box() (4,5) as Box<Trait> }\n+    fn mk() -> Box<Trait<'t>+'static> {\n+        let tup: Box<(int, int)> = box() (4,5);\n+        tup as Box<Trait>\n+    }\n }\n \n enum List<'l> {"}, {"sha": "920cd9e03ab6b4ee97fd876a94e5c60bbfa44d92", "filename": "src/test/run-pass/stable-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -13,6 +13,6 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    let foo = 1;\n+    let foo: int = 1;\n     assert_eq!(&foo as *const int, &foo as *const int);\n }"}, {"sha": "5c0d0fe9a63d8ed74b4ff05042e1562a6debf52c", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -19,7 +19,7 @@ use std::sync::mpsc::channel;\n pub fn main() {\n     let (tx, rx) = channel::<uint>();\n \n-    let x: Box<_> = box 1;\n+    let x: Box<int> = box 1;\n     let x_in_parent = &(*x) as *const int as uint;\n \n     let _t = Thread::spawn(move || {"}, {"sha": "53e78db68b19d485d7a4b81abc9fd4cfb0cd6c08", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -14,17 +14,17 @@\n // pretty-expanded FIXME #23616\n \n struct TestStruct {\n-    x: *const int\n+    x: *const isize\n }\n \n unsafe impl Sync for TestStruct {}\n \n-static CONSTEXPR: TestStruct = TestStruct{x: &413 as *const _};\n+static CONSTEXPR: TestStruct = TestStruct{ x: &413 };\n \n \n pub fn main() {\n     let x: Vec<_> = (0..5).collect();\n-    let expected: &[uint] = &[0,1,2,3,4];\n+    let expected: &[usize] = &[0,1,2,3,4];\n     assert_eq!(x, expected);\n \n     let x = (0..5).collect::<Vec<_>>();\n@@ -33,8 +33,8 @@ pub fn main() {\n     let y: _ = \"hello\";\n     assert_eq!(y.len(), 5);\n \n-    let ptr = &5;\n+    let ptr: &usize = &5;\n     let ptr2 = ptr as *const _;\n \n-    assert_eq!(ptr as *const uint as uint, ptr2 as uint);\n+    assert_eq!(ptr as *const usize as usize, ptr2 as usize);\n }"}, {"sha": "ba12599747068ac7666d0655578f3181456dcc4d", "filename": "src/test/run-pass/zero_sized_subslice_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95602a759d9190cad92279aa5929d30166f2255c/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs?ref=95602a759d9190cad92279aa5929d30166f2255c", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     // The subslice used to go out of bounds for zero-sized array items, check that this doesn't\n     // happen anymore\n     match x {\n-        [_, y..] => assert_eq!(&x[1] as *const _, &y[0] as *const _)\n+        [_, y..] => assert_eq!(&x[1] as *const (), &y[0] as *const ())\n     }\n }"}]}