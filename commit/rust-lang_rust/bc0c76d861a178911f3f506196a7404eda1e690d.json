{"sha": "bc0c76d861a178911f3f506196a7404eda1e690d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMGM3NmQ4NjFhMTc4OTExZjNmNTA2MTk2YTc0MDRlZGExZTY5MGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-13T19:55:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-13T20:07:24Z"}, "message": "fix for latest rustc", "tree": {"sha": "2e87b6b0c0fa8c1344b456ba31d31a60743083d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e87b6b0c0fa8c1344b456ba31d31a60743083d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0c76d861a178911f3f506196a7404eda1e690d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0c76d861a178911f3f506196a7404eda1e690d", "html_url": "https://github.com/rust-lang/rust/commit/bc0c76d861a178911f3f506196a7404eda1e690d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0c76d861a178911f3f506196a7404eda1e690d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada5edbf966b3e968e7a20e03484217dfa2ae551", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada5edbf966b3e968e7a20e03484217dfa2ae551", "html_url": "https://github.com/rust-lang/rust/commit/ada5edbf966b3e968e7a20e03484217dfa2ae551"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "1567a48efcc99c5b81f79f0876f83ea97483d6c2", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -1 +1 @@\n-d595b113584f8f446957469951fd5d31adc2a44e\n+a9ec99f4201ec33026a468ef1289f98a95b4d71a"}, {"sha": "cf50f8125c4bd84dd1feb6f096001ed32dc15646", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -30,7 +30,7 @@ struct MiriCompilerCalls {\n impl rustc_driver::Callbacks for MiriCompilerCalls {\n     fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n         let attr = (\n-            String::from(\"miri\"),\n+            syntax::symbol::Symbol::intern(\"miri\"),\n             syntax::feature_gate::AttributeType::Whitelisted,\n         );\n         compiler.session().plugin_attributes.borrow_mut().push(attr);\n@@ -47,7 +47,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n-                            if i.attrs.iter().any(|attr| attr.check_name(\"test\")) {\n+                            if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n                                 let config = MiriConfig { validate: true, args: vec![], seed: None };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));"}, {"sha": "31ed5f2ccd5386cddab1d1782f1eb0149f866db6", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -27,7 +27,7 @@ struct MiriCompilerCalls {\n impl rustc_driver::Callbacks for MiriCompilerCalls {\n     fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n         let attr = (\n-            String::from(\"miri\"),\n+            syntax::symbol::Symbol::intern(\"miri\"),\n             syntax::feature_gate::AttributeType::Whitelisted,\n         );\n         compiler.session().plugin_attributes.borrow_mut().push(attr);"}, {"sha": "3ff0c1eb18a0dfdc7c2c8151fd8c404f06e7e537", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::{Align, LayoutOf, Size};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use syntax::attr;\n+use syntax::symbol::sym;\n \n use rand::RngCore;\n \n@@ -141,7 +142,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n     ) -> EvalResult<'tcx> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n-        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => this.tcx.item_name(def_id).as_str(),\n         };"}, {"sha": "89aba494724ca3f1ec0564be861923975a9de5a2", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -14,7 +14,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         this.tcx\n             .crates()\n             .iter()\n-            .find(|&&krate| this.tcx.original_crate_name(krate) == path[0])\n+            .find(|&&krate| this.tcx.original_crate_name(krate).as_str() == path[0])\n             .and_then(|krate| {\n                 let krate = DefId {\n                     krate: *krate,\n@@ -25,7 +25,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n \n                 while let Some(segment) = path_it.next() {\n                     for item in mem::replace(&mut items, Default::default()).iter() {\n-                        if item.ident.name == *segment {\n+                        if item.ident.name.as_str() == *segment {\n                             if path_it.peek().is_none() {\n                                 return Some(ty::Instance::mono(this.tcx.tcx, item.res.def_id()));\n                             }"}, {"sha": "d3e30bbdde8f9f4152a6e3851cc063ff38582023", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0c76d861a178911f3f506196a7404eda1e690d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bc0c76d861a178911f3f506196a7404eda1e690d", "patch": "@@ -37,6 +37,7 @@ pub use rustc_mir::interpret::*;\n pub use rustc_mir::interpret::{self, AllocMap, PlaceTy};\n use syntax::attr;\n use syntax::source_map::DUMMY_SP;\n+use syntax::symbol::sym;\n \n pub use crate::fn_call::EvalContextExt as MissingFnsEvalContextExt;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n@@ -478,7 +479,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         memory_extra: &Self::MemoryExtra,\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Tag, Self::AllocExtra>>> {\n         let attrs = tcx.get_attrs(def_id);\n-        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => tcx.item_name(def_id).as_str(),\n         };"}]}