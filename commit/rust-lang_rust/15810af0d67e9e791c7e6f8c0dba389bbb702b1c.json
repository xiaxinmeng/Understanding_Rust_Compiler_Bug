{"sha": "15810af0d67e9e791c7e6f8c0dba389bbb702b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODEwYWYwZDY3ZTllNzkxYzdlNmY4YzBkYmEzODliYmI3MDJiMWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-04T17:59:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-15T10:51:58Z"}, "message": "don't add Retag statements for compound types", "tree": {"sha": "0b9e4408d410baaeaceca8ee6112fcd9e4343335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9e4408d410baaeaceca8ee6112fcd9e4343335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15810af0d67e9e791c7e6f8c0dba389bbb702b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15810af0d67e9e791c7e6f8c0dba389bbb702b1c", "html_url": "https://github.com/rust-lang/rust/commit/15810af0d67e9e791c7e6f8c0dba389bbb702b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15810af0d67e9e791c7e6f8c0dba389bbb702b1c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "html_url": "https://github.com/rust-lang/rust/commit/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "524a19e3434f3c8f3f8b0ace4862113517db23b1", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15810af0d67e9e791c7e6f8c0dba389bbb702b1c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15810af0d67e9e791c7e6f8c0dba389bbb702b1c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=15810af0d67e9e791c7e6f8c0dba389bbb702b1c", "patch": "@@ -42,9 +42,8 @@ fn is_stable(\n     }\n }\n \n-/// Determine whether this type may have a reference in it, recursing below compound types but\n-/// not below references.\n-fn may_have_reference<'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n+/// Determine whether this type may be a reference (or box), and thus needs retagging.\n+fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         // Primitive types that are not references\n         ty::Bool | ty::Char |\n@@ -55,15 +54,12 @@ fn may_have_reference<'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n         // References\n         ty::Ref(..) => true,\n         ty::Adt(..) if ty.is_box() => true,\n-        // Compound types\n-        ty::Array(ty, ..) | ty::Slice(ty) =>\n-            may_have_reference(ty, tcx),\n-        ty::Tuple(tys) =>\n-            tys.iter().any(|ty| may_have_reference(ty.expect_ty(), tcx)),\n-        ty::Adt(adt, substs) =>\n-            adt.variants.iter().any(|v| v.fields.iter().any(|f|\n-                may_have_reference(f.ty(tcx, substs), tcx)\n-            )),\n+        // Compound types are not references\n+        ty::Array(..) |\n+        ty::Slice(..) |\n+        ty::Tuple(..) |\n+        ty::Adt(..) =>\n+            false,\n         // Conservative fallback\n         _ => true,\n     }\n@@ -80,7 +76,7 @@ impl MirPass for AddRetag {\n             // FIXME: Instead of giving up for unstable places, we should introduce\n             // a temporary and retag on that.\n             is_stable(place.as_ref())\n-                && may_have_reference(place.ty(&*local_decls, tcx).ty, tcx)\n+                && may_be_reference(place.ty(&*local_decls, tcx).ty)\n         };\n \n         // PART 1"}]}