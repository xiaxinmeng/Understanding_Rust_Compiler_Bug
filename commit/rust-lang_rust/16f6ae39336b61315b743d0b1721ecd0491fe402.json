{"sha": "16f6ae39336b61315b743d0b1721ecd0491fe402", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjZhZTM5MzM2YjYxMzE1Yjc0M2QwYjE3MjFlY2QwNDkxZmU0MDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-20T16:31:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-20T16:31:55Z"}, "message": "fix calling Fn closures as FnOnce closures", "tree": {"sha": "eb9051c0f0d27b04439c59de5483853105f5de9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb9051c0f0d27b04439c59de5483853105f5de9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f6ae39336b61315b743d0b1721ecd0491fe402", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4WR7AAoJEFbW7qD8Z6xGmH8QAIVHhx+wY6YUmvwsQi3aWYmH\nh45zAaOIbdlfgs+7yBI9UlX3Qh+fBF0g7o5w2Xuw3dW7Gu6Uot0dtaa06WIELAAc\n6RhVgCJBUbO+hejzKODeG00agVf80PXFJ+Y6YktLBWiRatMgRmNR1AHGCGQK7b2W\nwKyy9QGZcGcECV/1Z+CxZ7gFCA1B8RoxpDjJpqvjanu2flni6h9s+e69vWeMUaOZ\nn6mFPa3wWLbkgIMgsNi9Twn+eDUD4USgTW6zZV69YA2JkExr9jo4HXMx738furQs\nu3ji0vwRlRZn/aERrS6OW0oHl4uUIH0j0h320mVGUcR8ibDtSOVyYvZz5KrHOfHv\nc5Kkqj07H/pDrMXt3witkI3vru+7ysX7RKZRcbZj9FXAs2w50SZzX7EhLhccIz6L\ngqavETAiLRMquavJYrjCXoeIe3mghB/mhYqO2CzRswxuhlkrQNTAVcXfHRzDzuqm\nkRs83QrFcgoXpY3NoyaVuY+h+SV/3vCBmOapROaqsQMUg+WRVvDxLupVXGuQEBfY\n1wSZbUF8jsgYathJTQ4MFhyR1TnAUN3FZkc0XZ5cP/bREIcvuahqqhjJqd2IELqy\nRvrcyE8S2wI2WJmscRF7B/BG0X76Go8doMqhA+d5dw0buq0NghR8GjViGmnb90WI\nrGNPd9Dhyxa070W0d1IC\n=ZElm\n-----END PGP SIGNATURE-----", "payload": "tree eb9051c0f0d27b04439c59de5483853105f5de9e\nparent 4ab704c57df52569eaf6feec22a38d80d1b85bea\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474389115 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474389115 +0200\n\nfix calling Fn closures as FnOnce closures"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f6ae39336b61315b743d0b1721ecd0491fe402", "html_url": "https://github.com/rust-lang/rust/commit/16f6ae39336b61315b743d0b1721ecd0491fe402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f6ae39336b61315b743d0b1721ecd0491fe402/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ab704c57df52569eaf6feec22a38d80d1b85bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab704c57df52569eaf6feec22a38d80d1b85bea", "html_url": "https://github.com/rust-lang/rust/commit/4ab704c57df52569eaf6feec22a38d80d1b85bea"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "df1277d7a212a333a23df6b70d0ac396cb29607e", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/16f6ae39336b61315b743d0b1721ecd0491fe402/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f6ae39336b61315b743d0b1721ecd0491fe402/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=16f6ae39336b61315b743d0b1721ecd0491fe402", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// Trait method, which has to be resolved to an impl method.\n     fn trait_method(\n-        &self,\n+        &mut self,\n         trait_id: DefId,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n@@ -388,8 +388,41 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok((did, substs))\n             }\n \n-            traits::VtableClosure(vtable_closure) =>\n-                Ok((vtable_closure.closure_def_id, vtable_closure.substs.func_substs)),\n+            traits::VtableClosure(vtable_closure) => {\n+                let trait_closure_kind = self.tcx\n+                    .lang_items\n+                    .fn_trait_kind(trait_id)\n+                    .expect(\"The substitutions should have no type parameters remaining after passing through fulfill_obligation\");\n+                let closure_kind = self.tcx.closure_kind(vtable_closure.closure_def_id);\n+                trace!(\"closures {:?}, {:?}\", closure_kind, trait_closure_kind);\n+                match (closure_kind, trait_closure_kind) {\n+                    (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n+                    (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n+                    (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) |\n+                    (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {} // No adapter needed.\n+                    (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n+                    (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n+                        // The closure fn is a `fn(&self, ...)` or `fn(&mut self, ...)`.\n+                        // We want a `fn(self, ...)`.\n+                        // We can produce this by doing something like:\n+                        //\n+                        //     fn call_once(self, ...) { call_mut(&self, ...) }\n+                        //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n+                        //\n+                        // These are both the same at trans time.\n+\n+                        // interpreter magic: insert an intermediate pointer, so we can skip the intermediate function call\n+                        // FIXME: this is a memory leak, should probably add the pointer to the current stack\n+                        let ptr_size = self.memory.pointer_size();\n+                        let first = self.memory.allocate(ptr_size, ptr_size)?;\n+                        self.memory.copy(args[0].0, first, ptr_size, ptr_size)?;\n+                        self.memory.write_ptr(args[0].0, first)?;\n+                        self.memory.dump(args[0].0.alloc_id);\n+                    }\n+                    _ => bug!(\"cannot convert {:?} to {:?}\", closure_kind, trait_closure_kind),\n+                }\n+                Ok((vtable_closure.closure_def_id, vtable_closure.substs.func_substs))\n+            }\n \n             traits::VtableFnPointer(vtable_fn_ptr) => {\n                 if let ty::TyFnDef(did, ref substs, _) = vtable_fn_ptr.fn_ty.sty {"}, {"sha": "9b379051eb774a88f12c75cd18520c89534c9be2", "filename": "tests/run-pass/closures.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16f6ae39336b61315b743d0b1721ecd0491fe402/tests%2Frun-pass%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f6ae39336b61315b743d0b1721ecd0491fe402/tests%2Frun-pass%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosures.rs?ref=16f6ae39336b61315b743d0b1721ecd0491fe402", "patch": "@@ -21,18 +21,28 @@ fn crazy_closure() -> (i32, i32, i32) {\n     inner(10)\n }\n \n-// TODO(solson): Implement closure argument adjustment and uncomment this test.\n-// fn closure_arg_adjustment_problem() -> i64 {\n-//     fn once<F: FnOnce(i64)>(f: F) { f(2); }\n-//     let mut y = 1;\n-//     {\n-//         let f = |x| y += x;\n-//         once(f);\n-//     }\n-//     y\n-// }\n+fn closure_arg_adjustment_problem() -> i64 {\n+    fn once<F: FnOnce(i64)>(f: F) { f(2); }\n+    let mut y = 1;\n+    {\n+        let f = |x| y += x;\n+        once(f);\n+    }\n+    y\n+}\n+\n+fn fn_once_closure_with_multiple_args() -> i64 {\n+    fn once<F: FnOnce(i64, i64) -> i64>(f: F) -> i64 { f(2, 3) }\n+    let y = 1;\n+    {\n+        let f = |x, z| x + y + z;\n+        once(f)\n+    }\n+}\n \n fn main() {\n     assert_eq!(simple(), 12);\n     assert_eq!(crazy_closure(), (84, 10, 10));\n+    assert_eq!(closure_arg_adjustment_problem(), 3);\n+    assert_eq!(fn_once_closure_with_multiple_args(), 6);\n }"}]}