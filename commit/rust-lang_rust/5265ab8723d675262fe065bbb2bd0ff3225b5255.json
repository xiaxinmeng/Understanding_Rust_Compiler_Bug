{"sha": "5265ab8723d675262fe065bbb2bd0ff3225b5255", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjVhYjg3MjNkNjc1MjYyZmUwNjViYmIyYmQwZmYzMjI1YjUyNTU=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-07-22T19:59:09Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-07-22T19:59:09Z"}, "message": "Fix tests for edition 2018 compatibility", "tree": {"sha": "7a94c5b760e3d4e19db71e7f26a0b6164b3bf6a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a94c5b760e3d4e19db71e7f26a0b6164b3bf6a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5265ab8723d675262fe065bbb2bd0ff3225b5255", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl02FY0ACgkQztOS3gxI\nPQDAWw//UG3ovJr9XRMMNMGdw94f43AqjgAC0+v4XzcTkIXjrBbz1rPPMa0oIZy6\n/Mid5JGFQj4PioLDrgI+wYzF0EqrFLTEX/qL5S1JTByMTYu0pe5U4S6XHFBF+bbR\nrqkXWUrVWzIT/i1D8fBWYj01ESuJCaE3GrzEfS3Mv6I8yNSvD1pmVBWavxw0c9D3\niBWb4OzJ/a+ZSf+nSGon6PIrXuDMHBSCEa8TFoLi0gxueWhFYIC5d3ghj2mVH0xD\nB4pTtywN+3yqF1oyvVKHneCJD6Ty89lUvQUrelnyGkzNmIRsrsIJC8nn/wqzrNme\nM38yhzvawhhlBmiQqJ/vmd8N4RTeSLUScowrDHG+ckiT6Q6dzTfeum14OcpSL/RC\nxVIVGodpX2yNAGUUToGveyO4rOZ/SVW9QtgrpyOt1fQDPhYCzF12mg+k2gnz5jh9\noX8aDJJcdA3E50Vwgd2AJHSMcx7/FjpFjhTQNailj2WasjlBD/YpTTS2nGgnv5lC\nuZ5GHsGoVoMW+ujwwYmsyJcLZovO8pWu3Pyhx/37dDWRN4MepCeGBTh9UQvHwm9n\nsVz2XNvSHyYbt9IIpduW2BcXxSwXn6vwPQdSRX0PSP59fM+cxIU+hJ/bvvLeAny3\nRqF7qd5GwGdrvjlIBGh+P04UHwS3WPRo/aZk23PkDqhiocses2I=\n=xfYq\n-----END PGP SIGNATURE-----", "payload": "tree 7a94c5b760e3d4e19db71e7f26a0b6164b3bf6a4\nparent 434f83a6c7e6973b12bd59918b059f5d35fe3075\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1563825549 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1563825549 +0800\n\nFix tests for edition 2018 compatibility\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5265ab8723d675262fe065bbb2bd0ff3225b5255", "html_url": "https://github.com/rust-lang/rust/commit/5265ab8723d675262fe065bbb2bd0ff3225b5255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5265ab8723d675262fe065bbb2bd0ff3225b5255/comments", "author": null, "committer": null, "parents": [{"sha": "434f83a6c7e6973b12bd59918b059f5d35fe3075", "url": "https://api.github.com/repos/rust-lang/rust/commits/434f83a6c7e6973b12bd59918b059f5d35fe3075", "html_url": "https://github.com/rust-lang/rust/commit/434f83a6c7e6973b12bd59918b059f5d35fe3075"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "a1f1c586eb0bfafaeb7a6e530cc5819e13ef7c0e", "filename": "tests/ui/cognitive_complexity.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -313,7 +313,7 @@ fn mcarton_sees_all() {\n }\n \n #[clippy::cognitive_complexity = \"0\"]\n-fn try() -> Result<i32, &'static str> {\n+fn try_() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n@@ -322,14 +322,14 @@ fn try() -> Result<i32, &'static str> {\n \n #[clippy::cognitive_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n-    let _ = try!(Ok(42));\n-    let _ = try!(Ok(43));\n-    let _ = try!(Ok(44));\n-    let _ = try!(Ok(45));\n-    let _ = try!(Ok(46));\n-    let _ = try!(Ok(47));\n-    let _ = try!(Ok(48));\n-    let _ = try!(Ok(49));\n+    let _ = r#try!(Ok(42));\n+    let _ = r#try!(Ok(43));\n+    let _ = r#try!(Ok(44));\n+    let _ = r#try!(Ok(45));\n+    let _ = r#try!(Ok(46));\n+    let _ = r#try!(Ok(47));\n+    let _ = r#try!(Ok(48));\n+    let _ = r#try!(Ok(49));\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),"}, {"sha": "e1c5863f494283b07b2ca2bfdcd3f6c6f28e3068", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -216,7 +216,7 @@ LL | | }\n error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:316:1\n    |\n-LL | / fn try() -> Result<i32, &'static str> {\n+LL | / fn try_() -> Result<i32, &'static str> {\n LL | |     match 5 {\n LL | |         5 => Ok(5),\n LL | |         _ => return Err(\"bla\"),\n@@ -230,9 +230,9 @@ error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:324:1\n    |\n LL | / fn try_again() -> Result<i32, &'static str> {\n-LL | |     let _ = try!(Ok(42));\n-LL | |     let _ = try!(Ok(43));\n-LL | |     let _ = try!(Ok(44));\n+LL | |     let _ = r#try!(Ok(42));\n+LL | |     let _ = r#try!(Ok(43));\n+LL | |     let _ = r#try!(Ok(44));\n ...  |\n LL | |     }\n LL | | }"}, {"sha": "2940d2d29011006641b553fe38fed49047d7dffd", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -7,7 +7,7 @@ use alloc::collections::linked_list::LinkedList;\n \n trait Foo {\n     type Baz = LinkedList<u8>;\n-    fn foo(LinkedList<u8>);\n+    fn foo(_: LinkedList<u8>);\n     const BAR: Option<LinkedList<u8>>;\n }\n "}, {"sha": "1f6646ec9adeb4b8fe888e459b094d80b810df97", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -8,10 +8,10 @@ LL |     type Baz = LinkedList<u8>;\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:10:12\n+  --> $DIR/dlist.rs:10:15\n    |\n-LL |     fn foo(LinkedList<u8>);\n-   |            ^^^^^^^^^^^^^^\n+LL |     fn foo(_: LinkedList<u8>);\n+   |               ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n "}, {"sha": "f9923c9bb480ea926bf29700b5885b18d9ddc08e", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -215,10 +215,10 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     };\n \n     if true {\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     } else {\n         //~ ERROR same body as `if` block\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     }\n \n     if true {"}, {"sha": "f1710382bfa7ed7b158f3a718bb3266b43b6cb59", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -197,7 +197,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     }\n    | |_____^\n    |\n@@ -206,7 +206,7 @@ note: same as this\n    |\n LL |       if true {\n    |  _____________^\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     } else {\n    | |_____^\n "}, {"sha": "40968822493ff9c03421d62b38588b1b83be6554", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -4,9 +4,9 @@\n use std::io;\n \n fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n-    try!(s.write(b\"test\"));\n+    r#try!(s.write(b\"test\"));\n     let mut buf = [0u8; 4];\n-    try!(s.read(&mut buf));\n+    r#try!(s.read(&mut buf));\n     Ok(())\n }\n "}, {"sha": "dbf701e06f9a3c3795478881709983b4a5e2be34", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5265ab8723d675262fe065bbb2bd0ff3225b5255/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=5265ab8723d675262fe065bbb2bd0ff3225b5255", "patch": "@@ -1,17 +1,17 @@\n error: handle written amount returned or use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:7:5\n    |\n-LL |     try!(s.write(b\"test\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.write(b\"test\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: handle read amount returned or use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n-LL |     try!(s.read(&mut buf));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.read(&mut buf));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}