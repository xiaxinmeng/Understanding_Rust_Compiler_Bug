{"sha": "4e1155fbf11adda4c1f21449666829c3d774dd8a", "node_id": "C_kwDOAAsO6NoAKDRlMTE1NWZiZjExYWRkYTRjMWYyMTQ0OTY2NjgyOWMzZDc3NGRkOGE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-25T14:00:44Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-25T14:00:44Z"}, "message": "Sync from rust 2f320a224e827b400be25966755a621779f797cc", "tree": {"sha": "b3a80265ab86cf6e90c55c5e7eb6b3e4f1b7fd6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a80265ab86cf6e90c55c5e7eb6b3e4f1b7fd6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1155fbf11adda4c1f21449666829c3d774dd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1155fbf11adda4c1f21449666829c3d774dd8a", "html_url": "https://github.com/rust-lang/rust/commit/4e1155fbf11adda4c1f21449666829c3d774dd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1155fbf11adda4c1f21449666829c3d774dd8a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7fc56323e869ab20c6e2fa14966e35cf60124f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fc56323e869ab20c6e2fa14966e35cf60124f1", "html_url": "https://github.com/rust-lang/rust/commit/d7fc56323e869ab20c6e2fa14966e35cf60124f1"}, {"sha": "745193d1971620f73bbab3a2b9391728d9210d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/745193d1971620f73bbab3a2b9391728d9210d30", "html_url": "https://github.com/rust-lang/rust/commit/745193d1971620f73bbab3a2b9391728d9210d30"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "532049c858d4f4ce78218a816512d2a9c7acd9cb", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -214,14 +214,20 @@ dependencies = [\n  \"ahash\",\n ]\n \n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.12.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n+\n [[package]]\n name = \"indexmap\"\n-version = \"1.8.0\"\n+version = \"1.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223\"\n+checksum = \"10a35a97730320ffe8e2d410b5d3b69279b98d2c14bdb8b70ea89ecf7888d41e\"\n dependencies = [\n  \"autocfg\",\n- \"hashbrown\",\n+ \"hashbrown 0.12.3\",\n ]\n \n [[package]]\n@@ -271,7 +277,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n dependencies = [\n  \"crc32fast\",\n- \"hashbrown\",\n+ \"hashbrown 0.11.2\",\n  \"indexmap\",\n  \"memchr\",\n ]"}, {"sha": "61e977e3e69bfbd0ae0e23a4d82693a509e25d3e", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -19,7 +19,7 @@ gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.28.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n-indexmap = \"1.8.0\"\n+indexmap = \"1.9.1\"\n libloading = { version = \"0.6.0\", optional = true }\n once_cell = \"1.10.0\"\n smallvec = \"1.8.1\""}, {"sha": "122e103ff62bc14262a1b91a7e38d4e293bba6e4", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -844,7 +844,6 @@ pub(crate) fn codegen_place<'tcx>(\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }\n-            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }"}, {"sha": "da70e3d8c60b6317037fc874e668b4897791918e", "filename": "src/constant.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -195,9 +195,8 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n-                let alloc_kind = fx.tcx.get_global_alloc(alloc_id);\n-                let base_addr = match alloc_kind {\n-                    Some(GlobalAlloc::Memory(alloc)) => {\n+                let base_addr = match fx.tcx.global_alloc(alloc_id) {\n+                    GlobalAlloc::Memory(alloc) => {\n                         let data_id = data_id_for_alloc_id(\n                             &mut fx.constants_cx,\n                             fx.module,\n@@ -211,13 +210,27 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n-                    Some(GlobalAlloc::Function(instance)) => {\n+                    GlobalAlloc::Function(instance) => {\n                         let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n                         let local_func_id =\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    Some(GlobalAlloc::Static(def_id)) => {\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n+                        let alloc_id = fx.tcx.vtable_allocation((ty, trait_ref));\n+                        let alloc = fx.tcx.global_alloc(alloc_id).unwrap_memory();\n+                        // FIXME: factor this common code with the `Memory` arm into a function?\n+                        let data_id = data_id_for_alloc_id(\n+                            &mut fx.constants_cx,\n+                            fx.module,\n+                            alloc_id,\n+                            alloc.inner().mutability,\n+                        );\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n+                    GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n                         let local_data_id =\n@@ -227,7 +240,6 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n-                    None => bug!(\"missing allocation {:?}\", alloc_id),\n                 };\n                 let val = if offset.bytes() != 0 {\n                     fx.bcx.ins().iadd_imm(base_addr, i64::try_from(offset.bytes()).unwrap())\n@@ -361,10 +373,11 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n     while let Some(todo_item) = cx.todo.pop() {\n         let (data_id, alloc, section_name) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n-                //println!(\"alloc_id {}\", alloc_id);\n-                let alloc = match tcx.get_global_alloc(alloc_id).unwrap() {\n+                let alloc = match tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => alloc,\n-                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n+                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::VTable(..) => {\n+                        unreachable!()\n+                    }\n                 };\n                 let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n                     module\n@@ -428,7 +441,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            let reloc_target_alloc = tcx.get_global_alloc(alloc_id).unwrap();\n+            let reloc_target_alloc = tcx.global_alloc(alloc_id);\n             let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);\n@@ -441,6 +454,10 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Memory(target_alloc) => {\n                     data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n+                GlobalAlloc::VTable(ty, trait_ref) => {\n+                    let alloc_id = tcx.vtable_allocation((ty, trait_ref));\n+                    data_id_for_alloc_id(cx, module, alloc_id, Mutability::Not)\n+                }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n                     {"}, {"sha": "8d8db1da5818325eb55aeaf9acc6dd9f5e3c55f4", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -435,6 +435,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n         };\n \n+        vtable_size, (v vtable) {\n+            let size = crate::vtable::size_of_obj(fx, vtable);\n+            ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n+        };\n+\n+        vtable_align, (v vtable) {\n+            let align = crate::vtable::min_align_of_obj(fx, vtable);\n+            ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n+        };\n+\n         unchecked_add | unchecked_sub | unchecked_mul | unchecked_div | exact_div | unchecked_rem\n         | unchecked_shl | unchecked_shr, (c x, c y) {\n             // FIXME trap on overflow"}, {"sha": "45ae2bd8f07cb1c28003790b49344db68481307d", "filename": "src/value_and_place.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1155fbf11adda4c1f21449666829c3d774dd8a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=4e1155fbf11adda4c1f21449666829c3d774dd8a", "patch": "@@ -621,14 +621,6 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn place_opaque_cast(\n-        self,\n-        fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> CPlace<'tcx> {\n-        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n-    }\n-\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}]}