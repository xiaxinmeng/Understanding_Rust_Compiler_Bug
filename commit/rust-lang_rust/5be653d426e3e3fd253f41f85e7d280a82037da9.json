{"sha": "5be653d426e3e3fd253f41f85e7d280a82037da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTY1M2Q0MjZlM2UzZmQyNTNmNDFmODVlN2QyODBhODIwMzdkYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-02T17:25:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-02T17:25:11Z"}, "message": "Merge #9108\n\n9108: Don't show extract into variable assist for unit expressions r=jonas-schievink a=brandondong\n\n**Reproduction:**\r\n\r\n```rust\r\nfn main() {\r\n    let mut i = 3;\r\n    $0if i >= 0 {\r\n        i += 1;\r\n    } else {\r\n        i -= 1;\r\n    }$0\r\n}\r\n```\r\n\r\n1. Select the snippet of code between the $0's.\r\n2. The extract into variable assist shows up, pushing down the more useful extract into function assist.\r\n3. The resulting output of selecting the extract into variable assist is valid but with the extracted variable having the unit type:\r\n```rust\r\nfn main() {\r\n    let mut i = 3;\r\n    let var_name = if i >= 0 {\r\n        i += 1;\r\n    } else {\r\n        i -= 1;\r\n    };\r\n    var_name\r\n}\r\n```\r\n\r\n**Fix:**\r\n- Don't show the extract into variable assist for unit expressions. I could not think of any scenarios where such a variable extraction would be desired.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>", "tree": {"sha": "044781a4271b8175b76309c7bd7a6e376a4914ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/044781a4271b8175b76309c7bd7a6e376a4914ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be653d426e3e3fd253f41f85e7d280a82037da9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgt773CRBK7hj4Ov3rIwAAMOYIAHKCLus8e9dWTgTrGXbHW9ug\nxFoZ0ty4jvAIVfhYU9WDH8vOyIn6M0MrGxvNsXNhkdKCkLIsikBj6Jm++R/CZkQS\nAKu7Fdxu+lfImfEStl1KaA+3viatVG9CVlzU0nyqNTuSf/xJJb925P9a9H8uXHH1\nYU5taDohPahZgLrphFe1YwAk1L5XU7z0WbR3OD7OfRC6UO3LmxZFobVGBEXcgYpE\nFH3avIuB0TGxWUrxPr1oV4jh2kWkVR+WgC3yECMB59tAuSseGQ+j1EH/Kc0YqKLI\n7LCfCzDiJBRn6focORaD3EvSLcEyml15HZyel+AzP4XwK5R/mCmfcIegZ8hhTes=\n=kRKQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 044781a4271b8175b76309c7bd7a6e376a4914ea\nparent a421482e7515414ae4e5e9f76bf997c7f1e7398b\nparent 7d2710218f176f0f8e2bb86288084559a358dc7d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622654711 +0000\ncommitter GitHub <noreply@github.com> 1622654711 +0000\n\nMerge #9108\n\n9108: Don't show extract into variable assist for unit expressions r=jonas-schievink a=brandondong\n\n**Reproduction:**\r\n\r\n```rust\r\nfn main() {\r\n    let mut i = 3;\r\n    $0if i >= 0 {\r\n        i += 1;\r\n    } else {\r\n        i -= 1;\r\n    }$0\r\n}\r\n```\r\n\r\n1. Select the snippet of code between the $0's.\r\n2. The extract into variable assist shows up, pushing down the more useful extract into function assist.\r\n3. The resulting output of selecting the extract into variable assist is valid but with the extracted variable having the unit type:\r\n```rust\r\nfn main() {\r\n    let mut i = 3;\r\n    let var_name = if i >= 0 {\r\n        i += 1;\r\n    } else {\r\n        i -= 1;\r\n    };\r\n    var_name\r\n}\r\n```\r\n\r\n**Fix:**\r\n- Don't show the extract into variable assist for unit expressions. I could not think of any scenarios where such a variable extraction would be desired.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be653d426e3e3fd253f41f85e7d280a82037da9", "html_url": "https://github.com/rust-lang/rust/commit/5be653d426e3e3fd253f41f85e7d280a82037da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be653d426e3e3fd253f41f85e7d280a82037da9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a421482e7515414ae4e5e9f76bf997c7f1e7398b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a421482e7515414ae4e5e9f76bf997c7f1e7398b", "html_url": "https://github.com/rust-lang/rust/commit/a421482e7515414ae4e5e9f76bf997c7f1e7398b"}, {"sha": "7d2710218f176f0f8e2bb86288084559a358dc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2710218f176f0f8e2bb86288084559a358dc7d", "html_url": "https://github.com/rust-lang/rust/commit/7d2710218f176f0f8e2bb86288084559a358dc7d"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "46b54a5f54073d937f212540719b987775e0dda2", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5be653d426e3e3fd253f41f85e7d280a82037da9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be653d426e3e3fd253f41f85e7d280a82037da9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=5be653d426e3e3fd253f41f85e7d280a82037da9", "patch": "@@ -36,6 +36,11 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n     let to_extract = node.ancestors().find_map(valid_target_expr)?;\n+    if let Some(ty) = ctx.sema.type_of_expr(&to_extract) {\n+        if ty.is_unit() {\n+            return None;\n+        }\n+    }\n     let anchor = Anchor::from(&to_extract)?;\n     let indent = anchor.syntax().prev_sibling_or_token()?.as_token()?.clone();\n     let target = to_extract.syntax().text_range();\n@@ -275,15 +280,23 @@ fn foo() {\n         check_assist(\n             extract_variable,\n             r#\"\n-fn foo() {\n+fn foo() -> i32 {\n     $0bar(1 + 1)$0\n }\n+\n+fn bar(i: i32) -> i32 {\n+    i\n+}\n \"#,\n             r#\"\n-fn foo() {\n+fn foo() -> i32 {\n     let $0bar = bar(1 + 1);\n     bar\n }\n+\n+fn bar(i: i32) -> i32 {\n+    i\n+}\n \"#,\n         )\n     }\n@@ -796,6 +809,22 @@ fn foo() {\n         check_assist_not_applicable(extract_variable, \"fn main() { loop { $0break$0; }; }\");\n     }\n \n+    #[test]\n+    fn test_extract_var_unit_expr_not_applicable() {\n+        check_assist_not_applicable(\n+            extract_variable,\n+            r#\"\n+fn foo() {\n+    let mut i = 3;\n+    $0if i >= 0 {\n+        i += 1;\n+    } else {\n+        i -= 1;\n+    }$0\n+}\"#,\n+        );\n+    }\n+\n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn extract_var_target() {"}]}