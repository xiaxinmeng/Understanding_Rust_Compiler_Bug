{"sha": "7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjZlOWQ2YjA0ZDBhYTBmN2RkYWYyNGI4ZGUzNzliYjQzMWZlNmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-13T16:14:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-15T19:13:45Z"}, "message": "More precise spans for HIR paths", "tree": {"sha": "e6434a09299e557addaf6d7549823517f990d9d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6434a09299e557addaf6d7549823517f990d9d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "html_url": "https://github.com/rust-lang/rust/commit/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "html_url": "https://github.com/rust-lang/rust/commit/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9"}], "stats": {"total": 90, "additions": 60, "deletions": 30}, "files": [{"sha": "005ac8e4521efd63d0956f4f0fb7ed58e39c72f9", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -149,9 +149,17 @@ impl PathSegment {\n     pub fn from_ident(ident: Ident) -> Self {\n         PathSegment { ident, id: DUMMY_NODE_ID, args: None }\n     }\n+\n     pub fn path_root(span: Span) -> Self {\n         PathSegment::from_ident(Ident::new(kw::PathRoot, span))\n     }\n+\n+    pub fn span(&self) -> Span {\n+        match &self.args {\n+            Some(args) => self.ident.span.to(args.span()),\n+            None => self.ident.span,\n+        }\n+    }\n }\n \n /// The arguments of a path segment."}, {"sha": "46dac2f1af4f407fe67c75fa3f6971a429277916", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -30,6 +30,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let partial_res =\n             self.resolver.get_partial_res(id).unwrap_or_else(|| PartialRes::new(Res::Err));\n \n+        let path_span_lo = p.span.shrink_to_lo();\n         let proj_start = p.segments.len() - partial_res.unresolved_segments();\n         let path = self.arena.alloc(hir::Path {\n             res: self.lower_res(partial_res.base_res()),\n@@ -108,7 +109,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     )\n                 },\n             )),\n-            span: p.span,\n+            span: p.segments[..proj_start]\n+                .last()\n+                .map_or(path_span_lo, |segment| path_span_lo.to(segment.span())),\n         });\n \n         // Simple case, either no projections, or only fully-qualified.\n@@ -127,7 +130,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // e.g., `Vec` in `Vec::new` or `<I as Iterator>::Item` in\n             // `<I as Iterator>::Item::default`.\n             let new_id = self.next_id();\n-            self.arena.alloc(self.ty_path(new_id, p.span, hir::QPath::Resolved(qself, path)))\n+            self.arena.alloc(self.ty_path(new_id, path.span, hir::QPath::Resolved(qself, path)))\n         };\n \n         // Anything after the base path are associated \"extensions\",\n@@ -141,7 +144,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         //   3. `<<std::vec::Vec<T>>::IntoIter>::Item`\n         // * final path is `<<<std::vec::Vec<T>>::IntoIter>::Item>::clone`\n         for (i, segment) in p.segments.iter().enumerate().skip(proj_start) {\n-            let segment = self.arena.alloc(self.lower_path_segment(\n+            let hir_segment = self.arena.alloc(self.lower_path_segment(\n                 p.span,\n                 segment,\n                 param_mode,\n@@ -150,7 +153,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 itctx.reborrow(),\n                 None,\n             ));\n-            let qpath = hir::QPath::TypeRelative(ty, segment);\n+            let qpath = hir::QPath::TypeRelative(ty, hir_segment);\n \n             // It's finished, return the extension of the right node type.\n             if i == p.segments.len() - 1 {\n@@ -159,7 +162,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             // Wrap the associated extension in another type node.\n             let new_id = self.next_id();\n-            ty = self.arena.alloc(self.ty_path(new_id, p.span, qpath));\n+            ty = self.arena.alloc(self.ty_path(new_id, path_span_lo.to(segment.span()), qpath));\n         }\n \n         // We should've returned in the for loop above."}, {"sha": "20935231274f79b95b5e5ea0c94a9665943c8b2c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -1809,7 +1809,7 @@ impl<'hir> QPath<'hir> {\n     pub fn span(&self) -> Span {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n-            QPath::TypeRelative(_, ps) => ps.ident.span,\n+            QPath::TypeRelative(qself, ps) => qself.span.to(ps.ident.span),\n             QPath::LangItem(_, span) => span,\n         }\n     }"}, {"sha": "ad15af9ab3f2d23bd68cff7befa80c3e5f4d93b3", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -104,7 +104,7 @@ pub fn report_object_safety_error(\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n \n-    if tcx.sess.trait_methods_not_found.borrow().contains(&span) {\n+    if tcx.sess.trait_methods_not_found.borrow().iter().any(|full_span| full_span.contains(span)) {\n         // Avoid emitting error caused by non-existing method (#58734)\n         err.cancel();\n     }"}, {"sha": "a973b56f7d62c9ccea11b82928dd791dd324314a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -1414,8 +1414,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         name: Symbol,\n     ) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n-        if let (Some(_), Ok(snippet)) = (\n-            self.tcx().sess.confused_type_with_std_module.borrow().get(&span),\n+        if let (true, Ok(snippet)) = (\n+            self.tcx()\n+                .sess\n+                .confused_type_with_std_module\n+                .borrow()\n+                .keys()\n+                .any(|full_span| full_span.contains(span)),\n             self.tcx().sess.source_map().span_to_snippet(span),\n         ) {\n             err.span_suggestion("}, {"sha": "528a6d1bd52e2e612a150cae3b3babb9a3666c24", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         qpath: &QPath<'_>,\n         hir_id: hir::HirId,\n     ) -> Option<(&'tcx ty::VariantDef, Ty<'tcx>)> {\n-        let path_span = qpath.qself_span();\n+        let path_span = qpath.span();\n         let (def, ty) = self.finish_resolving_struct_path(qpath, path_span, hir_id);\n         let variant = match def {\n             Res::Err => {"}, {"sha": "a15219679788dbe5ac04bb34e9ac70e64bb42b3a", "filename": "src/test/ui/bad/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -5,4 +5,5 @@ pub fn main() {\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the size for values of type\n     //~| ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "768893d6e25d475dc932f4a163f4abaff477230a", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -31,7 +31,20 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n    = note: required by `Vec::<T>::new`\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n+  --> $DIR/bad-sized.rs:4:37\n+   |\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                                     ^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |                - required by this bound in `Vec`\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0225, E0277.\n For more information about an error, try `rustc --explain E0225`."}, {"sha": "5f278f94b93bd9a41752c48f7ea0f419e595060e", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -10,7 +10,7 @@ warning: use of deprecated struct `MustUseDeprecated`\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n LL |     MustUseDeprecated::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated struct `MustUseDeprecated`\n   --> $DIR/cfg-attr-multi-true.rs:13:17"}, {"sha": "f7d44f21d3becb7e600b88d45d82a529a1dc47da", "filename": "src/test/ui/issues/issue-78622.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78622.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -2,7 +2,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/issue-78622.rs:5:5\n    |\n LL |     S::A::<f> {}\n-   |     ^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n+   |     ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error: aborting due to previous error\n "}, {"sha": "8400aab308e0673de2e06a80033d200f0919890b", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -56,7 +56,7 @@ LL | struct Inline<T>\n    |               - required by this bound in `Inline`\n ...\n LL |     let dst = Inline::<dyn Debug>::new(0);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |               ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "a64cb82305a4825dce162574216ae23a708495df", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -13,7 +13,7 @@ help: the lifetime requirements from the `impl` do not correspond to the require\n   --> $DIR/issue-75361-mismatched-impl.rs:12:55\n    |\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n-   |                                                       ^^^^^^^^^^^^^^ consider borrowing this type parameter in the trait\n+   |                                                       ^^^^ consider borrowing this type parameter in the trait\n \n error: aborting due to previous error\n "}, {"sha": "f8585014fd6d827edb82cbd4fed06671b8baef54", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^ private type\n+   |         ^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "11bcb9074d09707ce3675f3ac3340c331edd70a6", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -56,7 +56,7 @@ error: type `Priv` is private\n   --> $DIR/private-inferred-type.rs:104:5\n    |\n LL |     m::Pub::INHERENT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n+   |     ^^^^^^ private type\n \n error: type `Priv` is private\n   --> $DIR/private-inferred-type.rs:105:5"}, {"sha": "83313b34316b4535c0fe8ad750ccf31c9ce83137", "filename": "src/test/ui/regions/issue-28848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -2,7 +2,7 @@ error[E0478]: lifetime bound not satisfied\n   --> $DIR/issue-28848.rs:10:5\n    |\n LL |     Foo::<'a, 'b>::xmute(u)\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the function body at 9:16\n   --> $DIR/issue-28848.rs:9:16"}, {"sha": "45194413cceec28e205953220a3c1fa28f154799", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -100,7 +100,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:160:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(1);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:160:12\n@@ -124,7 +124,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:166:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(0);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n   --> $DIR/generics-default-stability.rs:166:12\n@@ -136,7 +136,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:171:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(1);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:171:12\n@@ -160,7 +160,7 @@ warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:178:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n-   |                            ^^^^^^^^^^^^\n+   |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n   --> $DIR/generics-default-stability.rs:178:12"}, {"sha": "0b1b6a5e3af280b6e111ff3331bbb4ecaa0730dc", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -14,7 +14,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n    |\n LL |     let z = T::A::<u8> {};\n-   |             ^^^^^^^^^^ not a struct\n+   |             ^^^^ not a struct\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:18:9\n@@ -38,7 +38,7 @@ error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:33:13\n    |\n LL |     let z = S::A::<u8> {};\n-   |             ^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n+   |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:35:9"}, {"sha": "b8ef230b44bb7661f2408aafcab9da07eb3cddb2", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n-   |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              ^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    | \n   ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |"}, {"sha": "7f4c80f50e2674121381be72fedbf67bee80e4a5", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -2,12 +2,12 @@ error[E0223]: ambiguous associated type\n   --> $DIR/suggest-std-when-using-type.rs:2:14\n    |\n LL |     let pi = f32::consts::PI;\n-   |              ^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^\n    |\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |     let pi = std::f32::consts::PI;\n-   |              ^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n   --> $DIR/suggest-std-when-using-type.rs:5:14"}, {"sha": "b7dad54a6d3a9367ac12a433917dae0e31c6974b", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -113,7 +113,7 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/item-privacy.rs:101:5\n    |\n LL |     C::A;\n-   |     ^^^^ `assoc_const::C` cannot be made into an object\n+   |     ^ `assoc_const::C` cannot be made into an object\n    |\n    = help: consider moving `C` to another trait\n    = help: consider moving `B` to another trait"}, {"sha": "c9518170222c0c5b37e3d80f5023cbc9ed089c90", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -31,7 +31,7 @@ LL | | }\n    | |_- type parameter `A` must be specified for this\n ...\n LL |       let e = Bar::<usize>::lol();\n-   |               ^^^^^^^^^^^^^^^^^ missing reference to `A`\n+   |               ^^^^^^^^^^^^ missing reference to `A`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "0c98a809025ac5d97339068ac971ec6e9a5f15b2", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=7e66e9d6b04d0aa0f7ddaf24b8de379bb431fe6f", "patch": "@@ -19,7 +19,7 @@ error[E0478]: lifetime bound not satisfied\n   --> $DIR/wf-static-method.rs:26:18\n    |\n LL |         let me = Self::make_me();\n-   |                  ^^^^^^^^^^^^^\n+   |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 23:10\n   --> $DIR/wf-static-method.rs:23:10"}]}