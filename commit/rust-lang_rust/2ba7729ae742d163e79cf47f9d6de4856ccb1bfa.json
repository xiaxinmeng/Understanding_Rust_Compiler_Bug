{"sha": "2ba7729ae742d163e79cf47f9d6de4856ccb1bfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTc3MjlhZTc0MmQxNjNlNzljZjQ3ZjlkNmRlNDg1NmNjYjFiZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T07:41:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T07:41:25Z"}, "message": "rustc: Cache results of type_has_pointers. 70% translation speedup.", "tree": {"sha": "7092de2320172dc192d28f7b895582214153aff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7092de2320172dc192d28f7b895582214153aff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa", "html_url": "https://github.com/rust-lang/rust/commit/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2bcafe6fd525d52f84088309cc5a3c307397bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bcafe6fd525d52f84088309cc5a3c307397bf2", "html_url": "https://github.com/rust-lang/rust/commit/b2bcafe6fd525d52f84088309cc5a3c307397bf2"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "89b375287bebad5bfc4ef2b53027d5bd97ad3ea7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba7729ae742d163e79cf47f9d6de4856ccb1bfa/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2ba7729ae742d163e79cf47f9d6de4856ccb1bfa", "patch": "@@ -65,6 +65,7 @@ type ctxt =\n         type_cache tcache,\n         creader_cache rcache,\n         hashmap[t, str] short_names_cache,\n+        hashmap[t, bool] has_pointer_cache,\n         hashmap[@ast::ty, option::t[t]] ast_ty_to_ty_cache);\n \n type ty_ctxt = ctxt;\n@@ -264,6 +265,8 @@ fn mk_ctxt(session::session s, resolve::def_map dm, constr_table cs) -> ctxt {\n             rcache=mk_rcache(),\n             short_names_cache=map::mk_hashmap[ty::t,\n                                               str](ty::hash_ty, ty::eq_ty),\n+            has_pointer_cache=map::mk_hashmap[ty::t,\n+                                              bool](ty::hash_ty, ty::eq_ty),\n             ast_ty_to_ty_cache=map::mk_hashmap[@ast::ty,\n                                                option::t[t]](ast::hash_ty,\n                                                              ast::eq_ty));\n@@ -836,32 +839,33 @@ fn type_is_scalar(&ctxt cx, &t ty) -> bool {\n }\n \n fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n+    alt (cx.has_pointer_cache.find(ty)) {\n+        case (some(?result)) { ret result; }\n+        case (none) { /* fall through */ }\n+    }\n+\n+    auto result = false;\n     alt (struct(cx, ty)) {\n-        case (\n-             // scalar types\n-             ty_nil) {\n-            ret false;\n-        }\n-        case (ty_bot) { ret false; }\n-        case (ty_bool) { ret false; }\n-        case (ty_int) { ret false; }\n-        case (ty_float) { ret false; }\n-        case (ty_uint) { ret false; }\n-        case (ty_machine(_)) { ret false; }\n-        case (ty_char) { ret false; }\n-        case (ty_type) { ret false; }\n-        case (ty_native) { ret false; }\n+        // scalar types\n+        case (ty_nil) { /* no-op */ }\n+        case (ty_bot) { /* no-op */ }\n+        case (ty_bool) { /* no-op */ }\n+        case (ty_int) { /* no-op */ }\n+        case (ty_float) { /* no-op */ }\n+        case (ty_uint) { /* no-op */ }\n+        case (ty_machine(_)) { /* no-op */ }\n+        case (ty_char) { /* no-op */ }\n+        case (ty_type) { /* no-op */ }\n+        case (ty_native) { /* no-op */ }\n         case (ty_tup(?elts)) {\n             for (mt m in elts) {\n-                if (type_has_pointers(cx, m.ty)) { ret true; }\n+                if (type_has_pointers(cx, m.ty)) { result = true; }\n             }\n-            ret false;\n         }\n         case (ty_rec(?flds)) {\n             for (field f in flds) {\n-                if (type_has_pointers(cx, f.mt.ty)) { ret true; }\n+                if (type_has_pointers(cx, f.mt.ty)) { result = true; }\n             }\n-            ret false;\n         }\n         case (ty_tag(?did, ?tps)) {\n             auto variants = tag_variants(cx, did);\n@@ -870,12 +874,14 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n                 // Perform any type parameter substitutions.\n \n                 tup_ty = substitute_type_params(cx, tps, tup_ty);\n-                if (type_has_pointers(cx, tup_ty)) { ret true; }\n+                if (type_has_pointers(cx, tup_ty)) { result = true; }\n             }\n-            ret false;\n         }\n-        case (_) { ret true; }\n+        case (_) { result = true; }\n     }\n+\n+    cx.has_pointer_cache.insert(ty, result);\n+    ret result;\n }\n \n "}]}