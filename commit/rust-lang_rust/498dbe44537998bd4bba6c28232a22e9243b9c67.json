{"sha": "498dbe44537998bd4bba6c28232a22e9243b9c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OGRiZTQ0NTM3OTk4YmQ0YmJhNmMyODIzMmEyMmU5MjQzYjljNjc=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-04-21T22:20:17Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-04-24T03:59:59Z"}, "message": "Implement a least upper bound for marks.\n\nThis is useful when trying to compute when something is lexically before\nsomething else, but they aren't necessarily in the same SyntaxContext", "tree": {"sha": "b9daa240c0fac918c2761e682647d14c5dfa81eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9daa240c0fac918c2761e682647d14c5dfa81eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498dbe44537998bd4bba6c28232a22e9243b9c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498dbe44537998bd4bba6c28232a22e9243b9c67", "html_url": "https://github.com/rust-lang/rust/commit/498dbe44537998bd4bba6c28232a22e9243b9c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498dbe44537998bd4bba6c28232a22e9243b9c67/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263b36b071ba8b52cd4f79ca36494b05d4762430", "url": "https://api.github.com/repos/rust-lang/rust/commits/263b36b071ba8b52cd4f79ca36494b05d4762430", "html_url": "https://github.com/rust-lang/rust/commit/263b36b071ba8b52cd4f79ca36494b05d4762430"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "8e9564d0ac1918ec2a18f9079c2645dab93fef07", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/498dbe44537998bd4bba6c28232a22e9243b9c67/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498dbe44537998bd4bba6c28232a22e9243b9c67/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=498dbe44537998bd4bba6c28232a22e9243b9c67", "patch": "@@ -21,6 +21,7 @@ use symbol::{Ident, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n@@ -117,6 +118,32 @@ impl Mark {\n             true\n         })\n     }\n+\n+    /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n+    /// mark. That is, the following holds:\n+    ///\n+    /// ```rust\n+    /// let lub = lub(a, b);\n+    /// assert!(a.is_descendant_of(lub))\n+    /// assert!(b.is_descendant_of(lub))\n+    /// ```\n+    pub fn lub(mut a: Mark, mut b: Mark) -> Mark {\n+        HygieneData::with(|data| {\n+            // Compute the path from a to the root\n+            let mut a_path = FxHashSet::<Mark>();\n+            while a != Mark::root() {\n+                a_path.insert(a);\n+                a = data.marks[a.0 as usize].parent;\n+            }\n+\n+            // While the path from b to the root hasn't intersected, move up the tree\n+            while !a_path.contains(&b) {\n+                b =  data.marks[b.0 as usize].parent;\n+            }\n+\n+            b\n+        })\n+    }\n }\n \n pub struct HygieneData {"}]}