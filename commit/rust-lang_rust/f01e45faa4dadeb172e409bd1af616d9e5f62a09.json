{"sha": "f01e45faa4dadeb172e409bd1af616d9e5f62a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMWU0NWZhYTRkYWRlYjE3MmU0MDliZDFhZjYxNmQ5ZTVmNjJhMDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-17T13:26:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-17T13:26:41Z"}, "message": "Merge pull request #2131 from devonhollowood/suggest-print\n\nSuggest print", "tree": {"sha": "a0124db12d70867ec72044c88c67d9127d853500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0124db12d70867ec72044c88c67d9127d853500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f01e45faa4dadeb172e409bd1af616d9e5f62a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f01e45faa4dadeb172e409bd1af616d9e5f62a09", "html_url": "https://github.com/rust-lang/rust/commit/f01e45faa4dadeb172e409bd1af616d9e5f62a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f01e45faa4dadeb172e409bd1af616d9e5f62a09/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343e438f9d1b23aa86cd79f3716ac4711a95c402", "url": "https://api.github.com/repos/rust-lang/rust/commits/343e438f9d1b23aa86cd79f3716ac4711a95c402", "html_url": "https://github.com/rust-lang/rust/commit/343e438f9d1b23aa86cd79f3716ac4711a95c402"}, {"sha": "2842038627402052494f03ec32fc0f9dd548b05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2842038627402052494f03ec32fc0f9dd548b05b", "html_url": "https://github.com/rust-lang/rust/commit/2842038627402052494f03ec32fc0f9dd548b05b"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "9650dd0909cac6b08c5d37f31dac97f3c84ef487", "filename": "clippy_lints/src/explicit_write.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f01e45faa4dadeb172e409bd1af616d9e5f62a09/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01e45faa4dadeb172e409bd1af616d9e5f62a09/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=f01e45faa4dadeb172e409bd1af616d9e5f62a09", "patch": "@@ -0,0 +1,101 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n+use utils::opt_def_id;\n+\n+/// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n+/// replaced with `(e)print!()` / `(e)println!()`\n+///\n+/// **Why is this bad?** Using `(e)println! is clearer and more concise\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // this would be clearer as `eprintln!(\"foo: {:?}\", bar);`\n+/// writeln!(&mut io::stderr(), \"foo: {:?}\", bar).unwrap();\n+/// ```\n+declare_lint! {\n+    pub EXPLICIT_WRITE,\n+    Warn,\n+    \"using the `write!()` family of functions instead of the `print!()` family \\\n+     of functions, when using the latter would work\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(EXPLICIT_WRITE)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain! {[\n+            // match call to unwrap\n+            let ExprMethodCall(ref unwrap_fun, _, ref unwrap_args) = expr.node,\n+            unwrap_fun.name == \"unwrap\",\n+            // match call to write_fmt\n+            unwrap_args.len() > 0,\n+            let ExprMethodCall(ref write_fun, _, ref write_args) =\n+                unwrap_args[0].node,\n+            write_fun.name == \"write_fmt\",\n+            // match calls to std::io::stdout() / std::io::stderr ()\n+            write_args.len() > 0,\n+            let ExprCall(ref dest_fun, _) = write_args[0].node,\n+            let ExprPath(ref qpath) = dest_fun.node,\n+            let Some(dest_fun_id) =\n+                opt_def_id(resolve_node(cx, qpath, dest_fun.hir_id)),\n+            let Some(dest_name) = if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stdio\", \"stdout\"]) {\n+                Some(\"stdout\")\n+            } else if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stdio\", \"stderr\"]) {\n+                Some(\"stderr\")\n+            } else {\n+                None\n+            },\n+        ], {\n+            let write_span = unwrap_args[0].span;\n+            let calling_macro =\n+                // ordering is important here, since `writeln!` uses `write!` internally\n+                if is_expn_of(write_span, \"writeln\").is_some() {\n+                    Some(\"writeln\")\n+                } else if is_expn_of(write_span, \"write\").is_some() {\n+                    Some(\"write\")\n+                } else {\n+                    None\n+                };\n+            let prefix = if dest_name == \"stderr\" {\n+                \"e\"\n+            } else {\n+                \"\"\n+            };\n+            if let Some(macro_name) = calling_macro {\n+                span_lint(\n+                    cx,\n+                    EXPLICIT_WRITE,\n+                    expr.span,\n+                    &format!(\n+                        \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n+                        macro_name,\n+                        dest_name,\n+                        prefix,\n+                        macro_name.replace(\"write\", \"print\")\n+                    )\n+                );\n+            } else {\n+                span_lint(\n+                    cx,\n+                    EXPLICIT_WRITE,\n+                    expr.span,\n+                    &format!(\n+                        \"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n+                        dest_name,\n+                        prefix,\n+                    )\n+                );\n+            }\n+        }}\n+    }\n+}"}, {"sha": "355b03b2b6a7e1dc6ad63997d5c5afe19628ddac", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f01e45faa4dadeb172e409bd1af616d9e5f62a09/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01e45faa4dadeb172e409bd1af616d9e5f62a09/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f01e45faa4dadeb172e409bd1af616d9e5f62a09", "patch": "@@ -146,6 +146,7 @@ pub mod serde_api;\n pub mod shadow;\n pub mod should_assert_eq;\n pub mod strings;\n+pub mod explicit_write;\n pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n@@ -327,6 +328,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n+    reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n@@ -542,6 +544,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         serde_api::SERDE_API_MISUSE,\n         should_assert_eq::SHOULD_ASSERT_EQ,\n         strings::STRING_LIT_AS_BYTES,\n+        explicit_write::EXPLICIT_WRITE,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,"}, {"sha": "71992123ceb6070c32943800d3d6ab6a46ffa61d", "filename": "tests/ui/explicit_write.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f01e45faa4dadeb172e409bd1af616d9e5f62a09/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01e45faa4dadeb172e409bd1af616d9e5f62a09/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=f01e45faa4dadeb172e409bd1af616d9e5f62a09", "patch": "@@ -0,0 +1,46 @@\n+#![warn(explicit_write)]\n+\n+\n+fn stdout() -> String {\n+    String::new()\n+}\n+\n+fn stderr() -> String {\n+    String::new()\n+}\n+\n+fn main() {\n+    // these should warn\n+    {\n+        use std::io::Write;\n+        write!(std::io::stdout(), \"test\").unwrap();\n+        write!(std::io::stderr(), \"test\").unwrap();\n+        writeln!(std::io::stdout(), \"test\").unwrap();\n+        writeln!(std::io::stderr(), \"test\").unwrap();\n+        std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n+        std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+    }\n+    // these should not warn, different destination\n+    {\n+        use std::fmt::Write;\n+        let mut s = String::new();\n+        write!(s, \"test\").unwrap();\n+        write!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        write!(stdout(), \"test\").unwrap();\n+        write!(stderr(), \"test\").unwrap();\n+        writeln!(stdout(), \"test\").unwrap();\n+        writeln!(stderr(), \"test\").unwrap();\n+        stdout().write_fmt(format_args!(\"test\")).unwrap();\n+        stderr().write_fmt(format_args!(\"test\")).unwrap();\n+    }\n+    // these should not warn, no unwrap\n+    {\n+        use std::io::Write;\n+        std::io::stdout().write_fmt(format_args!(\"test\")).expect(\"no stdout\");\n+        std::io::stderr().write_fmt(format_args!(\"test\")).expect(\"no stderr\");\n+    }\n+}"}, {"sha": "9a813e897934f54878a31953d02998bad799bdd3", "filename": "tests/ui/explicit_write.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f01e45faa4dadeb172e409bd1af616d9e5f62a09/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f01e45faa4dadeb172e409bd1af616d9e5f62a09/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=f01e45faa4dadeb172e409bd1af616d9e5f62a09", "patch": "@@ -0,0 +1,38 @@\n+error: use of `write!(stdout(), ...).unwrap()`. Consider using `print!` instead\n+  --> $DIR/explicit_write.rs:16:9\n+   |\n+16 |         write!(std::io::stdout(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D explicit-write` implied by `-D warnings`\n+\n+error: use of `write!(stderr(), ...).unwrap()`. Consider using `eprint!` instead\n+  --> $DIR/explicit_write.rs:17:9\n+   |\n+17 |         write!(std::io::stderr(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `writeln!(stdout(), ...).unwrap()`. Consider using `println!` instead\n+  --> $DIR/explicit_write.rs:18:9\n+   |\n+18 |         writeln!(std::io::stdout(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`. Consider using `eprintln!` instead\n+  --> $DIR/explicit_write.rs:19:9\n+   |\n+19 |         writeln!(std::io::stderr(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `stdout().write_fmt(...).unwrap()`. Consider using `print!` instead\n+  --> $DIR/explicit_write.rs:20:9\n+   |\n+20 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` instead\n+  --> $DIR/explicit_write.rs:21:9\n+   |\n+21 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}