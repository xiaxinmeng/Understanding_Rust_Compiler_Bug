{"sha": "b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "node_id": "C_kwDOAAsO6NoAKGIwY2RmN2U5OTVjM2I1ZGE3N2NlN2E3MWJkMjdjZGRlNGUyZjc3MjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T06:00:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T06:00:45Z"}, "message": "Rollup merge of #93480 - est31:remove_unstable_deprecated, r=Mark-Simulacrum\n\nRemove deprecated and unstable slice_partition_at_index functions\n\nThey have been deprecated since commit 01ac5a97c90c26ac35ca9d65f685dd6701edfa3b\nwhich was part of the 1.49.0 release, so from the point of nightly,\n11 releases ago.", "tree": {"sha": "5d5a5fa7f44bf3e1fdefecacfeda172889465afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5a5fa7f44bf3e1fdefecacfeda172889465afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93sNCRBK7hj4Ov3rIwAAuQMIAErOtP9BkhTxquiVAU0gTxM9\nHPoUJLcPhxy7FdbPpQhLtsMsls/s6hUAdV+/0K4nPhR0DmAx3ewDnmknshPL8RmL\ntuM3R85+iNqAnw1/0GQDA+42YKyMlWcUf7dfmOvvtjyghObr/XzlkzW0FGY59vDV\nYcuV2U1tj+8vxQhWLt0a8vqghwql1HQuuYYyaB0Bqtwz8rGD5Lc5/xdkgsgu79HQ\nZ/MrUbUVJRq3jJZ7mPNpYuhl4whqP6dNzDVYh1bKDubbBbc4xIxVjfbs48VCSWKl\n3XXLV5JIobUeGIVcEA8P9oIK0wQoqPj/vSORGz9iReNjgCXO1jMRlK+BLuIwGFk=\n=Zw9f\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d5a5fa7f44bf3e1fdefecacfeda172889465afa\nparent cd27f1b56ed2efc51dda161da39cf1da853d6976\nparent 105a7461b988bf130a7a52ac86d7bccbb8df3dab\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608845 +0100\ncommitter GitHub <noreply@github.com> 1643608845 +0100\n\nRollup merge of #93480 - est31:remove_unstable_deprecated, r=Mark-Simulacrum\n\nRemove deprecated and unstable slice_partition_at_index functions\n\nThey have been deprecated since commit 01ac5a97c90c26ac35ca9d65f685dd6701edfa3b\nwhich was part of the 1.49.0 release, so from the point of nightly,\n11 releases ago.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "html_url": "https://github.com/rust-lang/rust/commit/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd27f1b56ed2efc51dda161da39cf1da853d6976", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd27f1b56ed2efc51dda161da39cf1da853d6976", "html_url": "https://github.com/rust-lang/rust/commit/cd27f1b56ed2efc51dda161da39cf1da853d6976"}, {"sha": "105a7461b988bf130a7a52ac86d7bccbb8df3dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/105a7461b988bf130a7a52ac86d7bccbb8df3dab", "html_url": "https://github.com/rust-lang/rust/commit/105a7461b988bf130a7a52ac86d7bccbb8df3dab"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "4e22c1d8c6d94e999f5c783d6c140bac9c1eafd1", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "patch": "@@ -2558,50 +2558,6 @@ impl<T> [T] {\n         sort::quicksort(self, |a, b| f(a).lt(&f(b)));\n     }\n \n-    /// Reorder the slice such that the element at `index` is at its final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable() instead\")]\n-    #[inline]\n-    pub fn partition_at_index(&mut self, index: usize) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        T: Ord,\n-    {\n-        self.select_nth_unstable(index)\n-    }\n-\n-    /// Reorder the slice with a comparator function such that the element at `index` is at its\n-    /// final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use select_nth_unstable_by() instead\")]\n-    #[inline]\n-    pub fn partition_at_index_by<F>(\n-        &mut self,\n-        index: usize,\n-        compare: F,\n-    ) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        F: FnMut(&T, &T) -> Ordering,\n-    {\n-        self.select_nth_unstable_by(index, compare)\n-    }\n-\n-    /// Reorder the slice with a key extraction function such that the element at `index` is at its\n-    /// final sorted position.\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n-    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable_by_key() instead\")]\n-    #[inline]\n-    pub fn partition_at_index_by_key<K, F>(\n-        &mut self,\n-        index: usize,\n-        f: F,\n-    ) -> (&mut [T], &mut T, &mut [T])\n-    where\n-        F: FnMut(&T) -> K,\n-        K: Ord,\n-    {\n-        self.select_nth_unstable_by_key(index, f)\n-    }\n-\n     /// Reorder the slice such that the element at `index` is at its final sorted position.\n     ///\n     /// This reordering has the additional property that any value at position `i < index` will be"}, {"sha": "ebe1a63a470d32c7c27cc61fd8e4654fe77bef1c", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b0cdf7e995c3b5da77ce7a71bd27cdde4e2f7720", "patch": "@@ -46,7 +46,6 @@\n #![feature(is_sorted)]\n #![feature(pattern)]\n #![feature(sort_internals)]\n-#![feature(slice_partition_at_index)]\n #![feature(slice_take)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(maybe_uninit_array_assume_init)]"}]}