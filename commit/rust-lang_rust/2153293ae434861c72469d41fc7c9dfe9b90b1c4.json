{"sha": "2153293ae434861c72469d41fc7c9dfe9b90b1c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTMyOTNhZTQzNDg2MWM3MjQ2OWQ0MWZjN2M5ZGZlOWI5MGIxYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-06T07:26:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-06T07:26:40Z"}, "message": "auto merge of #12687 : alexcrichton/rust/issue-12681, r=huonw\n\nThis commit adds a appear-on-over link to all section headers to generated\r\ndocumentation. Each header also receives an id now, even those generated through\r\nmarkdown. The purpose of this is to provide easy to link to sections.\r\n\r\nThis modifies the default header markdown generation because the default id\r\nadded looks like \"toc_NN\" which is difficult to reconcile among all sections (by\r\ndefault each section gets a \"toc_0\" id), and it's also not very descriptive of\r\nwhere you're going.\r\n\r\nThis chooses to adopt the github-style anchors by taking the contents of the\r\ntitle and hyphen-separating them (after lower casing).\r\n\r\nCloses #12681", "tree": {"sha": "dbd74c23cb755fdb3f07a1c1d261f0cd6b6af32a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd74c23cb755fdb3f07a1c1d261f0cd6b6af32a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2153293ae434861c72469d41fc7c9dfe9b90b1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2153293ae434861c72469d41fc7c9dfe9b90b1c4", "html_url": "https://github.com/rust-lang/rust/commit/2153293ae434861c72469d41fc7c9dfe9b90b1c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2153293ae434861c72469d41fc7c9dfe9b90b1c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253dbcb8c0a8eac06e2877fd9c60025a70a8eb73", "url": "https://api.github.com/repos/rust-lang/rust/commits/253dbcb8c0a8eac06e2877fd9c60025a70a8eb73", "html_url": "https://github.com/rust-lang/rust/commit/253dbcb8c0a8eac06e2877fd9c60025a70a8eb73"}, {"sha": "31e7e676e1ed4ae34e3f80fa606f74403ae721ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e7e676e1ed4ae34e3f80fa606f74403ae721ce", "html_url": "https://github.com/rust-lang/rust/commit/31e7e676e1ed4ae34e3f80fa606f74403ae721ce"}], "stats": {"total": 129, "additions": 105, "deletions": 24}, "files": [{"sha": "1c6926775908a86e1fde91a588b99b4b763b792b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2153293ae434861c72469d41fc7c9dfe9b90b1c4", "patch": "@@ -28,14 +28,17 @@\n \n use std::cast;\n use std::fmt;\n+use std::intrinsics;\n use std::io;\n use std::libc;\n+use std::local_data;\n use std::mem;\n use std::str;\n-use std::intrinsics;\n use std::vec;\n+use collections::HashMap;\n \n use html::highlight;\n+use html::escape::Escape;\n \n /// A unit struct which has the `fmt::Show` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n@@ -52,8 +55,11 @@ static MKDEXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n type sd_markdown = libc::c_void;  // this is opaque to us\n \n struct sd_callbacks {\n-    blockcode: extern \"C\" fn(*buf, *buf, *buf, *libc::c_void),\n-    other: [libc::size_t, ..25],\n+    blockcode: Option<extern \"C\" fn(*buf, *buf, *buf, *libc::c_void)>,\n+    blockquote: Option<extern \"C\" fn(*buf, *buf, *libc::c_void)>,\n+    blockhtml: Option<extern \"C\" fn(*buf, *buf, *libc::c_void)>,\n+    header: Option<extern \"C\" fn(*buf, *buf, libc::c_int, *libc::c_void)>,\n+    other: [libc::size_t, ..22],\n }\n \n struct html_toc_data {\n@@ -115,6 +121,8 @@ fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n     }\n }\n \n+local_data_key!(used_header_map: HashMap<~str, uint>)\n+\n pub fn render(w: &mut io::Writer, s: &str) -> fmt::Result {\n     extern fn block(ob: *buf, text: *buf, lang: *buf, opaque: *libc::c_void) {\n         unsafe {\n@@ -155,6 +163,45 @@ pub fn render(w: &mut io::Writer, s: &str) -> fmt::Result {\n         }\n     }\n \n+    extern fn header(ob: *buf, text: *buf, level: libc::c_int,\n+                     _opaque: *libc::c_void) {\n+        // sundown does this, we may as well too\n+        \"\\n\".with_c_str(|p| unsafe { bufputs(ob, p) });\n+\n+        // Extract the text provided\n+        let s = if text.is_null() {\n+            ~\"\"\n+        } else {\n+            unsafe {\n+                str::raw::from_buf_len((*text).data, (*text).size as uint)\n+            }\n+        };\n+\n+        // Transform the contents of the header into a hyphenated string\n+        let id = s.words().map(|s| {\n+            match s.to_ascii_opt() {\n+                Some(s) => s.to_lower().into_str(),\n+                None => s.to_owned()\n+            }\n+        }).to_owned_vec().connect(\"-\");\n+\n+        // Make sure our hyphenated ID is unique for this page\n+        let id = local_data::get_mut(used_header_map, |map| {\n+            let map = map.unwrap();\n+            match map.find_mut(&id) {\n+                None => {}\n+                Some(a) => { *a += 1; return format!(\"{}-{}\", id, *a - 1) }\n+            }\n+            map.insert(id.clone(), 1);\n+            id.clone()\n+        });\n+\n+        // Render the HTML\n+        let text = format!(r#\"<h{lvl} id=\"{id}\">{}</h{lvl}>\"#,\n+                           Escape(s.as_slice()), lvl = level, id = id);\n+        text.with_c_str(|p| unsafe { bufputs(ob, p) });\n+    }\n+\n     // This code is all lifted from examples/sundown.c in the sundown repo\n     unsafe {\n         let ob = bufnew(OUTPUT_UNIT);\n@@ -175,9 +222,10 @@ pub fn render(w: &mut io::Writer, s: &str) -> fmt::Result {\n         sdhtml_renderer(&callbacks, &options, 0);\n         let opaque = my_opaque {\n             opt: options,\n-            dfltblk: callbacks.blockcode,\n+            dfltblk: callbacks.blockcode.unwrap(),\n         };\n-        callbacks.blockcode = block;\n+        callbacks.blockcode = Some(block);\n+        callbacks.header = Some(header);\n         let markdown = sd_markdown_new(extensions, 16, &callbacks,\n                                        &opaque as *my_opaque as *libc::c_void);\n \n@@ -225,7 +273,10 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                          MKDEXT_FENCED_CODE | MKDEXT_AUTOLINK |\n                          MKDEXT_STRIKETHROUGH;\n         let callbacks = sd_callbacks {\n-            blockcode: block,\n+            blockcode: Some(block),\n+            blockquote: None,\n+            blockhtml: None,\n+            header: None,\n             other: mem::init()\n         };\n \n@@ -239,6 +290,18 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n+/// By default this markdown renderer generates anchors for each header in the\n+/// rendered document. The anchor name is the contents of the header spearated\n+/// by hyphens, and a task-local map is used to disambiguate among duplicate\n+/// headers (numbers are appended).\n+///\n+/// This method will reset the local table for these headers. This is typically\n+/// used at the beginning of rendering an entire HTML page to reset from the\n+/// previous state (if any).\n+pub fn reset_headers() {\n+    local_data::set(used_header_map, HashMap::new())\n+}\n+\n impl<'a> fmt::Show for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Markdown(md) = *self;"}, {"sha": "0c3e83540213676369b106eda95dae754dc0c7c2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2153293ae434861c72469d41fc7c9dfe9b90b1c4", "patch": "@@ -52,6 +52,7 @@ use doctree;\n use fold::DocFolder;\n use html::format::{VisSpace, Method, PuritySpace};\n use html::layout;\n+use html::markdown;\n use html::markdown::Markdown;\n use html::highlight;\n \n@@ -749,6 +750,8 @@ impl Context {\n                 title: title,\n             };\n \n+            markdown::reset_headers();\n+\n             // We have a huge number of calls to write, so try to alleviate some\n             // of the pain by using a buffered writer instead of invoking the\n             // write sycall all the time.\n@@ -1001,24 +1004,25 @@ fn item_module(w: &mut Writer, cx: &Context,\n                 try!(write!(w, \"</table>\"));\n             }\n             curty = myty;\n-            try!(write!(w, \"<h2>{}</h2>\\n<table>\", match myitem.inner {\n-                clean::ModuleItem(..)          => \"Modules\",\n-                clean::StructItem(..)          => \"Structs\",\n-                clean::EnumItem(..)            => \"Enums\",\n-                clean::FunctionItem(..)        => \"Functions\",\n-                clean::TypedefItem(..)         => \"Type Definitions\",\n-                clean::StaticItem(..)          => \"Statics\",\n-                clean::TraitItem(..)           => \"Traits\",\n-                clean::ImplItem(..)            => \"Implementations\",\n-                clean::ViewItemItem(..)        => \"Reexports\",\n-                clean::TyMethodItem(..)        => \"Type Methods\",\n-                clean::MethodItem(..)          => \"Methods\",\n-                clean::StructFieldItem(..)     => \"Struct Fields\",\n-                clean::VariantItem(..)         => \"Variants\",\n-                clean::ForeignFunctionItem(..) => \"Foreign Functions\",\n-                clean::ForeignStaticItem(..)   => \"Foreign Statics\",\n-                clean::MacroItem(..)           => \"Macros\",\n-            }));\n+            let (short, name) = match myitem.inner {\n+                clean::ModuleItem(..)          => (\"modules\", \"Modules\"),\n+                clean::StructItem(..)          => (\"structs\", \"Structs\"),\n+                clean::EnumItem(..)            => (\"enums\", \"Enums\"),\n+                clean::FunctionItem(..)        => (\"functions\", \"Functions\"),\n+                clean::TypedefItem(..)         => (\"types\", \"Type Definitions\"),\n+                clean::StaticItem(..)          => (\"statics\", \"Statics\"),\n+                clean::TraitItem(..)           => (\"traits\", \"Traits\"),\n+                clean::ImplItem(..)            => (\"impls\", \"Implementations\"),\n+                clean::ViewItemItem(..)        => (\"reexports\", \"Reexports\"),\n+                clean::TyMethodItem(..)        => (\"tymethods\", \"Type Methods\"),\n+                clean::MethodItem(..)          => (\"methods\", \"Methods\"),\n+                clean::StructFieldItem(..)     => (\"fields\", \"Struct Fields\"),\n+                clean::VariantItem(..)         => (\"variants\", \"Variants\"),\n+                clean::ForeignFunctionItem(..) => (\"ffi-fns\", \"Foreign Functions\"),\n+                clean::ForeignStaticItem(..)   => (\"ffi-statics\", \"Foreign Statics\"),\n+                clean::MacroItem(..)           => (\"macros\", \"Macros\"),\n+            };\n+            try!(write!(w, \"<h2 id='{}'>{}</h2>\\n<table>\", short, name));\n         }\n \n         match myitem.inner {"}, {"sha": "9a5cdaba33c80bdd2ddd7635248f2c276c5f0316", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=2153293ae434861c72469d41fc7c9dfe9b90b1c4", "patch": "@@ -319,3 +319,10 @@ pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999f; }\n pre.rust .string { color: #718C00; }\n pre.rust .lifetime { color: #C13928; }\n pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n+\n+h1 a.anchor,\n+h2 a.anchor,\n+h3 a.anchor { display: none; }\n+h1:hover a.anchor,\n+h2:hover a.anchor,\n+h3:hover a.anchor { display: inline-block; }"}, {"sha": "59970ac4508db1bf1f710f0300f8f12a28715429", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2153293ae434861c72469d41fc7c9dfe9b90b1c4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=2153293ae434861c72469d41fc7c9dfe9b90b1c4", "patch": "@@ -599,4 +599,11 @@\n     }\n \n     initSearch(searchIndex);\n+\n+    $.each($('h1, h2, h3'), function(idx, element) {\n+        if ($(element).attr('id') != undefined) {\n+            $(element).append('<a href=\"#' + $(element).attr('id') + '\" ' +\n+                              'class=\"anchor\">\u2002\u00a7\u2002</a>');\n+        }\n+    });\n }());"}]}