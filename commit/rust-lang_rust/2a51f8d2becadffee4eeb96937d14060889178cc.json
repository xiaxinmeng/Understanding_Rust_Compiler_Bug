{"sha": "2a51f8d2becadffee4eeb96937d14060889178cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTFmOGQyYmVjYWRmZmVlNGVlYjk2OTM3ZDE0MDYwODg5MTc4Y2M=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2016-01-24T09:16:56Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2016-01-24T09:16:56Z"}, "message": "lint on items following statements", "tree": {"sha": "ed534be5ea636115321f4215d456001229efc9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed534be5ea636115321f4215d456001229efc9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a51f8d2becadffee4eeb96937d14060889178cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a51f8d2becadffee4eeb96937d14060889178cc", "html_url": "https://github.com/rust-lang/rust/commit/2a51f8d2becadffee4eeb96937d14060889178cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a51f8d2becadffee4eeb96937d14060889178cc/comments", "author": null, "committer": null, "parents": [{"sha": "5dd042487749d9c2f2adaa6ae84d930fdee6c46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd042487749d9c2f2adaa6ae84d930fdee6c46a", "html_url": "https://github.com/rust-lang/rust/commit/5dd042487749d9c2f2adaa6ae84d930fdee6c46a"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "5848759c2b8f47d2c05b31801a33eecc4c39c8d6", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 96 lints included in this crate:\n+There are 97 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -37,6 +37,7 @@ name\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases\n+[items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)               | warn    | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                               | warn    | for-looping over `_.next()` which is probably not intended\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                   | warn    | traits and impls that have `.len()` but not `.is_empty()`\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                           | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead"}, {"sha": "5f109dac058af01e60a110b65bc97872754a4dd9", "filename": "src/items_after_statements.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems_after_statements.rs?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -0,0 +1,62 @@\n+//! lint when items are used after statements\n+\n+use rustc::lint::*;\n+use syntax::attr::*;\n+use syntax::ast::*;\n+use utils::in_macro;\n+\n+/// **What it does:** It `Warn`s on blocks where there are items that are declared in the middle of or after the statements\n+///\n+/// **Why is this bad?** Items live for the entire scope they are declared in. But statements are processed in order. This might cause confusion as it's hard to figure out which item is meant in a statement.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo() {\n+///     println!(\"cake\");\n+/// }\n+/// fn main() {\n+///     foo(); // prints \"foo\"\n+///     fn foo() {\n+///         println!(\"foo\");\n+///     }\n+///     foo(); // prints \"foo\"\n+/// }\n+declare_lint! { pub ITEMS_AFTER_STATEMENTS, Warn, \"finds blocks where an item comes after a statement\" }\n+\n+pub struct ItemsAfterStatemets;\n+\n+impl LintPass for ItemsAfterStatemets {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ITEMS_AFTER_STATEMENTS)\n+    }\n+}\n+\n+impl EarlyLintPass for ItemsAfterStatemets {\n+    fn check_block(&mut self, cx: &EarlyContext, item: &Block) {\n+        if in_macro(cx, item.span) {\n+            return;\n+        }\n+        let mut stmts = item.stmts.iter().map(|stmt| &stmt.node);\n+        // skip initial items\n+        while let Some(&StmtDecl(ref decl, _)) = stmts.next() {\n+            if let DeclLocal(_) = decl.node {\n+                break;\n+            }\n+        }\n+        // lint on all further items\n+        for stmt in stmts {\n+            if let StmtDecl(ref decl, _) = *stmt {\n+                if let DeclItem(ref it) = decl.node {\n+                    if in_macro(cx, it.span) {\n+                        return;\n+                    }\n+                    cx.struct_span_lint(ITEMS_AFTER_STATEMENTS, it.span,\n+                                        \"adding items after statements is confusing, since items exist from the start of the scope\")\n+                      .emit();\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "cd69ac23c19a5527f6a10c20322c919d4b9b0cb2", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -43,6 +43,7 @@ pub mod needless_bool;\n pub mod approx_const;\n pub mod eta_reduction;\n pub mod identity_op;\n+pub mod items_after_statements;\n pub mod minmax;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -97,6 +98,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box precedence::Precedence);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n+    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatemets);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);\n@@ -176,6 +178,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n         identity_op::IDENTITY_OP,\n+        items_after_statements::ITEMS_AFTER_STATEMENTS,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         lifetimes::NEEDLESS_LIFETIMES,"}, {"sha": "4623ca38533a2bd980f57d4d2640c6970d047cb7", "filename": "src/mut_mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -37,17 +37,17 @@ impl LateLintPass for MutMut {\n }\n \n fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n-    if in_external_macro(cx, expr.span) {\n-        return;\n-    }\n-\n     fn unwrap_addr(expr: &Expr) -> Option<&Expr> {\n         match expr.node {\n             ExprAddrOf(MutMutable, ref e) => Some(e),\n             _ => None,\n         }\n     }\n \n+    if in_external_macro(cx, expr.span) {\n+        return;\n+    }\n+\n     unwrap_addr(expr).map_or((), |e| {\n         unwrap_addr(e).map_or_else(|| {\n                                        if let TyRef(_, TypeAndMut{mutbl: MutMutable, ..}) = cx.tcx.expr_ty(e).sty {"}, {"sha": "c06949eb01a053c7ca0e8d89a6062b9ea24f8001", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -3,8 +3,6 @@\n \n #[deny(cmp_owned)]\n fn main() {\n-    let x = \"oh\";\n-\n     #[allow(str_to_string)]\n     fn with_to_string(x : &str) {\n         x != \"foo\".to_string();\n@@ -13,6 +11,9 @@ fn main() {\n         \"foo\".to_string() != x;\n         //~^ ERROR this creates an owned instance just for comparison. Consider using `\"foo\" != x` to compare without allocation\n     }\n+\n+    let x = \"oh\";\n+\n     with_to_string(x);\n \n     x != \"foo\".to_owned(); //~ERROR this creates an owned instance"}, {"sha": "f104081faa9942b17e32c0e4b6978476b7050de7", "filename": "tests/compile-fail/item_after_statement.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a51f8d2becadffee4eeb96937d14060889178cc/tests%2Fcompile-fail%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a51f8d2becadffee4eeb96937d14060889178cc/tests%2Fcompile-fail%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fitem_after_statement.rs?ref=2a51f8d2becadffee4eeb96937d14060889178cc", "patch": "@@ -0,0 +1,9 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(items_after_statements)]\n+\n+fn main() {\n+    foo();\n+    fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+    foo();\n+}"}]}