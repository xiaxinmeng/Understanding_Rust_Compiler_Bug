{"sha": "4d80a823818f9953d9ff281f698404004356c328", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODBhODIzODE4Zjk5NTNkOWZmMjgxZjY5ODQwNDAwNDM1NmMzMjg=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2015-04-17T12:17:33Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2015-04-19T07:56:35Z"}, "message": "std::rand::os: Fix race condition of atomics\n\nFixes #21538.", "tree": {"sha": "b7685d12bbc980b0acb9fd150fe5212aa338a5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7685d12bbc980b0acb9fd150fe5212aa338a5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d80a823818f9953d9ff281f698404004356c328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d80a823818f9953d9ff281f698404004356c328", "html_url": "https://github.com/rust-lang/rust/commit/4d80a823818f9953d9ff281f698404004356c328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d80a823818f9953d9ff281f698404004356c328/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049de3fe7f61d6ae5e6079981ed8e0e7701ea28e", "url": "https://api.github.com/repos/rust-lang/rust/commits/049de3fe7f61d6ae5e6079981ed8e0e7701ea28e", "html_url": "https://github.com/rust-lang/rust/commit/049de3fe7f61d6ae5e6079981ed8e0e7701ea28e"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "30d5ae5c6008beb7ba02865df4f745d18c4d6b36", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d80a823818f9953d9ff281f698404004356c328/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d80a823818f9953d9ff281f698404004356c328/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=4d80a823818f9953d9ff281f698404004356c328", "patch": "@@ -97,25 +97,24 @@ mod imp {\n                   target_arch = \"powerpc\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+        use sync::{Once, ONCE_INIT};\n \n-        static GETRANDOM_CHECKED: AtomicBool = ATOMIC_BOOL_INIT;\n-        static GETRANDOM_AVAILABLE: AtomicBool = ATOMIC_BOOL_INIT;\n+        static CHECKER: Once = ONCE_INIT;\n+        static AVAILABLE: AtomicBool = ATOMIC_BOOL_INIT;\n \n-        if !GETRANDOM_CHECKED.load(Ordering::Relaxed) {\n+        CHECKER.call_once(|| {\n             let mut buf: [u8; 0] = [];\n             let result = getrandom(&mut buf);\n             let available = if result == -1 {\n-                let err = errno() as libc::c_int;\n-                err != libc::ENOSYS\n+                let err = io::Error::last_os_error().raw_os_error();\n+                err != Some(libc::ENOSYS)\n             } else {\n                 true\n             };\n-            GETRANDOM_AVAILABLE.store(available, Ordering::Relaxed);\n-            GETRANDOM_CHECKED.store(true, Ordering::Relaxed);\n-            available\n-        } else {\n-            GETRANDOM_AVAILABLE.load(Ordering::Relaxed)\n-        }\n+            AVAILABLE.store(available, Ordering::Relaxed);\n+        });\n+\n+        AVAILABLE.load(Ordering::Relaxed)\n     }\n \n     #[cfg(not(all(target_os = \"linux\","}]}