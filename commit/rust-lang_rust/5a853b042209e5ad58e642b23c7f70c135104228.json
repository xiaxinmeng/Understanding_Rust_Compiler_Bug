{"sha": "5a853b042209e5ad58e642b23c7f70c135104228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODUzYjA0MjIwOWU1YWQ1OGU2NDJiMjNjN2Y3MGMxMzUxMDQyMjg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-12-21T19:28:13Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:30Z"}, "message": "The windows special-cases only apply to x64", "tree": {"sha": "b5cc7e67f7d28560959159a5e8507cc70f1247ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cc7e67f7d28560959159a5e8507cc70f1247ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a853b042209e5ad58e642b23c7f70c135104228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a853b042209e5ad58e642b23c7f70c135104228", "html_url": "https://github.com/rust-lang/rust/commit/5a853b042209e5ad58e642b23c7f70c135104228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a853b042209e5ad58e642b23c7f70c135104228/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e53773e32ec516bcb68409fd60c5dc0b7bc381", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e53773e32ec516bcb68409fd60c5dc0b7bc381", "html_url": "https://github.com/rust-lang/rust/commit/e0e53773e32ec516bcb68409fd60c5dc0b7bc381"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "8e3a3db6fcf9c13ec7abb369c68d0684b5f446ad", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5a853b042209e5ad58e642b23c7f70c135104228/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a853b042209e5ad58e642b23c7f70c135104228/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=5a853b042209e5ad58e642b23c7f70c135104228", "patch": "@@ -51,22 +51,22 @@ pub mod reimpls {\n     // match here what LLVM expects from us. This is only\n     // required for the return type!\n     #[cfg(not(stage0))]\n-    #[cfg(windows)]\n+    #[cfg(all(windows, target_pointer_width=\"64\"))]\n     #[repr(simd)]\n     pub struct u64x2(u64, u64);\n \n     #[cfg(not(stage0))]\n-    #[cfg(windows)]\n+    #[cfg(all(windows, target_pointer_width=\"64\")]\n     type u128ret = u64x2;\n \n-    #[cfg(any(not(windows),stage0))]\n+    #[cfg(any(not(all(windows, target_pointer_width=\"64\")),stage0))]\n     type u128ret = u128_;\n \n     #[cfg(not(stage0))]\n-    #[cfg(windows)]\n+    #[cfg(all(windows, target_pointer_width=\"64\")]\n     type i128ret = u64x2;\n \n-    #[cfg(any(not(windows),stage0))]\n+    #[cfg(any(not(all(windows, target_pointer_width=\"64\")),stage0))]\n     type i128ret = i128_;\n \n     macro_rules! ashl {\n@@ -477,11 +477,11 @@ pub mod reimpls {\n             #[repr(C, packed)] struct Parts(u64, u64);\n             unsafe { ::core::mem::transmute(Parts(low, high)) }\n         }\n-        #[cfg(not(windows))]\n+        #[cfg(not(all(windows, target_pointer_width=\"64\")))]\n         fn to_ret(self) -> u128ret {\n             self\n         }\n-        #[cfg(windows)]\n+        #[cfg(all(windows, target_pointer_width=\"64\"))]\n         fn to_ret(self) -> u128ret {\n             u64x2(self.low(), self.high())\n         }\n@@ -501,11 +501,11 @@ pub mod reimpls {\n         fn from_parts(low: u64, high: i64) -> i128 {\n             u128::from_parts(low, high as u64) as i128\n         }\n-        #[cfg(not(windows))]\n+        #[cfg(not(all(windows, target_pointer_width=\"64\")))]\n         fn to_ret(self) -> i128ret {\n             self\n         }\n-        #[cfg(windows)]\n+        #[cfg(all(windows, target_pointer_width=\"64\"))]\n         fn to_ret(self) -> i128ret {\n             u64x2(self.low(), self.high() as u64)\n         }\n@@ -693,30 +693,35 @@ pub mod reimpls {\n     // LLVM expectations for ABI on windows are pure madness.\n \n     #[cfg(not(stage0))]\n-    #[cfg_attr(windows, export_name=\"__floattidf\")]\n-    pub extern \"C\" fn i128_as_f64_win(alow: u64, ahigh: i64) -> f64 {\n-        i128_as_f64(i128_::from_parts(alow, ahigh))\n-    }\n+    #[cfg(all(windows, target_pointer_width=\"64\"))]\n+    mod windows_64_workarounds {\n+        #[export_name=\"__floattidf\"]\n+        pub extern \"C\" fn i128_as_f64_win(alow: u64, ahigh: i64) -> f64 {\n+            ::i128_as_f64(i128_::from_parts(alow, ahigh))\n+        }\n \n-    #[cfg(not(stage0))]\n-    #[cfg_attr(windows, export_name=\"__floattisf\")]\n-    pub extern \"C\" fn i128_as_f32_win(alow: u64, ahigh: i64) -> f32 {\n-        i128_as_f32(i128_::from_parts(alow, ahigh))\n-    }\n+        #[export_name=\"__floattisf\"]\n+        pub extern \"C\" fn i128_as_f32_win(alow: u64, ahigh: i64) -> f32 {\n+            ::i128_as_f32(i128_::from_parts(alow, ahigh))\n+        }\n \n-    #[cfg(not(stage0))]\n-    #[cfg_attr(windows, export_name=\"__floatuntidf\")]\n-    pub extern \"C\" fn u128_as_f64_win(alow: u64, ahigh: u64) -> f64 {\n-        u128_as_f64(u128_::from_parts(alow, ahigh))\n-    }\n+        #[export_name=\"__floatuntidf\"]\n+        pub extern \"C\" fn u128_as_f64_win(alow: u64, ahigh: u64) -> f64 {\n+            ::u128_as_f64(u128_::from_parts(alow, ahigh))\n+        }\n \n-    #[cfg(not(stage0))]\n-    #[cfg_attr(windows, export_name=\"__floatuntisf\")]\n-    pub extern \"C\" fn u128_as_f32_win(alow: u64, ahigh: u64) -> f32 {\n-        u128_as_f32(u128_::from_parts(alow, ahigh))\n+        #[export_name=\"__floatuntisf\"]\n+        pub extern \"C\" fn u128_as_f32_win(alow: u64, ahigh: u64) -> f32 {\n+            ::u128_as_f32(u128_::from_parts(alow, ahigh))\n+        }\n     }\n+    #[cfg(not(stage0))]\n+    #[cfg(all(windows, target_pointer_width=\"64\"))]\n+    pub use windows_64_workarounds::*;\n+\n \n-    #[cfg_attr(any(not(windows),stage0),export_name=\"__floattidf\")]\n+    #[cfg_attr(not(all(windows, target_pointer_width=\"64\", not(stage0))),\n+               export_name=\"__floattidf\")]\n     pub extern \"C\" fn i128_as_f64(a: i128_) -> f64 {\n         match a.signum() {\n             1 => u128_as_f64(a.uabs()),\n@@ -725,7 +730,8 @@ pub mod reimpls {\n         }\n     }\n \n-    #[cfg_attr(any(not(windows),stage0),export_name=\"__floattisf\")]\n+    #[cfg_attr(not(all(windows, target_pointer_width=\"64\", not(stage0))),\n+               export_name=\"__floattisf\")]\n     pub extern \"C\" fn i128_as_f32(a: i128_) -> f32 {\n         match a.signum() {\n             1 => u128_as_f32(a.uabs()),\n@@ -734,7 +740,8 @@ pub mod reimpls {\n         }\n     }\n \n-    #[cfg_attr(any(not(windows),stage0),export_name=\"__floatuntidf\")]\n+    #[cfg_attr(not(all(windows, target_pointer_width=\"64\", not(stage0))),\n+               export_name=\"__floatuntidf\")]\n     pub extern \"C\" fn u128_as_f64(mut a: u128_) -> f64 {\n         use ::core::f64::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n@@ -770,7 +777,8 @@ pub mod reimpls {\n         }\n     }\n \n-    #[cfg_attr(any(not(windows),stage0),export_name=\"__floatuntisf\")]\n+    #[cfg_attr(not(all(windows, target_pointer_width=\"64\", not(stage0))),\n+               export_name=\"__floatuntisf\")]\n     pub extern \"C\" fn u128_as_f32(mut a: u128_) -> f32 {\n         use ::core::f32::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }"}]}