{"sha": "afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYmNlMDUwY2EzNzQ4YTY2YjllOTc4M2RjNTBmNmM3N2Y5YmRmOGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:47:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:47:45Z"}, "message": "rollup merge of #20556: japaric/no-for-sized\n\nConflicts:\n\tsrc/libcollections/slice.rs\n\tsrc/libcollections/str.rs\n\tsrc/libcore/borrow.rs\n\tsrc/libcore/cmp.rs\n\tsrc/libcore/ops.rs\n\tsrc/libstd/c_str.rs\n\tsrc/test/compile-fail/issue-19009.rs", "tree": {"sha": "300e5e6c014bf748c65be267bd4bb99edf416000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300e5e6c014bf748c65be267bd4bb99edf416000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "html_url": "https://github.com/rust-lang/rust/commit/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8a11e98bf3871cf3475913fd68187784b542a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a11e98bf3871cf3475913fd68187784b542a3", "html_url": "https://github.com/rust-lang/rust/commit/cf8a11e98bf3871cf3475913fd68187784b542a3"}, {"sha": "cd4205a970b07a9f4e8a2a6363ebe535df530386", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4205a970b07a9f4e8a2a6363ebe535df530386", "html_url": "https://github.com/rust-lang/rust/commit/cd4205a970b07a9f4e8a2a6363ebe535df530386"}], "stats": {"total": 178, "additions": 101, "deletions": 77}, "files": [{"sha": "d41ca2e2149e64e0afc5d18237dc488ae4fb4bae", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -122,6 +122,7 @@ pub type MutItems<'a, T:'a> = IterMut<'a, T>;\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Allocating extension methods for slices.\n+#[stable]\n pub trait SliceExt for Sized? {\n     #[stable]\n     type Item;\n@@ -1007,7 +1008,7 @@ impl<T: Ord> OrdSliceExt<T> for [T] {\n \n #[unstable = \"U should be an associated type\"]\n /// An extension trait for concatenating slices\n-pub trait SliceConcatExt<Sized? T, U> for Sized? {\n+pub trait SliceConcatExt<Sized? T, U> {\n     /// Flattens a slice of `T` into a single value `U`.\n     #[stable]\n     fn concat(&self) -> U;"}, {"sha": "f994348ffe7ab0d973612e8aeb29b95cadbe8a2b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -60,7 +60,6 @@ use core::char::CharExt;\n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{range, Iterator, IteratorExt};\n-use core::kinds::Sized;\n use core::ops;\n use core::option::Option::{self, Some, None};\n use core::slice::AsSlice;\n@@ -409,7 +408,7 @@ Section: Trait implementations\n \n /// Any string that can be represented as a slice.\n #[stable]\n-pub trait StrExt for Sized?: ops::Slice<uint, str> {\n+pub trait StrExt: ops::Slice<uint, str> {\n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable = \"return type may change to be an iterator\"]\n     fn escape_default(&self) -> String {"}, {"sha": "d03a5877dc1a8514fb54746c26d262b1b0bfb8bd", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -54,14 +54,14 @@ use self::Cow::*;\n \n /// A trait for borrowing data.\n #[old_orphan_check]\n-pub trait BorrowFrom<Sized? Owned> for Sized? {\n+pub trait BorrowFrom<Sized? Owned> {\n     /// Immutably borrow from an owned value.\n     fn borrow_from(owned: &Owned) -> &Self;\n }\n \n /// A trait for mutably borrowing data.\n #[old_orphan_check]\n-pub trait BorrowFromMut<Sized? Owned> for Sized? : BorrowFrom<Owned> {\n+pub trait BorrowFromMut<Sized? Owned> : BorrowFrom<Owned> {\n     /// Mutably borrow from an owned value.\n     fn borrow_from_mut(owned: &mut Owned) -> &mut Self;\n }\n@@ -107,7 +107,7 @@ impl<'a, T, Sized? B> IntoCow<'a, T, B> for Cow<'a, T, B> where B: ToOwned<T> {\n \n /// A generalization of Clone to borrowed data.\n #[old_orphan_check]\n-pub trait ToOwned<Owned> for Sized?: BorrowFrom<Owned> {\n+pub trait ToOwned<Owned>: BorrowFrom<Owned> {\n     /// Create owned data from borrowed data, usually by copying.\n     fn to_owned(&self) -> Owned;\n }"}, {"sha": "b6d61b7704f6e0789e314e10df94244c056ee43f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -70,7 +70,7 @@ use option::Option::{self, Some, None};\n #[lang=\"eq\"]\n #[stable]\n #[old_orphan_check]\n-pub trait PartialEq<Sized? Rhs = Self> for Sized? {\n+pub trait PartialEq<Sized? Rhs = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n     #[stable]\n     fn eq(&self, other: &Rhs) -> bool;\n@@ -91,7 +91,7 @@ pub trait PartialEq<Sized? Rhs = Self> for Sized? {\n /// - symmetric: `a == b` implies `b == a`; and\n /// - transitive: `a == b` and `b == c` implies `a == c`.\n #[stable]\n-pub trait Eq for Sized?: PartialEq<Self> {\n+pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n     // assert that every component of a type implements #[deriving]\n     // itself, the current deriving infrastructure means doing this\n@@ -165,7 +165,7 @@ impl Ordering {\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for\n ///   both `==` and `>`.\n #[stable]\n-pub trait Ord for Sized?: Eq + PartialOrd<Self> {\n+pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an ordering between `self` and `other` values.\n     ///\n     /// By convention, `self.cmp(&other)` returns the ordering matching\n@@ -225,7 +225,7 @@ impl PartialOrd for Ordering {\n /// 5.11).\n #[lang=\"ord\"]\n #[stable]\n-pub trait PartialOrd<Sized? Rhs = Self> for Sized?: PartialEq<Rhs> {\n+pub trait PartialOrd<Sized? Rhs = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values\n     /// if one exists.\n     #[stable]"}, {"sha": "bde2fb7525211570d8bee3f8eb473dc5d2b79174", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -222,57 +222,57 @@ impl<'a> Show for Arguments<'a> {\n /// to this trait. There is not an explicit way of selecting this trait to be\n /// used for formatting, it is only if no other format is specified.\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait Show for Sized? {\n+pub trait Show {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n \n /// Format trait for the `o` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait Octal for Sized? {\n+pub trait Octal {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `b` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait Binary for Sized? {\n+pub trait Binary {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `x` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait LowerHex for Sized? {\n+pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `X` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait UpperHex for Sized? {\n+pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `p` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait Pointer for Sized? {\n+pub trait Pointer {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `e` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait LowerExp for Sized? {\n+pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `E` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait UpperExp for Sized? {\n+pub trait UpperExp {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }"}, {"sha": "d929e12a073c7a9d0a8ffea629037606632ec868", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -76,7 +76,7 @@ pub mod sip;\n /// A hashable type. The `S` type parameter is an abstract hash state that is\n /// used by the `Hash` to compute the hash. It defaults to\n /// `std::hash::sip::SipState`.\n-pub trait Hash<S = sip::SipState> for Sized? {\n+pub trait Hash<S = sip::SipState> {\n     /// Computes the hash of a value.\n     fn hash(&self, state: &mut S);\n }"}, {"sha": "4769c783e5829c6d185edeabc68a08a1992808e7", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -19,19 +19,19 @@\n \n /// Types able to be transferred across task boundaries.\n #[lang=\"send\"]\n-pub unsafe trait Send for Sized? : 'static {\n+pub unsafe trait Send : 'static {\n     // empty.\n }\n \n /// Types with a constant size known at compile-time.\n #[lang=\"sized\"]\n-pub trait Sized for Sized? {\n+pub trait Sized {\n     // Empty.\n }\n \n /// Types that can be copied by simply copying bits (i.e. `memcpy`).\n #[lang=\"copy\"]\n-pub trait Copy for Sized? {\n+pub trait Copy {\n     // Empty.\n }\n \n@@ -81,7 +81,7 @@ pub trait Copy for Sized? {\n /// reference; not doing this is undefined behaviour (for example,\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n #[lang=\"sync\"]\n-pub unsafe trait Sync for Sized? {\n+pub unsafe trait Sync {\n     // Empty\n }\n "}, {"sha": "56c147d190c8e8afc38b09afc5fd1b181def960c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -802,7 +802,7 @@ shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang=\"index\"]\n-pub trait Index<Sized? Index> for Sized? {\n+pub trait Index<Sized? Index> {\n     type Sized? Output;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n@@ -839,7 +839,7 @@ pub trait Index<Sized? Index> for Sized? {\n /// }\n /// ```\n #[lang=\"index_mut\"]\n-pub trait IndexMut<Sized? Index> for Sized? {\n+pub trait IndexMut<Sized? Index> {\n     type Sized? Output;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n@@ -884,7 +884,7 @@ pub trait IndexMut<Sized? Index> for Sized? {\n /// }\n /// ```\n #[lang=\"slice\"]\n-pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n+pub trait Slice<Sized? Idx, Sized? Result> {\n     /// The method for the slicing operation foo[]\n     fn as_slice_<'a>(&'a self) -> &'a Result;\n     /// The method for the slicing operation foo[from..]\n@@ -933,7 +933,7 @@ pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n /// }\n /// ```\n #[lang=\"slice_mut\"]\n-pub trait SliceMut<Sized? Idx, Sized? Result> for Sized? {\n+pub trait SliceMut<Sized? Idx, Sized? Result> {\n     /// The method for the slicing operation foo[]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Result;\n     /// The method for the slicing operation foo[from..]\n@@ -1069,7 +1069,7 @@ pub struct RangeTo<Idx> {\n /// ```\n #[lang=\"deref\"]\n #[stable]\n-pub trait Deref for Sized? {\n+pub trait Deref {\n     #[stable]\n     type Sized? Target;\n \n@@ -1131,7 +1131,7 @@ impl<'a, Sized? T> Deref for &'a mut T {\n /// ```\n #[lang=\"deref_mut\"]\n #[stable]\n-pub trait DerefMut for Sized? : Deref {\n+pub trait DerefMut: Deref {\n     /// The method called to mutably dereference a value\n     #[stable]\n     fn deref_mut<'a>(&'a mut self) -> &'a mut <Self as Deref>::Target;\n@@ -1145,15 +1145,15 @@ impl<'a, Sized? T> DerefMut for &'a mut T {\n /// A version of the call operator that takes an immutable receiver.\n #[lang=\"fn\"]\n #[unstable = \"uncertain about variadic generics, input versus associated types\"]\n-pub trait Fn<Args,Result> for Sized? {\n+pub trait Fn<Args,Result> {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call(&self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a mutable receiver.\n #[lang=\"fn_mut\"]\n #[unstable = \"uncertain about variadic generics, input versus associated types\"]\n-pub trait FnMut<Args,Result> for Sized? {\n+pub trait FnMut<Args,Result> {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Result;\n }"}, {"sha": "5ef6f6b2623aa7c97ff6ba49d443a313a8e3b9e8", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -20,7 +20,6 @@\n \n use kinds::Copy;\n use mem;\n-use kinds::Sized;\n \n /// The representation of a Rust slice\n #[repr(C)]\n@@ -52,7 +51,7 @@ pub struct TraitObject {\n \n /// This trait is meant to map equivalences between raw structs and their\n /// corresponding rust values.\n-pub trait Repr<T> for Sized? {\n+pub trait Repr<T> {\n     /// This function \"unwraps\" a rust value (without consuming it) into its raw\n     /// struct representation. This can be used to read/write different values\n     /// for the struct. This is a safe method because by default it does not"}, {"sha": "ee6017de6e9613ae41c845fb384f3aceecfceb9d", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -64,7 +64,7 @@ use raw::Slice as RawSlice;\n \n /// Extension methods for slices.\n #[allow(missing_docs)] // docs in libcollections\n-pub trait SliceExt for Sized? {\n+pub trait SliceExt {\n     type Item;\n \n     fn slice<'a>(&'a self, start: uint, end: uint) -> &'a [Self::Item];\n@@ -614,7 +614,7 @@ impl<T> ops::SliceMut<uint, [T]> for [T] {\n \n /// Data that is viewable as a slice.\n #[experimental = \"will be replaced by slice syntax\"]\n-pub trait AsSlice<T> for Sized? {\n+pub trait AsSlice<T> {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n@@ -1355,12 +1355,11 @@ pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n /// Operations on `[u8]`.\n #[experimental = \"needs review\"]\n pub mod bytes {\n-    use kinds::Sized;\n     use ptr;\n     use slice::SliceExt;\n \n     /// A trait for operations on mutable `[u8]`s.\n-    pub trait MutableByteVector for Sized? {\n+    pub trait MutableByteVector {\n         /// Sets all bytes of the receiver to the given value.\n         fn set_memory(&mut self, value: u8);\n     }\n@@ -1444,7 +1443,7 @@ impl<T: PartialOrd> PartialOrd for [T] {\n \n /// Extension methods for slices containing integers.\n #[experimental]\n-pub trait IntSliceExt<U, S> for Sized? {\n+pub trait IntSliceExt<U, S> {\n     /// Converts the slice to an immutable slice of unsigned integers with the same width.\n     fn as_unsigned<'a>(&'a self) -> &'a [U];\n     /// Converts the slice to an immutable slice of signed integers with the same width."}, {"sha": "0dec61ea75ec24b4e62f3abf3a1a90c8ade9dd07", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -1145,7 +1145,7 @@ mod traits {\n #[unstable = \"Instead of taking this bound generically, this trait will be \\\n               replaced with one of slicing syntax, deref coercions, or \\\n               a more generic conversion trait\"]\n-pub trait Str for Sized? {\n+pub trait Str {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a str;\n }\n@@ -1186,7 +1186,7 @@ delegate_iter!{pattern forward &'a str in RSplitN<'a, P>}\n \n /// Methods for string slices\n #[allow(missing_docs)]\n-pub trait StrExt for Sized? {\n+pub trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // libcollections, not here.\n "}, {"sha": "229d34fe4237c22df7a49a2cb08740c3f89c1fd7", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -92,8 +92,8 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n                 // Only keep those bounds that we haven't already\n                 // seen.  This is necessary to prevent infinite\n                 // recursion in some cases.  One common case is when\n-                // people define `trait Sized { }` rather than `trait\n-                // Sized for Sized? { }`.\n+                // people define `trait Sized: Sized { }` rather than `trait\n+                // Sized { }`.\n                 predicates.retain(|r| self.visited.insert(r.clone()));\n \n                 self.stack.push(StackEntry { position: 0,"}, {"sha": "70712fd4e3b147d07a3d6ff69d317ea13ea0c8de", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -38,7 +38,7 @@ use syntax::{ast, ast_util};\n use syntax::owned_slice::OwnedSlice;\n \n /// Produces a string suitable for debugging output.\n-pub trait Repr<'tcx> for Sized? {\n+pub trait Repr<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String;\n }\n "}, {"sha": "9ec0c822bf5fe4acc92a27aaddf00194d08d8a1d", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -63,7 +63,7 @@ impl RegClass {\n     }\n }\n \n-trait ClassList for Sized? {\n+trait ClassList {\n     fn is_pass_byval(&self) -> bool;\n     fn is_ret_bysret(&self) -> bool;\n }"}, {"sha": "de0f714276d0de4ec94a6513de0161193b24d001", "filename": "src/librustc_trans/trans/llrepr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -12,7 +12,7 @@ use trans::context::CrateContext;\n use trans::type_::Type;\n use llvm::ValueRef;\n \n-pub trait LlvmRepr for Sized? {\n+pub trait LlvmRepr {\n     fn llrepr(&self, ccx: &CrateContext) -> String;\n }\n "}, {"sha": "11a49cd712f2557f155bdb09a81d219119faef06", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -70,7 +70,7 @@ static URLSAFE_CHARS: &'static[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                                        0123456789-_\";\n \n /// A trait for converting a value to base64 encoding.\n-pub trait ToBase64 for Sized? {\n+pub trait ToBase64 {\n     /// Converts the value of `self` to a base64 value following the specified\n     /// format configuration, returning the owned string.\n     fn to_base64(&self, config: Config) -> String;\n@@ -170,7 +170,7 @@ impl ToBase64 for [u8] {\n }\n \n /// A trait for converting from base64 encoded values.\n-pub trait FromBase64 for Sized? {\n+pub trait FromBase64 {\n     /// Converts the value of `self`, interpreted as base64 encoded data, into\n     /// an owned vector of bytes, returning the vector.\n     fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error>;"}, {"sha": "542d0678526b980367b48e41cd8f6ab0545c4a1c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -18,7 +18,7 @@ use std::fmt;\n use std::error;\n \n /// A trait for converting a value to hexadecimal encoding\n-pub trait ToHex for Sized? {\n+pub trait ToHex {\n     /// Converts the value of `self` to a hex value, returning the owned\n     /// string.\n     fn to_hex(&self) -> String;\n@@ -54,7 +54,7 @@ impl ToHex for [u8] {\n }\n \n /// A trait for converting hexadecimal encoded values\n-pub trait FromHex for Sized? {\n+pub trait FromHex {\n     /// Converts the value of `self`, interpreted as hexadecimal encoded data,\n     /// into an owned vector of bytes, returning the vector.\n     fn from_hex(&self) -> Result<Vec<u8>, FromHexError>;"}, {"sha": "8b0fb75b438fec3096545be149f17bb760aaa673", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -2302,7 +2302,7 @@ impl ::Decoder for Decoder {\n }\n \n /// A trait for converting values to JSON\n-pub trait ToJson for Sized? {\n+pub trait ToJson {\n     /// Converts the value of `self` to an instance of JSON\n     fn to_json(&self) -> Json;\n }"}, {"sha": "943843c6cc8377c484e8bc40d81280787cc7d6ae", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -190,7 +190,7 @@ pub trait Decoder {\n     fn error(&mut self, err: &str) -> Self::Error;\n }\n \n-pub trait Encodable for Sized? {\n+pub trait Encodable {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error>;\n }\n "}, {"sha": "671408acebf0d51174ab42e8af3478dda4495ebf", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -14,7 +14,6 @@\n \n #![unstable = \"unsure about placement and naming\"]\n \n-use core::kinds::Sized;\n use iter::IteratorExt;\n use ops::FnMut;\n use slice::SliceExt;\n@@ -38,7 +37,7 @@ pub trait OwnedAsciiExt {\n \n /// Extension methods for ASCII-subset only operations on string slices\n #[experimental = \"would prefer to do this in a more general way\"]\n-pub trait AsciiExt<T = Self> for Sized? {\n+pub trait AsciiExt<T = Self> {\n     /// Check if within the ASCII range.\n     fn is_ascii(&self) -> bool;\n "}, {"sha": "a2d69a7e7dcea9d8ec4b0acde73cf62e6fe89dea", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -786,7 +786,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n }\n \n /// A trait that represents something bytes-like (e.g. a &[u8] or a &str)\n-pub trait BytesContainer for Sized? {\n+pub trait BytesContainer {\n     /// Returns a &[u8] representing the receiver\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8];\n     /// Returns the receiver interpreted as a utf-8 string, if possible"}, {"sha": "f1b52fa33c386a3bd439ad9b9c2e9e4f0ed308c4", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -85,14 +85,14 @@ pub mod rt {\n     */\n \n     // FIXME: Move this trait to pprust and get rid of *_to_str?\n-    pub trait ToSource for Sized? {\n+    pub trait ToSource {\n         // Takes a thing and generates a string containing rust code for it.\n         fn to_source(&self) -> String;\n     }\n \n     // FIXME (Issue #16472): This should go away after ToToken impls\n     // are revised to go directly to token-trees.\n-    trait ToSourceWithHygiene for Sized? : ToSource {\n+    trait ToSourceWithHygiene : ToSource {\n         // Takes a thing and generates a string containing rust code\n         // for it, encoding Idents as special byte sequences to\n         // maintain hygiene across serialization and deserialization."}, {"sha": "f4606a4e6da21f29e37706f1cbefa9930b88f28c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -24,6 +24,7 @@ use ptr::P;\n /// The specific types of unsupported syntax\n #[derive(Copy, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n+    ObsoleteForSized,\n     ObsoleteOwnedType,\n     ObsoleteOwnedExpr,\n     ObsoleteOwnedPattern,\n@@ -56,6 +57,11 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n+            ObsoleteForSized => (\n+                \"for Sized?\",\n+                \"no longer required. Traits (and their `Self` type) do not have the `Sized` bound \\\n+                 by default\",\n+            ),\n             ObsoleteProcType => (\n                 \"the `proc` type\",\n                 \"use unboxed closures instead\","}, {"sha": "2eb77489c6e344a535b4156feff5b6f769c8171f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -5052,6 +5052,7 @@ impl<'a> Parser<'a> {\n         // re-jigged shortly in any case, so leaving the hacky version for now.\n         if self.eat_keyword(keywords::For) {\n             let span = self.span;\n+\n             let mut ate_question = false;\n             if self.eat(&token::Question) {\n                 ate_question = true;\n@@ -5069,8 +5070,11 @@ impl<'a> Parser<'a> {\n                     \"expected `?Sized` after `for` in trait item\");\n                 return None;\n             }\n-            let tref = Parser::trait_ref_from_ident(ident, span);\n-            Some(tref)\n+            let _tref = Parser::trait_ref_from_ident(ident, span);\n+\n+            self.obsolete(span, ObsoleteForSized);\n+\n+            None\n         } else {\n             None\n         }"}, {"sha": "8daabf610102256d86e1e86d8fb754977e1830a7", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -39,7 +39,7 @@ fn local_sort<T: Float>(v: &mut [T]) {\n }\n \n /// Trait that provides simple descriptive statistics on a univariate set of numeric samples.\n-pub trait Stats <T: FloatMath + FromPrimitive> for Sized? {\n+pub trait Stats <T: FloatMath + FromPrimitive> {\n \n     /// Sum of the samples.\n     ///"}, {"sha": "13672a7b480af93459e372794e112c1755d75ab8", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -37,7 +37,7 @@ pub struct Words<'a> {\n \n /// Methods for Unicode string slices\n #[allow(missing_docs)] // docs in libcollections\n-pub trait UnicodeStr for Sized? {\n+pub trait UnicodeStr {\n     fn graphemes<'a>(&'a self, is_extended: bool) -> Graphemes<'a>;\n     fn grapheme_indices<'a>(&'a self, is_extended: bool) -> GraphemeIndices<'a>;\n     fn words<'a>(&'a self) -> Words<'a>;"}, {"sha": "e99a8f0b8773750c9e9ec77130b6a9c2bf2be8c6", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -12,7 +12,7 @@\n #![feature(lang_items)]\n \n #[lang=\"sized\"]\n-pub trait Sized for Sized? {}\n+pub trait Sized {}\n \n #[lang=\"panic\"]\n fn panic(_: &(&'static str, &'static str, uint)) -> ! { loop {} }"}, {"sha": "183781e9e241723c21b476f888e97536cbfcabb0", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -16,7 +16,7 @@\n #![no_std]\n \n #[lang=\"sized\"]\n-pub trait Sized for Sized? {\n+pub trait Sized {\n     // Empty.\n }\n "}, {"sha": "4e5a6be1bc7c6a9ba784950c77d50fe8fac8bb24", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we cannot create objects from unsized types.\n \n-trait Foo for Sized? {}\n+trait Foo {}\n impl Foo for str {}\n \n fn test1<Sized? T: Foo>(t: &T) {"}, {"sha": "7aba1bc8e65c7a4b30cb8718d27aa78ad450f2bd", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait Foo for Sized? { fn foo<T>(&self, ext_thing: &T); }\n-pub trait Bar for Sized?: Foo { }\n+pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+pub trait Bar: Foo { }\n impl<T: Foo> Bar for T { }\n \n pub struct Thing;"}, {"sha": "1b86d08a50dff50d5f63606bfc371c75a750aac7", "filename": "src/test/compile-fail/obsolete-for-sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fobsolete-for-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fobsolete-for-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-for-sized.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we generate obsolete syntax errors around usages of `for Sized?`\n+\n+trait Foo for Sized? {} //~ ERROR obsolete syntax: for Sized?\n+\n+trait Bar for ?Sized {} //~ ERROR obsolete syntax: for Sized?\n+\n+fn main() { }"}, {"sha": "92f3a57c69d0b784f17d8f6f354502b7238f0ca2", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -11,7 +11,7 @@\n #![feature(lang_items)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n-#[lang = \"sized\"] pub trait Sized for Sized? {}\n+#[lang = \"sized\"] pub trait Sized {}\n #[lang=\"copy\"] pub trait Copy {}\n \n // Test to make sure that private items imported through globs remain private"}, {"sha": "ae561878e9ba0dcbfa9f352bb8035c32ec81dc2a", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -11,7 +11,7 @@\n #![feature(lang_items)]\n #![no_std]\n \n-#[lang=\"sized\"] pub trait Sized for Sized? {}\n+#[lang=\"sized\"] pub trait Sized {}\n \n // error-pattern:requires `start` lang_item\n "}, {"sha": "2324e8ed5351adda6a7cda5df8dc8ba5ec9e2ed3", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -18,7 +18,7 @@ trait Foo<T,U,V=T> {\n     fn dummy(&self, t: T, u: U, v: V);\n }\n \n-trait Eq<Sized? X> for Sized? { }\n+trait Eq<Sized? X> { }\n impl<Sized? X> Eq<X> for X { }\n fn eq<Sized? A,Sized? B>() where A : Eq<B> { }\n "}, {"sha": "2b2327277a2d1a0e4e25e889f306564346a3c754", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -20,7 +20,7 @@ trait Foo<T,U> {\n     fn dummy(&self, t: T, u: U);\n }\n \n-trait Eq<Sized? X> for Sized? { }\n+trait Eq<Sized? X> { }\n impl<Sized? X> Eq<X> for X { }\n fn eq<Sized? A,Sized? B:Eq<A>>() { }\n "}, {"sha": "9ec6428de27a03787c9d13c3ed23e672bccfcbcd", "filename": "src/test/compile-fail/unboxed-closure-sugar-lifetime-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -20,7 +20,7 @@ trait Foo<T,U> {\n     fn dummy(&self, t: T, u: U);\n }\n \n-trait Eq<Sized? X> for Sized? { }\n+trait Eq<Sized? X> { }\n impl<Sized? X> Eq<X> for X { }\n fn eq<Sized? A,Sized? B:Eq<A>>() { }\n "}, {"sha": "5faa82fdf557296246b3400e9f40853366551be7", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -21,7 +21,7 @@ trait Foo<'a,T,U> {\n     fn dummy(&'a self) -> &'a (T,U);\n }\n \n-trait Eq<Sized? X> for Sized? { }\n+trait Eq<Sized? X> { }\n impl<Sized? X> Eq<X> for X { }\n fn eq<Sized? A,Sized? B:Eq<A>>() { }\n "}, {"sha": "76a6f01b18322399084a1565d3570247ca83e4b3", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -20,7 +20,7 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for Sized? {}\n+trait T {}\n fn f3<Sized? X: T>(x: &X) {\n     f4::<X>(x);\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented"}, {"sha": "4fcf7707f07fe3dbefb8fb6d34d89b9df82fa48c", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -11,7 +11,7 @@\n // Test `Sized?` local variables.\n \n \n-trait T for Sized? {}\n+trait T {}\n \n fn f1<Sized? X>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer."}, {"sha": "e919f049713193a73e10c49453697e3bd492ae15", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -10,7 +10,7 @@\n \n // Test sized-ness checking in substitution in impls.\n \n-trait T for Sized? {}\n+trait T {}\n \n // I would like these to fail eventually.\n // impl - bounded"}, {"sha": "573f76766fa67dda2d50cf0af97d65bf15b5e35c", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -16,7 +16,7 @@\n \n use std::ops::Deref;\n \n-pub trait MyEq<Sized? U=Self> for Sized? {\n+pub trait MyEq<Sized? U=Self> {\n     fn eq(&self, u: &U) -> bool;\n }\n "}, {"sha": "1d264655bc479b03d0b70308627e54275c7e389c", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -14,7 +14,7 @@\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n \n-trait SliceExt2 for Sized? {\n+trait SliceExt2 {\n     type Item;\n \n     fn split2<'a, P>(&'a self, pred: P) -> Splits<'a, Self::Item, P>"}, {"sha": "742bab0578e9c2a9e3d25b47480583a4ed961327", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbce050ca3748a66b9e9783dc50f6c77f9bdf8b/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=afbce050ca3748a66b9e9783dc50f6c77f9bdf8b", "patch": "@@ -14,7 +14,7 @@\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n \n-trait SliceExt2 for Sized? {\n+trait SliceExt2 {\n     type Item;\n \n     fn split2<'a, P>(&'a self, pred: P) -> Splits<'a, Self::Item, P>"}]}