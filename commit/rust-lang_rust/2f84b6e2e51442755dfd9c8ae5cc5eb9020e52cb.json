{"sha": "2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "node_id": "C_kwDOAAsO6NoAKDJmODRiNmUyZTUxNDQyNzU1ZGZkOWM4YWU1Y2M1ZWI5MDIwZTUyY2I", "commit": {"author": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-08-06T20:12:33Z"}, "committer": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-09-12T19:20:22Z"}, "message": "Almost there", "tree": {"sha": "6b559b2196e2b9f46ebc04a7ebd786dcac4d3a4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b559b2196e2b9f46ebc04a7ebd786dcac4d3a4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "html_url": "https://github.com/rust-lang/rust/commit/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63234e20be04ae0e7eca20e0bf49dca8d7d3718", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63234e20be04ae0e7eca20e0bf49dca8d7d3718", "html_url": "https://github.com/rust-lang/rust/commit/b63234e20be04ae0e7eca20e0bf49dca8d7d3718"}], "stats": {"total": 163, "additions": 141, "deletions": 22}, "files": [{"sha": "be1a9d11773d745dca7c209cbfda6627a0858a4b", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "patch": "@@ -28,8 +28,8 @@ use crate::{\n     nameres::DefMap,\n     path::{ModPath, Path},\n     src::{HasChildSource, HasSource},\n-    AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, MacroId, ModuleId,\n-    UnresolvedMacro,\n+    AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, MacroId,\n+    ModuleId, UnresolvedMacro,\n };\n \n pub use lower::LowerCtx;"}, {"sha": "efb17c4780ae1cd6ba40929f17461d3e44387daa", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 79, "deletions": 10, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "patch": "@@ -7,14 +7,17 @@ use std::{\n \n use chalk_ir::{BoundVar, DebruijnIndex, GenericArgData, IntTy, Scalar};\n use hir_def::{\n+    builtin_type::BuiltinInt,\n     expr::{ArithOp, BinaryOp, Expr, ExprId, Literal, Pat, PatId},\n     path::ModPath,\n     resolver::{resolver_for_expr, ResolveValueResult, Resolver, ValueNs},\n+    src::HasChildSource,\n     type_ref::ConstScalar,\n-    ConstId, DefWithBodyId, EnumVariantId,\n+    ConstId, DefWithBodyId, EnumVariantId, Lookup,\n };\n-use la_arena::{Arena, Idx};\n+use la_arena::{Arena, Idx, RawIdx};\n use stdx::never;\n+use syntax::ast::HasName;\n \n use crate::{\n     db::HirDatabase, infer::InferenceContext, lower::ParamLoweringMode, to_placeholder_idx,\n@@ -77,6 +80,7 @@ pub enum ConstEvalError {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ComputedExpr {\n     Literal(Literal),\n+    Enum(String, EnumVariantId, Literal),\n     Tuple(Box<[ComputedExpr]>),\n }\n \n@@ -104,6 +108,7 @@ impl Display for ComputedExpr {\n                 Literal::String(x) => std::fmt::Debug::fmt(x, f),\n                 Literal::ByteString(x) => std::fmt::Debug::fmt(x, f),\n             },\n+            ComputedExpr::Enum(name, _, _) => name.fmt(f),\n             ComputedExpr::Tuple(t) => {\n                 f.write_char('(')?;\n                 for x in &**t {\n@@ -116,6 +121,15 @@ impl Display for ComputedExpr {\n     }\n }\n \n+impl ComputedExpr {\n+    pub fn enum_value(&self) -> Option<ComputedExpr> {\n+        match self {\n+            ComputedExpr::Enum(_, _, lit) => Some(ComputedExpr::Literal(lit.clone())),\n+            _ => None,\n+        }\n+    }\n+}\n+\n fn scalar_max(scalar: &Scalar) -> i128 {\n     match scalar {\n         Scalar::Bool => 1,\n@@ -148,17 +162,56 @@ fn is_valid(scalar: &Scalar, value: i128) -> bool {\n     }\n }\n \n+fn get_name(variant: EnumVariantId, ctx: &mut ConstEvalCtx<'_>) -> String {\n+    let loc = variant.parent.lookup(ctx.db.upcast());\n+    let children = variant.parent.child_source(ctx.db.upcast());\n+    let item_tree = loc.id.item_tree(ctx.db.upcast());\n+\n+    let variant_name = children.value[variant.local_id].name();\n+    let enum_name = item_tree[loc.id.value].name.to_string();\n+    enum_name + \"::\" + &variant_name.unwrap().to_string()\n+}\n+\n pub fn eval_const(\n     expr_id: ExprId,\n     ctx: &mut ConstEvalCtx<'_>,\n+    variant: Option<EnumVariantId>,\n ) -> Result<ComputedExpr, ConstEvalError> {\n     let expr = &ctx.exprs[expr_id];\n     match expr {\n-        Expr::Missing => Err(ConstEvalError::IncompleteExpr),\n+        Expr::Missing => match variant {\n+            Some(variant) => {\n+                let prev_idx: u32 = variant.local_id.into_raw().into();\n+                let prev_idx = prev_idx.checked_sub(1).map(|idx| Idx::from_raw(RawIdx::from(idx)));\n+                let value = match prev_idx {\n+                    Some(prev) => {\n+                        let prev_variant = EnumVariantId { local_id: prev, ..variant };\n+                        1 + match ctx.db.const_eval_variant(prev_variant)? {\n+                            ComputedExpr::Literal(Literal::Int(v, _)) => v,\n+                            ComputedExpr::Literal(Literal::Uint(v, _)) => v\n+                                .try_into()\n+                                .map_err(|_| ConstEvalError::NotSupported(\"too big u128\"))?,\n+                            _ => {\n+                                return Err(ConstEvalError::NotSupported(\n+                                    \"Enum can't contain this kind of value\",\n+                                ))\n+                            }\n+                        }\n+                    }\n+                    _ => 0,\n+                };\n+                Ok(ComputedExpr::Enum(\n+                    get_name(variant, ctx),\n+                    variant,\n+                    Literal::Int(value + 1, Some(BuiltinInt::I128)),\n+                ))\n+            }\n+            _ => Err(ConstEvalError::IncompleteExpr),\n+        },\n         Expr::Literal(l) => Ok(ComputedExpr::Literal(l.clone())),\n         &Expr::UnaryOp { expr, op } => {\n             let ty = &ctx.expr_ty(expr);\n-            let ev = eval_const(expr, ctx)?;\n+            let ev = eval_const(expr, ctx, None)?;\n             match op {\n                 hir_def::expr::UnaryOp::Deref => Err(ConstEvalError::NotSupported(\"deref\")),\n                 hir_def::expr::UnaryOp::Not => {\n@@ -214,8 +267,8 @@ pub fn eval_const(\n         }\n         &Expr::BinaryOp { lhs, rhs, op } => {\n             let ty = &ctx.expr_ty(lhs);\n-            let lhs = eval_const(lhs, ctx)?;\n-            let rhs = eval_const(rhs, ctx)?;\n+            let lhs = eval_const(lhs, ctx, None)?;\n+            let rhs = eval_const(rhs, ctx, None)?;\n             let op = op.ok_or(ConstEvalError::IncompleteExpr)?;\n             let v1 = match lhs {\n                 ComputedExpr::Literal(Literal::Int(v, _)) => v,\n@@ -276,7 +329,7 @@ pub fn eval_const(\n                             }\n                         };\n                         let value = match initializer {\n-                            Some(x) => eval_const(x, ctx)?,\n+                            Some(x) => eval_const(x, ctx, None)?,\n                             None => continue,\n                         };\n                         if !prev_values.contains_key(&pat_id) {\n@@ -292,7 +345,7 @@ pub fn eval_const(\n                 }\n             }\n             let r = match tail {\n-                &Some(x) => eval_const(x, ctx),\n+                &Some(x) => eval_const(x, ctx, None),\n                 None => Ok(ComputedExpr::Tuple(Box::new([]))),\n             };\n             // clean up local data, so caller will receive the exact map that passed to us\n@@ -339,10 +392,24 @@ pub fn eval_const(\n                 ValueNs::GenericParam(_) => {\n                     Err(ConstEvalError::NotSupported(\"const generic without substitution\"))\n                 }\n-                ValueNs::EnumVariantId(id) => ctx.db.const_eval_variant(id),\n+                ValueNs::EnumVariantId(id) => match ctx.db.const_eval_variant(id)? {\n+                    ComputedExpr::Literal(lit) => {\n+                        Ok(ComputedExpr::Enum(get_name(id, ctx), id, lit))\n+                    }\n+                    _ => Err(ConstEvalError::NotSupported(\n+                        \"Enums can't evalute to anything but numbers\",\n+                    )),\n+                },\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n+        Expr::Cast { expr, .. } => match eval_const(*expr, ctx, None)? {\n+            ComputedExpr::Enum(_, _, lit) => Ok(ComputedExpr::Literal(lit)),\n+            expr => Err(ConstEvalError::NotSupported(Box::leak(Box::new(format!(\n+                \"Can't cast type: {:?}\",\n+                expr\n+            ))))),\n+        },\n         _ => Err(ConstEvalError::NotSupported(\"This kind of expression\")),\n     }\n }\n@@ -438,6 +505,7 @@ pub(crate) fn const_eval_query(\n             local_data: HashMap::default(),\n             infer,\n         },\n+        None,\n     );\n     result\n }\n@@ -459,6 +527,7 @@ pub(crate) fn const_eval_query_variant(\n             local_data: HashMap::default(),\n             infer,\n         },\n+        Some(variant_id),\n     )\n }\n \n@@ -485,7 +554,7 @@ pub(crate) fn eval_to_const<'a>(\n         local_data: HashMap::default(),\n         infer: &ctx.result,\n     };\n-    let computed_expr = eval_const(expr, &mut ctx);\n+    let computed_expr = eval_const(expr, &mut ctx, None);\n     let const_scalar = match computed_expr {\n         Ok(ComputedExpr::Literal(literal)) => literal.into(),\n         _ => ConstScalar::Unknown,"}, {"sha": "285ec7520f405155f1484543f191a901d9674848", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "patch": "@@ -26,7 +26,7 @@ use hir_def::{\n     resolver::{HasResolver, ResolveValueResult, Resolver, TypeNs, ValueNs},\n     type_ref::TypeRef,\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, HasModule, Lookup,\n-    TraitId, TypeAliasId, VariantId\n+    TraitId, TypeAliasId, VariantId,\n };\n use hir_expand::name::{name, Name};\n use itertools::Either;\n@@ -68,7 +68,6 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n         DefWithBodyId::VariantId(v) => {\n-            // TODO(ole): Get the real type\n             ctx.return_ty = TyBuilder::def_ty(db, v.parent.into()).fill_with_unknown().build()\n         }\n     }"}, {"sha": "44291a1a88b90034f416e62f868777402c8f5f25", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Display;\n \n use either::Either;\n use hir::{\n-    db::HirDatabase, AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo,\n+    db::HirDatabase, AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, StructKind, TypeInfo,\n };\n use ide_db::{\n     base_db::SourceDatabase,\n@@ -348,12 +348,12 @@ pub(super) fn definition(\n         Definition::Module(it) => label_and_docs(db, it),\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),\n-        Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n-            let body = it.eval(db);\n-            match body {\n-                Ok(x) => Some(format!(\"{}\", x)),\n-                Err(_) => it.value(db).map(|x| format!(\"{}\", x)),\n-            }\n+        Definition::Variant(it) => label_value_and_docs(db, it, |&it| match it.kind(db) {\n+            StructKind::Unit => match it.eval(db) {\n+                Ok(x) => Some(format!(\"{}\", x.enum_value().unwrap_or(x))),\n+                Err(_) => it.value(db).map(|x| format!(\"{:?}\", x)),\n+            },\n+            _ => None,\n         }),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.eval(db);"}, {"sha": "b877e6e5c9fd5c06b02d501ebf17fd50fd3009ed", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=2f84b6e2e51442755dfd9c8ae5cc5eb9020e52cb", "patch": "@@ -3529,6 +3529,31 @@ impl<const LEN: usize> Foo<LEN$0> {}\n \n #[test]\n fn hover_const_eval_variant() {\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    A = 4,\n+    /// This is a doc\n+    B$0 = E::A as u8 + 1,\n+}\n+\"#,\n+        expect![[r#\"\n+            *B*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            B = 5\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n     // show hex for <10\n     check(\n         r#\"\n@@ -3586,7 +3611,7 @@ enum E {\n enum E {\n     A = 1,\n     /// This is a doc\n-    B$0 = E::A + 1,\n+    B$0 = E::A as u8 + 1,\n }\n \"#,\n         expect![[r#\"\n@@ -3602,6 +3627,32 @@ enum E {\n \n             ---\n \n+            This is a doc\n+        \"#]],\n+    );\n+    // unspecified variant should increment by one\n+    check(\n+        r#\"\n+#[repr(u8)]\n+enum E {\n+    A = 4,\n+    /// This is a doc\n+    B$0,\n+}\n+\"#,\n+        expect![[r#\"\n+            *B*\n+\n+            ```rust\n+            test::E\n+            ```\n+\n+            ```rust\n+            B = 5\n+            ```\n+\n+            ---\n+\n             This is a doc\n         \"#]],\n     );"}]}