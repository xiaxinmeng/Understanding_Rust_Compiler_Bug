{"sha": "987b47549eae03e4d9699336f5e30f787161acaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4N2I0NzU0OWVhZTAzZTRkOTY5OTMzNmY1ZTMwZjc4NzE2MWFjYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-04T13:06:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-04T13:06:37Z"}, "message": "Auto merge of #36255 - Manishearth:rollup, r=Manishearth\n\nRollup of 7 pull requests\n\n- Successful merges: #36070, #36132, #36200, #36212, #36225, #36231, #36234\n- Failed merges:", "tree": {"sha": "5e7eb63f8f244e3d1961b69dacb8bfeacdff849b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7eb63f8f244e3d1961b69dacb8bfeacdff849b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/987b47549eae03e4d9699336f5e30f787161acaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/987b47549eae03e4d9699336f5e30f787161acaa", "html_url": "https://github.com/rust-lang/rust/commit/987b47549eae03e4d9699336f5e30f787161acaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/987b47549eae03e4d9699336f5e30f787161acaa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77d86c142ae668038dd43594d04022cbd6bf4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77d86c142ae668038dd43594d04022cbd6bf4d8", "html_url": "https://github.com/rust-lang/rust/commit/e77d86c142ae668038dd43594d04022cbd6bf4d8"}, {"sha": "55893f0da7427c14be55837fada2d062db387ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/55893f0da7427c14be55837fada2d062db387ec9", "html_url": "https://github.com/rust-lang/rust/commit/55893f0da7427c14be55837fada2d062db387ec9"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "c1af7bd794cbfd625c84c8253b75fb7d5658f76e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -144,6 +144,7 @@ struct Rust {\n     rpath: Option<bool>,\n     optimize_tests: Option<bool>,\n     debuginfo_tests: Option<bool>,\n+    codegen_tests: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -232,6 +233,7 @@ impl Config {\n             set(&mut config.rust_optimize, rust.optimize);\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n+            set(&mut config.codegen_tests, rust.codegen_tests);\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.debug_jemalloc, rust.debug_jemalloc);\n             set(&mut config.use_jemalloc, rust.use_jemalloc);"}, {"sha": "fcbd1d33309ff3b57a1a4a199f14eda94b26a9cf", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -1,5 +1,8 @@\n # Sample TOML configuration file for building Rust.\n #\n+# To configure rustbuild, copy this file to the directory from which you will be\n+# running the build, and name it config.toml.\n+#\n # All options are commented out by default in this file, and they're commented\n # out with their default values. The build system by default looks for\n # `config.toml` in the current directory of a build for build configuration, but\n@@ -130,6 +133,10 @@\n #optimize-tests = true\n #debuginfo-tests = true\n \n+# Flag indicating whether codegen tests will be run or not. If you get an error\n+# saying that the FileCheck executable is missing, you may want to disable this.\n+#codegen-tests = true\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "25570cb5503c94f6f3c8ccebaee24baaaa3a86a6", "filename": "src/doc/book/nightly-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fdoc%2Fbook%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Fdoc%2Fbook%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fnightly-rust.md?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -54,7 +54,7 @@ binary downloads][install-page].\n \n Oh, we should also mention the officially supported platforms:\n \n-* Windows (7, 8, Server 2008 R2)\n+* Windows (7+)\n * Linux (2.6.18 or later, various distributions), x86 and x86-64\n * OSX 10.7 (Lion) or greater, x86 and x86-64\n "}, {"sha": "62e5d670fb69ad24a9cfc44e3b9c124ef4410b5e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -1056,8 +1056,9 @@ impl<'a> LocalCrateReader<'a> {\n                 Some(\"dylib\") => cstore::NativeUnknown,\n                 Some(\"framework\") => cstore::NativeFramework,\n                 Some(k) => {\n-                    span_err!(self.sess, m.span, E0458,\n-                              \"unknown kind: `{}`\", k);\n+                    struct_span_err!(self.sess, m.span, E0458,\n+                              \"unknown kind: `{}`\", k)\n+                        .span_label(m.span, &format!(\"unknown kind\")).emit();\n                     cstore::NativeUnknown\n                 }\n                 None => cstore::NativeUnknown\n@@ -1068,8 +1069,9 @@ impl<'a> LocalCrateReader<'a> {\n             let n = match n {\n                 Some(n) => n,\n                 None => {\n-                    span_err!(self.sess, m.span, E0459,\n-                              \"#[link(...)] specified without `name = \\\"foo\\\"`\");\n+                    struct_span_err!(self.sess, m.span, E0459,\n+                                     \"#[link(...)] specified without `name = \\\"foo\\\"`\")\n+                        .span_label(m.span, &format!(\"missing `name` argument\")).emit();\n                     InternedString::new(\"foo\")\n                 }\n             };"}, {"sha": "02a643b76d548ed5d3cbe38ac42ce93f8eda7029", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n+use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n@@ -252,14 +253,46 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n         let mut err =\n             struct_span_err!(self.tcx.sess, self.span, E0493, \"{}\", msg);\n+\n         if self.mode != Mode::Const {\n             help!(&mut err,\n                   \"in Nightly builds, add `#![feature(drop_types_in_const)]` \\\n                    to the crate attributes to enable\");\n+        } else {\n+            self.find_drop_implementation_method_span()\n+                .map(|span| err.span_label(span, &format!(\"destructor defined here\")));\n+\n+            err.span_label(self.span, &format!(\"constants cannot have destructors\"));\n         }\n+\n         err.emit();\n     }\n \n+    fn find_drop_implementation_method_span(&self) -> Option<Span> {\n+        self.tcx.lang_items\n+            .drop_trait()\n+            .and_then(|drop_trait_id| {\n+                let mut span = None;\n+\n+                self.tcx\n+                    .lookup_trait_def(drop_trait_id)\n+                    .for_each_relevant_impl(self.tcx, self.mir.return_ty, |impl_did| {\n+                        self.tcx.map\n+                            .as_local_node_id(impl_did)\n+                            .and_then(|impl_node_id| self.tcx.map.find(impl_node_id))\n+                            .map(|node| {\n+                                if let hir_map::NodeItem(item) = node {\n+                                    if let hir::ItemImpl(_, _, _, _, _, ref methods) = item.node {\n+                                        span = methods.first().map(|method| method.span);\n+                                    }\n+                                }\n+                            });\n+                    });\n+\n+                span\n+            })\n+    }\n+\n     /// Check if an Lvalue with the current qualifications could\n     /// be consumed, by either an operand or a Deref projection.\n     fn try_consume(&mut self) -> bool {"}, {"sha": "e87158ae3b03fa9cb74d00b06e4bc302909b320b", "filename": "src/test/compile-fail/E0458.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fcompile-fail%2FE0458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fcompile-fail%2FE0458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0458.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n #[link(kind = \"wonderful_unicorn\")] extern {} //~ ERROR E0458\n-                                              //~^ ERROR E0459\n+                                              //~| NOTE unknown kind\n+                                              //~| ERROR E0459\n+                                              //~| NOTE missing `name` argument\n \n fn main() {\n }"}, {"sha": "41376bd9ef5a206579d8ca5070419fba8ee479be", "filename": "src/test/compile-fail/E0459.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fcompile-fail%2FE0459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fcompile-fail%2FE0459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0459.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[link(kind = \"dylib\")] extern {} //~ ERROR E0459\n+                                  //~| NOTE missing `name` argument\n \n fn main() {\n }"}, {"sha": "ea4526b70f6a8ec6933fed23f0ee24cf92e14b2d", "filename": "src/test/ui/span/E0493.rs", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.rs?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -16,7 +16,15 @@ impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-const F : Foo = Foo { a : 0 }; //~ ERROR E0493\n+struct Bar {\n+    a: u32\n+}\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {}\n+}\n+\n+const F : Foo = Foo { a : 0 };\n \n fn main() {\n }", "previous_filename": "src/test/compile-fail/E0493.rs"}, {"sha": "afcc9a240eb4e6c266a4decb0e110c8e2b80ad99", "filename": "src/test/ui/span/E0493.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/987b47549eae03e4d9699336f5e30f787161acaa/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=987b47549eae03e4d9699336f5e30f787161acaa", "patch": "@@ -0,0 +1,11 @@\n+error[E0493]: constants are not allowed to have destructors\n+  --> $DIR/E0493.rs:27:17\n+   |\n+16 |     fn drop(&mut self) {}\n+   |     --------------------- destructor defined here\n+...\n+27 | const F : Foo = Foo { a : 0 };\n+   |                 ^^^^^^^^^^^^^ constants cannot have destructors\n+\n+error: aborting due to previous error\n+"}]}