{"sha": "5e1d3299a290026b85787bc9c7e72bcc53ac283f", "node_id": "C_kwDOAAsO6NoAKDVlMWQzMjk5YTI5MDAyNmI4NTc4N2JjOWM3ZTcyYmNjNTNhYzI4M2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T20:38:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T20:38:06Z"}, "message": "Auto merge of #109824 - GuillaumeGomez:rollup-i5r4uts, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109104 (rustdoc: Fix invalid suggestions on ambiguous intra doc links v2)\n - #109443 (Move `doc(primitive)` future incompat warning to `invalid_doc_attributes`)\n - #109680 (Fix subslice capture in closure)\n - #109798 (fluent_messages macro: don't emit the OS error in a note)\n - #109805 (Source map cleanups)\n - #109818 (rustdoc: Add GUI test for jump to collapsed item)\n - #109820 (rustdoc-search: update docs for comma in `?` help popover)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "eeda41ac20955d71475e9772e5ece158203d92f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeda41ac20955d71475e9772e5ece158203d92f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1d3299a290026b85787bc9c7e72bcc53ac283f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d3299a290026b85787bc9c7e72bcc53ac283f", "html_url": "https://github.com/rust-lang/rust/commit/5e1d3299a290026b85787bc9c7e72bcc53ac283f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d3299a290026b85787bc9c7e72bcc53ac283f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7402519c6303000d49f67a57c96b6863c88a9163", "url": "https://api.github.com/repos/rust-lang/rust/commits/7402519c6303000d49f67a57c96b6863c88a9163", "html_url": "https://github.com/rust-lang/rust/commit/7402519c6303000d49f67a57c96b6863c88a9163"}, {"sha": "083c128ae17b505fd86f6a990dc5bd185cfc6c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/083c128ae17b505fd86f6a990dc5bd185cfc6c26", "html_url": "https://github.com/rust-lang/rust/commit/083c128ae17b505fd86f6a990dc5bd185cfc6c26"}], "stats": {"total": 1434, "additions": 1024, "deletions": 410}, "files": [{"sha": "26bc216f678cfb5be2f18d5e2facfef20c668037", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -54,7 +54,7 @@ impl base::BangProcMacro for BangProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -85,7 +85,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -134,7 +134,11 @@ impl MultiItemModifier for DeriveProcMacro {\n         let stream = {\n             let _timer =\n                 ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                    recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                    recorder.record_arg_with_span(\n+                        ecx.sess.source_map(),\n+                        ecx.expansion_descr(),\n+                        span,\n+                    );\n                 });\n             let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n             let strategy = exec_strategy(ecx);"}, {"sha": "84114b27f415ca06201d179e5b95344671f6e903", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -225,7 +225,7 @@ declare_features! (\n     (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n     /// Allows using compiler's own crates.\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n-    /// Allows using internal rustdoc features like `doc(primitive)` or `doc(keyword)`.\n+    /// Allows using internal rustdoc features like `doc(keyword)`.\n     (active, rustdoc_internals, \"1.58.0\", Some(90418), None),\n     /// Allows using the `rustdoc::missing_doc_code_examples` lint\n     (active, rustdoc_missing_doc_code_examples, \"1.31.0\", Some(101730), None),"}, {"sha": "c77292fdd1647d630407cafafe14482f17760764", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -778,6 +778,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         definition of a trait, it's currently in experimental form and should be changed before \\\n         being exposed outside of the std\"\n     ),\n+    rustc_attr!(\n+        rustc_doc_primitive, Normal, template!(NameValueStr: \"primitive name\"), ErrorFollowing,\n+        r#\"`rustc_doc_primitive` is a rustc internal attribute\"#,\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "41a6ad80b65a3ed857fc6120211f97b3ff370ba8", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1893,14 +1893,13 @@ fn restrict_capture_precision(\n \n     for (i, proj) in place.projections.iter().enumerate() {\n         match proj.kind {\n-            ProjectionKind::Index => {\n-                // Arrays are completely captured, so we drop Index projections\n+            ProjectionKind::Index | ProjectionKind::Subslice => {\n+                // Arrays are completely captured, so we drop Index and Subslice projections\n                 truncate_place_to_len_and_update_capture_kind(&mut place, &mut curr_mode, i);\n                 return (place, curr_mode);\n             }\n             ProjectionKind::Deref => {}\n             ProjectionKind::Field(..) => {} // ignore\n-            ProjectionKind::Subslice => {}  // We never capture this\n         }\n     }\n "}, {"sha": "be7fa9378ca66262fb20559c24836813b7b0e6f2", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -292,7 +292,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 override_queries: config.override_queries,\n             };\n \n-            rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n+            rustc_span::set_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n                 let r = {\n                     let _sess_abort_error = OnDrop(|| {\n                         compiler.sess.finish_diagnostics(registry);"}, {"sha": "9f96a04148792f4d4ae494edc47df4c38821e07f", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -15,8 +15,7 @@ use proc_macro2::TokenStream;\n use quote::quote;\n use std::{\n     collections::{HashMap, HashSet},\n-    fs::File,\n-    io::Read,\n+    fs::read_to_string,\n     path::{Path, PathBuf},\n };\n use syn::{parse_macro_input, Ident, LitStr};\n@@ -95,22 +94,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n \n     // As this macro also outputs an `include_str!` for this file, the macro will always be\n     // re-executed when the file changes.\n-    let mut resource_file = match File::open(absolute_ftl_path) {\n-        Ok(resource_file) => resource_file,\n+    let resource_contents = match read_to_string(absolute_ftl_path) {\n+        Ok(resource_contents) => resource_contents,\n         Err(e) => {\n-            Diagnostic::spanned(resource_span, Level::Error, \"could not open Fluent resource\")\n-                .note(e.to_string())\n-                .emit();\n+            Diagnostic::spanned(\n+                resource_span,\n+                Level::Error,\n+                format!(\"could not open Fluent resource: {}\", e.to_string()),\n+            )\n+            .emit();\n             return failed(&crate_name);\n         }\n     };\n-    let mut resource_contents = String::new();\n-    if let Err(e) = resource_file.read_to_string(&mut resource_contents) {\n-        Diagnostic::spanned(resource_span, Level::Error, \"could not read Fluent resource\")\n-            .note(e.to_string())\n-            .emit();\n-        return failed(&crate_name);\n-    }\n     let mut bad = false;\n     for esc in [\"\\\\n\", \"\\\\\\\"\", \"\\\\'\"] {\n         for _ in resource_contents.matches(esc) {"}, {"sha": "b354dca7cc44c1a80830775280a187100c216d52", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -148,9 +148,6 @@ passes_doc_test_unknown =\n passes_doc_test_takes_list =\n     `#[doc(test(...)]` takes a list of attributes\n \n-passes_doc_primitive =\n-    `doc(primitive)` should never have been stable\n-\n passes_doc_cfg_hide_takes_list =\n     `#[doc(cfg_hide(...)]` takes a list of attributes\n "}, {"sha": "80a93da2b45c4bc8327f0a7a97c163f615d2cb78", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1109,17 +1109,6 @@ impl CheckAttrVisitor<'_> {\n                             }\n                         }\n \n-                        sym::primitive => {\n-                            if !self.tcx.features().rustdoc_internals {\n-                                self.tcx.emit_spanned_lint(\n-                                    INVALID_DOC_ATTRIBUTES,\n-                                    hir_id,\n-                                    i_meta.span,\n-                                    errors::DocPrimitive,\n-                                );\n-                            }\n-                        }\n-\n                         _ => {\n                             let path = rustc_ast_pretty::pprust::path_to_string(&i_meta.path);\n                             if i_meta.has_name(sym::spotlight) {"}, {"sha": "139ba8c9677561267145e77e8c303b5f5596d4b4", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -288,10 +288,6 @@ pub struct DocTestTakesList;\n #[diag(passes_doc_cfg_hide_takes_list)]\n pub struct DocCfgHideTakesList;\n \n-#[derive(LintDiagnostic)]\n-#[diag(passes_doc_primitive)]\n-pub struct DocPrimitive;\n-\n #[derive(LintDiagnostic)]\n #[diag(passes_doc_test_unknown_any)]\n pub struct DocTestUnknownAny {"}, {"sha": "9eae99be2e901a7ca4520088049b60d18b9a74fa", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -339,12 +339,14 @@ pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n     attrs.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == ast::AttrStyle::Inner)\n }\n \n-/// Has `#[doc(primitive)]` or `#[doc(keyword)]`.\n+/// Has `#[rustc_doc_primitive]` or `#[doc(keyword)]`.\n pub fn has_primitive_or_keyword_docs(attrs: &[ast::Attribute]) -> bool {\n     for attr in attrs {\n-        if attr.has_name(sym::doc) && let Some(items) = attr.meta_item_list() {\n+        if attr.has_name(sym::rustc_doc_primitive) {\n+            return true;\n+        } else if attr.has_name(sym::doc) && let Some(items) = attr.meta_item_list() {\n             for item in items {\n-                if item.has_name(sym::primitive) || item.has_name(sym::keyword) {\n+                if item.has_name(sym::keyword) {\n                     return true;\n                 }\n             }"}, {"sha": "e14760aa01885207faa7a3bfd4fbc3a7fcf7ec54", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -87,6 +87,14 @@ pub struct SessionGlobals {\n     symbol_interner: symbol::Interner,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n+\n+    /// A reference to the source map in the `Session`. It's an `Option`\n+    /// because it can't be initialized until `Session` is created, which\n+    /// happens after `SessionGlobals`. `set_source_map` does the\n+    /// initialization.\n+    ///\n+    /// This field should only be used in places where the `Session` is truly\n+    /// not available, such as `<Span as Debug>::fmt`.\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n@@ -1013,16 +1021,9 @@ impl<D: Decoder> Decodable<D> for Span {\n     }\n }\n \n-/// Calls the provided closure, using the provided `SourceMap` to format\n-/// any spans that are debug-printed during the closure's execution.\n-///\n-/// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n-/// (see `rustc_interface::callbacks::span_debug1`). However, some parts\n-/// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n-/// a `TyCtxt` is available. In this case, we fall back to\n-/// the `SourceMap` provided to this function. If that is not available,\n-/// we fall back to printing the raw `Span` field values.\n-pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n+/// Insert `source_map` into the session globals for the duration of the\n+/// closure's execution.\n+pub fn set_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n     with_session_globals(|session_globals| {\n         *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n@@ -1041,6 +1042,8 @@ pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) ->\n \n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Use the global `SourceMap` to print the span. If that's not\n+        // available, fall back to printing the raw values.\n         with_session_globals(|session_globals| {\n             if let Some(source_map) = &*session_globals.source_map.borrow() {\n                 write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())"}, {"sha": "66e5369da3ae1a8da287a3f2f5b15f743551b7cc", "filename": "compiler/rustc_span/src/profiling.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,3 +1,5 @@\n+use crate::source_map::SourceMap;\n+\n use std::borrow::Borrow;\n \n use rustc_data_structures::profiling::EventArgRecorder;\n@@ -11,25 +13,17 @@ pub trait SpannedEventArgRecorder {\n     ///\n     /// Note: when self-profiling with costly event arguments, at least one argument\n     /// needs to be recorded. A panic will be triggered if that doesn't happen.\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>;\n }\n \n impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>,\n     {\n         self.record_arg(event_arg);\n-\n-        let span_arg = crate::with_session_globals(|session_globals| {\n-            if let Some(source_map) = &*session_globals.source_map.borrow() {\n-                source_map.span_to_embeddable_string(span)\n-            } else {\n-                format!(\"{span:?}\")\n-            }\n-        });\n-        self.record_arg(span_arg);\n+        self.record_arg(source_map.span_to_embeddable_string(span));\n     }\n }"}, {"sha": "0e55e81143de46c040ab2a4cba15446ce92b1ee5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1247,6 +1247,7 @@ symbols! {\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_do_not_const_check,\n+        rustc_doc_primitive,\n         rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,"}, {"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "66fb941ea37512a0b87ba91b8584ffa6ab63d8a9", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1 +1 @@\n-0.14.5\n\\ No newline at end of file\n+0.14.6\n\\ No newline at end of file"}, {"sha": "960c1de1782c60b8886a99616283d981993cd104", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -177,9 +177,9 @@ Book][unstable-masked] and [its tracking issue][issue-masked].\n This is for Rust compiler internal use only.\n \n Since primitive types are defined in the compiler, there's no place to attach documentation\n-attributes. The `#[doc(primitive)]` attribute is used by the standard library to provide a way\n-to generate documentation for primitive types, and requires `#![feature(rustdoc_internals)]` to\n-enable.\n+attributes. The `#[rustc_doc_primitive = \"...\"]` attribute is used by the standard library to\n+provide a way to generate documentation for primitive types, and requires `#![feature(rustc_attrs)]`\n+to enable.\n \n ### Document keywords\n "}, {"sha": "ffa13ebb77c027afcd574ac7943c7860ee5b0668", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -249,38 +249,24 @@ impl ExternalCrate {\n         //\n         // Note that this loop only searches the top-level items of the crate,\n         // and this is intentional. If we were to search the entire crate for an\n-        // item tagged with `#[doc(primitive)]` then we would also have to\n+        // item tagged with `#[rustc_doc_primitive]` then we would also have to\n         // search the entirety of external modules for items tagged\n-        // `#[doc(primitive)]`, which is a pretty inefficient process (decoding\n+        // `#[rustc_doc_primitive]`, which is a pretty inefficient process (decoding\n         // all that metadata unconditionally).\n         //\n         // In order to keep the metadata load under control, the\n-        // `#[doc(primitive)]` feature is explicitly designed to only allow the\n+        // `#[rustc_doc_primitive]` feature is explicitly designed to only allow the\n         // primitive tags to show up as the top level items in a crate.\n         //\n         // Also note that this does not attempt to deal with modules tagged\n         // duplicately for the same primitive. This is handled later on when\n         // rendering by delegating everything to a hash map.\n         let as_primitive = |res: Res<!>| {\n-            if let Res::Def(DefKind::Mod, def_id) = res {\n-                let mut prim = None;\n-                let meta_items = tcx\n-                    .get_attrs(def_id, sym::doc)\n-                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default());\n-                for meta in meta_items {\n-                    if let Some(v) = meta.value_str() {\n-                        if meta.has_name(sym::primitive) {\n-                            prim = PrimitiveType::from_symbol(v);\n-                            if prim.is_some() {\n-                                break;\n-                            }\n-                            // FIXME: should warn on unknown primitives?\n-                        }\n-                    }\n-                }\n-                return prim.map(|p| (def_id, p));\n-            }\n-            None\n+            let Res::Def(DefKind::Mod, def_id) = res else { return None };\n+            tcx.get_attrs(def_id, sym::rustc_doc_primitive).find_map(|attr| {\n+                // FIXME: should warn on unknown primitives?\n+                Some((def_id, PrimitiveType::from_symbol(attr.value_str()?)?))\n+            })\n         };\n \n         if root.is_local() {\n@@ -1829,13 +1815,17 @@ impl PrimitiveType {\n         }\n     }\n \n-    /// Returns the DefId of the module with `doc(primitive)` for this primitive type.\n+    /// Returns the DefId of the module with `rustc_doc_primitive` for this primitive type.\n     /// Panics if there is no such module.\n     ///\n-    /// This gives precedence to primitives defined in the current crate, and deprioritizes primitives defined in `core`,\n-    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which will be picked.\n-    /// In particular, if a crate depends on both `std` and another crate that also defines `doc(primitive)`, then\n-    /// it's entirely random whether `std` or the other crate is picked. (no_std crates are usually fine unless multiple dependencies define a primitive.)\n+    /// This gives precedence to primitives defined in the current crate, and deprioritizes\n+    /// primitives defined in `core`,\n+    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which\n+    /// will be picked.\n+    ///\n+    /// In particular, if a crate depends on both `std` and another crate that also defines\n+    /// `rustc_doc_primitive`, then it's entirely random whether `std` or the other crate is picked.\n+    /// (no_std crates are usually fine unless multiple dependencies define a primitive.)\n     pub(crate) fn primitive_locations(tcx: TyCtxt<'_>) -> &FxHashMap<PrimitiveType, DefId> {\n         static PRIMITIVE_LOCATIONS: OnceCell<FxHashMap<PrimitiveType, DefId>> = OnceCell::new();\n         PRIMITIVE_LOCATIONS.get_or_init(|| {"}, {"sha": "45c0360a49ea6f020e4e3f176f5e553e8d602e8d", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1016,9 +1016,7 @@ function preLoadCss(cssUrl) {\n              <code>enum</code>, <code>trait</code>, <code>type</code>, <code>macro</code>, \\\n              and <code>const</code>.\",\n             \"Search functions by type signature (e.g., <code>vec -&gt; usize</code> or \\\n-             <code>-&gt; vec</code>)\",\n-            \"Search multiple things at once by splitting your query with comma (e.g., \\\n-             <code>str,u8</code> or <code>String,struct:Vec,test</code>)\",\n+             <code>-&gt; vec</code> or <code>String, enum:Cow -&gt; bool</code>)\",\n             \"You can look for items with an exact name by putting double quotes around \\\n              your request: <code>\\\"string\\\"</code>\",\n             \"Look for items inside another one by searching for a path: <code>vec::Vec</code>\","}, {"sha": "c39caf73a93671a79e8835096dd2835223eaec3b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -249,9 +249,7 @@ pub(crate) fn id_from_item_inner(\n                     // instead, we directly get the primitive symbol and convert it to u32 to\n                     // generate the ID.\n                     if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n-                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n-                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n-                            .filter(|attr| attr.has_name(sym::primitive))\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::rustc_doc_primitive)\n                             .find_map(|attr| attr.value_str()) {\n                         format!(\":{}\", prim.as_u32())\n                     } else {"}, {"sha": "d6da6e0993894099830dbbbf20a79be9b8abebe8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                         // HACK(hkmatsumoto): For impls of primitive types, we index them\n                         // regardless of whether they're local. This is because users can\n                         // document primitive items in an arbitrary crate by using\n-                        // `doc(primitive)`.\n+                        // `rustc_doc_primitive`.\n                         let mut is_primitive_impl = false;\n                         if let clean::types::ItemKind::ImplItem(ref impl_) = *item.kind &&\n                             impl_.trait_.is_none() &&"}, {"sha": "4188aa1037fbd2a90b89854a89e88fd0b5fdba53", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 245, "deletions": 145, "changes": 390, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -47,7 +47,18 @@ fn collect_intra_doc_links(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     krate\n }\n \n-#[derive(Copy, Clone, Debug, Hash)]\n+fn filter_assoc_items_by_name_and_namespace<'a>(\n+    tcx: TyCtxt<'a>,\n+    assoc_items_of: DefId,\n+    ident: Ident,\n+    ns: Namespace,\n+) -> impl Iterator<Item = &ty::AssocItem> + 'a {\n+    tcx.associated_items(assoc_items_of).filter_by_name_unhygienic(ident.name).filter(move |item| {\n+        item.kind.namespace() == ns && tcx.hygienic_eq(ident, item.ident(tcx), assoc_items_of)\n+    })\n+}\n+\n+#[derive(Copy, Clone, Debug, Hash, PartialEq)]\n enum Res {\n     Def(DefKind, DefId),\n     Primitive(PrimitiveType),\n@@ -59,7 +70,7 @@ impl Res {\n     fn descr(self) -> &'static str {\n         match self {\n             Res::Def(kind, id) => ResolveRes::Def(kind, id).descr(),\n-            Res::Primitive(_) => \"builtin type\",\n+            Res::Primitive(_) => \"primitive type\",\n         }\n     }\n \n@@ -317,14 +328,21 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         prim_ty: PrimitiveType,\n         ns: Namespace,\n         item_name: Symbol,\n-    ) -> Option<(Res, DefId)> {\n+    ) -> Vec<(Res, DefId)> {\n         let tcx = self.cx.tcx;\n \n-        prim_ty.impls(tcx).find_map(|impl_| {\n-            tcx.associated_items(impl_)\n-                .find_by_name_and_namespace(tcx, Ident::with_dummy_span(item_name), ns, impl_)\n+        prim_ty\n+            .impls(tcx)\n+            .flat_map(|impl_| {\n+                filter_assoc_items_by_name_and_namespace(\n+                    tcx,\n+                    impl_,\n+                    Ident::with_dummy_span(item_name),\n+                    ns,\n+                )\n                 .map(|item| (Res::Primitive(prim_ty), item.def_id))\n-        })\n+            })\n+            .collect::<Vec<_>>()\n     }\n \n     fn resolve_self_ty(&self, path_str: &str, ns: Namespace, item_id: DefId) -> Option<Res> {\n@@ -394,14 +412,16 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         ns: Namespace,\n         item_id: DefId,\n         module_id: DefId,\n-    ) -> Result<(Res, Option<DefId>), UnresolvedPath<'path>> {\n+    ) -> Result<Vec<(Res, Option<DefId>)>, UnresolvedPath<'path>> {\n         if let Some(res) = self.resolve_path(path_str, ns, item_id, module_id) {\n             return Ok(match res {\n                 Res::Def(\n                     DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Variant,\n                     def_id,\n-                ) => (Res::from_def_id(self.cx.tcx, self.cx.tcx.parent(def_id)), Some(def_id)),\n-                _ => (res, None),\n+                ) => {\n+                    vec![(Res::from_def_id(self.cx.tcx, self.cx.tcx.parent(def_id)), Some(def_id))]\n+                }\n+                _ => vec![(res, None)],\n             });\n         } else if ns == MacroNS {\n             return Err(UnresolvedPath {\n@@ -433,17 +453,24 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })?;\n \n         // FIXME(#83862): this arbitrarily gives precedence to primitives over modules to support\n-        // links to primitives when `#[doc(primitive)]` is present. It should give an ambiguity\n-        // error instead and special case *only* modules with `#[doc(primitive)]`, not all\n+        // links to primitives when `#[rustc_doc_primitive]` is present. It should give an ambiguity\n+        // error instead and special case *only* modules with `#[rustc_doc_primitive]`, not all\n         // primitives.\n-        resolve_primitive(&path_root, TypeNS)\n+        match resolve_primitive(&path_root, TypeNS)\n             .or_else(|| self.resolve_path(&path_root, TypeNS, item_id, module_id))\n             .and_then(|ty_res| {\n-                self.resolve_associated_item(ty_res, item_name, ns, module_id).map(Ok)\n-            })\n-            .unwrap_or_else(|| {\n+                let candidates = self\n+                    .resolve_associated_item(ty_res, item_name, ns, module_id)\n+                    .into_iter()\n+                    .map(|(res, def_id)| (res, Some(def_id)))\n+                    .collect::<Vec<_>>();\n+                if !candidates.is_empty() { Some(candidates) } else { None }\n+            }) {\n+            Some(r) => Ok(r),\n+            None => {\n                 if ns == Namespace::ValueNS {\n                     self.variant_field(path_str, item_id, module_id)\n+                        .map(|(res, def_id)| vec![(res, Some(def_id))])\n                 } else {\n                     Err(UnresolvedPath {\n                         item_id,\n@@ -452,8 +479,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         unresolved: path_root.into(),\n                     })\n                 }\n-            })\n-            .map(|(res, def_id)| (res, Some(def_id)))\n+            }\n+        }\n     }\n \n     /// Convert a DefId to a Res, where possible.\n@@ -535,24 +562,31 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         item_name: Symbol,\n         ns: Namespace,\n         module_id: DefId,\n-    ) -> Option<(Res, DefId)> {\n+    ) -> Vec<(Res, DefId)> {\n         let tcx = self.cx.tcx;\n \n         match root_res {\n             Res::Primitive(prim) => {\n-                self.resolve_primitive_associated_item(prim, ns, item_name).or_else(|| {\n+                let items = self.resolve_primitive_associated_item(prim, ns, item_name);\n+                if !items.is_empty() {\n+                    items\n+                // Inherent associated items take precedence over items that come from trait impls.\n+                } else {\n                     self.primitive_type_to_ty(prim)\n-                        .and_then(|ty| {\n+                        .map(|ty| {\n                             resolve_associated_trait_item(ty, module_id, item_name, ns, self.cx)\n+                                .iter()\n+                                .map(|item| (root_res, item.def_id))\n+                                .collect::<Vec<_>>()\n                         })\n-                        .map(|item| (root_res, item.def_id))\n-                })\n+                        .unwrap_or(Vec::new())\n+                }\n             }\n             Res::Def(DefKind::TyAlias, did) => {\n                 // Resolve the link on the type the alias points to.\n                 // FIXME: if the associated item is defined directly on the type alias,\n                 // it will show up on its documentation page, we should link there instead.\n-                let res = self.def_id_to_res(did)?;\n+                let Some(res) = self.def_id_to_res(did) else { return Vec::new() };\n                 self.resolve_associated_item(res, item_name, ns, module_id)\n             }\n             Res::Def(\n@@ -566,7 +600,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::Adt(adt_def, _) => {\n                             for variant in adt_def.variants() {\n                                 if variant.name == item_name {\n-                                    return Some((root_res, variant.def_id));\n+                                    return vec![(root_res, variant.def_id)];\n                                 }\n                             }\n                         }\n@@ -575,43 +609,46 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n \n                 // Checks if item_name belongs to `impl SomeItem`\n-                let assoc_item = tcx\n+                let mut assoc_items: Vec<_> = tcx\n                     .inherent_impls(did)\n                     .iter()\n                     .flat_map(|&imp| {\n-                        tcx.associated_items(imp).find_by_name_and_namespace(\n+                        filter_assoc_items_by_name_and_namespace(\n                             tcx,\n+                            imp,\n                             Ident::with_dummy_span(item_name),\n                             ns,\n-                            imp,\n                         )\n                     })\n-                    .copied()\n-                    // There should only ever be one associated item that matches from any inherent impl\n-                    .next()\n+                    .map(|item| (root_res, item.def_id))\n+                    .collect();\n+\n+                if assoc_items.is_empty() {\n                     // Check if item_name belongs to `impl SomeTrait for SomeItem`\n                     // FIXME(#74563): This gives precedence to `impl SomeItem`:\n                     // Although having both would be ambiguous, use impl version for compatibility's sake.\n                     // To handle that properly resolve() would have to support\n                     // something like [`ambi_fn`](<SomeStruct as SomeTrait>::ambi_fn)\n-                    .or_else(|| {\n-                        resolve_associated_trait_item(\n-                            tcx.type_of(did).subst_identity(),\n-                            module_id,\n-                            item_name,\n-                            ns,\n-                            self.cx,\n-                        )\n-                    });\n+                    assoc_items = resolve_associated_trait_item(\n+                        tcx.type_of(did).subst_identity(),\n+                        module_id,\n+                        item_name,\n+                        ns,\n+                        self.cx,\n+                    )\n+                    .into_iter()\n+                    .map(|item| (root_res, item.def_id))\n+                    .collect::<Vec<_>>();\n+                }\n \n-                debug!(\"got associated item {:?}\", assoc_item);\n+                debug!(\"got associated item {:?}\", assoc_items);\n \n-                if let Some(item) = assoc_item {\n-                    return Some((root_res, item.def_id));\n+                if !assoc_items.is_empty() {\n+                    return assoc_items;\n                 }\n \n                 if ns != Namespace::ValueNS {\n-                    return None;\n+                    return Vec::new();\n                 }\n                 debug!(\"looking for fields named {} for {:?}\", item_name, did);\n                 // FIXME: this doesn't really belong in `associated_item` (maybe `variant_field` is better?)\n@@ -631,20 +668,27 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // field syntax) and are handled by the compiler's resolver.\n                 let def = match tcx.type_of(did).subst_identity().kind() {\n                     ty::Adt(def, _) if !def.is_enum() => def,\n-                    _ => return None,\n+                    _ => return Vec::new(),\n                 };\n-                let field =\n-                    def.non_enum_variant().fields.iter().find(|item| item.name == item_name)?;\n-                Some((root_res, field.did))\n+                def.non_enum_variant()\n+                    .fields\n+                    .iter()\n+                    .filter(|field| field.name == item_name)\n+                    .map(|field| (root_res, field.did))\n+                    .collect::<Vec<_>>()\n             }\n-            Res::Def(DefKind::Trait, did) => tcx\n-                .associated_items(did)\n-                .find_by_name_and_namespace(tcx, Ident::with_dummy_span(item_name), ns, did)\n-                .map(|item| {\n-                    let res = Res::Def(item.kind.as_def_kind(), item.def_id);\n-                    (res, item.def_id)\n-                }),\n-            _ => None,\n+            Res::Def(DefKind::Trait, did) => filter_assoc_items_by_name_and_namespace(\n+                tcx,\n+                did,\n+                Ident::with_dummy_span(item_name),\n+                ns,\n+            )\n+            .map(|item| {\n+                let res = Res::Def(item.kind.as_def_kind(), item.def_id);\n+                (res, item.def_id)\n+            })\n+            .collect::<Vec<_>>(),\n+            _ => Vec::new(),\n         }\n     }\n }\n@@ -664,27 +708,34 @@ fn resolve_associated_trait_item<'a>(\n     item_name: Symbol,\n     ns: Namespace,\n     cx: &mut DocContext<'a>,\n-) -> Option<ty::AssocItem> {\n+) -> Vec<ty::AssocItem> {\n     // FIXME: this should also consider blanket impls (`impl<T> X for T`). Unfortunately\n     // `get_auto_trait_and_blanket_impls` is broken because the caching behavior is wrong. In the\n     // meantime, just don't look for these blanket impls.\n \n     // Next consider explicit impls: `impl MyTrait for MyType`\n     // Give precedence to inherent impls.\n     let traits = trait_impls_for(cx, ty, module);\n+    let tcx = cx.tcx;\n     debug!(\"considering traits {:?}\", traits);\n-    let mut candidates = traits.iter().filter_map(|&(impl_, trait_)| {\n-        cx.tcx\n-            .associated_items(trait_)\n-            .find_by_name_and_namespace(cx.tcx, Ident::with_dummy_span(item_name), ns, trait_)\n-            .map(|trait_assoc| {\n-                trait_assoc_to_impl_assoc_item(cx.tcx, impl_, trait_assoc.def_id)\n+    let candidates = traits\n+        .iter()\n+        .flat_map(|&(impl_, trait_)| {\n+            filter_assoc_items_by_name_and_namespace(\n+                cx.tcx,\n+                trait_,\n+                Ident::with_dummy_span(item_name),\n+                ns,\n+            )\n+            .map(move |trait_assoc| {\n+                trait_assoc_to_impl_assoc_item(tcx, impl_, trait_assoc.def_id)\n                     .unwrap_or(*trait_assoc)\n             })\n-    });\n+        })\n+        .collect::<Vec<_>>();\n     // FIXME(#74563): warn about ambiguity\n-    debug!(\"the candidates were {:?}\", candidates.clone().collect::<Vec<_>>());\n-    candidates.next()\n+    debug!(\"the candidates were {:?}\", candidates);\n+    candidates\n }\n \n /// Find the associated item in the impl `impl_id` that corresponds to the\n@@ -758,15 +809,15 @@ fn trait_impls_for<'a>(\n /// Check for resolve collisions between a trait and its derive.\n ///\n /// These are common and we should just resolve to the trait in that case.\n-fn is_derive_trait_collision<T>(ns: &PerNS<Result<(Res, T), ResolutionFailure<'_>>>) -> bool {\n-    matches!(\n-        *ns,\n-        PerNS {\n-            type_ns: Ok((Res::Def(DefKind::Trait, _), _)),\n-            macro_ns: Ok((Res::Def(DefKind::Macro(MacroKind::Derive), _), _)),\n-            ..\n-        }\n-    )\n+fn is_derive_trait_collision<T>(ns: &PerNS<Result<Vec<(Res, T)>, ResolutionFailure<'_>>>) -> bool {\n+    if let (&Ok(ref type_ns), &Ok(ref macro_ns)) = (&ns.type_ns, &ns.macro_ns) {\n+        type_ns.iter().any(|(res, _)| matches!(res, Res::Def(DefKind::Trait, _)))\n+            && macro_ns\n+                .iter()\n+                .any(|(res, _)| matches!(res, Res::Def(DefKind::Macro(MacroKind::Derive), _)))\n+    } else {\n+        false\n+    }\n }\n \n impl<'a, 'tcx> DocVisitor for LinkCollector<'a, 'tcx> {\n@@ -987,15 +1038,15 @@ impl LinkCollector<'_, '_> {\n                     res = prim;\n                 } else {\n                     // `[char]` when a `char` module is in scope\n-                    let candidates = vec![res, prim];\n-                    ambiguity_error(self.cx, diag_info, path_str, candidates);\n+                    let candidates = &[(res, res.def_id(self.cx.tcx)), (prim, None)];\n+                    ambiguity_error(self.cx, &diag_info, path_str, candidates);\n                     return None;\n                 }\n             }\n         }\n \n         match res {\n-            Res::Primitive(prim) => {\n+            Res::Primitive(_) => {\n                 if let Some(UrlFragment::Item(id)) = fragment {\n                     // We're actually resolving an associated item of a primitive, so we need to\n                     // verify the disambiguator (if any) matches the type of the associated item.\n@@ -1015,15 +1066,6 @@ impl LinkCollector<'_, '_> {\n                         item,\n                         &diag_info,\n                     )?;\n-\n-                    // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n-                    // However I'm not sure how to check that across crates.\n-                    if prim == PrimitiveType::RawPointer\n-                        && item.item_id.is_local()\n-                        && !self.cx.tcx.features().intra_doc_pointers\n-                    {\n-                        self.report_rawptr_assoc_feature_gate(dox, ori_link, item);\n-                    }\n                 } else {\n                     match disambiguator {\n                         Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n@@ -1102,7 +1144,7 @@ impl LinkCollector<'_, '_> {\n                 }\n             }\n \n-        // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+        // item can be non-local e.g. when using `#[rustc_doc_primitive = \"pointer\"]`\n         if let Some((src_id, dst_id)) = id.as_local().and_then(|dst_id| {\n             item.item_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n         }) {\n@@ -1144,10 +1186,9 @@ impl LinkCollector<'_, '_> {\n         report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, diag_info, callback);\n     }\n \n-    fn report_rawptr_assoc_feature_gate(&self, dox: &str, ori_link: &MarkdownLink, item: &Item) {\n-        let span =\n-            super::source_span_for_markdown_range(self.cx.tcx, dox, &ori_link.range, &item.attrs)\n-                .unwrap_or_else(|| item.attr_span(self.cx.tcx));\n+    fn report_rawptr_assoc_feature_gate(&self, dox: &str, ori_link: &Range<usize>, item: &Item) {\n+        let span = super::source_span_for_markdown_range(self.cx.tcx, dox, ori_link, &item.attrs)\n+            .unwrap_or_else(|| item.attr_span(self.cx.tcx));\n         rustc_session::parse::feature_err(\n             &self.cx.tcx.sess.parse_sess,\n             sym::intra_doc_pointers,\n@@ -1172,7 +1213,31 @@ impl LinkCollector<'_, '_> {\n             }\n         }\n \n-        let res = self.resolve_with_disambiguator(&key, diag.clone()).and_then(|(res, def_id)| {\n+        let mut candidates = self.resolve_with_disambiguator(&key, diag.clone());\n+\n+        // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n+        // However I'm not sure how to check that across crates.\n+        if let Some(candidate) = candidates.get(0) &&\n+            candidate.0 == Res::Primitive(PrimitiveType::RawPointer) &&\n+            key.path_str.contains(\"::\") // We only want to check this if this is an associated item.\n+        {\n+            if key.item_id.is_local() && !self.cx.tcx.features().intra_doc_pointers {\n+                self.report_rawptr_assoc_feature_gate(diag.dox, &diag.link_range, diag.item);\n+                return None;\n+            } else {\n+                candidates = vec![candidates[0]];\n+            }\n+        }\n+\n+        // If there are multiple items with the same \"kind\" (for example, both \"associated types\")\n+        // and after removing duplicated kinds, only one remains, the `ambiguity_error` function\n+        // won't emit an error. So at this point, we can just take the first candidate as it was\n+        // the first retrieved and use it to generate the link.\n+        if candidates.len() > 1 && !ambiguity_error(self.cx, &diag, &key.path_str, &candidates) {\n+            candidates = vec![candidates[0]];\n+        }\n+\n+        if let &[(res, def_id)] = candidates.as_slice() {\n             let fragment = match (&key.extra_fragment, def_id) {\n                 (Some(_), Some(def_id)) => {\n                     report_anchor_conflict(self.cx, diag, def_id);\n@@ -1182,13 +1247,15 @@ impl LinkCollector<'_, '_> {\n                 (None, Some(def_id)) => Some(UrlFragment::Item(def_id)),\n                 (None, None) => None,\n             };\n-            Some((res, fragment))\n-        });\n+            let r = Some((res, fragment));\n+            self.visited_links.insert(key, r.clone());\n+            return r;\n+        }\n \n-        if res.is_some() || cache_errors {\n-            self.visited_links.insert(key, res.clone());\n+        if cache_errors {\n+            self.visited_links.insert(key, None);\n         }\n-        res\n+        None\n     }\n \n     /// After parsing the disambiguator, resolve the main part of the link.\n@@ -1197,7 +1264,7 @@ impl LinkCollector<'_, '_> {\n         &mut self,\n         key: &ResolutionInfo,\n         diag: DiagnosticInfo<'_>,\n-    ) -> Option<(Res, Option<DefId>)> {\n+    ) -> Vec<(Res, Option<DefId>)> {\n         let disambiguator = key.dis;\n         let path_str = &key.path_str;\n         let item_id = key.item_id;\n@@ -1206,7 +1273,7 @@ impl LinkCollector<'_, '_> {\n         match disambiguator.map(Disambiguator::ns) {\n             Some(expected_ns) => {\n                 match self.resolve(path_str, expected_ns, item_id, module_id) {\n-                    Ok(res) => Some(res),\n+                    Ok(candidates) => candidates,\n                     Err(err) => {\n                         // We only looked in one namespace. Try to give a better error if possible.\n                         // FIXME: really it should be `resolution_failure` that does this, not `resolve_with_disambiguator`.\n@@ -1215,10 +1282,11 @@ impl LinkCollector<'_, '_> {\n                         for other_ns in [TypeNS, ValueNS, MacroNS] {\n                             if other_ns != expected_ns {\n                                 if let Ok(res) =\n-                                    self.resolve(path_str, other_ns, item_id, module_id)\n+                                    self.resolve(path_str, other_ns, item_id, module_id) &&\n+                                    !res.is_empty()\n                                 {\n                                     err = ResolutionFailure::WrongNamespace {\n-                                        res: full_res(self.cx.tcx, res),\n+                                        res: full_res(self.cx.tcx, res[0]),\n                                         expected_ns,\n                                     };\n                                     break;\n@@ -1239,18 +1307,26 @@ impl LinkCollector<'_, '_> {\n                 let candidates = PerNS {\n                     macro_ns: candidate(MacroNS),\n                     type_ns: candidate(TypeNS),\n-                    value_ns: candidate(ValueNS).and_then(|(res, def_id)| {\n-                        match res {\n-                            // Constructors are picked up in the type namespace.\n-                            Res::Def(DefKind::Ctor(..), _) => {\n-                                Err(ResolutionFailure::WrongNamespace { res, expected_ns: TypeNS })\n+                    value_ns: candidate(ValueNS).and_then(|v_res| {\n+                        for (res, _) in v_res.iter() {\n+                            match res {\n+                                // Constructors are picked up in the type namespace.\n+                                Res::Def(DefKind::Ctor(..), _) => {\n+                                    return Err(ResolutionFailure::WrongNamespace {\n+                                        res: *res,\n+                                        expected_ns: TypeNS,\n+                                    });\n+                                }\n+                                _ => {}\n                             }\n-                            _ => Ok((res, def_id)),\n                         }\n+                        Ok(v_res)\n                     }),\n                 };\n \n-                let len = candidates.iter().filter(|res| res.is_ok()).count();\n+                let len = candidates\n+                    .iter()\n+                    .fold(0, |acc, res| if let Ok(res) = res { acc + res.len() } else { acc });\n \n                 if len == 0 {\n                     return resolution_failure(\n@@ -1260,22 +1336,21 @@ impl LinkCollector<'_, '_> {\n                         disambiguator,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n-                }\n-\n-                if len == 1 {\n-                    Some(candidates.into_iter().find_map(|res| res.ok()).unwrap())\n-                } else if len == 2 && is_derive_trait_collision(&candidates) {\n-                    Some(candidates.type_ns.unwrap())\n+                } else if len == 1 {\n+                    candidates.into_iter().filter_map(|res| res.ok()).flatten().collect::<Vec<_>>()\n                 } else {\n-                    let ignore_macro = is_derive_trait_collision(&candidates);\n-                    // If we're reporting an ambiguity, don't mention the namespaces that failed\n-                    let mut candidates =\n-                        candidates.map(|candidate| candidate.ok().map(|(res, _)| res));\n-                    if ignore_macro {\n-                        candidates.macro_ns = None;\n+                    let has_derive_trait_collision = is_derive_trait_collision(&candidates);\n+                    if len == 2 && has_derive_trait_collision {\n+                        candidates.type_ns.unwrap()\n+                    } else {\n+                        // If we're reporting an ambiguity, don't mention the namespaces that failed\n+                        let mut candidates = candidates.map(|candidate| candidate.ok());\n+                        // If there a collision between a trait and a derive, we ignore the derive.\n+                        if has_derive_trait_collision {\n+                            candidates.macro_ns = None;\n+                        }\n+                        candidates.into_iter().filter_map(|res| res).flatten().collect::<Vec<_>>()\n                     }\n-                    ambiguity_error(self.cx, diag, path_str, candidates.present_items().collect());\n-                    None\n                 }\n             }\n         }\n@@ -1563,7 +1638,7 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n-) -> Option<(Res, Option<DefId>)> {\n+) -> Vec<(Res, Option<DefId>)> {\n     let tcx = collector.cx.tcx;\n     let mut recovered_res = None;\n     report_diagnostic(\n@@ -1622,11 +1697,13 @@ fn resolution_failure(\n                         };\n                         name = start;\n                         for ns in [TypeNS, ValueNS, MacroNS] {\n-                            if let Ok(res) = collector.resolve(start, ns, item_id, module_id) {\n-                                debug!(\"found partial_res={:?}\", res);\n-                                *partial_res = Some(full_res(collector.cx.tcx, res));\n-                                *unresolved = end.into();\n-                                break 'outer;\n+                            if let Ok(v_res) = collector.resolve(start, ns, item_id, module_id) {\n+                                debug!(\"found partial_res={:?}\", v_res);\n+                                if !v_res.is_empty() {\n+                                    *partial_res = Some(full_res(collector.cx.tcx, v_res[0]));\n+                                    *unresolved = end.into();\n+                                    break 'outer;\n+                                }\n                             }\n                         }\n                         *unresolved = end.into();\n@@ -1774,7 +1851,10 @@ fn resolution_failure(\n         },\n     );\n \n-    recovered_res\n+    match recovered_res {\n+        Some(r) => vec![r],\n+        None => Vec::new(),\n+    }\n }\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {\n@@ -1859,28 +1939,47 @@ fn report_malformed_generics(\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions.\n+///\n+/// If all `candidates` have the same kind, it's not possible to disambiguate so in this case,\n+/// the function won't emit an error and will return `false`. Otherwise, it'll emit the error and\n+/// return `true`.\n fn ambiguity_error(\n     cx: &DocContext<'_>,\n-    diag_info: DiagnosticInfo<'_>,\n+    diag_info: &DiagnosticInfo<'_>,\n     path_str: &str,\n-    candidates: Vec<Res>,\n-) {\n-    let mut msg = format!(\"`{}` is \", path_str);\n+    candidates: &[(Res, Option<DefId>)],\n+) -> bool {\n+    let mut descrs = FxHashSet::default();\n+    let kinds = candidates\n+        .iter()\n+        .map(\n+            |(res, def_id)| {\n+                if let Some(def_id) = def_id { Res::from_def_id(cx.tcx, *def_id) } else { *res }\n+            },\n+        )\n+        .filter(|res| descrs.insert(res.descr()))\n+        .collect::<Vec<_>>();\n+    if descrs.len() == 1 {\n+        // There is no way for users to disambiguate at this point, so better return the first\n+        // candidate and not show a warning.\n+        return false;\n+    }\n \n-    match candidates.as_slice() {\n-        [first_def, second_def] => {\n+    let mut msg = format!(\"`{}` is \", path_str);\n+    match kinds.as_slice() {\n+        [res1, res2] => {\n             msg += &format!(\n                 \"both {} {} and {} {}\",\n-                first_def.article(),\n-                first_def.descr(),\n-                second_def.article(),\n-                second_def.descr(),\n+                res1.article(),\n+                res1.descr(),\n+                res2.article(),\n+                res2.descr()\n             );\n         }\n         _ => {\n-            let mut candidates = candidates.iter().peekable();\n-            while let Some(res) = candidates.next() {\n-                if candidates.peek().is_some() {\n+            let mut kinds = kinds.iter().peekable();\n+            while let Some(res) = kinds.next() {\n+                if kinds.peek().is_some() {\n                     msg += &format!(\"{} {}, \", res.article(), res.descr());\n                 } else {\n                     msg += &format!(\"and {} {}\", res.article(), res.descr());\n@@ -1889,17 +1988,18 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n             diag.note(\"ambiguous link\");\n         }\n \n-        for res in candidates {\n+        for res in kinds {\n             suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n+    true\n }\n \n /// In case of an ambiguity or mismatched disambiguator, suggest the correct"}, {"sha": "279048e37c1f3ae733bcbdadfbfea734cba98b29", "filename": "tests/rustdoc-gui/go-to-collapsed-elem.goml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fgo-to-collapsed-elem.goml?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,21 @@\n+// This test ensures that when clicking on a link which leads to an item inside a collapsed element,\n+// the collapsed element will be expanded.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n+// We check that the implementors block is expanded.\n+assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n+// We now collapse the implementors block.\n+property: (\"#implementations-list .implementors-toggle\", {\"open\": \"false\"})\n+// And now we click on the link to the method to ensure it'll expand the implementors block.\n+click: \"//*[@class='sidebar']//a[@href='#method.must_use']\"\n+assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})\n+\n+// Now we do the same through search result.\n+// First we reload the page without the anchor in the URL.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n+// Then we collapse the section again...\n+property: (\"#implementations-list .implementors-toggle\", {\"open\": \"false\"})\n+// Then we run the search.\n+write: (\".search-input\", \"foo::must_use\")\n+wait-for: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n+click: \"//*[@id='search']//a[@href='../test_docs/struct.Foo.html#method.must_use']\"\n+assert-property: (\"#implementations-list .implementors-toggle\", {\"open\": \"true\"})"}, {"sha": "8383dcc0482ea32ae018dbbdd3d182c863d057ed", "filename": "tests/rustdoc-json/impls/local_for_local_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,5 +1,5 @@\n #![feature(no_core)]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![no_core]\n \n // @set Local = \"$.index[*][?(@.name=='Local')].id\"\n@@ -16,6 +16,6 @@ impl Local for bool {}\n \n // FIXME(#101695): Test bool's `impls` include \"Local for bool\"\n // @has \"$.index[*][?(@.name=='bool')]\"\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n /// Boolean docs\n mod prim_bool {}"}, {"sha": "0cf479faf294c8c600d4af3a2126fce403d949d7", "filename": "tests/rustdoc-json/primitives/local_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -8,7 +8,7 @@\n \n //! Link to [i32][prim@i32] [i64][prim@i64]\n \n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n mod prim_i32 {}\n \n // @set local_i32 = \"$.index[*][?(@.name=='i32')].id\""}, {"sha": "85d179ee45f367ed36a531718ecc449bdc802a07", "filename": "tests/rustdoc-json/primitives/primitive_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -25,7 +25,7 @@ pub trait Trait {}\n impl Trait for i32 {}\n \n /// i32\n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n mod prim_i32 {}\n \n // @set i32 = \"$.index[*][?(@.docs=='i32')].id\""}, {"sha": "81e0acdc6e93e8eeb22ae948360ee22e986c2f53", "filename": "tests/rustdoc-json/primitives/primitive_overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -2,15 +2,15 @@\n \n // Regression test for <https://github.com/rust-lang/rust/issues/98006>.\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![feature(no_core)]\n \n #![no_core]\n \n // @has \"$.index[*][?(@.name=='usize')]\"\n // @has \"$.index[*][?(@.name=='prim')]\"\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This is the built-in type `usize`.\n mod prim {\n }"}, {"sha": "5180a804f07ba093ddeab976e86748189f3ea264", "filename": "tests/rustdoc-json/primitives/use_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,8 +1,8 @@\n // edition:2018\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n mod usize {}\n \n // @set local_crate_id = \"$.index[*][?(@.name=='use_primitive')].crate_id\""}, {"sha": "f45405fbf5dc8d49cd77a67bf1e31cfc77ac4cf0", "filename": "tests/rustdoc-ui/coverage/exotic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -2,12 +2,13 @@\n // check-pass\n \n #![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n //! the features only used in std also have entries in the table, so make sure those get pulled out\n //! properly as well\n \n /// woo, check it out, we can write our own primitive docs lol\n-#[doc(primitive=\"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n mod prim_unit {}\n \n /// keywords? sure, pile them on"}, {"sha": "0290b8582042c0628ce3b2d545b18e405439e374", "filename": "tests/rustdoc-ui/intra-doc/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -35,6 +35,6 @@ pub mod foo {\n /// Ambiguous non-implied shortcut link [`foo::bar`]. //~ERROR `foo::bar`\n pub struct Docs {}\n \n-/// [true] //~ ERROR `true` is both a module and a builtin type\n+/// [true] //~ ERROR `true` is both a module and a primitive type\n /// [primitive@true]\n pub mod r#true {}"}, {"sha": "47853e0b5899d10c3ae3792adac6af311a3b8d33", "filename": "tests/rustdoc-ui/intra-doc/ambiguity.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,4 +1,4 @@\n-error: `true` is both a module and a builtin type\n+error: `true` is both a module and a primitive type\n   --> $DIR/ambiguity.rs:38:6\n    |\n LL | /// [true]\n@@ -13,89 +13,89 @@ help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@true]\n    |      ++++\n-help: to link to the builtin type, prefix with `prim@`\n+help: to link to the primitive type, prefix with `prim@`\n    |\n LL | /// [prim@true]\n    |      +++++\n \n-error: `ambiguous` is both a struct and a function\n+error: `ambiguous` is both a function and a struct\n   --> $DIR/ambiguity.rs:27:7\n    |\n LL | /// [`ambiguous`] is ambiguous.\n    |       ^^^^^^^^^ ambiguous link\n    |\n-help: to link to the struct, prefix with `struct@`\n-   |\n-LL | /// [`struct@ambiguous`] is ambiguous.\n-   |       +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [`ambiguous()`] is ambiguous.\n    |                ++\n+help: to link to the struct, prefix with `struct@`\n+   |\n+LL | /// [`struct@ambiguous`] is ambiguous.\n+   |       +++++++\n \n-error: `ambiguous` is both a struct and a function\n+error: `ambiguous` is both a function and a struct\n   --> $DIR/ambiguity.rs:29:6\n    |\n LL | /// [ambiguous] is ambiguous.\n    |      ^^^^^^^^^ ambiguous link\n    |\n-help: to link to the struct, prefix with `struct@`\n-   |\n-LL | /// [struct@ambiguous] is ambiguous.\n-   |      +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [ambiguous()] is ambiguous.\n    |               ++\n+help: to link to the struct, prefix with `struct@`\n+   |\n+LL | /// [struct@ambiguous] is ambiguous.\n+   |      +++++++\n \n-error: `multi_conflict` is a struct, a function, and a macro\n+error: `multi_conflict` is a function, a struct, and a macro\n   --> $DIR/ambiguity.rs:31:7\n    |\n LL | /// [`multi_conflict`] is a three-way conflict.\n    |       ^^^^^^^^^^^^^^ ambiguous link\n    |\n-help: to link to the struct, prefix with `struct@`\n-   |\n-LL | /// [`struct@multi_conflict`] is a three-way conflict.\n-   |       +++++++\n help: to link to the function, add parentheses\n    |\n LL | /// [`multi_conflict()`] is a three-way conflict.\n    |                     ++\n+help: to link to the struct, prefix with `struct@`\n+   |\n+LL | /// [`struct@multi_conflict`] is a three-way conflict.\n+   |       +++++++\n help: to link to the macro, add an exclamation mark\n    |\n LL | /// [`multi_conflict!`] is a three-way conflict.\n    |                     +\n \n-error: `type_and_value` is both a module and a constant\n+error: `type_and_value` is both a constant and a module\n   --> $DIR/ambiguity.rs:33:16\n    |\n LL | /// Ambiguous [type_and_value].\n    |                ^^^^^^^^^^^^^^ ambiguous link\n    |\n-help: to link to the module, prefix with `mod@`\n-   |\n-LL | /// Ambiguous [mod@type_and_value].\n-   |                ++++\n help: to link to the constant, prefix with `const@`\n    |\n LL | /// Ambiguous [const@type_and_value].\n    |                ++++++\n+help: to link to the module, prefix with `mod@`\n+   |\n+LL | /// Ambiguous [mod@type_and_value].\n+   |                ++++\n \n-error: `foo::bar` is both an enum and a function\n+error: `foo::bar` is both a function and an enum\n   --> $DIR/ambiguity.rs:35:43\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n    |                                           ^^^^^^^^ ambiguous link\n    |\n-help: to link to the enum, prefix with `enum@`\n-   |\n-LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`].\n-   |                                           +++++\n help: to link to the function, add parentheses\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar()`].\n    |                                                   ++\n+help: to link to the enum, prefix with `enum@`\n+   |\n+LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`].\n+   |                                           +++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f37f49c24ccc5c70619ef06eaf41fbe355520a0e", "filename": "tests/rustdoc-ui/intra-doc/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -54,11 +54,11 @@\n \n /// [u8::not_found]\n //~^ ERROR unresolved link\n-//~| NOTE the builtin type `u8` has no associated item named `not_found`\n+//~| NOTE the primitive type `u8` has no associated item named `not_found`\n \n /// [std::primitive::u8::not_found]\n //~^ ERROR unresolved link\n-//~| NOTE the builtin type `u8` has no associated item named `not_found`\n+//~| NOTE the primitive type `u8` has no associated item named `not_found`\n \n /// [type@Vec::into_iter]\n //~^ ERROR unresolved link"}, {"sha": "a982bba0095915134c46ea5b2601e09adc28cf42", "filename": "tests/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -80,13 +80,13 @@ error: unresolved link to `u8::not_found`\n   --> $DIR/errors.rs:55:6\n    |\n LL | /// [u8::not_found]\n-   |      ^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n+   |      ^^^^^^^^^^^^^ the primitive type `u8` has no associated item named `not_found`\n \n error: unresolved link to `std::primitive::u8::not_found`\n   --> $DIR/errors.rs:59:6\n    |\n LL | /// [std::primitive::u8::not_found]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the primitive type `u8` has no associated item named `not_found`\n \n error: unresolved link to `Vec::into_iter`\n   --> $DIR/errors.rs:63:6"}, {"sha": "464c5f0d5439c4ee60f51f309021aedf9165a2c7", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-10.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-10.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+// This test ensures that this warning doesn't show up:\n+// warning: `PartialEq` is both a trait and a derive macro\n+//  --> tests/rustdoc-ui/intra-doc/issue-108653-associated-items-10.rs:1:7\n+//   |\n+// 1 | //! [`PartialEq`]\n+//   |       ^^^^^^^^^ ambiguous link\n+//   |\n+//   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n+// help: to link to the trait, prefix with `trait@`\n+//   |\n+// 1 | //! [`trait@PartialEq`]\n+//   |       ++++++\n+// help: to link to the derive macro, prefix with `derive@`\n+//   |\n+// 1 | //! [`derive@PartialEq`]\n+//   |       +++++++\n+\n+// check-pass\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+//! [`PartialEq`]"}, {"sha": "cbe60f746b682a42febea1f0ea41e22bb1673250", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,17 @@\n+// This is ensuring that the UI output for associated items is as expected.\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+/// [`Trait::IDENT`]\n+//~^ ERROR both an associated constant and an associated type\n+pub trait Trait {\n+    type IDENT;\n+    const IDENT: usize;\n+}\n+\n+/// [`Trait2::IDENT`]\n+//~^ ERROR both an associated function and an associated type\n+pub trait Trait2 {\n+    type IDENT;\n+    fn IDENT() {}\n+}"}, {"sha": "952392548da8a34a6de94a6696b92d1045a50da6", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-2.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-2.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,37 @@\n+error: `Trait::IDENT` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items-2.rs:5:7\n+   |\n+LL | /// [`Trait::IDENT`]\n+   |       ^^^^^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-2.rs:3:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Trait::IDENT`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Trait::IDENT`]\n+   |       +++++\n+\n+error: `Trait2::IDENT` is both an associated function and an associated type\n+  --> $DIR/issue-108653-associated-items-2.rs:12:7\n+   |\n+LL | /// [`Trait2::IDENT`]\n+   |       ^^^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [`Trait2::IDENT()`]\n+   |                    ++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Trait2::IDENT`]\n+   |       +++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7ffd0a40e7cfe15d5d452b97822cacf8fd4f0a65", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,16 @@\n+// This is ensuring that the UI output for associated items works when it's being documented\n+// from another item.\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+pub trait Trait {\n+    type Trait;\n+    const Trait: usize;\n+}\n+\n+/// [`Trait`]\n+//~^ ERROR both a constant and a trait\n+/// [`Trait::Trait`]\n+//~^ ERROR both an associated constant and an associated type\n+pub const Trait: usize = 0;"}, {"sha": "6401dacb57a8e02d9f0564896fdbc15c7adeaac7", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-3.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-3.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,37 @@\n+error: `Trait` is both a constant and a trait\n+  --> $DIR/issue-108653-associated-items-3.rs:12:7\n+   |\n+LL | /// [`Trait`]\n+   |       ^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-3.rs:4:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the constant, prefix with `const@`\n+   |\n+LL | /// [`const@Trait`]\n+   |       ++++++\n+help: to link to the trait, prefix with `trait@`\n+   |\n+LL | /// [`trait@Trait`]\n+   |       ++++++\n+\n+error: `Trait::Trait` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items-3.rs:14:7\n+   |\n+LL | /// [`Trait::Trait`]\n+   |       ^^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Trait::Trait`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Trait::Trait`]\n+   |       +++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "537d61364bb1a19b1b7ce828fc661b2d3c4f6f89", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-4.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,21 @@\n+// This is ensuring that the UI output for associated items works when it's being documented\n+// from another item.\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+pub trait Trait {\n+    type Trait;\n+}\n+\n+/// [`Struct::Trait`]\n+//~^ ERROR both an associated constant and an associated type\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    type Trait = Struct;\n+}\n+\n+impl Struct {\n+    pub const Trait: usize = 0;\n+}"}, {"sha": "a8dc91204c0836887959ec0d487d03cfce4ca226", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-4.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-4.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+error: `Struct::Trait` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items-4.rs:11:7\n+   |\n+LL | /// [`Struct::Trait`]\n+   |       ^^^^^^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-4.rs:4:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Struct::Trait`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Struct::Trait`]\n+   |       +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "bc28bc5442181c0a47a386aca23304b2e6e82df4", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-5.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,8 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+/// [`u32::MAX`]\n+//~^ ERROR both an associated constant and a trait\n+pub mod u32 {\n+    pub trait MAX {}\n+}"}, {"sha": "7430044ac3f1bc698364f7731774c343a313ab15", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-5.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-5.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+error: `u32::MAX` is both an associated constant and a trait\n+  --> $DIR/issue-108653-associated-items-5.rs:4:7\n+   |\n+LL | /// [`u32::MAX`]\n+   |       ^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-5.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@u32::MAX`]\n+   |       ++++++\n+help: to link to the trait, prefix with `trait@`\n+   |\n+LL | /// [`trait@u32::MAX`]\n+   |       ++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "8fde74d0ddb47ea326251c30ec50b2d6e6f5c69e", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-6.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,8 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+/// [`u32::MAX`]\n+//~^ ERROR both an associated constant and a primitive type\n+pub mod u32 {\n+    pub use std::primitive::u32 as MAX;\n+}"}, {"sha": "fe2d8cafa30262b04cb6d29337be3404c1bd9b04", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-6.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-6.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+error: `u32::MAX` is both an associated constant and a primitive type\n+  --> $DIR/issue-108653-associated-items-6.rs:4:7\n+   |\n+LL | /// [`u32::MAX`]\n+   |       ^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-6.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@u32::MAX`]\n+   |       ++++++\n+help: to link to the primitive type, prefix with `prim@`\n+   |\n+LL | /// [`prim@u32::MAX`]\n+   |       +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "6e99f4365a78d0dcc580d1f8a09da3042b7b87c5", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-7.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,12 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+pub trait Trait {\n+    type MAX;\n+}\n+\n+/// [`u32::MAX`]\n+//~^ ERROR both an associated constant and an associated type\n+impl Trait for u32 {\n+    type MAX = u32;\n+}"}, {"sha": "1d302ff42e86f1b89e5f5adffc7160ce25f8e9e7", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-7.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-7.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+error: `u32::MAX` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items-7.rs:8:7\n+   |\n+LL | /// [`u32::MAX`]\n+   |       ^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-7.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@u32::MAX`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@u32::MAX`]\n+   |       +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "2f8ee1566bd4e76cf3dc2c21f87b8fbd08b752f6", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,12 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(nonstandard_style)]\n+\n+/// [`u32::MAX`]\n+//~^ ERROR both an associated constant and an associated type\n+pub trait T {\n+    type MAX;\n+}\n+\n+impl T for u32 {\n+    type MAX = ();\n+}"}, {"sha": "efed0e2ce0ff54fdda62860991725ef899582bee", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-8.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-8.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,22 @@\n+error: `u32::MAX` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items-8.rs:4:7\n+   |\n+LL | /// [`u32::MAX`]\n+   |       ^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items-8.rs:1:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@u32::MAX`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@u32::MAX`]\n+   |       +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "3357ccf2460d819a21344a491b253e55efa25d44", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items-9.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items-9.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![deny(warnings)]\n+\n+//! [usize::Item]\n+\n+pub trait Foo { type Item; }\n+pub trait Bar { type Item; }\n+\n+impl Foo for usize { type Item = u32; }\n+impl Bar for usize { type Item = i32; }"}, {"sha": "0a393e26d6a96ee2f3007593f9fbeb8dcde3a95a", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,35 @@\n+// This is ensuring that the UI output for associated items is as expected.\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub enum Enum {\n+    IDENT,\n+}\n+\n+/// [`Self::IDENT`]\n+//~^ ERROR both an associated function and an associated type\n+pub trait Trait {\n+    type IDENT;\n+    fn IDENT();\n+}\n+\n+/// [`Self::IDENT`]\n+//~^ ERROR both an associated function and a variant\n+impl Trait for Enum {\n+    type IDENT = usize;\n+    fn IDENT() {}\n+}\n+\n+/// [`Self::IDENT2`]\n+//~^ ERROR both an associated constant and an associated type\n+pub trait Trait2 {\n+    type IDENT2;\n+    const IDENT2: usize;\n+}\n+\n+/// [`Self::IDENT2`]\n+//~^ ERROR both an associated constant and an associated type\n+impl Trait2 for Enum {\n+    type IDENT2 = usize;\n+    const IDENT2: usize = 0;\n+}"}, {"sha": "084aefc97c8348f72f4f91e616fd4f26669330fb", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,67 @@\n+error: `Self::IDENT` is both an associated function and an associated type\n+  --> $DIR/issue-108653-associated-items.rs:9:7\n+   |\n+LL | /// [`Self::IDENT`]\n+   |       ^^^^^^^^^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-108653-associated-items.rs:3:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [`Self::IDENT()`]\n+   |                  ++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Self::IDENT`]\n+   |       +++++\n+\n+error: `Self::IDENT2` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items.rs:23:7\n+   |\n+LL | /// [`Self::IDENT2`]\n+   |       ^^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Self::IDENT2`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Self::IDENT2`]\n+   |       +++++\n+\n+error: `Self::IDENT2` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items.rs:30:7\n+   |\n+LL | /// [`Self::IDENT2`]\n+   |       ^^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Self::IDENT2`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Self::IDENT2`]\n+   |       +++++\n+\n+error: `Self::IDENT` is both an associated function and a variant\n+  --> $DIR/issue-108653-associated-items.rs:16:7\n+   |\n+LL | /// [`Self::IDENT`]\n+   |       ^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [`Self::IDENT()`]\n+   |                  ++\n+help: to link to the variant, prefix with `type@`\n+   |\n+LL | /// [`type@Self::IDENT`]\n+   |       +++++\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "6e08a923963c4e1cb70988d420c41b8ab140231f", "filename": "tests/rustdoc-ui/intra-doc/non-path-primitives.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -39,25 +39,25 @@ error: unresolved link to `unit::eq`\n   --> $DIR/non-path-primitives.rs:28:6\n    |\n LL | //! [unit::eq]\n-   |      ^^^^^^^^ the builtin type `unit` has no associated item named `eq`\n+   |      ^^^^^^^^ the primitive type `unit` has no associated item named `eq`\n \n error: unresolved link to `tuple::eq`\n   --> $DIR/non-path-primitives.rs:29:6\n    |\n LL | //! [tuple::eq]\n-   |      ^^^^^^^^^ the builtin type `tuple` has no associated item named `eq`\n+   |      ^^^^^^^^^ the primitive type `tuple` has no associated item named `eq`\n \n error: unresolved link to `fn::eq`\n   --> $DIR/non-path-primitives.rs:30:6\n    |\n LL | //! [fn::eq]\n-   |      ^^^^^^ the builtin type `fn` has no associated item named `eq`\n+   |      ^^^^^^ the primitive type `fn` has no associated item named `eq`\n \n error: unresolved link to `reference::deref`\n   --> $DIR/non-path-primitives.rs:34:6\n    |\n LL | //! [reference::deref]\n-   |      ^^^^^^^^^^^^^^^^ the builtin type `reference` has no associated item named `deref`\n+   |      ^^^^^^^^^^^^^^^^ the primitive type `reference` has no associated item named `deref`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e87ce095cd4341c949adabe86f111f94ce5dc398", "filename": "tests/rustdoc-ui/intra-doc/prim-conflict.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -2,16 +2,16 @@\n //~^ NOTE lint level is defined\n \n /// [char]\n-//~^ ERROR both a module and a builtin type\n+//~^ ERROR both a module and a primitive type\n //~| NOTE ambiguous link\n //~| HELP to link to the module\n-//~| HELP to link to the builtin type\n+//~| HELP to link to the primitive type\n \n /// [type@char]\n-//~^ ERROR both a module and a builtin type\n+//~^ ERROR both a module and a primitive type\n //~| NOTE ambiguous link\n //~| HELP to link to the module\n-//~| HELP to link to the builtin type\n+//~| HELP to link to the primitive type\n \n /// [mod@char] // ok\n /// [prim@char] // ok\n@@ -26,5 +26,5 @@ pub mod inner {\n     //! [struct@char]\n     //~^ ERROR incompatible link\n     //~| HELP prefix with `prim@`\n-    //~| NOTE resolved to a builtin type\n+    //~| NOTE resolved to a primitive type\n }"}, {"sha": "03ce8f15f0a5e8699b5d231f0596b4ea00554c2a", "filename": "tests/rustdoc-ui/intra-doc/prim-conflict.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,4 +1,4 @@\n-error: `char` is both a module and a builtin type\n+error: `char` is both a module and a primitive type\n   --> $DIR/prim-conflict.rs:4:6\n    |\n LL | /// [char]\n@@ -13,12 +13,12 @@ help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n    |      ++++\n-help: to link to the builtin type, prefix with `prim@`\n+help: to link to the primitive type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n    |      +++++\n \n-error: `char` is both a module and a builtin type\n+error: `char` is both a module and a primitive type\n   --> $DIR/prim-conflict.rs:10:6\n    |\n LL | /// [type@char]\n@@ -28,7 +28,7 @@ help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n    |      ~~~~\n-help: to link to the builtin type, prefix with `prim@`\n+help: to link to the primitive type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n    |      ~~~~~\n@@ -48,9 +48,9 @@ error: incompatible link kind for `char`\n   --> $DIR/prim-conflict.rs:26:10\n    |\n LL |     //! [struct@char]\n-   |          ^^^^^^^^^^^ this link resolved to a builtin type, which is not a struct\n+   |          ^^^^^^^^^^^ this link resolved to a primitive type, which is not a struct\n    |\n-help: to link to the builtin type, prefix with `prim@`\n+help: to link to the primitive type, prefix with `prim@`\n    |\n LL |     //! [prim@char]\n    |          ~~~~~"}, {"sha": "a6db93dbc33cdcc9133b8f9ffe85c5ad13188b90", "filename": "tests/rustdoc/auto-impl-primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauto-impl-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauto-impl-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauto-impl-primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,10 +1,10 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n #![crate_name = \"foo\"]\n \n pub use std::fs::File;\n \n // @has 'foo/primitive.i16.html' '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementation'\n-#[doc(primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n /// I love poneys!\n mod prim {}"}, {"sha": "a2f426c6352e988718b869ca57eb70c5a1782f48", "filename": "tests/rustdoc/auxiliary/issue-15318.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Cmetadata=aux\n #![crate_type = \"rlib\"]\n #![doc(html_root_url = \"http://example.com/\")]\n+#![feature(rustc_attrs)]\n #![feature(lang_items)]\n #![no_std]\n \n@@ -12,5 +13,5 @@ fn foo() {}\n fn bar(_: &core::panic::PanicInfo) -> ! { loop {} }\n \n /// dox\n-#[doc(primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n pub mod ptr {}"}, {"sha": "d1785e4239119e3f11222a1119c330c2900b3c29", "filename": "tests/rustdoc/auxiliary/primitive-doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,9 +1,10 @@\n // compile-flags: --crate-type lib --edition 2018\n \n+#![feature(rustc_attrs)]\n #![feature(no_core)]\n #![no_core]\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This is the built-in type `usize`.\n mod usize {\n }"}, {"sha": "41b9d41fa4410e514e7eb23f203c19c8bb660da0", "filename": "tests/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -2,7 +2,7 @@\n // aux-build:source_code.rs\n // build-aux-docs\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n #![crate_name = \"foo\"]\n \n@@ -65,5 +65,5 @@ pub fn foo4() {\n }\n \n // @has - '//pre[@class=\"rust\"]//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n mod whatever {}"}, {"sha": "c050929db9682cb66502e0c11b924cbad44af617", "filename": "tests/rustdoc/intra-doc/auxiliary/my-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -3,7 +3,7 @@\n #![rustc_coherence_is_core]\n #![crate_type=\"rlib\"]\n \n-#[doc(primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n /// Some char docs\n mod char {}\n "}, {"sha": "711ac09ba9a03db250c74a30fe742a3360b2a5be", "filename": "tests/rustdoc/intra-doc/no-doc-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,4 +1,4 @@\n-// Crate tree without a `doc(primitive)` module for primitive type linked to by a doc link.\n+// Crate tree without a `rustc_doc_primitive` module for primitive type linked to by a doc link.\n \n #![deny(rustdoc::broken_intra_doc_links)]\n #![feature(no_core, lang_items, rustc_attrs)]"}, {"sha": "6de4ec1802fd1348254ceedbfc6387705a8812b3", "filename": "tests/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -10,7 +10,7 @@\n \n //! A [prim@`char`] and its [`char::len_utf8`].\n \n-#[doc(primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n mod char {}\n \n impl char {"}, {"sha": "d13858a53cff71fbc5a67ce45b1d611840f8e157", "filename": "tests/rustdoc/intra-doc/prim-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -25,7 +25,7 @@ impl usize {\n     pub type ME = usize;\n }\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This has some docs.\n mod usize {}\n "}, {"sha": "2dab8f9488391f286116c2576dac28b1b76e7896", "filename": "tests/rustdoc/issue-15318-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fissue-15318-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fissue-15318-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-15318-3.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,7 +1,7 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has issue_15318_3/primitive.pointer.html\n \n /// dox\n-#[doc(primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n pub mod ptr {}"}, {"sha": "21d02842431d0d02b98952b99cff374689d3d165", "filename": "tests/rustdoc/issue-23511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-23511.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -3,7 +3,7 @@\n #![no_std]\n \n pub mod str {\n-    #![doc(primitive = \"str\")]\n+    #![rustc_doc_primitive = \"str\"]\n \n     impl str {\n         // @hasraw search-index.js foo"}, {"sha": "5af5f7616b57e867480bf986f19cc1adc1f9a971", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_an_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -6,10 +6,10 @@\n //!\n //! [#80737]: https://github.com/rust-lang/rust/issues/80737\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![no_std]\n \n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// Some useless docs, wouhou!\n ///\n /// We need to put this in here, because notable traits"}, {"sha": "6c980aaa2b135ee97eb9c92c09de1561d3b44e26", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_ref_t.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -5,9 +5,9 @@\n //!\n //! [#78160]: https://github.com/rust-lang/rust/issues/78160\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// Some useless docs, wouhou!\n ///\n /// We need to put this in here, because notable traits"}, {"sha": "6f034224df55294bb880ffe3a282f58f719a7db6", "filename": "tests/rustdoc/primitive-reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-reference.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/index.html\n // @has - '//h2[@id=\"primitives\"]' 'Primitive Types'\n@@ -16,7 +16,7 @@\n // @count - '//*[@class=\"impl\"]' 1\n // @has - '//*[@id=\"impl-Foo%3C%26A%3E-for-%26B\"]/*[@class=\"code-header\"]' \\\n //        'impl<A, B> Foo<&A> for &B'\n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// this is a test!\n mod reference {}\n "}, {"sha": "ba15a73ca1d1943295ebca4ee1f3103d095488a9", "filename": "tests/rustdoc/primitive-slice-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.slice.html '//a[@class=\"primitive\"]' 'slice'\n // @has - '//h1' 'Primitive Type slice'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T]where T: Send'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T]where T: Sync'\n-#[doc(primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n /// this is a test!\n mod slice_prim {}"}, {"sha": "2b407b586a3d4942b560c20ac8060abf7196a88d", "filename": "tests/rustdoc/primitive-tuple-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,15 +1,15 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.tuple.html '//a[@class=\"primitive\"]' 'tuple'\n // @has - '//h1' 'Primitive Type tuple'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'Send'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'Sync'\n-#[doc(primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n /// this is a test!\n ///\n // Hardcoded anchor to header written in library/core/src/primitive_docs.rs"}, {"sha": "5a56f1fd83bd4bcc16ec0ab84ef8a8accbf57702", "filename": "tests/rustdoc/primitive-unit-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.unit.html '//a[@class=\"primitive\"]' 'unit'\n // @has - '//h1' 'Primitive Type unit'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl Send for ()'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl Sync for ()'\n-#[doc(primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n /// this is a test!\n mod unit_prim {}"}, {"sha": "2da8ae6ff38da6c78e70a4ba1a59449d633a5218", "filename": "tests/rustdoc/primitive/primitive-generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,8 +1,8 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![crate_name = \"foo\"]\n \n // @has foo/primitive.i32.html '//*[@id=\"impl-ToString-for-i32\"]//h3[@class=\"code-header\"]' 'impl<T> ToString for T'\n \n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n /// Some useless docs, wouhou!\n mod i32 {}"}, {"sha": "32af2636c18b0fc624cd12ebf8d8d37e355f2cc0", "filename": "tests/rustdoc/primitive/primitive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/index.html '//h2[@id=\"primitives\"]' 'Primitive Types'\n // @has foo/index.html '//a[@href=\"primitive.i32.html\"]' 'i32'\n@@ -11,11 +11,11 @@\n // @has foo/primitive.i32.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has foo/index.html '//a/@href' '../foo/index.html'\n // @!has foo/index.html '//span' '\ud83d\udd12'\n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n /// this is a test!\n mod i32{}\n \n // @has foo/primitive.bool.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'hello'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n /// hello\n mod bool {}"}, {"sha": "45a6ba8ed2e16b896a8bcf2c5401f7c54c1359e9", "filename": "tests/rustdoc/sidebar-all-page.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fsidebar-all-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Fsidebar-all-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsidebar-all-page.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has 'foo/all.html'\n // @has - '//*[@class=\"sidebar-elems\"]//li' 'Structs'\n@@ -31,5 +31,5 @@ macro_rules! foo {\n pub type Type = u8;\n pub const FOO: u8 = 0;\n pub static BAR: u8 = 0;\n-#[doc(primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n mod u8 {}"}, {"sha": "8d781b40e46d90b21f5beecb7f4c15d5b782217b", "filename": "tests/rustdoc/tab_title.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Ftab_title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Ftab_title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftab_title.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,4 +1,5 @@\n #![crate_name = \"foo\"]\n+#![feature(rustc_attrs)]\n #![feature(rustdoc_internals)]\n \n // tests for the html <title> element\n@@ -39,6 +40,6 @@ mod continue_keyword {}\n \n // @has foo/primitive.u8.html '//head/title' 'u8 - Rust'\n // @!has - '//head/title' 'foo'\n-#[doc(primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n /// `u8` docs\n mod u8 {}"}, {"sha": "e1feb1cd64fef2517719b1cef398c35c24dde49c", "filename": "tests/rustdoc/titles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Ftitles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Frustdoc%2Ftitles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftitles.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @matches 'foo/index.html' '//h1' 'Crate foo'\n // @matches 'foo/index.html' '//h2[@class=\"location\"]' 'Crate foo'\n@@ -41,7 +41,7 @@ macro_rules! foo_macro {\n }\n \n // @matches 'foo/primitive.bool.html' '//h1' 'Primitive Type bool'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n mod bool {}\n \n // @matches 'foo/static.FOO_STATIC.html' '//h1' 'Static foo::FOO_STATIC'"}, {"sha": "6ba13387b046096c114e8d0ea81af2f03a35296c", "filename": "tests/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"note.*\" -> \"note: os-specific message\"\n+// normalize-stderr-test \"could not open Fluent resource:.*\" -> \"could not open Fluent resource: os-specific message\"\n \n #![feature(rustc_private)]\n #![crate_type = \"lib\"]"}, {"sha": "2affe621c113adce68641172c125210f6c1556ad", "filename": "tests/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,18 +1,14 @@\n-error: could not open Fluent resource\n+error: could not open Fluent resource: os-specific message\n   --> $DIR/test.rs:24:24\n    |\n LL |     fluent_messages! { \"/definitely_does_not_exist.ftl\" }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: os-specific message\n \n-error: could not open Fluent resource\n+error: could not open Fluent resource: os-specific message\n   --> $DIR/test.rs:31:24\n    |\n LL |     fluent_messages! { \"../definitely_does_not_exist.ftl\" }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: os-specific message\n \n error: could not parse Fluent resource\n   --> $DIR/test.rs:38:24\n@@ -89,23 +85,23 @@ error: invalid escape `\\n` in Fluent resource\n LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: os-specific message\n+   = note: Fluent does not interpret these escape sequences (<https://projectfluent.org/fluent/guide/special.html>)\n \n error: invalid escape `\\\"` in Fluent resource\n   --> $DIR/test.rs:99:24\n    |\n LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: os-specific message\n+   = note: Fluent does not interpret these escape sequences (<https://projectfluent.org/fluent/guide/special.html>)\n \n error: invalid escape `\\'` in Fluent resource\n   --> $DIR/test.rs:99:24\n    |\n LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: os-specific message\n+   = note: Fluent does not interpret these escape sequences (<https://projectfluent.org/fluent/guide/special.html>)\n \n error: aborting due to 13 previous errors\n "}, {"sha": "5f244ea89365d4bac763af777c9a2c72ec07f136", "filename": "tests/ui/closures/2229_closure_analysis/array_subslice.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,13 @@\n+// regression test for #109298\n+// edition: 2021\n+\n+pub fn subslice_array(x: [u8; 3]) {\n+    let f = || {\n+        let [_x @ ..] = x;\n+        let [ref y, ref mut z @ ..] = x; //~ ERROR cannot borrow `x[..]` as mutable\n+    };\n+\n+    f(); //~ ERROR cannot borrow `f` as mutable\n+}\n+\n+fn main() {}"}, {"sha": "888c60d5e91fb4149fb909c4901b6af3b5496729", "filename": "tests/ui/closures/2229_closure_analysis/array_subslice.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Farray_subslice.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,26 @@\n+error[E0596]: cannot borrow `x[..]` as mutable, as `x` is not declared as mutable\n+  --> $DIR/array_subslice.rs:7:21\n+   |\n+LL | pub fn subslice_array(x: [u8; 3]) {\n+   |                       - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         let [ref y, ref mut z @ ..] = x;\n+   |                     ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n+  --> $DIR/array_subslice.rs:10:5\n+   |\n+LL |         let [ref y, ref mut z @ ..] = x;\n+   |                                       - calling `f` requires mutable binding due to mutable borrow of `x`\n+...\n+LL |     f();\n+   |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut f = || {\n+   |         +++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "4336961e3b5e091d070c0bcadded5a19ce473144", "filename": "tests/ui/rustdoc/doc-primitive.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,8 @@\n+#![deny(invalid_doc_attributes)]\n+\n+#[doc(primitive = \"foo\")]\n+//~^ ERROR unknown `doc` attribute `primitive`\n+//~| WARN\n+mod bar {}\n+\n+fn main() {}"}, {"sha": "d61eb381647959c09fc28192c3d8a6187c41b14b", "filename": "tests/ui/rustdoc/doc-primitive.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -0,0 +1,16 @@\n+error: unknown `doc` attribute `primitive`\n+  --> $DIR/doc-primitive.rs:3:7\n+   |\n+LL | #[doc(primitive = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+note: the lint level is defined here\n+  --> $DIR/doc-primitive.rs:1:9\n+   |\n+LL | #![deny(invalid_doc_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "78fcd90752e46d9cf494281321ecc94e94ba9c78", "filename": "tests/ui/rustdoc/feature-gate-doc_primitive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,7 +1,5 @@\n-// check-pass\n-#[doc(primitive = \"usize\")]\n-//~^ WARNING `doc(primitive)` should never have been stable\n-//~| WARNING hard error in a future release\n+#[rustc_doc_primitive = \"usize\"]\n+//~^ ERROR `rustc_doc_primitive` is a rustc internal attribute\n /// Some docs\n mod usize {}\n "}, {"sha": "5920880675d7ef2e514a6c4555137229141984cd", "filename": "tests/ui/rustdoc/feature-gate-doc_primitive.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d3299a290026b85787bc9c7e72bcc53ac283f/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr?ref=5e1d3299a290026b85787bc9c7e72bcc53ac283f", "patch": "@@ -1,12 +1,11 @@\n-warning: `doc(primitive)` should never have been stable\n-  --> $DIR/feature-gate-doc_primitive.rs:2:7\n+error[E0658]: `rustc_doc_primitive` is a rustc internal attribute\n+  --> $DIR/feature-gate-doc_primitive.rs:1:1\n    |\n-LL | #[doc(primitive = \"usize\")]\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_doc_primitive = \"usize\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: `#[warn(invalid_doc_attributes)]` on by default\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}]}