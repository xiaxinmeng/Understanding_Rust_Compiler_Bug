{"sha": "57eba4f535d30e9b7765cadfefc5ec66e54b0982", "node_id": "C_kwDOAAsO6NoAKDU3ZWJhNGY1MzVkMzBlOWI3NzY1Y2FkZmVmYzVlYzY2ZTU0YjA5ODI", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-05T22:28:32Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:28Z"}, "message": "avoid string dispatch in fluent", "tree": {"sha": "1f6ddeab4e6a1ef702114ca7e307104de800ffe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6ddeab4e6a1ef702114ca7e307104de800ffe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57eba4f535d30e9b7765cadfefc5ec66e54b0982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57eba4f535d30e9b7765cadfefc5ec66e54b0982", "html_url": "https://github.com/rust-lang/rust/commit/57eba4f535d30e9b7765cadfefc5ec66e54b0982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57eba4f535d30e9b7765cadfefc5ec66e54b0982/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "8e07a85ad7e998ef8c682abbd366cef981b7d168", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e07a85ad7e998ef8c682abbd366cef981b7d168", "html_url": "https://github.com/rust-lang/rust/commit/8e07a85ad7e998ef8c682abbd366cef981b7d168"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "68f4097bbb52aadc2bfcb67fa51f930c04c272dd", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=57eba4f535d30e9b7765cadfefc5ec66e54b0982", "patch": "@@ -533,11 +533,27 @@ passes_no_main_function =\n     .non_function_main = non-function item at `crate::main` is found\n \n passes_duplicate_lang_item =\n-    {$message ->\n-        *[duplicate] found duplicate lang item `{$lang_item_name}`\n-        [duplicate_in_crate] duplicate lang item in crate `{$crate_name}`: `{$lang_item_name}`.\n-        [duplicate_in_crate_depends] duplicate lang item in crate `{$crate_name}` (which `{$dependency_of}` depends on): `{$lang_item_name}`.\n-    }\n+    found duplicate lang item `{$lang_item_name}`\n+    .first_defined_span = the lang item is first defined here\n+    .first_defined_crate_depends = the lang item is first defined in crate `{$orig_crate_name}` (which `{$orig_dependency_of}` depends on)\n+    .first_defined_crate = the lang item is first defined in crate `{$orig_crate_name}`.\n+    .first_definition_local = first definition in the local crate (`{$orig_crate_name}`)\n+    .second_definition_local = second definition in the local crate (`{$crate_name}`)\n+    .first_definition_path = first definition in `{$orig_crate_name}` loaded from {$orig_path}\n+    .second_definition_path = second definition in `{$crate_name}` loaded from {$path}\n+\n+passes_duplicate_lang_item_crate =\n+    duplicate lang item in crate `{$crate_name}`: `{$lang_item_name}`.\n+    .first_defined_span = the lang item is first defined here\n+    .first_defined_crate_depends = the lang item is first defined in crate `{$orig_crate_name}` (which `{$orig_dependency_of}` depends on)\n+    .first_defined_crate = the lang item is first defined in crate `{$orig_crate_name}`.\n+    .first_definition_local = first definition in the local crate (`{$orig_crate_name}`)\n+    .second_definition_local = second definition in the local crate (`{$crate_name}`)\n+    .first_definition_path = first definition in `{$orig_crate_name}` loaded from {$orig_path}\n+    .second_definition_path = second definition in `{$crate_name}` loaded from {$path}\n+\n+passes_duplicate_lang_item_crate_depends =\n+    duplicate lang item in crate `{$crate_name}` (which `{$dependency_of}` depends on): `{$lang_item_name}`.\n     .first_defined_span = the lang item is first defined here\n     .first_defined_crate_depends = the lang item is first defined in crate `{$orig_crate_name}` (which `{$orig_dependency_of}` depends on)\n     .first_defined_crate = the lang item is first defined in crate `{$orig_crate_name}`."}, {"sha": "db16a690d62d55f32a82937a4968f57a17a10609", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=57eba4f535d30e9b7765cadfefc5ec66e54b0982", "patch": "@@ -10,6 +10,8 @@ use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{MainDefinition, Ty};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n+use crate::lang_items::Duplicate;\n+\n #[derive(LintDiagnostic)]\n #[diag(passes::outer_crate_level_attr)]\n pub struct OuterCrateLevelAttr;\n@@ -1175,7 +1177,7 @@ impl<'a> IntoDiagnostic<'a> for NoMainErr {\n     }\n }\n \n-pub struct DuplicateLangItem<'a> {\n+pub struct DuplicateLangItem {\n     pub local_span: Option<Span>,\n     pub lang_item_name: Symbol,\n     pub crate_name: Symbol,\n@@ -1187,16 +1189,23 @@ pub struct DuplicateLangItem<'a> {\n     pub orig_dependency_of: Symbol,\n     pub orig_is_local: bool,\n     pub orig_path: String,\n-    pub message: &'a str,\n+    pub(crate) duplicate: Duplicate,\n }\n \n-impl<'a, 'b> IntoDiagnostic<'a> for DuplicateLangItem<'b> {\n+impl IntoDiagnostic<'_> for DuplicateLangItem {\n     fn into_diagnostic(\n         self,\n-        handler: &'a rustc_errors::Handler,\n-    ) -> rustc_errors::DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        handler: &rustc_errors::Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_err_with_code(\n-            rustc_errors::fluent::passes::duplicate_lang_item,\n+            match self.duplicate {\n+                Duplicate::Plain => rustc_errors::fluent::passes::duplicate_lang_item,\n+\n+                Duplicate::Crate => rustc_errors::fluent::passes::duplicate_lang_item_crate,\n+                Duplicate::CrateDepends => {\n+                    rustc_errors::fluent::passes::duplicate_lang_item_crate_depends\n+                }\n+            },\n             error_code!(E0152),\n         );\n         diag.set_arg(\"lang_item_name\", self.lang_item_name);\n@@ -1206,7 +1215,6 @@ impl<'a, 'b> IntoDiagnostic<'a> for DuplicateLangItem<'b> {\n         diag.set_arg(\"orig_crate_name\", self.orig_crate_name);\n         diag.set_arg(\"orig_dependency_of\", self.orig_dependency_of);\n         diag.set_arg(\"orig_path\", self.orig_path);\n-        diag.set_arg(\"message\", self.message);\n         if let Some(span) = self.local_span {\n             diag.set_span(span);\n         }"}, {"sha": "71b0735192ac49df244fad49b54b3d7f688c53a2", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57eba4f535d30e9b7765cadfefc5ec66e54b0982/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=57eba4f535d30e9b7765cadfefc5ec66e54b0982", "patch": "@@ -24,6 +24,12 @@ use rustc_span::{symbol::kw::Empty, Span};\n \n use rustc_middle::ty::query::Providers;\n \n+pub(crate) enum Duplicate {\n+    Plain,\n+    Crate,\n+    CrateDepends,\n+}\n+\n struct LanguageItemCollector<'tcx> {\n     items: LanguageItems,\n     tcx: TyCtxt<'tcx>,\n@@ -103,15 +109,15 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                     }\n                 }\n \n-                let message = if local_span.is_some() {\n-                    \"duplicate\"\n+                let duplicate = if local_span.is_some() {\n+                    Duplicate::Plain\n                 } else {\n                     match self.tcx.extern_crate(item_def_id) {\n                         Some(ExternCrate { dependency_of: inner_dependency_of, .. }) => {\n                             dependency_of = self.tcx.crate_name(*inner_dependency_of);\n-                            \"duplicate_in_crate_depends\"\n+                            Duplicate::CrateDepends\n                         }\n-                        _ => \"duplicate_in_crate\",\n+                        _ => Duplicate::Crate,\n                     }\n                 };\n \n@@ -127,7 +133,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                     orig_dependency_of,\n                     orig_is_local,\n                     orig_path,\n-                    message,\n+                    duplicate,\n                 });\n             }\n         }"}]}