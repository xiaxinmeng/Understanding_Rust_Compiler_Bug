{"sha": "021b3da6721df7eaad2eb87024d2b0da28d60ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMWIzZGE2NzIxZGY3ZWFhZDJlYjg3MDI0ZDJiMGRhMjhkNjBhZGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T09:10:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T09:10:31Z"}, "message": "Flatten simple commands", "tree": {"sha": "c3bc7d2329650fe25e419b91cf3fff05694ecfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3bc7d2329650fe25e419b91cf3fff05694ecfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021b3da6721df7eaad2eb87024d2b0da28d60ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021b3da6721df7eaad2eb87024d2b0da28d60ade", "html_url": "https://github.com/rust-lang/rust/commit/021b3da6721df7eaad2eb87024d2b0da28d60ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021b3da6721df7eaad2eb87024d2b0da28d60ade/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a013ec62d2dfacaf6010b08c96947aa38481721", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a013ec62d2dfacaf6010b08c96947aa38481721", "html_url": "https://github.com/rust-lang/rust/commit/4a013ec62d2dfacaf6010b08c96947aa38481721"}], "stats": {"total": 543, "additions": 242, "deletions": 301}, "files": [{"sha": "09daa3402cf674926929e746c35b12e60ba77700", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,51 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import * as ra from '../rust-analyzer-api';\n-import { Ctx, Cmd } from '../ctx';\n-\n-// Shows status of rust-analyzer (for debugging)\n-export function analyzerStatus(ctx: Ctx): Cmd {\n-    let poller: NodeJS.Timer | undefined = undefined;\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-\n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer-status',\n-            tdcp,\n-        ),\n-    );\n-\n-    ctx.pushCleanup({\n-        dispose() {\n-            if (poller !== undefined) {\n-                clearInterval(poller);\n-            }\n-        },\n-    });\n-\n-    return async () => {\n-        if (poller === undefined) {\n-            poller = setInterval(() => tdcp.eventEmitter.fire(tdcp.uri), 1000);\n-        }\n-        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n-        return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n-    };\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    readonly uri = vscode.Uri.parse('rust-analyzer-status://status');\n-    readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-    constructor(private readonly ctx: Ctx) {\n-    }\n-\n-    provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n-        if (!vscode.window.activeTextEditor) return '';\n-\n-        return this.ctx.client.sendRequest(ra.analyzerStatus, null);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}"}, {"sha": "23f2ef1d5e362c832092e532080c411b577134b8", "filename": "editors/code/src/commands/expand_macro.ts", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,66 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function expandMacro(ctx: Ctx): Cmd {\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            tdcp,\n-        ),\n-    );\n-\n-    return async () => {\n-        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n-        tdcp.eventEmitter.fire(tdcp.uri);\n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n-    };\n-}\n-\n-function codeFormat(expanded: ra.ExpandedMacro): string {\n-    let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n-    result += '// ' + '='.repeat(result.length - 3);\n-    result += '\\n\\n';\n-    result += expanded.expansion;\n-\n-    return result;\n-}\n-\n-class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n-    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-    constructor(private readonly ctx: Ctx) {\n-    }\n-\n-    async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        const client = this.ctx.client;\n-        if (!editor || !client) return '';\n-\n-        const position = editor.selection.active;\n-\n-        const expanded = await client.sendRequest(ra.expandMacro, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            position,\n-        });\n-\n-        if (expanded == null) return 'Not available';\n-\n-        return codeFormat(expanded);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}"}, {"sha": "1585912a2b776ab5e8aad00a4643f1f0801d748b", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 242, "deletions": 15, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/021b3da6721df7eaad2eb87024d2b0da28d60ade/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/021b3da6721df7eaad2eb87024d2b0da28d60ade/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=021b3da6721df7eaad2eb87024d2b0da28d60ade", "patch": "@@ -4,18 +4,251 @@ import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n import { applySnippetWorkspaceEdit } from '../snippets';\n+import { spawnSync } from 'child_process';\n \n-export * from './analyzer_status';\n-export * from './matching_brace';\n-export * from './join_lines';\n-export * from './on_enter';\n-export * from './parent_module';\n export * from './syntax_tree';\n-export * from './expand_macro';\n export * from './runnables';\n-export * from './ssr';\n-export * from './server_version';\n-export * from './toggle_inlay_hints';\n+\n+export function analyzerStatus(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer-status://status');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n+        provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n+            if (!vscode.window.activeTextEditor) return '';\n+\n+            return ctx.client.sendRequest(ra.analyzerStatus, null);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    }();\n+\n+    let poller: NodeJS.Timer | undefined = undefined;\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer-status',\n+            tdcp,\n+        ),\n+    );\n+\n+    ctx.pushCleanup({\n+        dispose() {\n+            if (poller !== undefined) {\n+                clearInterval(poller);\n+            }\n+        },\n+    });\n+\n+    return async () => {\n+        if (poller === undefined) {\n+            poller = setInterval(() => tdcp.eventEmitter.fire(tdcp.uri), 1000);\n+        }\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n+    };\n+}\n+\n+export function matchingBrace(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const response = await client.sendRequest(ra.matchingBrace, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            positions: editor.selections.map(s =>\n+                client.code2ProtocolConverter.asPosition(s.active),\n+            ),\n+        });\n+        editor.selections = editor.selections.map((sel, idx) => {\n+            const active = client.protocol2CodeConverter.asPosition(\n+                response[idx],\n+            );\n+            const anchor = sel.isEmpty ? active : sel.anchor;\n+            return new vscode.Selection(anchor, active);\n+        });\n+        editor.revealRange(editor.selection);\n+    };\n+}\n+\n+export function joinLines(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n+            ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n+            textDocument: { uri: editor.document.uri.toString() },\n+        });\n+        editor.edit((builder) => {\n+            client.protocol2CodeConverter.asTextEdits(items).forEach((edit) => {\n+                builder.replace(edit.range, edit.newText);\n+            });\n+        });\n+    };\n+}\n+\n+export function onEnter(ctx: Ctx): Cmd {\n+    async function handleKeypress() {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+\n+        if (!editor || !client) return false;\n+\n+        const change = await client.sendRequest(ra.onEnter, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        }).catch(_error => {\n+            // client.logFailedRequest(OnEnterRequest.type, error);\n+            return null;\n+        });\n+        if (!change) return false;\n+\n+        const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n+        await applySnippetWorkspaceEdit(workspaceEdit);\n+        return true;\n+    }\n+\n+    return async () => {\n+        if (await handleKeypress()) return;\n+\n+        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n+    };\n+}\n+\n+export function parentModule(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const response = await client.sendRequest(ra.parentModule, {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position: client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        });\n+        const loc = response[0];\n+        if (loc == null) return;\n+\n+        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n+        const range = client.protocol2CodeConverter.asRange(loc.range);\n+\n+        const doc = await vscode.workspace.openTextDocument(uri);\n+        const e = await vscode.window.showTextDocument(doc);\n+        e.selection = new vscode.Selection(range.start, range.start);\n+        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+    };\n+}\n+\n+export function ssr(ctx: Ctx): Cmd {\n+    return async () => {\n+        const client = ctx.client;\n+        if (!client) return;\n+\n+        const options: vscode.InputBoxOptions = {\n+            value: \"() ==>> ()\",\n+            prompt: \"Enter request, for example 'Foo($a:expr) ==> Foo::new($a)' \",\n+            validateInput: async (x: string) => {\n+                try {\n+                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n+                } catch (e) {\n+                    return e.toString();\n+                }\n+                return null;\n+            }\n+        };\n+        const request = await vscode.window.showInputBox(options);\n+        if (!request) return;\n+\n+        const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n+\n+        await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n+    };\n+}\n+\n+export function serverVersion(ctx: Ctx): Cmd {\n+    return async () => {\n+        const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n+        const commitHash = stdout.slice(`rust-analyzer `.length).trim();\n+        const { releaseTag } = ctx.config.package;\n+\n+        void vscode.window.showInformationMessage(\n+            `rust-analyzer version: ${releaseTag ?? \"unreleased\"} (${commitHash})`\n+        );\n+    };\n+}\n+\n+export function toggleInlayHints(ctx: Ctx): Cmd {\n+    return async () => {\n+        await vscode\n+            .workspace\n+            .getConfiguration(`${ctx.config.rootSection}.inlayHints`)\n+            .update('enable', !ctx.config.inlayHints.enable, vscode.ConfigurationTarget.Workspace);\n+    };\n+}\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function expandMacro(ctx: Ctx): Cmd {\n+    function codeFormat(expanded: ra.ExpandedMacro): string {\n+        let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n+        result += '// ' + '='.repeat(result.length - 3);\n+        result += '\\n\\n';\n+        result += expanded.expansion;\n+\n+        return result;\n+    }\n+\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n+        eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n+            const editor = vscode.window.activeTextEditor;\n+            const client = ctx.client;\n+            if (!editor || !client) return '';\n+\n+            const position = editor.selection.active;\n+\n+            const expanded = await client.sendRequest(ra.expandMacro, {\n+                textDocument: { uri: editor.document.uri.toString() },\n+                position,\n+            });\n+\n+            if (expanded == null) return 'Not available';\n+\n+            return codeFormat(expanded);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    }();\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            tdcp,\n+        ),\n+    );\n+\n+    return async () => {\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        tdcp.eventEmitter.fire(tdcp.uri);\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true,\n+        );\n+    };\n+}\n \n export function collectGarbage(ctx: Ctx): Cmd {\n     return async () => ctx.client.sendRequest(ra.collectGarbage, null);\n@@ -35,12 +268,6 @@ export function showReferences(ctx: Ctx): Cmd {\n     };\n }\n \n-export function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: ra.SourceChange) => {\n-        await sourceChange.applySourceChange(ctx, change);\n-    };\n-}\n-\n export function applyActionGroup(_ctx: Ctx): Cmd {\n     return async (actions: { label: string; edit: vscode.WorkspaceEdit }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);"}, {"sha": "0bf1ee6e671e12ba46b06663b20d9c20ee4face4", "filename": "editors/code/src/commands/join_lines.ts", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,22 +0,0 @@\n-import * as ra from '../rust-analyzer-api';\n-import * as lc from 'vscode-languageclient';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function joinLines(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n-            ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n-            textDocument: { uri: editor.document.uri.toString() },\n-        });\n-        editor.edit((builder) => {\n-            client.protocol2CodeConverter.asTextEdits(items).forEach((edit) => {\n-                builder.replace(edit.range, edit.newText);\n-            });\n-        });\n-    };\n-}"}, {"sha": "9c418b887c21117d72667fca3f7422a1a3252b0e", "filename": "editors/code/src/commands/matching_brace.ts", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,27 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function matchingBrace(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const response = await client.sendRequest(ra.matchingBrace, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            positions: editor.selections.map(s =>\n-                client.code2ProtocolConverter.asPosition(s.active),\n-            ),\n-        });\n-        editor.selections = editor.selections.map((sel, idx) => {\n-            const active = client.protocol2CodeConverter.asPosition(\n-                response[idx],\n-            );\n-            const anchor = sel.isEmpty ? active : sel.anchor;\n-            return new vscode.Selection(anchor, active);\n-        });\n-        editor.revealRange(editor.selection);\n-    };\n-}"}, {"sha": "0e4769633b770645a20acbcbe87ec5c0b70fcb0a", "filename": "editors/code/src/commands/on_enter.ts", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,35 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Cmd, Ctx } from '../ctx';\n-import { applySnippetWorkspaceEdit } from '../snippets';\n-\n-async function handleKeypress(ctx: Ctx) {\n-    const editor = ctx.activeRustEditor;\n-    const client = ctx.client;\n-\n-    if (!editor || !client) return false;\n-\n-    const change = await client.sendRequest(ra.onEnter, {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        position: client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    }).catch(_error => {\n-        // client.logFailedRequest(OnEnterRequest.type, error);\n-        return null;\n-    });\n-    if (!change) return false;\n-\n-    const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n-    await applySnippetWorkspaceEdit(workspaceEdit);\n-    return true;\n-}\n-\n-export function onEnter(ctx: Ctx): Cmd {\n-    return async () => {\n-        if (await handleKeypress(ctx)) return;\n-\n-        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n-    };\n-}"}, {"sha": "8f78ddd71c63ad19ed28342fde235a229d540543", "filename": "editors/code/src/commands/parent_module.ts", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,29 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function parentModule(ctx: Ctx): Cmd {\n-    return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const response = await client.sendRequest(ra.parentModule, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        });\n-        const loc = response[0];\n-        if (loc == null) return;\n-\n-        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n-        const range = client.protocol2CodeConverter.asRange(loc.range);\n-\n-        const doc = await vscode.workspace.openTextDocument(uri);\n-        const e = await vscode.window.showTextDocument(doc);\n-        e.selection = new vscode.Selection(range.start, range.start);\n-        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n-    };\n-}"}, {"sha": "d64ac726e2cc6ad8afb07ff22a1b00d18def2b9e", "filename": "editors/code/src/commands/server_version.ts", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,15 +0,0 @@\n-import * as vscode from \"vscode\";\n-import { spawnSync } from \"child_process\";\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function serverVersion(ctx: Ctx): Cmd {\n-    return async () => {\n-        const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n-        const commitHash = stdout.slice(`rust-analyzer `.length).trim();\n-        const { releaseTag } = ctx.config.package;\n-\n-        void vscode.window.showInformationMessage(\n-            `rust-analyzer version: ${releaseTag ?? \"unreleased\"} (${commitHash})`\n-        );\n-    };\n-}"}, {"sha": "5d40a64d28e9067548f5e528a89749484c95fbea", "filename": "editors/code/src/commands/ssr.ts", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,30 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from \"../rust-analyzer-api\";\n-\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function ssr(ctx: Ctx): Cmd {\n-    return async () => {\n-        const client = ctx.client;\n-        if (!client) return;\n-\n-        const options: vscode.InputBoxOptions = {\n-            value: \"() ==>> ()\",\n-            prompt: \"Enter request, for example 'Foo($a:expr) ==> Foo::new($a)' \",\n-            validateInput: async (x: string) => {\n-                try {\n-                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n-                } catch (e) {\n-                    return e.toString();\n-                }\n-                return null;\n-            }\n-        };\n-        const request = await vscode.window.showInputBox(options);\n-        if (!request) return;\n-\n-        const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n-\n-        await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n-    };\n-}"}, {"sha": "7606af8d0cb08c44e0c6ac02aab6f8b1aa27aa74", "filename": "editors/code/src/commands/toggle_inlay_hints.ts", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4a013ec62d2dfacaf6010b08c96947aa38481721/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Ftoggle_inlay_hints.ts?ref=4a013ec62d2dfacaf6010b08c96947aa38481721", "patch": "@@ -1,11 +0,0 @@\n-import * as vscode from 'vscode';\n-import { Ctx, Cmd } from '../ctx';\n-\n-export function toggleInlayHints(ctx: Ctx): Cmd {\n-    return async () => {\n-        await vscode\n-            .workspace\n-            .getConfiguration(`${ctx.config.rootSection}.inlayHints`)\n-            .update('enable', !ctx.config.inlayHints.enable, vscode.ConfigurationTarget.Workspace);\n-    };\n-}"}]}