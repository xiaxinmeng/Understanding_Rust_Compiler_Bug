{"sha": "85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzlmYzZmOGY1OWMxNDZjNDRhYWNiNGI5YWJmYjJjMzVlMTYwODk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T21:00:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T05:24:35Z"}, "message": "librustc: Remove the `const` declaration form everywhere", "tree": {"sha": "888af920d60f200086d9362c5f8dccd24b928ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888af920d60f200086d9362c5f8dccd24b928ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "html_url": "https://github.com/rust-lang/rust/commit/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "html_url": "https://github.com/rust-lang/rust/commit/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde"}], "stats": {"total": 2124, "additions": 1061, "deletions": 1063}, "files": [{"sha": "d9dc89097d03d88cecbb8928546beaef0018f783", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -41,10 +41,10 @@ pub mod rustrt {\n     }\n }\n \n-const lz_none : c_int = 0x0;   // Huffman-coding only.\n-const lz_fast : c_int = 0x1;   // LZ with only one probe\n-const lz_norm : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n-const lz_best : c_int = 0xfff; // LZ with 4095 probes, \"best\"\n+static lz_none : c_int = 0x0;   // Huffman-coding only.\n+static lz_fast : c_int = 0x1;   // LZ with only one probe\n+static lz_norm : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n+static lz_best : c_int = 0xfff; // LZ with 4095 probes, \"best\"\n \n pub fn deflate_bytes(bytes: &[const u8]) -> ~[u8] {\n     do vec::as_const_buf(bytes) |b, len| {"}, {"sha": "6b25611466321f1ffde788a9e22da5c3c05b4f5d", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -211,11 +211,11 @@ unsafe fn find_segment_for_frame(fp: *Word, segment: *StackSegment)\n \n type Memory = uint;\n \n-const task_local_heap: Memory = 1;\n-const exchange_heap:   Memory = 2;\n-const stack:           Memory = 4;\n+static task_local_heap: Memory = 1;\n+static exchange_heap:   Memory = 2;\n+static stack:           Memory = 4;\n \n-const need_cleanup:    Memory = exchange_heap | stack;\n+static need_cleanup:    Memory = exchange_heap | stack;\n \n // Walks stack, searching for roots of the requested type, and passes\n // each root to the visitor."}, {"sha": "f5a97bdaca3ac46897d44fddebd84baf35dd4792", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -25,7 +25,7 @@ pub mod linear {\n     use uint;\n     use vec;\n \n-    const INITIAL_CAPACITY: uint = 32u; // 2^5\n+    static INITIAL_CAPACITY: uint = 32u; // 2^5\n \n     struct Bucket<K,V> {\n         hash: uint,"}, {"sha": "47eece81ce1c90a90e151dde9999a1de96a1ff93", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 196, "deletions": 196, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -732,52 +732,52 @@ pub mod consts {\n     #[cfg(target_os = \"win32\")]\n     pub mod os {\n         pub mod c95 {\n-            pub const EXIT_FAILURE : int = 1;\n-            pub const EXIT_SUCCESS : int = 0;\n-            pub const RAND_MAX : int = 32767;\n-            pub const EOF : int = -1;\n-            pub const SEEK_SET : int = 0;\n-            pub const SEEK_CUR : int = 1;\n-            pub const SEEK_END : int = 2;\n-            pub const _IOFBF : int = 0;\n-            pub const _IONBF : int = 4;\n-            pub const _IOLBF : int = 64;\n-            pub const BUFSIZ : uint = 512_u;\n-            pub const FOPEN_MAX : uint = 20_u;\n-            pub const FILENAME_MAX : uint = 260_u;\n-            pub const L_tmpnam : uint = 16_u;\n-            pub const TMP_MAX : uint = 32767_u;\n+            pub static EXIT_FAILURE : int = 1;\n+            pub static EXIT_SUCCESS : int = 0;\n+            pub static RAND_MAX : int = 32767;\n+            pub static EOF : int = -1;\n+            pub static SEEK_SET : int = 0;\n+            pub static SEEK_CUR : int = 1;\n+            pub static SEEK_END : int = 2;\n+            pub static _IOFBF : int = 0;\n+            pub static _IONBF : int = 4;\n+            pub static _IOLBF : int = 64;\n+            pub static BUFSIZ : uint = 512_u;\n+            pub static FOPEN_MAX : uint = 20_u;\n+            pub static FILENAME_MAX : uint = 260_u;\n+            pub static L_tmpnam : uint = 16_u;\n+            pub static TMP_MAX : uint = 32767_u;\n         }\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            pub const O_RDONLY : int = 0;\n-            pub const O_WRONLY : int = 1;\n-            pub const O_RDWR : int = 2;\n-            pub const O_APPEND : int = 8;\n-            pub const O_CREAT : int = 256;\n-            pub const O_EXCL : int = 1024;\n-            pub const O_TRUNC : int = 512;\n-            pub const S_IFIFO : int = 4096;\n-            pub const S_IFCHR : int = 8192;\n-            pub const S_IFBLK : int = 12288;\n-            pub const S_IFDIR : int = 16384;\n-            pub const S_IFREG : int = 32768;\n-            pub const S_IFMT : int = 61440;\n-            pub const S_IEXEC : int = 64;\n-            pub const S_IWRITE : int = 128;\n-            pub const S_IREAD : int = 256;\n-            pub const S_IRWXU : int = 448;\n-            pub const S_IXUSR : int = 64;\n-            pub const S_IWUSR : int = 128;\n-            pub const S_IRUSR : int = 256;\n-            pub const F_OK : int = 0;\n-            pub const R_OK : int = 4;\n-            pub const W_OK : int = 2;\n-            pub const X_OK : int = 1;\n-            pub const STDIN_FILENO : int = 0;\n-            pub const STDOUT_FILENO : int = 1;\n-            pub const STDERR_FILENO : int = 2;\n+            pub static O_RDONLY : int = 0;\n+            pub static O_WRONLY : int = 1;\n+            pub static O_RDWR : int = 2;\n+            pub static O_APPEND : int = 8;\n+            pub static O_CREAT : int = 256;\n+            pub static O_EXCL : int = 1024;\n+            pub static O_TRUNC : int = 512;\n+            pub static S_IFIFO : int = 4096;\n+            pub static S_IFCHR : int = 8192;\n+            pub static S_IFBLK : int = 12288;\n+            pub static S_IFDIR : int = 16384;\n+            pub static S_IFREG : int = 32768;\n+            pub static S_IFMT : int = 61440;\n+            pub static S_IEXEC : int = 64;\n+            pub static S_IWRITE : int = 128;\n+            pub static S_IREAD : int = 256;\n+            pub static S_IRWXU : int = 448;\n+            pub static S_IXUSR : int = 64;\n+            pub static S_IWUSR : int = 128;\n+            pub static S_IRUSR : int = 256;\n+            pub static F_OK : int = 0;\n+            pub static R_OK : int = 4;\n+            pub static W_OK : int = 2;\n+            pub static X_OK : int = 1;\n+            pub static STDIN_FILENO : int = 0;\n+            pub static STDOUT_FILENO : int = 1;\n+            pub static STDERR_FILENO : int = 2;\n         }\n         pub mod posix01 {\n         }\n@@ -786,13 +786,13 @@ pub mod consts {\n         pub mod bsd44 {\n         }\n         pub mod extra {\n-            pub const O_TEXT : int = 16384;\n-            pub const O_BINARY : int = 32768;\n-            pub const O_NOINHERIT: int = 128;\n+            pub static O_TEXT : int = 16384;\n+            pub static O_BINARY : int = 32768;\n+            pub static O_NOINHERIT: int = 128;\n \n-            pub const ERROR_SUCCESS : int = 0;\n-            pub const ERROR_INSUFFICIENT_BUFFER : int = 122;\n-            pub const INVALID_HANDLE_VALUE: int = -1;\n+            pub static ERROR_SUCCESS : int = 0;\n+            pub static ERROR_INSUFFICIENT_BUFFER : int = 122;\n+            pub static INVALID_HANDLE_VALUE: int = -1;\n         }\n     }\n \n@@ -801,56 +801,56 @@ pub mod consts {\n     #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod c95 {\n-            pub const EXIT_FAILURE : int = 1;\n-            pub const EXIT_SUCCESS : int = 0;\n-            pub const RAND_MAX : int = 2147483647;\n-            pub const EOF : int = -1;\n-            pub const SEEK_SET : int = 0;\n-            pub const SEEK_CUR : int = 1;\n-            pub const SEEK_END : int = 2;\n-            pub const _IOFBF : int = 0;\n-            pub const _IONBF : int = 2;\n-            pub const _IOLBF : int = 1;\n-            pub const BUFSIZ : uint = 8192_u;\n-            pub const FOPEN_MAX : uint = 16_u;\n-            pub const FILENAME_MAX : uint = 4096_u;\n-            pub const L_tmpnam : uint = 20_u;\n-            pub const TMP_MAX : uint = 238328_u;\n+            pub static EXIT_FAILURE : int = 1;\n+            pub static EXIT_SUCCESS : int = 0;\n+            pub static RAND_MAX : int = 2147483647;\n+            pub static EOF : int = -1;\n+            pub static SEEK_SET : int = 0;\n+            pub static SEEK_CUR : int = 1;\n+            pub static SEEK_END : int = 2;\n+            pub static _IOFBF : int = 0;\n+            pub static _IONBF : int = 2;\n+            pub static _IOLBF : int = 1;\n+            pub static BUFSIZ : uint = 8192_u;\n+            pub static FOPEN_MAX : uint = 16_u;\n+            pub static FILENAME_MAX : uint = 4096_u;\n+            pub static L_tmpnam : uint = 20_u;\n+            pub static TMP_MAX : uint = 238328_u;\n         }\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            pub const O_RDONLY : int = 0;\n-            pub const O_WRONLY : int = 1;\n-            pub const O_RDWR : int = 2;\n-            pub const O_APPEND : int = 1024;\n-            pub const O_CREAT : int = 64;\n-            pub const O_EXCL : int = 128;\n-            pub const O_TRUNC : int = 512;\n-            pub const S_IFIFO : int = 4096;\n-            pub const S_IFCHR : int = 8192;\n-            pub const S_IFBLK : int = 24576;\n-            pub const S_IFDIR : int = 16384;\n-            pub const S_IFREG : int = 32768;\n-            pub const S_IFMT : int = 61440;\n-            pub const S_IEXEC : int = 64;\n-            pub const S_IWRITE : int = 128;\n-            pub const S_IREAD : int = 256;\n-            pub const S_IRWXU : int = 448;\n-            pub const S_IXUSR : int = 64;\n-            pub const S_IWUSR : int = 128;\n-            pub const S_IRUSR : int = 256;\n-            pub const F_OK : int = 0;\n-            pub const R_OK : int = 4;\n-            pub const W_OK : int = 2;\n-            pub const X_OK : int = 1;\n-            pub const STDIN_FILENO : int = 0;\n-            pub const STDOUT_FILENO : int = 1;\n-            pub const STDERR_FILENO : int = 2;\n-            pub const F_LOCK : int = 1;\n-            pub const F_TEST : int = 3;\n-            pub const F_TLOCK : int = 2;\n-            pub const F_ULOCK : int = 0;\n+            pub static O_RDONLY : int = 0;\n+            pub static O_WRONLY : int = 1;\n+            pub static O_RDWR : int = 2;\n+            pub static O_APPEND : int = 1024;\n+            pub static O_CREAT : int = 64;\n+            pub static O_EXCL : int = 128;\n+            pub static O_TRUNC : int = 512;\n+            pub static S_IFIFO : int = 4096;\n+            pub static S_IFCHR : int = 8192;\n+            pub static S_IFBLK : int = 24576;\n+            pub static S_IFDIR : int = 16384;\n+            pub static S_IFREG : int = 32768;\n+            pub static S_IFMT : int = 61440;\n+            pub static S_IEXEC : int = 64;\n+            pub static S_IWRITE : int = 128;\n+            pub static S_IREAD : int = 256;\n+            pub static S_IRWXU : int = 448;\n+            pub static S_IXUSR : int = 64;\n+            pub static S_IWUSR : int = 128;\n+            pub static S_IRUSR : int = 256;\n+            pub static F_OK : int = 0;\n+            pub static R_OK : int = 4;\n+            pub static W_OK : int = 2;\n+            pub static X_OK : int = 1;\n+            pub static STDIN_FILENO : int = 0;\n+            pub static STDOUT_FILENO : int = 1;\n+            pub static STDERR_FILENO : int = 2;\n+            pub static F_LOCK : int = 1;\n+            pub static F_TEST : int = 3;\n+            pub static F_TLOCK : int = 2;\n+            pub static F_ULOCK : int = 0;\n         }\n         pub mod posix01 {\n         }\n@@ -859,65 +859,65 @@ pub mod consts {\n         pub mod bsd44 {\n         }\n         pub mod extra {\n-            pub const O_RSYNC : int = 1052672;\n-            pub const O_DSYNC : int = 4096;\n-            pub const O_SYNC : int = 1052672;\n+            pub static O_RSYNC : int = 1052672;\n+            pub static O_DSYNC : int = 4096;\n+            pub static O_SYNC : int = 1052672;\n         }\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n     pub mod os {\n         pub mod c95 {\n-            pub const EXIT_FAILURE : int = 1;\n-            pub const EXIT_SUCCESS : int = 0;\n-            pub const RAND_MAX : int = 2147483647;\n-            pub const EOF : int = -1;\n-            pub const SEEK_SET : int = 0;\n-            pub const SEEK_CUR : int = 1;\n-            pub const SEEK_END : int = 2;\n-            pub const _IOFBF : int = 0;\n-            pub const _IONBF : int = 2;\n-            pub const _IOLBF : int = 1;\n-            pub const BUFSIZ : uint = 1024_u;\n-            pub const FOPEN_MAX : uint = 20_u;\n-            pub const FILENAME_MAX : uint = 1024_u;\n-            pub const L_tmpnam : uint = 1024_u;\n-            pub const TMP_MAX : uint = 308915776_u;\n+            pub static EXIT_FAILURE : int = 1;\n+            pub static EXIT_SUCCESS : int = 0;\n+            pub static RAND_MAX : int = 2147483647;\n+            pub static EOF : int = -1;\n+            pub static SEEK_SET : int = 0;\n+            pub static SEEK_CUR : int = 1;\n+            pub static SEEK_END : int = 2;\n+            pub static _IOFBF : int = 0;\n+            pub static _IONBF : int = 2;\n+            pub static _IOLBF : int = 1;\n+            pub static BUFSIZ : uint = 1024_u;\n+            pub static FOPEN_MAX : uint = 20_u;\n+            pub static FILENAME_MAX : uint = 1024_u;\n+            pub static L_tmpnam : uint = 1024_u;\n+            pub static TMP_MAX : uint = 308915776_u;\n         }\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            pub const O_RDONLY : int = 0;\n-            pub const O_WRONLY : int = 1;\n-            pub const O_RDWR : int = 2;\n-            pub const O_APPEND : int = 8;\n-            pub const O_CREAT : int = 512;\n-            pub const O_EXCL : int = 2048;\n-            pub const O_TRUNC : int = 1024;\n-            pub const S_IFIFO : int = 4096;\n-            pub const S_IFCHR : int = 8192;\n-            pub const S_IFBLK : int = 24576;\n-            pub const S_IFDIR : int = 16384;\n-            pub const S_IFREG : int = 32768;\n-            pub const S_IFMT : int = 61440;\n-            pub const S_IEXEC : int = 64;\n-            pub const S_IWRITE : int = 128;\n-            pub const S_IREAD : int = 256;\n-            pub const S_IRWXU : int = 448;\n-            pub const S_IXUSR : int = 64;\n-            pub const S_IWUSR : int = 128;\n-            pub const S_IRUSR : int = 256;\n-            pub const F_OK : int = 0;\n-            pub const R_OK : int = 4;\n-            pub const W_OK : int = 2;\n-            pub const X_OK : int = 1;\n-            pub const STDIN_FILENO : int = 0;\n-            pub const STDOUT_FILENO : int = 1;\n-            pub const STDERR_FILENO : int = 2;\n-            pub const F_LOCK : int = 1;\n-            pub const F_TEST : int = 3;\n-            pub const F_TLOCK : int = 2;\n-            pub const F_ULOCK : int = 0;\n+            pub static O_RDONLY : int = 0;\n+            pub static O_WRONLY : int = 1;\n+            pub static O_RDWR : int = 2;\n+            pub static O_APPEND : int = 8;\n+            pub static O_CREAT : int = 512;\n+            pub static O_EXCL : int = 2048;\n+            pub static O_TRUNC : int = 1024;\n+            pub static S_IFIFO : int = 4096;\n+            pub static S_IFCHR : int = 8192;\n+            pub static S_IFBLK : int = 24576;\n+            pub static S_IFDIR : int = 16384;\n+            pub static S_IFREG : int = 32768;\n+            pub static S_IFMT : int = 61440;\n+            pub static S_IEXEC : int = 64;\n+            pub static S_IWRITE : int = 128;\n+            pub static S_IREAD : int = 256;\n+            pub static S_IRWXU : int = 448;\n+            pub static S_IXUSR : int = 64;\n+            pub static S_IWUSR : int = 128;\n+            pub static S_IRUSR : int = 256;\n+            pub static F_OK : int = 0;\n+            pub static R_OK : int = 4;\n+            pub static W_OK : int = 2;\n+            pub static X_OK : int = 1;\n+            pub static STDIN_FILENO : int = 0;\n+            pub static STDOUT_FILENO : int = 1;\n+            pub static STDERR_FILENO : int = 2;\n+            pub static F_LOCK : int = 1;\n+            pub static F_TEST : int = 3;\n+            pub static F_TLOCK : int = 2;\n+            pub static F_ULOCK : int = 0;\n         }\n         pub mod posix01 {\n         }\n@@ -926,66 +926,66 @@ pub mod consts {\n         pub mod bsd44 {\n         }\n         pub mod extra {\n-            pub const O_SYNC : int = 128;\n-            pub const CTL_KERN: int = 1;\n-            pub const KERN_PROC: int = 14;\n-            pub const KERN_PROC_PATHNAME: int = 12;\n+            pub static O_SYNC : int = 128;\n+            pub static CTL_KERN: int = 1;\n+            pub static KERN_PROC: int = 14;\n+            pub static KERN_PROC_PATHNAME: int = 12;\n         }\n     }\n \n     #[cfg(target_os = \"macos\")]\n     pub mod os {\n         pub mod c95 {\n-            pub const EXIT_FAILURE : int = 1;\n-            pub const EXIT_SUCCESS : int = 0;\n-            pub const RAND_MAX : int = 2147483647;\n-            pub const EOF : int = -1;\n-            pub const SEEK_SET : int = 0;\n-            pub const SEEK_CUR : int = 1;\n-            pub const SEEK_END : int = 2;\n-            pub const _IOFBF : int = 0;\n-            pub const _IONBF : int = 2;\n-            pub const _IOLBF : int = 1;\n-            pub const BUFSIZ : uint = 1024_u;\n-            pub const FOPEN_MAX : uint = 20_u;\n-            pub const FILENAME_MAX : uint = 1024_u;\n-            pub const L_tmpnam : uint = 1024_u;\n-            pub const TMP_MAX : uint = 308915776_u;\n+            pub static EXIT_FAILURE : int = 1;\n+            pub static EXIT_SUCCESS : int = 0;\n+            pub static RAND_MAX : int = 2147483647;\n+            pub static EOF : int = -1;\n+            pub static SEEK_SET : int = 0;\n+            pub static SEEK_CUR : int = 1;\n+            pub static SEEK_END : int = 2;\n+            pub static _IOFBF : int = 0;\n+            pub static _IONBF : int = 2;\n+            pub static _IOLBF : int = 1;\n+            pub static BUFSIZ : uint = 1024_u;\n+            pub static FOPEN_MAX : uint = 20_u;\n+            pub static FILENAME_MAX : uint = 1024_u;\n+            pub static L_tmpnam : uint = 1024_u;\n+            pub static TMP_MAX : uint = 308915776_u;\n         }\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            pub const O_RDONLY : int = 0;\n-            pub const O_WRONLY : int = 1;\n-            pub const O_RDWR : int = 2;\n-            pub const O_APPEND : int = 8;\n-            pub const O_CREAT : int = 512;\n-            pub const O_EXCL : int = 2048;\n-            pub const O_TRUNC : int = 1024;\n-            pub const S_IFIFO : int = 4096;\n-            pub const S_IFCHR : int = 8192;\n-            pub const S_IFBLK : int = 24576;\n-            pub const S_IFDIR : int = 16384;\n-            pub const S_IFREG : int = 32768;\n-            pub const S_IFMT : int = 61440;\n-            pub const S_IEXEC : int = 64;\n-            pub const S_IWRITE : int = 128;\n-            pub const S_IREAD : int = 256;\n-            pub const S_IRWXU : int = 448;\n-            pub const S_IXUSR : int = 64;\n-            pub const S_IWUSR : int = 128;\n-            pub const S_IRUSR : int = 256;\n-            pub const F_OK : int = 0;\n-            pub const R_OK : int = 4;\n-            pub const W_OK : int = 2;\n-            pub const X_OK : int = 1;\n-            pub const STDIN_FILENO : int = 0;\n-            pub const STDOUT_FILENO : int = 1;\n-            pub const STDERR_FILENO : int = 2;\n-            pub const F_LOCK : int = 1;\n-            pub const F_TEST : int = 3;\n-            pub const F_TLOCK : int = 2;\n-            pub const F_ULOCK : int = 0;\n+            pub static O_RDONLY : int = 0;\n+            pub static O_WRONLY : int = 1;\n+            pub static O_RDWR : int = 2;\n+            pub static O_APPEND : int = 8;\n+            pub static O_CREAT : int = 512;\n+            pub static O_EXCL : int = 2048;\n+            pub static O_TRUNC : int = 1024;\n+            pub static S_IFIFO : int = 4096;\n+            pub static S_IFCHR : int = 8192;\n+            pub static S_IFBLK : int = 24576;\n+            pub static S_IFDIR : int = 16384;\n+            pub static S_IFREG : int = 32768;\n+            pub static S_IFMT : int = 61440;\n+            pub static S_IEXEC : int = 64;\n+            pub static S_IWRITE : int = 128;\n+            pub static S_IREAD : int = 256;\n+            pub static S_IRWXU : int = 448;\n+            pub static S_IXUSR : int = 64;\n+            pub static S_IWUSR : int = 128;\n+            pub static S_IRUSR : int = 256;\n+            pub static F_OK : int = 0;\n+            pub static R_OK : int = 4;\n+            pub static W_OK : int = 2;\n+            pub static X_OK : int = 1;\n+            pub static STDIN_FILENO : int = 0;\n+            pub static STDOUT_FILENO : int = 1;\n+            pub static STDERR_FILENO : int = 2;\n+            pub static F_LOCK : int = 1;\n+            pub static F_TEST : int = 3;\n+            pub static F_TLOCK : int = 2;\n+            pub static F_ULOCK : int = 0;\n         }\n         pub mod posix01 {\n         }\n@@ -994,9 +994,9 @@ pub mod consts {\n         pub mod bsd44 {\n         }\n         pub mod extra {\n-            pub const O_DSYNC : int = 4194304;\n-            pub const O_SYNC : int = 128;\n-            pub const F_FULLFSYNC : int = 51;\n+            pub static O_DSYNC : int = 4194304;\n+            pub static O_SYNC : int = 128;\n+            pub static F_FULLFSYNC : int = 51;\n         }\n     }\n }"}, {"sha": "4eda5e7b5e8c6459f982c43839b0dee3b53677bd", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,9 +16,9 @@ use ptr;\n \n pub mod raw {\n \n-    pub const RC_EXCHANGE_UNIQUE : uint = (-1) as uint;\n-    pub const RC_MANAGED_UNIQUE : uint = (-2) as uint;\n-    pub const RC_IMMORTAL : uint = 0x77777777;\n+    pub static RC_EXCHANGE_UNIQUE : uint = (-1) as uint;\n+    pub static RC_MANAGED_UNIQUE : uint = (-2) as uint;\n+    pub static RC_IMMORTAL : uint = 0x77777777;\n \n     use intrinsic::TyDesc;\n "}, {"sha": "378ebfa53a0c25a985eb9445d50ba2b7279430ac", "filename": "src/libcore/num/cmath.rs", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fcmath.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -174,95 +174,95 @@ pub mod c_float_utils {\n // FIXME obtain machine float/math constants automatically (Issue #1986)\n \n pub mod c_float_targ_consts {\n-    pub const radix: uint = 2u;\n-    pub const mantissa_digits: uint = 24u;\n-    pub const digits: uint = 6u;\n-    pub const min_exp: uint = -125u;\n-    pub const max_exp: uint = 128u;\n-    pub const min_10_exp: int = -37;\n-    pub const max_10_exp: int = 38;\n-    // FIXME (#1433): this is wrong, replace with hexadecimal (%a) constants\n+    pub static radix: uint = 2u;\n+    pub static mantissa_digits: uint = 24u;\n+    pub static digits: uint = 6u;\n+    pub static min_exp: uint = -125u;\n+    pub static max_exp: uint = 128u;\n+    pub static min_10_exp: int = -37;\n+    pub static max_10_exp: int = 38;\n+    // FIXME (#1433): this is wrong, replace with hexadecimal (%a) staticants\n     // below.\n-    pub const min_value: f32 = 1.175494e-38_f32;\n-    pub const max_value: f32 = 3.402823e+38_f32;\n-    pub const epsilon: f32 = 0.000000_f32;\n+    pub static min_value: f32 = 1.175494e-38_f32;\n+    pub static max_value: f32 = 3.402823e+38_f32;\n+    pub static epsilon: f32 = 0.000000_f32;\n }\n \n pub mod c_double_targ_consts {\n-    pub const radix: uint = 2u;\n-    pub const mantissa_digits: uint = 53u;\n-    pub const digits: uint = 15u;\n-    pub const min_exp: uint = -1021u;\n-    pub const max_exp: uint = 1024u;\n-    pub const min_10_exp: int = -307;\n-    pub const max_10_exp: int = 308;\n-    // FIXME (#1433): this is wrong, replace with hexadecimal (%a) constants\n+    pub static radix: uint = 2u;\n+    pub static mantissa_digits: uint = 53u;\n+    pub static digits: uint = 15u;\n+    pub static min_exp: uint = -1021u;\n+    pub static max_exp: uint = 1024u;\n+    pub static min_10_exp: int = -307;\n+    pub static max_10_exp: int = 308;\n+    // FIXME (#1433): this is wrong, replace with hexadecimal (%a) staticants\n     // below.\n-    pub const min_value: f64 = 2.225074e-308_f64;\n-    pub const max_value: f64 = 1.797693e+308_f64;\n-    pub const epsilon: f64 = 2.220446e-16_f64;\n+    pub static min_value: f64 = 2.225074e-308_f64;\n+    pub static max_value: f64 = 1.797693e+308_f64;\n+    pub static epsilon: f64 = 2.220446e-16_f64;\n }\n \n /*\n \n FIXME use these once they can be parsed (see Issue #1433)\n \n pub mod c_float_math_consts {\n-    pub const pi: c_float = 0x1.921fb6p+1_f32;\n-    pub const div_1_pi: c_float = 0x1.45f306p-2_f32;\n-    pub const div_2_pi: c_float = 0x1.45f306p-1_f32;\n-    pub const div_pi_2: c_float = 0x1.921fb6p+0_f32;\n-    pub const div_pi_4: c_float = 0x1.921fb6p-1_f32;\n-    pub const div_2_sqrtpi: c_float = 0x1.20dd76p+0_f32;\n-    pub const e: c_float = 0x1.5bf0a8p+1_f32;\n-    pub const log2_e: c_float = 0x1.715476p+0_f32;\n-    pub const log10_e: c_float = 0x1.bcb7b2p-2_f32;\n-    pub const ln_2: c_float = 0x1.62e43p-1_f32;\n-    pub const ln_10: c_float = 0x1.26bb1cp+1_f32;\n-    pub const sqrt2: c_float = 0x1.6a09e6p+0_f32;\n-    pub const div_1_sqrt2: c_float = 0x1.6a09e6p-1_f32;\n+    pub static pi: c_float = 0x1.921fb6p+1_f32;\n+    pub static div_1_pi: c_float = 0x1.45f306p-2_f32;\n+    pub static div_2_pi: c_float = 0x1.45f306p-1_f32;\n+    pub static div_pi_2: c_float = 0x1.921fb6p+0_f32;\n+    pub static div_pi_4: c_float = 0x1.921fb6p-1_f32;\n+    pub static div_2_sqrtpi: c_float = 0x1.20dd76p+0_f32;\n+    pub static e: c_float = 0x1.5bf0a8p+1_f32;\n+    pub static log2_e: c_float = 0x1.715476p+0_f32;\n+    pub static log10_e: c_float = 0x1.bcb7b2p-2_f32;\n+    pub static ln_2: c_float = 0x1.62e43p-1_f32;\n+    pub static ln_10: c_float = 0x1.26bb1cp+1_f32;\n+    pub static sqrt2: c_float = 0x1.6a09e6p+0_f32;\n+    pub static div_1_sqrt2: c_float = 0x1.6a09e6p-1_f32;\n }\n \n pub mod c_double_math_consts {\n-    pub const pi: c_double = 0x1.921fb54442d18p+1_f64;\n-    pub const div_1_pi: c_double = 0x1.45f306dc9c883p-2_f64;\n-    pub const div_2_pi: c_double = 0x1.45f306dc9c883p-1_f64;\n-    pub const div_pi_2: c_double = 0x1.921fb54442d18p+0_f64;\n-    pub const div_pi_4: c_double = 0x1.921fb54442d18p-1_f64;\n-    pub const div_2_sqrtpi: c_double = 0x1.20dd750429b6dp+0_f64;\n-    pub const e: c_double = 0x1.5bf0a8b145769p+1_f64;\n-    pub const log2_e: c_double = 0x1.71547652b82fep+0_f64;\n-    pub const log10_e: c_double = 0x1.bcb7b1526e50ep-2_f64;\n-    pub const ln_2: c_double = 0x1.62e42fefa39efp-1_f64;\n-    pub const ln_10: c_double = 0x1.26bb1bbb55516p+1_f64;\n-    pub const sqrt2: c_double = 0x1.6a09e667f3bcdp+0_f64;\n-    pub const div_1_sqrt2: c_double = 0x1.6a09e667f3bcdp-1_f64;\n+    pub static pi: c_double = 0x1.921fb54442d18p+1_f64;\n+    pub static div_1_pi: c_double = 0x1.45f306dc9c883p-2_f64;\n+    pub static div_2_pi: c_double = 0x1.45f306dc9c883p-1_f64;\n+    pub static div_pi_2: c_double = 0x1.921fb54442d18p+0_f64;\n+    pub static div_pi_4: c_double = 0x1.921fb54442d18p-1_f64;\n+    pub static div_2_sqrtpi: c_double = 0x1.20dd750429b6dp+0_f64;\n+    pub static e: c_double = 0x1.5bf0a8b145769p+1_f64;\n+    pub static log2_e: c_double = 0x1.71547652b82fep+0_f64;\n+    pub static log10_e: c_double = 0x1.bcb7b1526e50ep-2_f64;\n+    pub static ln_2: c_double = 0x1.62e42fefa39efp-1_f64;\n+    pub static ln_10: c_double = 0x1.26bb1bbb55516p+1_f64;\n+    pub static sqrt2: c_double = 0x1.6a09e667f3bcdp+0_f64;\n+    pub static div_1_sqrt2: c_double = 0x1.6a09e667f3bcdp-1_f64;\n }\n \n pub mod c_float_targ_consts {\n-    pub const radix: uint = 2u;\n-    pub const mantissa_digits: uint = 24u;\n-    pub const digits: uint = 6u;\n-    pub const min_exp: int = -125;\n-    pub const max_exp: int = 128;\n-    pub const min_10_exp: int = -37;\n-    pub const max_10_exp: int = 38;\n-    pub const min_value: c_float = 0x1p-126_f32;\n-    pub const max_value: c_float = 0x1.fffffep+127_f32;\n-    pub const epsilon: c_float = 0x1p-23_f32;\n+    pub static radix: uint = 2u;\n+    pub static mantissa_digits: uint = 24u;\n+    pub static digits: uint = 6u;\n+    pub static min_exp: int = -125;\n+    pub static max_exp: int = 128;\n+    pub static min_10_exp: int = -37;\n+    pub static max_10_exp: int = 38;\n+    pub static min_value: c_float = 0x1p-126_f32;\n+    pub static max_value: c_float = 0x1.fffffep+127_f32;\n+    pub static epsilon: c_float = 0x1p-23_f32;\n }\n \n pub mod c_double_targ_consts {\n-    pub const radix: uint = 2u;\n-    pub const mantissa_digits: uint = 53u;\n-    pub const digits: uint = 15u;\n-    pub const min_exp: int = -1021;\n-    pub const max_exp: int = 1024;\n-    pub const min_10_exp: int = -307;\n-    pub const max_10_exp: int = 308;\n-    pub const min_value: c_double = 0x1p-1022_f64;\n-    pub const max_value: c_double = 0x1.fffffffffffffp+1023_f64;\n-    pub const epsilon: c_double = 0x1p-52_f64;\n+    pub static radix: uint = 2u;\n+    pub static mantissa_digits: uint = 53u;\n+    pub static digits: uint = 15u;\n+    pub static min_exp: int = -1021;\n+    pub static max_exp: int = 1024;\n+    pub static min_10_exp: int = -307;\n+    pub static max_10_exp: int = 308;\n+    pub static min_value: c_double = 0x1p-1022_f64;\n+    pub static max_value: c_double = 0x1.fffffffffffffp+1023_f64;\n+    pub static epsilon: c_double = 0x1p-52_f64;\n }\n \n */"}, {"sha": "4a8649fb66e78abefb18059e6d92a87acf71f0bd", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -102,11 +102,11 @@ delegate!(fn trunc(n: c_float) -> c_float = cmath::c_float_utils::trunc)\n // These are not defined inside consts:: for consistency with\n // the integer types\n \n-pub const NaN: f32 = 0.0_f32/0.0_f32;\n+pub static NaN: f32 = 0.0_f32/0.0_f32;\n \n-pub const infinity: f32 = 1.0_f32/0.0_f32;\n+pub static infinity: f32 = 1.0_f32/0.0_f32;\n \n-pub const neg_infinity: f32 = -1.0_f32/0.0_f32;\n+pub static neg_infinity: f32 = -1.0_f32/0.0_f32;\n \n #[inline(always)]\n pub fn is_NaN(f: f32) -> bool { f != f }\n@@ -206,45 +206,45 @@ pub fn is_finite(x: f32) -> bool {\n /* Module: consts */\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n-    // constants from cmath.\n-    /// Archimedes' constant\n-    pub const pi: f32 = 3.14159265358979323846264338327950288_f32;\n+    // staticants from cmath.\n+    /// Archimedes' staticant\n+    pub static pi: f32 = 3.14159265358979323846264338327950288_f32;\n \n     /// pi/2.0\n-    pub const frac_pi_2: f32 = 1.57079632679489661923132169163975144_f32;\n+    pub static frac_pi_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n     /// pi/4.0\n-    pub const frac_pi_4: f32 = 0.785398163397448309615660845819875721_f32;\n+    pub static frac_pi_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n     /// 1.0/pi\n-    pub const frac_1_pi: f32 = 0.318309886183790671537767526745028724_f32;\n+    pub static frac_1_pi: f32 = 0.318309886183790671537767526745028724_f32;\n \n     /// 2.0/pi\n-    pub const frac_2_pi: f32 = 0.636619772367581343075535053490057448_f32;\n+    pub static frac_2_pi: f32 = 0.636619772367581343075535053490057448_f32;\n \n     /// 2.0/sqrt(pi)\n-    pub const frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517_f32;\n+    pub static frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517_f32;\n \n     /// sqrt(2.0)\n-    pub const sqrt2: f32 = 1.41421356237309504880168872420969808_f32;\n+    pub static sqrt2: f32 = 1.41421356237309504880168872420969808_f32;\n \n     /// 1.0/sqrt(2.0)\n-    pub const frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039_f32;\n+    pub static frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039_f32;\n \n     /// Euler's number\n-    pub const e: f32 = 2.71828182845904523536028747135266250_f32;\n+    pub static e: f32 = 2.71828182845904523536028747135266250_f32;\n \n     /// log2(e)\n-    pub const log2_e: f32 = 1.44269504088896340735992468100189214_f32;\n+    pub static log2_e: f32 = 1.44269504088896340735992468100189214_f32;\n \n     /// log10(e)\n-    pub const log10_e: f32 = 0.434294481903251827651128918916605082_f32;\n+    pub static log10_e: f32 = 0.434294481903251827651128918916605082_f32;\n \n     /// ln(2.0)\n-    pub const ln_2: f32 = 0.693147180559945309417232121458176568_f32;\n+    pub static ln_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n     /// ln(10.0)\n-    pub const ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n+    pub static ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n #[inline(always)]"}, {"sha": "8107110e977d8c83ebd960dcc84da4b8794631a9", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -113,27 +113,27 @@ delegate!(fn yn(i: c_int, n: c_double) -> c_double =\n // These are not defined inside consts:: for consistency with\n // the integer types\n \n-pub const radix: uint = 2u;\n+pub static radix: uint = 2u;\n \n-pub const mantissa_digits: uint = 53u;\n-pub const digits: uint = 15u;\n+pub static mantissa_digits: uint = 53u;\n+pub static digits: uint = 15u;\n \n-pub const epsilon: f64 = 2.2204460492503131e-16_f64;\n+pub static epsilon: f64 = 2.2204460492503131e-16_f64;\n \n-pub const min_value: f64 = 2.2250738585072014e-308_f64;\n-pub const max_value: f64 = 1.7976931348623157e+308_f64;\n+pub static min_value: f64 = 2.2250738585072014e-308_f64;\n+pub static max_value: f64 = 1.7976931348623157e+308_f64;\n \n-pub const min_exp: int = -1021;\n-pub const max_exp: int = 1024;\n+pub static min_exp: int = -1021;\n+pub static max_exp: int = 1024;\n \n-pub const min_10_exp: int = -307;\n-pub const max_10_exp: int = 308;\n+pub static min_10_exp: int = -307;\n+pub static max_10_exp: int = 308;\n \n-pub const NaN: f64 = 0.0_f64/0.0_f64;\n+pub static NaN: f64 = 0.0_f64/0.0_f64;\n \n-pub const infinity: f64 = 1.0_f64/0.0_f64;\n+pub static infinity: f64 = 1.0_f64/0.0_f64;\n \n-pub const neg_infinity: f64 = -1.0_f64/0.0_f64;\n+pub static neg_infinity: f64 = -1.0_f64/0.0_f64;\n \n #[inline(always)]\n pub fn is_NaN(f: f64) -> bool { f != f }\n@@ -230,43 +230,43 @@ pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath.\n     /// Archimedes' constant\n-    pub const pi: f64 = 3.14159265358979323846264338327950288_f64;\n+    pub static pi: f64 = 3.14159265358979323846264338327950288_f64;\n \n     /// pi/2.0\n-    pub const frac_pi_2: f64 = 1.57079632679489661923132169163975144_f64;\n+    pub static frac_pi_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n     /// pi/4.0\n-    pub const frac_pi_4: f64 = 0.785398163397448309615660845819875721_f64;\n+    pub static frac_pi_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n     /// 1.0/pi\n-    pub const frac_1_pi: f64 = 0.318309886183790671537767526745028724_f64;\n+    pub static frac_1_pi: f64 = 0.318309886183790671537767526745028724_f64;\n \n     /// 2.0/pi\n-    pub const frac_2_pi: f64 = 0.636619772367581343075535053490057448_f64;\n+    pub static frac_2_pi: f64 = 0.636619772367581343075535053490057448_f64;\n \n     /// 2.0/sqrt(pi)\n-    pub const frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517_f64;\n+    pub static frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517_f64;\n \n     /// sqrt(2.0)\n-    pub const sqrt2: f64 = 1.41421356237309504880168872420969808_f64;\n+    pub static sqrt2: f64 = 1.41421356237309504880168872420969808_f64;\n \n     /// 1.0/sqrt(2.0)\n-    pub const frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039_f64;\n+    pub static frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039_f64;\n \n     /// Euler's number\n-    pub const e: f64 = 2.71828182845904523536028747135266250_f64;\n+    pub static e: f64 = 2.71828182845904523536028747135266250_f64;\n \n     /// log2(e)\n-    pub const log2_e: f64 = 1.44269504088896340735992468100189214_f64;\n+    pub static log2_e: f64 = 1.44269504088896340735992468100189214_f64;\n \n     /// log10(e)\n-    pub const log10_e: f64 = 0.434294481903251827651128918916605082_f64;\n+    pub static log10_e: f64 = 0.434294481903251827651128918916605082_f64;\n \n     /// ln(2.0)\n-    pub const ln_2: f64 = 0.693147180559945309417232121458176568_f64;\n+    pub static ln_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n     /// ln(10.0)\n-    pub const ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n+    pub static ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n #[inline(always)]"}, {"sha": "65a846c6db14962312f1a41a5dca79e4101bd1d8", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -41,54 +41,54 @@ pub use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n pub use f64::signbit;\n pub use f64::{j0, j1, jn, y0, y1, yn};\n \n-pub const NaN: float = 0.0/0.0;\n+pub static NaN: float = 0.0/0.0;\n \n-pub const infinity: float = 1.0/0.0;\n+pub static infinity: float = 1.0/0.0;\n \n-pub const neg_infinity: float = -1.0/0.0;\n+pub static neg_infinity: float = -1.0/0.0;\n \n /* Module: consts */\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n-    // constants from cmath.\n-    /// Archimedes' constant\n-    pub const pi: float = 3.14159265358979323846264338327950288;\n+    // staticants from cmath.\n+    /// Archimedes' staticant\n+    pub static pi: float = 3.14159265358979323846264338327950288;\n \n     /// pi/2.0\n-    pub const frac_pi_2: float = 1.57079632679489661923132169163975144;\n+    pub static frac_pi_2: float = 1.57079632679489661923132169163975144;\n \n     /// pi/4.0\n-    pub const frac_pi_4: float = 0.785398163397448309615660845819875721;\n+    pub static frac_pi_4: float = 0.785398163397448309615660845819875721;\n \n     /// 1.0/pi\n-    pub const frac_1_pi: float = 0.318309886183790671537767526745028724;\n+    pub static frac_1_pi: float = 0.318309886183790671537767526745028724;\n \n     /// 2.0/pi\n-    pub const frac_2_pi: float = 0.636619772367581343075535053490057448;\n+    pub static frac_2_pi: float = 0.636619772367581343075535053490057448;\n \n     /// 2.0/sqrt(pi)\n-    pub const frac_2_sqrtpi: float = 1.12837916709551257389615890312154517;\n+    pub static frac_2_sqrtpi: float = 1.12837916709551257389615890312154517;\n \n     /// sqrt(2.0)\n-    pub const sqrt2: float = 1.41421356237309504880168872420969808;\n+    pub static sqrt2: float = 1.41421356237309504880168872420969808;\n \n     /// 1.0/sqrt(2.0)\n-    pub const frac_1_sqrt2: float = 0.707106781186547524400844362104849039;\n+    pub static frac_1_sqrt2: float = 0.707106781186547524400844362104849039;\n \n     /// Euler's number\n-    pub const e: float = 2.71828182845904523536028747135266250;\n+    pub static e: float = 2.71828182845904523536028747135266250;\n \n     /// log2(e)\n-    pub const log2_e: float = 1.44269504088896340735992468100189214;\n+    pub static log2_e: float = 1.44269504088896340735992468100189214;\n \n     /// log10(e)\n-    pub const log10_e: float = 0.434294481903251827651128918916605082;\n+    pub static log10_e: float = 0.434294481903251827651128918916605082;\n \n     /// ln(2.0)\n-    pub const ln_2: float = 0.693147180559945309417232121458176568;\n+    pub static ln_2: float = 0.693147180559945309417232121458176568;\n \n     /// ln(10.0)\n-    pub const ln_10: float = 2.30258509299404568401799145468436421;\n+    pub static ln_10: float = 2.30258509299404568401799145468436421;\n }\n \n /*"}, {"sha": "af56d3e63051a76f696c1cec9a74268d3d8660ac", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -21,11 +21,11 @@ use prelude::*;\n \n pub use cmp::{min, max};\n \n-pub const bits : uint = inst::bits;\n-pub const bytes : uint = (inst::bits / 8);\n+pub static bits : uint = inst::bits;\n+pub static bytes : uint = (inst::bits / 8);\n \n-pub const min_value: T = (-1 as T) << (bits - 1);\n-pub const max_value: T = min_value - 1 as T;\n+pub static min_value: T = (-1 as T) << (bits - 1);\n+pub static max_value: T = min_value - 1 as T;\n \n #[inline(always)]\n pub fn add(x: T, y: T) -> T { x + y }"}, {"sha": "965b6f86a53d60da339da7877278426dea6b3e5a", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use num::NumCast;\n \n mod inst {\n     pub type T = i16;\n-    pub const bits: uint = ::u16::bits;\n+    pub static bits: uint = ::u16::bits;\n }\n \n impl NumCast for i16 {"}, {"sha": "030bc9c3fdefe84a4113818390823ee80909b8b3", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use num::NumCast;\n \n mod inst {\n     pub type T = i32;\n-    pub const bits: uint = ::u32::bits;\n+    pub static bits: uint = ::u32::bits;\n }\n \n impl NumCast for i32 {"}, {"sha": "283de94e9d80eb70f1086ed090541db8225ac355", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use num::NumCast;\n \n mod inst {\n     pub type T = i64;\n-    pub const bits: uint = ::u64::bits;\n+    pub static bits: uint = ::u64::bits;\n }\n \n impl NumCast for i64 {"}, {"sha": "2f2de358337b75c2d770ad27faac1cd90e057c4f", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use num::NumCast;\n \n mod inst {\n     pub type T = i8;\n-    pub const bits: uint = ::u8::bits;\n+    pub static bits: uint = ::u8::bits;\n }\n \n impl NumCast for i8 {"}, {"sha": "3c89492c7e48e04aa52eb939aac357a291305c63", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,7 +16,7 @@ pub use self::inst::pow;\n \n mod inst {\n     pub type T = int;\n-    pub const bits: uint = ::uint::bits;\n+    pub static bits: uint = ::uint::bits;\n \n     /// Returns `base` raised to the power of `exponent`\n     pub fn pow(base: int, exponent: uint) -> int {"}, {"sha": "26f0582bfb2bac69787bb2ccc3df607887f3e987", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -394,9 +394,9 @@ pub fn to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n \n // Some constants for from_str_bytes_common's input validation,\n // they define minimum radix values for which the character is a valid digit.\n-priv const DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n-priv const DIGIT_I_RADIX: uint = ('i' as uint) - ('a' as uint) + 11u;\n-priv const DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n+priv static DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n+priv static DIGIT_I_RADIX: uint = ('i' as uint) - ('a' as uint) + 11u;\n+priv static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n \n /**\n  * Parses a byte slice as a number. This is meant to"}, {"sha": "41d90cc24826b0a215ed12559e425aa15bad2767", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -23,11 +23,11 @@ use prelude::*;\n \n pub use cmp::{min, max};\n \n-pub const bits : uint = inst::bits;\n-pub const bytes : uint = (inst::bits / 8);\n+pub static bits : uint = inst::bits;\n+pub static bytes : uint = (inst::bits / 8);\n \n-pub const min_value: T = 0 as T;\n-pub const max_value: T = 0 as T - 1 as T;\n+pub static min_value: T = 0 as T;\n+pub static max_value: T = 0 as T - 1 as T;\n \n #[inline(always)]\n pub fn add(x: T, y: T) -> T { x + y }"}, {"sha": "c73313ac0f34fe2736de8764248599e35dedadde", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,7 +16,7 @@ mod inst {\n     pub type T = u16;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i16;\n-    pub const bits: uint = 16;\n+    pub static bits: uint = 16;\n }\n \n impl NumCast for u16 {"}, {"sha": "eb63f1a370aecb9b4c70372b1075bbce612f9b57", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,7 +16,7 @@ mod inst {\n     pub type T = u32;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i32;\n-    pub const bits: uint = 32;\n+    pub static bits: uint = 32;\n }\n \n impl NumCast for u32 {"}, {"sha": "799421dc9767f79d134cb140637c4a9661f265f3", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,7 +16,7 @@ mod inst {\n     pub type T = u64;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i64;\n-    pub const bits: uint = 64;\n+    pub static bits: uint = 64;\n }\n \n impl NumCast for u64 {"}, {"sha": "b173d29510c04863cf869a942543b610762285e6", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -18,7 +18,7 @@ mod inst {\n     pub type T = u8;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i8;\n-    pub const bits: uint = 8;\n+    pub static bits: uint = 8;\n \n     // Type-specific functions here. These must be reexported by the\n     // parent module so that they appear in core::u8 and not core::u8::u8;"}, {"sha": "741e0f36a333bf86f86a269b0bccd2f20d46c1c4", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -28,10 +28,10 @@ pub mod inst {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n     #[cfg(target_arch = \"mips\")]\n-    pub const bits: uint = 32;\n+    pub static bits: uint = 32;\n \n     #[cfg(target_arch = \"x86_64\")]\n-    pub const bits: uint = 64;\n+    pub static bits: uint = 64;\n \n     /**\n     * Divide two numbers, return the result, rounded up."}, {"sha": "3c2dbf7ea15bc9be32dd4631f6b0ea32e0b12941", "filename": "src/libcore/os.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -65,8 +65,8 @@ pub mod rustrt {\n     }\n }\n \n-pub const TMPBUF_SZ : uint = 1000u;\n-const BUF_BYTES : uint = 2048u;\n+pub static TMPBUF_SZ : uint = 1000u;\n+static BUF_BYTES : uint = 2048u;\n \n pub fn getcwd() -> Path {\n     let buf = [0 as libc::c_char, ..BUF_BYTES];\n@@ -1013,8 +1013,8 @@ pub fn last_os_error() -> ~str {\n                                      args: *c_void) -> DWORD;\n         }\n \n-        const FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n-        const FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n+        static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n+        static FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n         let mut buf = [0 as c_char, ..TMPBUF_SZ];\n \n@@ -1170,11 +1170,11 @@ pub mod consts {\n     pub use os::consts::windows::*;\n \n     pub mod unix {\n-        pub const FAMILY: &'static str = \"unix\";\n+        pub static FAMILY: &'static str = \"unix\";\n     }\n \n     pub mod windows {\n-        pub const FAMILY: &'static str = \"windows\";\n+        pub static FAMILY: &'static str = \"windows\";\n     }\n \n     #[cfg(target_os = \"macos\")]\n@@ -1193,38 +1193,38 @@ pub mod consts {\n     pub use os::consts::win32::*;\n \n     pub mod macos {\n-        pub const SYSNAME: &'static str = \"macos\";\n-        pub const DLL_PREFIX: &'static str = \"lib\";\n-        pub const DLL_SUFFIX: &'static str = \".dylib\";\n-        pub const EXE_SUFFIX: &'static str = \"\";\n+        pub static SYSNAME: &'static str = \"macos\";\n+        pub static DLL_PREFIX: &'static str = \"lib\";\n+        pub static DLL_SUFFIX: &'static str = \".dylib\";\n+        pub static EXE_SUFFIX: &'static str = \"\";\n     }\n \n     pub mod freebsd {\n-        pub const SYSNAME: &'static str = \"freebsd\";\n-        pub const DLL_PREFIX: &'static str = \"lib\";\n-        pub const DLL_SUFFIX: &'static str = \".so\";\n-        pub const EXE_SUFFIX: &'static str = \"\";\n+        pub static SYSNAME: &'static str = \"freebsd\";\n+        pub static DLL_PREFIX: &'static str = \"lib\";\n+        pub static DLL_SUFFIX: &'static str = \".so\";\n+        pub static EXE_SUFFIX: &'static str = \"\";\n     }\n \n     pub mod linux {\n-        pub const SYSNAME: &'static str = \"linux\";\n-        pub const DLL_PREFIX: &'static str = \"lib\";\n-        pub const DLL_SUFFIX: &'static str = \".so\";\n-        pub const EXE_SUFFIX: &'static str = \"\";\n+        pub static SYSNAME: &'static str = \"linux\";\n+        pub static DLL_PREFIX: &'static str = \"lib\";\n+        pub static DLL_SUFFIX: &'static str = \".so\";\n+        pub static EXE_SUFFIX: &'static str = \"\";\n     }\n \n     pub mod android {\n-        pub const SYSNAME: &'static str = \"android\";\n-        pub const DLL_PREFIX: &'static str = \"lib\";\n-        pub const DLL_SUFFIX: &'static str = \".so\";\n-        pub const EXE_SUFFIX: &'static str = \"\";\n+        pub static SYSNAME: &'static str = \"android\";\n+        pub static DLL_PREFIX: &'static str = \"lib\";\n+        pub static DLL_SUFFIX: &'static str = \".so\";\n+        pub static EXE_SUFFIX: &'static str = \"\";\n     }\n \n     pub mod win32 {\n-        pub const SYSNAME: &'static str = \"win32\";\n-        pub const DLL_PREFIX: &'static str = \"\";\n-        pub const DLL_SUFFIX: &'static str = \".dll\";\n-        pub const EXE_SUFFIX: &'static str = \".exe\";\n+        pub static SYSNAME: &'static str = \"win32\";\n+        pub static DLL_PREFIX: &'static str = \"\";\n+        pub static DLL_SUFFIX: &'static str = \".dll\";\n+        pub static EXE_SUFFIX: &'static str = \".exe\";\n     }\n \n \n@@ -1241,16 +1241,16 @@ pub mod consts {\n     use os::consts::mips::*;\n \n     pub mod x86 {\n-        pub const ARCH: &'static str = \"x86\";\n+        pub static ARCH: &'static str = \"x86\";\n     }\n     pub mod x86_64 {\n-        pub const ARCH: &'static str = \"x86_64\";\n+        pub static ARCH: &'static str = \"x86_64\";\n     }\n     pub mod arm {\n-        pub const ARCH: &'static str = \"arm\";\n+        pub static ARCH: &'static str = \"arm\";\n     }\n     pub mod mips {\n-        pub const ARCH: &'static str = \"mips\";\n+        pub static ARCH: &'static str = \"mips\";\n     }\n }\n "}, {"sha": "9cf3e4d6114578ec5adeaf8cebd9b4bd6a1be7e3", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -96,7 +96,7 @@ use task;\n use vec;\n \n #[doc(hidden)]\n-const SPIN_COUNT: uint = 0;\n+static SPIN_COUNT: uint = 0;\n \n macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = *ptr::addr_of(&($x)); y } )"}, {"sha": "3085269f692ef843560c3d987625a227c56343a3", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -313,7 +313,7 @@ impl RngUtil for @Rng {\n         let u1 = self.next() as f64;\n         let u2 = self.next() as f64;\n         let u3 = self.next() as f64;\n-        const scale : f64 = (u32::max_value as f64) + 1.0f64;\n+        static scale : f64 = (u32::max_value as f64) + 1.0f64;\n         return ((u1 / scale + u2) / scale + u3) / scale;\n     }\n "}, {"sha": "4798399d5e9489756292f959f736b7da08c1b306", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -112,10 +112,10 @@ fn initialize_call_frame(regs: &mut Registers,\n                          fptr: *c_void, arg: *c_void, sp: *mut uint) {\n \n     // Redefinitions from regs.h\n-    const RUSTRT_ARG0: uint = 3;\n-    const RUSTRT_RSP: uint = 1;\n-    const RUSTRT_IP: uint = 8;\n-    const RUSTRT_RBP: uint = 2;\n+    static RUSTRT_ARG0: uint = 3;\n+    static RUSTRT_RSP: uint = 1;\n+    static RUSTRT_IP: uint = 8;\n+    static RUSTRT_RBP: uint = 2;\n \n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -1);"}, {"sha": "0beadb30d42c6534c80aecf8f9f557020d9db53b", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -282,7 +282,7 @@ pub impl Scheduler {\n     }\n }\n \n-const TASK_MIN_STACK_SIZE: uint = 10000000; // XXX: Too much stack\n+static TASK_MIN_STACK_SIZE: uint = 10000000; // XXX: Too much stack\n \n pub struct Task {\n     /// The task entry point, saved here for later destruction\n@@ -481,7 +481,7 @@ fn test_swap_tasks() {\n #[bench] #[test] #[ignore(reason = \"long test\")]\n fn test_run_a_lot_of_tasks_queued() {\n     do run_in_bare_thread {\n-        const MAX: int = 1000000;\n+        static MAX: int = 1000000;\n         let mut count = 0;\n         let count_ptr: *mut int = &mut count;\n \n@@ -514,7 +514,7 @@ fn test_run_a_lot_of_tasks_queued() {\n #[bench] #[test] #[ignore(reason = \"too much stack allocation\")]\n fn test_run_a_lot_of_tasks_direct() {\n     do run_in_bare_thread {\n-        const MAX: int = 100000;\n+        static MAX: int = 100000;\n         let mut count = 0;\n         let count_ptr: *mut int = &mut count;\n "}, {"sha": "5af8c79fd635c9439b8c5ce96aa3a238f3038433", "filename": "src/libcore/rt/thread_local_storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread_local_storage.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -56,7 +56,7 @@ pub type Key = DWORD;\n \n #[cfg(windows)]\n pub unsafe fn create(key: &mut Key) {\n-    const TLS_OUT_OF_INDEXES: DWORD = 0xFFFFFFFF;\n+    static TLS_OUT_OF_INDEXES: DWORD = 0xFFFFFFFF;\n     *key = unsafe { TlsAlloc() };\n     fail_unless!(*key != TLS_OUT_OF_INDEXES);\n }"}, {"sha": "19ce04bd66b5c577123a55f60cfb58f5ea608e00", "filename": "src/libcore/rt/uv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Frt%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -396,7 +396,7 @@ pub impl TcpWatcher {\n         data.connect_cb = Some(cb);\n \n         unsafe {\n-            const BACKLOG: c_int = 128; // XXX should be configurable\n+            static BACKLOG: c_int = 128; // XXX should be configurable\n             // XXX: This can probably fail\n             fail_unless!(0 == uvll::listen(self.native_handle(),\n                                            BACKLOG, connection_cb));\n@@ -848,7 +848,7 @@ fn connect_read() {\n #[ignore(reason = \"ffi struct issues\")]\n fn listen() {\n     do run_in_bare_thread() {\n-        const MAX: int = 10;\n+        static MAX: int = 10;\n         let mut loop_ = Loop::new();\n         let mut server_tcp_watcher = { TcpWatcher::new(&mut loop_) };\n         let addr = Ipv4(127, 0, 0, 1, 2925);"}, {"sha": "f26d9ee3492644403fb6e5836df0f2219834f39f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -1907,26 +1907,26 @@ pub fn any_between(s: &str, start: uint, end: uint,\n }\n \n // UTF-8 tags and ranges\n-const tag_cont_u8: u8 = 128u8;\n-const tag_cont: uint = 128u;\n-const max_one_b: uint = 128u;\n-const tag_two_b: uint = 192u;\n-const max_two_b: uint = 2048u;\n-const tag_three_b: uint = 224u;\n-const max_three_b: uint = 65536u;\n-const tag_four_b: uint = 240u;\n-const max_four_b: uint = 2097152u;\n-const tag_five_b: uint = 248u;\n-const max_five_b: uint = 67108864u;\n-const tag_six_b: uint = 252u;\n+static tag_cont_u8: u8 = 128u8;\n+static tag_cont: uint = 128u;\n+static max_one_b: uint = 128u;\n+static tag_two_b: uint = 192u;\n+static max_two_b: uint = 2048u;\n+static tag_three_b: uint = 224u;\n+static max_three_b: uint = 65536u;\n+static tag_four_b: uint = 240u;\n+static max_four_b: uint = 2097152u;\n+static tag_five_b: uint = 248u;\n+static max_five_b: uint = 67108864u;\n+static tag_six_b: uint = 252u;\n \n // Constants used for converting strs to floats\n-pub const inf_buf: [u8*3] = ['i' as u8, 'n' as u8, 'f' as u8];\n-pub const positive_inf_buf: [u8*4] = ['+' as u8, 'i' as u8,\n-                                      'n' as u8, 'f' as u8];\n-pub const negative_inf_buf: [u8*4] = ['-' as u8, 'i' as u8,\n-                                      'n' as u8, 'f' as u8];\n-pub const nan_buf: [u8*3] = ['N' as u8, 'a' as u8, 'N' as u8];\n+pub static inf_buf: [u8*3] = ['i' as u8, 'n' as u8, 'f' as u8];\n+pub static positive_inf_buf: [u8*4] = ['+' as u8, 'i' as u8,\n+                                       'n' as u8, 'f' as u8];\n+pub static negative_inf_buf: [u8*4] = ['-' as u8, 'i' as u8,\n+                                       'n' as u8, 'f' as u8];\n+pub static nan_buf: [u8*3] = ['N' as u8, 'a' as u8, 'N' as u8];\n \n /**\n  * Work with the byte buffer of a string."}, {"sha": "a6646605b752d9433115187c14efbb9e8fd2f1c7", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -1160,7 +1160,7 @@ fn test_child_doesnt_ref_parent() {\n     // climbing the task tree to dereference each ancestor. (See #1789)\n     // (well, it would if the constant were 8000+ - I lowered it to be more\n     // valgrind-friendly. try this at home, instead..!)\n-    const generations: uint = 16;\n+    static generations: uint = 16;\n     fn child_no(x: uint) -> ~fn() {\n         return || {\n             if x < generations {"}, {"sha": "40ef5fee47aa418e3b13d039ba8a0bcc4d879bb9", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -13,9 +13,9 @@\n use prelude::*;\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n-const SHIFT: uint = 4;\n-const SIZE: uint = 1 << SHIFT;\n-const MASK: uint = SIZE - 1;\n+static SHIFT: uint = 4;\n+static SIZE: uint = 1 << SHIFT;\n+static MASK: uint = SIZE - 1;\n \n enum Child<T> {\n     Internal(~TrieNode<T>),"}, {"sha": "029205f6bfae33cb8fbeb68bf81ffede55616735", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -687,12 +687,12 @@ pub mod rt {\n     use uint;\n     use vec;\n \n-    pub const flag_none : u32 = 0u32;\n-    pub const flag_left_justify   : u32 = 0b00000000000001u32;\n-    pub const flag_left_zero_pad  : u32 = 0b00000000000010u32;\n-    pub const flag_space_for_sign : u32 = 0b00000000000100u32;\n-    pub const flag_sign_always    : u32 = 0b00000000001000u32;\n-    pub const flag_alternate      : u32 = 0b00000000010000u32;\n+    pub static flag_none : u32 = 0u32;\n+    pub static flag_left_justify   : u32 = 0b00000000000001u32;\n+    pub static flag_left_zero_pad  : u32 = 0b00000000000010u32;\n+    pub static flag_space_for_sign : u32 = 0b00000000000100u32;\n+    pub static flag_sign_always    : u32 = 0b00000000001000u32;\n+    pub static flag_alternate      : u32 = 0b00000000010000u32;\n \n     pub enum Count { CountIs(uint), CountImplied, }\n "}, {"sha": "32e1b35d7db9f2e3002fffc4126190277ab22724", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -159,7 +159,7 @@ impl Drop for GlobalState {\n \n fn get_global_state() -> Exclusive<GlobalState> {\n \n-    const POISON: int = -1;\n+    static POISON: int = -1;\n \n     // FIXME #4728: Doing atomic_cxchg to initialize the global state\n     // lazily, which wouldn't be necessary with a runtime written"}, {"sha": "ea5dfa0a530c318011a4e29f6035c6a7affa1d64", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -22,9 +22,9 @@ use cast::transmute;\n pub type rust_task = c_void;\n \n #[cfg(target_word_size = \"32\")]\n-pub const FROZEN_BIT: uint = 0x80000000;\n+pub static FROZEN_BIT: uint = 0x80000000;\n #[cfg(target_word_size = \"64\")]\n-pub const FROZEN_BIT: uint = 0x8000000000000000;\n+pub static FROZEN_BIT: uint = 0x8000000000000000;\n \n pub mod rustrt {\n     use libc::{c_char, uintptr_t};"}, {"sha": "dcf9a493c558a02e82ce04b06e9806518d4fc6c8", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -26,8 +26,8 @@ fn choice<T:copy>(r : rand::rng, v : ~[const T]) -> T {\n fn likelihood(r : rand::rng, k : uint, n : uint) -> bool { under(r, n) < k }\n \n \n-const iters : uint = 1000u;\n-const vlen  : uint = 100u;\n+static iters : uint = 1000u;\n+static vlen  : uint = 100u;\n \n enum maybe_pointy {\n     none,"}, {"sha": "2ebc162eb6aeca2d2f65b6d1cee3fd4f6f963b42", "filename": "src/librust/rust.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -54,7 +54,7 @@ struct Command {\n     usage_full: UsageSource/&self\n }\n \n-const commands: &'static [Command/&static] = &[\n+static commands: &'static [Command/&static] = &[\n     Command{\n         cmd: \"build\",\n         action: Exec(\"rustc\"),\n@@ -199,7 +199,7 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n }\n \n fn usage() {\n-    const indent: uint = 8;\n+    static indent: uint = 8;\n \n     io::print(\n         \"The rust tool is a convenience for managing rust source code.\\n\\"}, {"sha": "70a029ede6f8d78efa63e321c69af5ee223a9035", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,64 +11,64 @@\n \n \n \n-pub const rc_base_field_refcnt: uint = 0u;\n+pub static rc_base_field_refcnt: uint = 0u;\n \n-pub const task_field_refcnt: uint = 0u;\n+pub static task_field_refcnt: uint = 0u;\n \n-pub const task_field_stk: uint = 2u;\n+pub static task_field_stk: uint = 2u;\n \n-pub const task_field_runtime_sp: uint = 3u;\n+pub static task_field_runtime_sp: uint = 3u;\n \n-pub const task_field_rust_sp: uint = 4u;\n+pub static task_field_rust_sp: uint = 4u;\n \n-pub const task_field_gc_alloc_chain: uint = 5u;\n+pub static task_field_gc_alloc_chain: uint = 5u;\n \n-pub const task_field_dom: uint = 6u;\n+pub static task_field_dom: uint = 6u;\n \n-pub const n_visible_task_fields: uint = 7u;\n+pub static n_visible_task_fields: uint = 7u;\n \n-pub const dom_field_interrupt_flag: uint = 1u;\n+pub static dom_field_interrupt_flag: uint = 1u;\n \n-pub const frame_glue_fns_field_mark: uint = 0u;\n+pub static frame_glue_fns_field_mark: uint = 0u;\n \n-pub const frame_glue_fns_field_drop: uint = 1u;\n+pub static frame_glue_fns_field_drop: uint = 1u;\n \n-pub const frame_glue_fns_field_reloc: uint = 2u;\n+pub static frame_glue_fns_field_reloc: uint = 2u;\n \n-pub const box_field_refcnt: uint = 0u;\n-pub const box_field_tydesc: uint = 1u;\n-pub const box_field_prev: uint = 2u;\n-pub const box_field_next: uint = 3u;\n-pub const box_field_body: uint = 4u;\n+pub static box_field_refcnt: uint = 0u;\n+pub static box_field_tydesc: uint = 1u;\n+pub static box_field_prev: uint = 2u;\n+pub static box_field_next: uint = 3u;\n+pub static box_field_body: uint = 4u;\n \n-pub const general_code_alignment: uint = 16u;\n+pub static general_code_alignment: uint = 16u;\n \n-pub const tydesc_field_size: uint = 0u;\n-pub const tydesc_field_align: uint = 1u;\n-pub const tydesc_field_take_glue: uint = 2u;\n-pub const tydesc_field_drop_glue: uint = 3u;\n-pub const tydesc_field_free_glue: uint = 4u;\n-pub const tydesc_field_visit_glue: uint = 5u;\n-pub const tydesc_field_shape: uint = 6u;\n-pub const tydesc_field_shape_tables: uint = 7u;\n-pub const n_tydesc_fields: uint = 8u;\n+pub static tydesc_field_size: uint = 0u;\n+pub static tydesc_field_align: uint = 1u;\n+pub static tydesc_field_take_glue: uint = 2u;\n+pub static tydesc_field_drop_glue: uint = 3u;\n+pub static tydesc_field_free_glue: uint = 4u;\n+pub static tydesc_field_visit_glue: uint = 5u;\n+pub static tydesc_field_shape: uint = 6u;\n+pub static tydesc_field_shape_tables: uint = 7u;\n+pub static n_tydesc_fields: uint = 8u;\n \n // The two halves of a closure: code and environment.\n-pub const fn_field_code: uint = 0u;\n-pub const fn_field_box: uint = 1u;\n+pub static fn_field_code: uint = 0u;\n+pub static fn_field_box: uint = 1u;\n \n-pub const vec_elt_fill: uint = 0u;\n+pub static vec_elt_fill: uint = 0u;\n \n-pub const vec_elt_alloc: uint = 1u;\n+pub static vec_elt_alloc: uint = 1u;\n \n-pub const vec_elt_elems: uint = 2u;\n+pub static vec_elt_elems: uint = 2u;\n \n-pub const slice_elt_base: uint = 0u;\n-pub const slice_elt_len: uint = 1u;\n+pub static slice_elt_base: uint = 0u;\n+pub static slice_elt_len: uint = 1u;\n \n-pub const worst_case_glue_call_args: uint = 7u;\n+pub static worst_case_glue_call_args: uint = 7u;\n \n-pub const abi_version: uint = 1u;\n+pub static abi_version: uint = 1u;\n \n pub fn memcpy_glue_name() -> ~str { return ~\"rust_memcpy_glue\"; }\n "}, {"sha": "28ebc3f424ef07984591e57aacf7f191c4d3dfdd", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -44,29 +44,29 @@ pub struct config {\n     float_type: float_ty\n }\n \n-pub const verbose: uint = 1 << 0;\n-pub const time_passes: uint = 1 << 1;\n-pub const count_llvm_insns: uint = 1 << 2;\n-pub const time_llvm_passes: uint = 1 << 3;\n-pub const trans_stats: uint = 1 << 4;\n-pub const no_asm_comments: uint = 1 << 5;\n-pub const no_verify: uint = 1 << 6;\n-pub const trace: uint = 1 << 7;\n-pub const coherence: uint = 1 << 8;\n-pub const borrowck_stats: uint = 1 << 9;\n-pub const borrowck_note_pure: uint = 1 << 10;\n-pub const borrowck_note_loan: uint = 1 << 11;\n-pub const no_landing_pads: uint = 1 << 12;\n-pub const debug_llvm: uint = 1 << 13;\n-pub const count_type_sizes: uint = 1 << 14;\n-pub const meta_stats: uint = 1 << 15;\n-pub const no_opt: uint = 1 << 16;\n-pub const no_monomorphic_collapse: uint = 1 << 17;\n-pub const gc: uint = 1 << 18;\n-pub const jit: uint = 1 << 19;\n-pub const debug_info: uint = 1 << 20;\n-pub const extra_debug_info: uint = 1 << 21;\n-pub const static: uint = 1 << 22;\n+pub static verbose: uint = 1 << 0;\n+pub static time_passes: uint = 1 << 1;\n+pub static count_llvm_insns: uint = 1 << 2;\n+pub static time_llvm_passes: uint = 1 << 3;\n+pub static trans_stats: uint = 1 << 4;\n+pub static no_asm_comments: uint = 1 << 5;\n+pub static no_verify: uint = 1 << 6;\n+pub static trace: uint = 1 << 7;\n+pub static coherence: uint = 1 << 8;\n+pub static borrowck_stats: uint = 1 << 9;\n+pub static borrowck_note_pure: uint = 1 << 10;\n+pub static borrowck_note_loan: uint = 1 << 11;\n+pub static no_landing_pads: uint = 1 << 12;\n+pub static debug_llvm: uint = 1 << 13;\n+pub static count_type_sizes: uint = 1 << 14;\n+pub static meta_stats: uint = 1 << 15;\n+pub static no_opt: uint = 1 << 16;\n+pub static no_monomorphic_collapse: uint = 1 << 17;\n+pub static gc: uint = 1 << 18;\n+pub static jit: uint = 1 << 19;\n+pub static debug_info: uint = 1 << 20;\n+pub static extra_debug_info: uint = 1 << 21;\n+pub static static: uint = 1 << 22;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),"}, {"sha": "6e134d25ff2cfb4562e3f231217020cc7964093d", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -19,7 +19,7 @@ use syntax::codemap;\n use syntax::codemap::dummy_sp;\n use syntax::fold;\n \n-const CORE_VERSION: &'static str = \"0.6\";\n+static CORE_VERSION: &'static str = \"0.6\";\n \n pub fn maybe_inject_libcore_ref(sess: Session,\n                                 crate: @ast::crate) -> @ast::crate {"}, {"sha": "401005310107ddd48a5bad8446a7437cffdac394", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -257,7 +257,7 @@ mod __test {\n     std::test::test_main_static(::os::args(), tests)\n   }\n \n-  const tests : &'static [std::test::TestDescAndFn] = &[\n+  static tests : &'static [std::test::TestDescAndFn] = &[\n     ... the list of tests in the crate ...\n   ];\n }\n@@ -360,7 +360,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n     let test_descs = mk_test_descs(cx);\n \n     (quote_item!(\n-        pub const tests : &'static [self::std::test::TestDescAndFn] =\n+        pub static tests : &'static [self::std::test::TestDescAndFn] =\n             $test_descs\n         ;\n     )).get()"}, {"sha": "e01c4ae7d727dc8485ac4fa31154ec4e6718a4cf", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -20,8 +20,8 @@ use std::oldmap::HashMap;\n pub type Opcode = u32;\n pub type Bool = c_uint;\n \n-pub const True: Bool = 1 as Bool;\n-pub const False: Bool = 0 as Bool;\n+pub static True: Bool = 1 as Bool;\n+pub static False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n "}, {"sha": "920631a55b4ec05ed56051f9cfb5d1456aecae55", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,84 +11,84 @@\n \n // EBML enum definitions and utils shared by the encoder and decoder\n \n-pub const tag_items: uint = 0x02u;\n+pub static tag_items: uint = 0x02u;\n \n-pub const tag_paths_data_name: uint = 0x04u;\n+pub static tag_paths_data_name: uint = 0x04u;\n \n-pub const tag_def_id: uint = 0x07u;\n+pub static tag_def_id: uint = 0x07u;\n \n-pub const tag_items_data: uint = 0x08u;\n+pub static tag_items_data: uint = 0x08u;\n \n-pub const tag_items_data_item: uint = 0x09u;\n+pub static tag_items_data_item: uint = 0x09u;\n \n-pub const tag_items_data_item_family: uint = 0x0au;\n+pub static tag_items_data_item_family: uint = 0x0au;\n \n-pub const tag_items_data_item_ty_param_bounds: uint = 0x0bu;\n+pub static tag_items_data_item_ty_param_bounds: uint = 0x0bu;\n \n-pub const tag_items_data_item_type: uint = 0x0cu;\n+pub static tag_items_data_item_type: uint = 0x0cu;\n \n-pub const tag_items_data_item_symbol: uint = 0x0du;\n+pub static tag_items_data_item_symbol: uint = 0x0du;\n \n-pub const tag_items_data_item_variant: uint = 0x0eu;\n+pub static tag_items_data_item_variant: uint = 0x0eu;\n \n-pub const tag_items_data_parent_item: uint = 0x0fu;\n+pub static tag_items_data_parent_item: uint = 0x0fu;\n \n-pub const tag_index: uint = 0x11u;\n+pub static tag_index: uint = 0x11u;\n \n-pub const tag_index_buckets: uint = 0x12u;\n+pub static tag_index_buckets: uint = 0x12u;\n \n-pub const tag_index_buckets_bucket: uint = 0x13u;\n+pub static tag_index_buckets_bucket: uint = 0x13u;\n \n-pub const tag_index_buckets_bucket_elt: uint = 0x14u;\n+pub static tag_index_buckets_bucket_elt: uint = 0x14u;\n \n-pub const tag_index_table: uint = 0x15u;\n+pub static tag_index_table: uint = 0x15u;\n \n-pub const tag_meta_item_name_value: uint = 0x18u;\n+pub static tag_meta_item_name_value: uint = 0x18u;\n \n-pub const tag_meta_item_name: uint = 0x19u;\n+pub static tag_meta_item_name: uint = 0x19u;\n \n-pub const tag_meta_item_value: uint = 0x20u;\n+pub static tag_meta_item_value: uint = 0x20u;\n \n-pub const tag_attributes: uint = 0x21u;\n+pub static tag_attributes: uint = 0x21u;\n \n-pub const tag_attribute: uint = 0x22u;\n+pub static tag_attribute: uint = 0x22u;\n \n-pub const tag_meta_item_word: uint = 0x23u;\n+pub static tag_meta_item_word: uint = 0x23u;\n \n-pub const tag_meta_item_list: uint = 0x24u;\n+pub static tag_meta_item_list: uint = 0x24u;\n \n // The list of crates that this crate depends on\n-pub const tag_crate_deps: uint = 0x25u;\n+pub static tag_crate_deps: uint = 0x25u;\n \n // A single crate dependency\n-pub const tag_crate_dep: uint = 0x26u;\n+pub static tag_crate_dep: uint = 0x26u;\n \n-pub const tag_crate_hash: uint = 0x28u;\n+pub static tag_crate_hash: uint = 0x28u;\n \n-pub const tag_parent_item: uint = 0x29u;\n+pub static tag_parent_item: uint = 0x29u;\n \n-pub const tag_crate_dep_name: uint = 0x2au;\n-pub const tag_crate_dep_hash: uint = 0x2bu;\n-pub const tag_crate_dep_vers: uint = 0x2cu;\n+pub static tag_crate_dep_name: uint = 0x2au;\n+pub static tag_crate_dep_hash: uint = 0x2bu;\n+pub static tag_crate_dep_vers: uint = 0x2cu;\n \n-pub const tag_mod_impl: uint = 0x30u;\n+pub static tag_mod_impl: uint = 0x30u;\n \n-pub const tag_item_trait_method: uint = 0x31u;\n-pub const tag_impl_trait: uint = 0x32u;\n+pub static tag_item_trait_method: uint = 0x31u;\n+pub static tag_impl_trait: uint = 0x32u;\n \n // discriminator value for variants\n-pub const tag_disr_val: uint = 0x34u;\n+pub static tag_disr_val: uint = 0x34u;\n \n // used to encode ast_map::path and ast_map::path_elt\n-pub const tag_path: uint = 0x40u;\n-pub const tag_path_len: uint = 0x41u;\n-pub const tag_path_elt_mod: uint = 0x42u;\n-pub const tag_path_elt_name: uint = 0x43u;\n-pub const tag_item_field: uint = 0x44u;\n-pub const tag_struct_mut: uint = 0x45u;\n-\n-pub const tag_region_param: uint = 0x46u;\n-pub const tag_mod_impl_trait: uint = 0x47u;\n+pub static tag_path: uint = 0x40u;\n+pub static tag_path_len: uint = 0x41u;\n+pub static tag_path_elt_mod: uint = 0x42u;\n+pub static tag_path_elt_name: uint = 0x43u;\n+pub static tag_item_field: uint = 0x44u;\n+pub static tag_struct_mut: uint = 0x45u;\n+\n+pub static tag_region_param: uint = 0x46u;\n+pub static tag_mod_impl_trait: uint = 0x47u;\n /*\n   trait items contain tag_item_trait_method elements,\n   impl items contain tag_item_impl_method elements, and classes\n@@ -97,16 +97,16 @@ pub const tag_mod_impl_trait: uint = 0x47u;\n   both, tag_item_trait_method and tag_item_impl_method have to be two\n   different tags.\n  */\n-pub const tag_item_impl_method: uint = 0x48u;\n-pub const tag_item_dtor: uint = 0x49u;\n-pub const tag_item_trait_method_self_ty: uint = 0x4b;\n-pub const tag_item_trait_method_self_ty_region: uint = 0x4c;\n+pub static tag_item_impl_method: uint = 0x48u;\n+pub static tag_item_dtor: uint = 0x49u;\n+pub static tag_item_trait_method_self_ty: uint = 0x4b;\n+pub static tag_item_trait_method_self_ty_region: uint = 0x4c;\n \n // Reexports are found within module tags. Each reexport contains def_ids\n // and names.\n-pub const tag_items_data_item_reexport: uint = 0x4d;\n-pub const tag_items_data_item_reexport_def_id: uint = 0x4e;\n-pub const tag_items_data_item_reexport_name: uint = 0x4f;\n+pub static tag_items_data_item_reexport: uint = 0x4d;\n+pub static tag_items_data_item_reexport_def_id: uint = 0x4e;\n+pub static tag_items_data_item_reexport_name: uint = 0x4f;\n \n // used to encode crate_ctxt side tables\n pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n@@ -136,9 +136,9 @@ pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_table_capture_map = 0x64\n }\n \n-pub const tag_item_trait_method_sort: uint = 0x70;\n+pub static tag_item_trait_method_sort: uint = 0x70;\n \n-pub const tag_item_impl_type_basename: uint = 0x71;\n+pub static tag_item_impl_type_basename: uint = 0x71;\n \n // Language items are a top-level directory (for speed). Hierarchy:\n //\n@@ -147,17 +147,17 @@ pub const tag_item_impl_type_basename: uint = 0x71;\n //   - tag_lang_items_item_id: u32\n //   - tag_lang_items_item_node_id: u32\n \n-pub const tag_lang_items: uint = 0x72;\n-pub const tag_lang_items_item: uint = 0x73;\n-pub const tag_lang_items_item_id: uint = 0x74;\n-pub const tag_lang_items_item_node_id: uint = 0x75;\n+pub static tag_lang_items: uint = 0x72;\n+pub static tag_lang_items_item: uint = 0x73;\n+pub static tag_lang_items_item_id: uint = 0x74;\n+pub static tag_lang_items_item_node_id: uint = 0x75;\n \n-pub const tag_item_unnamed_field: uint = 0x76;\n-pub const tag_items_data_item_struct_ctor: uint = 0x77;\n-pub const tag_items_data_item_visibility: uint = 0x78;\n+pub static tag_item_unnamed_field: uint = 0x76;\n+pub static tag_items_data_item_struct_ctor: uint = 0x77;\n+pub static tag_items_data_item_visibility: uint = 0x78;\n \n-pub const tag_link_args: uint = 0x79;\n-pub const tag_link_args_arg: uint = 0x7a;\n+pub static tag_link_args: uint = 0x79;\n+pub static tag_link_args_arg: uint = 0x7a;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "ccc29fbbccb26b79e52a89fbb485a1c76a59ee94", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -1313,7 +1313,7 @@ fn encode_hash(ebml_w: writer::Encoder, hash: &str) {\n }\n \n // NB: Increment this as you change the metadata encoding version.\n-pub const metadata_encoding_version : &'static [u8] =\n+pub static metadata_encoding_version : &'static [u8] =\n     &[0x72, //'r' as u8,\n       0x75, //'u' as u8,\n       0x73, //'s' as u8,"}, {"sha": "75247e78acaa92e906a88c20449872810792a0dd", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -58,7 +58,7 @@ use syntax::{visit, ast_util};\n \n use core::hashmap::linear::LinearSet;\n \n-pub const try_adding: &'static str = \"Try adding a move\";\n+pub static try_adding: &'static str = \"Try adding a move\";\n \n pub type rval_map = HashMap<node_id, ()>;\n "}, {"sha": "e3a595a855211665e4eda3617b31dba3bceffc27", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -653,9 +653,9 @@ struct Specials {\n     no_ret_var: Variable\n }\n \n-const ACC_READ: uint = 1u;\n-const ACC_WRITE: uint = 2u;\n-const ACC_USE: uint = 4u;\n+static ACC_READ: uint = 1u;\n+static ACC_WRITE: uint = 2u;\n+static ACC_USE: uint = 4u;\n \n type LiveNodeMap = HashMap<node_id, LiveNode>;\n "}, {"sha": "5e5cbc9f97191db1e2641d3e74fefc0a4f3a8632", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -178,7 +178,7 @@ pub fn IndirectBr(cx: block, Addr: ValueRef, NumDests: uint) {\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n pub fn noname() -> *libc::c_char {\n     unsafe {\n-        const cnull: uint = 0u;\n+        static cnull: uint = 0u;\n         return cast::reinterpret_cast(&ptr::addr_of(&cnull));\n     }\n }"}, {"sha": "0b7d6f5c39bfe6bcf5cb90b89d9a918bf27d2df7", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -76,8 +76,8 @@ pub type addrspace = c_uint;\n //    0 is ignored by the GC, and is used for all non-GC'd pointers.\n //    1 is for opaque GC'd boxes.\n //    >= 2 are for specific types (e.g. resources).\n-pub const default_addrspace: addrspace = 0;\n-pub const gc_box_addrspace: addrspace = 1;\n+pub static default_addrspace: addrspace = 0;\n+pub static gc_box_addrspace: addrspace = 1;\n \n pub type addrspace_gen = @fn() -> addrspace;\n pub fn new_addrspace_gen() -> addrspace_gen {\n@@ -615,7 +615,7 @@ pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, +kind: block_kind,\n }\n \n // First two args are retptr, env\n-pub const first_real_arg: uint = 2u;\n+pub static first_real_arg: uint = 2u;\n \n pub struct Result {\n     bcx: block,"}, {"sha": "ea34df54462b7eb6a607bc3732020e08b1f3f8ca", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -179,7 +179,7 @@ pub fn const_expr(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n             llconst = C_struct(~[llconst, C_null(T_opaque_box_ptr(cx))])\n         }\n         Some(@ty::AutoAddEnv(ref r, ref s)) => {\n-            cx.sess.span_bug(e.span, fmt!(\"unexpected const function: \\\n+            cx.sess.span_bug(e.span, fmt!(\"unexpected static function: \\\n                                            region %? sigil %?\", *r, *s))\n         }\n         Some(@ty::AutoDerefRef(ref adj)) => {"}, {"sha": "505c08fc8b8c11c4f25a342895ff50204c6b41c4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -29,32 +29,32 @@ use syntax::codemap::{span, CharPos};\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};\n \n-const LLVMDebugVersion: int = (9 << 16);\n-\n-const DW_LANG_RUST: int = 0x9000;\n-const DW_VIRTUALITY_none: int = 0;\n-\n-const CompileUnitTag: int = 17;\n-const FileDescriptorTag: int = 41;\n-const SubprogramTag: int = 46;\n-const SubroutineTag: int = 21;\n-const BasicTypeDescriptorTag: int = 36;\n-const AutoVariableTag: int = 256;\n-const ArgVariableTag: int = 257;\n-const ReturnVariableTag: int = 258;\n-const LexicalBlockTag: int = 11;\n-const PointerTypeTag: int = 15;\n-const StructureTypeTag: int = 19;\n-const MemberTag: int = 13;\n-const ArrayTypeTag: int = 1;\n-const SubrangeTag: int = 33;\n-\n-const DW_ATE_boolean: int = 0x02;\n-const DW_ATE_float: int = 0x04;\n-const DW_ATE_signed: int = 0x05;\n-const DW_ATE_signed_char: int = 0x06;\n-const DW_ATE_unsigned: int = 0x07;\n-const DW_ATE_unsigned_char: int = 0x08;\n+static LLVMDebugVersion: int = (9 << 16);\n+\n+static DW_LANG_RUST: int = 0x9000;\n+static DW_VIRTUALITY_none: int = 0;\n+\n+static CompileUnitTag: int = 17;\n+static FileDescriptorTag: int = 41;\n+static SubprogramTag: int = 46;\n+static SubroutineTag: int = 21;\n+static BasicTypeDescriptorTag: int = 36;\n+static AutoVariableTag: int = 256;\n+static ArgVariableTag: int = 257;\n+static ReturnVariableTag: int = 258;\n+static LexicalBlockTag: int = 11;\n+static PointerTypeTag: int = 15;\n+static StructureTypeTag: int = 19;\n+static MemberTag: int = 13;\n+static ArrayTypeTag: int = 1;\n+static SubrangeTag: int = 33;\n+\n+static DW_ATE_boolean: int = 0x02;\n+static DW_ATE_float: int = 0x04;\n+static DW_ATE_signed: int = 0x05;\n+static DW_ATE_signed_char: int = 0x06;\n+static DW_ATE_unsigned: int = 0x07;\n+static DW_ATE_unsigned_char: int = 0x08;\n \n fn llstr(s: &str) -> ValueRef {\n     do str::as_c_str(s) |sbuf| {"}, {"sha": "45cf790ccee20d3bc26d3da017446f49258d7d7f", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -47,9 +47,9 @@ use syntax::ast_util;\n use syntax::visit;\n \n pub type type_uses = uint; // Bitmask\n-pub const use_repr: uint = 1u;   /* Dependency on size/alignment/mode and\n-                                    take/drop glue */\n-pub const use_tydesc: uint = 2u; /* Takes the tydesc, or compares */\n+pub static use_repr: uint = 1u;   /* Dependency on size/alignment/mode and\n+                                     take/drop glue */\n+pub static use_tydesc: uint = 2u; /* Takes the tydesc, or compares */\n \n pub struct Context {\n     ccx: @CrateContext,"}, {"sha": "de626675fa3f10b68389dcbb70d0fd801c18e682", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -1801,43 +1801,43 @@ impl ToStr for TypeContents {\n }\n \n /// Constant for a type containing nothing of interest.\n-const TC_NONE: TypeContents =             TypeContents{bits:0b0000_00000000};\n+static TC_NONE: TypeContents =             TypeContents{bits:0b0000_00000000};\n \n /// Contains a borrowed value with a lifetime other than static\n-const TC_BORROWED_POINTER: TypeContents = TypeContents{bits:0b0000_00000001};\n+static TC_BORROWED_POINTER: TypeContents = TypeContents{bits:0b0000_00000001};\n \n /// Contains an owned pointer (~T) but not slice of some kind\n-const TC_OWNED_POINTER: TypeContents =    TypeContents{bits:0b000000000010};\n+static TC_OWNED_POINTER: TypeContents =    TypeContents{bits:0b000000000010};\n \n /// Contains an owned vector ~[] or owned string ~str\n-const TC_OWNED_VEC: TypeContents =        TypeContents{bits:0b000000000100};\n+static TC_OWNED_VEC: TypeContents =        TypeContents{bits:0b000000000100};\n \n /// Contains a ~fn() or a ~Trait, which is non-copyable.\n-const TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits:0b000000001000};\n+static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits:0b000000001000};\n \n /// Type with a destructor\n-const TC_DTOR: TypeContents =             TypeContents{bits:0b000000010000};\n+static TC_DTOR: TypeContents =             TypeContents{bits:0b000000010000};\n \n /// Contains a managed value\n-const TC_MANAGED: TypeContents =          TypeContents{bits:0b000000100000};\n+static TC_MANAGED: TypeContents =          TypeContents{bits:0b000000100000};\n \n /// &mut with any region\n-const TC_BORROWED_MUT: TypeContents =     TypeContents{bits:0b000001000000};\n+static TC_BORROWED_MUT: TypeContents =     TypeContents{bits:0b000001000000};\n \n /// Mutable content, whether owned or by ref\n-const TC_MUTABLE: TypeContents =          TypeContents{bits:0b000010000000};\n+static TC_MUTABLE: TypeContents =          TypeContents{bits:0b000010000000};\n \n /// Mutable content, whether owned or by ref\n-const TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits:0b000100000000};\n+static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits:0b000100000000};\n \n /// Something we estimate to be \"big\"\n-const TC_BIG: TypeContents =              TypeContents{bits:0b001000000000};\n+static TC_BIG: TypeContents =              TypeContents{bits:0b001000000000};\n \n /// An enum with no variants.\n-const TC_EMPTY_ENUM: TypeContents =       TypeContents{bits:0b010000000000};\n+static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits:0b010000000000};\n \n /// All possible contents.\n-const TC_ALL: TypeContents =              TypeContents{bits:0b011111111111};\n+static TC_ALL: TypeContents =              TypeContents{bits:0b011111111111};\n \n pub fn type_is_copyable(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_copy(cx)\n@@ -4076,21 +4076,21 @@ fn struct_item_fields(cx:ctxt,\n }\n \n pub fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n-    const tycat_other: int = 0;\n-    const tycat_bool: int = 1;\n-    const tycat_int: int = 2;\n-    const tycat_float: int = 3;\n-    const tycat_struct: int = 4;\n-    const tycat_bot: int = 5;\n-\n-    const opcat_add: int = 0;\n-    const opcat_sub: int = 1;\n-    const opcat_mult: int = 2;\n-    const opcat_shift: int = 3;\n-    const opcat_rel: int = 4;\n-    const opcat_eq: int = 5;\n-    const opcat_bit: int = 6;\n-    const opcat_logic: int = 7;\n+    static tycat_other: int = 0;\n+    static tycat_bool: int = 1;\n+    static tycat_int: int = 2;\n+    static tycat_float: int = 3;\n+    static tycat_struct: int = 4;\n+    static tycat_bot: int = 5;\n+\n+    static opcat_add: int = 0;\n+    static opcat_sub: int = 1;\n+    static opcat_mult: int = 2;\n+    static opcat_shift: int = 3;\n+    static opcat_rel: int = 4;\n+    static opcat_eq: int = 5;\n+    static opcat_bit: int = 6;\n+    static opcat_logic: int = 7;\n \n     fn opcat(op: ast::binop) -> int {\n         match op {\n@@ -4126,8 +4126,8 @@ pub fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n         }\n     }\n \n-    const t: bool = true;\n-    const f: bool = false;\n+    static t: bool = true;\n+    static f: bool = false;\n \n     let tbl = ~[\n     /*.          add,     shift,   bit"}, {"sha": "c288151308fe4624af6f5dd6a2f7b2a95d5c6b87", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -202,8 +202,8 @@ pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n \n-pub const NO_REGIONS: uint = 1;\n-pub const NO_TPS: uint = 2;\n+pub static NO_REGIONS: uint = 1;\n+pub static NO_TPS: uint = 2;\n \n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type"}, {"sha": "038dc524bec07e37a7ddc119d15697e30b957ac8", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -62,23 +62,23 @@ use syntax::ast;\n \n use core::vec;\n \n-pub const resolve_nested_tvar: uint = 0b0000000001;\n-pub const resolve_rvar: uint        = 0b0000000010;\n-pub const resolve_ivar: uint        = 0b0000000100;\n-pub const resolve_fvar: uint        = 0b0000001000;\n-pub const resolve_fnvar: uint       = 0b0000010000;\n-pub const resolve_all: uint         = 0b0000011111;\n-pub const force_tvar: uint          = 0b0000100000;\n-pub const force_rvar: uint          = 0b0001000000;\n-pub const force_ivar: uint          = 0b0010000000;\n-pub const force_fvar: uint          = 0b0100000000;\n-pub const force_fnvar: uint         = 0b1000000000;\n-pub const force_all: uint           = 0b1111100000;\n-\n-pub const not_regions: uint         = !(force_rvar | resolve_rvar);\n-\n-pub const try_resolve_tvar_shallow: uint = 0;\n-pub const resolve_and_force_all_but_regions: uint =\n+pub static resolve_nested_tvar: uint = 0b0000000001;\n+pub static resolve_rvar: uint        = 0b0000000010;\n+pub static resolve_ivar: uint        = 0b0000000100;\n+pub static resolve_fvar: uint        = 0b0000001000;\n+pub static resolve_fnvar: uint       = 0b0000010000;\n+pub static resolve_all: uint         = 0b0000011111;\n+pub static force_tvar: uint          = 0b0000100000;\n+pub static force_rvar: uint          = 0b0001000000;\n+pub static force_ivar: uint          = 0b0010000000;\n+pub static force_fvar: uint          = 0b0100000000;\n+pub static force_fnvar: uint         = 0b1000000000;\n+pub static force_all: uint           = 0b1111100000;\n+\n+pub static not_regions: uint         = !(force_rvar | resolve_rvar);\n+\n+pub static try_resolve_tvar_shallow: uint = 0;\n+pub static resolve_and_force_all_but_regions: uint =\n     (resolve_all | force_all) & not_regions;\n \n pub struct ResolveState {"}, {"sha": "6a4def65fe744a2a30eca6d73501b6eb6b616e44", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -47,7 +47,7 @@ struct RH {\n     sub: &[RH]\n }\n \n-const EMPTY_SOURCE_STR: &str = \"/* Hello, world! */\";\n+static EMPTY_SOURCE_STR: &str = \"/* Hello, world! */\";\n \n fn setup_env(test_name: &str, source_string: &str) -> Env {\n     let messages = @DVec();"}, {"sha": "c5fb8f289f65e81f4a1b7a392a57e0bb4f967e9a", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -24,7 +24,7 @@\n use core::prelude::*;\n \n /// The base price of a muffin on a non-holiday\n-const price_of_a_muffin: float = 70f;\n+static price_of_a_muffin: float = 70f;\n \n struct WaitPerson {\n     hair_color: ~str"}, {"sha": "957b94d18f5321a56eb82d241f3bee46ab6e38bd", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -127,8 +127,7 @@ fn extract(desc: Option<~str>) -> Option<~str> {\n }\n \n fn parse_desc(desc: ~str) -> Option<~str> {\n-\n-    const max_brief_len: uint = 120u;\n+    static max_brief_len: uint = 120u;\n \n     match first_sentence(copy desc) {\n       Some(first_sentence) => {"}, {"sha": "942dd3e01cbd550e1231364dfbf3caacb170e5d3", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -184,7 +184,7 @@ fn constdoc_from_const(itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n \n #[test]\n fn should_extract_const_name_and_id() {\n-    let doc = test::mk_doc(~\"const a: int = 0;\");\n+    let doc = test::mk_doc(~\"static a: int = 0;\");\n     fail_unless!(doc.cratemod().consts()[0].id() != 0);\n     fail_unless!(doc.cratemod().consts()[0].name() == ~\"a\");\n }"}, {"sha": "2cd9ef3671d6ec958c57177bd6dcb1b1792fe4cd", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -378,7 +378,7 @@ fn default_fold_should_produce_same_doc() {\n \n #[test]\n fn default_fold_should_produce_same_consts() {\n-    let source = ~\"const a: int = 0;\";\n+    let source = ~\"static a: int = 0;\";\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");\n     let fld = default_seq_fold(());"}, {"sha": "73f3aa53c250debd7d3018f184af3973a25bee53", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -594,15 +594,15 @@ fn write_const(\n \n #[test]\n fn should_write_const_header() {\n-    let markdown = test::render(~\"const a: bool = true;\");\n+    let markdown = test::render(~\"static a: bool = true;\");\n     fail_unless!(str::contains(markdown, ~\"## Const `a`\\n\\n\"));\n }\n \n #[test]\n fn should_write_const_description() {\n     let markdown = test::render(\n         ~\"#[doc = \\\"b\\\"]\\\n-         const a: bool = true;\");\n+         static a: bool = true;\");\n     fail_unless!(str::contains(markdown, ~\"\\n\\nb\\n\\n\"));\n }\n "}, {"sha": "5919f1b0c2fbead9f101a3946c9e5807abd29ff7", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -45,7 +45,7 @@ fn test() {\n         ~\"mod imod { } \\\n          extern mod inmod {\n          } \\\n-         const iconst: int = 0; \\\n+         static iconst: int = 0; \\\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\"}, {"sha": "1472f6777b48fe9bdbb5aa3bc1ae279d54171e44", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -121,7 +121,7 @@ fn fold_const(\n \n #[test]\n fn should_add_const_types() {\n-    let doc = test::mk_doc(~\"const a: bool = true;\");\n+    let doc = test::mk_doc(~\"static a: bool = true;\");\n     fail_unless!(doc.cratemod().consts()[0].sig == Some(~\"bool\"));\n }\n "}, {"sha": "8e5d7e95ae17ab6893457b5bbfb7ca5dfa47ff69", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -139,7 +139,7 @@ fn add_pkg_module(ctx: @mut ReadyCtx, m: ast::_mod) -> ast::_mod {\n     let item = quote_item! (\n         mod __pkg {\n             extern mod rustpkg (vers=\"0.6\");\n-            const listeners : &[rustpkg::Listener] = $listeners;\n+            static listeners : &[rustpkg::Listener] = $listeners;\n             #[main]\n             fn main() {\n                 rustpkg::run(listeners);"}, {"sha": "a26132d92ca0158f08efb91512f3af59b9d8d017", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -68,7 +68,7 @@ pub mod rustrt {\n \n // This probably belongs somewhere else. Needs to be kept in sync with\n // changes to glue...\n-const tydesc_drop_glue_index: size_t = 3 as size_t;\n+static tydesc_drop_glue_index: size_t = 3 as size_t;\n \n // The way arena uses arrays is really deeply awful. The arrays are\n // allocated, and have capacities reserved, but the fill for the array"}, {"sha": "564afea9f08358922e8b23f5fc1ed3d9df73503a", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -44,14 +44,14 @@ pub mod BigDigit {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n     #[cfg(target_arch = \"mips\")]\n-    pub const bits: uint = 16;\n+    pub static bits: uint = 16;\n \n     #[cfg(target_arch = \"x86_64\")]\n-    pub const bits: uint = 32;\n+    pub static bits: uint = 32;\n \n-    pub const base: uint = 1 << bits;\n-    priv const hi_mask: uint = (-1 as uint) << bits;\n-    priv const lo_mask: uint = (-1 as uint) >> bits;\n+    pub static base: uint = 1 << bits;\n+    priv static hi_mask: uint = (-1 as uint) << bits;\n+    priv static lo_mask: uint = (-1 as uint) >> bits;\n \n     priv fn get_hi(n: uint) -> BigDigit { (n >> bits) as BigDigit }\n     priv fn get_lo(n: uint) -> BigDigit { (n & lo_mask) as BigDigit }\n@@ -1046,9 +1046,9 @@ mod biguint_tests {\n         fail_unless!(BigUint::new(~[0, 0, -1]).to_uint() == uint::max_value);\n     }\n \n-    const sum_triples: &'static [(&'static [BigDigit],\n-                                 &'static [BigDigit],\n-                                 &'static [BigDigit])] = &[\n+    static sum_triples: &'static [(&'static [BigDigit],\n+                                   &'static [BigDigit],\n+                                   &'static [BigDigit])] = &[\n         (&[],          &[],       &[]),\n         (&[],          &[ 1],     &[ 1]),\n         (&[ 1],        &[ 1],     &[ 2]),\n@@ -1086,9 +1086,9 @@ mod biguint_tests {\n         }\n     }\n \n-    const mul_triples: &'static [(&'static [BigDigit],\n-                                 &'static [BigDigit],\n-                                 &'static [BigDigit])] = &[\n+    static mul_triples: &'static [(&'static [BigDigit],\n+                                   &'static [BigDigit],\n+                                   &'static [BigDigit])] = &[\n         (&[],               &[],               &[]),\n         (&[],               &[ 1],             &[]),\n         (&[ 2],             &[],               &[]),\n@@ -1112,10 +1112,10 @@ mod biguint_tests {\n         (&[ 0,  0,  1],     &[ 0,  0,  0,  1], &[0, 0,  0,  0,  0,  1])\n     ];\n \n-    const divmod_quadruples: &'static [(&'static [BigDigit],\n-                                       &'static [BigDigit],\n-                                       &'static [BigDigit],\n-                                       &'static [BigDigit])]\n+    static divmod_quadruples: &'static [(&'static [BigDigit],\n+                                         &'static [BigDigit],\n+                                         &'static [BigDigit],\n+                                         &'static [BigDigit])]\n         = &[\n             (&[ 1],        &[ 2], &[],               &[1]),\n             (&[ 1,  1],    &[ 2], &[-1/2+1],         &[1]),\n@@ -1400,9 +1400,9 @@ mod bigint_tests {\n         ).to_uint() == 0);\n     }\n \n-    const sum_triples: &'static [(&'static [BigDigit],\n-                                 &'static [BigDigit],\n-                                 &'static [BigDigit])] = &[\n+    static sum_triples: &'static [(&'static [BigDigit],\n+                                   &'static [BigDigit],\n+                                   &'static [BigDigit])] = &[\n         (&[],          &[],       &[]),\n         (&[],          &[ 1],     &[ 1]),\n         (&[ 1],        &[ 1],     &[ 2]),\n@@ -1452,9 +1452,9 @@ mod bigint_tests {\n         }\n     }\n \n-    const mul_triples: &'static [(&'static [BigDigit],\n-                                 &'static [BigDigit],\n-                                 &'static [BigDigit])] = &[\n+    static mul_triples: &'static [(&'static [BigDigit],\n+                                   &'static [BigDigit],\n+                                   &'static [BigDigit])] = &[\n         (&[],               &[],               &[]),\n         (&[],               &[ 1],             &[]),\n         (&[ 2],             &[],               &[]),\n@@ -1478,10 +1478,10 @@ mod bigint_tests {\n         (&[ 0,  0,  1],     &[ 0,  0,  0,  1], &[0, 0,  0,  0,  0,  1])\n     ];\n \n-    const divmod_quadruples: &'static [(&'static [BigDigit],\n-                                       &'static [BigDigit],\n-                                       &'static [BigDigit],\n-                                       &'static [BigDigit])]\n+    static divmod_quadruples: &'static [(&'static [BigDigit],\n+                                         &'static [BigDigit],\n+                                         &'static [BigDigit],\n+                                         &'static [BigDigit])]\n         = &[\n             (&[ 1],        &[ 2], &[],               &[1]),\n             (&[ 1,  1],    &[ 2], &[-1/2+1],         &[1]),"}, {"sha": "3acc95a3aad62d59d112da004552f5332649a27b", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -877,7 +877,7 @@ mod tests {\n     use core::vec;\n     use core::rand;\n \n-    const bench_bits : uint = 1 << 14;\n+    static bench_bits : uint = 1 << 14;\n \n     #[test]\n     pub fn test_to_str() {"}, {"sha": "93a2f4e2acc74051e282122fc2897b93e125e0c4", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use core::f32;\n use core::f64;\n use core::float;\n \n-pub const FUZZY_EPSILON: float = 1.0e-6;\n+pub static FUZZY_EPSILON: float = 1.0e-6;\n \n pub trait FuzzyEq<Eps> {\n     fn fuzzy_eq(&self, other: &Self) -> bool;"}, {"sha": "e6fcbdc84c8771cc30697fe6e09437d0feb06d4d", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ use core::container::{Container, Mutable};\n use core::prelude::*;\n use core::vec;\n \n-const initial_capacity: uint = 32u; // 2^5\n+static initial_capacity: uint = 32u; // 2^5\n \n pub struct Deque<T> {\n     priv nelts: uint,"}, {"sha": "92898af2993deb29dbb6d764a92b1f9a8c53f125", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -545,7 +545,7 @@ pub mod writer {\n \n     // Set to true to generate more debugging in EBML code.\n     // Totally lame approach.\n-    const debug: bool = false;\n+    static debug: bool = false;\n \n     priv impl Encoder {\n         // used internally to emit things like the vector length and so on"}, {"sha": "01d672c9b26f5c3d18cdd1b469e8e43b4ce2b9a0", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -254,7 +254,7 @@ pub trait ByteChan {\n     fn send(&self, val: ~[u8]);\n }\n \n-const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n \n impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n     fn recv(&self) -> T {\n@@ -921,7 +921,7 @@ mod test {\n         }\n \n         fn test_try_recv_none3<P:BytePort>(loader: PortLoader<P>) {\n-            const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+            static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n             // The control word is followed by garbage\n             let bytes = CONTINUE.to_vec() + ~[0];\n             let port = loader(bytes);\n@@ -940,7 +940,7 @@ mod test {\n \n         fn test_try_recv_none4<P:BytePort>(+loader: PortLoader<P>) {\n             fail_unless!(do task::try || {\n-                const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+                static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n                 // The control word is followed by a valid length,\n                 // then undeserializable garbage\n                 let len_bytes = do io::u64_to_be_bytes("}, {"sha": "02c610e4854d8fd79dafed54fd5d91b2cb51d5bc", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -51,7 +51,7 @@ pub mod chained {\n     use core::uint;\n     use core::vec;\n \n-    const initial_capacity: uint = 32u; // 2^5\n+    static initial_capacity: uint = 32u; // 2^5\n \n     struct Entry<K, V> {\n         hash: uint,"}, {"sha": "6f69ac4e1bd699ca39dc8980613b1acab7190930", "filename": "src/libstd/par.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -22,10 +22,10 @@ use future_spawn = future::spawn;\n  * The maximum number of tasks this module will spawn for a single\n  * operation.\n  */\n-const max_tasks : uint = 32u;\n+static max_tasks : uint = 32u;\n \n /// The minimum number of elements each task will process.\n-const min_granularity : uint = 1024u;\n+static min_granularity : uint = 1024u;\n \n /**\n  * An internal helper to map a function over a large vector and"}, {"sha": "51cf08c8ca1fe0c3ee5e75ad91d906dac929da21", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -636,14 +636,14 @@ pub mod node {\n      *\n      * This is not a strict value\n      */\n-    pub const hint_max_leaf_char_len: uint = 256u;\n+    pub static hint_max_leaf_char_len: uint = 256u;\n \n     /**\n      * The maximal height that _should_ be permitted in a tree.\n      *\n      * This is not a strict value\n      */\n-    pub const hint_max_node_height:   uint = 16u;\n+    pub static hint_max_node_height:   uint = 16u;\n \n     /**\n      * Adopt a string as a node."}, {"sha": "64399defd54f7a9e1a3fdc8bc20302d8755eef68", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -53,13 +53,13 @@ trait Sha1 {\n }\n \n // Some unexported constants\n-const digest_buf_len: uint = 5u;\n-const msg_block_len: uint = 64u;\n-const work_buf_len: uint = 80u;\n-const k0: u32 = 0x5A827999u32;\n-const k1: u32 = 0x6ED9EBA1u32;\n-const k2: u32 = 0x8F1BBCDCu32;\n-const k3: u32 = 0xCA62C1D6u32;\n+static digest_buf_len: uint = 5u;\n+static msg_block_len: uint = 64u;\n+static work_buf_len: uint = 80u;\n+static k0: u32 = 0x5A827999u32;\n+static k1: u32 = 0x6ED9EBA1u32;\n+static k2: u32 = 0x8F1BBCDCu32;\n+static k3: u32 = 0xCA62C1D6u32;\n \n \n /// Construct a `sha` object"}, {"sha": "33f585d32fc9ffc2942f76dead8d4053bcbcc61c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -177,9 +177,9 @@ impl<T:Copy + Ord + Eq> Sort for &'self mut [T] {\n     fn qsort(self) { quick_sort3(self); }\n }\n \n-const MIN_MERGE: uint = 64;\n-const MIN_GALLOP: uint = 7;\n-const INITIAL_TMP_STORAGE: uint = 128;\n+static MIN_MERGE: uint = 64;\n+static MIN_GALLOP: uint = 7;\n+static INITIAL_TMP_STORAGE: uint = 128;\n \n pub fn tim_sort<T:Copy + Ord>(array: &mut [T]) {\n     let size = array.len();"}, {"sha": "a6c8884e05d4dbb8c73cb4ff138027dd970b3ed4", "filename": "src/libstd/term.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -17,24 +17,24 @@ use core::vec;\n \n // FIXME (#2807): Windows support.\n \n-pub const color_black: u8 = 0u8;\n-pub const color_red: u8 = 1u8;\n-pub const color_green: u8 = 2u8;\n-pub const color_yellow: u8 = 3u8;\n-pub const color_blue: u8 = 4u8;\n-pub const color_magenta: u8 = 5u8;\n-pub const color_cyan: u8 = 6u8;\n-pub const color_light_gray: u8 = 7u8;\n-pub const color_light_grey: u8 = 7u8;\n-pub const color_dark_gray: u8 = 8u8;\n-pub const color_dark_grey: u8 = 8u8;\n-pub const color_bright_red: u8 = 9u8;\n-pub const color_bright_green: u8 = 10u8;\n-pub const color_bright_yellow: u8 = 11u8;\n-pub const color_bright_blue: u8 = 12u8;\n-pub const color_bright_magenta: u8 = 13u8;\n-pub const color_bright_cyan: u8 = 14u8;\n-pub const color_bright_white: u8 = 15u8;\n+pub static color_black: u8 = 0u8;\n+pub static color_red: u8 = 1u8;\n+pub static color_green: u8 = 2u8;\n+pub static color_yellow: u8 = 3u8;\n+pub static color_blue: u8 = 4u8;\n+pub static color_magenta: u8 = 5u8;\n+pub static color_cyan: u8 = 6u8;\n+pub static color_light_gray: u8 = 7u8;\n+pub static color_light_grey: u8 = 7u8;\n+pub static color_dark_gray: u8 = 8u8;\n+pub static color_dark_grey: u8 = 8u8;\n+pub static color_bright_red: u8 = 9u8;\n+pub static color_bright_green: u8 = 10u8;\n+pub static color_bright_yellow: u8 = 11u8;\n+pub static color_bright_blue: u8 = 12u8;\n+pub static color_bright_magenta: u8 = 13u8;\n+pub static color_bright_cyan: u8 = 14u8;\n+pub static color_bright_white: u8 = 15u8;\n \n pub fn esc(writer: @io::Writer) { writer.write(~[0x1bu8, '[' as u8]); }\n "}, {"sha": "d039e8eef5aa6bb9724a8fda9647ad9e69e047cb", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -477,10 +477,10 @@ fn run_tests(opts: &TestOpts,\n \n // Windows tends to dislike being overloaded with threads.\n #[cfg(windows)]\n-const sched_overcommit : uint = 1;\n+static sched_overcommit : uint = 1;\n \n #[cfg(unix)]\n-const sched_overcommit : uint = 4u;\n+static sched_overcommit : uint = 4u;\n \n fn get_concurrency() -> uint {\n     unsafe {"}, {"sha": "ce153c1ac24714bedea137a3a9d86ef0d4b54593", "filename": "src/libstd/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -17,7 +17,7 @@ use core::prelude::*;\n use core::result::{Result, Ok, Err};\n use core::str;\n \n-const NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n+static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n pub mod rustrt {\n     use super::Tm;\n@@ -900,8 +900,8 @@ mod tests {\n     use core::vec;\n \n     pub fn test_get_time() {\n-        const some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n-        const some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n+        static some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n+        static some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n         debug!(\"tv1=%? sec + %? nsec\", tv1.sec as uint, tv1.nsec as uint);"}, {"sha": "4fdd4e286da1a08d5a26956f47a2e06f97a7e54a", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 131, "deletions": 131, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -15,147 +15,147 @@ pub mod icu {\n     pub type UProperty = int;\n     pub type UChar32 = char;\n \n-    pub const TRUE : u8 = 1u8;\n-    pub const FALSE : u8 = 1u8;\n-\n-    pub const UCHAR_ALPHABETIC : UProperty = 0;\n-    pub const UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n-    pub const UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n-    pub const UCHAR_BIDI_CONTROL : UProperty = 2;\n-\n-    pub const UCHAR_BIDI_MIRRORED : UProperty = 3;\n-    pub const UCHAR_DASH : UProperty = 4;\n-    pub const UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n-    pub const UCHAR_DEPRECATED : UProperty = 6;\n-\n-    pub const UCHAR_DIACRITIC : UProperty = 7;\n-    pub const UCHAR_EXTENDER : UProperty = 8;\n-    pub const UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n-    pub const UCHAR_GRAPHEME_BASE : UProperty = 10;\n-\n-    pub const UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n-    pub const UCHAR_GRAPHEME_LINK : UProperty = 12;\n-    pub const UCHAR_HEX_DIGIT : UProperty = 13;\n-    pub const UCHAR_HYPHEN : UProperty = 14;\n-\n-    pub const UCHAR_ID_CONTINUE : UProperty = 15;\n-    pub const UCHAR_ID_START : UProperty = 16;\n-    pub const UCHAR_IDEOGRAPHIC : UProperty = 17;\n-    pub const UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n-\n-    pub const UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n-    pub const UCHAR_JOIN_CONTROL : UProperty = 20;\n-    pub const UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n-    pub const UCHAR_LOWERCASE : UProperty = 22;\n-\n-    pub const UCHAR_MATH : UProperty = 23;\n-    pub const UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n-    pub const UCHAR_QUOTATION_MARK : UProperty = 25;\n-    pub const UCHAR_RADICAL : UProperty = 26;\n-\n-    pub const UCHAR_SOFT_DOTTED : UProperty = 27;\n-    pub const UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n-    pub const UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n-    pub const UCHAR_UPPERCASE : UProperty = 30;\n-\n-    pub const UCHAR_WHITE_SPACE : UProperty = 31;\n-    pub const UCHAR_XID_CONTINUE : UProperty = 32;\n-    pub const UCHAR_XID_START : UProperty = 33;\n-    pub const UCHAR_CASE_SENSITIVE : UProperty = 34;\n-\n-    pub const UCHAR_S_TERM : UProperty = 35;\n-    pub const UCHAR_VARIATION_SELECTOR : UProperty = 36;\n-    pub const UCHAR_NFD_INERT : UProperty = 37;\n-    pub const UCHAR_NFKD_INERT : UProperty = 38;\n-\n-    pub const UCHAR_NFC_INERT : UProperty = 39;\n-    pub const UCHAR_NFKC_INERT : UProperty = 40;\n-    pub const UCHAR_SEGMENT_STARTER : UProperty = 41;\n-    pub const UCHAR_PATTERN_SYNTAX : UProperty = 42;\n-\n-    pub const UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n-    pub const UCHAR_POSIX_ALNUM : UProperty = 44;\n-    pub const UCHAR_POSIX_BLANK : UProperty = 45;\n-    pub const UCHAR_POSIX_GRAPH : UProperty = 46;\n-\n-    pub const UCHAR_POSIX_PRINT : UProperty = 47;\n-    pub const UCHAR_POSIX_XDIGIT : UProperty = 48;\n-    pub const UCHAR_CASED : UProperty = 49;\n-    pub const UCHAR_CASE_IGNORABLE : UProperty = 50;\n-\n-    pub const UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n-    pub const UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n-    pub const UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n-    pub const UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n-\n-    pub const UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n-    pub const UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n-    pub const UCHAR_BINARY_LIMIT : UProperty = 57;\n-    pub const UCHAR_BIDI_CLASS : UProperty = 0x1000;\n-\n-    pub const UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n-    pub const UCHAR_BLOCK : UProperty = 0x1001;\n-    pub const UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n-    pub const UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n-\n-    pub const UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n-    pub const UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n-    pub const UCHAR_JOINING_GROUP : UProperty = 0x1006;\n-    pub const UCHAR_JOINING_TYPE : UProperty = 0x1007;\n-\n-    pub const UCHAR_LINE_BREAK : UProperty = 0x1008;\n-    pub const UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n-    pub const UCHAR_SCRIPT : UProperty = 0x100A;\n-    pub const UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n-\n-    pub const UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n-    pub const UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n-    pub const UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n-    pub const UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n-\n-    pub const UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n-    pub const UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n-    pub const UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n-    pub const UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n-\n-    pub const UCHAR_WORD_BREAK : UProperty = 0x1014;\n-    pub const UCHAR_INT_LIMIT : UProperty = 0x1015;\n-\n-    pub const UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n-    pub const UCHAR_MASK_START : UProperty = 0x2000;\n+    pub static TRUE : u8 = 1u8;\n+    pub static FALSE : u8 = 1u8;\n+\n+    pub static UCHAR_ALPHABETIC : UProperty = 0;\n+    pub static UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n+    pub static UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n+    pub static UCHAR_BIDI_CONTROL : UProperty = 2;\n+\n+    pub static UCHAR_BIDI_MIRRORED : UProperty = 3;\n+    pub static UCHAR_DASH : UProperty = 4;\n+    pub static UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n+    pub static UCHAR_DEPRECATED : UProperty = 6;\n+\n+    pub static UCHAR_DIACRITIC : UProperty = 7;\n+    pub static UCHAR_EXTENDER : UProperty = 8;\n+    pub static UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n+    pub static UCHAR_GRAPHEME_BASE : UProperty = 10;\n+\n+    pub static UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n+    pub static UCHAR_GRAPHEME_LINK : UProperty = 12;\n+    pub static UCHAR_HEX_DIGIT : UProperty = 13;\n+    pub static UCHAR_HYPHEN : UProperty = 14;\n+\n+    pub static UCHAR_ID_CONTINUE : UProperty = 15;\n+    pub static UCHAR_ID_START : UProperty = 16;\n+    pub static UCHAR_IDEOGRAPHIC : UProperty = 17;\n+    pub static UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n+\n+    pub static UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n+    pub static UCHAR_JOIN_CONTROL : UProperty = 20;\n+    pub static UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n+    pub static UCHAR_LOWERCASE : UProperty = 22;\n+\n+    pub static UCHAR_MATH : UProperty = 23;\n+    pub static UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n+    pub static UCHAR_QUOTATION_MARK : UProperty = 25;\n+    pub static UCHAR_RADICAL : UProperty = 26;\n+\n+    pub static UCHAR_SOFT_DOTTED : UProperty = 27;\n+    pub static UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n+    pub static UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n+    pub static UCHAR_UPPERCASE : UProperty = 30;\n+\n+    pub static UCHAR_WHITE_SPACE : UProperty = 31;\n+    pub static UCHAR_XID_CONTINUE : UProperty = 32;\n+    pub static UCHAR_XID_START : UProperty = 33;\n+    pub static UCHAR_CASE_SENSITIVE : UProperty = 34;\n+\n+    pub static UCHAR_S_TERM : UProperty = 35;\n+    pub static UCHAR_VARIATION_SELECTOR : UProperty = 36;\n+    pub static UCHAR_NFD_INERT : UProperty = 37;\n+    pub static UCHAR_NFKD_INERT : UProperty = 38;\n+\n+    pub static UCHAR_NFC_INERT : UProperty = 39;\n+    pub static UCHAR_NFKC_INERT : UProperty = 40;\n+    pub static UCHAR_SEGMENT_STARTER : UProperty = 41;\n+    pub static UCHAR_PATTERN_SYNTAX : UProperty = 42;\n+\n+    pub static UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n+    pub static UCHAR_POSIX_ALNUM : UProperty = 44;\n+    pub static UCHAR_POSIX_BLANK : UProperty = 45;\n+    pub static UCHAR_POSIX_GRAPH : UProperty = 46;\n+\n+    pub static UCHAR_POSIX_PRINT : UProperty = 47;\n+    pub static UCHAR_POSIX_XDIGIT : UProperty = 48;\n+    pub static UCHAR_CASED : UProperty = 49;\n+    pub static UCHAR_CASE_IGNORABLE : UProperty = 50;\n+\n+    pub static UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n+    pub static UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n+    pub static UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n+    pub static UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n+\n+    pub static UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n+    pub static UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n+    pub static UCHAR_BINARY_LIMIT : UProperty = 57;\n+    pub static UCHAR_BIDI_CLASS : UProperty = 0x1000;\n+\n+    pub static UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n+    pub static UCHAR_BLOCK : UProperty = 0x1001;\n+    pub static UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n+    pub static UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n+\n+    pub static UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n+    pub static UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n+    pub static UCHAR_JOINING_GROUP : UProperty = 0x1006;\n+    pub static UCHAR_JOINING_TYPE : UProperty = 0x1007;\n+\n+    pub static UCHAR_LINE_BREAK : UProperty = 0x1008;\n+    pub static UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n+    pub static UCHAR_SCRIPT : UProperty = 0x100A;\n+    pub static UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n+\n+    pub static UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n+    pub static UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n+    pub static UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n+    pub static UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n+\n+    pub static UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n+    pub static UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n+    pub static UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n+    pub static UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n+\n+    pub static UCHAR_WORD_BREAK : UProperty = 0x1014;\n+    pub static UCHAR_INT_LIMIT : UProperty = 0x1015;\n+\n+    pub static UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n+    pub static UCHAR_MASK_START : UProperty = 0x2000;\n     // = UCHAR_GENERAL_CATEGORY_MASK\n-    pub const UCHAR_MASK_LIMIT : UProperty = 0x2001;\n+    pub static UCHAR_MASK_LIMIT : UProperty = 0x2001;\n \n-    pub const UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n-    pub const UCHAR_DOUBLE_START : UProperty = 0x3000;\n+    pub static UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n+    pub static UCHAR_DOUBLE_START : UProperty = 0x3000;\n     // = UCHAR_NUMERIC_VALUE\n-    pub const UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n+    pub static UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n \n-    pub const UCHAR_AGE : UProperty = 0x4000;\n-    pub const UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n-    pub const UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n-    pub const UCHAR_CASE_FOLDING : UProperty = 0x4002;\n+    pub static UCHAR_AGE : UProperty = 0x4000;\n+    pub static UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n+    pub static UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n+    pub static UCHAR_CASE_FOLDING : UProperty = 0x4002;\n \n-    pub const UCHAR_ISO_COMMENT : UProperty = 0x4003;\n-    pub const UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n-    pub const UCHAR_NAME : UProperty = 0x4005;\n-    pub const UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n+    pub static UCHAR_ISO_COMMENT : UProperty = 0x4003;\n+    pub static UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n+    pub static UCHAR_NAME : UProperty = 0x4005;\n+    pub static UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n \n-    pub const UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n-    pub const UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n-    pub const UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n-    pub const UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n+    pub static UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n+    pub static UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n+    pub static UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n+    pub static UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n \n-    pub const UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n-    pub const UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n-    pub const UCHAR_STRING_LIMIT : UProperty = 0x400D;\n+    pub static UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n+    pub static UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n+    pub static UCHAR_STRING_LIMIT : UProperty = 0x400D;\n \n-    pub const UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n-    pub const UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n+    pub static UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n+    pub static UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n     // = UCHAR_SCRIPT_EXTENSIONS;\n-    pub const UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n+    pub static UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n \n-    pub const UCHAR_INVALID_CODE : UProperty = -1;\n+    pub static UCHAR_INVALID_CODE : UProperty = -1;\n \n     pub mod libicu {\n         #[link_name = \"icuuc\"]"}, {"sha": "bef88e58a1795877808c77076a278dd96cc64e31", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -132,8 +132,8 @@ pub struct def_id {\n     node: node_id,\n }\n \n-pub const local_crate: crate_num = 0;\n-pub const crate_node_id: node_id = 0;\n+pub static local_crate: crate_num = 0;\n+pub static crate_node_id: node_id = 0;\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "a69b3e20eb1f17494d623f4a946dec965fb128bd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -493,7 +493,7 @@ pub fn core_macros() -> ~str {\n             mod $c {\n                 fn key(_x: @::core::condition::Handler<$in,$out>) { }\n \n-                pub const cond :\n+                pub static cond :\n                     ::core::condition::Condition/&static<$in,$out> =\n                     ::core::condition::Condition {\n                         name: stringify!($c),"}, {"sha": "79adabec9b773a62aa7561ed01f536355dca3224", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -16,13 +16,13 @@ use parse::token::Token;\n use core::prelude::*;\n \n /// Unary operators have higher precedence than binary\n-pub const unop_prec: uint = 100u;\n+pub static unop_prec: uint = 100u;\n \n /**\n  * Precedence of the `as` operator, which is a binary operator\n  * but is not represented in the precedence table.\n  */\n-pub const as_prec: uint = 11u;\n+pub static as_prec: uint = 11u;\n \n /**\n  * Maps a token to a record specifying the corresponding binary"}, {"sha": "074bb13e19908537372458a9744c3b36695c9c54", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -309,50 +309,50 @@ pub fn is_bar(t: &Token) -> bool {\n pub mod special_idents {\n     use ast::ident;\n \n-    pub const underscore : ident = ident { repr: 0u };\n-    pub const anon : ident = ident { repr: 1u };\n-    pub const dtor : ident = ident { repr: 2u }; // 'drop', but that's\n+    pub static underscore : ident = ident { repr: 0u };\n+    pub static anon : ident = ident { repr: 1u };\n+    pub static dtor : ident = ident { repr: 2u }; // 'drop', but that's\n                                                  // reserved\n-    pub const invalid : ident = ident { repr: 3u }; // ''\n-    pub const unary : ident = ident { repr: 4u };\n-    pub const not_fn : ident = ident { repr: 5u };\n-    pub const idx_fn : ident = ident { repr: 6u };\n-    pub const unary_minus_fn : ident = ident { repr: 7u };\n-    pub const clownshoes_extensions : ident = ident { repr: 8u };\n+    pub static invalid : ident = ident { repr: 3u }; // ''\n+    pub static unary : ident = ident { repr: 4u };\n+    pub static not_fn : ident = ident { repr: 5u };\n+    pub static idx_fn : ident = ident { repr: 6u };\n+    pub static unary_minus_fn : ident = ident { repr: 7u };\n+    pub static clownshoes_extensions : ident = ident { repr: 8u };\n \n-    pub const self_ : ident = ident { repr: 9u }; // 'self'\n+    pub static self_ : ident = ident { repr: 9u }; // 'self'\n \n     /* for matcher NTs */\n-    pub const item : ident = ident { repr: 10u };\n-    pub const block : ident = ident { repr: 11u };\n-    pub const stmt : ident = ident { repr: 12u };\n-    pub const pat : ident = ident { repr: 13u };\n-    pub const expr : ident = ident { repr: 14u };\n-    pub const ty : ident = ident { repr: 15u };\n-    pub const ident : ident = ident { repr: 16u };\n-    pub const path : ident = ident { repr: 17u };\n-    pub const tt : ident = ident { repr: 18u };\n-    pub const matchers : ident = ident { repr: 19u };\n-\n-    pub const str : ident = ident { repr: 20u }; // for the type\n+    pub static item : ident = ident { repr: 10u };\n+    pub static block : ident = ident { repr: 11u };\n+    pub static stmt : ident = ident { repr: 12u };\n+    pub static pat : ident = ident { repr: 13u };\n+    pub static expr : ident = ident { repr: 14u };\n+    pub static ty : ident = ident { repr: 15u };\n+    pub static ident : ident = ident { repr: 16u };\n+    pub static path : ident = ident { repr: 17u };\n+    pub static tt : ident = ident { repr: 18u };\n+    pub static matchers : ident = ident { repr: 19u };\n+\n+    pub static str : ident = ident { repr: 20u }; // for the type\n \n     /* outside of libsyntax */\n-    pub const ty_visitor : ident = ident { repr: 21u };\n-    pub const arg : ident = ident { repr: 22u };\n-    pub const descrim : ident = ident { repr: 23u };\n-    pub const clownshoe_abi : ident = ident { repr: 24u };\n-    pub const clownshoe_stack_shim : ident = ident { repr: 25u };\n-    pub const tydesc : ident = ident { repr: 26u };\n-    pub const literally_dtor : ident = ident { repr: 27u };\n-    pub const main : ident = ident { repr: 28u };\n-    pub const opaque : ident = ident { repr: 29u };\n-    pub const blk : ident = ident { repr: 30u };\n-    pub const static : ident = ident { repr: 31u };\n-    pub const intrinsic : ident = ident { repr: 32u };\n-    pub const clownshoes_foreign_mod: ident = ident { repr: 33 };\n-    pub const unnamed_field: ident = ident { repr: 34 };\n-    pub const c_abi: ident = ident { repr: 35 };\n-    pub const type_self: ident = ident { repr: 36 };    // `Self`\n+    pub static ty_visitor : ident = ident { repr: 21u };\n+    pub static arg : ident = ident { repr: 22u };\n+    pub static descrim : ident = ident { repr: 23u };\n+    pub static clownshoe_abi : ident = ident { repr: 24u };\n+    pub static clownshoe_stack_shim : ident = ident { repr: 25u };\n+    pub static tydesc : ident = ident { repr: 26u };\n+    pub static literally_dtor : ident = ident { repr: 27u };\n+    pub static main : ident = ident { repr: 28u };\n+    pub static opaque : ident = ident { repr: 29u };\n+    pub static blk : ident = ident { repr: 30u };\n+    pub static static : ident = ident { repr: 31u };\n+    pub static intrinsic : ident = ident { repr: 32u };\n+    pub static clownshoes_foreign_mod: ident = ident { repr: 33 };\n+    pub static unnamed_field: ident = ident { repr: 34 };\n+    pub static c_abi: ident = ident { repr: 35 };\n+    pub static type_self: ident = ident { repr: 36 };    // `Self`\n }\n \n pub struct ident_interner {"}, {"sha": "af9cb7b841ef65bd87fbc1ae71dc3ed3e11418b8", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -139,7 +139,7 @@ pub struct print_stack_elt {\n     pbreak: print_stack_break\n }\n \n-pub const size_infinity: int = 0xffff;\n+pub static size_infinity: int = 0xffff;\n \n pub fn mk_printer(out: @io::Writer, linewidth: uint) -> @mut Printer {\n     // Yes 3, it makes the ring buffers big enough to never"}, {"sha": "9b061faa2abfa9199741a60222ce87f68b082ae0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -92,10 +92,10 @@ pub fn rust_printer(writer: @io::Writer, intr: @ident_interner) -> @ps {\n     };\n }\n \n-pub const indent_unit: uint = 4u;\n-pub const match_indent_unit: uint = 2u;\n+pub static indent_unit: uint = 4u;\n+pub static match_indent_unit: uint = 2u;\n \n-pub const default_columns: uint = 78u;\n+pub static default_columns: uint = 78u;\n \n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to"}, {"sha": "17029b9d3778ae09a6fa036a09de4aa18aba7d4d", "filename": "src/test/auxiliary/cci_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_const.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,6 +11,6 @@\n pub extern fn bar() {\n }\n \n-pub const foopy: &'static str = \"hi there\";\n-pub const uint_val: uint = 12;\n-pub const uint_expr: uint = (1 << uint_val) - 1;\n+pub static foopy: &'static str = \"hi there\";\n+pub static uint_val: uint = 12;\n+pub static uint_expr: uint = (1 << uint_val) - 1;"}, {"sha": "97907025bd1a0743217b78bb24e63cbf9a2f15a7", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -167,10 +167,10 @@ pub mod NBodySystem {\n pub mod Body {\n     use Body;\n \n-    pub const PI: float = 3.141592653589793;\n-    pub const SOLAR_MASS: float = 39.478417604357432;\n+    pub static PI: float = 3.141592653589793;\n+    pub static SOLAR_MASS: float = 39.478417604357432;\n     // was 4 * PI * PI originally\n-    pub const DAYS_PER_YEAR: float = 365.24;\n+    pub static DAYS_PER_YEAR: float = 365.24;\n \n     pub struct Props {\n         x: float,"}, {"sha": "4964cea28ad91e50a51acaace3cbdf66b2a62f86", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -153,7 +153,7 @@ pub impl Sudoku {\n // Stores available colors as simple bitfield, bit 0 is always unset\n struct Colors(u16);\n \n-const heads: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n+static heads: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n \n impl Colors {\n     fn new(start_color: u8) -> Colors {\n@@ -182,7 +182,7 @@ impl Colors {\n     }\n }\n \n-const default_sudoku: [[u8 * 9] * 9] = [\n+static default_sudoku: [[u8 * 9] * 9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [0u8, 4u8, 0u8, 6u8, 0u8, 0u8, 0u8, 3u8, 2u8],\n   /* 1 */  [0u8, 0u8, 8u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8],\n@@ -196,7 +196,7 @@ const default_sudoku: [[u8 * 9] * 9] = [\n ];\n \n #[cfg(test)]\n-const default_solution: [[u8 * 9] * 9] = [\n+static default_solution: [[u8 * 9] * 9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [1u8, 4u8, 9u8, 6u8, 7u8, 5u8, 8u8, 3u8, 2u8],\n   /* 1 */  [5u8, 3u8, 8u8, 1u8, 2u8, 9u8, 7u8, 4u8, 6u8],"}, {"sha": "a66c00d5411b47b1e54b1726524a440c8636ab10", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:expected `~str` but found `int`\n \n-const i: str = 10i;\n+static i: ~str = 10i;\n fn main() { debug!(i); }"}, {"sha": "0d65aacb65b7a12540b559567eed7c3c5941f2d7", "filename": "src/test/compile-fail/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const foo: int = 5;\n+static foo: int = 5;\n \n fn main() {\n     // assigning to various global constants"}, {"sha": "56ec0bb92963601a890d044e7ba65308f77c5d7a", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: &'static str = &\"foo\";\n-const b: *u8 = a as *u8; //~ ERROR non-scalar cast\n-const c: *u8 = &a as *u8; //~ ERROR mismatched types\n+static a: &'static str = &\"foo\";\n+static b: *u8 = a as *u8; //~ ERROR non-scalar cast\n+static c: *u8 = &a as *u8; //~ ERROR mismatched types\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "677f4318db75911c3cf4a9fc97e18ff40e02cdc5", "filename": "src/test/compile-fail/const-cast-wrong-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n-const b: *i8 = &a as *i8; //~ ERROR mismatched types\n+static a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+static b: *i8 = &a as *i8; //~ ERROR mismatched types\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9c633e082b194d567b628d3460fa08202e3730cc", "filename": "src/test/compile-fail/const-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: recursive constant\n-const a: int = b;\n-const b: int = a;\n+static a: int = b;\n+static b: int = a;\n \n fn main() {\n }"}, {"sha": "d5663e57f4bf748648c52e439d1e53d072d45c47", "filename": "src/test/compile-fail/issue-2478.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,5 +12,5 @@\n fn foo() -> &'a int {\n     return &x;\n }\n-const x: int = 5;\n+static x: int = 5;\n fn main() {}"}, {"sha": "431f98d8181a05502519861290c76e8903a9748f", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let foo = 100;\n \n-    const y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n+    static y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n \n     error!(y);\n }"}, {"sha": "f7637f684be5af9121c680051c3f5a06a2b3c971", "filename": "src/test/compile-fail/issue-3668-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f(x:int) {\n-    const child: int = x + 1; //~ ERROR attempt to use a non-constant value in a constant\n+    static child: int = x + 1; //~ ERROR attempt to use a non-constant value in a constant\n }\n \n fn main() {}"}, {"sha": "77e2e4f21e8a1aa32de28745ce203d2e553322f3", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -15,7 +15,7 @@ trait PTrait {\n \n impl PTrait for P {\n    fn getChildOption(&self) -> Option<@P> {\n-       const childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n+       static childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n        fail!();\n    }\n }"}, {"sha": "6d072ce210e2d0241df18a11e8dcc97a0790ff4f", "filename": "src/test/compile-fail/issue-4523.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n fn foopy() {}\n \n-const f: &'static fn() = foopy; //~ ERROR mismatched types: expected `&'static fn()`\n+static f: &'static fn() = foopy; //~ ERROR mismatched types: expected `&'static fn()`\n \n fn main () {\n     f();"}, {"sha": "fc0c29e9a79879a13d25f1ee7357b3126eb1ab9e", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #4968\n \n-const A: (int,int) = (4,2);\n+static A: (int,int) = (4,2);\n fn main() {\n     match 42 { A => () } //~ ERROR mismatched types: expected `<VI0>` but found `(int,int)` (expected integral variable but found tuple)\n }"}, {"sha": "c34e5fb29de5ac71fffa5b992542145c172e3d90", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const c_x: &'blk int = &22; //~ ERROR Illegal lifetime 'blk: only 'static is allowed here\n-const c_y: &int = &22; //~ ERROR Illegal anonymous lifetime: only 'static is allowed here\n-const c_z: &'static int = &22;\n+static c_x: &'blk int = &22; //~ ERROR Illegal lifetime 'blk: only 'static is allowed here\n+static c_y: &int = &22; //~ ERROR Illegal anonymous lifetime: only 'static is allowed here\n+static c_z: &'static int = &22;\n \n fn main() {\n }"}, {"sha": "779fd3e490416999980d1dab0130035d6cf2bd4b", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -63,8 +63,8 @@ fn main() {\n     let ty = quote_ty!(int);\n     check_pp(ext_cx, ty, pprust::print_type, ~\"int\");\n \n-    let item = quote_item!(const x : int = 10;).get();\n-    check_pp(ext_cx, item, pprust::print_item, ~\"const x: int = 10;\");\n+    let item = quote_item!(static x : int = 10;).get();\n+    check_pp(ext_cx, item, pprust::print_item, ~\"static x: int = 10;\");\n \n     let stmt = quote_stmt!(let x = 20;);\n     check_pp(ext_cx, *stmt, pprust::print_stmt, ~\"let x = 20;\");"}, {"sha": "ccee163eafe5be6adb50e8bf5aa71dfe9f500e64", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -19,7 +19,7 @@ fn syntax_extension(ext_cx: @ext_ctxt) {\n     let p_toks : ~[syntax::ast::token_tree] = quote_tokens!((x, 1 .. 4, *));\n \n     let a: @syntax::ast::expr = quote_expr!(1 + 2);\n-    let _b: Option<@syntax::ast::item> = quote_item!( const foo : int = $e_toks; );\n+    let _b: Option<@syntax::ast::item> = quote_item!( static foo : int = $e_toks; );\n     let _c: @syntax::ast::pat = quote_pat!( (x, 1 .. 4, *) );\n     let _d: @syntax::ast::stmt = quote_stmt!( let x = $a; );\n     let _e: @syntax::ast::expr = quote_expr!( match foo { $p_toks => 10 } );"}, {"sha": "194f0e71b1733a2f73b6c96083afea68eae75fc1", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -15,9 +15,9 @@\n use flippity;\n \n #[cfg(bogus)]\n-const b: bool = false;\n+static b: bool = false;\n \n-const b: bool = true;\n+static b: bool = true;\n \n mod rustrt {\n     #[cfg(bogus)]\n@@ -102,8 +102,8 @@ fn test_in_fn_ctxt() {\n     f();\n \n     #[cfg(bogus)]\n-    const i: int = 0;\n-    const i: int = 1;\n+    static i: int = 0;\n+    static i: int = 1;\n     fail_unless!((i == 1));\n }\n "}, {"sha": "a157c46403bf352d0431834890074087750900c1", "filename": "src/test/run-pass/const-autoderef-newtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-autoderef-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-autoderef-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef-newtype.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct S(&'static [int]);\n-const C0: S = S([3]);\n-const C1: int = C0[0];\n+static C0: S = S([3]);\n+static C1: int = C0[0];\n \n pub fn main() {\n     fail_unless!(C1 == 3);"}, {"sha": "fa482c38d145bd4a1686ab7235b0d1aaf20f1fa3", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: [u8 * 1] = ['h' as u8];\n-const B: u8 = (&A)[0];\n-const C: &'static &'static &'static &'static [u8 * 1] = & & & &A;\n-const D: u8 = (&C)[0];\n+static A: [u8 * 1] = ['h' as u8];\n+static B: u8 = (&A)[0];\n+static C: &'static &'static &'static &'static [u8 * 1] = & & & &A;\n+static D: u8 = (&C)[0];\n \n pub fn main() {\n     fail_unless!(B == A[0]);"}, {"sha": "97544da41c024fb25ad5ee064261882880f3cd1c", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ enum Foo {\n     Quux(u64, u16)\n }\n \n-const X: Foo = Baz;\n+static X: Foo = Baz;\n \n pub fn main() {\n     match X {\n@@ -34,5 +34,5 @@ pub fn main() {\n     }\n }\n \n-const Y: Foo = Bar(2654435769);\n-const Z: Foo = Quux(0x123456789abcdef0, 0x1234);\n+static Y: Foo = Bar(2654435769);\n+static Z: Foo = Quux(0x123456789abcdef0, 0x1234);"}, {"sha": "eefd1aa642e1c2bc7565d29c04a087d9f17e7a0c", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: *u8 = 0 as *u8;\n+static a: *u8 = 0 as *u8;\n \n fn main() {\n     fail_unless!(a == ptr::null());"}, {"sha": "83f365a632018458daeb143f3d85054f7c42aa32", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,10 +10,10 @@\n \n extern fn foo() {}\n \n-const x: *u8 = foo;\n-const y: *libc::c_void = x as *libc::c_void;\n-const a: &'static int = &10;\n-const b: *int = a as *int;\n+static x: *u8 = foo;\n+static y: *libc::c_void = x as *libc::c_void;\n+static a: &'static int = &10;\n+static b: *int = a as *int;\n \n fn main() {\n     fail_unless!(x as *libc::c_void == y);"}, {"sha": "3f8a7da4c149d9df36cee9f3dde7c4ca70527408", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: int = 1;\n-const b: int = a + 2;\n+static a: int = 1;\n+static b: int = a + 2;\n \n pub fn main() {\n     fail_unless!(b == 3);"}, {"sha": "379089cc2a2d2e3ea3617a670eb35e9c176a601a", "filename": "src/test/run-pass/const-contents.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-contents.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,12 +10,12 @@\n \n // Issue #570\n \n-const lsl : int = 1 << 2;\n-const add : int = 1 + 2;\n-const addf : float = 1.0f + 2.0f;\n-const not : int = !0;\n-const notb : bool = !true;\n-const neg : int = -(1);\n+static lsl : int = 1 << 2;\n+static add : int = 1 + 2;\n+static addf : float = 1.0f + 2.0f;\n+static not : int = !0;\n+static notb : bool = !true;\n+static neg : int = -(1);\n \n pub fn main() {\n     fail_unless!((lsl == 4));"}, {"sha": "130f43cfddd344fc5165f330894583985ebd6c4e", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,9 +12,9 @@\n // aux-build:cci_const.rs\n \n extern mod cci_const;\n-const foo: &'static str = cci_const::foopy;\n-const a: uint = cci_const::uint_val;\n-const b: uint = cci_const::uint_expr + 5;\n+static foo: &'static str = cci_const::foopy;\n+static a: uint = cci_const::uint_val;\n+static b: uint = cci_const::uint_expr + 5;\n \n fn main() {\n     fail_unless!(a == 12);"}, {"sha": "723835a46d8490cde59016842c67237a4b7c3d1e", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -13,7 +13,7 @@\n \n extern mod cci_const;\n use cci_const::bar;\n-const foo: *u8 = bar;\n+static foo: *u8 = bar;\n \n fn main() {\n     fail_unless!(foo == cci_const::bar);"}, {"sha": "a69ca9cb939793ab50cddac50498a106c7d7f93a", "filename": "src/test/run-pass/const-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-deref.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const C: &'static int = &1000;\n-const D: int = *C;\n+static C: &'static int = &1000;\n+static D: int = *C;\n struct S(&'static int);\n-const E: &'static S = &S(C);\n-const F: int = ***E;\n+static E: &'static S = &S(C);\n+static F: int = ***E;\n \n pub fn main() {\n     fail_unless!(D == 1000);"}, {"sha": "c4e1ea727e47ed9e66ed76fd938ca1c948857b73", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V, VV(int) }\n-const C: E = V;\n+static C: E = V;\n \n pub impl E {\n     fn method(&self) {"}, {"sha": "83fafad4f99bbfcc1b6fe71c229c10b7b2078ce7", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V, VV(int) }\n-const C: E = V;\n+static C: E = V;\n \n fn f(a: &E) {\n     match *a {"}, {"sha": "20d7a94ccacf61b42cab3c3a51624cdabf5ebcc0", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,10 +12,10 @@ enum A { A1, A2 }\n enum B { B1=0, B2=2 }\n \n fn main () {\n-    const c1: int = A2 as int;\n-    const c2: int = B2 as int;\n-    const c3: float = A2 as float;\n-    const c4: float = B2 as float;\n+    static c1: int = A2 as int;\n+    static c2: int = B2 as int;\n+    static c3: float = A2 as float;\n+    static c4: float = B2 as float;\n     let a1 = A2 as int;\n     let a2 = B2 as int;\n     let a3 = A2 as float;"}, {"sha": "c1e3889d613d922dfcd3bd5f6a2ae3d869492379", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V0, V1(int) }\n-const C: &'static E = &V0;\n+static C: &'static E = &V0;\n \n pub fn main() {\n     match *C {"}, {"sha": "7da171cc0065352e6fa9a680274e079739a91a7f", "filename": "src/test/run-pass/const-enum-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }\n-const C: S = S { a: V16(0xDEAD), b: 0x600D, c: 0xBAD };\n+static C: S = S { a: V16(0xDEAD), b: 0x600D, c: 0xBAD };\n \n pub fn main() {\n     let n = C.b;"}, {"sha": "c24db8414c41675f6284e6d2d8e781710bcf8f98", "filename": "src/test/run-pass/const-enum-struct2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }\n-const C: S = S { a: V0, b: 0x600D, c: 0xBAD };\n+static C: S = S { a: V0, b: 0x600D, c: 0xBAD };\n \n pub fn main() {\n     let n = C.b;"}, {"sha": "86640bcc408e1609fdc569c91d465a5bf147bd89", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -13,7 +13,7 @@ enum E {\n     S1 { u: uint }\n }\n \n-const C: E = S1 { u: 23 };\n+static C: E = S1 { u: 23 };\n \n fn main() {\n     match C {"}, {"sha": "acefd4ff878b8c48c5da6436e5eda29c02bb00fa", "filename": "src/test/run-pass/const-enum-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V16(u16), V32(u32) }\n-const C: (E, u16, u16) = (V16(0xDEAD), 0x600D, 0xBAD);\n+static C: (E, u16, u16) = (V16(0xDEAD), 0x600D, 0xBAD);\n \n pub fn main() {\n     let (_, n, _) = C;"}, {"sha": "63f1f41d9ab5a46045751bb827392ac8ed9e7da7", "filename": "src/test/run-pass/const-enum-tuple2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V0, V16(u16) }\n-const C: (E, u16, u16) = (V0, 0x600D, 0xBAD);\n+static C: (E, u16, u16) = (V0, 0x600D, 0xBAD);\n \n pub fn main() {\n     let (_, n, _) = C;"}, {"sha": "b0d321abb09e7702448382bbc605acfd08db8c6e", "filename": "src/test/run-pass/const-enum-tuplestruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);\n-const C: S = S(V16(0xDEAD), 0x600D, 0xBAD);\n+static C: S = S(V16(0xDEAD), 0x600D, 0xBAD);\n \n pub fn main() {\n     let S(_, n, _) = C;"}, {"sha": "7fa04af3f9a583a3d8a9d023f1cef9e6b01573ee", "filename": "src/test/run-pass/const-enum-tuplestruct2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n enum E { V0, V16(u16) }\n struct S(E, u16, u16);\n-const C: S = S(V0, 0x600D, 0xBAD);\n+static C: S = S(V0, 0x600D, 0xBAD);\n \n pub fn main() {\n     let S(_, n, _) = C;"}, {"sha": "fd11fc422726f0f9253db2670b6f9638859309fd", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-const C: &'static [E] = &[V0, V1(0xDEADBEE)];\n-const C0: E = C[0];\n-const C1: E = C[1];\n+static C: &'static [E] = &[V0, V1(0xDEADBEE)];\n+static C0: E = C[0];\n+static C1: E = C[1];\n \n pub fn main() {\n     match C0 { "}, {"sha": "8d152dca54c31366b3aef320c74ea933d8667b76", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-const C: &'static [E] = &[V0, V1(0xDEADBEE), V0];\n+static C: &'static [E] = &[V0, V1(0xDEADBEE), V0];\n \n pub fn main() {\n     match C[1] {"}, {"sha": "db7982c451fa09dd1df674e466fa7c5129c72a88", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-const C: [E * 3] = [V0, V1(0xDEADBEE), V0];\n+static C: [E * 3] = [V0, V1(0xDEADBEE), V0];\n \n pub fn main() {\n     match C[1] {"}, {"sha": "69585c9d31c9ead2124e6c1927b9cc5b80032721", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n \n-    const FOO: int = 2;\n+    static FOO: int = 2;\n     let _v: [int * FOO*3];\n \n }"}, {"sha": "a04c588c07bc1dafb917e610712597586990f27d", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n \n-    const FOO: int = 2;\n+    static FOO: int = 2;\n     let _v = [0, ..FOO*3*2/2];\n \n }"}, {"sha": "5e7ac4e4518ae4d5857e1fa984c04e2641d16f42", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,8 +10,8 @@\n \n extern fn foopy() {}\n \n-const f: *u8 = foopy;\n-const s: S = S { f: foopy };\n+static f: *u8 = foopy;\n+static s: S = S { f: foopy };\n \n struct S {\n     f: *u8"}, {"sha": "a3611c5eb26586a68370aad3ecdfcaf151b72809", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,22 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const x : [int * 4] = [1,2,3,4];\n-const p : int = x[2];\n-const y : &'static [int] = &[1,2,3,4];\n-const q : int = y[2];\n+static x : [int * 4] = [1,2,3,4];\n+static p : int = x[2];\n+static y : &'static [int] = &[1,2,3,4];\n+static q : int = y[2];\n \n struct S {a: int, b: int}\n \n-const s : S = S {a: 10, b: 20};\n-const t : int = s.b;\n+static s : S = S {a: 10, b: 20};\n+static t : int = s.b;\n \n struct K {a: int, b: int, c: D}\n struct D { d: int, e: int }\n \n-const k : K = K {a: 10, b: 20, c: D {d: 30,\n-                                     e: 40}};\n-const m : int = k.c.e;\n+static k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n+static m : int = k.c.e;\n \n pub fn main() {\n     io::println(fmt!(\"%?\", p));"}, {"sha": "1c0cfa64d88f2f4b131c83adefa484d1252534f7", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ fn foo() -> int {\n \n struct Bar { f: &'self fn() -> int }\n \n-const b : Bar/&static = Bar { f: foo };\n+static b : Bar/&static = Bar { f: foo };\n \n pub fn main() {\n     fail_unless!((b.f)() == 0xca7f000d);"}, {"sha": "e2add6409f75dbfc3aaff7c8e01c58481be838c7", "filename": "src/test/run-pass/const-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-negative.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n // Issue #358\n \n-const toplevel_mod: int = -1;\n+static toplevel_mod: int = -1;\n \n pub fn main() {\n     fail_unless!(toplevel_mod == -1);"}, {"sha": "bc61c8e9aecf5e47bba25f8abaa74e3d8f0a3e78", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -14,7 +14,7 @@ enum Foo {\n     Boo,\n }\n \n-const X: Foo = Bar;\n+static X: Foo = Bar;\n \n pub fn main() {\n     match X {\n@@ -27,4 +27,4 @@ pub fn main() {\n     }\n }\n \n-const Y: Foo = Baz;\n+static Y: Foo = Baz;"}, {"sha": "75fd2774095c1eb6042d957e30a87323a5243b80", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,11 +12,11 @@ enum Foo {\n     Bar = 0xDEADBEE\n }\n \n-const X: Foo = Bar;\n+static X: Foo = Bar;\n \n pub fn main() {\n     fail_unless!(((X as uint) == 0xDEADBEE));\n     fail_unless!(((Y as uint) == 0xDEADBEE));\n }\n \n-const Y: Foo = Bar;\n+static Y: Foo = Bar;"}, {"sha": "77d4521e7094314997a4cf2bb69c3e55f1f8bd56", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,11 +12,11 @@ struct Pair { a: float, b: float }\n \n struct AnotherPair { x: (i64, i64), y: Pair }\n \n-const x : (i32,i32) = (0xfeedf00dd,0xca11ab1e);\n-const y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n-                                         0xabababab_abababab),\n-                           y: Pair { a: 3.14159265358979323846,\n-                                     b: 2.7182818284590452354 }};\n+static x : (i32,i32) = (0xfeedf00dd,0xca11ab1e);\n+static y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n+                                          0xabababab_abababab),\n+                            y: Pair { a: 3.14159265358979323846,\n+                                      b: 2.7182818284590452354 }};\n \n pub fn main() {\n     let (p, _) = y.x;"}, {"sha": "23d1d63f1899613d5cd966213ee707e156c859c4", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,8 +10,8 @@\n \n type Big = [u64 * 8];\n struct Pair { a: int, b: &'self Big }\n-const x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n-const y: &'static Pair<'static> = &Pair {a: 15, b: x};\n+static x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n+static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n     fail_unless!(ptr::addr_of(x) == ptr::addr_of(y.b));"}, {"sha": "32c5f65bf3adeb75090f53e1fe86e96bb232ba40", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,9 +11,9 @@\n \n struct Pair { a: int, b: &'self int }\n \n-const x: &'static int = &10;\n+static x: &'static int = &10;\n \n-const y: &'static Pair<'static> = &Pair {a: 15, b: x};\n+static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n     io::println(fmt!(\"x = %?\", *x));"}, {"sha": "2560431b53209ebd2b4aa2cca56182962729e34d", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n-const c: &'static [u8 * 3] = &a;\n-const b: *u8 = c as *u8;\n+static a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+static c: &'static [u8 * 3] = &a;\n+static b: *u8 = c as *u8;\n \n fn main() {\n     let foo = &a as *u8;"}, {"sha": "a826f7bf564cdafdd216947d357bd9a84c3a7a1b", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -20,9 +20,9 @@ impl cmp::Eq for foo {\n     fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n }\n \n-const x : foo = foo { a:1, b:2, c: 3 };\n-const y : foo = foo { b:2, c:3, a: 1 };\n-const z : &'static foo = &foo { a: 10, b: 22, c: 12 };\n+static x : foo = foo { a:1, b:2, c: 3 };\n+static y : foo = foo { b:2, c:3, a: 1 };\n+static z : &'static foo = &foo { a: 10, b: 22, c: 12 };\n \n pub fn main() {\n     fail_unless!(x.b == 2);"}, {"sha": "857997b29d2643fa225042ea537a9e244a727863", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n struct Bar(int, int);\n \n-const X: Bar = Bar(1, 2);\n+static X: Bar = Bar(1, 2);\n \n pub fn main() {\n     match X {"}, {"sha": "b4acde098baf36d7592ff48b86441e183fc40426", "filename": "src/test/run-pass/const-unit-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n struct Foo;\n \n-const X: Foo = Foo;\n+static X: Foo = Foo;\n \n pub fn main() {\n     match X {"}, {"sha": "deb1a0769f73ce344471254272f27630cba5f04d", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n /*!\n- * Try to double-check that const fns have the right size (with or\n+ * Try to double-check that static fns have the right size (with or\n  * without dummy env ptr, as appropriate) by iterating a size-2 array.\n- * If the const size differs from the runtime size, the second element\n+ * If the static size differs from the runtime size, the second element\n  * should be read as a null or otherwise wrong pointer and crash.\n  */\n \n fn f() { }\n-const bare_fns: &'static [extern fn()] = &[f, f];\n+static bare_fns: &'static [extern fn()] = &[f, f];\n struct S<'self>(&'self fn());\n-const closures: &'static [S<'static>] = &[S(f), S(f)];\n+static closures: &'static [S<'static>] = &[S(f), S(f)];\n \n pub fn main() {\n     for bare_fns.each |&bare_fn| { bare_fn() }"}, {"sha": "736335464b24df49a7fd84ba933254c8a5aa8ad8", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const x : [int * 4] = [1,2,3,4];\n-const y : &'static [int] = &[1,2,3,4];\n+static x : [int * 4] = [1,2,3,4];\n+static y : &'static [int] = &[1,2,3,4];\n \n pub fn main() {\n     io::println(fmt!(\"%?\", x[1]));"}, {"sha": "d9d84c3fd504887908ca9c917c398771ea28b64e", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-const i: int = 10;\n+static i: int = 10;\n \n pub fn main() { debug!(\"%i\", i); }"}, {"sha": "5e79838c4b7a3df372b8eda1ac4c2c88493f2fd3", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const FOO: int = 10;\n-const BAR: int = 3;\n+static FOO: int = 10;\n+static BAR: int = 3;\n \n pub fn main() {\n     let x: int = 3;"}, {"sha": "3e48b8f05baee1d31e341cc0dc6bd9e6d7eaf383", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-const tau: float = 2.0*3.14159265358979323;\n+static tau: float = 2.0*3.14159265358979323;\n \n struct Point {x: float, y: float}\n struct Size {w: float, h: float}"}, {"sha": "6b97c9031f0a9c9d95502262b154c3a9f52d1ebe", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -18,7 +18,7 @@\n mod foo {\n     use foo::bar::*;\n     pub mod bar {\n-        pub const a : int = 10;\n+        pub static a : int = 10;\n     }\n     pub fn zum() {\n         let b = a;"}, {"sha": "430da7a3f608b512dcf8d80e165622321808b669", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -11,7 +11,7 @@\n mod foo {\n     #[nolink]\n     pub extern {\n-        pub const errno: int;\n+        pub static errno: int;\n     }\n }\n "}, {"sha": "5c8b4be0cee1a4a642bf375639f510378e6b0c36", "filename": "src/test/run-pass/issue-1660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-1660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-1660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1660.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    const _x: int = 1<<2;\n+    static _x: int = 1<<2;\n }"}, {"sha": "f3a81771c213711f7c7303b4516ef3ed1cdd22e3", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-test\n-const generations: uint = 1024+256+128+49;\n+static generations: uint = 1024+256+128+49;\n \n fn child_no(x: uint) -> ~fn() {\n      || {"}, {"sha": "a571c49c438b7df196d8f9930b43716d972bc80c", "filename": "src/test/run-pass/issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2428.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let foo = 100;\n-    const quux: int = 5;\n+    static quux: int = 5;\n \n     enum Stuff {\n         Bar = quux"}, {"sha": "24fe671337287db617acdb2bfc4c5504651ce9d2", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -29,7 +29,7 @@ mod test_first_item_in_file_mod {}\n \n mod test_single_attr_outer {\n     #[attr = \"val\"]\n-    pub const x: int = 10;\n+    pub static x: int = 10;\n \n     #[attr = \"val\"]\n     pub fn f() { }\n@@ -47,7 +47,7 @@ mod test_single_attr_outer {\n mod test_multi_attr_outer {\n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    pub const x: int = 10;\n+    pub static x: int = 10;\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n@@ -72,7 +72,7 @@ mod test_multi_attr_outer {\n mod test_stmt_single_attr_outer {\n     pub fn f() {\n         #[attr = \"val\"]\n-        const x: int = 10;\n+        static x: int = 10;\n \n         #[attr = \"val\"]\n         fn f() { }\n@@ -95,7 +95,7 @@ mod test_stmt_multi_attr_outer {\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n-        const x: int = 10;\n+        static x: int = 10;\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]"}, {"sha": "999c6ac2a71d56db0c7806e562ba1602b93e5b38", "filename": "src/test/run-pass/mod-merge-hack-inst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-inst.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,5 +12,5 @@\n \n mod inst {\n     pub type T = i32;\n-    pub const bits: uint = 32;\n+    pub static bits: uint = 32;\n }"}, {"sha": "7f7dd33dc099f2486913c7c4f2c569ef9882da9d", "filename": "src/test/run-pass/mod-merge-hack-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -12,5 +12,5 @@\n \n use T = self::inst::T;\n \n-pub const bits: uint = inst::bits;\n+pub static bits: uint = inst::bits;\n pub fn min(x: T, y: T) -> T { if x < y { x } else { y } }"}, {"sha": "799db4ed2125aa8da3058e80ff4d0aaff1cab3cb", "filename": "src/test/run-pass/resolve-issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -10,6 +10,6 @@\n \n // xfail-test\n \n-const foo: int = 4 >> 1;\n+static foo: int = 4 >> 1;\n enum bs { thing = foo }\n pub fn main() { fail_unless!((thing as int == foo)); }"}, {"sha": "cea32fc745ecadfcaa3c951c9d0d4a99ce5bc8ed", "filename": "src/test/run-pass/shift.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fshift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c9fc6f8f59c146c44aacb4b9abfb2c35e16089/src%2Ftest%2Frun-pass%2Fshift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift.rs?ref=85c9fc6f8f59c146c44aacb4b9abfb2c35e16089", "patch": "@@ -54,28 +54,28 @@ fn test_expr() {\n }\n \n fn test_const() {\n-    const r1_1: uint = 10u >> 2u8;\n-    const r2_1: uint = 10u << 4u8;\n+    static r1_1: uint = 10u >> 2u8;\n+    static r2_1: uint = 10u << 4u8;\n     fail_unless!(r1_1 == 2 as uint);\n     fail_unless!(r2_1 == 160 as uint);\n \n-    const r1_2: u8 = 10u8 >> 2u;\n-    const r2_2: u8 = 10u8 << 4u;\n+    static r1_2: u8 = 10u8 >> 2u;\n+    static r2_2: u8 = 10u8 << 4u;\n     fail_unless!(r1_2 == 2 as u8);\n     fail_unless!(r2_2 == 160 as u8);\n \n-    const r1_3: int = 10 >> 2i8;\n-    const r2_3: int = 10 << 4i8;\n+    static r1_3: int = 10 >> 2i8;\n+    static r2_3: int = 10 << 4i8;\n     fail_unless!(r1_3 == 2 as int);\n     fail_unless!(r2_3 == 160 as int);\n \n-    const r1_4: i8 = 10i8 >> 2;\n-    const r2_4: i8 = 10i8 << 4;\n+    static r1_4: i8 = 10i8 >> 2;\n+    static r2_4: i8 = 10i8 << 4;\n     fail_unless!(r1_4 == 2 as i8);\n     fail_unless!(r2_4 == 160 as i8);\n \n-    const r1_5: uint = 10u >> 2i8;\n-    const r2_5: uint = 10u << 4i8;\n+    static r1_5: uint = 10u >> 2i8;\n+    static r2_5: uint = 10u << 4i8;\n     fail_unless!(r1_5 == 2 as uint);\n     fail_unless!(r2_5 == 160 as uint);\n }"}]}