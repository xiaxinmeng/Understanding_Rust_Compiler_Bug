{"sha": "7bb189e56c3ee7d5496e0938f2ec7ed7c3048258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYjE4OWU1NmMzZWU3ZDU0OTZlMDkzOGYyZWM3ZWQ3YzMwNDgyNTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-19T14:30:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-27T17:28:17Z"}, "message": "Fixed debug information bug regarding struct padding.", "tree": {"sha": "431fc8d98ce477d79c27a156ad5f10f955b3f05d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/431fc8d98ce477d79c27a156ad5f10f955b3f05d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258", "html_url": "https://github.com/rust-lang/rust/commit/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda193de247c592b7b5b0081df9cf95aeb7d3ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda193de247c592b7b5b0081df9cf95aeb7d3ce3", "html_url": "https://github.com/rust-lang/rust/commit/fda193de247c592b7b5b0081df9cf95aeb7d3ce3"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "5281dcb919360575db9a152c93429320f8c337d4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 80, "deletions": 12, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb189e56c3ee7d5496e0938f2ec7ed7c3048258/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7bb189e56c3ee7d5496e0938f2ec7ed7c3048258", "patch": "@@ -56,7 +56,7 @@ use util::ppaux::ty_to_str;\n \n use core::hashmap::HashMap;\n use core::libc;\n-use core::libc::c_uint;\n+use core::libc::{c_uint, c_ulonglong};\n use core::cmp;\n use core::ptr;\n use core::str::as_c_str;\n@@ -337,6 +337,9 @@ fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n fn create_compile_unit(cx: @mut CrateContext) {\n     let dcx = dbg_cx(cx);\n     let crate_name: &str = dcx.crate_file;\n+\n+    debug!(\"create_compile_unit: %?\", crate_name);\n+\n     let work_dir = cx.sess.working_dir.to_str();\n     let producer = fmt!(\"rustc version %s\", env!(\"CFG_VERSION\"));\n \n@@ -507,40 +510,91 @@ impl StructContext {\n     }\n \n     fn add_member(&mut self, name: &str, line: uint, size: uint, align: uint, ty: DIType) {\n-        debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u\",\n-                self.name, name, size, align);\n         let offset = roundup(self.total_size, align);\n+\n+        debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u, offset=%u\",\n+                self.name, name, size, align, offset);\n+        \n         let mem_t = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateMemberType(\n-                self.builder, ptr::null(), name, self.file, line as c_uint,\n-                size * 8 as u64, align * 8 as u64, offset * 8 as u64,\n-                0, ty)\n+                self.builder, \n+                self.file,\n+                name, \n+                self.file, \n+                line as c_uint,\n+                (size * 8) as c_ulonglong, \n+                (align * 8) as c_ulonglong, \n+                (offset * 8) as c_ulonglong,\n+                0, \n+                ty)\n             }};\n         self.members.push(mem_t);\n         self.total_size = offset + size;\n         // struct alignment is the max alignment of its' members\n         self.align = cmp::max(self.align, align);\n     }\n \n+    fn get_total_size_with_alignment(&self) -> uint {\n+        roundup(self.total_size, self.align)\n+    }\n+\n+    //fn verify_against_struct_or_tuple_type(&self, t: ty::t, ccx: &mut CrateContext) {\n+        // let repr = adt::represent_type(ccx, t);\n+\n+        // match *repr {\n+        //     Univariant(*) => \n+        //     {\n+        //         let size_with_alignment = self.get_total_size_with_alignment();\n+        \n+        //         if st.size != size_with_alignment {\n+        //             ccx.sess.bug(\"StructContext(%s)::verify_against_struct_or_tuple_type: invalid type size. Expected = %u, actual = %u\",\n+        //                          st.size, size_with_alignment);\n+        //         }\n+\n+        //         if st.align != self.align {\n+        //             ccx.sess.bug(\"StructContext(%s)::verify_against_struct_or_tuple_type: invalid type alignment. Expected = %u, actual = %u\",\n+        //                          st.align, self.align);\n+        //         }\n+        //     },\n+        //     _ => ccx.sess.bug(fmt!(\"StructContext(%s)::verify_against_struct_or_tuple_type: called with invalid type %?\", \n+        //                       self.name, t))\n+        // }\n+    //}\n+\n     fn finalize(&self) -> DICompositeType {\n         debug!(\"StructContext(%s)::finalize: total_size=%u, align=%u\",\n                 self.name, self.total_size, self.align);\n         let members_md = create_DIArray(self.builder, self.members);\n \n+        // The size of the struct/tuple must be rounded to the next multiple of its alignment.\n+        // Otherwise gdb has trouble reading the struct correct when it is embedded into another \n+        // data structure. This is also the value `sizeof` in C would give.\n+        let total_size_with_alignment = self.get_total_size_with_alignment();\n+\n         let struct_md =\n             do as_c_str(self.name) |name| { unsafe {\n                 llvm::LLVMDIBuilderCreateStructType(\n-                    self.builder, self.file, name,\n-                    self.file, self.line as c_uint,\n-                    self.total_size * 8 as u64, self.align * 8 as u64, 0, ptr::null(),\n-                    members_md, 0, ptr::null())\n+                    self.builder,\n+                    self.file, \n+                    name,\n+                    self.file, \n+                    self.line as c_uint,\n+                    (total_size_with_alignment * 8) as c_ulonglong, \n+                    (self.align * 8) as c_ulonglong,\n+                    0,\n+                    ptr::null(),\n+                    members_md, \n+                    0, \n+                    ptr::null())\n             }};\n         return struct_md;\n     }\n }\n \n-fn create_struct(cx: @mut CrateContext, t: ty::t, fields: ~[ty::field], span: span)\n+fn create_struct(cx: @mut CrateContext, struct_type: ty::t, fields: ~[ty::field], span: span)\n                 -> DICompositeType {\n+    debug!(\"create_struct: %?\", ty::get(struct_type));\n+\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n \n@@ -565,8 +619,10 @@ fn voidptr(cx: @mut CrateContext) -> (DIDerivedType, uint, uint) {\n     return (vp, size, align);\n }\n \n-fn create_tuple(cx: @mut CrateContext, _t: ty::t, elements: &[ty::t], span: span)\n+fn create_tuple(cx: @mut CrateContext, tuple_type: ty::t, elements: &[ty::t], span: span)\n                 -> DICompositeType {\n+    debug!(\"create_tuple: %?\", ty::get(tuple_type));\n+\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n \n@@ -582,6 +638,8 @@ fn create_tuple(cx: @mut CrateContext, _t: ty::t, elements: &[ty::t], span: span\n \n fn create_boxed_type(cx: @mut CrateContext, contents: ty::t,\n                      span: span, boxed: DIType) -> DICompositeType {\n+    debug!(\"create_boxed_type: %?\", ty::get(contents));\n+\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n     let int_t = ty::mk_int();\n@@ -604,6 +662,8 @@ fn create_boxed_type(cx: @mut CrateContext, contents: ty::t,\n \n fn create_fixed_vec(cx: @mut CrateContext, _vec_t: ty::t, elem_t: ty::t,\n                     len: uint, span: span) -> DIType {\n+    debug!(\"create_fixed_vec: %?\", ty::get(_vec_t));\n+\n     let elem_ty_md = create_ty(cx, elem_t, span);\n     let (size, align) = size_and_align_of(cx, elem_t);\n \n@@ -620,6 +680,8 @@ fn create_fixed_vec(cx: @mut CrateContext, _vec_t: ty::t, elem_t: ty::t,\n \n fn create_boxed_vec(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n                     vec_ty_span: span) -> DICompositeType {\n+    debug!(\"create_boxed_vec: %?\", ty::get(vec_t));\n+\n     let loc = span_start(cx, vec_ty_span);\n     let file_md = create_file(cx, loc.file.name);\n     let elem_ty_md = create_ty(cx, elem_t, vec_ty_span);\n@@ -663,6 +725,8 @@ fn create_boxed_vec(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n \n fn create_vec_slice(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n                     -> DICompositeType {\n+    debug!(\"create_vec_slice: %?\", ty::get(vec_t));\n+\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n     let elem_ty_md = create_ty(cx, elem_t, span);\n@@ -679,6 +743,8 @@ fn create_vec_slice(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t, span: sp\n \n fn create_fn_ty(cx: @mut CrateContext, _fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n                 span: span) -> DICompositeType {\n+    debug!(\"create_fn_ty: %?\", ty::get(_fn_ty));\n+\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n     let (vp, _, _) = voidptr(cx);\n@@ -694,6 +760,8 @@ fn create_fn_ty(cx: @mut CrateContext, _fn_ty: ty::t, inputs: ~[ty::t], output:\n }\n \n fn create_unimpl_ty(cx: @mut CrateContext, t: ty::t) -> DIType {\n+    debug!(\"create_unimpl_ty: %?\", ty::get(t));\n+\n     let name = ty_to_str(cx.tcx, t);\n     let md = do as_c_str(fmt!(\"NYI<%s>\", name)) |name| { unsafe {\n         llvm::LLVMDIBuilderCreateBasicType("}]}