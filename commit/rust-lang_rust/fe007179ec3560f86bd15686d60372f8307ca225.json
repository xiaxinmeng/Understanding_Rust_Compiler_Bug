{"sha": "fe007179ec3560f86bd15686d60372f8307ca225", "node_id": "C_kwDOAAsO6NoAKGZlMDA3MTc5ZWMzNTYwZjg2YmQxNTY4NmQ2MDM3MmY4MzA3Y2EyMjU", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-01-12T17:30:51Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-01-12T17:32:47Z"}, "message": "Add cargo-clippy sysroot test\n\nWhne SYSROOT is defined, clippy-driver will insert a --sysroot argument\nwhen calling rustc. However, when a sysroot argument is already defined,\ne.g. through RUSTFLAGS=--sysroot=... the `cargo clippy` call would\nerror. This tests that the sysroot argument is only passed once and that\nSYSROOT is ignored in this case.", "tree": {"sha": "1aa029d8f2d3f6bac6524de25f77c1f877f4e5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa029d8f2d3f6bac6524de25f77c1f877f4e5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe007179ec3560f86bd15686d60372f8307ca225", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmPARD8ACgkQHKDfKvWd\naKX/jA/+Ixp2Dqf7EFow6ZqHfndECydidY3fYTgkmbKqTsXlsXnNZTNCdKc8kv0B\nyXQ17ip1zP6Lzit85aA46Ldu32az9zUD3IGxHZWYkiVEkcYA827g8foM8vj7uz9T\nlunylz9BKbr0y1XCt/EneOH3XoRD1a8Y+vKzITPqvMeT7kuBrH+rJzG/fCl8FFdP\njzPMA6SyIfwtOL0oNDJB02np4oPoigURa3fHT48YdAnwF4YbSV0/SPqfABmHC4y8\nxetpQIMYgUepNtAC+Fmenkh07H0G2C51gQiYeShyudvhxH3/Nd7e9aKfe9zsupi6\n9zF/KQO2vNhGpB0ePkMUP4GlPaZNbBioHMI4ZDpdgQfyIYycNMEgGgiGqEWSsfzq\ni8KW8b7N0tZCdi0W/hB/hPSCj99jj/EPxvwp5LOIfCjgC6FcLDmCNzABWX6E2jT3\nbdRHYshyXGvyFBnDpRNpAuafhoC7WoePyavip9+xYeW+KltpA2byi3qdgvGz+hZE\n8AXBG+anQXvwKS+iV++QiJ3QNhMLPBY6MF5PLB8l+y1FonV7bOoEftYOyt1zdkfe\n6yQYYrQIJFV9aAGNckzsG5LQ/6+/Y8tWPLXslV1diHkbBdXpSgxuaQYidl4XO+v1\nf9EYZ86gqLxWz1k/k+QCj3EuUIFzeLkpny7zLH1zBiJDr6ZPsL0=\n=uQmp\n-----END PGP SIGNATURE-----", "payload": "tree 1aa029d8f2d3f6bac6524de25f77c1f877f4e5b9\nparent 321c530fadb766c594698be7c83ab7cbc443bf1c\nauthor Philipp Krones <hello@philkrones.com> 1673544651 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1673544767 +0100\n\nAdd cargo-clippy sysroot test\n\nWhne SYSROOT is defined, clippy-driver will insert a --sysroot argument\nwhen calling rustc. However, when a sysroot argument is already defined,\ne.g. through RUSTFLAGS=--sysroot=... the `cargo clippy` call would\nerror. This tests that the sysroot argument is only passed once and that\nSYSROOT is ignored in this case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe007179ec3560f86bd15686d60372f8307ca225", "html_url": "https://github.com/rust-lang/rust/commit/fe007179ec3560f86bd15686d60372f8307ca225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe007179ec3560f86bd15686d60372f8307ca225/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321c530fadb766c594698be7c83ab7cbc443bf1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/321c530fadb766c594698be7c83ab7cbc443bf1c", "html_url": "https://github.com/rust-lang/rust/commit/321c530fadb766c594698be7c83ab7cbc443bf1c"}], "stats": {"total": 105, "additions": 36, "deletions": 69}, "files": [{"sha": "798782340ee7d1581425c994f73573cdcd01fb76", "filename": ".github/driver.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe007179ec3560f86bd15686d60372f8307ca225/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fe007179ec3560f86bd15686d60372f8307ca225/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=fe007179ec3560f86bd15686d60372f8307ca225", "patch": "@@ -17,6 +17,13 @@ test \"$sysroot\" = $desired_sysroot\n sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n test \"$sysroot\" = $desired_sysroot\n \n+# Check that the --sysroot argument is only passed once (SYSROOT is ignored)\n+(\n+    cd rustc_tools_util\n+    touch src/lib.rs\n+    SYSROOT=/tmp RUSTFLAGS=\"--sysroot=$(rustc --print sysroot)\" ../target/debug/cargo-clippy clippy --verbose\n+)\n+\n # Make sure this isn't set - clippy-driver should cope without it\n unset CARGO_MANIFEST_DIR\n "}, {"sha": "a771d8b87c81a4bcec3b0ed4cd14829bcad2f191", "filename": "tests/integration.rs", "status": "modified", "additions": 29, "deletions": 69, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/fe007179ec3560f86bd15686d60372f8307ca225/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe007179ec3560f86bd15686d60372f8307ca225/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=fe007179ec3560f86bd15686d60372f8307ca225", "patch": "@@ -1,42 +1,28 @@\n-//! To run this test, use\n+//! This test is meant to only be run in CI. To run it locally use:\n+//!\n //! `env INTEGRATION=rust-lang/log cargo test --test integration --features=integration`\n //!\n //! You can use a different `INTEGRATION` value to test different repositories.\n+//!\n+//! This test will clone the specified repository and run Clippy on it. The test succeeds, if\n+//! Clippy doesn't produce an ICE. Lint warnings are ignored by this test.\n \n #![cfg(feature = \"integration\")]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n+use std::env;\n use std::ffi::OsStr;\n-use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::{env, eprintln};\n \n #[cfg(not(windows))]\n const CARGO_CLIPPY: &str = \"cargo-clippy\";\n #[cfg(windows)]\n const CARGO_CLIPPY: &str = \"cargo-clippy.exe\";\n \n-// NOTE: arguments passed to the returned command will be `clippy-driver` args, not `cargo-clippy`\n-// args. Use `cargo_args` to pass arguments to cargo-clippy.\n-fn clippy_command(repo_dir: &Path, cargo_args: &[&str]) -> Command {\n-    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let target_dir = option_env!(\"CARGO_TARGET_DIR\").map_or_else(|| root_dir.join(\"target\"), PathBuf::from);\n-    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(CARGO_CLIPPY);\n-\n-    let mut cargo_clippy = Command::new(clippy_binary);\n-    cargo_clippy\n-        .current_dir(repo_dir)\n-        .env(\"RUST_BACKTRACE\", \"full\")\n-        .env(\"CARGO_TARGET_DIR\", root_dir.join(\"target\"))\n-        .args([\"clippy\", \"--all-targets\", \"--all-features\"])\n-        .args(cargo_args)\n-        .args([\"--\", \"--cap-lints\", \"warn\", \"-Wclippy::pedantic\", \"-Wclippy::nursery\"]);\n-    cargo_clippy\n-}\n-\n-/// Return a directory with a checkout of the repository in `INTEGRATION`.\n-fn repo_dir(repo_name: &str) -> PathBuf {\n+#[cfg_attr(feature = \"integration\", test)]\n+fn integration_test() {\n+    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n     let repo_url = format!(\"https://github.com/{repo_name}\");\n     let crate_name = repo_name\n         .split('/')\n@@ -57,19 +43,28 @@ fn repo_dir(repo_name: &str) -> PathBuf {\n         .expect(\"unable to run git\");\n     assert!(st.success());\n \n-    repo_dir\n-}\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = std::path::Path::new(&root_dir).join(\"target\");\n+    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(CARGO_CLIPPY);\n \n-#[cfg_attr(feature = \"integration\", test)]\n-fn integration_test() {\n-    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n-    let repo_dir = repo_dir(&repo_name);\n-    let output = clippy_command(&repo_dir, &[]).output().expect(\"failed to run clippy\");\n-    let stderr = String::from_utf8_lossy(&output.stderr);\n-    if !stderr.is_empty() {\n-        eprintln!(\"{stderr}\");\n-    }\n+    let output = Command::new(clippy_binary)\n+        .current_dir(repo_dir)\n+        .env(\"RUST_BACKTRACE\", \"full\")\n+        .env(\"CARGO_TARGET_DIR\", target_dir)\n+        .args([\n+            \"clippy\",\n+            \"--all-targets\",\n+            \"--all-features\",\n+            \"--\",\n+            \"--cap-lints\",\n+            \"warn\",\n+            \"-Wclippy::pedantic\",\n+            \"-Wclippy::nursery\",\n+        ])\n+        .output()\n+        .expect(\"unable to run clippy\");\n \n+    let stderr = String::from_utf8_lossy(&output.stderr);\n     if let Some(backtrace_start) = stderr.find(\"error: internal compiler error\") {\n         static BACKTRACE_END_MSG: &str = \"end of query stack\";\n         let backtrace_end = stderr[backtrace_start..]\n@@ -104,38 +99,3 @@ fn integration_test() {\n         None => panic!(\"Process terminated by signal\"),\n     }\n }\n-\n-#[cfg_attr(feature = \"integration\", test)]\n-fn test_sysroot() {\n-    #[track_caller]\n-    fn verify_cmd(cmd: &mut Command) {\n-        // Test that SYSROOT is ignored if `--sysroot` is passed explicitly.\n-        cmd.env(\"SYSROOT\", \"/dummy/value/does/not/exist\");\n-        // We don't actually care about emitting lints, we only want to verify clippy doesn't give a hard\n-        // error.\n-        cmd.arg(\"-Awarnings\");\n-        let output = cmd.output().expect(\"failed to run clippy\");\n-        let stderr = String::from_utf8_lossy(&output.stderr);\n-        assert!(stderr.is_empty(), \"clippy printed an error: {stderr}\");\n-        assert!(output.status.success(), \"clippy exited with an error\");\n-    }\n-\n-    let rustc = std::env::var(\"RUSTC\").unwrap_or(\"rustc\".to_string());\n-    let rustc_output = Command::new(rustc)\n-        .args([\"--print\", \"sysroot\"])\n-        .output()\n-        .expect(\"unable to run rustc\");\n-    assert!(rustc_output.status.success());\n-    let sysroot = String::from_utf8(rustc_output.stdout).unwrap();\n-    let sysroot = sysroot.trim_end();\n-\n-    // This is a fairly small repo; we want to avoid checking out anything heavy twice, so just\n-    // hard-code it.\n-    let repo_name = \"rust-lang/log\";\n-    let repo_dir = repo_dir(repo_name);\n-    // Pass the sysroot through RUSTFLAGS.\n-    verify_cmd(clippy_command(&repo_dir, &[\"--quiet\"]).env(\"RUSTFLAGS\", format!(\"--sysroot={sysroot}\")));\n-    // NOTE: we don't test passing the arguments directly to clippy-driver (with `-- --sysroot`)\n-    // because it breaks for some reason. I (@jyn514) haven't taken time to track down the bug\n-    // because rust-lang/rust uses RUSTFLAGS and nearly no one else uses --sysroot.\n-}"}]}