{"sha": "5f58834fb85b6a49da05c90ff592ccff2496cefe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTg4MzRmYjg1YjZhNDlkYTA1YzkwZmY1OTJjY2ZmMjQ5NmNlZmU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T18:21:40Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-23T11:48:24Z"}, "message": "Provide helper for synthesizing paths with resource suffix", "tree": {"sha": "cb2cc03401ed71e7acfae21905fa1802f507c380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2cc03401ed71e7acfae21905fa1802f507c380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f58834fb85b6a49da05c90ff592ccff2496cefe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f58834fb85b6a49da05c90ff592ccff2496cefe", "html_url": "https://github.com/rust-lang/rust/commit/5f58834fb85b6a49da05c90ff592ccff2496cefe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f58834fb85b6a49da05c90ff592ccff2496cefe/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad789aa5b0950608b2d71b8388c3d167fcc22b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad789aa5b0950608b2d71b8388c3d167fcc22b1", "html_url": "https://github.com/rust-lang/rust/commit/0ad789aa5b0950608b2d71b8388c3d167fcc22b1"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "4b281dc6a7b6d44ffeba84d6b49dccfb6d5f1f86", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5f58834fb85b6a49da05c90ff592ccff2496cefe/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f58834fb85b6a49da05c90ff592ccff2496cefe/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5f58834fb85b6a49da05c90ff592ccff2496cefe", "patch": "@@ -212,6 +212,26 @@ crate struct SharedContext {\n     playground: Option<markdown::Playground>,\n }\n \n+impl Context {\n+    fn path(&self, filename: &str) -> PathBuf {\n+        // We use splitn vs Path::extension here because we might get a filename\n+        // like `style.min.css` and we want to process that into\n+        // `style-suffix.min.css`.  Path::extension would just return `css`\n+        // which would result in `style.min-suffix.css` which isn't what we\n+        // want.\n+        let mut iter = filename.splitn(2, '.');\n+        let base = iter.next().unwrap();\n+        let ext = iter.next().unwrap();\n+        let filename = format!(\n+            \"{}{}.{}\",\n+            base,\n+            self.shared.resource_suffix,\n+            ext,\n+        );\n+        self.dst.join(&filename)\n+    }\n+}\n+\n impl SharedContext {\n     crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n         let mut dirs = self.created_dirs.borrow_mut();\n@@ -530,13 +550,13 @@ fn write_shared(\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n \n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"rustdoc.css\"),\n                  static_files::RUSTDOC_CSS,\n                  options.enable_minification)?;\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"settings.css\"),\n                  static_files::SETTINGS_CSS,\n                  options.enable_minification)?;\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"noscript{}.css\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"noscript.css\"),\n                  static_files::NOSCRIPT_CSS,\n                  options.enable_minification)?;\n \n@@ -548,34 +568,25 @@ fn write_shared(\n         let content = try_err!(fs::read(&entry), &entry);\n         let theme = try_none!(try_none!(entry.file_stem(), &entry).to_str(), &entry);\n         let extension = try_none!(try_none!(entry.extension(), &entry).to_str(), &entry);\n-        cx.shared.fs.write(\n-            cx.dst.join(format!(\"{}{}.{}\", theme, cx.shared.resource_suffix, extension)),\n-            content.as_slice())?;\n+        cx.shared.fs.write(cx.path(&format!(\"{}.{}\", theme, extension)), content.as_slice())?;\n         themes.insert(theme.to_owned());\n     }\n \n     let write = |p, c| { cx.shared.fs.write(p, c) };\n     if (*cx.shared).layout.logo.is_empty() {\n-        write(cx.dst.join(&format!(\"rust-logo{}.png\", cx.shared.resource_suffix)),\n-              static_files::RUST_LOGO)?;\n+        write(cx.path(\"rust-log.png\"), static_files::RUST_LOGO)?;\n     }\n     if (*cx.shared).layout.favicon.is_empty() {\n-        write(cx.dst.join(&format!(\"favicon{}.ico\", cx.shared.resource_suffix)),\n-              static_files::RUST_FAVICON)?;\n-    }\n-    write(cx.dst.join(&format!(\"brush{}.svg\", cx.shared.resource_suffix)),\n-          static_files::BRUSH_SVG)?;\n-    write(cx.dst.join(&format!(\"wheel{}.svg\", cx.shared.resource_suffix)),\n-          static_files::WHEEL_SVG)?;\n-    write(cx.dst.join(&format!(\"down-arrow{}.svg\", cx.shared.resource_suffix)),\n-          static_files::DOWN_ARROW_SVG)?;\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n-                 static_files::themes::LIGHT,\n-                 options.enable_minification)?;\n+        write(cx.path(\"favicon.ico\"), static_files::RUST_FAVICON)?;\n+    }\n+    write(cx.path(\"brush.svg\"), static_files::BRUSH_SVG)?;\n+    write(cx.path(\"wheel.svg\"), static_files::WHEEL_SVG)?;\n+    write(cx.path(\"down-arrow.svg\"), static_files::DOWN_ARROW_SVG)?;\n+    write_minify(&cx.shared.fs,\n+        cx.path(\"light.css\"), static_files::themes::LIGHT, options.enable_minification)?;\n     themes.insert(\"light\".to_owned());\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n-                 static_files::themes::DARK,\n-                 options.enable_minification)?;\n+    write_minify(&cx.shared.fs,\n+        cx.path(\"dark.css\"), static_files::themes::DARK, options.enable_minification)?;\n     themes.insert(\"dark\".to_owned());\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n@@ -638,40 +649,40 @@ themePicker.onblur = handleThemeButtonsBlur;\n           theme_js.as_bytes()\n     )?;\n \n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"main{}.js\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"main.js\"),\n                  static_files::MAIN_JS,\n                  options.enable_minification)?;\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"settings{}.js\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"settings.js\"),\n                  static_files::SETTINGS_JS,\n                  options.enable_minification)?;\n     if cx.shared.include_sources {\n         write_minify(\n             &cx.shared.fs,\n-            cx.dst.join(&format!(\"source-script{}.js\", cx.shared.resource_suffix)),\n+            cx.path(\"source-script.js\"),\n             static_files::sidebar::SOURCE_SCRIPT,\n             options.enable_minification)?;\n     }\n \n     {\n         write_minify(\n             &cx.shared.fs,\n-            cx.dst.join(&format!(\"storage{}.js\", cx.shared.resource_suffix)),\n+            cx.path(\"storage.js\"),\n             &format!(\"var resourcesSuffix = \\\"{}\\\";{}\",\n                      cx.shared.resource_suffix,\n                      static_files::STORAGE_JS),\n             options.enable_minification)?;\n     }\n \n     if let Some(ref css) = cx.shared.layout.css_file_extension {\n-        let out = cx.dst.join(&format!(\"theme{}.css\", cx.shared.resource_suffix));\n+        let out = cx.path(\"theme.css\");\n         let buffer = try_err!(fs::read_to_string(css), css);\n         if !options.enable_minification {\n             cx.shared.fs.write(&out, &buffer)?;\n         } else {\n             write_minify(&cx.shared.fs, out, &buffer, options.enable_minification)?;\n         }\n     }\n-    write_minify(&cx.shared.fs, cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n+    write_minify(&cx.shared.fs, cx.path(\"normalize.css\"),\n                  static_files::NORMALIZE_CSS,\n                  options.enable_minification)?;\n     write(cx.dst.join(\"FiraSans-Regular.woff\"),"}]}