{"sha": "6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjE4OGJkNDM4NDBmNGE5OWM2YTRiNGNkYmRiMjFjY2YzMzA0ZTc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-15T12:10:34Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-15T14:59:08Z"}, "message": "Use concat() instead of join(\"\")", "tree": {"sha": "19ed027ed7377e50a9ad64bc6d2eab3f289e4143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ed027ed7377e50a9ad64bc6d2eab3f289e4143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7", "html_url": "https://github.com/rust-lang/rust/commit/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6380f885278e33ff058e01555538ced58c44dacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6380f885278e33ff058e01555538ced58c44dacf", "html_url": "https://github.com/rust-lang/rust/commit/6380f885278e33ff058e01555538ced58c44dacf"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "d45f15a1c9bab59cb85710d453c096347cd6a748", "filename": "src/string.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=6fb188bd43840f4a99c6a4b4cdbdb21ccf3304e7", "patch": "@@ -172,7 +172,7 @@ fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n     if s.len() < start + 8 {\n         return None;\n     }\n-    let prefix = s[start..start + 8].join(\"\");\n+    let prefix = s[start..start + 8].concat();\n     if prefix.starts_with(\"https://\")\n         || prefix.starts_with(\"http://\")\n         || prefix.starts_with(\"ftp://\")\n@@ -242,7 +242,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         for (i, grapheme) in input[0..=index].iter().enumerate() {\n             if is_line_feed(grapheme) {\n                 if i <= index_minus_ws {\n-                    let mut line = &input[0..i].join(\"\")[..];\n+                    let mut line = &input[0..i].concat()[..];\n                     if trim_end {\n                         line = line.trim_right();\n                     }\n@@ -256,7 +256,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         for (i, grapheme) in input[index + 1..].iter().enumerate() {\n             if !trim_end && is_line_feed(grapheme) {\n                 return SnippetState::EndWithLineFeed(\n-                    input[0..=index + 1 + i].join(\"\").to_string(),\n+                    input[0..=index + 1 + i].concat(),\n                     index + 2 + i,\n                 );\n             } else if not_whitespace_except_line_feed(grapheme) {\n@@ -266,15 +266,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         }\n \n         if trim_end {\n-            SnippetState::LineEnd(\n-                input[0..=index_minus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[0..=index_minus_ws].concat(), index_plus_ws + 1)\n         } else {\n-            SnippetState::LineEnd(\n-                input[0..=index_plus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[0..=index_plus_ws].concat(), index_plus_ws + 1)\n         }\n     };\n \n@@ -297,15 +291,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n             .position(|grapheme| not_whitespace_except_line_feed(grapheme))\n             .unwrap_or(0);\n         return if trim_end {\n-            SnippetState::LineEnd(\n-                input[..=url_index_end].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[..=url_index_end].concat(), index_plus_ws + 1)\n         } else {\n-            return SnippetState::LineEnd(\n-                input[..=index_plus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            );\n+            return SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1);\n         };\n     }\n     match input[0..max_chars]\n@@ -330,7 +318,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n                 // A boundary was found after the line limit\n                 Some(index) => break_at(max_chars + index),\n                 // No boundary to the right, the input cannot be broken\n-                None => SnippetState::EndOfInput(input.join(\"\").to_string()),\n+                None => SnippetState::EndOfInput(input.concat()),\n             },\n         },\n     }"}]}