{"sha": "ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWYyZDdjN2M2NzNkY2JhZGNmNzE0NDQyNTFjZWJlNzJlNjM0NWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-11T08:38:32Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-22T23:40:06Z"}, "message": "std::rand: optimise & document ziggurat.\n\nBefore:\n\n    test rand::distributions::bench::rand_exp ... bench: 1399 ns/iter (+/- 124) = 571 MB/s\n    test rand::distributions::bench::rand_normal ... bench: 1611 ns/iter (+/- 123) = 496 MB/s\n\nAfter:\n\n    test rand::distributions::bench::rand_exp ... bench: 712 ns/iter (+/- 43) = 1123 MB/s\n    test rand::distributions::bench::rand_normal ... bench: 1007 ns/iter (+/- 81) = 794 MB/s", "tree": {"sha": "d113554d0c637cef4945daee1db36ce6a28b106f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d113554d0c637cef4945daee1db36ce6a28b106f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "html_url": "https://github.com/rust-lang/rust/commit/ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5f2d7c7c673dcbadcf71444251cebe72e6345b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0eb1280867e14bdb123c3b19eda93b8906899d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb1280867e14bdb123c3b19eda93b8906899d2", "html_url": "https://github.com/rust-lang/rust/commit/e0eb1280867e14bdb123c3b19eda93b8906899d2"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "4a025ae05d7e50a045d17a6b0b40d55f436018f1", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ed5f2d7c7c673dcbadcf71444251cebe72e6345b/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5f2d7c7c673dcbadcf71444251cebe72e6345b/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "patch": "@@ -63,21 +63,48 @@ impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> {\n \n mod ziggurat_tables;\n \n-// inlining should mean there is no performance penalty for this\n-#[inline]\n+\n+/// Sample a random number using the Ziggurat method (specifically the\n+/// ZIGNOR variant from Doornik 2005). Most of the arguments are\n+/// directly from the paper:\n+///\n+/// * `rng`: source of randomness\n+/// * `symmetric`: whether this is a symmetric distribution, or one-sided with P(x < 0) = 0.\n+/// * `X`: the $x_i$ abscissae.\n+/// * `F`: precomputed values of the PDF at the $x_i$, (i.e. $f(x_i)$)\n+/// * `F_DIFF`: precomputed values of $f(x_i) - f(x_{i+1})$\n+/// * `pdf`: the probability density function\n+/// * `zero_case`: manual sampling from the tail when we chose the\n+///    bottom box (i.e. i == 0)\n+\n+// the perf improvement (25-50%) is definitely worth the extra code\n+// size from force-inlining.\n+#[inline(always)]\n fn ziggurat<R:Rng>(rng: &mut R,\n-                   center_u: bool,\n+                   symmetric: bool,\n                    X: ziggurat_tables::ZigTable,\n                    F: ziggurat_tables::ZigTable,\n                    F_DIFF: ziggurat_tables::ZigTable,\n-                   pdf: &'static fn(f64) -> f64, // probability density function\n+                   pdf: &'static fn(f64) -> f64,\n                    zero_case: &'static fn(&mut R, f64) -> f64) -> f64 {\n+    static SCALE: f64 = (1u64 << 53) as f64;\n     loop {\n-        let u = if center_u {2.0 * rng.gen() - 1.0} else {rng.gen()};\n-        let i: uint = rng.gen::<uint>() & 0xff;\n+        // reimplement the f64 generation as an optimisation suggested\n+        // by the Doornik paper: we have a lot of precision-space\n+        // (i.e. there are 11 bits of the 64 of a u64 to use after\n+        // creating a f64), so we might as well reuse some to save\n+        // generating a whole extra random number. (Seems to be 15%\n+        // faster.)\n+        let bits: u64 = rng.gen();\n+        let i = (bits & 0xff) as uint;\n+        let f = (bits >> 11) as f64 / SCALE;\n+\n+        // u is either U(-1, 1) or U(0, 1) depending on if this is a\n+        // symmetric distribution or not.\n+        let u = if symmetric {2.0 * f - 1.0} else {f};\n         let x = u * X[i];\n \n-        let test_x = if center_u {num::abs(x)} else {x};\n+        let test_x = if symmetric {num::abs(x)} else {x};\n \n         // algebraically equivalent to |u| < X[i+1]/X[i] (or u < X[i+1]/X[i])\n         if test_x < X[i + 1] {\n@@ -87,7 +114,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n             return zero_case(rng, u);\n         }\n         // algebraically equivalent to f1 + DRanU()*(f0 - f1) < 1\n-        if F[i+1] + F_DIFF[i+1] * rng.gen() < pdf(x) {\n+        if F[i + 1] + F_DIFF[i + 1] * rng.gen() < pdf(x) {\n             return x;\n         }\n     }\n@@ -318,3 +345,40 @@ mod tests {\n         Exp::new(-10.0);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use rand::*;\n+    use super::*;\n+    use iter::range;\n+    use option::{Some, None};\n+    use mem::size_of;\n+\n+    static N: u64 = 100;\n+\n+    #[bench]\n+    fn rand_normal(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        let mut normal = Normal::new(-2.71828, 3.14159);\n+\n+        do bh.iter {\n+            for _ in range(0, N) {\n+                normal.sample(&mut rng);\n+            }\n+        }\n+        bh.bytes = size_of::<f64>() as u64 * N;\n+    }\n+    #[bench]\n+    fn rand_exp(bh: &mut BenchHarness) {\n+        let mut rng = XorShiftRng::new();\n+        let mut exp = Exp::new(2.71828 * 3.14159);\n+\n+        do bh.iter {\n+            for _ in range(0, N) {\n+                exp.sample(&mut rng);\n+            }\n+        }\n+        bh.bytes = size_of::<f64>() as u64 * N;\n+    }\n+}"}]}