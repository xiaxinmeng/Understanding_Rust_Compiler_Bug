{"sha": "3a5c07889586564017bc0d88826a48aecf721600", "node_id": "C_kwDOAAsO6NoAKDNhNWMwNzg4OTU4NjU2NDAxN2JjMGQ4ODgyNmE0OGFlY2Y3MjE2MDA", "commit": {"author": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-12-12T02:32:08Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-02-18T14:14:21Z"}, "message": "Extend uninhabited match branch optimization to also work on fallthrough.\n\nThe `uninhabited_enum_branch` miropt now also checks whether the fallthrough\ncase is inhabited, and if not will ensure that it points to an unreachable\nblock.", "tree": {"sha": "d53038bf30cb2b5899f3d26eb8cd2dedc5369e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d53038bf30cb2b5899f3d26eb8cd2dedc5369e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5c07889586564017bc0d88826a48aecf721600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5c07889586564017bc0d88826a48aecf721600", "html_url": "https://github.com/rust-lang/rust/commit/3a5c07889586564017bc0d88826a48aecf721600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5c07889586564017bc0d88826a48aecf721600/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f35c420694a4f24e5a4df00f06073f4f3a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f35c420694a4f24e5a4df00f06073f4f3a37", "html_url": "https://github.com/rust-lang/rust/commit/30b3f35c420694a4f24e5a4df00f06073f4f3a37"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "7133724d07d95c6639b922ce61ab40cd8fb3ebbf", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a5c07889586564017bc0d88826a48aecf721600/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5c07889586564017bc0d88826a48aecf721600/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=3a5c07889586564017bc0d88826a48aecf721600", "patch": "@@ -3,7 +3,8 @@\n use crate::MirPass;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_middle::mir::{\n-    BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, SwitchTargets, TerminatorKind,\n+    BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, SwitchTargets, Terminator,\n+    TerminatorKind,\n };\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{Ty, TyCtxt};\n@@ -71,6 +72,28 @@ fn variant_discriminants<'tcx>(\n     }\n }\n \n+/// Ensures that the `otherwise` branch leads to an unreachable bb, returning `None` if so and a new\n+/// bb to use as the new target if not.\n+fn ensure_otherwise_unreachable<'tcx>(\n+    body: &Body<'tcx>,\n+    targets: &SwitchTargets,\n+) -> Option<BasicBlockData<'tcx>> {\n+    let otherwise = targets.otherwise();\n+    let bb = &body.basic_blocks()[otherwise];\n+    if bb.terminator().kind == TerminatorKind::Unreachable\n+        && bb.statements.iter().all(|s| matches!(&s.kind, StatementKind::StorageDead(_)))\n+    {\n+        return None;\n+    }\n+\n+    let mut new_block = BasicBlockData::new(Some(Terminator {\n+        source_info: bb.terminator().source_info,\n+        kind: TerminatorKind::Unreachable,\n+    }));\n+    new_block.is_cleanup = bb.is_cleanup;\n+    Some(new_block)\n+}\n+\n impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         sess.mir_opt_level() > 0\n@@ -99,12 +122,25 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n             if let TerminatorKind::SwitchInt { targets, .. } =\n                 &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n             {\n-                let new_targets = SwitchTargets::new(\n+                let mut new_targets = SwitchTargets::new(\n                     targets.iter().filter(|(val, _)| allowed_variants.contains(val)),\n                     targets.otherwise(),\n                 );\n \n-                *targets = new_targets;\n+                if new_targets.iter().count() == allowed_variants.len() {\n+                    if let Some(updated) = ensure_otherwise_unreachable(body, &new_targets) {\n+                        let new_otherwise = body.basic_blocks_mut().push(updated);\n+                        *new_targets.all_targets_mut().last_mut().unwrap() = new_otherwise;\n+                    }\n+                }\n+\n+                if let TerminatorKind::SwitchInt { targets, .. } =\n+                    &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n+                {\n+                    *targets = new_targets;\n+                } else {\n+                    unreachable!()\n+                }\n             } else {\n                 unreachable!()\n             }"}]}