{"sha": "d6b8af44829521a9f925c4d87599efa3fef38edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YjhhZjQ0ODI5NTIxYTlmOTI1YzRkODc1OTllZmEzZmVmMzhlZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-16T19:53:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-16T19:53:43Z"}, "message": "Merge #9301\n\n9301: internal: Start refactoring ide_completion tests r=Veykril a=Veykril\n\nOur current completion test infra resovles around usually just checking a specific `CompletionKind` which is suboptimal. We only see what we want to see in tests with this causing us to miss a lot of incorrect completions we are doing. Instead we should test for different cursor locations for all kinds(sans the magic kind maybe? not sure yet). This way we will also see potential duplicate completions that merely different in their kind.\r\n\r\nAlso since most completion submodules complete things in tests of other modules due to the tests overlapping it makes more sense to group these tests differently which implies moving them to a new module. Exceptions for this might be stuff like attribute completion as these cannot currently interfere.\r\n\r\nI only wrote a few tests to check for completions in `ItemList` position so far and I already found a few incorrect/irrelevant completions as these haven't been tested properly due to them being hidden by the `CompletionKind` filtering.\r\n\r\nI think `CompletionKind` doesn't really seem to be beneficial to me as to I can't think of a occasion where we would want to only check a specific completion kind.\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "47119538effd381ecd8e15d422103512f2b47406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47119538effd381ecd8e15d422103512f2b47406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b8af44829521a9f925c4d87599efa3fef38edc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgylbHCRBK7hj4Ov3rIwAALhgIAJgiSmHi5JGn8lQEGOXx0zkU\ncVt0bi8gc8uhE+fGfpabB/eIL9htT+z0iB/ghuPe1aZsfDUHb+zSpDrtNY8XjOgi\nEjVIn2DMZaNNtIj+fM6VQRjOO8x2SY4UyUcDiinhKfIkl1J9iyWOJDtKe0Bnbfdh\nWV8obv1vvqcY2ZSoEBgUU8O8qfkcEL9ITMndhpXBP3ktle1ZDfNjHBu+smmHF7xL\nV57V6OfKUm8XUPVoUhaM7NCy7IxtGGGAEfCvKX13wOYEVhtjOKJHNTru78tKtkof\nS0SlVP+jHPUS0jLRjfazUXU0mRORySWUtPApBgqiruENf1IKbzuAFyYmD7arB4g=\n=9OpO\n-----END PGP SIGNATURE-----\n", "payload": "tree 47119538effd381ecd8e15d422103512f2b47406\nparent f38770cd2606148bfe764351849ea7ebea45132c\nparent aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623873223 +0000\ncommitter GitHub <noreply@github.com> 1623873223 +0000\n\nMerge #9301\n\n9301: internal: Start refactoring ide_completion tests r=Veykril a=Veykril\n\nOur current completion test infra resovles around usually just checking a specific `CompletionKind` which is suboptimal. We only see what we want to see in tests with this causing us to miss a lot of incorrect completions we are doing. Instead we should test for different cursor locations for all kinds(sans the magic kind maybe? not sure yet). This way we will also see potential duplicate completions that merely different in their kind.\r\n\r\nAlso since most completion submodules complete things in tests of other modules due to the tests overlapping it makes more sense to group these tests differently which implies moving them to a new module. Exceptions for this might be stuff like attribute completion as these cannot currently interfere.\r\n\r\nI only wrote a few tests to check for completions in `ItemList` position so far and I already found a few incorrect/irrelevant completions as these haven't been tested properly due to them being hidden by the `CompletionKind` filtering.\r\n\r\nI think `CompletionKind` doesn't really seem to be beneficial to me as to I can't think of a occasion where we would want to only check a specific completion kind.\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b8af44829521a9f925c4d87599efa3fef38edc", "html_url": "https://github.com/rust-lang/rust/commit/d6b8af44829521a9f925c4d87599efa3fef38edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b8af44829521a9f925c4d87599efa3fef38edc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38770cd2606148bfe764351849ea7ebea45132c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38770cd2606148bfe764351849ea7ebea45132c", "html_url": "https://github.com/rust-lang/rust/commit/f38770cd2606148bfe764351849ea7ebea45132c"}, {"sha": "aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "html_url": "https://github.com/rust-lang/rust/commit/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc"}], "stats": {"total": 844, "additions": 430, "deletions": 414}, "files": [{"sha": "cba5eb0c688d20f2d793a5381173103d70688014", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -41,9 +41,9 @@ pub struct Completions {\n     buf: Vec<CompletionItem>,\n }\n \n-impl Into<Vec<CompletionItem>> for Completions {\n-    fn into(self) -> Vec<CompletionItem> {\n-        self.buf\n+impl From<Completions> for Vec<CompletionItem> {\n+    fn from(val: Completions) -> Self {\n+        val.buf\n     }\n }\n \n@@ -74,35 +74,6 @@ impl Completions {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n \n-    pub(crate) fn add_field(\n-        &mut self,\n-        ctx: &CompletionContext,\n-        receiver: Option<hir::Name>,\n-        field: hir::Field,\n-        ty: &hir::Type,\n-    ) {\n-        let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n-        self.add(item);\n-    }\n-\n-    pub(crate) fn add_tuple_field(\n-        &mut self,\n-        ctx: &CompletionContext,\n-        receiver: Option<hir::Name>,\n-        field: usize,\n-        ty: &hir::Type,\n-    ) {\n-        let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n-        self.add(item);\n-    }\n-\n-    pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n-        let mut item =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), \"'static\");\n-        item.kind(CompletionItemKind::SymbolKind(SymbolKind::LifetimeParam));\n-        self.add(item.build());\n-    }\n-\n     pub(crate) fn add_resolution(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -144,72 +115,102 @@ impl Completions {\n         self.add_opt(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n     }\n \n-    pub(crate) fn add_variant_pat(\n+    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n+        self.add_opt(render_const(RenderContext::new(ctx), constant));\n+    }\n+\n+    pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n+        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n+    }\n+\n+    pub(crate) fn add_type_alias_with_eq(\n         &mut self,\n         ctx: &CompletionContext,\n-        variant: hir::Variant,\n-        local_name: Option<hir::Name>,\n+        type_alias: hir::TypeAlias,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n+        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n     }\n \n-    pub(crate) fn add_qualified_variant_pat(\n+    pub(crate) fn add_qualified_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n+        let item = render_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n+        self.add(item);\n     }\n \n-    pub(crate) fn add_struct_pat(\n+    pub(crate) fn add_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n-        strukt: hir::Struct,\n+        variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n+        let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n+        self.add(item);\n     }\n \n-    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        self.add_opt(render_const(RenderContext::new(ctx), constant));\n+    pub(crate) fn add_field(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        receiver: Option<hir::Name>,\n+        field: hir::Field,\n+        ty: &hir::Type,\n+    ) {\n+        let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n+        self.add(item);\n     }\n \n-    pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n+    pub(crate) fn add_tuple_field(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        receiver: Option<hir::Name>,\n+        field: usize,\n+        ty: &hir::Type,\n+    ) {\n+        let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n+        self.add(item);\n     }\n \n-    pub(crate) fn add_type_alias_with_eq(\n+    pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n+        let mut item =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), \"'static\");\n+        item.kind(CompletionItemKind::SymbolKind(SymbolKind::LifetimeParam));\n+        self.add(item.build());\n+    }\n+\n+    pub(crate) fn add_variant_pat(\n         &mut self,\n         ctx: &CompletionContext,\n-        type_alias: hir::TypeAlias,\n+        variant: hir::Variant,\n+        local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n     }\n \n-    pub(crate) fn add_qualified_enum_variant(\n+    pub(crate) fn add_qualified_variant_pat(\n         &mut self,\n         ctx: &CompletionContext,\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n-        self.add(item);\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n     }\n \n-    pub(crate) fn add_enum_variant(\n+    pub(crate) fn add_struct_pat(\n         &mut self,\n         ctx: &CompletionContext,\n-        variant: hir::Variant,\n+        strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n-        self.add(item);\n+        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n     }\n }\n \n /// Calls the callback for each variant of the provided enum with the path to the variant.\n-fn complete_enum_variants(\n+/// Skips variants that are visible with single segment paths.\n+fn enum_variants_with_paths(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     enum_: hir::Enum,"}, {"sha": "3866c5917d658306416b02c75ba91c154e7bb532", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -322,7 +322,7 @@ mod tests {\n \n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     #[test]\n     fn attributes_are_sorted() {\n@@ -341,7 +341,7 @@ mod tests {\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Attribute);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Attribute);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "5201095e80c7410e97cd7cacd2fb1a1f5ba2248f", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -82,7 +82,7 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let builtin_derives = r#\"\n@@ -106,7 +106,7 @@ pub macro PartialOrd {}\n pub macro Ord {}\n \n \"#;\n-        let actual = completion_list(\n+        let actual = filtered_completion_list(\n             &format!(\"{} {}\", builtin_derives, ra_fixture),\n             CompletionKind::Attribute,\n         );"}, {"sha": "4812b075cdfa7ee026d250a5dac47e8e4c3fe54e", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -34,7 +34,7 @@ pub(super) fn complete_lint(\n #[cfg(test)]\n mod tests {\n \n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn check_empty() {"}, {"sha": "7f75d42988cb5d79e637b3409ced7355142ae8b8", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -101,10 +101,10 @@ fn complete_methods(\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "4604feb5dc78fb8fdcf4a36d10ef5480de2a1dbd", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -227,11 +227,11 @@ mod tests {\n \n     use crate::{\n         item::CompletionKind,\n-        test_utils::{check_edit, check_edit_with_config, completion_list, TEST_CONFIG},\n+        tests::{check_edit, check_edit_with_config, filtered_completion_list, TEST_CONFIG},\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "c9f0e2473afeea69365e11883036074599d586ff", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -64,10 +64,10 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "73bbc43458ee9feb8b522dc14cff468aa1981492", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 17, "deletions": 92, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -75,7 +75,9 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n \n-    if expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_record_field() {\n+    if !ctx.has_visibility_prev_sibling()\n+        && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_record_field())\n+    {\n         add_keyword(\"pub(crate)\", \"pub(crate) \");\n         add_keyword(\"pub\", \"pub \");\n     }\n@@ -88,11 +90,13 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     if expects_item || has_block_expr_parent {\n+        if !ctx.has_visibility_prev_sibling() {\n+            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+            add_keyword(\"extern\", \"extern $0\");\n+        }\n         add_keyword(\"use\", \"use $0\");\n-        add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n         add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n         add_keyword(\"static\", \"static $0\");\n-        add_keyword(\"extern\", \"extern $0\");\n         add_keyword(\"mod\", \"mod $0\");\n     }\n \n@@ -186,12 +190,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Keyword);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Keyword);\n         expect.assert_eq(&actual)\n     }\n \n@@ -230,30 +234,6 @@ mod tests {\n         );\n     }\n \n-    #[test]\n-    fn test_keywords_at_source_file_level() {\n-        check(\n-            r\"m$0\",\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-                kw use\n-                kw impl\n-                kw trait\n-                kw static\n-                kw extern\n-                kw mod\n-                kw enum\n-                kw struct\n-                kw union\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_in_function() {\n         check(\n@@ -263,11 +243,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -291,11 +271,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -319,11 +299,11 @@ mod tests {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -369,49 +349,6 @@ fn quux() -> i32 {\n         );\n     }\n \n-    #[test]\n-    fn test_keywords_in_trait_def() {\n-        check(\n-            r\"trait My { $0 }\",\n-            expect![[r#\"\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_keywords_in_impl_def() {\n-        check(\n-            r\"impl My { $0 }\",\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_keywords_in_impl_def_with_attr() {\n-        check(\n-            r\"impl My { #[foo] $0 }\",\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_in_loop() {\n         check(\n@@ -421,11 +358,11 @@ fn quux() -> i32 {\n                 kw fn\n                 kw const\n                 kw type\n-                kw use\n                 kw impl\n+                kw extern\n+                kw use\n                 kw trait\n                 kw static\n-                kw extern\n                 kw mod\n                 kw match\n                 kw while\n@@ -442,18 +379,6 @@ fn quux() -> i32 {\n         );\n     }\n \n-    #[test]\n-    fn test_keywords_after_unsafe_in_item_list() {\n-        check(\n-            r\"unsafe $0\",\n-            expect![[r#\"\n-                kw fn\n-                kw trait\n-                kw impl\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_after_unsafe_in_block_expr() {\n         check("}, {"sha": "36f59516468ce314db531e721414a1a8b70c62be", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -50,7 +50,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list_with_config, TEST_CONFIG},\n+        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n         CompletionConfig, CompletionKind,\n     };\n \n@@ -59,7 +59,8 @@ mod tests {\n     }\n \n     fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n+        let actual =\n+            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "5def0d06adc6c0206b5211516a075ec7b0f601a7", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -141,11 +141,11 @@ fn module_chain_to_containing_module_file(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n     use expect_test::{expect, Expect};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "efe3c957ae7f512a11cefdf5550b03ad40001033", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n         if let Some(hir::Adt::Enum(e)) =\n             ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n         {\n-            super::complete_enum_variants(acc, ctx, e, |acc, ctx, variant, path| {\n+            super::enum_variants_with_paths(acc, ctx, e, |acc, ctx, variant, path| {\n                 acc.add_qualified_variant_pat(ctx, variant, path.clone());\n                 acc.add_qualified_enum_variant(ctx, variant, path);\n             });\n@@ -61,17 +61,17 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n     fn check_snippet(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Snippet);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "c3c7e4589c8f359fc55efb9b118ba7a388a8cc9e", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -307,12 +307,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Postfix);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Postfix);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "9432caa22e4540d8afcafb1ed137318214893046", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -198,17 +198,17 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n \n     fn check_builtin(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::BuiltinType);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::BuiltinType);\n         expect.assert_eq(&actual);\n     }\n \n@@ -713,24 +713,6 @@ impl MyStruct {\n         );\n     }\n \n-    #[test]\n-    fn completes_in_item_list() {\n-        check(\n-            r#\"\n-struct MyStruct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-\n-crate::$0\n-\"#,\n-            expect![[r#\"\n-                md bar\n-                ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn test_super_super_completion() {\n         check("}, {"sha": "47523f72f1d5a60c3a897c2a4dfc08500228e261", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -51,25 +51,25 @@ mod tests {\n     use ide_db::helpers::FamousDefs;\n \n     use crate::{\n-        test_utils::{self, completion_list},\n+        tests::{self, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n \n     fn check_snippet(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(\n+        let actual = filtered_completion_list(\n             &format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE),\n             CompletionKind::Snippet,\n         );\n         expect.assert_eq(&actual);\n     }\n \n     fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        test_utils::check_edit(\n+        tests::check_edit(\n             what,\n             &format!(\n                 \"//- /main.rs crate:main deps:core{}\\n{}\","}, {"sha": "81ddfa34fdc35f01f730b73d63874da2102adf6c", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -1,6 +1,7 @@\n //! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n use ide_db::helpers::SnippetCap;\n+use syntax::T;\n \n use crate::{\n     context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n@@ -35,9 +36,13 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.expects_item() {\n+    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) || ctx.path_qual().is_some() {\n         return;\n     }\n+    if ctx.has_visibility_prev_sibling() {\n+        return; // technically we could do some of these snippet completions if we were to put the\n+                // attributes before the vis node.\n+    }\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,\n@@ -82,10 +87,10 @@ fn ${1:feature}() {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Snippet);\n         expect.assert_eq(&actual)\n     }\n \n@@ -105,21 +110,4 @@ mod tests {\n         check(r#\"fn foo(x: i32) { ::foo$0 }\"#, expect![[\"\"]]);\n         check(r#\"fn foo(x: i32) { ::$0 }\"#, expect![[\"\"]]);\n     }\n-\n-    #[test]\n-    fn completes_snippets_in_items() {\n-        check(\n-            r#\"\n-#[cfg(test)]\n-mod tests {\n-    $0\n-}\n-\"#,\n-            expect![[r#\"\n-                sn tmod (Test module)\n-                sn tfn (Test function)\n-                sn macro_rules\n-            \"#]],\n-        )\n-    }\n }"}, {"sha": "dc1d198cc23825c92ca77b91b2c4761cc9c18eae", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -246,12 +246,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "2868d9b1813898c8c697e4b9fc3621c16d498e7c", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         if let Some(hir::Adt::Enum(e)) =\n             ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n         {\n-            super::complete_enum_variants(acc, ctx, e, |acc, ctx, variant, path| {\n+            super::enum_variants_with_paths(acc, ctx, e, |acc, ctx, variant, path| {\n                 acc.add_qualified_enum_variant(ctx, variant, path)\n             });\n         }\n@@ -93,7 +93,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list_with_config, TEST_CONFIG},\n+        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n         CompletionConfig, CompletionKind,\n     };\n \n@@ -102,7 +102,8 @@ mod tests {\n     }\n \n     fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n+        let actual =\n+            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n@@ -500,18 +501,6 @@ fn f() {$0}\n         check(\n             r#\"\n #[rustc_builtin_macro]\n-pub macro Clone {}\n-\n-struct S;\n-impl S {\n-    $0\n-}\n-\"#,\n-            expect![[r#\"\"#]],\n-        );\n-        check(\n-            r#\"\n-#[rustc_builtin_macro]\n pub macro bench {}\n \n fn f() {$0}\n@@ -772,42 +761,6 @@ impl My$0\n         )\n     }\n \n-    #[test]\n-    fn completes_in_assoc_item_list() {\n-        check(\n-            r#\"\n-macro_rules! foo {}\n-mod bar {}\n-\n-struct MyStruct {}\n-impl MyStruct {\n-    $0\n-}\n-\"#,\n-            expect![[r#\"\n-                md bar\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_in_item_list() {\n-        check(\n-            r#\"\n-struct MyStruct {}\n-macro_rules! foo {}\n-mod bar {}\n-\n-$0\n-\"#,\n-            expect![[r#\"\n-                md bar\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn completes_types_and_const_in_arg_list() {\n         check("}, {"sha": "121909857bd64ed4a8cac2effbd0e9bf119bd414", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -302,18 +302,28 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n+    pub(crate) fn has_visibility_prev_sibling(&self) -> bool {\n+        matches!(self.prev_sibling, Some(ImmediatePrevSibling::Visibility))\n+    }\n+\n     pub(crate) fn after_if(&self) -> bool {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::IfExpr))\n     }\n \n     pub(crate) fn is_path_disallowed(&self) -> bool {\n-        matches!(\n-            self.completion_location,\n-            Some(ImmediateLocation::Attribute(_))\n-                | Some(ImmediateLocation::ModDeclaration(_))\n-                | Some(ImmediateLocation::RecordPat(_))\n-                | Some(ImmediateLocation::RecordExpr(_))\n-        ) || self.attribute_under_caret.is_some()\n+        self.attribute_under_caret.is_some()\n+            || self.previous_token_is(T![unsafe])\n+            || matches!(\n+                self.prev_sibling,\n+                Some(ImmediatePrevSibling::Attribute) | Some(ImmediatePrevSibling::Visibility)\n+            )\n+            || matches!(\n+                self.completion_location,\n+                Some(ImmediateLocation::Attribute(_))\n+                    | Some(ImmediateLocation::ModDeclaration(_))\n+                    | Some(ImmediateLocation::RecordPat(_))\n+                    | Some(ImmediateLocation::RecordExpr(_))\n+            )\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n@@ -685,7 +695,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use hir::HirDisplay;\n \n-    use crate::test_utils::{position, TEST_CONFIG};\n+    use crate::tests::{position, TEST_CONFIG};\n \n     use super::CompletionContext;\n "}, {"sha": "bf73818dc569b0ab7ba90c10e223ca74ddccc0a1", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 5, "deletions": 118, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -1,14 +1,14 @@\n //! `completions` crate provides utilities for generating completions of user input.\n \n+mod completions;\n mod config;\n-mod item;\n mod context;\n+mod item;\n mod patterns;\n-#[cfg(test)]\n-mod test_utils;\n mod render;\n \n-mod completions;\n+#[cfg(test)]\n+mod tests;\n \n use completions::flyimport::position_for_import;\n use ide_db::{\n@@ -141,6 +141,7 @@ pub fn completions(\n     let ctx = CompletionContext::new(db, position, config)?;\n \n     if ctx.no_completion_required() {\n+        cov_mark::hit!(no_completion_required);\n         // No work required here.\n         return None;\n     }\n@@ -200,117 +201,3 @@ pub fn resolve_completion_edits(\n \n     ImportEdit { import, scope }.to_text_edit(config.insert_use).map(|edit| vec![edit])\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::test_utils::{self, TEST_CONFIG};\n-\n-    struct DetailAndDocumentation<'a> {\n-        detail: &'a str,\n-        documentation: &'a str,\n-    }\n-\n-    fn check_detail_and_documentation(ra_fixture: &str, expected: DetailAndDocumentation) {\n-        let (db, position) = test_utils::position(ra_fixture);\n-        let config = TEST_CONFIG;\n-        let completions: Vec<_> = crate::completions(&db, &config, position).unwrap().into();\n-        for item in completions {\n-            if item.detail() == Some(expected.detail) {\n-                let opt = item.documentation();\n-                let doc = opt.as_ref().map(|it| it.as_str());\n-                assert_eq!(doc, Some(expected.documentation));\n-                return;\n-            }\n-        }\n-        panic!(\"completion detail not found: {}\", expected.detail)\n-    }\n-\n-    fn check_no_completion(ra_fixture: &str) {\n-        let (db, position) = test_utils::position(ra_fixture);\n-        let config = TEST_CONFIG;\n-\n-        let completions: Option<Vec<String>> = crate::completions(&db, &config, position)\n-            .and_then(|completions| {\n-                let completions: Vec<_> = completions.into();\n-                if completions.is_empty() {\n-                    None\n-                } else {\n-                    Some(completions)\n-                }\n-            })\n-            .map(|completions| {\n-                completions.into_iter().map(|completion| format!(\"{:?}\", completion)).collect()\n-            });\n-\n-        // `assert_eq` instead of `assert!(completions.is_none())` to get the list of completions if test will panic.\n-        assert_eq!(completions, None, \"Completions were generated, but weren't expected\");\n-    }\n-\n-    #[test]\n-    fn test_completion_detail_from_macro_generated_struct_fn_doc_attr() {\n-        check_detail_and_documentation(\n-            r#\"\n-macro_rules! bar {\n-    () => {\n-        struct Bar;\n-        impl Bar {\n-            #[doc = \"Do the foo\"]\n-            fn foo(&self) {}\n-        }\n-    }\n-}\n-\n-bar!();\n-\n-fn foo() {\n-    let bar = Bar;\n-    bar.fo$0;\n-}\n-\"#,\n-            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \"Do the foo\" },\n-        );\n-    }\n-\n-    #[test]\n-    fn test_completion_detail_from_macro_generated_struct_fn_doc_comment() {\n-        check_detail_and_documentation(\n-            r#\"\n-macro_rules! bar {\n-    () => {\n-        struct Bar;\n-        impl Bar {\n-            /// Do the foo\n-            fn foo(&self) {}\n-        }\n-    }\n-}\n-\n-bar!();\n-\n-fn foo() {\n-    let bar = Bar;\n-    bar.fo$0;\n-}\n-\"#,\n-            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \"Do the foo\" },\n-        );\n-    }\n-\n-    #[test]\n-    fn test_no_completions_required() {\n-        // There must be no hint for 'in' keyword.\n-        check_no_completion(r#\"fn foo() { for i i$0 }\"#);\n-        // After 'in' keyword hints may be spawned.\n-        check_detail_and_documentation(\n-            r#\"\n-/// Do the foo\n-fn foo() -> &'static str { \"foo\" }\n-\n-fn bar() {\n-    for c in fo$0\n-}\n-\"#,\n-            DetailAndDocumentation { detail: \"fn() -> &str\", documentation: \"Do the foo\" },\n-        );\n-    }\n-}"}, {"sha": "62e4334decdf820126ce042d881dbf3d498ae8b7", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -11,14 +11,16 @@ use syntax::{\n };\n \n #[cfg(test)]\n-use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n+use crate::tests::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n /// Immediate previous node to what we are completing.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediatePrevSibling {\n     IfExpr,\n     TraitDefName,\n     ImplDefType,\n+    Visibility,\n+    Attribute,\n }\n \n /// Direct parent \"thing\" of what we are currently completing.\n@@ -79,6 +81,17 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n         _ => node,\n     };\n     let prev_sibling = non_trivia_sibling(node.into(), Direction::Prev)?.into_node()?;\n+    if prev_sibling.kind() == ERROR {\n+        let prev_sibling = prev_sibling.first_child()?;\n+        let res = match_ast! {\n+            match prev_sibling {\n+                // vis followed by random ident will always error the parser\n+                ast::Visibility(_it) => ImmediatePrevSibling::Visibility,\n+                _ => return None,\n+            }\n+        };\n+        return Some(res);\n+    }\n     let res = match_ast! {\n         match prev_sibling {\n             ast::ExprStmt(it) => {\n@@ -101,6 +114,7 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n                 } else {\n                     return None\n             },\n+            ast::Attr(_it) => ImmediatePrevSibling::Attribute,\n             _ => return None,\n         }\n     };\n@@ -310,7 +324,7 @@ fn previous_non_trivia_token(token: SyntaxToken) -> Option<SyntaxToken> {\n mod tests {\n     use syntax::algo::find_node_at_offset;\n \n-    use crate::test_utils::position;\n+    use crate::tests::position;\n \n     use super::*;\n \n@@ -421,4 +435,14 @@ mod tests {\n         check_prev_sibling(r\"fn foo() { if true {} w$0\", ImmediatePrevSibling::IfExpr);\n         check_prev_sibling(r\"fn foo() { if true {}; w$0\", None);\n     }\n+\n+    #[test]\n+    fn test_vis_prev_sibling() {\n+        check_prev_sibling(r\"pub w$0\", ImmediatePrevSibling::Visibility);\n+    }\n+\n+    #[test]\n+    fn test_attr_prev_sibling() {\n+        check_prev_sibling(r\"#[attr] w$0\", ImmediatePrevSibling::Attribute);\n+    }\n }"}, {"sha": "4b55f7504daedf223682f9d8c9bd776bcf1ef465", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -335,7 +335,7 @@ mod tests {\n \n     use crate::{\n         item::CompletionRelevanceTypeMatch,\n-        test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n+        tests::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n         CompletionKind, CompletionRelevance,\n     };\n "}, {"sha": "91dc178f345cf3aee9b76a54ae7dd924579a29bb", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -121,7 +121,7 @@ impl<'a> EnumRender<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn inserts_parens_for_tuple_enums() {"}, {"sha": "19f2c86e9c40ce7eed8cf56bda3cbda73550b8a6", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -191,7 +191,7 @@ impl<'a> FunctionRender<'a> {\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, TEST_CONFIG},\n+        tests::{check_edit, check_edit_with_config, TEST_CONFIG},\n         CompletionConfig,\n     };\n "}, {"sha": "d5a1f45d3e6c0ffe3731faabbc1635d194d251f3", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -133,7 +133,7 @@ fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static s\n \n #[cfg(test)]\n mod tests {\n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn dont_insert_macro_call_parens_unncessary() {"}, {"sha": "1495924ea360df8a1131be1e59de04d096b4caad", "filename": "crates/ide_completion/src/tests.rs", "status": "renamed", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -1,4 +1,4 @@\n-//! Runs completion for testing purposes.\n+mod item_list;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{\n@@ -31,6 +31,14 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     },\n };\n \n+fn completion_list(code: &str) -> String {\n+    completion_list_with_config(TEST_CONFIG, code)\n+}\n+\n+fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n+    render_completion_list(get_all_items(config, code))\n+}\n+\n /// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n@@ -57,24 +65,27 @@ pub(crate) fn do_completion_with_config(\n         .collect()\n }\n \n-pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n-    completion_list_with_config(TEST_CONFIG, code, kind)\n+pub(crate) fn filtered_completion_list(code: &str, kind: CompletionKind) -> String {\n+    filtered_completion_list_with_config(TEST_CONFIG, code, kind)\n }\n \n-pub(crate) fn completion_list_with_config(\n+pub(crate) fn filtered_completion_list_with_config(\n     config: CompletionConfig,\n     code: &str,\n     kind: CompletionKind,\n ) -> String {\n     let kind_completions: Vec<CompletionItem> =\n         get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n-    let label_width = kind_completions\n-        .iter()\n-        .map(|it| monospace_width(it.label()))\n-        .max()\n-        .unwrap_or_default()\n-        .min(16);\n-    kind_completions\n+    render_completion_list(kind_completions)\n+}\n+\n+fn render_completion_list(completions: Vec<CompletionItem>) -> String {\n+    fn monospace_width(s: &str) -> usize {\n+        s.chars().count()\n+    }\n+    let label_width =\n+        completions.iter().map(|it| monospace_width(it.label())).max().unwrap_or_default().min(16);\n+    completions\n         .into_iter()\n         .map(|it| {\n             let tag = it.kind().unwrap().tag();\n@@ -93,10 +104,6 @@ pub(crate) fn completion_list_with_config(\n         .collect()\n }\n \n-fn monospace_width(s: &str) -> usize {\n-    s.chars().count()\n-}\n-\n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n     check_edit_with_config(TEST_CONFIG, what, ra_fixture_before, ra_fixture_after)\n }\n@@ -152,3 +159,18 @@ pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<Complet\n     let (db, position) = position(code);\n     crate::completions(&db, &config, position).unwrap().into()\n }\n+\n+fn check_no_completion(ra_fixture: &str) {\n+    let (db, position) = position(ra_fixture);\n+\n+    assert!(\n+        crate::completions(&db, &TEST_CONFIG, position).is_none(),\n+        \"Completions were generated, but weren't expected\"\n+    );\n+}\n+\n+#[test]\n+fn test_no_completions_required() {\n+    cov_mark::check!(no_completion_required);\n+    check_no_completion(r#\"fn foo() { for i i$0 }\"#);\n+}", "previous_filename": "crates/ide_completion/src/test_utils.rs"}, {"sha": "7c124ac370bc0bf1a23506dfe81b1573d0fa33d3", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b8af44829521a9f925c4d87599efa3fef38edc/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=d6b8af44829521a9f925c4d87599efa3fef38edc", "patch": "@@ -0,0 +1,223 @@\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let base = r#\"#[rustc_builtin_macro]\n+pub macro Clone {}\n+enum Enum { Variant }\n+struct Struct {}\n+#[macro_export]\n+macro_rules! foo {}\n+mod bar {}\n+const CONST: () = ();\n+trait Trait {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn in_mod_item_list() {\n+    check(\n+        r#\"mod tests { $0 }\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw impl\n+            kw extern\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n+            sn tmod (Test module)\n+            sn tfn (Test function)\n+            sn macro_rules\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn in_source_file_item_list() {\n+    check(\n+        r#\"$0\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw impl\n+            kw extern\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n+            sn tmod (Test module)\n+            sn tfn (Test function)\n+            sn macro_rules\n+            md bar\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn in_item_list_after_attr() {\n+    check(\n+        r#\"#[attr] $0\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw impl\n+            kw extern\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n+            sn tmod (Test module)\n+            sn tfn (Test function)\n+            sn macro_rules\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_qualified_path() {\n+    check(\n+        r#\"crate::$0\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw impl\n+            kw extern\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n+            md bar\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn after_unsafe_token() {\n+    check(\n+        r#\"unsafe $0\"#,\n+        expect![[r#\"\n+            kw fn\n+            kw trait\n+            kw impl\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn after_visibility() {\n+    check(\n+        r#\"pub $0\"#,\n+        expect![[r#\"\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn after_visibility_unsafe() {\n+    // FIXME this shouldn't show `impl`\n+    check(\n+        r#\"pub unsafe $0\"#,\n+        expect![[r#\"\n+            kw fn\n+            kw trait\n+            kw impl\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn in_impl_assoc_item_list() {\n+    check(\n+        r#\"impl Struct { $0 }\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            md bar\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_assoc_item_list_after_attr() {\n+    check(\n+        r#\"impl Struct { #[attr] $0 }\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_trait_assoc_item_list() {\n+    check(\n+        r\"trait Foo { $0 }\",\n+        expect![[r##\"\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            md bar\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+        \"##]],\n+    );\n+}"}]}