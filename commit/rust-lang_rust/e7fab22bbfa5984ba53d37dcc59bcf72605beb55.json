{"sha": "e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZmFiMjJiYmZhNTk4NGJhNTNkMzdkY2M1OWJjZjcyNjA1YmViNTU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-19T04:22:13Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-19T04:22:13Z"}, "message": "Fallout from deprecation", "tree": {"sha": "674c98b4f982bf433de422bc673d092cf252dc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674c98b4f982bf433de422bc673d092cf252dc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "html_url": "https://github.com/rust-lang/rust/commit/e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdbc09ad484847378b87ee8d60096cd39d8fb47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbc09ad484847378b87ee8d60096cd39d8fb47a", "html_url": "https://github.com/rust-lang/rust/commit/bdbc09ad484847378b87ee8d60096cd39d8fb47a"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "add42a2ddce8441bc83331cd5f15702a033453ef", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "patch": "@@ -429,12 +429,12 @@ impl Float for f32 {\n \n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n-    fn to_degrees(self) -> f32 { self * (180.0f32 / Float::pi()) }\n+    fn to_degrees(self) -> f32 { self * (180.0f32 / consts::PI) }\n \n     /// Converts to radians, assuming the number is in degrees.\n     #[inline]\n     fn to_radians(self) -> f32 {\n-        let value: f32 = Float::pi();\n+        let value: f32 = consts::PI;\n         self * (value / 180.0f32)\n     }\n }"}, {"sha": "12c0771d0b936516e521f206457bcde3896023a3", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "patch": "@@ -437,12 +437,12 @@ impl Float for f64 {\n \n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n-    fn to_degrees(self) -> f64 { self * (180.0f64 / Float::pi()) }\n+    fn to_degrees(self) -> f64 { self * (180.0f64 / consts::PI) }\n \n     /// Converts to radians, assuming the number is in degrees.\n     #[inline]\n     fn to_radians(self) -> f64 {\n-        let value: f64 = Float::pi();\n+        let value: f64 = consts::PI;\n         self * (value / 180.0)\n     }\n }"}, {"sha": "48e52fab51c5e9aa8552a1677ba1dd0cf0e3518b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fab22bbfa5984ba53d37dcc59bcf72605beb55/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e7fab22bbfa5984ba53d37dcc59bcf72605beb55", "patch": "@@ -42,7 +42,7 @@ use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Less, Equal, Greater, Equiv}\n use cmp;\n use default::Default;\n use iter::*;\n-use num::{Int, div_rem};\n+use num::Int;\n use ops;\n use option::{None, Option, Some};\n use ptr;\n@@ -1384,7 +1384,8 @@ impl<'a, T> Iterator<&'a [T]> for Chunks<'a, T> {\n         if self.v.len() == 0 {\n             (0, Some(0))\n         } else {\n-            let (n, rem) = div_rem(self.v.len(), self.size);\n+            let n = self.v.len() / self.size;\n+            let rem = self.v.len() % self.size;\n             let n = if rem > 0 { n+1 } else { n };\n             (n, Some(n))\n         }\n@@ -1457,7 +1458,8 @@ impl<'a, T> Iterator<&'a mut [T]> for MutChunks<'a, T> {\n         if self.v.len() == 0 {\n             (0, Some(0))\n         } else {\n-            let (n, rem) = div_rem(self.v.len(), self.chunk_size);\n+            let n = self.v.len() / self.chunk_size;\n+            let rem = self.v.len() % self.chunk_size;\n             let n = if rem > 0 { n + 1 } else { n };\n             (n, Some(n))\n         }"}]}