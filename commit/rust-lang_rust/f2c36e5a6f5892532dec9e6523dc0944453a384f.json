{"sha": "f2c36e5a6f5892532dec9e6523dc0944453a384f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzM2ZTVhNmY1ODkyNTMyZGVjOWU2NTIzZGMwOTQ0NDUzYTM4NGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T08:17:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T08:17:02Z"}, "message": "Merge #2360\n\n2360: Refactor builtin macro r=matklad a=edwin0cheng\n\nRefactor builtin macro and add some local tests.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "6ad67c7948d081c31d3a0ab05311862677bc0527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad67c7948d081c31d3a0ab05311862677bc0527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c36e5a6f5892532dec9e6523dc0944453a384f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2jx+CRBK7hj4Ov3rIwAAdHIIAK0NR4ZAmOH7AniTNzlrEIJH\nK7kQjsDI9axDt6Ae49K1yeUfLCcf6UfN8Pdjkhmu1Xj3qwQeXDgArZFSmKEB1hFf\nNRH/tIolasa1nuv/abpK9Q45z8g0ntx40FISsRmCx5UjW5ZkHQE5mntMj430zb1+\nYaScxzoAaL975ki7/35ND3Ex9BvowI2SdXyzhiYhDYKmuFhxSbL1izcYUF4KhIMc\nvRAfmllyQua6rBqEFT4utvS6hp8sShdAB/u1pYnxqmcsLxdMq04lFDPVWPRK9x/b\nsC3xcfidj0itZOmc8AQjtvzLz3CD9Bo3nBLlLI6kay9ZSkiBummbGH0GHJHI6u4=\n=xpfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ad67c7948d081c31d3a0ab05311862677bc0527\nparent 1aded342266f18b519666ac512e77b0c211fff5d\nparent 16854e28ef1f2010d7d7d8e959a193fbcaeb5be8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574583422 +0000\ncommitter GitHub <noreply@github.com> 1574583422 +0000\n\nMerge #2360\n\n2360: Refactor builtin macro r=matklad a=edwin0cheng\n\nRefactor builtin macro and add some local tests.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c36e5a6f5892532dec9e6523dc0944453a384f", "html_url": "https://github.com/rust-lang/rust/commit/f2c36e5a6f5892532dec9e6523dc0944453a384f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c36e5a6f5892532dec9e6523dc0944453a384f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aded342266f18b519666ac512e77b0c211fff5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aded342266f18b519666ac512e77b0c211fff5d", "html_url": "https://github.com/rust-lang/rust/commit/1aded342266f18b519666ac512e77b0c211fff5d"}, {"sha": "16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "html_url": "https://github.com/rust-lang/rust/commit/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8"}], "stats": {"total": 226, "additions": 184, "deletions": 42}, "files": [{"sha": "c0e0436c0a597eae56f028db68418a26ce311437", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 126, "deletions": 37, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=f2c36e5a6f5892532dec9e6523dc0944453a384f", "patch": "@@ -8,47 +8,47 @@ use crate::{\n \n use crate::quote;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum BuiltinExpander {\n-    Column,\n-    File,\n-    Line,\n-    Stringify,\n-}\n+macro_rules! register_builtin {\n+    ( $(($name:ident, $kind: ident) => $expand:ident),* ) => {\n+        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+        pub enum BuiltinFnLikeExpander {\n+            $($kind),*\n+        }\n \n-impl BuiltinExpander {\n-    pub fn expand(\n-        &self,\n-        db: &dyn AstDatabase,\n-        id: MacroCallId,\n-        tt: &tt::Subtree,\n-    ) -> Result<tt::Subtree, mbe::ExpandError> {\n-        match self {\n-            BuiltinExpander::Column => column_expand(db, id, tt),\n-            BuiltinExpander::File => file_expand(db, id, tt),\n-            BuiltinExpander::Line => line_expand(db, id, tt),\n-            BuiltinExpander::Stringify => stringify_expand(db, id, tt),\n+        impl BuiltinFnLikeExpander {\n+            pub fn expand(\n+                &self,\n+                db: &dyn AstDatabase,\n+                id: MacroCallId,\n+                tt: &tt::Subtree,\n+            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+                let expander = match *self {\n+                    $( BuiltinFnLikeExpander::$kind => $expand, )*\n+                };\n+                expander(db, id, tt)\n+            }\n         }\n-    }\n+\n+        pub fn find_builtin_macro(\n+            ident: &name::Name,\n+            krate: CrateId,\n+            ast_id: AstId<ast::MacroCall>,\n+        ) -> Option<MacroDefId> {\n+            let kind = match ident {\n+                 $( id if id == &name::$name => BuiltinFnLikeExpander::$kind, )*\n+                 _ => return None,\n+            };\n+\n+            Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(kind) })\n+        }\n+    };\n }\n \n-pub fn find_builtin_macro(\n-    ident: &name::Name,\n-    krate: CrateId,\n-    ast_id: AstId<ast::MacroCall>,\n-) -> Option<MacroDefId> {\n-    // FIXME: Better registering method\n-    if ident == &name::COLUMN_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Column) })\n-    } else if ident == &name::FILE_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::File) })\n-    } else if ident == &name::LINE_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Line) })\n-    } else if ident == &name::STRINGIFY_MACRO {\n-        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Stringify) })\n-    } else {\n-        None\n-    }\n+register_builtin! {\n+    (COLUMN_MACRO, Column) => column_expand,\n+    (FILE_MACRO, File) => file_expand,\n+    (LINE_MACRO, Line) => line_expand,\n+    (STRINGIFY_MACRO, Stringify) => stringify_expand\n }\n \n fn to_line_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize {\n@@ -171,3 +171,92 @@ fn file_expand(\n \n     Ok(expanded)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::{test_db::TestDB, MacroCallLoc};\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n+\n+    fn expand_builtin_macro(s: &str, expander: BuiltinFnLikeExpander) -> String {\n+        let (db, file_id) = TestDB::with_single_file(&s);\n+        let parsed = db.parse(file_id);\n+        let macro_calls: Vec<_> =\n+            parsed.syntax_node().descendants().filter_map(|it| ast::MacroCall::cast(it)).collect();\n+\n+        let ast_id_map = db.ast_id_map(file_id.into());\n+\n+        // the first one should be a macro_rules\n+        let def = MacroDefId {\n+            krate: CrateId(0),\n+            ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0])),\n+            kind: MacroDefKind::BuiltIn(expander),\n+        };\n+\n+        let loc = MacroCallLoc {\n+            def,\n+            ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[1])),\n+        };\n+\n+        let id = db.intern_macro(loc);\n+        let parsed = db.parse_or_expand(id.as_file(MacroFileKind::Expr)).unwrap();\n+\n+        parsed.text().to_string()\n+    }\n+\n+    #[test]\n+    fn test_column_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! column {() => {}}\n+        column!()\n+\"#,\n+            BuiltinFnLikeExpander::Column,\n+        );\n+\n+        assert_eq!(expanded, \"9\");\n+    }\n+\n+    #[test]\n+    fn test_line_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! line {() => {}}\n+        line!()\n+\"#,\n+            BuiltinFnLikeExpander::Line,\n+        );\n+\n+        assert_eq!(expanded, \"4\");\n+    }\n+\n+    #[test]\n+    fn test_stringify_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! stringify {() => {}}\n+        stringify!(a b c)\n+\"#,\n+            BuiltinFnLikeExpander::Stringify,\n+        );\n+\n+        assert_eq!(expanded, \"\\\"a b c\\\"\");\n+    }\n+\n+    #[test]\n+    fn test_file_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+        #[rustc_builtin_macro]\n+        macro_rules! file {() => {}}\n+        file!()\n+\"#,\n+            BuiltinFnLikeExpander::File,\n+        );\n+\n+        assert_eq!(expanded, \"\\\"\\\"\");\n+    }\n+}"}, {"sha": "8e46fa177d65bcd08c3599a9a7782c69d13b4ba5", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=f2c36e5a6f5892532dec9e6523dc0944453a384f", "patch": "@@ -9,14 +9,14 @@ use ra_prof::profile;\n use ra_syntax::{AstNode, Parse, SyntaxNode};\n \n use crate::{\n-    ast_id_map::AstIdMap, BuiltinExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc,\n-    MacroDefId, MacroDefKind, MacroFile, MacroFileKind,\n+    ast_id_map::AstIdMap, BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId,\n+    MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, MacroFileKind,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     MacroRules(mbe::MacroRules),\n-    Builtin(BuiltinExpander),\n+    Builtin(BuiltinFnLikeExpander),\n }\n \n impl TokenExpander {"}, {"sha": "4f3ccf1d0ddb57aa08cd4812d6e5c5732ecaa804", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=f2c36e5a6f5892532dec9e6523dc0944453a384f", "patch": "@@ -24,7 +24,10 @@ use ra_syntax::{\n };\n \n use crate::ast_id_map::FileAstId;\n-use crate::builtin_macro::BuiltinExpander;\n+use crate::builtin_macro::BuiltinFnLikeExpander;\n+\n+#[cfg(test)]\n+mod test_db;\n \n /// Input to the analyzer is a set of files, where each file is identified by\n /// `FileId` and contains source code. However, another source of source code in\n@@ -135,7 +138,7 @@ pub struct MacroDefId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum MacroDefKind {\n     Declarative,\n-    BuiltIn(BuiltinExpander),\n+    BuiltIn(BuiltinFnLikeExpander),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "d23e75d9ee3b93ee421e5d0e7ad3ec2b5cf1fe58", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c36e5a6f5892532dec9e6523dc0944453a384f/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=f2c36e5a6f5892532dec9e6523dc0944453a384f", "patch": "@@ -0,0 +1,50 @@\n+//! Database used for testing `hir_expand`.\n+\n+use std::{\n+    panic,\n+    sync::{Arc, Mutex},\n+};\n+\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n+\n+#[salsa::database(\n+    ra_db::SourceDatabaseExtStorage,\n+    ra_db::SourceDatabaseStorage,\n+    crate::db::AstDatabaseStorage\n+)]\n+#[derive(Debug, Default)]\n+pub struct TestDB {\n+    runtime: salsa::Runtime<TestDB>,\n+    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n+}\n+\n+impl salsa::Database for TestDB {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n+        &self.runtime\n+    }\n+\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+        let mut events = self.events.lock().unwrap();\n+        if let Some(events) = &mut *events {\n+            events.push(event());\n+        }\n+    }\n+}\n+\n+impl panic::RefUnwindSafe for TestDB {}\n+\n+impl FileLoader for TestDB {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        FileLoaderDelegate(self).file_text(file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n+    }\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        FileLoaderDelegate(self).relevant_crates(file_id)\n+    }\n+}"}]}