{"sha": "590bd5f849cf257f499f6c7aa8da3dc4ffc7578f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MGJkNWY4NDljZjI1N2Y0OTlmNmM3YWE4ZGEzZGM0ZmZjNzU3OGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-19T15:04:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "workaround across-crate resolve bugs", "tree": {"sha": "a521356e3b9be9f97fe94e252ea043e44a2c08d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a521356e3b9be9f97fe94e252ea043e44a2c08d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f", "html_url": "https://github.com/rust-lang/rust/commit/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe41574a1695a6608d738f40ec51bc61fc7604a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe41574a1695a6608d738f40ec51bc61fc7604a", "html_url": "https://github.com/rust-lang/rust/commit/2fe41574a1695a6608d738f40ec51bc61fc7604a"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "dc05c711297ab608ddbd07d58dfe6be3ad587cd5", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590bd5f849cf257f499f6c7aa8da3dc4ffc7578f/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=590bd5f849cf257f499f6c7aa8da3dc4ffc7578f", "patch": "@@ -252,7 +252,8 @@ where\n                 let krate = Crate::new(crate_id);\n                 for dep in krate.dependencies(self.db) {\n                     if let Some(module) = dep.krate.root_module(self.db)? {\n-                        self.add_module_item(&mut module_items, dep.name, module.module_id);\n+                        let def_id = module.def_id(self.db);\n+                        self.add_module_item(&mut module_items, dep.name, def_id);\n                     }\n                 }\n             };\n@@ -294,21 +295,21 @@ where\n \n         // Populate modules\n         for (name, module_id) in module_id.children(&self.module_tree) {\n-            self.add_module_item(&mut module_items, name, module_id);\n+            let def_loc = DefLoc {\n+                kind: DefKind::Module,\n+                source_root_id: self.source_root,\n+                module_id,\n+                source_item_id: module_id.source(&self.module_tree).0,\n+            };\n+            let def_id = def_loc.id(self.db);\n+            self.add_module_item(&mut module_items, name, def_id);\n         }\n \n         self.result.per_module.insert(module_id, module_items);\n         Ok(())\n     }\n \n-    fn add_module_item(&self, module_items: &mut ModuleScope, name: SmolStr, module_id: ModuleId) {\n-        let def_loc = DefLoc {\n-            kind: DefKind::Module,\n-            source_root_id: self.source_root,\n-            module_id,\n-            source_item_id: module_id.source(&self.module_tree).0,\n-        };\n-        let def_id = def_loc.id(self.db);\n+    fn add_module_item(&self, module_items: &mut ModuleScope, name: SmolStr, def_id: DefId) {\n         let resolution = Resolution {\n             def_id: Some(def_id),\n             import: None,\n@@ -329,7 +330,7 @@ where\n             ImportKind::Named(ptr) => ptr,\n         };\n \n-        let mut curr = match import.path.kind {\n+        let mut curr: ModuleId = match import.path.kind {\n             PathKind::Plain | PathKind::Self_ => module_id,\n             PathKind::Super => {\n                 match module_id.parent(&self.module_tree) {\n@@ -357,8 +358,16 @@ where\n                     DefLoc {\n                         kind: DefKind::Module,\n                         module_id,\n+                        source_root_id,\n                         ..\n-                    } => module_id,\n+                    } => {\n+                        if source_root_id == self.source_root {\n+                            module_id\n+                        } else {\n+                            // FIXME: across crates resolve\n+                            return Ok(());\n+                        }\n+                    }\n                     _ => return Ok(()),\n                 }\n             } else {"}]}