{"sha": "1e14d397db323b037a22e6440f85293d938ce6a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTRkMzk3ZGIzMjNiMDM3YTIyZTY0NDBmODUyOTNkOTM4Y2U2YTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-15T08:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-15T08:40:03Z"}, "message": "Rollup merge of #82179 - mbartlett21:patch-5, r=joshtriplett\n\nAdd functions `Duration::try_from_secs_{f32, f64}`\n\nThese functions allow constructing a Duration from a floating point value that could be out of range without panicking.\n\nTracking issue: #83400", "tree": {"sha": "c4481a5b6185f260c498ee8ebc2bb5b9cc4e56cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4481a5b6185f260c498ee8ebc2bb5b9cc4e56cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e14d397db323b037a22e6440f85293d938ce6a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyGdlCRBK7hj4Ov3rIwAA6dgIAJgMZLpYs3rFqx8lLJNwPaEa\nuqLGdLn8qbq7FpJPB0knaA6bZr/aISTWMgNe5/XrGzKG6cLHrs6H1nw1CRxGgoad\nV+cYr8LlDBheNHWZJWE00BUDWWFuaqW0Qomy0j3yWrG7/46qSRG32RwMQ24QPmWw\nBG7C3O2R7+CHtkGkQTzUoxJ/GnTQwV9HLBK2AI5TcnoSumqenQkMMUab9dROzdfG\npRSukIg0gWKmBhNQxqfLjZwmfluXL1xwVFbjWQUfYKj0TQORAjOT9WfKuOWeQeDs\nQtHBD0magwY+17D+YreEHwJuv+V3b3MlOeiHX3RY0GN3/2eIf8JcjLcewx+EVs0=\n=/Ms1\n-----END PGP SIGNATURE-----\n", "payload": "tree c4481a5b6185f260c498ee8ebc2bb5b9cc4e56cf\nparent 2d2f1a5e88d6749edc3a51b4d68101e972d2ec25\nparent 7803955cae3dffb37c315e95764df8e949eea590\nauthor Yuki Okushi <jtitor@2k36.org> 1623746403 +0900\ncommitter GitHub <noreply@github.com> 1623746403 +0900\n\nRollup merge of #82179 - mbartlett21:patch-5, r=joshtriplett\n\nAdd functions `Duration::try_from_secs_{f32, f64}`\n\nThese functions allow constructing a Duration from a floating point value that could be out of range without panicking.\n\nTracking issue: #83400\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e14d397db323b037a22e6440f85293d938ce6a7", "html_url": "https://github.com/rust-lang/rust/commit/1e14d397db323b037a22e6440f85293d938ce6a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e14d397db323b037a22e6440f85293d938ce6a7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2f1a5e88d6749edc3a51b4d68101e972d2ec25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2f1a5e88d6749edc3a51b4d68101e972d2ec25", "html_url": "https://github.com/rust-lang/rust/commit/2d2f1a5e88d6749edc3a51b4d68101e972d2ec25"}, {"sha": "7803955cae3dffb37c315e95764df8e949eea590", "url": "https://api.github.com/repos/rust-lang/rust/commits/7803955cae3dffb37c315e95764df8e949eea590", "html_url": "https://github.com/rust-lang/rust/commit/7803955cae3dffb37c315e95764df8e949eea590"}], "stats": {"total": 156, "additions": 132, "deletions": 24}, "files": [{"sha": "92a4e6039189442190d56247bb0b6dcda7876ef7", "filename": "library/core/src/time.rs", "status": "modified", "additions": 128, "deletions": 24, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=1e14d397db323b037a22e6440f85293d938ce6a7", "patch": "@@ -687,21 +687,47 @@ impl Duration {\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n+        match Duration::try_from_secs_f64(secs) {\n+            Ok(v) => v,\n+            Err(e) => crate::panicking::panic(e.description()),\n+        }\n+    }\n+\n+    /// The checked version of [`from_secs_f64`].\n+    ///\n+    /// [`from_secs_f64`]: Duration::from_secs_f64\n+    ///\n+    /// This constructor will return an `Err` if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_checked_float)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::try_from_secs_f64(2.7);\n+    /// assert_eq!(dur, Ok(Duration::new(2, 700_000_000)));\n+    ///\n+    /// let negative = Duration::try_from_secs_f64(-5.0);\n+    /// assert!(negative.is_err());\n+    /// ```\n+    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[inline]\n+    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, FromSecsError> {\n         const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f64;\n         let nanos = secs * (NANOS_PER_SEC as f64);\n         if !nanos.is_finite() {\n-            panic!(\"got non-finite value when converting float to duration\");\n-        }\n-        if nanos >= MAX_NANOS_F64 {\n-            panic!(\"overflow when converting float to duration\");\n-        }\n-        if nanos < 0.0 {\n-            panic!(\"underflow when converting float to duration\");\n-        }\n-        let nanos = nanos as u128;\n-        Duration {\n-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            Err(FromSecsError { kind: FromSecsErrorKind::NonFinite })\n+        } else if nanos >= MAX_NANOS_F64 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n+        } else if nanos < 0.0 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+        } else {\n+            let nanos = nanos as u128;\n+            Ok(Duration {\n+                secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+                nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            })\n         }\n     }\n \n@@ -722,21 +748,47 @@ impl Duration {\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n+        match Duration::try_from_secs_f32(secs) {\n+            Ok(v) => v,\n+            Err(e) => crate::panicking::panic(e.description()),\n+        }\n+    }\n+\n+    /// The checked version of [`from_secs_f32`].\n+    ///\n+    /// [`from_secs_f32`]: Duration::from_secs_f32\n+    ///\n+    /// This constructor will return an `Err` if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_checked_float)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::try_from_secs_f32(2.7);\n+    /// assert_eq!(dur, Ok(Duration::new(2, 700_000_000)));\n+    ///\n+    /// let negative = Duration::try_from_secs_f32(-5.0);\n+    /// assert!(negative.is_err());\n+    /// ```\n+    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[inline]\n+    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, FromSecsError> {\n         const MAX_NANOS_F32: f32 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f32;\n         let nanos = secs * (NANOS_PER_SEC as f32);\n         if !nanos.is_finite() {\n-            panic!(\"got non-finite value when converting float to duration\");\n-        }\n-        if nanos >= MAX_NANOS_F32 {\n-            panic!(\"overflow when converting float to duration\");\n-        }\n-        if nanos < 0.0 {\n-            panic!(\"underflow when converting float to duration\");\n-        }\n-        let nanos = nanos as u128;\n-        Duration {\n-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            Err(FromSecsError { kind: FromSecsErrorKind::NonFinite })\n+        } else if nanos >= MAX_NANOS_F32 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n+        } else if nanos < 0.0 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+        } else {\n+            let nanos = nanos as u128;\n+            Ok(Duration {\n+                secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+                nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            })\n         }\n     }\n \n@@ -1099,3 +1151,55 @@ impl fmt::Debug for Duration {\n         }\n     }\n }\n+\n+/// An error which can be returned when converting a floating-point value of seconds\n+/// into a [`Duration`].\n+///\n+/// This error is used as the error type for [`Duration::try_from_secs_f32`] and\n+/// [`Duration::try_from_secs_f64`].\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(duration_checked_float)]\n+///\n+/// use std::time::Duration;\n+///\n+/// if let Err(e) = Duration::try_from_secs_f32(-1.0) {\n+///     println!(\"Failed conversion to Duration: {}\", e);\n+/// }\n+/// ```\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+pub struct FromSecsError {\n+    kind: FromSecsErrorKind,\n+}\n+\n+impl FromSecsError {\n+    const fn description(&self) -> &'static str {\n+        match self.kind {\n+            FromSecsErrorKind::NonFinite => {\n+                \"got non-finite value when converting float to duration\"\n+            }\n+            FromSecsErrorKind::Overflow => \"overflow when converting float to duration\",\n+            FromSecsErrorKind::Underflow => \"underflow when converting float to duration\",\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+impl fmt::Display for FromSecsError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self.description(), f)\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum FromSecsErrorKind {\n+    // Value is not a finite value (either infinity or NaN).\n+    NonFinite,\n+    // Value is too large to store in a `Duration`.\n+    Overflow,\n+    // Value is less than `0.0`.\n+    Underflow,\n+}"}, {"sha": "ec9f012295000902e044f21c4ef7900d52adf4e0", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=1e14d397db323b037a22e6440f85293d938ce6a7", "patch": "@@ -597,6 +597,9 @@ impl Error for char::ParseCharError {\n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n impl Error for alloc::collections::TryReserveError {}\n \n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+impl Error for core::time::FromSecsError {}\n+\n // Copied from `any.rs`.\n impl dyn Error + 'static {\n     /// Returns `true` if the boxed type is the same as `T`"}, {"sha": "9fd4bce91148c10ce7f1906e8d7b5e7e63a0eb31", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e14d397db323b037a22e6440f85293d938ce6a7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=1e14d397db323b037a22e6440f85293d938ce6a7", "patch": "@@ -261,6 +261,7 @@\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]\n+#![feature(duration_checked_float)]\n #![feature(duration_constants)]\n #![feature(edition_panic)]\n #![feature(exact_size_is_empty)]"}]}