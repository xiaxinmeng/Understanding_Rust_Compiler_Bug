{"sha": "f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOGUzODczYzU1ZWI0YmRjZmM0OTZlMWYzMDBiOTdhZWIwZDE4OWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-04-22T01:34:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T01:34:06Z"}, "message": "Rollup merge of #71366 - faern:use-assoc-int-consts3, r=dtolnay\n\nUse assoc int consts3\n\nDefine module level int consts with associated constants instead of `min_value()` and `max_value()`. So the code become consistent with what the docs recommend etc. Seems natural.\n\nAlso remove the last usages of the int module constants from this repo (except src/test/ directory which I have still not really done anything in). Some places were missed in the previous PRs because the code uses `crate::<IntTy>` to reach the constants.\n\nThis is a continuation of #70857\n\nr? @dtolnay", "tree": {"sha": "cf842e5abce7ab4af730230b342c338fb93079f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf842e5abce7ab4af730230b342c338fb93079f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJen58OCRBK7hj4Ov3rIwAAdHIIAGl3Rj6zOv8ioAAXl14K4XNt\nWKCeaO2t0ZQAvR9ViAj5fZhKBw+lC6Obc7gkVUxj4/JMfzqqsQV/eyi8eoImUVym\n+szV6Q1vcjLGYXjKl9mTAw3lJBy9U0/u4oHtrJmzzoxl6s5YTb5Vl2T5c9O0wpn8\n4S+ljbah6NmcB8FWwxRs0GQPWR3C+OhsNdhdguXyR6EbV2eQba18GxOGtlFUWFjg\n5EJqUluVnasPeHtdln79xNzXYLjnSXME43UOTrkNS0k92YciGvur4OowU7qudpF/\nWkJ1ZZ/N0nwiS6NN+IcPaeDaKxRrJSjKBXRJhnTxOzX5KGJS4RZ163NznKVMLoc=\n=ekVi\n-----END PGP SIGNATURE-----\n", "payload": "tree cf842e5abce7ab4af730230b342c338fb93079f8\nparent 567e54fca5e864f95cd41ca05c113aa6b18d7006\nparent 9af047ff74f79911b6e251cd1751be8644437158\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1587519246 +0900\ncommitter GitHub <noreply@github.com> 1587519246 +0900\n\nRollup merge of #71366 - faern:use-assoc-int-consts3, r=dtolnay\n\nUse assoc int consts3\n\nDefine module level int consts with associated constants instead of `min_value()` and `max_value()`. So the code become consistent with what the docs recommend etc. Seems natural.\n\nAlso remove the last usages of the int module constants from this repo (except src/test/ directory which I have still not really done anything in). Some places were missed in the previous PRs because the code uses `crate::<IntTy>` to reach the constants.\n\nThis is a continuation of #70857\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "html_url": "https://github.com/rust-lang/rust/commit/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567e54fca5e864f95cd41ca05c113aa6b18d7006", "url": "https://api.github.com/repos/rust-lang/rust/commits/567e54fca5e864f95cd41ca05c113aa6b18d7006", "html_url": "https://github.com/rust-lang/rust/commit/567e54fca5e864f95cd41ca05c113aa6b18d7006"}, {"sha": "9af047ff74f79911b6e251cd1751be8644437158", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af047ff74f79911b6e251cd1751be8644437158", "html_url": "https://github.com/rust-lang/rust/commit/9af047ff74f79911b6e251cd1751be8644437158"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "e9fc1b612dd39aa385edd5a5912ae0a44acbadd5", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -2,7 +2,6 @@ use crate::cmp;\n use crate::fmt;\n use crate::intrinsics;\n use crate::ops::{Add, AddAssign, Try};\n-use crate::usize;\n \n use super::{from_fn, LoopState};\n use super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedLen};"}, {"sha": "37369289c512e9b3314d1b7c1b79dc7d48bdb3d6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -1,7 +1,6 @@\n use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Add, Sub, Try};\n-use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n "}, {"sha": "d76fa89bd012c22f4167b25e336a4aa917d321f0", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -1,6 +1,5 @@\n use crate::fmt;\n use crate::marker;\n-use crate::usize;\n \n use super::{FusedIterator, TrustedLen};\n "}, {"sha": "32f4956328975b4c9b748f9cf86df5482e605061", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -265,7 +265,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self.abs_private() == INFINITY\n+        self.abs_private() == Self::INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -287,7 +287,7 @@ impl f32 {\n     pub fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n-        self.abs_private() < INFINITY\n+        self.abs_private() < Self::INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "b38fd804ee80fc9cddec632247aa8c370170e1cd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -264,7 +264,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self.abs_private() == INFINITY\n+        self.abs_private() == Self::INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -286,7 +286,7 @@ impl f64 {\n     pub fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n-        self.abs_private() < INFINITY\n+        self.abs_private() < Self::INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "c43536c6fcca86585db29821f1772c2f3fbc94dc", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -2,7 +2,6 @@\n \n use crate::num::dec2flt::rawfp::RawFloat;\n use crate::num::FpCategory;\n-use crate::{f32, f64};\n \n /// Decoded unsigned finite value, such that:\n ///"}, {"sha": "9bf56e93d896f1d96db0c7de7b6e0053ea62b1e6", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -123,7 +123,6 @@ functions.\n )]\n \n pub use self::decoder::{decode, DecodableFloat, Decoded, FullDecoded};\n-use crate::i16;\n \n pub mod decoder;\n pub mod estimator;"}, {"sha": "5035445ba939fe7a0e23969ac51ad65fd93bed4b", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -14,14 +14,14 @@ macro_rules! int_module {\n             concat!(\"The smallest value that can be represented by this integer type.\n Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\"),\n             #[$attr]\n-            pub const MIN: $T = $T::min_value();\n+            pub const MIN: $T = $T::MIN;\n         }\n \n         doc_comment! {\n             concat!(\"The largest value that can be represented by this integer type.\n Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\"),\n             #[$attr]\n-            pub const MAX: $T = $T::max_value();\n+            pub const MAX: $T = $T::MAX;\n         }\n     )\n }"}, {"sha": "3b13ed5fed396918ac7ab575eb6e17ba3a3ab54b", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -34,7 +34,7 @@ fn repeat_byte(b: u8) -> usize {\n #[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n fn repeat_byte(b: u8) -> usize {\n-    (b as usize) * (crate::usize::MAX / 255)\n+    (b as usize) * (usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`."}, {"sha": "dc395bcfba5ccf5be2d38f62cdf686da8bf27910", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -28,7 +28,6 @@ use crate::cmp;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::fmt;\n use crate::intrinsics::{assume, exact_div, is_aligned_and_not_null, unchecked_sub};\n-use crate::isize;\n use crate::iter::*;\n use crate::marker::{self, Copy, Send, Sized, Sync};\n use crate::mem;"}, {"sha": "1a2b612b2f95c531787802548b8e31f28a9fd1db", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -46,7 +46,6 @@\n use crate::cmp;\n use crate::fmt;\n use crate::slice::memchr;\n-use crate::usize;\n \n // Pattern\n "}, {"sha": "ed1d5d46db5c4c02c7b793f3ad240edb9f68d007", "filename": "src/libcore/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -12,9 +12,9 @@\n //! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n //! ```\n \n+use crate::fmt;\n use crate::iter::Sum;\n use crate::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n-use crate::{fmt, u64};\n \n const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;"}, {"sha": "8e743ace99bfbddde05b22d12495bdbb0ed87613", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -171,7 +171,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f32 {\n-        if self.is_nan() { NAN } else { 1.0_f32.copysign(self) }\n+        if self.is_nan() { Self::NAN } else { 1.0_f32.copysign(self) }\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n@@ -832,8 +832,8 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        if self == NEG_INFINITY {\n-            NEG_INFINITY\n+        if self == Self::NEG_INFINITY {\n+            Self::NEG_INFINITY\n         } else {\n             (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n@@ -855,7 +855,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        if self < 1.0 { crate::f32::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "fe64d27b1efc8fb9a7441c7f47b41ec0c82a381d", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -171,7 +171,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f64 {\n-        if self.is_nan() { NAN } else { 1.0_f64.copysign(self) }\n+        if self.is_nan() { Self::NAN } else { 1.0_f64.copysign(self) }\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n@@ -834,8 +834,8 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        if self == NEG_INFINITY {\n-            NEG_INFINITY\n+        if self == Self::NEG_INFINITY {\n+            Self::NEG_INFINITY\n         } else {\n             (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n@@ -857,7 +857,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        if self < 1.0 { NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n     }\n \n     /// Inverse hyperbolic tangent function.\n@@ -926,16 +926,16 @@ impl f64 {\n                 if self > 0.0 {\n                     log_fn(self)\n                 } else if self == 0.0 {\n-                    NEG_INFINITY // log(0) = -Inf\n+                    Self::NEG_INFINITY // log(0) = -Inf\n                 } else {\n-                    NAN // log(-n) = NaN\n+                    Self::NAN // log(-n) = NaN\n                 }\n             } else if self.is_nan() {\n                 self // log(NaN) = NaN\n             } else if self > 0.0 {\n                 self // log(Inf) = Inf\n             } else {\n-                NAN // log(-Inf) = NaN\n+                Self::NAN // log(-Inf) = NaN\n             }\n         }\n     }"}, {"sha": "7a3cbbe4562ff70f8ff480c85e703ed2614d593e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -1062,7 +1062,7 @@ impl ThreadId {\n \n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n-            if COUNTER == crate::u64::MAX {\n+            if COUNTER == u64::MAX {\n                 panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n             }\n "}, {"sha": "b35f67ef9124338f05e4d152726af3ac5ab69fb2", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28e3873c55eb4bdcfc496e1f300b97aeb0d189c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=f28e3873c55eb4bdcfc496e1f300b97aeb0d189c", "patch": "@@ -51,7 +51,7 @@ pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n // @has show_const_contents/constant.PI.html '; // 3.14159274f32'\n pub use std::f32::consts::PI;\n \n-// @has show_const_contents/constant.MAX.html '= i32::max_value(); // 2_147_483_647i32'\n+// @has show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n pub use std::i32::MAX;\n \n macro_rules! int_module {"}]}