{"sha": "c743fc43420ff09a79cc23316e484631842556dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDNmYzQzNDIwZmYwOWE3OWNjMjMzMTZlNDg0NjMxODQyNTU2ZGM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-10T14:05:33Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-13T05:30:49Z"}, "message": "Ignore rustc_private items from std docs\n\nApply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "4d0b413a53f44084b517ca71b0c22c7757e74357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d0b413a53f44084b517ca71b0c22c7757e74357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c743fc43420ff09a79cc23316e484631842556dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c743fc43420ff09a79cc23316e484631842556dc", "html_url": "https://github.com/rust-lang/rust/commit/c743fc43420ff09a79cc23316e484631842556dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c743fc43420ff09a79cc23316e484631842556dc/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd4582f95f0e07349cd34be0a5417280ce1d45b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4582f95f0e07349cd34be0a5417280ce1d45b", "html_url": "https://github.com/rust-lang/rust/commit/7dd4582f95f0e07349cd34be0a5417280ce1d45b"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "f8987c6beca33966aa0e3594d10d905f22d21412", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c743fc43420ff09a79cc23316e484631842556dc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c743fc43420ff09a79cc23316e484631842556dc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c743fc43420ff09a79cc23316e484631842556dc", "patch": "@@ -337,18 +337,13 @@ pub fn build_impl(\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n-            if !cx.renderinfo.borrow().access_levels.is_public(traitref.def_id) {\n+            let did = traitref.def_id;\n+            if !cx.renderinfo.borrow().access_levels.is_public(did) {\n                 return;\n             }\n-        }\n \n-        // Skip foreign unstable traits from lists of trait implementations and\n-        // such. This helps prevent dependencies of the standard library, for\n-        // example, from getting documented as \"traits `u32` implements\" which\n-        // isn't really too helpful.\n-        if let Some(trait_did) = associated_trait {\n-            if let Some(stab) = cx.tcx.lookup_stability(trait_did.def_id) {\n-                if stab.level.is_unstable() {\n+            if let Some(stab) = tcx.lookup_stability(did) {\n+                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }\n@@ -372,6 +367,12 @@ pub fn build_impl(\n             if !cx.renderinfo.borrow().access_levels.is_public(did) {\n                 return;\n             }\n+\n+            if let Some(stab) = tcx.lookup_stability(did) {\n+                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                    return;\n+                }\n+            }\n         }\n     }\n "}, {"sha": "4fe493a850d48f81e26d2cfa811728647e06fd26", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c743fc43420ff09a79cc23316e484631842556dc/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c743fc43420ff09a79cc23316e484631842556dc/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=c743fc43420ff09a79cc23316e484631842556dc", "patch": "@@ -142,6 +142,16 @@ fn is_exception(file: &Path, link: &str) -> bool {\n     if let Some(entry) = LINKCHECK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n         entry.1.contains(&link)\n     } else {\n+        // FIXME(#63351): Concat trait in alloc/slice reexported in primitive page\n+        //\n+        // NOTE: This cannot be added to `LINKCHECK_EXCEPTIONS` because the resolved path\n+        // calculated in `check` function is outside `build/<triple>/doc` dir.\n+        // So the `strip_prefix` method just returns the old absolute broken path.\n+        if file.ends_with(\"std/primitive.slice.html\") {\n+            if link.ends_with(\"primitive.slice.html\") {\n+                return true;\n+            }\n+        }\n         false\n     }\n }"}]}