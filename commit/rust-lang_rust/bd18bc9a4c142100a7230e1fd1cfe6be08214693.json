{"sha": "bd18bc9a4c142100a7230e1fd1cfe6be08214693", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMThiYzlhNGMxNDIxMDBhNzIzMGUxZmQxY2ZlNmJlMDgyMTQ2OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-06T11:32:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-06T11:32:33Z"}, "message": "Auto merge of #70771 - RalfJung:ctfe-loop, r=oli-obk\n\n Miri terminator handling: only do progress sanity check for 'Call' terminator\n\nThis will still catch mistakes in bad intrinsic/foreign-item shims, which is the main source of errors here.\n\nFixes https://github.com/rust-lang/rust/issues/70723\nr? @oli-obk", "tree": {"sha": "bb599a90697d142690270270e17096a3e1ba4c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb599a90697d142690270270e17096a3e1ba4c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd18bc9a4c142100a7230e1fd1cfe6be08214693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18bc9a4c142100a7230e1fd1cfe6be08214693", "html_url": "https://github.com/rust-lang/rust/commit/bd18bc9a4c142100a7230e1fd1cfe6be08214693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd18bc9a4c142100a7230e1fd1cfe6be08214693/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733f104f138477ef20f59eadcbcf8800b21a7732", "url": "https://api.github.com/repos/rust-lang/rust/commits/733f104f138477ef20f59eadcbcf8800b21a7732", "html_url": "https://github.com/rust-lang/rust/commit/733f104f138477ef20f59eadcbcf8800b21a7732"}, {"sha": "e92bde373a2f4e3cc5d80233d327de15596c3000", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92bde373a2f4e3cc5d80233d327de15596c3000", "html_url": "https://github.com/rust-lang/rust/commit/e92bde373a2f4e3cc5d80233d327de15596c3000"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "72d20644fe8b20303240fa1391431f99e1b0a305", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n     self, fold::BottomUpFolder, query::TyCtxtAt, subst::SubstsRef, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::{source_map::DUMMY_SP, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n@@ -256,7 +256,7 @@ pub(super) fn mir_assign_valid_types<'tcx>(\n /// or compute the layout.\n #[cfg_attr(not(debug_assertions), inline(always))]\n pub(super) fn from_known_layout<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     known_layout: Option<TyAndLayout<'tcx>>,\n     compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n ) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n@@ -265,12 +265,14 @@ pub(super) fn from_known_layout<'tcx>(\n         Some(known_layout) => {\n             if cfg!(debug_assertions) {\n                 let check_layout = compute()?;\n-                assert!(\n-                    mir_assign_valid_types(tcx, check_layout, known_layout),\n-                    \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n-                    known_layout.ty,\n-                    check_layout.ty,\n-                );\n+                if !mir_assign_valid_types(tcx.tcx, check_layout, known_layout) {\n+                    span_bug!(\n+                        tcx.span,\n+                        \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n+                        known_layout.ty,\n+                        check_layout.ty,\n+                    );\n+                }\n             }\n             Ok(known_layout)\n         }\n@@ -294,6 +296,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn set_span(&mut self, span: Span) {\n+        self.tcx.span = span;\n+        self.memory.tcx.span = span;\n+    }\n+\n     #[inline(always)]\n     pub fn force_ptr(\n         &self,\n@@ -444,7 +452,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // have to support that case (mostly by skipping all caching).\n         match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n-                let layout = from_known_layout(self.tcx.tcx, layout, || {\n+                let layout = from_known_layout(self.tcx, layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n                         self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);"}, {"sha": "3741f31927e9428a25f593a4de2e804375bb6179", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -529,7 +529,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Value(val_val) => val_val,\n         };\n         // Other cases need layout.\n-        let layout = from_known_layout(self.tcx.tcx, layout, || self.layout_of(val.ty))?;\n+        let layout = from_known_layout(self.tcx, layout, || self.layout_of(val.ty))?;\n         let op = match val_val {\n             ConstValue::ByRef { alloc, offset } => {\n                 let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);"}, {"sha": "828df9a0930f533531f78b10ac5fff246894e2c9", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -867,12 +867,14 @@ where\n     ) -> InterpResult<'tcx> {\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n-        assert!(\n-            mir_assign_valid_types(self.tcx.tcx, src.layout, dest.layout),\n-            \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n-            src.layout.ty,\n-            dest.layout.ty,\n-        );\n+        if !mir_assign_valid_types(self.tcx.tcx, src.layout, dest.layout) {\n+            span_bug!(\n+                self.tcx.span,\n+                \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n+                src.layout.ty,\n+                dest.layout.ty,\n+            );\n+        }\n \n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n         let src = match self.try_read_immediate(src)? {"}, {"sha": "37740878f7043365fb3270c4bed2cc55ccd137e2", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -78,14 +78,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n+        self.set_span(stmt.source_info.span);\n \n         use rustc_middle::mir::StatementKind::*;\n \n         // Some statements (e.g., box) push new stack frames.\n         // We have to record the stack frame number *before* executing the statement.\n         let frame_idx = self.cur_frame();\n-        self.tcx.span = stmt.source_info.span;\n-        self.memory.tcx.span = stmt.source_info.span;\n \n         match &stmt.kind {\n             Assign(box (place, rvalue)) => self.eval_rvalue_into_place(rvalue, *place)?,\n@@ -276,16 +275,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", terminator.kind);\n-        self.tcx.span = terminator.source_info.span;\n-        self.memory.tcx.span = terminator.source_info.span;\n-\n-        let old_stack = self.cur_frame();\n-        let old_bb = self.frame().block;\n+        self.set_span(terminator.source_info.span);\n \n         self.eval_terminator(terminator)?;\n         if !self.stack.is_empty() {\n-            // This should change *something*\n-            assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n             if let Some(block) = self.frame().block {\n                 info!(\"// executing {:?}\", block);\n             }"}, {"sha": "2d8551b2bbf1e3a911508f92d2bd23ac3a01911a", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -52,6 +52,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Call { ref func, ref args, destination, ref cleanup, .. } => {\n+                let old_stack = self.cur_frame();\n+                let old_bb = self.frame().block;\n                 let func = self.eval_operand(func, None)?;\n                 let (fn_val, abi) = match func.layout.ty.kind {\n                     ty::FnPtr(sig) => {\n@@ -64,14 +66,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let sig = func.layout.ty.fn_sig(*self.tcx);\n                         (FnVal::Instance(self.resolve(def_id, substs)?), sig.abi())\n                     }\n-                    _ => bug!(\"invalid callee of type {:?}\", func.layout.ty),\n+                    _ => span_bug!(\n+                        terminator.source_info.span,\n+                        \"invalid callee of type {:?}\",\n+                        func.layout.ty\n+                    ),\n                 };\n                 let args = self.eval_operands(args)?;\n                 let ret = match destination {\n                     Some((dest, ret)) => Some((self.eval_place(dest)?, ret)),\n                     None => None,\n                 };\n                 self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;\n+                // Sanity-check that `eval_fn_call` either pushed a new frame or\n+                // did a jump to another block.\n+                if self.cur_frame() == old_stack && self.frame().block == old_bb {\n+                    span_bug!(terminator.source_info.span, \"evaluating this call made no progress\");\n+                }\n             }\n \n             Drop { location, target, unwind } => {\n@@ -116,9 +127,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | FalseEdges { .. }\n             | FalseUnwind { .. }\n             | Yield { .. }\n-            | GeneratorDrop => {\n-                bug!(\"{:#?} should have been eliminated by MIR pass\", terminator.kind)\n-            }\n+            | GeneratorDrop => span_bug!(\n+                terminator.source_info.span,\n+                \"{:#?} should have been eliminated by MIR pass\",\n+                terminator.kind\n+            ),\n         }\n \n         Ok(())"}, {"sha": "25719d037f9fc80cea7a7bbb0124329c86878a5d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -425,8 +425,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n-        self.ecx.tcx.span = c.span;\n-\n         // FIXME we need to revisit this for #67176\n         if c.needs_subst() {\n             return None;\n@@ -435,6 +433,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         match self.ecx.eval_const_to_op(c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n+                // Make sure errors point at the constant.\n+                self.ecx.set_span(c.span);\n                 let err = error_to_const_error(&self.ecx, error);\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal.val {\n@@ -820,6 +820,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: {:?}\", statement);\n         let source_info = statement.source_info;\n+        self.ecx.set_span(source_info.span);\n         self.source_info = Some(source_info);\n         if let StatementKind::Assign(box (place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place.ty(&self.local_decls, self.tcx).ty;\n@@ -870,6 +871,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n     fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n         let source_info = terminator.source_info;\n+        self.ecx.set_span(source_info.span);\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n         match &mut terminator.kind {"}, {"sha": "8b79d5d53c5c2740a30d8568f7a12aff2daf978b", "filename": "src/test/ui/consts/const-eval/issue-70723.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -0,0 +1,5 @@\n+#![feature(const_loop)]\n+\n+static _X: () = loop {}; //~ ERROR could not evaluate static initializer\n+\n+fn main() {}"}, {"sha": "687d6565a7163d7c8b3a16b1fef1a5b30ad5270b", "filename": "src/test/ui/consts/const-eval/issue-70723.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd18bc9a4c142100a7230e1fd1cfe6be08214693/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr?ref=bd18bc9a4c142100a7230e1fd1cfe6be08214693", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/issue-70723.rs:3:17\n+   |\n+LL | static _X: () = loop {};\n+   |                 ^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}