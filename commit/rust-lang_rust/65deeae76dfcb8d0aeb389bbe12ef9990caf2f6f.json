{"sha": "65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZGVlYWU3NmRmY2I4ZDBhZWIzODliYmUxMmVmOTk5MGNhZjJmNmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T11:47:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:56:56Z"}, "message": "typeck/pat.rs: `check_pat_top` is the entry point.\n\nThis clarifies the fact that type checking patterns unconditionally\nstarts with `BindByValue` as the default binding mode making the\nnotion of a default binding mode internal to type checking patterns.", "tree": {"sha": "ad70ac00d70716a9b2c8a8f48548adc800c919ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad70ac00d70716a9b2c8a8f48548adc800c919ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "html_url": "https://github.com/rust-lang/rust/commit/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d69783a46a9f6096b8c2f284876d6a68e2b6455", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d69783a46a9f6096b8c2f284876d6a68e2b6455", "html_url": "https://github.com/rust-lang/rust/commit/9d69783a46a9f6096b8c2f284876d6a68e2b6455"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "efc37cc04b212b1dd24f32f9418b206b901a04a5", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "patch": "@@ -3,7 +3,7 @@ use crate::check::coercion::CoerceMany;\n use rustc::hir::{self, ExprKind};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n-use rustc::ty::{self, Ty};\n+use rustc::ty::Ty;\n use syntax_pos::Span;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -59,8 +59,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut all_pats_diverge = Diverges::WarnedAlways;\n             for p in &arm.pats {\n                 self.diverges.set(Diverges::Maybe);\n-                let binding_mode = ty::BindingMode::BindByValue(hir::Mutability::MutImmutable);\n-                self.check_pat_walk(&p, discrim_ty, binding_mode, Some(discrim.span));\n+                self.check_pat_top(&p, discrim_ty, Some(discrim.span));\n                 all_pats_diverge &= self.diverges.get();\n             }\n "}, {"sha": "ee505b2487532929e54c8457aca48e9bb76f9f34", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "patch": "@@ -1104,8 +1104,7 @@ fn check_fn<'a, 'tcx>(\n     // Add formal parameters.\n     for (arg_ty, arg) in fn_sig.inputs().iter().zip(&body.arguments) {\n         // Check the pattern.\n-        let binding_mode = ty::BindingMode::BindByValue(hir::Mutability::MutImmutable);\n-        fcx.check_pat_walk(&arg.pat, arg_ty, binding_mode, None);\n+        fcx.check_pat_top(&arg.pat, arg_ty, None);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n@@ -3631,12 +3630,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.check_pat_walk(\n-            &local.pat,\n-            t,\n-            ty::BindingMode::BindByValue(hir::Mutability::MutImmutable),\n-            None,\n-        );\n+        self.check_pat_top(&local.pat, t, None);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n         if pat_ty.references_error() {\n             self.write_ty(local.hir_id, pat_ty);"}, {"sha": "fc52684b5a24c34e79233f20a2e0757bf9b81a92", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=65deeae76dfcb8d0aeb389bbe12ef9990caf2f6f", "patch": "@@ -29,6 +29,16 @@ You can read more about trait objects in the Trait Objects section of the Refere\n https://doc.rust-lang.org/reference/types.html#trait-objects\";\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    pub fn check_pat_top(\n+        &self,\n+        pat: &'tcx hir::Pat,\n+        expected: Ty<'tcx>,\n+        discrim_span: Option<Span>,\n+    ) {\n+        let def_bm = ty::BindingMode::BindByValue(hir::Mutability::MutImmutable);\n+        self.check_pat_walk(pat, expected, def_bm, discrim_span);\n+    }\n+\n     /// `discrim_span` argument having a `Span` indicates that this pattern is part of a match\n     /// expression arm guard, and it points to the match discriminant to add context in type errors.\n     /// In the following example, `discrim_span` corresponds to the `a + b` expression:\n@@ -45,7 +55,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///   = note: expected type `usize`\n     ///              found type `std::result::Result<_, _>`\n     /// ```\n-    pub fn check_pat_walk(\n+    fn check_pat_walk(\n         &self,\n         pat: &'tcx hir::Pat,\n         expected: Ty<'tcx>,"}]}