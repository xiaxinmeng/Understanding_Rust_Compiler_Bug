{"sha": "4462bb54e3bbff7eecae1816836f306fcc309e05", "node_id": "C_kwDOAAsO6NoAKDQ0NjJiYjU0ZTNiYmZmN2VlY2FlMTgxNjgzNmYzMDZmY2MzMDllMDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-06T16:41:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-09T17:45:13Z"}, "message": "Introduce a no-op PlaceMention statement for `let _ =`.", "tree": {"sha": "aac24138a84068a1ca3a60247704bbcddc241bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac24138a84068a1ca3a60247704bbcddc241bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4462bb54e3bbff7eecae1816836f306fcc309e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4462bb54e3bbff7eecae1816836f306fcc309e05", "html_url": "https://github.com/rust-lang/rust/commit/4462bb54e3bbff7eecae1816836f306fcc309e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4462bb54e3bbff7eecae1816836f306fcc309e05/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be758ef5ab570b7685c9a5eecacab65911da9e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be758ef5ab570b7685c9a5eecacab65911da9e6f", "html_url": "https://github.com/rust-lang/rust/commit/be758ef5ab570b7685c9a5eecacab65911da9e6f"}], "stats": {"total": 159, "additions": 139, "deletions": 20}, "files": [{"sha": "0762987e22961fe15448c2c005fe6ba4dfd56ef8", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -390,6 +390,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Deinit(..)\n             | mir::StatementKind::StorageLive(..)\n             | mir::StatementKind::Retag { .. }\n+            | mir::StatementKind::PlaceMention(..)\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n             | mir::StatementKind::Intrinsic(..)"}, {"sha": "c67411c47843d497d9c8d9df868270c0e7830a14", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -73,7 +73,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n             Some(DefUse::Drop),\n \n         // Debug info is neither def nor use.\n-        PlaceContext::NonUse(NonUseContext::VarDebugInfo) => None,\n+        PlaceContext::NonUse(NonUseContext::PlaceMention | NonUseContext::VarDebugInfo) => None,\n \n         PlaceContext::MutatingUse(MutatingUseContext::Deinit | MutatingUseContext::SetDiscriminant) => {\n             bug!(\"These statements are not allowed in this MIR phase\")"}, {"sha": "a71c416328611be7def787a2ea980adabde31e3b", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -79,6 +79,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n+            // Only relevant for unsafeck\n+            | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n             // Does not actually affect borrowck"}, {"sha": "f84a4691d32abec4f146aeb305c8cfc894e9dc11", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -690,6 +690,8 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n+            // Only relevant for unsafeck\n+            | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n             // These do not actually affect borrowck"}, {"sha": "3919c4793a06f35a48793494624b3014861e5df4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -772,7 +772,9 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         match context {\n             PlaceContext::MutatingUse(_) => ty::Invariant,\n-            PlaceContext::NonUse(StorageDead | StorageLive | VarDebugInfo) => ty::Invariant,\n+            PlaceContext::NonUse(StorageDead | StorageLive | PlaceMention | VarDebugInfo) => {\n+                ty::Invariant\n+            }\n             PlaceContext::NonMutatingUse(\n                 Inspect | Copy | Move | SharedBorrow | ShallowBorrow | UniqueBorrow | AddressOf\n                 | Projection,\n@@ -1282,6 +1284,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n             | StatementKind::ConstEvalCounter\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Nop => {}\n             StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")"}, {"sha": "230256ba5aa845f3eda5b5201b4ba7771bc17906", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -819,6 +819,7 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }\n+        | StatementKind::PlaceMention(..)\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),"}, {"sha": "efdf9f6d5bc02e2b78585202f9e0ebc126457b49", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -529,6 +529,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         | StatementKind::StorageDead(_)\n                         | StatementKind::Retag(_, _)\n                         | StatementKind::AscribeUserType(_, _)\n+                        | StatementKind::PlaceMention(..)\n                         | StatementKind::Coverage(_)\n                         | StatementKind::ConstEvalCounter\n                         | StatementKind::Nop => {}"}, {"sha": "41f585f7fccc1613db7492bda5c93108752f463f", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -92,6 +92,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::ConstEvalCounter\n+            | mir::StatementKind::PlaceMention(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "9a366364e769eb6639f599897cc7dbcd443b337f", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -114,7 +114,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Intrinsic(box intrinsic) => self.emulate_nondiverging_intrinsic(intrinsic)?,\n \n             // Statements we do not track.\n-            AscribeUserType(..) => {}\n+            PlaceMention(..) | AscribeUserType(..) => {}\n \n             // Currently, Miri discards Coverage statements. Coverage statements are only injected\n             // via an optional compile time MIR pass and have no side effects. Since Coverage"}, {"sha": "081d9dc8700a4174e403324a29dcb818979545fc", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -690,6 +690,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag { .. }\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)"}, {"sha": "49b1e6d967c700840e6986322ec6b1cb0bc956b5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -679,6 +679,14 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n+            StatementKind::PlaceMention(..) => {\n+                if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n+                    self.fail(\n+                        location,\n+                        \"`PlaceMention` should have been removed after drop lowering phase\",\n+                    );\n+                }\n+            }\n             StatementKind::AscribeUserType(..) => {\n                 if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n                     self.fail("}, {"sha": "5215e3db798a228bd71d8ae5e1ca1d0b8f36b93d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -1453,6 +1453,9 @@ impl Debug for Statement<'_> {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n             Deinit(ref place) => write!(fmt, \"Deinit({:?})\", place),\n+            PlaceMention(ref place) => {\n+                write!(fmt, \"PlaceMention({:?})\", place)\n+            }\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }"}, {"sha": "1a23f9dadd4f4922bd70df0a3e93a497229af96c", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -247,6 +247,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         StorageLive(..) => \"StorageLive\",\n         StorageDead(..) => \"StorageDead\",\n         Retag(..) => \"Retag\",\n+        PlaceMention(..) => \"PlaceMention\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n         Intrinsic(..) => \"Intrinsic\","}, {"sha": "22046f288c186d8518db2a546a2b99774b116e1e", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -325,6 +325,15 @@ pub enum StatementKind<'tcx> {\n     /// Only `RetagKind::Default` and `RetagKind::FnEntry` are permitted.\n     Retag(RetagKind, Box<Place<'tcx>>),\n \n+    /// This statement exists to preserve a trace of a scrutinee matched against a wildcard\n+    /// binding.  This is especially useful for `let _ = PLACE;` bindings that desugar to a single\n+    /// `PlaceMention(PLACE)`.\n+    ///\n+    /// When executed at runtime this is a nop.\n+    ///\n+    /// Disallowed after drop elaboration.\n+    PlaceMention(Box<Place<'tcx>>),\n+\n     /// Encodes a user's type ascription. These need to be preserved\n     /// intact so that NLL can respect them. For example:\n     /// ```ignore (illustrative)"}, {"sha": "cbeacf21c19f0c12a055578cada6ba94d6947c90", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -405,6 +405,13 @@ macro_rules! make_mir_visitor {\n                     StatementKind::Retag(kind, place) => {\n                         self.visit_retag($(& $mutability)? *kind, place, location);\n                     }\n+                    StatementKind::PlaceMention(place) => {\n+                        self.visit_place(\n+                            place,\n+                            PlaceContext::NonUse(NonUseContext::PlaceMention),\n+                            location\n+                        );\n+                    }\n                     StatementKind::AscribeUserType(\n                         box (place, user_ty),\n                         variance\n@@ -1288,6 +1295,8 @@ pub enum NonUseContext {\n     AscribeUserTy,\n     /// The data of a user variable, for debug info.\n     VarDebugInfo,\n+    /// PlaceMention statement.\n+    PlaceMention,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "4f1623b4c6a7c543f0004317316b5e265ee08733", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -90,6 +90,17 @@ impl<'tcx> CFG<'tcx> {\n         self.push(block, stmt);\n     }\n \n+    pub(crate) fn push_place_mention(\n+        &mut self,\n+        block: BasicBlock,\n+        source_info: SourceInfo,\n+        place: Place<'tcx>,\n+    ) {\n+        let kind = StatementKind::PlaceMention(Box::new(place));\n+        let stmt = Statement { source_info, kind };\n+        self.push(block, stmt);\n+    }\n+\n     pub(crate) fn terminate(\n         &mut self,\n         block: BasicBlock,"}, {"sha": "32892e0ae119cb8ec29a842bb888e54f4643b806", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -556,6 +556,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             _ => {\n                 let place_builder = unpack!(block = self.as_place_builder(block, initializer));\n+\n+                if let Some(place) = place_builder.try_to_place(self) {\n+                    let source_info = self.source_info(initializer.span);\n+                    self.cfg.push_place_mention(block, source_info, place);\n+                }\n+\n                 self.place_into_pattern(block, &irrefutable_pat, place_builder, true)\n             }\n         }\n@@ -576,6 +582,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             false,\n             &mut [&mut candidate],\n         );\n+\n         // For matches and function arguments, the place that is being matched\n         // can be set when creating the variables. But the place for\n         // let PATTERN = ... might not even exist until we do the assignment."}, {"sha": "bc67aa476f1af3459a8e396e76425bb2435413f7", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -263,6 +263,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n             | StatementKind::ConstEvalCounter"}, {"sha": "99988b29e8a576b5a6fc46fbdaa3c437c67306ca", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -139,6 +139,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n             StatementKind::AscribeUserType(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)\n             | StatementKind::ConstEvalCounter"}, {"sha": "d9ceac1154f4a4e0ab5dbd12e6b8579d1e3d552c", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -329,6 +329,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             }\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n             | StatementKind::ConstEvalCounter"}, {"sha": "7f560d6119428dad7a1be4467d45dd2663387133", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -86,6 +86,7 @@ pub trait ValueAnalysis<'tcx> {\n             StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::FakeRead(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..) => (),\n         }"}, {"sha": "2d7771ce61c564f0107c4accc56f6a772e207de0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -101,6 +101,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n             | StatementKind::ConstEvalCounter"}, {"sha": "0923824db4888a0aebb7126e3c8f2e7fda53cde5", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -24,6 +24,7 @@ impl<'tcx> MirPass<'tcx> for CleanupPostBorrowck {\n             for statement in basic_block.statements.iter_mut() {\n                 match statement.kind {\n                     StatementKind::AscribeUserType(..)\n+                    | StatementKind::PlaceMention(..)\n                     | StatementKind::Assign(box (_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n                     | StatementKind::FakeRead(..) => statement.make_nop(),\n                     _ => (),"}, {"sha": "2f1202586594a4b8af259c9f9acf2dda2effb7ba", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -832,6 +832,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::Deinit(..)\n         | StatementKind::Retag(_, _)\n+        | StatementKind::PlaceMention(..)\n         | StatementKind::AscribeUserType(_, _) => {\n             Some(statement.source_info.span)\n         }"}, {"sha": "18c407b42d373f1079a49b8b3ca3b0af25a484e3", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -56,7 +56,9 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::ConstEvalCounter\n                 | StatementKind::Nop => (),\n \n-                StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n+                StatementKind::FakeRead(_)\n+                | StatementKind::PlaceMention(_)\n+                | StatementKind::AscribeUserType(_, _) => {\n                     bug!(\"{:?} not found in this MIR phase!\", &statement.kind)\n                 }\n             }"}, {"sha": "b56cf3a73be04513cc2e597f0a3dec6187564d95", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -581,6 +581,7 @@ impl WriteInfo {\n             | StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::Coverage(_)\n+            | StatementKind::PlaceMention(_)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_) => (),\n             StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "b7f1cdfc7f2197df0a10a7d228113b4cfb141579", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -1647,6 +1647,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n             | StatementKind::ConstEvalCounter"}, {"sha": "e962819b6917711344f4aef10dbcaef58be31b91", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -33,6 +33,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::FakeRead(..)\n                 | StatementKind::StorageLive(_)\n                 | StatementKind::StorageDead(_)\n+                | StatementKind::PlaceMention(..)\n                 | StatementKind::AscribeUserType(..)\n                 | StatementKind::Coverage(..)\n                 | StatementKind::ConstEvalCounter"}, {"sha": "d76ab95faba96ebde0274b29a492c6e1f81fdaf9", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -245,6 +245,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::StorageLive(_)\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Intrinsic(_)\n@@ -315,6 +316,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::StorageDead(_)\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Coverage(_)\n             | StatementKind::Intrinsic(_)\n             | StatementKind::ConstEvalCounter"}, {"sha": "929d229dcdf8d7625374dead75343e9eaa23febe", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -525,6 +525,7 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::AscribeUserType(..) => {\n                 self.super_statement(statement, location);\n             }"}, {"sha": "24403e8b6f347059370529bf482e00283ef46b34", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -241,6 +241,7 @@ fn check_statement<'tcx>(\n         | StatementKind::StorageDead(_)\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..)\n+        | StatementKind::PlaceMention(..)\n         | StatementKind::Coverage(..)\n         | StatementKind::ConstEvalCounter\n         | StatementKind::Nop => Ok(()),"}, {"sha": "0e6de839df3b291d9b7c9fe3fb3424635bea997d", "filename": "tests/mir-opt/building/match_false_edges.full_tested_match.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -100,6 +100,7 @@ fn full_tested_match() -> () {\n     }\n \n     bb11: {\n+        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:28: +6:2"}, {"sha": "37e6b1cd4b446e5345d092e5431a76ea87bb60bf", "filename": "tests/mir-opt/building/match_false_edges.full_tested_match2.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -100,6 +100,7 @@ fn full_tested_match2() -> () {\n     }\n \n     bb11: {\n+        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:29: +6:2"}, {"sha": "7b8983138d2eba1eacd64e48cd5a4613d896c043", "filename": "tests/mir-opt/building/match_false_edges.main.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -162,6 +162,7 @@ fn main() -> () {\n     }\n \n     bb19: {\n+        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +6:6\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:11: +7:2"}, {"sha": "d80a77fefe5087205c04cc9cc3641bec4f44e8fa", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -77,6 +77,7 @@ fn move_out_by_subslice() -> () {\n     bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n+        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:21: +2:22\n         StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n         _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +3:2"}, {"sha": "5f5c18c9f0c3818b8abc04a7ca40459c144f9968", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -77,6 +77,7 @@ fn move_out_from_end() -> () {\n     bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n+        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:20: +2:21\n         StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n         _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +3:2"}, {"sha": "724e55e17fb3efa650975ea0fd37760697413ec0", "filename": "tests/mir-opt/issue_72181.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_72181.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_72181.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_72181.main.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -29,6 +29,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n+        PlaceMention(_1);                // scope 0 at $DIR/issue_72181.rs:+1:13: +1:34\n         StorageDead(_1);                 // scope 0 at $DIR/issue_72181.rs:+1:34: +1:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue_72181.rs:+3:9: +3:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue_72181.rs:+3:14: +3:27\n@@ -49,6 +50,7 @@ fn main() -> () {\n \n     bb2: {\n         _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue_72181.rs:+4:22: +4:28\n+        PlaceMention(_5);                // scope 2 at $DIR/issue_72181.rs:+4:13: +4:30\n         StorageDead(_6);                 // scope 2 at $DIR/issue_72181.rs:+4:30: +4:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue_72181.rs:+4:30: +4:31\n         _0 = const ();                   // scope 0 at $DIR/issue_72181.rs:+0:11: +5:2"}, {"sha": "760e5a8f90a8f79eab4d3d2698a6c3e7656869ca", "filename": "tests/mir-opt/issue_91633.bar.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -20,6 +20,7 @@ fn bar(_1: Box<[T]>) -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+4:18: +4:19\n+        PlaceMention((*_2));             // scope 0 at $DIR/issue_91633.rs:+4:14: +4:19\n         StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:19: +4:20\n         _0 = const ();                   // scope 0 at $DIR/issue_91633.rs:+3:2: +5:3\n         drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3"}, {"sha": "19f0c133e2e53c650ade74b852cd693d8a6c463a", "filename": "tests/mir-opt/issue_91633.hey.built.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.hey.built.after.mir?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -23,6 +23,7 @@ fn hey(_1: &[T]) -> () {\n     bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue_91633.rs:+4:19: +4:20\n         _2 = &(*_3);                     // scope 0 at $DIR/issue_91633.rs:+4:14: +4:20\n+        PlaceMention(_2);                // scope 0 at $DIR/issue_91633.rs:+4:14: +4:20\n         StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:20: +4:21\n         _0 = const ();                   // scope 0 at $DIR/issue_91633.rs:+3:2: +5:3\n         StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3"}, {"sha": "0bffab327821a333c942ff7a7f8910b521887540", "filename": "tests/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -21,7 +21,7 @@ fn let_wild_gets_unsafe_field() {\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n     let _ = &p.b;  //~ ERROR    reference to packed field\n-    let _ = u1.a;  // #53114: should eventually signal error as well\n+    let _ = u1.a;  //~ ERROR  [E0133]\n     let _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure\n@@ -36,6 +36,7 @@ fn let_ascribe_gets_unsafe_field() {\n     let p = P { a: &2, b: &3 };\n     let _: _ = &p.b;  //~ ERROR    reference to packed field\n     let _: _ = u1.a;  //~ ERROR  [E0133]\n+                      //~^ ERROR  [E0133]\n     let _: _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure"}, {"sha": "67902ac7b541e63275276af70d1ee1b92696188a", "filename": "tests/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -26,7 +26,7 @@ LL |     let _: _ = &p.b;\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:42:20\n+  --> $DIR/issue-53114-safety-checks.rs:43:20\n    |\n LL |     let (_,): _ = (&p.b,);\n    |                    ^^^^\n@@ -35,7 +35,7 @@ LL |     let (_,): _ = (&p.b,);\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:51:11\n+  --> $DIR/issue-53114-safety-checks.rs:52:11\n    |\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n@@ -44,14 +44,22 @@ LL |     match &p.b  { _ => { } }\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0793]: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:56:12\n+  --> $DIR/issue-53114-safety-checks.rs:57:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:24:13\n+   |\n+LL |     let _ = u1.a;\n+   |             ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/issue-53114-safety-checks.rs:25:13\n    |\n@@ -76,6 +84,14 @@ LL |     let (_,) = (&u2.a,);\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-53114-safety-checks.rs:38:16\n+   |\n+LL |     let _: _ = u1.a;\n+   |                ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/issue-53114-safety-checks.rs:38:12\n    |\n@@ -85,62 +101,62 @@ LL |     let _: _ = u1.a;\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:39:16\n+  --> $DIR/issue-53114-safety-checks.rs:40:16\n    |\n LL |     let _: _ = &u2.a;\n    |                ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:43:20\n+  --> $DIR/issue-53114-safety-checks.rs:44:20\n    |\n LL |     let (_,): _ = (u1.a,);\n    |                    ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:44:20\n+  --> $DIR/issue-53114-safety-checks.rs:45:20\n    |\n LL |     let (_,): _ = (&u2.a,);\n    |                    ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:52:11\n+  --> $DIR/issue-53114-safety-checks.rs:53:11\n    |\n LL |     match u1.a  { _ => { } }\n    |           ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:53:11\n+  --> $DIR/issue-53114-safety-checks.rs:54:11\n    |\n LL |     match &u2.a { _ => { } }\n    |           ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:57:12\n+  --> $DIR/issue-53114-safety-checks.rs:58:12\n    |\n LL |     match (u1.a,)  { (_,) => { } }\n    |            ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:58:12\n+  --> $DIR/issue-53114-safety-checks.rs:59:12\n    |\n LL |     match (&u2.a,) { (_,) => { } }\n    |            ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0133, E0793.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "ba89ad97275d76adabdd414e18c058cf4d0672dd", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.mir.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -1,3 +1,19 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:5:13\n+   |\n+LL |     let _ = *p;\n+   |             ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:6:17\n+   |\n+LL |     let _: u8 = *p;\n+   |                 ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-deref-ptr.rs:6:12\n    |\n@@ -7,13 +23,13 @@ LL |     let _: u8 = *p;\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:8:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "e5c16f044b0b2641946c91eb2055801a01f96223", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -2,8 +2,9 @@\n // [thir]compile-flags: -Z thir-unsafeck\n \n fn f(p: *const u8) -> u8 {\n-    let _ = *p; //[thir]~ ERROR dereference of raw pointer is unsafe\n+    let _ = *p; //~ ERROR dereference of raw pointer is unsafe\n     let _: u8 = *p; //~ ERROR dereference of raw pointer is unsafe\n+                    //[mir]~^ ERROR dereference of raw pointer is unsafe\n     return *p; //~ ERROR dereference of raw pointer is unsafe\n }\n "}, {"sha": "f42a3f0603718c238a90a2a22a6f0e48ab34d970", "filename": "tests/ui/unsafe/unsafe-fn-deref-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4462bb54e3bbff7eecae1816836f306fcc309e05/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr?ref=4462bb54e3bbff7eecae1816836f306fcc309e05", "patch": "@@ -15,7 +15,7 @@ LL |     let _: u8 = *p;\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:7:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:8:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer"}]}