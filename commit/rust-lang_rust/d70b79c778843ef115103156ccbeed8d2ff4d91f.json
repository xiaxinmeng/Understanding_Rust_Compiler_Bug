{"sha": "d70b79c778843ef115103156ccbeed8d2ff4d91f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MGI3OWM3Nzg4NDNlZjExNTEwMzE1NmNjYmVlZDhkMmZmNGQ5MWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T12:36:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T12:36:13Z"}, "message": "Refactor function calls", "tree": {"sha": "7fdf73e4807763457d54cc071dda1fc71322c9d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fdf73e4807763457d54cc071dda1fc71322c9d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d70b79c778843ef115103156ccbeed8d2ff4d91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d70b79c778843ef115103156ccbeed8d2ff4d91f", "html_url": "https://github.com/rust-lang/rust/commit/d70b79c778843ef115103156ccbeed8d2ff4d91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d70b79c778843ef115103156ccbeed8d2ff4d91f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ea218d2be5024f9ff2978facb20f9ba9aad6c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ea218d2be5024f9ff2978facb20f9ba9aad6c9", "html_url": "https://github.com/rust-lang/rust/commit/70ea218d2be5024f9ff2978facb20f9ba9aad6c9"}], "stats": {"total": 147, "additions": 88, "deletions": 59}, "files": [{"sha": "84c76dd1204f8918184f05f4945a1c56016f741b", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 88, "deletions": 59, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/d70b79c778843ef115103156ccbeed8d2ff4d91f/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70b79c778843ef115103156ccbeed8d2ff4d91f/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=d70b79c778843ef115103156ccbeed8d2ff4d91f", "patch": "@@ -12,6 +12,7 @@ use lvalue::Lvalue;\n use memory::Pointer;\n use value::PrimVal;\n use value::Value;\n+use rustc_data_structures::indexed_vec::Idx;\n \n mod drop;\n mod intrinsic;\n@@ -148,21 +149,38 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n-                assert_eq!(sig.abi, Abi::RustCall);\n                 self.eval_fn_call_inner(\n                     instance,\n                     destination,\n-                    args,\n                     span,\n-                )\n+                )?;\n+                let mut arg_locals = self.frame().mir.args_iter();\n+                match sig.abi {\n+                    // closure as closure once\n+                    Abi::RustCall => {\n+                        for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n+                            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                            self.write_value(arg_val, dest, arg_ty)?;\n+                        }\n+                    },\n+                    // non capture closure as fn ptr\n+                    // need to inject zst ptr for closure object (aka do nothing)\n+                    // and need to pack arguments\n+                    Abi::Rust => {\n+                        trace!(\"arg_locals: {:?}\", self.frame().mir.args_iter().collect::<Vec<_>>());\n+                        trace!(\"arg_operands: {:?}\", arg_operands);\n+                        let local = arg_locals.nth(1).unwrap();\n+                        for (i, (arg_val, arg_ty)) in args.into_iter().enumerate() {\n+                            let dest = self.eval_lvalue(&mir::Lvalue::Local(local).field(mir::Field::new(i), arg_ty))?;\n+                            self.write_value(arg_val, dest, arg_ty)?;\n+                        }\n+                        \n+                    },\n+                    _ => bug!(\"bad ABI for ClosureOnceShim: {:?}\", sig.abi),\n+                }\n+                Ok(())\n             }\n             ty::InstanceDef::Item(_) => {\n-                let mut args = Vec::new();\n-                for arg in arg_operands {\n-                    let arg_val = self.eval_operand(arg)?;\n-                    let arg_ty = self.operand_ty(arg);\n-                    args.push((arg_val, arg_ty));\n-                }\n                 match sig.abi {\n                     Abi::C => {\n                         let ty = sig.output();\n@@ -172,16 +190,59 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         self.goto_block(target);\n                         return Ok(());\n                     },\n-                    Abi::Rust => {},\n-                    Abi::RustCall => self.unpack_fn_args(&mut args)?,\n+                    Abi::Rust | Abi::RustCall => {},\n                     _ => unimplemented!(),\n                 }\n+                let mut args = Vec::new();\n+                for arg in arg_operands {\n+                    let arg_val = self.eval_operand(arg)?;\n+                    let arg_ty = self.operand_ty(arg);\n+                    args.push((arg_val, arg_ty));\n+                }\n+\n                 self.eval_fn_call_inner(\n                     instance,\n                     destination,\n-                    args,\n                     span,\n-                )\n+                )?;\n+\n+                let mut arg_locals = self.frame().mir.args_iter();\n+                match sig.abi {\n+                    Abi::Rust => {\n+                        for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n+                            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                            self.write_value(arg_val, dest, arg_ty)?;\n+                        }\n+                    }\n+                    Abi::RustCall => {\n+                        assert_eq!(args.len(), 2);\n+\n+                        {   // write first argument\n+                            let first_local = arg_locals.next().unwrap();\n+                            let dest = self.eval_lvalue(&mir::Lvalue::Local(first_local))?;\n+                            let (arg_val, arg_ty) = args.remove(0);\n+                            self.write_value(arg_val, dest, arg_ty)?;\n+                        }\n+\n+                        // unpack and write all other args\n+                        let (arg_val, arg_ty) = args.remove(0);\n+                        let layout = self.type_layout(arg_ty)?;\n+                        if let (&ty::TyTuple(fields, _), &Layout::Univariant { ref variant, .. }) = (&arg_ty.sty, layout) {\n+                            let offsets = variant.offsets.iter().map(|s| s.bytes());\n+                            if let Value::ByRef(ptr) = arg_val {\n+                                for ((offset, ty), arg_local) in offsets.zip(fields).zip(arg_locals) {\n+                                    let arg = Value::ByRef(ptr.offset(offset));\n+                                    let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                                    self.write_value(arg, dest, ty)?;\n+                                }\n+                            }\n+                        } else {\n+                            bug!(\"rust-call ABI tuple argument was {:?}, {:?}\", arg_ty, layout);\n+                        }\n+                    }\n+                    _ => unimplemented!(),\n+                }\n+                Ok(())\n             },\n             ty::InstanceDef::DropGlue(..) => {\n                 assert_eq!(arg_operands.len(), 1);\n@@ -200,26 +261,31 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.drop(val, instance, pointee_type, span)\n             },\n             ty::InstanceDef::FnPtrShim(..) => {\n+                trace!(\"ABI: {}\", sig.abi);\n                 let mut args = Vec::new();\n                 for arg in arg_operands {\n                     let arg_val = self.eval_operand(arg)?;\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n+                self.eval_fn_call_inner(\n+                    instance,\n+                    destination,\n+                    span,\n+                )?;\n+                let arg_locals = self.frame().mir.args_iter();\n                 match sig.abi {\n                     Abi::Rust => {\n                         args.remove(0);\n                     },\n                     Abi::RustCall => {},\n                     _ => unimplemented!(),\n+                };\n+                for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n+                    let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                    self.write_value(arg_val, dest, arg_ty)?;\n                 }\n-                trace!(\"ABI: {}\", sig.abi);\n-                self.eval_fn_call_inner(\n-                    instance,\n-                    destination,\n-                    args,\n-                    span,\n-                )\n+                Ok(())\n             }\n             _ => Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", sig.abi))),\n         }\n@@ -229,10 +295,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         destination: Option<(Lvalue<'tcx>, mir::BasicBlock)>,\n-        args: Vec<(Value, Ty<'tcx>)>,\n         span: Span,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"eval_fn_call_inner: {:#?}, {:#?}, {:#?}\", instance, args, destination);\n+        trace!(\"eval_fn_call_inner: {:#?}, {:#?}\", instance, destination);\n \n         // Only trait methods can have a Self parameter.\n \n@@ -281,13 +346,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             return_to_block,\n         )?;\n \n-        let arg_locals = self.frame().mir.args_iter();\n-        assert_eq!(self.frame().mir.arg_count, args.len());\n-        for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n-            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-            self.write_value(arg_val, dest, arg_ty)?;\n-        }\n-\n         Ok(())\n     }\n \n@@ -457,34 +515,5 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // as if the call just completed and it's returning to the\n         // current frame.\n         Ok(())\n-    }\n-\n-    pub(crate) fn unpack_fn_args(&self, args: &mut Vec<(Value, Ty<'tcx>)>) -> EvalResult<'tcx> {\n-        if let Some((last, last_ty)) = args.pop() {\n-            let last_layout = self.type_layout(last_ty)?;\n-            match (&last_ty.sty, last_layout) {\n-                (&ty::TyTuple(fields, _),\n-                 &Layout::Univariant { ref variant, .. }) => {\n-                    let offsets = variant.offsets.iter().map(|s| s.bytes());\n-                    match last {\n-                        Value::ByRef(last_ptr) => {\n-                            for (offset, ty) in offsets.zip(fields) {\n-                                let arg = Value::ByRef(last_ptr.offset(offset));\n-                                args.push((arg, ty));\n-                            }\n-                        },\n-                        // propagate undefs\n-                        undef @ Value::ByVal(PrimVal::Undef) => {\n-                            for field_ty in fields {\n-                                args.push((undef, field_ty));\n-                            }\n-                        },\n-                        _ => bug!(\"rust-call ABI tuple argument was {:?}, but {:?} were expected\", last, fields),\n-                    }\n-                }\n-                ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n-            }\n-        }\n-        Ok(())\n-    }\n+    }   \n }"}]}