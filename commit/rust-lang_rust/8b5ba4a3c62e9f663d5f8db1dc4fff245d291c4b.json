{"sha": "8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNWJhNGEzYzYyZTlmNjYzZDVmOGRiMWRjNGZmZjI0NWQyOTFjNGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:28:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:28:44Z"}, "message": "comment nit", "tree": {"sha": "2211fcc30af281b18f9456dc37c0a5cd2af63927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2211fcc30af281b18f9456dc37c0a5cd2af63927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b", "html_url": "https://github.com/rust-lang/rust/commit/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b98552cc0f37e886ac3d9b911e0cf1173313c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b98552cc0f37e886ac3d9b911e0cf1173313c53", "html_url": "https://github.com/rust-lang/rust/commit/7b98552cc0f37e886ac3d9b911e0cf1173313c53"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "0fd695586eb9876e562909e6e16689c5a669a4d1", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=8b5ba4a3c62e9f663d5f8db1dc4fff245d291c4b", "patch": "@@ -189,7 +189,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         cast_ty: Ty<'tcx>,\n     ) -> Scalar<M::PointerTag> {\n         // Let's make sure v is sign-extended *if* it has a signed type.\n-        let signed = src_layout.abi.is_signed(); // also checks that abi is `Scalar`.\n+        let signed = src_layout.abi.is_signed(); // Also asserts that abi is `Scalar`.\n         let v = if signed { self.sign_extend(v, src_layout) } else { v };\n         trace!(\"cast_from_scalar: {}, {} -> {}\", v, src_layout.ty, cast_ty);\n         use rustc_middle::ty::TyKind::*;"}]}