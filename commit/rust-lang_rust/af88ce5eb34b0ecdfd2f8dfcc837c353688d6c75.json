{"sha": "af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODhjZTVlYjM0YjBlY2RmZDJmOGRmY2M4MzdjMzUzNjg4ZDZjNzU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-06-28T17:06:15Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-06-28T17:06:15Z"}, "message": "allow aux builds in rustdoc-ui mode", "tree": {"sha": "8ae28e11ae92c783610f32e942564aef90da3682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ae28e11ae92c783610f32e942564aef90da3682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl74zg4WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdKBeB/0eqH/y2yMRG574fqRdnd3/yKhM\nIG/Bu2eTykvdVwjYfAKFAMvbt+qJxuQdGm6X0g/Kowqdg6/1G7yz/ae0BEHy9zED\nJ+hT5QrbwJpvTHRWHBj28vLBlbf8wNo24/AKuaG5ps8cH8jy/8+j1kruX8El2nUu\nVZ7CPdNi+HSI55GvzShdJQd6g0L8ir11bnFbi1VM8/blo8aJT9tbrMB+2meiih/g\nZiaNusdtyI6Rtgy59ejRZKd+4ioBYjXyEbYLR5ZquSg2jTc94X1Y2Lu1jzoseRes\njg+MdYS0mbuI14bpuP8j/zunnApPfJflHUPddqalEZET9TjC2n+o3C2WF8g8\n=xMIt\n-----END PGP SIGNATURE-----", "payload": "tree 8ae28e11ae92c783610f32e942564aef90da3682\nparent 25687caa2e4e35b31c29e28998710670e9d54ee9\nauthor Andy Russell <arussell123@gmail.com> 1593363975 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1593363975 -0400\n\nallow aux builds in rustdoc-ui mode\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "html_url": "https://github.com/rust-lang/rust/commit/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25687caa2e4e35b31c29e28998710670e9d54ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25687caa2e4e35b31c29e28998710670e9d54ee9", "html_url": "https://github.com/rust-lang/rust/commit/25687caa2e4e35b31c29e28998710670e9d54ee9"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "878e87e406db8c1d2b3a4d38caf1e78d7898ef58", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "patch": "@@ -169,7 +169,7 @@ impl fmt::Display for Debugger {\n }\n \n /// Configuration for compiletest\n-#[derive(Clone)]\n+#[derive(Debug, Clone)]\n pub struct Config {\n     /// `true` to to overwrite stderr/stdout files instead of complaining about changes in output.\n     pub bless: bool,"}, {"sha": "4ecd487a71d52a2276a1f2e38c587eb718d5c64f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=af88ce5eb34b0ecdfd2f8dfcc837c353688d6c75", "patch": "@@ -1877,7 +1877,8 @@ impl<'test> TestCx<'test> {\n         emit_metadata: EmitMetadata,\n         allow_unused: AllowUnused,\n     ) -> Command {\n-        let is_rustdoc = self.is_rustdoc();\n+        let is_aux = input_file.components().map(|c| c.as_os_str()).any(|c| c == \"auxiliary\");\n+        let is_rustdoc = self.is_rustdoc() && !is_aux;\n         let mut rustc = if !is_rustdoc {\n             Command::new(&self.config.rustc_path)\n         } else {\n@@ -3502,6 +3503,7 @@ impl ProcRes {\n     }\n }\n \n+#[derive(Debug)]\n enum TargetLocation {\n     ThisFile(PathBuf),\n     ThisDirectory(PathBuf),"}]}