{"sha": "fbb95689d692ba456309927793a28da85d2bf4d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjk1Njg5ZDY5MmJhNDU2MzA5OTI3NzkzYTI4ZGE4NWQyYmY0ZDE=", "commit": {"author": {"name": "oliver-giersch", "email": "oliver.giersch@googlemail.com", "date": "2018-10-13T12:34:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-13T12:34:31Z"}, "message": "adds unsafe `thread::Builder::spawn_unchecked` function\n\nmoves code for `thread::Builder::spawn` into new public unsafe function `spawn_unchecked` and transforms `spawn` into a safe wrapper.", "tree": {"sha": "15e32a661e8049f3099c9675c5bea1881b09c30f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15e32a661e8049f3099c9675c5bea1881b09c30f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb95689d692ba456309927793a28da85d2bf4d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbweZYCRBK7hj4Ov3rIwAAdHIIABgx8sV1/8kCxwMdHizjVcBs\nSfAMQXJcdrjCODoqJA+k+iFdjPXC+9UkGNxJgobA1eWHt1er/JaKXOK5DUM8eTND\nlPYkfcTVqRxVP0NISDaeDXjM6g5g3ySUjqFKLmCZNNwPUsvnhv7xoE3I155dFBPE\nR3stpnl81ZQVnvKLldGnCfaGpPGKHD6XF+9ix7+R7ZZKkZk+7M8s0izeHM5uK7Js\nyy2oM4lAqUqRMekY/gnp+jM+UznCggrIe7FMcE/GSbSboSwusFCcA9yuXbhb+R+T\ntUt/wcWNWE5nicclBw0gL8RfvGR6nW+tgdu6JBg87YAwi8hohjQ3Z8LFYy/nLsY=\n=U5Dm\n-----END PGP SIGNATURE-----\n", "payload": "tree 15e32a661e8049f3099c9675c5bea1881b09c30f\nparent 2d81989974a134025be733115574bee8084095b4\nauthor oliver-giersch <oliver.giersch@googlemail.com> 1539434071 +0200\ncommitter GitHub <noreply@github.com> 1539434071 +0200\n\nadds unsafe `thread::Builder::spawn_unchecked` function\n\nmoves code for `thread::Builder::spawn` into new public unsafe function `spawn_unchecked` and transforms `spawn` into a safe wrapper."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb95689d692ba456309927793a28da85d2bf4d1", "html_url": "https://github.com/rust-lang/rust/commit/fbb95689d692ba456309927793a28da85d2bf4d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb95689d692ba456309927793a28da85d2bf4d1/comments", "author": {"login": "oliver-giersch", "id": 19815381, "node_id": "MDQ6VXNlcjE5ODE1Mzgx", "avatar_url": "https://avatars.githubusercontent.com/u/19815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliver-giersch", "html_url": "https://github.com/oliver-giersch", "followers_url": "https://api.github.com/users/oliver-giersch/followers", "following_url": "https://api.github.com/users/oliver-giersch/following{/other_user}", "gists_url": "https://api.github.com/users/oliver-giersch/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliver-giersch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliver-giersch/subscriptions", "organizations_url": "https://api.github.com/users/oliver-giersch/orgs", "repos_url": "https://api.github.com/users/oliver-giersch/repos", "events_url": "https://api.github.com/users/oliver-giersch/events{/privacy}", "received_events_url": "https://api.github.com/users/oliver-giersch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d81989974a134025be733115574bee8084095b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d81989974a134025be733115574bee8084095b4", "html_url": "https://github.com/rust-lang/rust/commit/2d81989974a134025be733115574bee8084095b4"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "28e69a1d0659ab60ae2caec0e4cc316e6d40cedd", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fbb95689d692ba456309927793a28da85d2bf4d1/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb95689d692ba456309927793a28da85d2bf4d1/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=fbb95689d692ba456309927793a28da85d2bf4d1", "patch": "@@ -386,6 +386,13 @@ impl Builder {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+    {\n+        unsafe { self.spawn_unchecked(f) }\n+    }\n+    \n+    /// TODO: Doc\n+    pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n+        F: FnOnce() -> T, F: Send + 'a, T: Send + 'a\n     {\n         let Builder { name, stack_size } = self;\n \n@@ -402,16 +409,15 @@ impl Builder {\n             if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n-            unsafe {\n-                thread_info::set(imp::guard::current(), their_thread);\n-                #[cfg(feature = \"backtrace\")]\n-                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-                    ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n-                }));\n-                #[cfg(not(feature = \"backtrace\"))]\n-                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n-                *their_packet.get() = Some(try_result);\n-            }\n+\n+            thread_info::set(imp::guard::current(), their_thread);\n+            #[cfg(feature = \"backtrace\")]\n+            let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+                ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n+            }));\n+            #[cfg(not(feature = \"backtrace\"))]\n+            let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n+            *their_packet.get() = Some(try_result);\n         };\n \n         Ok(JoinHandle(JoinInner {\n@@ -420,7 +426,7 @@ impl Builder {\n             },\n             thread: my_thread,\n             packet: Packet(my_packet),\n-        }))\n+        }))   \n     }\n }\n "}]}