{"sha": "cf3245e7c3ffc48338c5434a1f565182ed549c49", "node_id": "C_kwDOAAsO6NoAKGNmMzI0NWU3YzNmZmM0ODMzOGM1NDM0YTFmNTY1MTgyZWQ1NDljNDk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-19T13:26:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-19T13:26:30Z"}, "message": "Rollup merge of #98219 - eggyal:gatsubstcollector-without-folding, r=jackh726\n\nSkip late bound regions in GATSubstCollector\n\n#93227 liberated late bound regions when collecting GAT substs in wfcheck.  It should simply skip late bound regions instead.\n\nr? ``@compiler-errors``", "tree": {"sha": "604df319d6524c325821ae792223b31933c490f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604df319d6524c325821ae792223b31933c490f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3245e7c3ffc48338c5434a1f565182ed549c49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiryQGCRBK7hj4Ov3rIwAA8HcIADaJkHaL6pspaud7+w9GM0TT\ni/WAlr1nkdnaC7FtWA023FCRrZayhEVGpMDZ2lJ+xpYfBESE33C3YV2KscmCQHno\nyjzcHbnHz8tzH2g7wTHbVUNwzlpTzbUjs0kAaFVESBgCEI8ZWWAuWAt4XOc0RFWd\nOU+T0TbiL5BTxjJwwr/gRhzaAzybig9VmREo0OUNxBGsnmQcqSU1VCGLCnSwXp98\nhMsRebMuMz+F/0jnMZoCj9P2EFxWmRwT0BxX56YClW93D8s9Qlnd/cPCp3PbqW1L\nD6q9blqc1nMPlAB31rRDz+kzM3b/Tk1f/W/46/oEuZh/nkk1wl691Ap343mVhN0=\n=g0Up\n-----END PGP SIGNATURE-----\n", "payload": "tree 604df319d6524c325821ae792223b31933c490f8\nparent 88cb597e7ae3f6b7d8d7e17f3f49cdf30eb726b8\nparent c51f5081f08dacdf498115c30fa7edb19a0bb5a0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655645190 +0200\ncommitter GitHub <noreply@github.com> 1655645190 +0200\n\nRollup merge of #98219 - eggyal:gatsubstcollector-without-folding, r=jackh726\n\nSkip late bound regions in GATSubstCollector\n\n#93227 liberated late bound regions when collecting GAT substs in wfcheck.  It should simply skip late bound regions instead.\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3245e7c3ffc48338c5434a1f565182ed549c49", "html_url": "https://github.com/rust-lang/rust/commit/cf3245e7c3ffc48338c5434a1f565182ed549c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3245e7c3ffc48338c5434a1f565182ed549c49/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88cb597e7ae3f6b7d8d7e17f3f49cdf30eb726b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/88cb597e7ae3f6b7d8d7e17f3f49cdf30eb726b8", "html_url": "https://github.com/rust-lang/rust/commit/88cb597e7ae3f6b7d8d7e17f3f49cdf30eb726b8"}, {"sha": "c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "html_url": "https://github.com/rust-lang/rust/commit/c51f5081f08dacdf498115c30fa7edb19a0bb5a0"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "7931215389575031d212d1070ffabf492208c482", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf3245e7c3ffc48338c5434a1f565182ed549c49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3245e7c3ffc48338c5434a1f565182ed549c49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cf3245e7c3ffc48338c5434a1f565182ed549c49", "patch": "@@ -490,7 +490,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n     // The bounds we that we would require from `to_check`\n     let mut bounds = FxHashSet::default();\n \n-    let (regions, types) = GATSubstCollector::visit(tcx, gat_def_id.to_def_id(), to_check);\n+    let (regions, types) = GATSubstCollector::visit(gat_def_id.to_def_id(), to_check);\n \n     // If both regions and types are empty, then this GAT isn't in the\n     // set of types we are checking, and we shouldn't try to do clause analysis\n@@ -664,7 +664,6 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its substituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -674,16 +673,11 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n-        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor = GATSubstCollector {\n-            tcx,\n-            gat,\n-            regions: FxHashSet::default(),\n-            types: FxHashSet::default(),\n-        };\n+        let mut visitor =\n+            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -692,19 +686,12 @@ impl<'tcx> GATSubstCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &ty::Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.tcx.liberate_late_bound_regions(self.gat, t.clone()).visit_with(self)\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Projection(p) if p.item_def_id == self.gat => {\n                 for (idx, subst) in p.substs.iter().enumerate() {\n                     match subst.unpack() {\n-                        GenericArgKind::Lifetime(lt) => {\n+                        GenericArgKind::Lifetime(lt) if !lt.is_late_bound() => {\n                             self.regions.insert((lt, idx));\n                         }\n                         GenericArgKind::Type(t) => {"}]}