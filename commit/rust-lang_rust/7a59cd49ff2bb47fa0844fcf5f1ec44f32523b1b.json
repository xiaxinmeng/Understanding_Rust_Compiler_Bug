{"sha": "7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNTljZDQ5ZmYyYmI0N2ZhMDg0NGZjZjVmMWVjNDRmMzI1MjNiMWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-18T19:36:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-18T19:36:37Z"}, "message": "Merge #4035\n\n4035: Convert bool to ident instead of literal in mbe r=matklad a=edwin0cheng\n\nFixed #1249\r\n\r\nCurrently we treat boolean literal as `tt::Literal` , which makes parsing $lit:lit matcher easily.\r\nHowever, proc-macro2 treat boolean literal as `ident` :\r\n\r\nhttps://github.com/alexcrichton/proc-macro2/blob/4173a21dc497c67326095e438ff989cc63cd9279/src/lib.rs#L939\r\n\r\nOT: I am quite happy we finally need to fix this bug :)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "2266a12f833d72faa4c4ba12a997999c7013e975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2266a12f833d72faa4c4ba12a997999c7013e975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJem1bFCRBK7hj4Ov3rIwAAdHIIAHN/sr544uuNLntlqWvlHfhM\nif+ioU8dMhpAaSCv/yc5j9lSAIRooU37Z0RnHmZJIFJA/kQXtNnYDV6+5opsK6jE\neTa/RMpAO5KGatCZp6ML3T0iDSI5wHV1d1VnwOOK7hyp6iBhVFMebWhiQTDACL2X\nvwQsvBmgwZAGTGKKHUM0Bhomh8gbNys8HpQBv4/uvB0K3Z8WVABVrm+Bupihv/uX\n+pc2srKme36CYlpen+HAs3UvVfRwXO0iP20wQYTpZlPUrb9uKaDrLFgnJSC+msw3\nJxhDDwTKhfybX25wUAQjqnzjbHXPz9ycKwSAzF4CMn8d/Gh8cvbyG9htFbDRnac=\n=1vis\n-----END PGP SIGNATURE-----\n", "payload": "tree 2266a12f833d72faa4c4ba12a997999c7013e975\nparent b95b77f92f4ce73b3c9cc652ac9ae40580d308ce\nparent a1b5cf81ebcac15299cc612b49023bb418507027\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587238597 +0000\ncommitter GitHub <noreply@github.com> 1587238597 +0000\n\nMerge #4035\n\n4035: Convert bool to ident instead of literal in mbe r=matklad a=edwin0cheng\n\nFixed #1249\r\n\r\nCurrently we treat boolean literal as `tt::Literal` , which makes parsing $lit:lit matcher easily.\r\nHowever, proc-macro2 treat boolean literal as `ident` :\r\n\r\nhttps://github.com/alexcrichton/proc-macro2/blob/4173a21dc497c67326095e438ff989cc63cd9279/src/lib.rs#L939\r\n\r\nOT: I am quite happy we finally need to fix this bug :)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "html_url": "https://github.com/rust-lang/rust/commit/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b95b77f92f4ce73b3c9cc652ac9ae40580d308ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95b77f92f4ce73b3c9cc652ac9ae40580d308ce", "html_url": "https://github.com/rust-lang/rust/commit/b95b77f92f4ce73b3c9cc652ac9ae40580d308ce"}, {"sha": "a1b5cf81ebcac15299cc612b49023bb418507027", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b5cf81ebcac15299cc612b49023bb418507027", "html_url": "https://github.com/rust-lang/rust/commit/a1b5cf81ebcac15299cc612b49023bb418507027"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "78f9efa1b6926eb5d1150b6655704b3a67631637", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "patch": "@@ -187,7 +187,11 @@ impl<'a> TtIter<'a> {\n                 _ => false,\n             },\n             Separator::Literal(lhs) => match fork.expect_literal() {\n-                Ok(rhs) => rhs.text == lhs.text,\n+                Ok(rhs) => match rhs {\n+                    tt::Leaf::Literal(rhs) => rhs.text == lhs.text,\n+                    tt::Leaf::Ident(rhs) => rhs.text == lhs.text,\n+                    tt::Leaf::Punct(_) => false,\n+                },\n                 _ => false,\n             },\n             Separator::Puncts(lhss) => lhss.iter().all(|lhs| match fork.expect_punct() {"}, {"sha": "d7866452dd94e6e7c846fde24c61fcb390464600", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "patch": "@@ -158,20 +158,17 @@ fn convert_literal(l: &tt::Literal) -> TtToken {\n     let kind = lex_single_syntax_kind(&l.text)\n         .map(|(kind, _error)| kind)\n         .filter(|kind| kind.is_literal())\n-        .unwrap_or_else(|| match l.text.as_ref() {\n-            \"true\" => T![true],\n-            \"false\" => T![false],\n-            _ => panic!(\"Fail to convert given literal {:#?}\", &l),\n-        });\n+        .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &l));\n \n     TtToken { kind, is_joint_to_next: false, text: l.text.clone() }\n }\n \n fn convert_ident(ident: &tt::Ident) -> TtToken {\n-    let kind = if ident.text.starts_with('\\'') {\n-        LIFETIME\n-    } else {\n-        SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT)\n+    let kind = match ident.text.as_ref() {\n+        \"true\" => T![true],\n+        \"false\" => T![false],\n+        i if i.starts_with('\\'') => LIFETIME,\n+        _ => SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT),\n     };\n \n     TtToken { kind, is_joint_to_next: false, text: ident.text.clone() }"}, {"sha": "2b4390eb26ed08fdab854e7f53ce2dfcde12a7af", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "patch": "@@ -376,7 +376,7 @@ trait TokenConvertor {\n                 };\n             }\n             let leaf: tt::Leaf = match k {\n-                T![true] | T![false] => make_leaf!(Literal),\n+                T![true] | T![false] => make_leaf!(Ident),\n                 IDENT => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n                 k if k.is_literal() => make_leaf!(Literal),"}, {"sha": "100ed41f234a2bb67d9ce9a5a65750ed89fbe36d", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "patch": "@@ -1015,6 +1015,36 @@ fn test_literal() {\n     .assert_expand_items(r#\"foo!(u8 0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n }\n \n+#[test]\n+fn test_boolean_is_ident() {\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo {\n+              ($lit0:literal, $lit1:literal) => { const VALUE: (bool,bool) = ($lit0,$lit1); };\n+        }\n+\"#,\n+    )\n+    .assert_expand(\n+        r#\"foo!(true,false);\"#,\n+        r#\"\n+SUBTREE $\n+  IDENT   const 14\n+  IDENT   VALUE 15\n+  PUNCH   : [alone] 16\n+  SUBTREE () 17\n+    IDENT   bool 18\n+    PUNCH   , [alone] 19\n+    IDENT   bool 20\n+  PUNCH   = [alone] 21\n+  SUBTREE () 22\n+    IDENT   true 29\n+    PUNCH   , [joint] 25\n+    IDENT   false 31\n+  PUNCH   ; [alone] 28\n+\"#,\n+    );\n+}\n+\n #[test]\n fn test_vis() {\n     parse_macro("}, {"sha": "46c4207185f603fbb00c13b09d0278e74b53de8f", "filename": "crates/ra_mbe/src/tt_iter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs?ref=7a59cd49ff2bb47fa0844fcf5f1ec44f32523b1b", "patch": "@@ -40,9 +40,11 @@ impl<'a> TtIter<'a> {\n         }\n     }\n \n-    pub(crate) fn expect_literal(&mut self) -> Result<&'a tt::Literal, ()> {\n-        match self.expect_leaf()? {\n-            tt::Leaf::Literal(it) => Ok(it),\n+    pub(crate) fn expect_literal(&mut self) -> Result<&'a tt::Leaf, ()> {\n+        let it = self.expect_leaf()?;\n+        match it {\n+            tt::Leaf::Literal(_) => Ok(it),\n+            tt::Leaf::Ident(ident) if ident.text == \"true\" || ident.text == \"false\" => Ok(it),\n             _ => Err(()),\n         }\n     }"}]}