{"sha": "fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZjgwYmM2MGNmNzdhNTYxMmU2YjEzZTdmMGM0ZmNmNGNjNTlkMGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-24T14:46:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-24T14:46:19Z"}, "message": "Removed `type Bit` and `fn interpret` items from `trait BitDenotation`.\n\nAlso got rid of the `trait HasMoveData`, since I am now just imposing\nthe constraint that `BitDenotation<Ctxt=MoveData<'tcx>>` where\nnecessary instead.", "tree": {"sha": "eba0b677d9a616d394f3ca67c5658ce46a6d0216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba0b677d9a616d394f3ca67c5658ce46a6d0216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "html_url": "https://github.com/rust-lang/rust/commit/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf5f1023edcfe982e6e746a259a14930a847a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf5f1023edcfe982e6e746a259a14930a847a4b", "html_url": "https://github.com/rust-lang/rust/commit/0cf5f1023edcfe982e6e746a259a14930a847a4b"}], "stats": {"total": 83, "additions": 21, "deletions": 62}, "files": [{"sha": "0d1443ede4101d0c0d82339e14bc16630c407d3b", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fgraphviz.rs?ref=fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "patch": "@@ -109,7 +109,7 @@ pub fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     path: &Path,\n     render_idx: P)\n     -> io::Result<()>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>>, BD::Bit: Debug,\n+    where BD: BitDenotation<Ctxt=MoveData<'tcx>>,\n           P: for <'b> Fn(&'b BD::Ctxt, BD::Idx) -> &'b Debug\n {\n     let g = Graph { mbcx: mbcx, phantom: PhantomData, render_idx: render_idx };\n@@ -131,7 +131,7 @@ fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n }\n \n impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n-    where MWF: MirWithFlowState<'tcx>, <MWF::BD as BitDenotation>::Bit: Debug,\n+    where MWF: MirWithFlowState<'tcx>,\n           P: for <'b> Fn(&'b <MWF::BD as BitDenotation>::Ctxt, <MWF::BD as BitDenotation>::Idx) -> &'b Debug,\n {\n     type Node = Node;"}, {"sha": "c580dc8551f265abfe8fd87bd5f3e6131f8dd02d", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "patch": "@@ -12,7 +12,7 @@ use rustc::ty::TyCtxt;\n use rustc::mir::repr::{self, Mir};\n \n use super::super::gather_moves::{Location};\n-use super::super::gather_moves::{MoveData, MoveOut, MoveOutIndex, MovePath, MovePathIndex};\n+use super::super::gather_moves::{MoveData, MoveOutIndex, MovePathIndex};\n use super::super::DropFlagState;\n use super::super::drop_flag_effects_for_function_entry;\n use super::super::drop_flag_effects_for_location;\n@@ -226,15 +226,12 @@ impl<'a, 'tcx> DefinitelyInitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Bit = MovePath<'tcx>;\n     type Ctxt = MoveData<'tcx>;\n     fn name() -> &'static str { \"maybe_init\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n         ctxt.move_paths.len()\n     }\n-    fn interpret<'c>(&self, ctxt: &'c Self::Ctxt, idx: usize) -> &'c Self::Bit {\n-        &ctxt.move_paths[MovePathIndex::new(idx)]\n-    }\n+\n     fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>)\n     {\n         drop_flag_effects_for_function_entry(\n@@ -288,15 +285,11 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Bit = MovePath<'tcx>;\n     type Ctxt = MoveData<'tcx>;\n     fn name() -> &'static str { \"maybe_uninit\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n         ctxt.move_paths.len()\n     }\n-    fn interpret<'c>(&self, ctxt: &'c Self::Ctxt, idx: usize) -> &'c Self::Bit {\n-        &ctxt.move_paths[MovePathIndex::new(idx)]\n-    }\n \n     // sets on_entry bits for Arg lvalues\n     fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>) {\n@@ -354,15 +347,11 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n     type Idx = MovePathIndex;\n-    type Bit = MovePath<'tcx>;\n     type Ctxt = MoveData<'tcx>;\n     fn name() -> &'static str { \"definite_init\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n         ctxt.move_paths.len()\n     }\n-    fn interpret<'c>(&self, ctxt: &'c Self::Ctxt, idx: usize) -> &'c Self::Bit {\n-        &ctxt.move_paths[MovePathIndex::new(idx)]\n-    }\n \n     // sets on_entry bits for Arg lvalues\n     fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>) {\n@@ -419,15 +408,12 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n     type Idx = MoveOutIndex;\n-    type Bit = MoveOut;\n     type Ctxt = MoveData<'tcx>;\n     fn name() -> &'static str { \"moving_out\" }\n     fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize {\n         ctxt.moves.len()\n     }\n-    fn interpret<'c>(&self, ctxt: &'c Self::Ctxt, idx: usize) -> &'c Self::Bit {\n-        &ctxt.moves[idx]\n-    }\n+\n     fn start_block_effect(&self,_move_data: &Self::Ctxt, _sets: &mut BlockSets<MoveOutIndex>) {\n         // no move-statements have been executed prior to function\n         // execution, so this method has no effect on `_sets`."}, {"sha": "f91bd88d68f0695f2c630eda82c9184b1271b6c6", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "patch": "@@ -36,8 +36,7 @@ pub trait Dataflow<BD: BitDenotation> {\n }\n \n impl<'a, 'tcx: 'a, BD> Dataflow<BD> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>> + DataflowOperator,\n-          BD::Bit: Debug,\n+    where BD: BitDenotation<Ctxt=MoveData<'tcx>> + DataflowOperator\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug {\n         self.flow_state.build_sets();\n@@ -48,14 +47,14 @@ impl<'a, 'tcx: 'a, BD> Dataflow<BD> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n }\n \n struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>\n-    where O: 'b + BitDenotation, O::Ctxt: 'a+HasMoveData<'tcx>\n+    where O: 'b + BitDenotation, O::Ctxt: 'a\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n     changed: bool,\n }\n \n impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n-    where BD: BitDenotation + DataflowOperator, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator\n {\n     fn propagate(&mut self) {\n         let mut temp = OwnIdxSet::new_empty(self.flow_state.sets.bits_per_block);\n@@ -102,7 +101,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n }\n \n impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n-    where BD: BitDenotation + DataflowOperator, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator\n {\n     fn reset(&mut self, bits: &mut IdxSet<BD::Idx>) {\n         let e = if BD::bottom_value() {!0} else {0};\n@@ -141,7 +140,7 @@ fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n }\n \n impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where BD: BitDenotation<Ctxt=MoveData<'tcx>>, BD::Bit: Debug\n+    where BD: BitDenotation<Ctxt=MoveData<'tcx>>\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug\n@@ -182,27 +181,16 @@ impl<E:Idx> Bits<E> {\n     }\n }\n \n-pub trait HasMoveData<'tcx> {\n-    fn move_data(&self) -> &MoveData<'tcx>;\n-}\n-\n-impl<'tcx> HasMoveData<'tcx> for MoveData<'tcx> {\n-    fn move_data(&self) -> &MoveData<'tcx> { self }\n-}\n-impl<'tcx, A, B> HasMoveData<'tcx> for (A, B, MoveData<'tcx>) {\n-    fn move_data(&self) -> &MoveData<'tcx> { &self.2 }\n-}\n-\n pub struct DataflowAnalysis<'a, 'tcx: 'a, O>\n-    where O: BitDenotation, O::Ctxt: 'a+HasMoveData<'tcx>\n+    where O: BitDenotation, O::Ctxt: 'a\n {\n     flow_state: DataflowState<O>,\n     mir: &'a Mir<'tcx>,\n     ctxt: &'a O::Ctxt,\n }\n \n impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O>\n-    where O: BitDenotation, O::Ctxt: HasMoveData<'tcx>\n+    where O: BitDenotation\n {\n     pub fn results(self) -> DataflowResults<O> {\n         DataflowResults(self.flow_state)\n@@ -301,9 +289,6 @@ pub trait DataflowOperator: BitwiseOperator {\n }\n \n pub trait BitDenotation {\n-    /// Specifies what is represented by each bit in the dataflow bitvector.\n-    type Bit;\n-\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n@@ -322,10 +307,6 @@ pub trait BitDenotation {\n     /// Size of each bitvector allocated for each block in the analysis.\n     fn bits_per_block(&self, &Self::Ctxt) -> usize;\n \n-    /// Provides the meaning of each entry in the dataflow bitvector.\n-    /// (Mostly intended for use for better debug instrumentation.)\n-    fn interpret<'a>(&self, &'a Self::Ctxt, idx: usize) -> &'a Self::Bit;\n-\n     /// Mutates the block-sets (the flow sets for the given\n     /// basic block) according to the effects that have been\n     /// established *prior* to entering the start block.\n@@ -396,8 +377,7 @@ pub trait BitDenotation {\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation + DataflowOperator,\n-          D::Ctxt: HasMoveData<'tcx>\n+    where D: BitDenotation + DataflowOperator\n {\n     pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n@@ -439,8 +419,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation + DataflowOperator,\n-          D::Ctxt: HasMoveData<'tcx>,\n+    where D: BitDenotation + DataflowOperator\n {\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`."}, {"sha": "221768994942d8acb598940b5258bb7f2e328dec", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "patch": "@@ -15,10 +15,9 @@ use syntax::codemap::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::repr::{self, Mir};\n \n-use super::super::gather_moves::{MovePath, MovePathIndex};\n+use super::super::gather_moves::{MoveData, MovePathIndex};\n use super::BitDenotation;\n use super::DataflowResults;\n-use super::HasMoveData;\n \n /// This function scans `mir` for all calls to the intrinsic\n /// `rustc_peek` that have the expression form `rustc_peek(&expr)`.\n@@ -42,7 +41,7 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 _attributes: &[ast::Attribute],\n                                                 flow_ctxt: &O::Ctxt,\n                                                 results: &DataflowResults<O>)\n-    where O: BitDenotation<Bit=MovePath<'tcx>, Idx=MovePathIndex>, O::Ctxt: HasMoveData<'tcx>\n+    where O: BitDenotation<Ctxt=MoveData<'tcx>, Idx=MovePathIndex>\n {\n     debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n@@ -57,10 +56,10 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            mir: &Mir<'tcx>,\n-                           flow_ctxt: &O::Ctxt,\n+                           move_data: &O::Ctxt,\n                            results: &DataflowResults<O>,\n                            bb: repr::BasicBlock) where\n-    O: BitDenotation<Bit=MovePath<'tcx>, Idx=MovePathIndex>, O::Ctxt: HasMoveData<'tcx>\n+    O: BitDenotation<Ctxt=MoveData<'tcx>, Idx=MovePathIndex>\n {\n     let bb_data = mir.basic_block_data(bb);\n     let &repr::BasicBlockData { ref statements,\n@@ -88,8 +87,6 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut gen = results.0.sets.gen_set_for(bb.index()).to_owned();\n     let mut kill = results.0.sets.kill_set_for(bb.index()).to_owned();\n \n-    let move_data = flow_ctxt.move_data();\n-\n     // Emulate effect of all statements in the block up to (but not\n     // including) the borrow within `peek_arg_lval`. Do *not* include\n     // call to `peek_arg_lval` itself (since we are peeking the state\n@@ -138,7 +135,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // reset GEN and KILL sets before emulating their effect.\n         for e in sets.gen_set.words_mut() { *e = 0; }\n         for e in sets.kill_set.words_mut() { *e = 0; }\n-        results.0.operator.statement_effect(flow_ctxt, &mut sets, bb, j);\n+        results.0.operator.statement_effect(move_data, &mut sets, bb, j);\n         sets.on_entry.union(sets.gen_set);\n         sets.on_entry.subtract(sets.kill_set);\n     }"}, {"sha": "4b77e4c865b58fa4cbc0a821437afa4e16643f06", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=fdf80bc60cf77a5612e6b13e7f0c4fcf4cc59d0c", "patch": "@@ -31,14 +31,11 @@ mod gather_moves;\n use self::dataflow::{BitDenotation};\n use self::dataflow::{DataflowOperator};\n use self::dataflow::{Dataflow, DataflowAnalysis, DataflowResults};\n-use self::dataflow::{HasMoveData};\n use self::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n use self::dataflow::{DefinitelyInitializedLvals};\n use self::gather_moves::{MoveData, MovePathIndex, Location};\n use self::gather_moves::{MovePathContent};\n \n-use std::fmt::Debug;\n-\n fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<P<MetaItem>> {\n     for attr in attrs {\n         if attr.check_name(\"rustc_mir\") {\n@@ -118,7 +115,7 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              attributes: &[ast::Attribute],\n                              ctxt: &BD::Ctxt,\n                              bd: BD) -> DataflowResults<BD>\n-    where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveData<'tcx>> + DataflowOperator, BD::Bit: Debug\n+    where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveData<'tcx>> + DataflowOperator\n {\n     use syntax::attr::AttrMetaMethods;\n \n@@ -154,7 +151,7 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n \n pub struct MirBorrowckCtxtPreDataflow<'a, 'tcx: 'a, BD>\n-    where BD: BitDenotation, BD::Ctxt: 'a+HasMoveData<'tcx>\n+    where BD: BitDenotation, BD::Ctxt: 'a\n {\n     node_id: ast::NodeId,\n     flow_state: DataflowAnalysis<'a, 'tcx, BD>,"}]}