{"sha": "926408cdbdb413c70e71707d92cb30fee26567d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjQwOGNkYmRiNDEzYzcwZTcxNzA3ZDkyY2IzMGZlZTI2NTY3ZDU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-14T22:43:23Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-14T22:44:55Z"}, "message": "Minor cosmetic improvements to accompany PR 61825", "tree": {"sha": "40b2765121b43642da03bf11fe26025148cfe15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b2765121b43642da03bf11fe26025148cfe15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/926408cdbdb413c70e71707d92cb30fee26567d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/926408cdbdb413c70e71707d92cb30fee26567d5", "html_url": "https://github.com/rust-lang/rust/commit/926408cdbdb413c70e71707d92cb30fee26567d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/926408cdbdb413c70e71707d92cb30fee26567d5/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9606f6fa64926a84d82e3c62dbdc57f5c10f756d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9606f6fa64926a84d82e3c62dbdc57f5c10f756d", "html_url": "https://github.com/rust-lang/rust/commit/9606f6fa64926a84d82e3c62dbdc57f5c10f756d"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "0d68fdd20138168dfc5727d32ff5386d0ac9812b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/926408cdbdb413c70e71707d92cb30fee26567d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926408cdbdb413c70e71707d92cb30fee26567d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=926408cdbdb413c70e71707d92cb30fee26567d5", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // }\n             // ```\n             //\n-            // cc #46688\n+            // See issue #46688.\n             def_bm = ty::BindByValue(hir::MutImmutable);\n         }\n \n@@ -150,7 +150,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.node_ty(lt.hir_id);\n \n                 // Byte string patterns behave the same way as array patterns\n-                // They can denote both statically and dynamically sized byte arrays\n+                // They can denote both statically and dynamically-sized byte arrays.\n                 let mut pat_ty = ty;\n                 if let hir::ExprKind::Lit(ref lt) = lt.node {\n                     if let ast::LitKind::ByteStr(_) = lt.node {\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                // somewhat surprising: in this case, the subtyping\n+                // Somewhat surprising: in this case, the subtyping\n                 // relation goes the opposite way as the other\n                 // cases. Actually what we really want is not a subtyping\n                 // relation at all but rather that there exists a LUB (so\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //\n                 //     &'static str <: expected\n                 //\n-                // that's equivalent to there existing a LUB.\n+                // then that's equivalent to there existing a LUB.\n                 if let Some(mut err) = self.demand_suptype_diag(pat.span, expected, pat_ty) {\n                     err.emit_unless(discrim_span\n                         .filter(|&s| s.is_compiler_desugaring(CompilerDesugaringKind::IfTemporary))\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // it to type the entire expression.\n                 let common_type = self.resolve_vars_if_possible(&lhs_ty);\n \n-                // subtyping doesn't matter here, as the value is some kind of scalar\n+                // Subtyping doesn't matter here, as the value is some kind of scalar.\n                 self.demand_eqtype_pat(pat.span, expected, lhs_ty, discrim_span);\n                 self.demand_eqtype_pat(pat.span, expected, rhs_ty, discrim_span);\n                 common_type\n@@ -248,8 +248,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let local_ty = self.local_ty(pat.span, pat.hir_id).decl_ty;\n                 match bm {\n                     ty::BindByReference(mutbl) => {\n-                        // if the binding is like\n-                        //    ref x | ref const x | ref mut x\n+                        // If the binding is like\n+                        //     ref x | ref const x | ref mut x\n                         // then `x` is assigned a value of type `&M T` where M is the mutability\n                         // and T is the expected type.\n                         let region_var = self.next_region_var(infer::PatternRegion(pat.span));\n@@ -261,16 +261,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // an explanation.\n                         self.demand_eqtype_pat(pat.span, region_ty, local_ty, discrim_span);\n                     }\n-                    // otherwise the type of x is the expected type T\n+                    // Otherwise, the type of x is the expected type `T`.\n                     ty::BindByValue(_) => {\n-                        // As above, `T <: typeof(x)` is required but we\n+                        // As above, `T <: typeof(x)` is required, but we\n                         // use equality, see (*) below.\n                         self.demand_eqtype_pat(pat.span, expected, local_ty, discrim_span);\n                     }\n                 }\n \n-                // if there are multiple arms, make sure they all agree on\n-                // what the type of the binding `x` ought to be\n+                // If there are multiple arms, make sure they all agree on\n+                // what the type of the binding `x` ought to be.\n                 if var_id != pat.hir_id {\n                     let vt = self.local_ty(pat.span, var_id).decl_ty;\n                     self.demand_eqtype_pat(pat.span, vt, local_ty, discrim_span);\n@@ -878,7 +878,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 // possibly incorrect trailing `;` in the else arm\n                 remove_semicolon = self.could_remove_semicolon(block, then_ty);\n                 stmt.span\n-            } else {  // empty block, point at its entirety\n+            } else { // empty block; point at its entirety\n                 // Avoid overlapping spans that aren't as readable:\n                 // ```\n                 // 2 |        let x = if true {\n@@ -915,19 +915,19 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             else_expr.span\n         };\n \n-        // Compute `Span` of `then` part of `if`-expression:\n+        // Compute `Span` of `then` part of `if`-expression.\n         let then_sp = if let ExprKind::Block(block, _) = &then_expr.node {\n             if let Some(expr) = &block.expr {\n                 expr.span\n             } else if let Some(stmt) = block.stmts.last() {\n                 // possibly incorrect trailing `;` in the else arm\n                 remove_semicolon = remove_semicolon.or(self.could_remove_semicolon(block, else_ty));\n                 stmt.span\n-            } else {  // empty block, point at its entirety\n-                outer_sp = None;  // same as in `error_sp`, cleanup output\n+            } else { // empty block; point at its entirety\n+                outer_sp = None;  // same as in `error_sp`; cleanup output\n                 then_expr.span\n             }\n-        } else {  // shouldn't happen unless the parser has done something weird\n+        } else { // shouldn't happen unless the parser has done something weird\n             then_expr.span\n         };\n "}, {"sha": "22f17097fcbe330d38386de37f317e5488e33398", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/926408cdbdb413c70e71707d92cb30fee26567d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926408cdbdb413c70e71707d92cb30fee26567d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=926408cdbdb413c70e71707d92cb30fee26567d5", "patch": "@@ -4741,7 +4741,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Resolves associated value path into a base type and associated constant or method\n+    /// Resolves an associated value path into a base type and associated constant, or method\n     /// resolution. The newly resolved definition is written into `type_dependent_defs`.\n     pub fn resolve_ty_and_res_ufcs<'b>(&self,\n                                        qpath: &'b QPath,"}]}