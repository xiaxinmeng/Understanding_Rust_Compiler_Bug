{"sha": "89c722ac325a440bdd5f34befe2d28e23ec29d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzcyMmFjMzI1YTQ0MGJkZDVmMzRiZWZlMmQyOGUyM2VjMjlkMjU=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T14:53:17Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T14:53:17Z"}, "message": "Add some comments about `check_shim`", "tree": {"sha": "3b011c4266c63cbf27299f707d5d6a6a24416575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b011c4266c63cbf27299f707d5d6a6a24416575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c722ac325a440bdd5f34befe2d28e23ec29d25", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYMdtXRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjBOwD8D56ZIt3Rn+FtqA8lkOXvHaH9nILS\nUIQiJYiB35rU2kAA/i9hvJd04m+Xax+0gBHShrXCwCD7dEqr1DDzaefnYHEK\n=GClj\n-----END PGP SIGNATURE-----", "payload": "tree 3b011c4266c63cbf27299f707d5d6a6a24416575\nparent 49a8f002a017a324bd3419950d26244cfe949e2f\nauthor hyd-dev <yd-huang@outlook.com> 1623682397 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1623682397 +0800\n\nAdd some comments about `check_shim`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c722ac325a440bdd5f34befe2d28e23ec29d25", "html_url": "https://github.com/rust-lang/rust/commit/89c722ac325a440bdd5f34befe2d28e23ec29d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c722ac325a440bdd5f34befe2d28e23ec29d25/comments", "author": null, "committer": null, "parents": [{"sha": "49a8f002a017a324bd3419950d26244cfe949e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a8f002a017a324bd3419950d26244cfe949e2f", "html_url": "https://github.com/rust-lang/rust/commit/49a8f002a017a324bd3419950d26244cfe949e2f"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "87906d877f8fb4f1b2511d6d2042264eb96fda2c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=89c722ac325a440bdd5f34befe2d28e23ec29d25", "patch": "@@ -223,12 +223,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (dest, ret) = match ret {\n             None => match link_name {\n                 \"miri_start_panic\" => {\n+                    // `check_shim` happens inside `handle_miri_start_panic`.\n                     this.handle_miri_start_panic(abi, link_name_sym, args, unwind)?;\n                     return Ok(None);\n                 }\n                 // This matches calls to the foreign item `panic_impl`.\n                 // The implementation is provided by the function with the `#[panic_handler]` attribute.\n                 \"panic_impl\" => {\n+                    // We don't use `check_shim` here because we are just forwarding to the lang\n+                    // item. Argument count checking will be performed when the returned `Body` is\n+                    // called.\n                     this.check_abi_and_shim_symbol_clash(abi, Abi::Rust, link_name_sym)?;\n                     let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n                     let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n@@ -317,11 +321,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Obtains a Miri backtrace. See the README for details.\n             \"miri_get_backtrace\" => {\n+                // `check_shim` happens inside `handle_miri_get_backtrace`.\n                 this.handle_miri_get_backtrace(abi, link_name_sym, args, dest)?;\n             }\n \n             // Resolves a Miri backtrace frame. See the README for details.\n             \"miri_resolve_frame\" => {\n+                // `check_shim` happens inside `handle_miri_resolve_frame`.\n                 this.handle_miri_resolve_frame(abi, link_name_sym, args, dest)?;\n             }\n "}, {"sha": "2b8ea78bf3f11b91c68b8dad7305837ac5290b2e", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=89c722ac325a440bdd5f34befe2d28e23ec29d25", "patch": "@@ -60,6 +60,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fcntl\" => {\n+                // `fcntl` is variadic. The argument count is checked based on the first argument\n+                // in`this.fcntl()`, so we do not use `check_shim` here.\n                 this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name_sym)?;\n                 let result = this.fcntl(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;"}, {"sha": "07d764a68e913a1bb642eff7be8016980d55abca", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c722ac325a440bdd5f34befe2d28e23ec29d25/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=89c722ac325a440bdd5f34befe2d28e23ec29d25", "patch": "@@ -128,6 +128,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Dynamically invoked syscalls\n             \"syscall\" => {\n+                // We do not use `check_shim` here because `syscall` is variadic. The argument\n+                // count is checked bellow.\n                 this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name_sym)?;\n                 // The syscall variadic function is legal to call with more arguments than needed,\n                 // extra arguments are simply ignored. However, all arguments need to be scalars;"}]}