{"sha": "e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzEzZGE4MzBjZjRhNmExYjZkZjhlYzA2ODNlM2U3YjQ0YWViNDE=", "commit": {"author": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-03-03T00:13:54Z"}, "committer": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-03-03T17:25:20Z"}, "message": "Change recomendation to: &[type] from Cow<type>", "tree": {"sha": "5ed9bf2a6c5445bbf206f00c91e4c378bee05428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed9bf2a6c5445bbf206f00c91e4c378bee05428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "html_url": "https://github.com/rust-lang/rust/commit/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41/comments", "author": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5b377cec9e9444a227063b032d1525d2b40c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5b377cec9e9444a227063b032d1525d2b40c5e", "html_url": "https://github.com/rust-lang/rust/commit/fc5b377cec9e9444a227063b032d1525d2b40c5e"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "139b5883fb0d01469a8efc7c353e3b35c4548c39", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "patch": "@@ -3,6 +3,7 @@\n use std::borrow::Cow;\n use rustc::hir::*;\n use rustc::hir::map::NodeItem;\n+use rustc::hir::QPath;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::NodeId;\n@@ -214,20 +215,32 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                     );\n                 }\n             } else if match_type(cx, ty, &paths::COW) {\n-                let as_str = format!(\"{}\", snippet_opt(cx, arg.span).unwrap());\n-                let mut cc = as_str.chars();\n-                cc.next();\n-                let replacement: String = cc.collect();\n-\n-                span_lint_and_then(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    \"using a reference to `Cow` is not recommended.\",\n-                    |db| {\n-                        db.span_suggestion(arg.span, \"change this to\", replacement);\n-                    },\n-                );\n+                if_chain! {\n+                    if let TyRptr(_, MutTy { ref ty, ..} ) = arg.node;\n+                    if let TyPath(ref path) = ty.node;\n+                    if let QPath::Resolved(None, ref pp) = *path;\n+                    if let [ref bx] = *pp.segments;\n+                    if let Some(ref params) = bx.parameters;\n+                    if !params.parenthesized;\n+                    if let [ref inner] = *params.types;\n+                    then {\n+                        let replacement = snippet_opt(cx, inner.span);\n+                        match replacement {\n+                            Some(r) => {\n+                                span_lint_and_then(\n+                                    cx,\n+                                    PTR_ARG,\n+                                    arg.span,\n+                                    \"using a reference to `Cow` is not recommended.\",\n+                                    |db| {\n+                                        db.span_suggestion(arg.span, \"change this to\", \"&\".to_owned() + &r);\n+                                    },\n+                                );\n+                            },\n+                            None => (),\n+                        }\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "e319efa939cc16724b0cfa1a936f72c6ff932c7c", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=e3c13da830cf4a6a1b6df8ec0683e3e7b44aeb41", "patch": "@@ -38,13 +38,11 @@ error: this pattern creates a reference to a reference\n 50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`\n \n-a> $DIR/needless_borrow.rs:56:25: 56:36\n-b> $DIR/needless_borrow.rs:56:25: 56:36\n error: using a reference to `Cow` is not recommended.\n   --> $DIR/needless_borrow.rs:56:25\n    |\n 56 | fn test_cow_with_ref(c: &Cow<[i32]>) {\n-   |                         ^^^^^^^^^^^ help: change this to: `Cow<[i32]>`\n+   |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n    |\n    = note: `-D ptr-arg` implied by `-D warnings`\n "}]}