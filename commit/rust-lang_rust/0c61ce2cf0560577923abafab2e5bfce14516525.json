{"sha": "0c61ce2cf0560577923abafab2e5bfce14516525", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjFjZTJjZjA1NjA1Nzc5MjNhYmFmYWIyZTViZmNlMTQ1MTY1MjU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-08T20:24:56Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-09-12T15:38:22Z"}, "message": "?Sized bounds for rc::Weak::as_ptr and friends", "tree": {"sha": "b416f9ae80be235d6abda2023dbdc7c8573c98db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b416f9ae80be235d6abda2023dbdc7c8573c98db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c61ce2cf0560577923abafab2e5bfce14516525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c61ce2cf0560577923abafab2e5bfce14516525", "html_url": "https://github.com/rust-lang/rust/commit/0c61ce2cf0560577923abafab2e5bfce14516525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c61ce2cf0560577923abafab2e5bfce14516525/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728938346b02a9688c44253c19b15baa7551fd80", "url": "https://api.github.com/repos/rust-lang/rust/commits/728938346b02a9688c44253c19b15baa7551fd80", "html_url": "https://github.com/rust-lang/rust/commit/728938346b02a9688c44253c19b15baa7551fd80"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "1d4ce8e268294ae9c73693ffeb6419d763f897f9", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c61ce2cf0560577923abafab2e5bfce14516525/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c61ce2cf0560577923abafab2e5bfce14516525/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=0c61ce2cf0560577923abafab2e5bfce14516525", "patch": "@@ -1721,7 +1721,21 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\") }\n     }\n+}\n+\n+pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n+    let address = ptr.as_ptr() as *mut () as usize;\n+    address == usize::MAX\n+}\n+\n+/// Helper type to allow accessing the reference counts without\n+/// making any assertions about the data field.\n+struct WeakInner<'a> {\n+    weak: &'a Cell<usize>,\n+    strong: &'a Cell<usize>,\n+}\n \n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1854,21 +1868,7 @@ impl<T> Weak<T> {\n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n-}\n-\n-pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n-    let address = ptr.as_ptr() as *mut () as usize;\n-    address == usize::MAX\n-}\n-\n-/// Helper type to allow accessing the reference counts without\n-/// making any assertions about the data field.\n-struct WeakInner<'a> {\n-    weak: &'a Cell<usize>,\n-    strong: &'a Cell<usize>,\n-}\n \n-impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n     /// dropping of the inner value if successful.\n     ///"}]}