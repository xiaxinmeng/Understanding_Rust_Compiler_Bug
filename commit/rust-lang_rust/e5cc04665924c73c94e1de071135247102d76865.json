{"sha": "e5cc04665924c73c94e1de071135247102d76865", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Y2MwNDY2NTkyNGM3M2M5NGUxZGUwNzExMzUyNDcxMDJkNzY4NjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-16T21:15:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-02T21:44:10Z"}, "message": "Move the E0130 check to AST validation pass", "tree": {"sha": "2dde9fdc5f85e7c91c7b10ad0097f9e4256705e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dde9fdc5f85e7c91c7b10ad0097f9e4256705e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5cc04665924c73c94e1de071135247102d76865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5cc04665924c73c94e1de071135247102d76865", "html_url": "https://github.com/rust-lang/rust/commit/e5cc04665924c73c94e1de071135247102d76865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5cc04665924c73c94e1de071135247102d76865/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c", "html_url": "https://github.com/rust-lang/rust/commit/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "300750a625d5b057930a64e299d179e3d9206bff", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e5cc04665924c73c94e1de071135247102d76865", "patch": "@@ -135,6 +135,23 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_item(self, item)\n     }\n \n+    fn visit_foreign_item(&mut self, fi: &ForeignItem) {\n+        match fi.node {\n+            ForeignItemKind::Fn(ref decl, _) => {\n+                for arg in &decl.inputs {\n+                    match arg.pat.node {\n+                        PatKind::Ident(..) | PatKind::Wild => {}\n+                        _ => span_err!(self.session, arg.pat.span, E0130,\n+                                       \"patterns aren't allowed in foreign function declarations\")\n+                    }\n+                }\n+            }\n+            ForeignItemKind::Static(..) => {}\n+        }\n+\n+        visit::walk_foreign_item(self, fi)\n+    }\n+\n     fn visit_variant_data(&mut self, vdata: &VariantData, _: Ident,\n                           _: &Generics, _: NodeId, span: Span) {\n         if vdata.fields().is_empty() {"}, {"sha": "d6865ba13fc274ecc8021d521c4daa86831c5d07", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=e5cc04665924c73c94e1de071135247102d76865", "patch": "@@ -49,6 +49,39 @@ match 5u32 {\n ```\n \"##,\n \n+E0130: r##\"\n+You declared a pattern as an argument in a foreign function declaration.\n+Erroneous code example:\n+\n+```compile_fail\n+extern {\n+    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n+                                //        function declarations\n+}\n+```\n+\n+Please replace the pattern argument with a regular one. Example:\n+\n+```\n+struct SomeStruct {\n+    a: u32,\n+    b: u32,\n+}\n+\n+extern {\n+    fn foo(s: SomeStruct); // ok!\n+}\n+```\n+\n+Or:\n+\n+```\n+extern {\n+    fn foo(a: (u32, u32)); // ok!\n+}\n+```\n+\"##,\n+\n E0161: r##\"\n A value was moved. However, its size was not known at compile time, and only\n values of a known size can be moved."}, {"sha": "4486748a1f0564fbc9bf6c873d26be741c7edec9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e5cc04665924c73c94e1de071135247102d76865", "patch": "@@ -60,8 +60,6 @@ There are some shortcomings in this design:\n \n use astconv::{AstConv, ast_region_to_region, Bounds, PartitionedBounds, partition_bounds};\n use lint;\n-use hir::def::Def;\n-use hir::def_id::DefId;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n@@ -74,7 +72,6 @@ use rustc::ty::{VariantKind};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;\n-use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n use util::nodemap::{NodeMap, FnvHashMap};\n use {CrateCtxt, write_ty_to_tcx};\n@@ -91,9 +88,9 @@ use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n-use rustc::hir::{self, PatKind};\n-use rustc::hir::intravisit;\n-use rustc::hir::print as pprust;\n+use rustc::hir::{self, intravisit, map as hir_map, print as pprust};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n \n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n@@ -2144,14 +2141,6 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n     abi: abi::Abi)\n     -> ty::TypeScheme<'tcx>\n {\n-    for i in &decl.inputs {\n-        match i.pat.node {\n-            PatKind::Binding(..) | PatKind::Wild => {}\n-            _ => span_err!(ccx.tcx.sess, i.pat.span, E0130,\n-                           \"patterns aren't allowed in foreign function declarations\")\n-        }\n-    }\n-\n     let ty_generics = ty_generics_for_fn(ccx, ast_generics, &ty::Generics::empty());\n \n     let rb = BindingRscope::new();"}, {"sha": "b655d955429f06087ada1e969a5b866d3d2a084d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cc04665924c73c94e1de071135247102d76865/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e5cc04665924c73c94e1de071135247102d76865", "patch": "@@ -1800,39 +1800,6 @@ Please also verify that this wasn't because of a name-clash and rename the type\n parameter if so.\n \"##,\n \n-E0130: r##\"\n-You declared a pattern as an argument in a foreign function declaration.\n-Erroneous code example:\n-\n-```compile_fail\n-extern {\n-    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n-                                //        function declarations\n-}\n-```\n-\n-Please replace the pattern argument with a regular one. Example:\n-\n-```\n-struct SomeStruct {\n-    a: u32,\n-    b: u32,\n-}\n-\n-extern {\n-    fn foo(s: SomeStruct); // ok!\n-}\n-```\n-\n-Or:\n-\n-```\n-extern {\n-    fn foo(a: (u32, u32)); // ok!\n-}\n-```\n-\"##,\n-\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`."}]}