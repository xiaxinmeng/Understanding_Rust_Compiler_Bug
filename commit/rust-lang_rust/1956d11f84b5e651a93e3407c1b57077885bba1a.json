{"sha": "1956d11f84b5e651a93e3407c1b57077885bba1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTZkMTFmODRiNWU2NTFhOTNlMzQwN2MxYjU3MDc3ODg1YmJhMWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-30T02:49:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-05T02:17:06Z"}, "message": "refactor to condense common usage pattern", "tree": {"sha": "97aba3cd3dbad7b78a63e0526980bddf65498331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97aba3cd3dbad7b78a63e0526980bddf65498331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1956d11f84b5e651a93e3407c1b57077885bba1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1956d11f84b5e651a93e3407c1b57077885bba1a", "html_url": "https://github.com/rust-lang/rust/commit/1956d11f84b5e651a93e3407c1b57077885bba1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1956d11f84b5e651a93e3407c1b57077885bba1a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab4105d9e8b7c0719343aa2e4edd15cae0b7c947", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4105d9e8b7c0719343aa2e4edd15cae0b7c947", "html_url": "https://github.com/rust-lang/rust/commit/ab4105d9e8b7c0719343aa2e4edd15cae0b7c947"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "feb70cff8590cda511f172421202962b2ee97e35", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1956d11f84b5e651a93e3407c1b57077885bba1a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1956d11f84b5e651a93e3407c1b57077885bba1a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=1956d11f84b5e651a93e3407c1b57077885bba1a", "patch": "@@ -1790,9 +1790,9 @@ fn region_env() -> @region_env {\n // Replaces all region parameters in the given type with region variables.\n // This is used when typechecking function calls, bind expressions, and method\n // calls.\n-fn universally_quantify_regions(fcx: @fn_ctxt, renv: @region_env, ty: ty::t)\n-        -> ty::t {\n+fn universally_quantify_regions(fcx: @fn_ctxt, ty: ty::t) -> ty::t {\n     if ty::type_has_rptrs(ty) {\n+        let renv = region_env();\n         ty::fold_ty(fcx.ccx.tcx, ty::fm_rptr({|r, _under_rptr|\n             alt r {\n                 ty::re_param(param_id) {\n@@ -2301,12 +2301,10 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n                     self_ty = instantiate_self_regions(fcx.ccx.tcx,\n                                                        ty::re_param(next_rid),\n                                                        self_ty);\n-                    self_ty = universally_quantify_regions(fcx, region_env(),\n-                                                           self_ty);\n+                    self_ty = universally_quantify_regions(fcx, self_ty);\n \n                     // ... and \"ty\" refers to the caller side.\n-                    let ty = universally_quantify_regions(fcx, region_env(),\n-                                                          ty);\n+                    let ty = universally_quantify_regions(fcx, ty);\n \n                     alt unify::unify(fcx, self_ty, ty) {\n                       result::ok(_) {\n@@ -2440,9 +2438,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n \n     // A generic function to factor out common logic from call and bind\n     // expressions.\n-    fn check_call_or_bind(fcx: @fn_ctxt, sp: span, fty: ty::t,\n-                          args: [option<@ast::expr>]) -> bool {\n+    fn check_call_or_bind(\n+        fcx: @fn_ctxt, sp: span, fty: ty::t,\n+        args: [option<@ast::expr>]) -> {fty: ty::t, bot: bool} {\n \n+        let fty = universally_quantify_regions(fcx, fty);\n         let sty = structure_of(fcx, sp, fty);\n         // Grab the argument types\n         let mut arg_tys = alt sty {\n@@ -2510,7 +2510,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             }\n             ret bot;\n         };\n-        ret check_args(false) | check_args(true);\n+\n+        let bot = check_args(false) | check_args(true);\n+\n+        {fty: fty, bot: bot}\n     }\n \n     // A generic function for checking assignment expressions\n@@ -2532,11 +2535,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n \n         let bot = check_expr(fcx, f);\n \n-        let mut fn_ty = fcx.expr_ty(f);\n-        fn_ty = universally_quantify_regions(fcx, region_env(), fn_ty);\n-\n         // Call the generic checker.\n-        ret check_call_or_bind(fcx, sp, fn_ty, args_opt_0) | bot;\n+        ret {\n+            let fn_ty = fcx.expr_ty(f);\n+            check_call_or_bind(fcx, sp, fn_ty, args_opt_0).bot | bot\n+        };\n     }\n \n     // A generic function for doing all of the checking for call expressions\n@@ -2612,10 +2615,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let callee_id = ast_util::op_expr_callee_id(op_ex);\n         alt lookup_method(fcx, op_ex, callee_id, opname, self_t, [], false) {\n           some(origin) {\n-            let method_ty = fcx.node_ty(callee_id);\n-            let method_ty = universally_quantify_regions(fcx, region_env(),\n-                                                     method_ty);\n-            let bot = check_call_or_bind(fcx, op_ex.span, method_ty, args);\n+            let {fty: method_ty, bot: bot} = {\n+                let method_ty = fcx.node_ty(callee_id);\n+                check_call_or_bind(fcx, op_ex.span, method_ty, args)\n+            };\n             fcx.ccx.method_map.insert(op_ex.id, origin);\n             some((ty::ty_fn_ret(method_ty), bot))\n           }\n@@ -2834,18 +2837,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let defn = lookup_def(fcx, pth.span, id);\n \n         let tpt = ty_param_bounds_and_ty_for_def(fcx, expr.span, defn);\n-        if ty::def_has_ty_params(defn) {\n-            instantiate_path(fcx, pth, tpt, expr.span, expr.id);\n-        } else {\n-            // The definition doesn't take type parameters. If the programmer\n-            // supplied some, that's an error\n-            if vec::len::<@ast::ty>(pth.node.types) > 0u {\n-                tcx.sess.span_fatal(expr.span,\n-                                    \"this kind of value does not \\\n-                                     take type parameters\");\n-            }\n-            fcx.write_ty(id, tpt.ty);\n-        }\n+        instantiate_path(fcx, pth, tpt, expr.span, expr.id);\n       }\n       ast::expr_mac(_) { tcx.sess.bug(\"unexpanded macro\"); }\n       ast::expr_fail(expr_opt) {\n@@ -3045,10 +3037,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // Call the generic checker.\n         bot = check_expr(fcx, f);\n \n-        let mut fn_ty = fcx.expr_ty(f);\n-        fn_ty = universally_quantify_regions(fcx, region_env(), fn_ty);\n-\n-        let ccob_bot = check_call_or_bind(fcx, expr.span, fn_ty, args);\n+        let ccob_bot = {\n+            let fn_ty = fcx.expr_ty(f);\n+            check_call_or_bind(fcx, expr.span, fn_ty, args).bot\n+        };\n         bot |= ccob_bot;\n \n         // TODO: Perform substitutions on the return type."}]}