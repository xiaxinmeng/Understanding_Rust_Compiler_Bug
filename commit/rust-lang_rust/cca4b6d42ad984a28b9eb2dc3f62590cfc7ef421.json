{"sha": "cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYTRiNmQ0MmFkOTg0YTI4YjllYjJkYzNmNjI1OTBjZmM3ZWY0MjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T20:39:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T20:02:18Z"}, "message": "Fix rebase", "tree": {"sha": "1844f0f45819b51c75f74c1a509031f9d7a9d9d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1844f0f45819b51c75f74c1a509031f9d7a9d9d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421", "html_url": "https://github.com/rust-lang/rust/commit/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec", "html_url": "https://github.com/rust-lang/rust/commit/252773af8ba86a644ccf3ff0b0cc06cc3857c7ec"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "963da858803505502fdfb3e6ec9b15d583c5df13", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cca4b6d42ad984a28b9eb2dc3f62590cfc7ef421", "patch": "@@ -22,7 +22,7 @@ use crate::hir;\n use crate::hir::Node;\n use crate::hir::def_id::DefId;\n use crate::infer::{self, InferCtxt};\n-use crate::infer::error_reporting::TypeAnnotationNeeded::*;\n+use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::session::DiagnosticMessageId;\n use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n@@ -1989,10 +1989,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if self.tcx.lang_items().sized_trait()\n                     .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                 {\n-                    self.need_type_info_err(body_id, span, self_ty, E0282).emit();\n+                    self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0282).emit();\n                     return;\n                 }\n-                let mut err = self.need_type_info_err(body_id, span, self_ty, E0283);\n+                let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n                 err\n             }\n@@ -2003,7 +2003,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if ty.references_error() || self.tcx.sess.has_errors() {\n                     return;\n                 }\n-                self.need_type_info_err(body_id, span, ty, E0282)\n+                self.need_type_info_err(body_id, span, ty, ErrorCode::E0282)\n             }\n \n             ty::Predicate::Subtype(ref data) => {\n@@ -2014,15 +2014,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.need_type_info_err(body_id, span, a, E0282)\n+                self.need_type_info_err(body_id, span, a, ErrorCode::E0282)\n             }\n             ty::Predicate::Projection(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref(self.tcx);\n                 let self_ty = trait_ref.self_ty();\n                 if predicate.references_error() {\n                     return;\n                 }\n-                let mut err = self.need_type_info_err(body_id, span, self_ty, E0284);\n+                let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n                 err\n             }"}]}