{"sha": "b577e4c8d8abfccb82269855701e1e8f10dff9ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NzdlNGM4ZDhhYmZjY2I4MjI2OTg1NTcwMWUxZThmMTBkZmY5ZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-13T17:57:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:17:09Z"}, "message": "core: Mark remaining Char methods unstable\n\nThe `Char` trait itself may go away in favor of primitive inherent\nmethods. Still some questions about whether the preconditions are\nfollowing the final error handling conventions.", "tree": {"sha": "2f8956ec81e90404012ab9c37715073b1c2cb529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f8956ec81e90404012ab9c37715073b1c2cb529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b577e4c8d8abfccb82269855701e1e8f10dff9ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b577e4c8d8abfccb82269855701e1e8f10dff9ff", "html_url": "https://github.com/rust-lang/rust/commit/b577e4c8d8abfccb82269855701e1e8f10dff9ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b577e4c8d8abfccb82269855701e1e8f10dff9ff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "html_url": "https://github.com/rust-lang/rust/commit/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "e2b420a4d3997b599e26527434d477628ea942e6", "filename": "src/libcore/char.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b577e4c8d8abfccb82269855701e1e8f10dff9ff/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b577e4c8d8abfccb82269855701e1e8f10dff9ff/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=b577e4c8d8abfccb82269855701e1e8f10dff9ff", "patch": "@@ -268,6 +268,7 @@ pub trait Char {\n     /// # Failure\n     ///\n     /// Fails if given a radix > 36.\n+    #[unstable = \"pending error conventions\"]\n     fn is_digit(&self, radix: uint) -> bool;\n \n     /// Converts a character to the corresponding digit.\n@@ -281,6 +282,7 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix outside the range [0..36].\n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n \n     /// Converts a number to the character representing it.\n@@ -307,6 +309,7 @@ pub trait Char {\n     /// * Characters in [0,0xff] get 2-digit escapes: `\\\\xNN`\n     /// * Characters in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`.\n     /// * Characters above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`.\n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn escape_unicode(&self, f: |char|);\n \n     /// Returns a 'default' ASCII and C++11-like literal escape of a\n@@ -321,6 +324,7 @@ pub trait Char {\n     ///   escaped.\n     /// * Any other chars in the range [0x20,0x7e] are not escaped.\n     /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn escape_default(&self, f: |char|);\n \n     /// Returns the amount of bytes this character would need if encoded in\n@@ -330,24 +334,28 @@ pub trait Char {\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-8.\n+    #[unstable = \"pending trait organization\"]\n     fn len_utf8(&self) -> uint;\n \n     /// Returns the amount of bytes this character would need if encoded in\n     /// UTF-16.\n+    #[unstable = \"pending trait organization\"]\n     fn len_utf16(&self) -> uint;\n \n     /// Encodes this character as UTF-8 into the provided byte buffer,\n     /// and then returns the number of bytes written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n+    #[unstable = \"pending trait organization\"]\n     fn encode_utf8(&self, dst: &mut [u8]) -> Option<uint>;\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n     /// and then returns the number of `u16`s written.\n     ///\n     /// If the buffer is not large enough, nothing will be written into it\n     /// and a `None` will be returned.\n+    #[unstable = \"pending trait organization\"]\n     fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint>;\n }\n \n@@ -356,8 +364,10 @@ impl Char for char {\n     #[deprecated = \"use is_digit\"]\n     fn is_digit_radix(&self, radix: uint) -> bool { is_digit_radix(*self, radix) }\n \n+    #[unstable = \"pending trait organization\"]\n     fn is_digit(&self, radix: uint) -> bool { is_digit_radix(*self, radix) }\n \n+    #[unstable = \"pending trait organization\"]\n     fn to_digit(&self, radix: uint) -> Option<uint> { to_digit(*self, radix) }\n \n     #[deprecated = \"use the char::from_digit free function\"]\n@@ -367,24 +377,29 @@ impl Char for char {\n     #[deprecated = \"use the char::from_u32 free function\"]\n     fn from_u32(i: u32) -> Option<char> { from_u32(i) }\n \n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn escape_unicode(&self, f: |char|) { escape_unicode(*self, f) }\n \n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn escape_default(&self, f: |char|) { escape_default(*self, f) }\n \n     #[inline]\n     #[deprecated = \"use len_utf8\"]\n     fn len_utf8_bytes(&self) -> uint { len_utf8_bytes(*self) }\n \n     #[inline]\n+    #[unstable = \"pending trait organization\"]\n     fn len_utf8(&self) -> uint { len_utf8_bytes(*self) }\n \n     #[inline]\n+    #[unstable = \"pending trait organization\"]\n     fn len_utf16(&self) -> uint {\n         let ch = *self as u32;\n         if (ch & 0xFFFF_u32) == ch { 1 } else { 2 }\n     }\n \n     #[inline]\n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn encode_utf8<'a>(&self, dst: &'a mut [u8]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n         let code = *self as u32;\n@@ -412,6 +427,7 @@ impl Char for char {\n     }\n \n     #[inline]\n+    #[unstable = \"pending error conventions, trait organization\"]\n     fn encode_utf16(&self, dst: &mut [u16]) -> Option<uint> {\n         // Marked #[inline] to allow llvm optimizing it away\n         let mut ch = *self as u32;"}]}