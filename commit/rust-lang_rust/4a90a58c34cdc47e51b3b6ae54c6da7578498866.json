{"sha": "4a90a58c34cdc47e51b3b6ae54c6da7578498866", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTBhNThjMzRjZGM0N2U1MWIzYjZhZTU0YzZkYTc1Nzg0OTg4NjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-28T22:29:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-28T22:29:16Z"}, "message": "make more matches exhaustive", "tree": {"sha": "8d00276b6037d8896af78e043240f8f39764cb5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d00276b6037d8896af78e043240f8f39764cb5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a90a58c34cdc47e51b3b6ae54c6da7578498866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a90a58c34cdc47e51b3b6ae54c6da7578498866", "html_url": "https://github.com/rust-lang/rust/commit/4a90a58c34cdc47e51b3b6ae54c6da7578498866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a90a58c34cdc47e51b3b6ae54c6da7578498866/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c177e68015c0915aee333540f29d1673fe6ffdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c177e68015c0915aee333540f29d1673fe6ffdd5", "html_url": "https://github.com/rust-lang/rust/commit/c177e68015c0915aee333540f29d1673fe6ffdd5"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "71a1d57fec33e7f002320a0c49cb7e59995b79b8", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4a90a58c34cdc47e51b3b6ae54c6da7578498866/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a90a58c34cdc47e51b3b6ae54c6da7578498866/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=4a90a58c34cdc47e51b3b6ae54c6da7578498866", "patch": "@@ -583,11 +583,15 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n     fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {\n         match rvalue {\n-            Rvalue::Use(operand) | Rvalue::Repeat(operand, _) | Rvalue::UnaryOp(_, operand) => {\n+            Rvalue::Use(operand)\n+            | Rvalue::Repeat(operand, _)\n+            | Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, operand) => {\n                 self.validate_operand(operand)?;\n             }\n \n-            Rvalue::Discriminant(place) | Rvalue::Len(place) => self.validate_place(place.as_ref())?,\n+            Rvalue::Discriminant(place) | Rvalue::Len(place) => {\n+                self.validate_place(place.as_ref())?\n+            }\n \n             Rvalue::ThreadLocalRef(_) => return Err(Unpromotable),\n \n@@ -606,35 +610,52 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(operand)?;\n             }\n \n-            Rvalue::BinaryOp(op, lhs, rhs)\n-            | Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n+            Rvalue::BinaryOp(op, lhs, rhs) | Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n                 let op = *op;\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind() {\n-                    assert!(\n-                        op == BinOp::Eq\n-                            || op == BinOp::Ne\n-                            || op == BinOp::Le\n-                            || op == BinOp::Lt\n-                            || op == BinOp::Ge\n-                            || op == BinOp::Gt\n-                            || op == BinOp::Offset\n-                    );\n-\n                     // raw pointer operations are not allowed inside consts and thus not promotable\n+                    assert!(matches!(\n+                        op,\n+                        BinOp::Eq\n+                            | BinOp::Ne\n+                            | BinOp::Le\n+                            | BinOp::Lt\n+                            | BinOp::Ge\n+                            | BinOp::Gt\n+                            | BinOp::Offset\n+                    ));\n                     return Err(Unpromotable);\n                 }\n \n-                // FIXME: reject operations that can fail -- namely, division and modulo.\n+                match op {\n+                    // FIXME: reject operations that can fail -- namely, division and modulo.\n+                    BinOp::Eq\n+                    | BinOp::Ne\n+                    | BinOp::Le\n+                    | BinOp::Lt\n+                    | BinOp::Ge\n+                    | BinOp::Gt\n+                    | BinOp::Offset\n+                    | BinOp::Add\n+                    | BinOp::Sub\n+                    | BinOp::Mul\n+                    | BinOp::Div\n+                    | BinOp::Rem\n+                    | BinOp::BitXor\n+                    | BinOp::BitAnd\n+                    | BinOp::BitOr\n+                    | BinOp::Shl\n+                    | BinOp::Shr => {}\n+                }\n \n                 self.validate_operand(lhs)?;\n                 self.validate_operand(rhs)?;\n             }\n \n-            Rvalue::NullaryOp(op, _) => {\n-                if matches!(op, NullOp::Box) {\n-                    return Err(Unpromotable);\n-                }\n-            }\n+            Rvalue::NullaryOp(op, _) => match op {\n+                NullOp::Box => return Err(Unpromotable),\n+                NullOp::SizeOf => {}\n+            },\n \n             Rvalue::AddressOf(_, place) => {\n                 // We accept `&raw *`, i.e., raw reborrows -- creating a raw pointer is"}]}