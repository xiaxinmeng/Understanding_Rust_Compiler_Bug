{"sha": "5511add74205d8547f98959b01e5053be2395723", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MTFhZGQ3NDIwNWQ4NTQ3Zjk4OTU5YjAxZTUwNTNiZTIzOTU3MjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-14T00:51:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T20:23:34Z"}, "message": "traits: break apart the \"full normalization\" code used for normalizing\nparameter environments so that it can be used elsewhere.", "tree": {"sha": "fc4c1754e9177c40447c2b2144f071b97e2e3f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4c1754e9177c40447c2b2144f071b97e2e3f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5511add74205d8547f98959b01e5053be2395723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5511add74205d8547f98959b01e5053be2395723", "html_url": "https://github.com/rust-lang/rust/commit/5511add74205d8547f98959b01e5053be2395723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5511add74205d8547f98959b01e5053be2395723/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7134ad4d6402e4a1d84a7ebfa417170c107642cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7134ad4d6402e4a1d84a7ebfa417170c107642cb", "html_url": "https://github.com/rust-lang/rust/commit/7134ad4d6402e4a1d84a7ebfa417170c107642cb"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "57c9fa7a4d964a0b834e473247e2278f24631761", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5511add74205d8547f98959b01e5053be2395723/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5511add74205d8547f98959b01e5053be2395723/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=5511add74205d8547f98959b01e5053be2395723", "patch": "@@ -15,9 +15,9 @@ pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;\n pub use self::ObligationCauseCode::*;\n \n-use middle::mem_categorization::Typer;\n use middle::subst;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, HasProjectionTypes, Ty};\n+use middle::ty_fold::TypeFoldable;\n use middle::infer::{self, InferCtxt};\n use std::slice::Iter;\n use std::rc::Rc;\n@@ -432,25 +432,44 @@ pub fn normalize_param_env<'a,'tcx>(param_env: &ty::ParameterEnvironment<'a,'tcx\n     debug!(\"normalize_param_env(param_env={})\",\n            param_env.repr(tcx));\n \n-    let predicates: Vec<ty::Predicate<'tcx>> = {\n-        let infcx = infer::new_infer_ctxt(tcx);\n-        let mut selcx = &mut SelectionContext::new(&infcx, param_env);\n-        let mut fulfill_cx = FulfillmentContext::new();\n-        let Normalized { value: predicates, obligations } =\n-            project::normalize(selcx, cause, &param_env.caller_bounds);\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(selcx.infcx(), obligation);\n-        }\n-        try!(fulfill_cx.select_all_or_error(selcx.infcx(), param_env));\n-        predicates.iter().map(|p| infcx.resolve_type_vars_if_possible(p)).collect()\n-    };\n+    let infcx = infer::new_infer_ctxt(tcx);\n+    let predicates = try!(fully_normalize(&infcx, param_env, cause, &param_env.caller_bounds));\n \n     debug!(\"normalize_param_env: predicates={}\",\n            predicates.repr(tcx));\n \n     Ok(param_env.with_caller_bounds(predicates))\n }\n \n+pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n+                                  closure_typer: &ty::ClosureTyper<'tcx>,\n+                                  cause: ObligationCause<'tcx>,\n+                                  value: &T)\n+                                  -> Result<T, Vec<FulfillmentError<'tcx>>>\n+    where T : TypeFoldable<'tcx> + HasProjectionTypes + Clone + Repr<'tcx>\n+{\n+    let tcx = closure_typer.tcx();\n+\n+    debug!(\"normalize_param_env(value={})\",\n+           value.repr(tcx));\n+\n+    let mut selcx = &mut SelectionContext::new(infcx, closure_typer);\n+    let mut fulfill_cx = FulfillmentContext::new();\n+    let Normalized { value: normalized_value, obligations } =\n+        project::normalize(selcx, cause, value);\n+    debug!(\"normalize_param_env: normalized_value={} obligations={}\",\n+           normalized_value.repr(tcx),\n+           obligations.repr(tcx));\n+    for obligation in obligations {\n+        fulfill_cx.register_predicate_obligation(selcx.infcx(), obligation);\n+    }\n+    try!(fulfill_cx.select_all_or_error(infcx, closure_typer));\n+    let resolved_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n+    debug!(\"normalize_param_env: resolved_value={}\",\n+           resolved_value.repr(tcx));\n+    Ok(resolved_value)\n+}\n+\n impl<'tcx,O> Obligation<'tcx,O> {\n     pub fn new(cause: ObligationCause<'tcx>,\n                trait_ref: O)"}]}