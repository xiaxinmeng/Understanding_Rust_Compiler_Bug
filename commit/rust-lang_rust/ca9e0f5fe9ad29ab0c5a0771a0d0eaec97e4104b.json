{"sha": "ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOWUwZjVmZTlhZDI5YWIwYzVhMDc3MWEwZDBlYWVjOTdlNDEwNGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T21:48:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T21:48:26Z"}, "message": "Fixup tests", "tree": {"sha": "42bf4f4eb6e23720717bbc1f1bc58be6d658e23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42bf4f4eb6e23720717bbc1f1bc58be6d658e23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "html_url": "https://github.com/rust-lang/rust/commit/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "html_url": "https://github.com/rust-lang/rust/commit/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "f627f31dcd5290d1f87c7c28284e434517c8a087", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -30,6 +30,10 @@ fn check(assist_id: &str, before: &str, after: &str) {\n             )\n         });\n \n-    let actual = assist.action.edit.apply(&before);\n+    let actual = {\n+        let mut actual = before.clone();\n+        assist.action.edit.apply(&mut actual);\n+        actual\n+    };\n     assert_eq_text!(after, &actual);\n }"}, {"sha": "0f94f5ee89dde3fd7e227b01701633eb6d03fe66", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -199,12 +199,12 @@ mod handlers {\n mod helpers {\n     use std::sync::Arc;\n \n+    use hir::Semantics;\n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n     use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n-    use crate::{AssistCtx, AssistFile, AssistHandler};\n-    use hir::Semantics;\n+    use crate::{handlers::Handler, AssistCtx, AssistFile};\n \n     pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -214,22 +214,18 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(\n-        assist: AssistHandler,\n-        ra_fixture_before: &str,\n-        ra_fixture_after: &str,\n-    ) {\n+    pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n         check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use\n     // `extract_ranges` and mark the target as `<target> </target>` in the\n     // fixuture?\n-    pub(crate) fn check_assist_target(assist: AssistHandler, ra_fixture: &str, target: &str) {\n+    pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n         check(assist, ra_fixture, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, ra_fixture: &str) {\n+    pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n         check(assist, ra_fixture, ExpectedResult::NotApplicable);\n     }\n \n@@ -239,7 +235,7 @@ mod helpers {\n         Target(&'a str),\n     }\n \n-    fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n+    fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n         let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n             if before.contains(\"//-\") {\n                 let (mut db, position) = RootDatabase::with_position(before);\n@@ -265,13 +261,13 @@ mod helpers {\n             (Some(assist), ExpectedResult::After(after)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n \n-                let assisted_file_text = if let AssistFile::TargetFile(file_id) = action.file {\n+                let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n                     db.file_text(file_id).as_ref().to_owned()\n                 } else {\n                     text_without_caret\n                 };\n+                action.edit.apply(&mut actual);\n \n-                let mut actual = action.edit.apply(&assisted_file_text);\n                 match action.cursor_position {\n                     None => {\n                         if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {"}, {"sha": "87a0b80f13e6ce7479fa609596e26d361e00a906", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -241,7 +241,11 @@ mod tests {\n             diagnostics.pop().unwrap_or_else(|| panic!(\"no diagnostics for:\\n{}\\n\", before));\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -256,7 +260,11 @@ mod tests {\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n-        let actual = edit.apply(&target_file_contents);\n+        let actual = {\n+            let mut actual = target_file_contents.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n \n         // Strip indent and empty lines from `after`, to match the behaviour of\n         // `parse_fixture` called from `analysis_and_position`.\n@@ -288,7 +296,11 @@ mod tests {\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -662,10 +674,10 @@ mod tests {\n                                     1,\n                                 ),\n                                 edit: TextEdit {\n-                                    atoms: [\n-                                        AtomTextEdit {\n-                                            delete: 3..9,\n+                                    indels: [\n+                                        Indel {\n                                             insert: \"{a:42, b: ()}\",\n+                                            delete: 3..9,\n                                         },\n                                     ],\n                                 },"}, {"sha": "d3af780c450f59e943b64efcf4819db0c4c4f7e1", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -569,7 +569,11 @@ fn foo() {\n         let (sel, before) = extract_range(before);\n         let parse = SourceFile::parse(&before);\n         let result = join_lines(&parse.tree(), sel);\n-        let actual = result.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            result.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n "}, {"sha": "0398d53bc92e64865c0d3a727af6761d2b790211", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -537,10 +537,10 @@ mod tests {\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -589,10 +589,10 @@ mod tests {\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -672,10 +672,10 @@ mod tests {\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 8..11,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 8..11,\n                                     },\n                                 ],\n                             },\n@@ -685,10 +685,10 @@ mod tests {\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 27..30,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 27..30,\n                                     },\n                                 ],\n                             },\n@@ -720,13 +720,13 @@ mod tests {\n         if let Some(change) = source_change {\n             for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n-                for atom in edit.edit.as_atoms() {\n-                    text_edit_builder.replace(atom.delete, atom.insert.clone());\n+                for indel in edit.edit.as_indels() {\n+                    text_edit_builder.replace(indel.delete, indel.insert.clone());\n                 }\n             }\n         }\n-        let result =\n-            text_edit_builder.finish().apply(&*analysis.file_text(file_id.unwrap()).unwrap());\n+        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n+        text_edit_builder.finish().apply(&mut result);\n         assert_eq_text!(expected, &*result);\n     }\n }"}, {"sha": "8bf52d0fa8277e4a4478e089e507aebc9711ca13", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -511,15 +511,19 @@ mod tests {\n         );\n \n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), \"fn main() { bar(1+2); }\");\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, \"fn main() { bar(1+2); }\");\n     }\n \n     fn assert_ssr_transform(query: &str, input: &str, result: &str) {\n         let query: SsrQuery = query.parse().unwrap();\n         let code = SourceFile::parse(input).tree();\n         let matches = find(&query.pattern, code.syntax());\n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), result);\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, result);\n     }\n \n     #[test]"}, {"sha": "48c8fd1f4662d38e8d4ebd6fc7e68cf99fcfe219", "filename": "crates/ra_ide/src/test_utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -13,7 +13,11 @@ pub fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n     let (before_cursor_pos, before) = extract_offset(before);\n     let file = SourceFile::parse(&before).ok().unwrap();\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n-    let actual = result.apply(&before);\n+    let actual = {\n+        let mut actual = before.to_string();\n+        result.apply(&mut actual);\n+        actual\n+    };\n     let actual_cursor_pos =\n         result.apply_to_offset(before_cursor_pos).expect(\"cursor position is affected by the edit\");\n     let actual = add_cursor(&actual, actual_cursor_pos);"}, {"sha": "a03da46938070b8fbd854cadb8be071a549a7a09", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -142,10 +142,13 @@ mod tests {\n     fn do_type_char(char_typed: char, before: &str) -> Option<(String, SingleFileChange)> {\n         let (offset, before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n-        let before = edit.apply(&before);\n+        let mut before = before.to_string();\n+        edit.apply(&mut before);\n         let parse = SourceFile::parse(&before);\n-        on_char_typed_inner(&parse.tree(), offset, char_typed)\n-            .map(|it| (it.edit.apply(&before), it))\n+        on_char_typed_inner(&parse.tree(), offset, char_typed).map(|it| {\n+            it.edit.apply(&mut before);\n+            (before.to_string(), it)\n+        })\n     }\n \n     fn type_char(char_typed: char, before: &str, after: &str) {"}, {"sha": "78a40cc94c44a8dd8dbf29b9f3d9d1ef061e867d", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "patch": "@@ -96,7 +96,8 @@ mod tests {\n         let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n \n         assert_eq!(result.source_file_edits.len(), 1);\n-        let actual = result.source_file_edits[0].edit.apply(&before);\n+        let mut actual = before.to_string();\n+        result.source_file_edits[0].edit.apply(&mut actual);\n         let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n         Some(actual)\n     }"}]}