{"sha": "5531927e8af9b99ad923af4c827c91038bca51ee", "node_id": "C_kwDOAAsO6NoAKDU1MzE5MjdlOGFmOWI5OWFkOTIzYWY0YzgyN2M5MTAzOGJjYTUxZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T19:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T19:56:45Z"}, "message": "Auto merge of #91616 - saethlin:sort_unchecked-sb-fix, r=Mark-Simulacrum\n\nFix #91306 by deriving all access from a single *mut T\n\nFixes #91306.\n\nThe previous code is invalid because the first argument to `copy_nonoverlapping` is invalidated by the mutable borrow taken out to construct the second argument.\n\nI believe this patch fixes that, and this code should now pass Miri with `-Ztag-raw-pointers`, ~~but I'm currently stuck trying to run my reproducer with a this patched version of the standard library (alternatively, running Miri on the standard library tests itself would suffice).~~ Ralf walked me through this on Zulip.\n\nI've also added fixes for 7 more problems other than those I reported. Most of them are easy to hit by calling sort_unstable on random arrays. I don't have reproducers for every change, but they seem pretty clear-cut to me. But I did only start learning stacked borrows 2 days ago so that might be a large dash of Dunning-Kruger.", "tree": {"sha": "29836a7c54f4ecd26ead12fdcd2a1d48811a26d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29836a7c54f4ecd26ead12fdcd2a1d48811a26d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5531927e8af9b99ad923af4c827c91038bca51ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5531927e8af9b99ad923af4c827c91038bca51ee", "html_url": "https://github.com/rust-lang/rust/commit/5531927e8af9b99ad923af4c827c91038bca51ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5531927e8af9b99ad923af4c827c91038bca51ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d01550f7ea9fce1cf625128fefc73b9da3c1508", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d01550f7ea9fce1cf625128fefc73b9da3c1508", "html_url": "https://github.com/rust-lang/rust/commit/1d01550f7ea9fce1cf625128fefc73b9da3c1508"}, {"sha": "3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "html_url": "https://github.com/rust-lang/rust/commit/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "b5e6083c663518e43eac88ec9c81fd5a9877a0a3", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5531927e8af9b99ad923af4c827c91038bca51ee/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5531927e8af9b99ad923af4c827c91038bca51ee/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=5531927e8af9b99ad923af4c827c91038bca51ee", "patch": "@@ -33,8 +33,8 @@ where\n     F: FnMut(&T, &T) -> bool,\n {\n     let len = v.len();\n-    // SAFETY: The unsafe operations below involves indexing without a bound check (`get_unchecked` and `get_unchecked_mut`)\n-    // and copying memory (`ptr::copy_nonoverlapping`).\n+    // SAFETY: The unsafe operations below involves indexing without a bounds check (by offsetting a\n+    // pointer) and copying memory (`ptr::copy_nonoverlapping`).\n     //\n     // a. Indexing:\n     //  1. We checked the size of the array to >=2.\n@@ -55,17 +55,18 @@ where\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n             let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.get_unchecked_mut(1) };\n-            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);\n+            let v = v.as_mut_ptr();\n+            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(1) };\n+            ptr::copy_nonoverlapping(v.add(1), v.add(0), 1);\n \n             for i in 2..len {\n-                if !is_less(v.get_unchecked(i), &*tmp) {\n+                if !is_less(&*v.add(i), &*tmp) {\n                     break;\n                 }\n \n                 // Move `i`-th element one place to the left, thus shifting the hole to the right.\n-                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);\n-                hole.dest = v.get_unchecked_mut(i);\n+                ptr::copy_nonoverlapping(v.add(i), v.add(i - 1), 1);\n+                hole.dest = v.add(i);\n             }\n             // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n         }\n@@ -78,8 +79,8 @@ where\n     F: FnMut(&T, &T) -> bool,\n {\n     let len = v.len();\n-    // SAFETY: The unsafe operations below involves indexing without a bound check (`get_unchecked` and `get_unchecked_mut`)\n-    // and copying memory (`ptr::copy_nonoverlapping`).\n+    // SAFETY: The unsafe operations below involves indexing without a bound check (by offsetting a\n+    // pointer) and copying memory (`ptr::copy_nonoverlapping`).\n     //\n     // a. Indexing:\n     //  1. We checked the size of the array to >= 2.\n@@ -100,17 +101,18 @@ where\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n             let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.get_unchecked_mut(len - 2) };\n-            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);\n+            let v = v.as_mut_ptr();\n+            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(len - 2) };\n+            ptr::copy_nonoverlapping(v.add(len - 2), v.add(len - 1), 1);\n \n             for i in (0..len - 2).rev() {\n-                if !is_less(&*tmp, v.get_unchecked(i)) {\n+                if !is_less(&*tmp, &*v.add(i)) {\n                     break;\n                 }\n \n                 // Move `i`-th element one place to the right, thus shifting the hole to the left.\n-                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);\n-                hole.dest = v.get_unchecked_mut(i);\n+                ptr::copy_nonoverlapping(v.add(i), v.add(i + 1), 1);\n+                hole.dest = v.add(i);\n             }\n             // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n         }\n@@ -302,7 +304,7 @@ where\n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n             start_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);\n-            end_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);\n+            end_l = start_l;\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -328,7 +330,7 @@ where\n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n             start_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);\n-            end_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);\n+            end_r = start_r;\n             let mut elem = r;\n \n             for i in 0..block_r {\n@@ -579,7 +581,8 @@ where\n \n             // Swap the found pair of out-of-order elements.\n             r -= 1;\n-            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));\n+            let ptr = v.as_mut_ptr();\n+            ptr::swap(ptr.add(l), ptr.add(r));\n             l += 1;\n         }\n     }"}]}