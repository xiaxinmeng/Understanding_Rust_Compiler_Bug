{"sha": "2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "node_id": "C_kwDOAAsO6NoAKDJhNWE0ZjA3Y2YzNDg5NWNmNmQzYzZmODg0MzE2OWUzZDZkOWM0NmQ", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T07:51:30Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:19Z"}, "message": "Refactor ZS array detection again and this one seems great \ud83d\udc4d", "tree": {"sha": "71082a8ce03ab5e51390d9156b84764f7ae0228f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71082a8ce03ab5e51390d9156b84764f7ae0228f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "html_url": "https://github.com/rust-lang/rust/commit/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "html_url": "https://github.com/rust-lang/rust/commit/c5d3167a23e7f1f6515a28ff15a6698b6712ae54"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "d68ad90170443dd9492df0ed945d952ac7a3cac4", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=2a5a4f07cf34895cf6d3c6f8843169e3d6d9c46d", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{miri_to_const, Constant};\n+use clippy_utils::consts::{constant, miri_to_const, ConstEvalLateContext, Constant};\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::Attribute;\n use rustc_hir::{Item, ItemKind, VariantData};\n@@ -38,9 +38,11 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        dbg!(item.ident);\n         if is_struct_with_trailing_zero_sized_array(cx, item) {\n             // NOTE: This is to include attributes on the definition when we print the lint. If the convention\n-            // is to not do that with struct definitions (I'm not sure), then this isn't necessary.\n+            // is to not do that with struct definitions (I'm not sure), then this isn't necessary. (note: if\n+            // you don't get rid of this, change `has_repr_attr` to `includes_repr_attr`).\n             let attrs = cx.tcx.get_attrs(item.def_id.to_def_id());\n             let first_attr = attrs.iter().min_by_key(|attr| attr.span.lo());\n             let lint_span = if let Some(first_attr) = first_attr {\n@@ -70,21 +72,11 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n             if let Some(last_field) = field_defs.last() {\n                 if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n                     // Then check if that that array zero-sized\n-\n-                    // This is pretty much copied from `enum_clike.rs` and I don't fully understand it, so let me know\n-                    // if there's a better way. I tried `Const::from_anon_const` but it didn't fold in the values\n-                    // on the `ZeroSizedWithConst` and `ZeroSizedWithConstFunction` tests.\n-\n-                    // This line in particular seems convoluted.\n-                    let length_did = cx.tcx.hir().body_owner_def_id(length.body).to_def_id();\n-                    let length_ty = cx.tcx.type_of(length_did);\n-                    let length = cx\n-                        .tcx\n-                        .const_eval_poly(length_did)\n-                        .ok()\n-                        .map(|val| Const::from_value(cx.tcx, val, length_ty))\n-                        .and_then(miri_to_const);\n-                    if let Some(Constant::Int(length)) = length {\n+                    let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n+                    let length = Const::from_anon_const(cx.tcx, length_ldid);\n+                    let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+                    // if let Some((Constant::Int(length), _)) = length {\n+                    if let Some(length) = length {\n                         length == 0\n                     } else {\n                         false"}]}