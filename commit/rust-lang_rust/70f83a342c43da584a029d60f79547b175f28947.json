{"sha": "70f83a342c43da584a029d60f79547b175f28947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjgzYTM0MmM0M2RhNTg0YTAyOWQ2MGY3OTU0N2IxNzVmMjg5NDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T09:45:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T09:45:43Z"}, "message": "re-do cargo-miri host/target detection logic to match rustbuild", "tree": {"sha": "1a1663c0a9e1ce1fc4ecad4dbb06960be191d49c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a1663c0a9e1ce1fc4ecad4dbb06960be191d49c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f83a342c43da584a029d60f79547b175f28947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f83a342c43da584a029d60f79547b175f28947", "html_url": "https://github.com/rust-lang/rust/commit/70f83a342c43da584a029d60f79547b175f28947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f83a342c43da584a029d60f79547b175f28947/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f740e9d325f97a82db659279186c780a40b8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f740e9d325f97a82db659279186c780a40b8c3", "html_url": "https://github.com/rust-lang/rust/commit/17f740e9d325f97a82db659279186c780a40b8c3"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "0d73c7cf853a47d2ec4db63466cfad572cf9bc24", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/70f83a342c43da584a029d60f79547b175f28947/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f83a342c43da584a029d60f79547b175f28947/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=70f83a342c43da584a029d60f79547b175f28947", "patch": "@@ -462,6 +462,14 @@ fn in_cargo_miri() {\n             }\n             cmd.arg(arg);\n         }\n+        // We want to always run `cargo` with `--target`. This later helps us detect\n+        // which crates are proc-macro/build-script (host crates) and which crates are\n+        // needed for the program itself.\n+        if get_arg_flag_value(\"--target\").is_none() {\n+            // When no `--target` is given, default to the host.\n+            cmd.arg(\"--target\");\n+            cmd.arg(rustc_version::version_meta().unwrap().host);\n+        }\n \n         // Serialize the remaining args into a special environemt variable.\n         // This will be read by `inside_cargo_rustc` when we go to invoke\n@@ -491,24 +499,21 @@ fn in_cargo_miri() {\n }\n \n fn inside_cargo_rustc() {\n-    /// Determines if we are being invoked (as rustc) to build a runnable\n-    /// executable. We run \"cargo check\", so this should only happen when\n-    /// we are trying to compile a build script or build script dependency,\n-    /// which actually needs to be executed on the host platform.\n+    /// Determines if we are being invoked (as rustc) to build a crate for\n+    /// the \"target\" architecture, in contrast to the \"host\" architecture.\n+    /// Host crates are for build scripts and proc macros and still need to\n+    /// be built like normal; target crates need to be built for or interpreted\n+    /// by Miri.\n     ///\n-    /// Currently, we detect this by checking for \"--emit=link\",\n-    /// which indicates that Cargo instruced rustc to output\n-    /// a native object.\n+    /// Currently, we detect this by checking for \"--target=\", which flag is\n+    /// never set for host crates. This matches what rustc bootstrap does,\n+    /// which hopefully makes it \"reliable enough\".\n     fn is_target_crate() -> bool {\n-        // `--emit` is sometimes missing, e.g. cargo calls rustc for \"--print\".\n-        // That is definitely not a target crate.\n-        // If `--emit` is present, then host crates are built (\"--emit=link,...),\n-        // while the rest is only checked.\n-        get_arg_flag_value(\"--emit\").map_or(false, |emit| !emit.contains(\"link\"))\n+        get_arg_flag_value(\"--target\").is_some()\n     }\n \n     /// Returns whether or not Cargo invoked the wrapper (this binary) to compile\n-    /// the final, target crate (either a test for 'cargo test', or a binary for 'cargo run')\n+    /// the final, binary crate (either a test for 'cargo test', or a binary for 'cargo run')\n     /// Cargo does not give us this information directly, so we need to check\n     /// various command-line flags.\n     fn is_runnable_crate() -> bool {"}]}