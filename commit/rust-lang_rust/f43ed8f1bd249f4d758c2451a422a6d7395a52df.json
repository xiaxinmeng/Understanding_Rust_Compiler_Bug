{"sha": "f43ed8f1bd249f4d758c2451a422a6d7395a52df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0M2VkOGYxYmQyNDlmNGQ3NThjMjQ1MWE0MjJhNmQ3Mzk1YTUyZGY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-08T12:03:00Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Fix up ast types after literal changes.", "tree": {"sha": "70278a67220445bc4a83bc78bc3757ba43539939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70278a67220445bc4a83bc78bc3757ba43539939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43ed8f1bd249f4d758c2451a422a6d7395a52df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43ed8f1bd249f4d758c2451a422a6d7395a52df", "html_url": "https://github.com/rust-lang/rust/commit/f43ed8f1bd249f4d758c2451a422a6d7395a52df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43ed8f1bd249f4d758c2451a422a6d7395a52df/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134585bb069a6f8c51aa5b60f42ed00217605df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/134585bb069a6f8c51aa5b60f42ed00217605df6", "html_url": "https://github.com/rust-lang/rust/commit/134585bb069a6f8c51aa5b60f42ed00217605df6"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "ee33d9dcd5f8df82aab0e2fd720ecc85deba90d6", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f43ed8f1bd249f4d758c2451a422a6d7395a52df/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43ed8f1bd249f4d758c2451a422a6d7395a52df/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=f43ed8f1bd249f4d758c2451a422a6d7395a52df", "patch": "@@ -239,22 +239,26 @@ fn get_basic_type_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n     }\n     let (name, (size, align), encoding) = alt ty.node {\n       ast::ty_bool. {(\"bool\", size_and_align_of::<bool>(), DW_ATE_boolean)}\n-      ast::ty_int. {(\"int\", size_and_align_of::<int>(), DW_ATE_signed)}\n-      ast::ty_uint. {(\"uint\", size_and_align_of::<uint>(), DW_ATE_unsigned)}\n-      ast::ty_float. {(\"float\", size_and_align_of::<float>(), DW_ATE_float)}\n-      ast::ty_machine(m) { alt m {\n+      ast::ty_int(m) { alt m {\n+        ast::ty_char. {(\"char\", size_and_align_of::<char>(), DW_ATE_unsigned)}\n+        ast::ty_i. {(\"int\", size_and_align_of::<int>(), DW_ATE_signed)}\n         ast::ty_i8. {(\"i8\", size_and_align_of::<i8>(), DW_ATE_signed_char)}\n         ast::ty_i16. {(\"i16\", size_and_align_of::<i16>(), DW_ATE_signed)}\n         ast::ty_i32. {(\"i32\", size_and_align_of::<i32>(), DW_ATE_signed)}\n         ast::ty_i64. {(\"i64\", size_and_align_of::<i64>(), DW_ATE_signed)}\n+      }}\n+      ast::ty_uint(m) { alt m {\n+        ast::ty_u. {(\"uint\", size_and_align_of::<uint>(), DW_ATE_unsigned)}\n         ast::ty_u8. {(\"u8\", size_and_align_of::<u8>(), DW_ATE_unsigned_char)}\n         ast::ty_u16. {(\"u16\", size_and_align_of::<u16>(), DW_ATE_unsigned)}\n         ast::ty_u32. {(\"u32\", size_and_align_of::<u32>(), DW_ATE_unsigned)}\n         ast::ty_u64. {(\"u64\", size_and_align_of::<u64>(), DW_ATE_unsigned)}\n+      }}\n+      ast::ty_float(m) { alt m {\n+        ast::ty_f. {(\"float\", size_and_align_of::<float>(), DW_ATE_float)}\n         ast::ty_f32. {(\"f32\", size_and_align_of::<f32>(), DW_ATE_float)}\n         ast::ty_f64. {(\"f64\", size_and_align_of::<f64>(), DW_ATE_float)}\n-      } }\n-      ast::ty_char. {(\"char\", size_and_align_of::<char>(), DW_ATE_unsigned)}\n+      }}\n     };\n     let fname = filename_from_span(cx, ty.span);\n     let file_node = get_file_metadata(cx, fname);\n@@ -327,7 +331,7 @@ fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n     //let cu_node = get_compile_unit_metadata(cx, fname);\n     let tcx = ccx_tcx(cx);\n     let uint_t = ty::mk_uint(tcx);\n-    let uint_ty = @{node: ast::ty_uint, span: span};\n+    let uint_ty = @{node: ast::ty_uint(ast::ty_u), span: span};\n     let refcount_type = get_basic_type_metadata(cx, uint_t, uint_ty);\n     /*let refcount_ptr_type = get_pointer_type_metadata(cx,\n                                                       ty::mk_imm_uniq(tcx, uint_t),\n@@ -389,11 +393,9 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n           ty::ty_nil. { ast::ty_nil }\n           ty::ty_bot. { ast::ty_bot }\n           ty::ty_bool. { ast::ty_bool }\n-          ty::ty_int. { ast::ty_int }\n-          ty::ty_float. { ast::ty_float }\n-          ty::ty_uint. { ast::ty_uint }\n-          ty::ty_machine(mt) { ast::ty_machine(mt) }\n-          ty::ty_char. { ast::ty_char }\n+          ty::ty_int(t) { ast::ty_int(t) }\n+          ty::ty_float(t) { ast::ty_float(t) }\n+          ty::ty_uint(t) { ast::ty_uint(t) }\n           ty::ty_box(mt) { ast::ty_box({ty: t_to_ty(cx, mt.ty, span),\n                                         mut: mt.mut}) }\n           ty::ty_uniq(mt) { ast::ty_uniq({ty: t_to_ty(cx, mt.ty, span),"}]}