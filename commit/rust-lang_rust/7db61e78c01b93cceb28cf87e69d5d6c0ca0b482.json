{"sha": "7db61e78c01b93cceb28cf87e69d5d6c0ca0b482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjYxZTc4YzAxYjkzY2NlYjI4Y2Y4N2U2OWQ1ZDZjMGNhMGI0ODI=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-06-28T12:21:48Z"}, "committer": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-22T08:32:40Z"}, "message": "Bless output of test borrowck/two-phase-surprise-no-conflict.rs for Polonius", "tree": {"sha": "20c0c068b1f62e627c9dd6d0e6aa58083342c9a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c0c068b1f62e627c9dd6d0e6aa58083342c9a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482", "html_url": "https://github.com/rust-lang/rust/commit/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe52928a3dd9a69ebd6422a23aba879871026c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe52928a3dd9a69ebd6422a23aba879871026c4", "html_url": "https://github.com/rust-lang/rust/commit/6fe52928a3dd9a69ebd6422a23aba879871026c4"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "7b246426a23334c8e6fbf0b74bf38ed56bc7f0bc", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.polonius.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7db61e78c01b93cceb28cf87e69d5d6c0ca0b482/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr?ref=7db61e78c01b93cceb28cf87e69d5d6c0ca0b482", "patch": "@@ -0,0 +1,148 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:21:23\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                           ---------- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |                       ^^^^^^^ use of borrowed `*self`\n+LL |\n+LL |         _mut_borrow;\n+   |         ----------- borrow later used here\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:57:17\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n+   |                 |    |          |\n+   |                 |    |          immutable borrow occurs here\n+   |                 |    immutable borrow later used by call\n+   |                 mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:119:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:122:54\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:125:53\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:128:44\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:138:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                        |\n+   |     |   |                                        immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:141:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                       |\n+   |     |   |                                       immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:144:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^-------------^^\n+   |     |   |                              |\n+   |     |   |                              immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                            |\n+   |     |   |                                            first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:54\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                           |\n+   |     |   |                                           first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:53\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n+   |     |   |                                  |\n+   |     |   |                                  first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:44\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error: aborting due to 15 previous errors\n+\n+Some errors have detailed explanations: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}]}