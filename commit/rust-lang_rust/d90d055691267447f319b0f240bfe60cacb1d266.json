{"sha": "d90d055691267447f319b0f240bfe60cacb1d266", "node_id": "C_kwDOAAsO6NoAKGQ5MGQwNTU2OTEyNjc0NDdmMzE5YjBmMjQwYmZlNjBjYWNiMWQyNjY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-07T07:51:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T16:33:32Z"}, "message": "Allow transmutes between the same types after erasing lifetimes", "tree": {"sha": "d83c81bf592d9d74997dfb97eaf1995292fc14f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83c81bf592d9d74997dfb97eaf1995292fc14f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d90d055691267447f319b0f240bfe60cacb1d266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d90d055691267447f319b0f240bfe60cacb1d266", "html_url": "https://github.com/rust-lang/rust/commit/d90d055691267447f319b0f240bfe60cacb1d266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d90d055691267447f319b0f240bfe60cacb1d266/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58546803885164d488185fb9cb9fb04fcbe64e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/58546803885164d488185fb9cb9fb04fcbe64e30", "html_url": "https://github.com/rust-lang/rust/commit/58546803885164d488185fb9cb9fb04fcbe64e30"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "25228f424cd0793688b3ba19671c624aed959ca5", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d90d055691267447f319b0f240bfe60cacb1d266/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90d055691267447f319b0f240bfe60cacb1d266/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=d90d055691267447f319b0f240bfe60cacb1d266", "patch": "@@ -44,13 +44,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_transmute(&self, from: Ty<'tcx>, to: Ty<'tcx>, hir_id: HirId) {\n         let tcx = self.tcx;\n         let span = tcx.hir().span(hir_id);\n-        let convert = |ty: Ty<'tcx>| {\n+        let normalize = |ty| {\n             let ty = self.resolve_vars_if_possible(ty);\n-            let ty = tcx.normalize_erasing_regions(self.param_env, ty);\n-            (SizeSkeleton::compute(ty, tcx, self.param_env), ty)\n+            self.tcx.normalize_erasing_regions(self.param_env, ty)\n         };\n-        let (sk_from, from) = convert(from);\n-        let (sk_to, to) = convert(to);\n+        let from = normalize(from);\n+        let to = normalize(to);\n+        trace!(?from, ?to);\n+\n+        // Transmutes that are only changing lifetimes are always ok.\n+        if from == to {\n+            return;\n+        }\n+\n+        let skel = |ty| SizeSkeleton::compute(ty, tcx, self.param_env);\n+        let sk_from = skel(from);\n+        let sk_to = skel(to);\n+        trace!(?sk_from, ?sk_to);\n \n         // Check for same size using the skeletons.\n         if let (Ok(sk_from), Ok(sk_to)) = (sk_from, sk_to) {"}, {"sha": "d1b593b7f0a71c27696978b5ee0a76922e73c6dd", "filename": "src/test/ui/transmute-equal-assoc-types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.rs?ref=d90d055691267447f319b0f240bfe60cacb1d266", "patch": "@@ -1,9 +1,11 @@\n+// check-pass\n+\n trait Foo {\n     type Bar;\n }\n \n unsafe fn noop<F: Foo>(foo: F::Bar) -> F::Bar {\n-    ::std::mem::transmute(foo) //~ ERROR cannot transmute between types of different sizes\n+    ::std::mem::transmute(foo)\n }\n \n fn main() {}"}, {"sha": "ce7657f9640b49ac86732f75a0cc0360f6896e8a", "filename": "src/test/ui/transmute-equal-assoc-types.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-equal-assoc-types.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,11 +0,0 @@\n-error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-equal-assoc-types.rs:6:5\n-   |\n-LL |     ::std::mem::transmute(foo)\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `<F as Foo>::Bar` does not have a fixed size\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0512`."}, {"sha": "943191551396de4afc1491f8567317676d6a5798", "filename": "src/test/ui/transmute/lifetimes.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Flifetimes.rs?ref=d90d055691267447f319b0f240bfe60cacb1d266", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+use std::ptr::NonNull;\n+\n+struct Foo<'a, T: ?Sized>(&'a (), NonNull<T>);\n+\n+fn foo<'a, 'b, T: ?Sized>(x: Foo<'a, T>) -> Foo<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+struct Bar<'a, T: ?Sized>(&'a T);\n+\n+fn bar<'a, 'b, T: ?Sized>(x: Bar<'a, T>) -> Bar<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+struct Boo<'a, T: ?Sized>(&'a T, u32);\n+\n+fn boo<'a, 'b, T: ?Sized>(x: Boo<'a, T>) -> Boo<'b, T> {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+fn main() {}"}, {"sha": "da4a0a660c8cbc20c2fe8d0597078b57e24b6ca3", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=d90d055691267447f319b0f240bfe60cacb1d266", "patch": "@@ -10,7 +10,7 @@ pub trait TypeConstructor<'a> {\n unsafe fn transmute_lifetime<'a, 'b, C>(x: <C as TypeConstructor<'a>>::T)\n                                         -> <C as TypeConstructor<'b>>::T\n where for<'z> C: TypeConstructor<'z> {\n-    transmute(x) //~ ERROR cannot transmute between types of different sizes\n+    transmute(x)\n }\n \n unsafe fn sizes() {"}, {"sha": "6cb0d7f67e0853a76a1558d6d27ee72cd8b83c1d", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d90d055691267447f319b0f240bfe60cacb1d266/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=d90d055691267447f319b0f240bfe60cacb1d266", "patch": "@@ -1,11 +1,3 @@\n-error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:13:5\n-   |\n-LL |     transmute(x)\n-   |     ^^^^^^^^^\n-   |\n-   = note: `<C as TypeConstructor<'_>>::T` does not have a fixed size\n-\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/main.rs:17:17\n    |\n@@ -33,6 +25,6 @@ LL |     let x: Foo = transmute(10);\n    = note: source type: `i32` (32 bits)\n    = note: target type: `Foo` (0 bits)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0512`."}]}