{"sha": "842cfb03111eacffeb483dc7bd8654fea15cbd9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MmNmYjAzMTExZWFjZmZlYjQ4M2RjN2JkODY1NGZlYTE1Y2JkOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T20:47:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-07T20:47:14Z"}, "message": "Auto merge of #4757 - evanjs:issue/4748, r=phansch\n\nFix Deprecated lints don't expand\n\n### Move doc comments inside of declare_deprecated_lint macros so that they are picked up by lintlib.py\n\n### fixes #4748\n\nUnable to `cargo test` locally (I'm on NixOS, and keep getting errors that are similar to those #4714 might solve) but I have verified that all deprecated lints can now be expanded like other lints.\n\n![2019-10-30_21:06:28](https://user-images.githubusercontent.com/1847524/67910501-5815de00-fb59-11e9-9fa2-91fe6a8b9bb9.png)\n\nchangelog: Show deprecated lints in lint documentation again", "tree": {"sha": "4f6922b7b5da26e4bb0cc97443119c6efbf8313a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6922b7b5da26e4bb0cc97443119c6efbf8313a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842cfb03111eacffeb483dc7bd8654fea15cbd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842cfb03111eacffeb483dc7bd8654fea15cbd9e", "html_url": "https://github.com/rust-lang/rust/commit/842cfb03111eacffeb483dc7bd8654fea15cbd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842cfb03111eacffeb483dc7bd8654fea15cbd9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7531a08eed84a86e96d1cffdd002654507819873", "url": "https://api.github.com/repos/rust-lang/rust/commits/7531a08eed84a86e96d1cffdd002654507819873", "html_url": "https://github.com/rust-lang/rust/commit/7531a08eed84a86e96d1cffdd002654507819873"}, {"sha": "8ca9c237a069dc12db8073923ec0a4a83d0a1efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca9c237a069dc12db8073923ec0a4a83d0a1efc", "html_url": "https://github.com/rust-lang/rust/commit/8ca9c237a069dc12db8073923ec0a4a83d0a1efc"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "f399b4a78c6d4eaea851f836f7d45d164a9627ab", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 61, "deletions": 62, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/842cfb03111eacffeb483dc7bd8654fea15cbd9e/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842cfb03111eacffeb483dc7bd8654fea15cbd9e/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=842cfb03111eacffeb483dc7bd8654fea15cbd9e", "patch": "@@ -4,129 +4,128 @@ macro_rules! declare_deprecated_lint {\n     }\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n-/// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n+    /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n     pub SHOULD_ASSERT_EQ,\n     \"`assert!()` will be more flexible with RFC 2011\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n-/// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n+    /// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n     pub EXTEND_FROM_SLICE,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n-/// an infinite iterator, which is better expressed by `iter::repeat`,\n-/// but the method has been removed for `Iterator::step_by` which panics\n-/// if given a zero\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** `Range::step_by(0)` used to be linted since it's\n+    /// an infinite iterator, which is better expressed by `iter::repeat`,\n+    /// but the method has been removed for `Iterator::step_by` which panics\n+    /// if given a zero\n     pub RANGE_STEP_BY_ZERO,\n     \"`iterator.step_by(0)` panics nowadays\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_slice` has now been stabilized.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_slice` has now been stabilized.\n     pub UNSTABLE_AS_SLICE,\n     \"`Vec::as_slice` has been stabilized in 1.7\"\n }\n \n-\n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n-/// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n+    /// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n     pub UNSTABLE_AS_MUT_SLICE,\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `to_owned`.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `to_owned`.\n     pub STR_TO_STRING,\n     \"using `str::to_string` is common even today and specialization will likely happen soon\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-/// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n-/// specialized to be as efficient as `clone`.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+    /// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n+    /// specialized to be as efficient as `clone`.\n     pub STRING_TO_STRING,\n     \"using `string::to_string` is common even today and specialization will likely happen soon\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n-/// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n-/// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n-/// cast_ptr_alignment and transmute_ptr_to_ptr.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n+    /// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n+    /// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n+    /// cast_ptr_alignment and transmute_ptr_to_ptr.\n     pub MISALIGNED_TRANSMUTE,\n     \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint is too subjective, not having a good reason for being in clippy.\n-/// Additionally, compound assignment operators may be overloaded separately from their non-assigning\n-/// counterparts, so this lint may suggest a change in behavior or the code may not compile.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint is too subjective, not having a good reason for being in clippy.\n+    /// Additionally, compound assignment operators may be overloaded separately from their non-assigning\n+    /// counterparts, so this lint may suggest a change in behavior or the code may not compile.\n     pub ASSIGN_OPS,\n     \"using compound assignment operators (e.g., `+=`) is harmless\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** The original rule will only lint for `if let`. After\n-/// making it support to lint `match`, naming as `if let` is not suitable for it.\n-/// So, this lint is deprecated.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The original rule will only lint for `if let`. After\n+    /// making it support to lint `match`, naming as `if let` is not suitable for it.\n+    /// So, this lint is deprecated.\n     pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n     \"this lint has been changed to redundant_pattern_matching\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n-/// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n-/// replacement has very different performance characteristics so the lint is\n-/// deprecated.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint used to suggest replacing `let mut vec =\n+    /// Vec::with_capacity(n); vec.set_len(n);` with `let vec = vec![0; n];`. The\n+    /// replacement has very different performance characteristics so the lint is\n+    /// deprecated.\n     pub UNSAFE_VECTOR_INITIALIZATION,\n     \"the replacement suggested by this lint had substantially different behavior\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by the warn-by-default\n-/// `invalid_value` rustc lint.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by the warn-by-default\n+    /// `invalid_value` rustc lint.\n     pub INVALID_REF,\n     \"superseded by rustc lint `invalid_value`\"\n }\n \n-/// **What it does:** Nothing. This lint has been deprecated.\n-///\n-/// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n     pub UNUSED_COLLECT,\n     \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n }"}]}