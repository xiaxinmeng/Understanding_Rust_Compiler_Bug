{"sha": "bc497a626284d4323d6319ae93fc6964af19a99f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNDk3YTYyNjI4NGQ0MzIzZDYzMTlhZTkzZmM2OTY0YWYxOWE5OWY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2017-01-22T15:32:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-22T15:32:37Z"}, "message": "Merge pull request #1465 from Manishearth/1464\n\nUse `span_suggestion` in the `precedence` lint", "tree": {"sha": "11c191f80bf7ba4a34cfcfa4a74a76ae30aa63c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c191f80bf7ba4a34cfcfa4a74a76ae30aa63c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc497a626284d4323d6319ae93fc6964af19a99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc497a626284d4323d6319ae93fc6964af19a99f", "html_url": "https://github.com/rust-lang/rust/commit/bc497a626284d4323d6319ae93fc6964af19a99f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc497a626284d4323d6319ae93fc6964af19a99f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276ad246f146297ee2446cfe0bf305665a996902", "url": "https://api.github.com/repos/rust-lang/rust/commits/276ad246f146297ee2446cfe0bf305665a996902", "html_url": "https://github.com/rust-lang/rust/commit/276ad246f146297ee2446cfe0bf305665a996902"}, {"sha": "b784f0d7368c08d8c84c23abce9d1e265e9fbef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b784f0d7368c08d8c84c23abce9d1e265e9fbef8", "html_url": "https://github.com/rust-lang/rust/commit/b784f0d7368c08d8c84c23abce9d1e265e9fbef8"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "0dff1495dfb22830dcf171c308abcebfe1f62e29", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bc497a626284d4323d6319ae93fc6964af19a99f/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc497a626284d4323d6319ae93fc6964af19a99f/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=bc497a626284d4323d6319ae93fc6964af19a99f", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Spanned;\n-use utils::{span_lint, snippet};\n+use utils::{span_lint_and_then, snippet};\n \n /// **What it does:** Checks for operations where precedence may be unclear\n /// and suggests to add parentheses. Currently it catches the following:\n@@ -36,41 +36,39 @@ impl LintPass for Precedence {\n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Binary(Spanned { node: op, .. }, ref left, ref right) = expr.node {\n+            let span_sugg =\n+                |expr: &Expr, sugg| {\n+                    span_lint_and_then(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\", |db| {\n+                        db.span_suggestion(expr.span, \"consider parenthesizing your expression\", sugg);\n+                    });\n+                };\n+\n             if !is_bit_op(op) {\n                 return;\n             }\n             match (is_arith_expr(left), is_arith_expr(right)) {\n                 (true, true) => {\n-                    span_lint(cx,\n-                              PRECEDENCE,\n-                              expr.span,\n-                              &format!(\"operator precedence can trip the unwary. Consider parenthesizing your \\\n-                                        expression:`({}) {} ({})`\",\n+                    let sugg = format!(\"({}) {} ({})\",\n                                        snippet(cx, left.span, \"..\"),\n                                        op.to_string(),\n-                                       snippet(cx, right.span, \"..\")));\n+                                       snippet(cx, right.span, \"..\"));\n+                    span_sugg(expr, sugg);\n                 },\n                 (true, false) => {\n-                    span_lint(cx,\n-                              PRECEDENCE,\n-                              expr.span,\n-                              &format!(\"operator precedence can trip the unwary. Consider parenthesizing your \\\n-                                        expression:`({}) {} {}`\",\n+                    let sugg = format!(\"({}) {} {}\",\n                                        snippet(cx, left.span, \"..\"),\n                                        op.to_string(),\n-                                       snippet(cx, right.span, \"..\")));\n+                                       snippet(cx, right.span, \"..\"));\n+                    span_sugg(expr, sugg);\n                 },\n                 (false, true) => {\n-                    span_lint(cx,\n-                              PRECEDENCE,\n-                              expr.span,\n-                              &format!(\"operator precedence can trip the unwary. Consider parenthesizing your \\\n-                                        expression:`{} {} ({})`\",\n+                    let sugg = format!(\"{} {} ({})\",\n                                        snippet(cx, left.span, \"..\"),\n                                        op.to_string(),\n-                                       snippet(cx, right.span, \"..\")));\n+                                       snippet(cx, right.span, \"..\"));\n+                    span_sugg(expr, sugg);\n                 },\n-                _ => (),\n+                (false, false) => (),\n             }\n         }\n \n@@ -82,12 +80,15 @@ impl EarlyLintPass for Precedence {\n                             LitKind::Int(..) |\n                             LitKind::Float(..) |\n                             LitKind::FloatUnsuffixed(..) => {\n-                                span_lint(cx,\n-                                          PRECEDENCE,\n-                                          expr.span,\n-                                          &format!(\"unary minus has lower precedence than method call. Consider \\\n-                                                    adding parentheses to clarify your intent: -({})\",\n-                                                   snippet(cx, rhs.span, \"..\")));\n+                                span_lint_and_then(cx,\n+                                                   PRECEDENCE,\n+                                                   expr.span,\n+                                                   \"unary minus has lower precedence than method call\",\n+                                                   |db| {\n+                                    db.span_suggestion(expr.span,\n+                                                       \"consider adding parentheses to clarify your intent\",\n+                                                       format!(\"-({})\", snippet(cx, rhs.span, \"..\")));\n+                                });\n                             },\n                             _ => (),\n                         }"}, {"sha": "28cc9e643c040bfef6a154aba0a26458ee5a0cdd", "filename": "tests/compile-fail/precedence.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bc497a626284d4323d6319ae93fc6964af19a99f/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc497a626284d4323d6319ae93fc6964af19a99f/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=bc497a626284d4323d6319ae93fc6964af19a99f", "patch": "@@ -5,16 +5,34 @@\n #[allow(identity_op)]\n #[allow(eq_op)]\n fn main() {\n-    format!(\"{} vs. {}\", 1 << 2 + 3, (1 << 2) + 3); //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 1 + 2 << 3, 1 + (2 << 3)); //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 4 >> 1 + 1, (4 >> 1) + 1); //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 1 + 3 >> 2, 1 + (3 >> 2)); //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 1 ^ 1 - 1, (1 ^ 1) - 1);   //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 3 | 2 - 1, (3 | 2) - 1);   //~ERROR operator precedence can trip\n-    format!(\"{} vs. {}\", 3 & 5 - 2, (3 & 5) - 2);   //~ERROR operator precedence can trip\n+    1 << 2 + 3;\n+    //~^ ERROR operator precedence can trip\n+    //~| SUGGESTION 1 << (2 + 3)\n+    1 + 2 << 3;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION (1 + 2) << 3\n+    4 >> 1 + 1;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION 4 >> (1 + 1)\n+    1 + 3 >> 2;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION (1 + 3) >> 2\n+    1 ^ 1 - 1;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION 1 ^ (1 - 1)\n+    3 | 2 - 1;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION 3 | (2 - 1)\n+    3 & 5 - 2;\n+    //~^ERROR operator precedence can trip\n+    //~| SUGGESTION 3 & (5 - 2)\n \n-    format!(\"{} vs. {}\", -1i32.abs(), (-1i32).abs()); //~ERROR unary minus has lower precedence\n-    format!(\"{} vs. {}\", -1f32.abs(), (-1f32).abs()); //~ERROR unary minus has lower precedence\n+    -1i32.abs();\n+    //~^ERROR unary minus has lower precedence\n+    //~| SUGGESTION -(1i32.abs())\n+    -1f32.abs();\n+    //~^ERROR unary minus has lower precedence\n+    //~| SUGGESTION -(1f32.abs())\n \n     // These should not trigger an error\n     let _ = (-1i32).abs();"}]}