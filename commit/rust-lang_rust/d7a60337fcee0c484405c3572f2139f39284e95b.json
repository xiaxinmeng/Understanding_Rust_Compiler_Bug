{"sha": "d7a60337fcee0c484405c3572f2139f39284e95b", "node_id": "C_kwDOAAsO6NoAKGQ3YTYwMzM3ZmNlZTBjNDg0NDA1YzM1NzJmMjEzOWYzOTI4NGU5NWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T20:23:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T20:23:06Z"}, "message": "Rollup merge of #91907 - lcnr:const-arg-infer, r=BoxyUwU\n\nAllow `_` as the length of array types and repeat expressions\n\nr? `@BoxyUwU` cc `@varkor`", "tree": {"sha": "d4df3510fc63313d02ca508777eab2bd6b3fe8f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4df3510fc63313d02ca508777eab2bd6b3fe8f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a60337fcee0c484405c3572f2139f39284e95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a60337fcee0c484405c3572f2139f39284e95b", "html_url": "https://github.com/rust-lang/rust/commit/d7a60337fcee0c484405c3572f2139f39284e95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a60337fcee0c484405c3572f2139f39284e95b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69750711d3742e4f2c418d5459d32a5a12ef4bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/69750711d3742e4f2c418d5459d32a5a12ef4bfc", "html_url": "https://github.com/rust-lang/rust/commit/69750711d3742e4f2c418d5459d32a5a12ef4bfc"}, {"sha": "d5cbae90f9e3f323f18d9234b3e55b98c52fed52", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5cbae90f9e3f323f18d9234b3e55b98c52fed52", "html_url": "https://github.com/rust-lang/rust/commit/d5cbae90f9e3f323f18d9234b3e55b98c52fed52"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "af36f7267004d3c71db87e595e016f981f7ec942", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -59,6 +59,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n         if let ItemKind::Struct(data, _) = &item.kind;\n         if let Some(last_field) = data.fields().last();\n         if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n+        if let rustc_hir::ArrayLen::Body(length) = length;\n \n         // Then check if that that array zero-sized\n         let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);"}, {"sha": "9b06ca4e824932c7492d25f9e8421c231c9b6e73", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -567,7 +567,14 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 bind!(self, value, length);\n                 kind!(\"Repeat({value}, {length})\");\n                 self.expr(value);\n-                self.body(field!(length.body));\n+                match length.value {\n+                    ArrayLen::Infer(..) => out!(\"if let ArrayLen::Infer(..) = length;\"),\n+                    ArrayLen::Body(anon_const) => {\n+                        bind!(self, anon_const);\n+                        out!(\"if let ArrayLen::Body({anon_const}) = {length};\");\n+                        self.body(field!(anon_const.body));\n+                    }\n+                }\n             },\n             ExprKind::Err => kind!(\"Err\"),\n             ExprKind::DropTemps(expr) => {"}, {"sha": "c96766e56784f2b4fc3fce17403dea3153fc6266", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -334,12 +334,17 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             println!(\"{}anon_const:\", ind);\n             print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n         },\n-        hir::ExprKind::Repeat(val, ref anon_const) => {\n+        hir::ExprKind::Repeat(val, length) => {\n             println!(\"{}Repeat\", ind);\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+            match length {\n+                hir::ArrayLen::Infer(_, _) => println!(\"{}repeat count: _\", ind),\n+                hir::ArrayLen::Body(anon_const) => {\n+                    print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1)\n+                }\n+            }\n         },\n         hir::ExprKind::Err => {\n             println!(\"{}Err\", ind);"}, {"sha": "ac2b1a0259e3e8546d731b525f1f40e2138aaf80", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirIdMap;\n use rustc_hir::{\n     BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n     InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n-    StmtKind, Ty, TyKind, TypeBinding,\n+    StmtKind, Ty, TyKind, TypeBinding, ArrayLen\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -170,6 +170,14 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n+            match (left, right) {\n+                (ArrayLen::Infer(..), ArrayLen::Infer(..)) => true,\n+                (ArrayLen::Body(l_ct), ArrayLen::Body(r_ct)) => self.eq_body(l_ct.body, r_ct.body),\n+                (_, _) => false,\n+            }\n+    }\n+\n     pub fn eq_body(&mut self, left: BodyId, right: BodyId) -> bool {\n         let cx = self.inner.cx;\n         let eval_const = |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n@@ -194,8 +202,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n \n         let is_eq = match (\n-            &reduce_exprkind(self.inner.cx, &left.kind),\n-            &reduce_exprkind(self.inner.cx, &right.kind),\n+            reduce_exprkind(self.inner.cx, &left.kind),\n+            reduce_exprkind(self.inner.cx, &right.kind),\n         ) {\n             (&ExprKind::AddrOf(lb, l_mut, le), &ExprKind::AddrOf(rb, r_mut, re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n@@ -232,7 +240,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             },\n             (&ExprKind::Index(la, li), &ExprKind::Index(ra, ri)) => self.eq_expr(la, ra) && self.eq_expr(li, ri),\n             (&ExprKind::If(lc, lt, ref le), &ExprKind::If(rc, rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+                self.eq_expr(lc, rc) && self.eq_expr(lt, rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Let(l), &ExprKind::Let(r)) => {\n                 self.eq_pat(l.pat, r.pat) && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && self.eq_expr(l.init, r.init)\n@@ -253,8 +261,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n                 self.inner.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprKind::Repeat(le, ref ll_id), &ExprKind::Repeat(re, ref rl_id)) => {\n-                self.eq_expr(le, re) && self.eq_body(ll_id.body, rl_id.body)\n+            (&ExprKind::Repeat(le, ll), &ExprKind::Repeat(re, rl)) => {\n+                self.eq_expr(le, re) && self.eq_array_length(ll, rl)\n             },\n             (&ExprKind::Ret(ref l), &ExprKind::Ret(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprKind::Path(ref l), &ExprKind::Path(ref r)) => self.eq_qpath(l, r),\n@@ -391,8 +399,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n     fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyKind::Array(lt, ref ll_id), &TyKind::Array(rt, ref rl_id)) => {\n-                self.eq_ty(lt, rt) && self.eq_body(ll_id.body, rl_id.body)\n+            (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => {\n+                self.eq_ty(lt, rt) && self.eq_array_length(ll, rl)\n             },\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n                 l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n@@ -714,9 +722,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             ExprKind::ConstBlock(ref l_id) => {\n                 self.hash_body(l_id.body);\n             },\n-            ExprKind::Repeat(e, ref l_id) => {\n+            ExprKind::Repeat(e, len) => {\n                 self.hash_expr(e);\n-                self.hash_body(l_id.body);\n+                self.hash_array_length(len);\n             },\n             ExprKind::Ret(ref e) => {\n                 if let Some(e) = *e {\n@@ -906,9 +914,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n-            TyKind::Array(ty, anon_const) => {\n+            &TyKind::Array(ty, len) => {\n                 self.hash_ty(ty);\n-                self.hash_body(anon_const.body);\n+                self.hash_array_length(len);\n             },\n             TyKind::Ptr(ref mut_ty) => {\n                 self.hash_ty(mut_ty.ty);\n@@ -953,6 +961,13 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n+    pub fn hash_array_length(&mut self, length: ArrayLen) {\n+        match length {\n+            ArrayLen::Infer(..) => {}\n+            ArrayLen::Body(anon_const) => self.hash_body(anon_const.body),\n+        }\n+    }\n+\n     pub fn hash_body(&mut self, body_id: BodyId) {\n         // swap out TypeckResults when hashing a body\n         let old_maybe_typeck_results = self.maybe_typeck_results.replace(self.cx.tcx.typeck_body(body_id));"}, {"sha": "9179e67c4f4eec8a323c85e25fb5f3e3c2d4fcaf", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -79,7 +79,7 @@ use rustc_hir::{\n     def, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n     ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n     MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem,\n-    TraitItemKind, TraitRef, TyKind, UnOp,\n+    TraitItemKind, TraitRef, TyKind, UnOp, ArrayLen\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -703,8 +703,9 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             _ => false,\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n-        ExprKind::Repeat(x, y) => if_chain! {\n-            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(y.body).value.kind;\n+        ExprKind::Repeat(x, len) => if_chain! {\n+            if let ArrayLen::Body(len) = len;\n+            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind;\n             if let LitKind::Int(v, _) = const_lit.node;\n             if v <= 32 && is_default_equivalent(cx, x);\n             then {"}, {"sha": "471bbce4f4185e2184ca058174d6cfe5480b8006", "filename": "tests/ui/author/repeat.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a60337fcee0c484405c3572f2139f39284e95b/tests%2Fui%2Fauthor%2Frepeat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d7a60337fcee0c484405c3572f2139f39284e95b/tests%2Fui%2Fauthor%2Frepeat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Frepeat.stdout?ref=d7a60337fcee0c484405c3572f2139f39284e95b", "patch": "@@ -2,7 +2,8 @@ if_chain! {\n     if let ExprKind::Repeat(value, length) = expr.kind;\n     if let ExprKind::Lit(ref lit) = value.kind;\n     if let LitKind::Int(1, LitIntType::Unsigned(UintTy::U8)) = lit.node;\n-    let expr1 = &cx.tcx.hir().body(length.body).value;\n+    if let ArrayLen::Body(anon_const) = length;\n+    let expr1 = &cx.tcx.hir().body(anon_const.body).value;\n     if let ExprKind::Lit(ref lit1) = expr1.kind;\n     if let LitKind::Int(5, LitIntType::Unsuffixed) = lit1.node;\n     then {"}]}