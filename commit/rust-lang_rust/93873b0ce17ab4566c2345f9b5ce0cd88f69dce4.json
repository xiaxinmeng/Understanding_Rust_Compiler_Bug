{"sha": "93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODczYjBjZTE3YWI0NTY2YzIzNDVmOWI1Y2UwY2Q4OGY2OWRjZTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-31T15:08:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-31T15:08:29Z"}, "message": "Merge #9739\n\n9739: generate function assist favors deref cmpt types r=matklad a=mahdi-frms\n\nFixes #9713\r\n\r\nAlthough that's still not relying on sematic info.\n\nCo-authored-by: mahdi-frms <mahdif1380@outlook.com>", "tree": {"sha": "d352989e63fe38986a146144af920303d187d4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d352989e63fe38986a146144af920303d187d4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBWdtCRBK7hj4Ov3rIwAAhCUIAARFa9ysUPN7IwkC+u5iGAYP\njbmVzBp9PgyfhDa7mAvq2u0QS1BRbc5CElSlFCfj3G6sWqncLlwwuC/ybUF6MKcT\n3F7/zAOcQR3I7qp31oqWhpi33DeeuHoXY+aKd+1Vn80dIBmN20qLwc4rDC2MpqXy\nEwJebsOH1tKHFfGrmf/3WRTn6hjJKbo3E4boR2G3l1tuD/CDNzX509d8vls3D/Ko\nK2NBVr1yRjsFsvNKC+KmrdntsjfhXxBUql5NXXokN7kl+Hd8cszLhKL+juA+A7G2\n3QmLrihG1fHUOX7an0+KMjfsC5RfHyvpEs5wzLc/fx+NftV294Q6oe267tpenbc=\n=mefP\n-----END PGP SIGNATURE-----\n", "payload": "tree d352989e63fe38986a146144af920303d187d4e9\nparent a423b307e60809854174105b565497981f5f3680\nparent a5edf6de79126c350e7f1544041079f5f25ceaa8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627744109 +0000\ncommitter GitHub <noreply@github.com> 1627744109 +0000\n\nMerge #9739\n\n9739: generate function assist favors deref cmpt types r=matklad a=mahdi-frms\n\nFixes #9713\r\n\r\nAlthough that's still not relying on sematic info.\n\nCo-authored-by: mahdi-frms <mahdif1380@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "html_url": "https://github.com/rust-lang/rust/commit/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a423b307e60809854174105b565497981f5f3680", "url": "https://api.github.com/repos/rust-lang/rust/commits/a423b307e60809854174105b565497981f5f3680", "html_url": "https://github.com/rust-lang/rust/commit/a423b307e60809854174105b565497981f5f3680"}, {"sha": "a5edf6de79126c350e7f1544041079f5f25ceaa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5edf6de79126c350e7f1544041079f5f25ceaa8", "html_url": "https://github.com/rust-lang/rust/commit/a5edf6de79126c350e7f1544041079f5f25ceaa8"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "d06e3f70942421c27ce5289c9b779395070e441e", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "patch": "@@ -12,6 +12,7 @@ use syntax::{\n };\n \n use crate::{\n+    utils::useless_type_special_case,\n     utils::{render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n@@ -257,7 +258,17 @@ fn fn_args(\n             None => String::from(\"arg\"),\n         });\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n-            Some(ty) => ty,\n+            Some(ty) => {\n+                if ty.len() > 0 && ty.starts_with('&') {\n+                    if let Some((new_ty, _)) = useless_type_special_case(\"\", &ty[1..].to_owned()) {\n+                        new_ty\n+                    } else {\n+                        ty\n+                    }\n+                } else {\n+                    ty\n+                }\n+            }\n             None => String::from(\"()\"),\n         });\n     }"}, {"sha": "739f3e592fff15c76f27d9290a39c4f1a57417bc", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "patch": "@@ -2,6 +2,7 @@ use stdx::{format_to, to_lower_snake_case};\n use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n \n use crate::{\n+    utils::useless_type_special_case,\n     utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n@@ -99,7 +100,7 @@ pub(crate) fn generate_getter_impl(\n             let (ty, body) = if mutable {\n                 (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n             } else {\n-                useless_type_special_case(&field_name.to_string(), &field_ty)\n+                useless_type_special_case(&field_name.to_string(), &field_ty.to_string())\n                     .unwrap_or_else(|| (format!(\"&{}\", field_ty), format!(\"&self.{}\", field_name)))\n             };\n \n@@ -136,29 +137,6 @@ pub(crate) fn generate_getter_impl(\n     )\n }\n \n-fn useless_type_special_case(field_name: &str, field_ty: &ast::Type) -> Option<(String, String)> {\n-    if field_ty.to_string() == \"String\" {\n-        cov_mark::hit!(useless_type_special_case);\n-        return Some((\"&str\".to_string(), format!(\"self.{}.as_str()\", field_name)));\n-    }\n-    if let Some(arg) = ty_ctor(field_ty, \"Vec\") {\n-        return Some((format!(\"&[{}]\", arg), format!(\"self.{}.as_slice()\", field_name)));\n-    }\n-    if let Some(arg) = ty_ctor(field_ty, \"Box\") {\n-        return Some((format!(\"&{}\", arg), format!(\"self.{}.as_ref()\", field_name)));\n-    }\n-    if let Some(arg) = ty_ctor(field_ty, \"Option\") {\n-        return Some((format!(\"Option<&{}>\", arg), format!(\"self.{}.as_ref()\", field_name)));\n-    }\n-    None\n-}\n-\n-// FIXME: This should rely on semantic info.\n-fn ty_ctor(ty: &ast::Type, ctor: &str) -> Option<String> {\n-    let res = ty.to_string().strip_prefix(ctor)?.strip_prefix('<')?.strip_suffix('>')?.to_string();\n-    Some(res)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}, {"sha": "81463745a4618b9e4781ad9d20b8be8a783e21db", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93873b0ce17ab4566c2345f9b5ce0cd88f69dce4/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=93873b0ce17ab4566c2345f9b5ce0cd88f69dce4", "patch": "@@ -493,3 +493,26 @@ pub(crate) fn add_method_to_adt(\n \n     builder.insert(start_offset, buf);\n }\n+\n+pub fn useless_type_special_case(field_name: &str, field_ty: &String) -> Option<(String, String)> {\n+    if field_ty.to_string() == \"String\" {\n+        cov_mark::hit!(useless_type_special_case);\n+        return Some((\"&str\".to_string(), format!(\"self.{}.as_str()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Vec\") {\n+        return Some((format!(\"&[{}]\", arg), format!(\"self.{}.as_slice()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Box\") {\n+        return Some((format!(\"&{}\", arg), format!(\"self.{}.as_ref()\", field_name)));\n+    }\n+    if let Some(arg) = ty_ctor(field_ty, \"Option\") {\n+        return Some((format!(\"Option<&{}>\", arg), format!(\"self.{}.as_ref()\", field_name)));\n+    }\n+    None\n+}\n+\n+// FIXME: This should rely on semantic info.\n+fn ty_ctor(ty: &String, ctor: &str) -> Option<String> {\n+    let res = ty.to_string().strip_prefix(ctor)?.strip_prefix('<')?.strip_suffix('>')?.to_string();\n+    Some(res)\n+}"}]}