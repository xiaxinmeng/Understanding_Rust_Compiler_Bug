{"sha": "4592a9eb3f240cef2994ee76f6975c4946d4d269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTJhOWViM2YyNDBjZWYyOTk0ZWU3NmY2OTc1YzQ5NDZkNGQyNjk=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-12T12:21:51Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-21T03:49:12Z"}, "message": "Cleanup `ConstProp::visit_statement()`", "tree": {"sha": "b4912e76e719e7e97d6e62cec5ae69369ba53ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4912e76e719e7e97d6e62cec5ae69369ba53ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4592a9eb3f240cef2994ee76f6975c4946d4d269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4592a9eb3f240cef2994ee76f6975c4946d4d269", "html_url": "https://github.com/rust-lang/rust/commit/4592a9eb3f240cef2994ee76f6975c4946d4d269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4592a9eb3f240cef2994ee76f6975c4946d4d269/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770b9e3012bd58bdf6046d328dabfd57df163eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/770b9e3012bd58bdf6046d328dabfd57df163eb6", "html_url": "https://github.com/rust-lang/rust/commit/770b9e3012bd58bdf6046d328dabfd57df163eb6"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "4a3a182cea2048c41d7ba62e79ac7825c194cee3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4592a9eb3f240cef2994ee76f6975c4946d4d269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4592a9eb3f240cef2994ee76f6975c4946d4d269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4592a9eb3f240cef2994ee76f6975c4946d4d269", "patch": "@@ -431,7 +431,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         place_layout: TyLayout<'tcx>,\n         source_info: SourceInfo,\n         place: &Place<'tcx>,\n-    ) -> Option<Const<'tcx>> {\n+    ) -> Option<()> {\n         let span = source_info.span;\n \n         let overflow_check = self.tcx.sess.overflow_checks();\n@@ -553,7 +553,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         self.use_ecx(source_info, |this| {\n             trace!(\"calling eval_rvalue_into_place(rvalue = {:?}, place = {:?})\", rvalue, place);\n             this.ecx.eval_rvalue_into_place(rvalue, place)?;\n-            this.ecx.eval_place_to_op(place, Some(place_layout))\n+            Ok(())\n         })\n     }\n \n@@ -717,24 +717,23 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     base: PlaceBase::Local(local),\n                     projection: box [],\n                 } = *place {\n-                    if let Some(value) = self.const_prop(rval,\n-                                                         place_layout,\n-                                                         statement.source_info,\n-                                                         place) {\n-                        trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n+                    let source = statement.source_info;\n+                    if let Some(()) = self.const_prop(rval, place_layout, source, place) {\n                         if self.can_const_prop[local] {\n-                            trace!(\"stored {:?} to {:?}\", value, local);\n-                            assert_eq!(self.get_const(local), Some(value));\n+                            trace!(\"propagated into {:?}\", local);\n \n                             if self.should_const_prop() {\n+                                let value =\n+                                    self.get_const(local).expect(\"local was dead/uninitialized\");\n+                                trace!(\"replacing {:?} with {:?}\", rval, value);\n                                 self.replace_with_const(\n                                     rval,\n                                     value,\n                                     statement.source_info,\n                                 );\n                             }\n                         } else {\n-                            trace!(\"can't propagate {:?} to {:?}\", value, local);\n+                            trace!(\"can't propagate into {:?}\", local);\n                             self.remove_const(local);\n                         }\n                     }"}]}