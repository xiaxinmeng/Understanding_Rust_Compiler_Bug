{"sha": "007a736642ac88c0adf0d68e8dc6fcb22f0609c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwN2E3MzY2NDJhYzg4YzBhZGYwZDY4ZThkYzZmY2IyMmYwNjA5YzM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-07T08:21:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-07T08:37:19Z"}, "message": "Improve handling of move and swap by alias checker\n\nCloses issue #541.\nCloses issue #591", "tree": {"sha": "484c7c2ebb05f270ae6f6c79ae1c2a97d17bf4f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484c7c2ebb05f270ae6f6c79ae1c2a97d17bf4f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007a736642ac88c0adf0d68e8dc6fcb22f0609c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007a736642ac88c0adf0d68e8dc6fcb22f0609c3", "html_url": "https://github.com/rust-lang/rust/commit/007a736642ac88c0adf0d68e8dc6fcb22f0609c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007a736642ac88c0adf0d68e8dc6fcb22f0609c3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "130006cdda2f40872f6b44665a9b2a0d2d9ded52", "url": "https://api.github.com/repos/rust-lang/rust/commits/130006cdda2f40872f6b44665a9b2a0d2d9ded52", "html_url": "https://github.com/rust-lang/rust/commit/130006cdda2f40872f6b44665a9b2a0d2d9ded52"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "e2c6036be9812aa498ce2fb25460fe27c272fb33", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/007a736642ac88c0adf0d68e8dc6fcb22f0609c3/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007a736642ac88c0adf0d68e8dc6fcb22f0609c3/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=007a736642ac88c0adf0d68e8dc6fcb22f0609c3", "patch": "@@ -14,14 +14,14 @@ import std::option::some;\n import std::option::none;\n import std::option::is_none;\n \n-\n // This is not an alias-analyser (though it would merit from becoming one, or\n-// at getting input from one, to be more precise). It is a pass that checks\n+// getting input from one, to be more precise). It is a pass that checks\n // whether aliases are used in a safe way. Beyond that, though it doesn't have\n // a lot to do with aliases, it also checks whether assignments are valid\n // (using an lval, which is actually mutable), since it already has all the\n // information needed to do that (and the typechecker, which would be a\n // logical place for such a check, doesn't).\n+\n tag valid { valid; overwritten(span, ast::path); val_taken(span, ast::path); }\n \n type restrict =\n@@ -40,12 +40,10 @@ type ctx = rec(@ty::ctxt tcx,\n                std::map::hashmap[node_id, local_info] local_map);\n \n fn check_crate(@ty::ctxt tcx, &@ast::crate crate) {\n-    auto cx =\n-        @rec(tcx=tcx,\n-\n-             // Stores information about object fields and function\n-             // arguments that's otherwise not easily available.\n-             local_map=std::map::new_int_hash());\n+    auto cx = @rec(tcx=tcx,\n+                   // Stores information about object fields and function\n+                   // arguments that's otherwise not easily available.\n+                   local_map=std::map::new_int_hash());\n     auto v =\n         @rec(visit_fn=bind visit_fn(cx, _, _, _, _, _, _, _),\n              visit_item=bind visit_item(cx, _, _, _),\n@@ -117,9 +115,11 @@ fn visit_expr(@ctx cx, &@ast::expr ex, &scope sc, &vt[scope] v) {\n         case (ast::expr_swap(?lhs, ?rhs)) {\n             check_lval(cx, lhs, sc, v);\n             check_lval(cx, rhs, sc, v);\n+            handled = false;\n         }\n         case (ast::expr_move(?dest, ?src)) {\n             check_assign(cx, dest, src, sc, v);\n+            check_move_rhs(cx, src, sc, v);\n         }\n         case (ast::expr_assign(?dest, ?src)) {\n             check_assign(cx, dest, src, sc, v);\n@@ -369,7 +369,6 @@ fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::node_id id,\n     auto my_defnum = ast::def_id_of_def(def)._1;\n     auto var_t = ty::expr_ty(*cx.tcx, ex);\n     for (restrict r in sc) {\n-\n         // excludes variables introduced since the alias was made\n         if (my_defnum < r.block_defnum) {\n             for (ty::t t in r.tys) {\n@@ -399,7 +398,6 @@ fn check_lval(&@ctx cx, &@ast::expr dest, &scope sc, &vt[scope] v) {\n                     r.ok = overwritten(dest.span, p);\n                 }\n             }\n-            check_var(*cx, dest, p, dest.id, true, sc);\n         }\n         case (_) {\n             auto root = expr_root(*cx, dest, false);\n@@ -420,6 +418,22 @@ fn check_lval(&@ctx cx, &@ast::expr dest, &scope sc, &vt[scope] v) {\n     }\n }\n \n+fn check_move_rhs(&@ctx cx, &@ast::expr src, &scope sc, &vt[scope] v) {\n+    alt (src.node) {\n+        case (ast::expr_path(?p)) {\n+            check_lval(cx, src, sc, v);\n+        }\n+        case (_) {\n+            auto root = expr_root(*cx, src, false);\n+            // Not a path and no-derefs means this is a temporary.\n+            if (vec::len(root.ds) != 0u) {\n+                cx.tcx.sess.span_err\n+                    (src.span, \"moving out of a data structure\");\n+            }\n+        }\n+    }\n+}\n+\n fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src, &scope sc,\n                 &vt[scope] v) {\n     visit_expr(cx, src, sc, v);"}]}