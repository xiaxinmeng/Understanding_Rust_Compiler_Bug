{"sha": "ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "node_id": "C_kwDOAAsO6NoAKGVjM2E5YmNkYjcwMDc0OTFlZTEwNWZhZDAzNGUxYTgzZjExODhmZjY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-06T07:32:54Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-06T07:33:32Z"}, "message": "Remove some `assume`s from slice iterators that don't do anything", "tree": {"sha": "2174c3a3fa1bfbdc3e367a606d5b99c1f3e57d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2174c3a3fa1bfbdc3e367a606d5b99c1f3e57d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "html_url": "https://github.com/rust-lang/rust/commit/ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec3a9bcdb7007491ee105fad034e1a83f1188ff6/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a18324a4df6bc98bec0b54d35908d7a9cdc7c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a18324a4df6bc98bec0b54d35908d7a9cdc7c32", "html_url": "https://github.com/rust-lang/rust/commit/4a18324a4df6bc98bec0b54d35908d7a9cdc7c32"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "d2d0dd3387fbc890569da3f3289048e1934f7093", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec3a9bcdb7007491ee105fad034e1a83f1188ff6/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec3a9bcdb7007491ee105fad034e1a83f1188ff6/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "patch": "@@ -124,12 +124,10 @@ macro_rules! iterator {\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer\n-                // must be non-null, and slices over non-ZSTs must also have a\n-                // non-null end pointer. The call to `next_unchecked!` is safe\n-                // since we check if the iterator is empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_unchecked!` is\n+                // safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }\n@@ -339,12 +337,10 @@ macro_rules! iterator {\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,\n-                // and slices over non-ZSTs must also have a non-null end pointer.\n-                // The call to `next_back_unchecked!` is safe since we check if the iterator is\n-                // empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_back_unchecked!`\n+                // is safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }"}, {"sha": "392e433807640102b60e20dd3c5ce9c2a9e6a66a", "filename": "tests/codegen/slice-iter-nonnull.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ec3a9bcdb7007491ee105fad034e1a83f1188ff6/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec3a9bcdb7007491ee105fad034e1a83f1188ff6/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-nonnull.rs?ref=ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "patch": "@@ -0,0 +1,42 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// ignore-debug (these add extra checks that make it hard to verify)\n+#![crate_type = \"lib\"]\n+\n+// The slice iterator used to `assume` that the `start` pointer was non-null.\n+// That ought to be unneeded, though, since the type is `NonNull`, so this test\n+// confirms that the appropriate metadata is included to denote that.\n+\n+// CHECK-LABEL: @slice_iter_next(\n+#[no_mangle]\n+pub fn slice_iter_next<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %it,\n+\n+    it.next()\n+}\n+\n+// CHECK-LABEL: @slice_iter_next_back(\n+#[no_mangle]\n+pub fn slice_iter_next_back<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %[[ENDP]],\n+\n+    it.next_back()\n+}"}]}