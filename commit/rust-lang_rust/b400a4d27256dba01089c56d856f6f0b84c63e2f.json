{"sha": "b400a4d27256dba01089c56d856f6f0b84c63e2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDBhNGQyNzI1NmRiYTAxMDg5YzU2ZDg1NmY2ZjBiODRjNjNlMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T02:21:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T02:21:57Z"}, "message": "auto merge of #13498 : johnsoft/rust/fix-transmute-fn-names, r=alexcrichton\n\nRegions were renamed to lifetimes a while back, so these functions should probably be renamed as well.", "tree": {"sha": "78272c8eb3f5448e233ae81b6d66963039501e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78272c8eb3f5448e233ae81b6d66963039501e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b400a4d27256dba01089c56d856f6f0b84c63e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b400a4d27256dba01089c56d856f6f0b84c63e2f", "html_url": "https://github.com/rust-lang/rust/commit/b400a4d27256dba01089c56d856f6f0b84c63e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b400a4d27256dba01089c56d856f6f0b84c63e2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "html_url": "https://github.com/rust-lang/rust/commit/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce"}, {"sha": "133834084e7fb8efba6e9c25816b6d4de03007ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/133834084e7fb8efba6e9c25816b6d4de03007ff", "html_url": "https://github.com/rust-lang/rust/commit/133834084e7fb8efba6e9c25816b6d4de03007ff"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "4d94b1a98dc82cf5d5e0c9c5527ab80820ce795a", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=b400a4d27256dba01089c56d856f6f0b84c63e2f", "patch": "@@ -70,7 +70,7 @@ use std::cast;\n let mut x: u8 = 1;\n \n let ref_1: &mut u8 = &mut x;\n-let ref_2: &mut u8 = unsafe { cast::transmute_mut_region(ref_1) };\n+let ref_2: &mut u8 = unsafe { cast::transmute_mut_lifetime(ref_1) };\n \n // oops, ref_1 and ref_2 point to the same piece of data (x) and are\n // both usable"}, {"sha": "61b028c37df3a403b7f9d77811633fa090065012", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=b400a4d27256dba01089c56d856f6f0b84c63e2f", "patch": "@@ -26,7 +26,7 @@\n \n extern crate collections;\n \n-use std::cast::{transmute, transmute_mut, transmute_mut_region};\n+use std::cast::{transmute, transmute_mut, transmute_mut_lifetime};\n use std::cast;\n use std::cell::{Cell, RefCell};\n use std::mem;\n@@ -186,7 +186,7 @@ impl Arena {\n     #[inline]\n     fn alloc_copy_inner(&mut self, n_bytes: uint, align: uint) -> *u8 {\n         unsafe {\n-            let this = transmute_mut_region(self);\n+            let this = transmute_mut_lifetime(self);\n             let start = round_up(this.copy_head.fill.get(), align);\n             let end = start + n_bytes;\n             if end > self.chunk_size() {\n@@ -233,7 +233,7 @@ impl Arena {\n             let after_tydesc;\n \n             {\n-                let head = transmute_mut_region(&mut self.head);\n+                let head = transmute_mut_lifetime(&mut self.head);\n \n                 tydesc_start = head.fill.get();\n                 after_tydesc = head.fill.get() + mem::size_of::<*TyDesc>();\n@@ -245,7 +245,7 @@ impl Arena {\n                 return self.alloc_noncopy_grow(n_bytes, align);\n             }\n \n-            let head = transmute_mut_region(&mut self.head);\n+            let head = transmute_mut_lifetime(&mut self.head);\n             head.fill.set(round_up(end, mem::pref_align_of::<*TyDesc>()));\n \n             //debug!(\"idx = {}, size = {}, align = {}, fill = {}\","}, {"sha": "1a4db43d6c659ebf4c8400e40d2435b169236469", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b400a4d27256dba01089c56d856f6f0b84c63e2f", "patch": "@@ -630,7 +630,7 @@ impl Scheduler {\n         unsafe {\n \n             let sched: &mut Scheduler =\n-                cast::transmute_mut_region(*next_task.sched.get_mut_ref());\n+                cast::transmute_mut_lifetime(*next_task.sched.get_mut_ref());\n \n             let current_task: &mut GreenTask = match sched.cleanup_job {\n                 Some(CleanupJob { task: ref mut task, .. }) => &mut **task,\n@@ -681,8 +681,8 @@ impl Scheduler {\n         let next_task_context =\n                 &mut next_task.coroutine.get_mut_ref().saved_context;\n         unsafe {\n-            (cast::transmute_mut_region(current_task_context),\n-             cast::transmute_mut_region(next_task_context))\n+            (cast::transmute_mut_lifetime(current_task_context),\n+             cast::transmute_mut_lifetime(next_task_context))\n         }\n     }\n "}, {"sha": "f9f9e395f2e03ff65653200272bfc302bf19b68b", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b400a4d27256dba01089c56d856f6f0b84c63e2f/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=b400a4d27256dba01089c56d856f6f0b84c63e2f", "patch": "@@ -63,9 +63,9 @@ pub unsafe fn transmute<L, G>(thing: L) -> G {\n #[inline]\n pub unsafe fn transmute_mut<'a,T>(ptr: &'a T) -> &'a mut T { transmute(ptr) }\n \n-/// Coerce a reference to have an arbitrary associated region.\n+/// Coerce a reference to have an arbitrary associated lifetime.\n #[inline]\n-pub unsafe fn transmute_region<'a,'b,T>(ptr: &'a T) -> &'b T {\n+pub unsafe fn transmute_lifetime<'a,'b,T>(ptr: &'a T) -> &'b T {\n     transmute(ptr)\n }\n \n@@ -75,28 +75,28 @@ pub unsafe fn transmute_mut_unsafe<T>(ptr: *T) -> *mut T {\n     transmute(ptr)\n }\n \n-/// Coerce a mutable reference to have an arbitrary associated region.\n+/// Coerce a mutable reference to have an arbitrary associated lifetime.\n #[inline]\n-pub unsafe fn transmute_mut_region<'a,'b,T>(ptr: &'a mut T) -> &'b mut T {\n+pub unsafe fn transmute_mut_lifetime<'a,'b,T>(ptr: &'a mut T) -> &'b mut T {\n     transmute(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline]\n pub unsafe fn copy_lifetime<'a,S,T>(_ptr: &'a S, ptr: &T) -> &'a T {\n-    transmute_region(ptr)\n+    transmute_lifetime(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline]\n pub unsafe fn copy_mut_lifetime<'a,S,T>(_ptr: &'a mut S, ptr: &mut T) -> &'a mut T {\n-    transmute_mut_region(ptr)\n+    transmute_mut_lifetime(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline]\n pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n-    transmute_region(ptr)\n+    transmute_lifetime(ptr)\n }\n \n "}]}