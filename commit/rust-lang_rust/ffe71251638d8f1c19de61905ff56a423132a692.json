{"sha": "ffe71251638d8f1c19de61905ff56a423132a692", "node_id": "C_kwDOAAsO6NoAKGZmZTcxMjUxNjM4ZDhmMWMxOWRlNjE5MDVmZjU2YTQyMzEzMmE2OTI", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-04-16T09:40:28Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-08-21T08:24:30Z"}, "message": "and check for `Result`", "tree": {"sha": "7e657fa8e487c897b136be1e60f173a769aadfbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e657fa8e487c897b136be1e60f173a769aadfbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe71251638d8f1c19de61905ff56a423132a692", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmMB674ACgkQHKDfKvWd\naKVBBg/8CB023HtoLAMzcxklJ4c4p4qUUVA9HFmUQvVT6AjJIYv5FiVT9QG09pSq\npL8HwvVHaQ8YG9J97rMe5+WqGEZFFiC1XEm8//j83zj1o2cgeSxxsu7HFd1k7wXp\n0dvOnYndaPYoYGODsAZpexh7tCMKL4Ebksxum5pG794kBr9iU51i4BKXfpXeGMqf\nQ1sW28qF9J3tMcnC+OHEnsH4xHmi/4lqxlBuc1nHQ0fNiBazfYSP/9OC6LHA6FnO\nFGzbSeou7fOBwcCftC6taIJbSTXP1mKwhy80OL4ZOYlzlm3UQ72bszVnsZl6xCks\nlmxhEXG0Kaaqew5RO5jLIS8cKqFLh8WjCO3mT16Nk6M2NCO1HU6aCz7xHwCzGGPW\n6eWDsXY3vu95vhV13qZwuRIN6e00KFNaN5xC5E18FQ4VDs2je0Hx7Geaa7DwEV5F\nV1jEe9wmOuOKbETKkWuntknTtZ3uXuXcJWDE2nJ+o6NCYdFIt5ePUa5gI4oK46Dw\nTWnC9uq+8gDnKj+6NcpXDtq+FQuj6q9kcqDm5cfqLUSUntvq2LVAdR/4uMDLACzx\nkp9PMlp59qFzmVIRsaLSLsIYeieoa0XMCBKTxQm1riMmuYhoHOzROxD2Gb3fo65x\nC9SByypUjbh8kvo8HoOyqPO2cUMBGkU2un+sRJt0PUPdqM+qRl8=\n=RZvH\n-----END PGP SIGNATURE-----", "payload": "tree 7e657fa8e487c897b136be1e60f173a769aadfbd\nparent 5d403c0b859259499886d3ee3d4b4b4dfaab6ae2\nauthor J-ZhengLi <lizheng135@huawei.com> 1650102028 +0800\ncommitter Philipp Krones <hello@philkrones.com> 1661070270 +0200\n\nand check for `Result`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe71251638d8f1c19de61905ff56a423132a692", "html_url": "https://github.com/rust-lang/rust/commit/ffe71251638d8f1c19de61905ff56a423132a692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe71251638d8f1c19de61905ff56a423132a692/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d403c0b859259499886d3ee3d4b4b4dfaab6ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d403c0b859259499886d3ee3d4b4b4dfaab6ae2", "html_url": "https://github.com/rust-lang/rust/commit/5d403c0b859259499886d3ee3d4b4b4dfaab6ae2"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "93388e78591356c5688b89043e49b200c96e4b25", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ffe71251638d8f1c19de61905ff56a423132a692/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe71251638d8f1c19de61905ff56a423132a692/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=ffe71251638d8f1c19de61905ff56a423132a692", "patch": "@@ -1,19 +1,17 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{\n     can_move_expr_to_closure, eager_or_lazy, higher, in_constant, is_else_clause, is_lang_ctor, peel_blocks,\n     peel_hir_expr_while, CaptureKind,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, OptionSome};\n+use rustc_hir::LangItem::{OptionNone, OptionSome, ResultErr, ResultOk};\n use rustc_hir::{\n     def::Res, Arm, BindingAnnotation, Expr, ExprKind, MatchSource, Mutability, Pat, PatKind, Path, QPath, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -74,16 +72,6 @@ declare_clippy_lint! {\n \n declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n \n-/// Returns true iff the given expression is the result of calling `Result::ok`\n-fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n-    if let ExprKind::MethodCall(path, &[ref receiver], _) = &expr.kind {\n-        path.ident.name.as_str() == \"ok\"\n-            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(receiver), sym::Result)\n-    } else {\n-        false\n-    }\n-}\n-\n /// A struct containing information about occurrences of construct that this lint detects\n ///\n /// Such as:\n@@ -130,9 +118,8 @@ fn try_get_option_occurence<'tcx>(\n         ExprKind::Unary(UnOp::Deref, inner_expr) | ExprKind::AddrOf(_, _, inner_expr) => inner_expr,\n         _ => expr,\n     };\n+    let inner_pat = try_get_inner_pat(cx, pat)?;\n     if_chain! {\n-        if !is_result_ok(cx, cond_expr); // Don't lint on Result::ok because a different lint does it already\n-        let inner_pat = try_get_inner_pat(cx, pat)?;\n         if let PatKind::Binding(bind_annotation, _, id, None) = inner_pat.kind;\n         if let Some(some_captures) = can_move_expr_to_closure(cx, if_then);\n         if let Some(none_captures) = can_move_expr_to_closure(cx, if_else);\n@@ -185,7 +172,7 @@ fn try_get_option_occurence<'tcx>(\n \n fn try_get_inner_pat<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<&'tcx Pat<'tcx>> {\n     if let PatKind::TupleStruct(ref qpath, [inner_pat], ..) = pat.kind {\n-        if is_lang_ctor(cx, qpath, OptionSome) {\n+        if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk) {\n             return Some(inner_pat);\n         }\n     }\n@@ -224,9 +211,9 @@ fn try_convert_match<'tcx>(\n     arms: &[Arm<'tcx>],\n ) -> Option<(&'tcx Pat<'tcx>, &'tcx Expr<'tcx>, &'tcx Expr<'tcx>)> {\n     if arms.len() == 2 {\n-        return if is_none_arm(cx, &arms[1]) {\n+        return if is_none_or_err_arm(cx, &arms[1]) {\n             Some((arms[0].pat, arms[0].body, arms[1].body))\n-        } else if is_none_arm(cx, &arms[0]) {\n+        } else if is_none_or_err_arm(cx, &arms[0]) {\n             Some((arms[1].pat, arms[1].body, arms[0].body))\n         } else {\n             None\n@@ -235,9 +222,12 @@ fn try_convert_match<'tcx>(\n     None\n }\n \n-fn is_none_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n+fn is_none_or_err_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n     match arm.pat.kind {\n         PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n+        PatKind::TupleStruct(ref qpath, [first_pat], _) => {\n+            is_lang_ctor(cx, qpath, ResultErr) && matches!(first_pat.kind, PatKind::Wild)\n+        },\n         PatKind::Wild => true,\n         _ => false,\n     }"}, {"sha": "f15ac551bb3ccfeefa774ae183e91f98a66f6ce0", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffe71251638d8f1c19de61905ff56a423132a692/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ffe71251638d8f1c19de61905ff56a423132a692/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=ffe71251638d8f1c19de61905ff56a423132a692", "patch": "@@ -185,13 +185,7 @@ fn main() {\n     let _ = Some(10).map_or(5, |a| a + 1);\n \n     let res: Result<i32, i32> = Ok(5);\n-    let _ = match res {\n-        Ok(a) => a + 1,\n-        _ => 1,\n-    };\n-    let _ = match res {\n-        Err(_) => 1,\n-        Ok(a) => a + 1,\n-    };\n-    let _ = if let Ok(a) = res { a + 1 } else { 5 };\n+    let _ = res.map_or(1, |a| a + 1);\n+    let _ = res.map_or(1, |a| a + 1);\n+    let _ = res.map_or(5, |a| a + 1);\n }"}, {"sha": "1bf513e0872458ea05c9b598374d38798fe4cfa7", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ffe71251638d8f1c19de61905ff56a423132a692/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffe71251638d8f1c19de61905ff56a423132a692/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=ffe71251638d8f1c19de61905ff56a423132a692", "patch": "@@ -226,5 +226,31 @@ LL | |         None => 5,\n LL | |     };\n    | |_____^ help: try: `Some(10).map_or(5, |a| a + 1)`\n \n-error: aborting due to 17 previous errors\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:222:13\n+   |\n+LL |       let _ = match res {\n+   |  _____________^\n+LL | |         Ok(a) => a + 1,\n+LL | |         _ => 1,\n+LL | |     };\n+   | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:226:13\n+   |\n+LL |       let _ = match res {\n+   |  _____________^\n+LL | |         Err(_) => 1,\n+LL | |         Ok(a) => a + 1,\n+LL | |     };\n+   | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:230:13\n+   |\n+LL |     let _ = if let Ok(a) = res { a + 1 } else { 5 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `res.map_or(5, |a| a + 1)`\n+\n+error: aborting due to 20 previous errors\n "}]}