{"sha": "7fb5187d0423f4cd0441526571b8cd61927123c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjUxODdkMDQyM2Y0Y2QwNDQxNTI2NTcxYjhjZDYxOTI3MTIzYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T14:26:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T14:26:43Z"}, "message": "Auto merge of #70755 - wesleywiser:simplify_locals_2_electric_boogaloo, r=oli-obk\n\n[mir-opt] Run SimplifyLocals to a fixedpoint and handle most rvalues\n\nFollow up to review feedback left on #70595.", "tree": {"sha": "7a8e48718bf3f9d686e4e27dca987e7730079b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a8e48718bf3f9d686e4e27dca987e7730079b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb5187d0423f4cd0441526571b8cd61927123c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb5187d0423f4cd0441526571b8cd61927123c9", "html_url": "https://github.com/rust-lang/rust/commit/7fb5187d0423f4cd0441526571b8cd61927123c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb5187d0423f4cd0441526571b8cd61927123c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4d49d60fd696c4036d438292673a2d7fd34519", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4d49d60fd696c4036d438292673a2d7fd34519", "html_url": "https://github.com/rust-lang/rust/commit/4e4d49d60fd696c4036d438292673a2d7fd34519"}, {"sha": "9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "html_url": "https://github.com/rust-lang/rust/commit/9666d31bcf57190864fc61a95d2dab7ae3e51cdf"}], "stats": {"total": 473, "additions": 319, "deletions": 154}, "files": [{"sha": "c4971b2565511d17c7e5e89af74ba69666c8c696", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 167, "deletions": 39, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -306,49 +306,82 @@ pub struct SimplifyLocals;\n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n-        let locals = {\n+\n+        // First, we're going to get a count of *actual* uses for every `Local`.\n+        // Take a look at `DeclMarker::visit_local()` to see exactly what is ignored.\n+        let mut used_locals = {\n             let read_only_cache = read_only!(body);\n-            let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()), body };\n+            let mut marker = DeclMarker::new(body);\n             marker.visit_body(&read_only_cache);\n-            // Return pointer and arguments are always live\n-            marker.locals.insert(RETURN_PLACE);\n-            for arg in body.args_iter() {\n-                marker.locals.insert(arg);\n-            }\n \n-            marker.locals\n+            marker.local_counts\n         };\n \n-        let map = make_local_map(&mut body.local_decls, locals);\n-        // Update references to all vars and tmps now\n-        LocalUpdater { map, tcx }.visit_body(body);\n-        body.local_decls.shrink_to_fit();\n+        let arg_count = body.arg_count;\n+\n+        // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n+        // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n+        // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n+        // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n+        // fixedpoint where there are no more unused locals.\n+        loop {\n+            let mut remove_statements = RemoveStatements::new(&mut used_locals, arg_count, tcx);\n+            remove_statements.visit_body(body);\n+\n+            if !remove_statements.modified {\n+                break;\n+            }\n+        }\n+\n+        // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n+        let map = make_local_map(&mut body.local_decls, used_locals, arg_count);\n+\n+        // Only bother running the `LocalUpdater` if we actually found locals to remove.\n+        if map.iter().any(Option::is_none) {\n+            // Update references to all vars and tmps now\n+            let mut updater = LocalUpdater { map, tcx };\n+            updater.visit_body(body);\n+\n+            body.local_decls.shrink_to_fit();\n+        }\n     }\n }\n \n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n fn make_local_map<V>(\n-    vec: &mut IndexVec<Local, V>,\n-    mask: BitSet<Local>,\n+    local_decls: &mut IndexVec<Local, V>,\n+    used_locals: IndexVec<Local, usize>,\n+    arg_count: usize,\n ) -> IndexVec<Local, Option<Local>> {\n-    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*vec);\n+    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);\n     let mut used = Local::new(0);\n-    for alive_index in mask.iter() {\n+    for (alive_index, count) in used_locals.iter_enumerated() {\n+        // The `RETURN_PLACE` and arguments are always live.\n+        if alive_index.as_usize() > arg_count && *count == 0 {\n+            continue;\n+        }\n+\n         map[alive_index] = Some(used);\n         if alive_index != used {\n-            vec.swap(alive_index, used);\n+            local_decls.swap(alive_index, used);\n         }\n         used.increment_by(1);\n     }\n-    vec.truncate(used.index());\n+    local_decls.truncate(used.index());\n     map\n }\n \n struct DeclMarker<'a, 'tcx> {\n-    pub locals: BitSet<Local>,\n+    pub local_counts: IndexVec<Local, usize>,\n     pub body: &'a Body<'tcx>,\n }\n \n+impl<'a, 'tcx> DeclMarker<'a, 'tcx> {\n+    pub fn new(body: &'a Body<'tcx>) -> Self {\n+        Self { local_counts: IndexVec::from_elem(0, &body.local_decls), body }\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n     fn visit_local(&mut self, local: &Local, ctx: PlaceContext, location: Location) {\n         // Ignore storage markers altogether, they get removed along with their otherwise unused\n@@ -368,51 +401,146 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n+                fn can_skip_constant(c: &ty::Const<'tcx>) -> bool {\n+                    // Keep assignments from unevaluated constants around, since the\n+                    // evaluation may report errors, even if the use of the constant\n+                    // is dead code.\n+                    !matches!(c.val, ty::ConstKind::Unevaluated(..))\n+                }\n+\n+                fn can_skip_operand(o: &Operand<'_>) -> bool {\n+                    match o {\n+                        Operand::Copy(_) | Operand::Move(_) => true,\n+                        Operand::Constant(c) => can_skip_constant(c.literal),\n+                    }\n+                }\n+\n                 if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n                     if !dest.is_indirect() && dest.local == *local {\n-                        if let Rvalue::Use(Operand::Constant(c)) = rvalue {\n-                            match c.literal.val {\n-                                // Keep assignments from unevaluated constants around, since the\n-                                // evaluation may report errors, even if the use of the constant\n-                                // is dead code.\n-                                ty::ConstKind::Unevaluated(..) => {}\n-                                _ => {\n-                                    trace!(\"skipping store of const value {:?} to {:?}\", c, dest);\n-                                    return;\n-                                }\n+                        let can_skip = match rvalue {\n+                            Rvalue::Use(op) => can_skip_operand(op),\n+                            Rvalue::Discriminant(_) => true,\n+                            Rvalue::BinaryOp(_, l, r) | Rvalue::CheckedBinaryOp(_, l, r) => {\n+                                can_skip_operand(l) && can_skip_operand(r)\n                             }\n-                        } else if let Rvalue::Discriminant(d) = rvalue {\n-                            trace!(\"skipping store of discriminant value {:?} to {:?}\", d, dest);\n+                            Rvalue::Repeat(op, c) => can_skip_operand(op) && can_skip_constant(c),\n+                            Rvalue::AddressOf(_, _) => true,\n+                            Rvalue::Len(_) => true,\n+                            Rvalue::UnaryOp(_, op) => can_skip_operand(op),\n+                            Rvalue::Aggregate(_, operands) => operands.iter().all(can_skip_operand),\n+\n+                            _ => false,\n+                        };\n+\n+                        if can_skip {\n+                            trace!(\"skipping store of {:?} to {:?}\", rvalue, dest);\n                             return;\n                         }\n                     }\n                 }\n             }\n         }\n \n-        self.locals.insert(*local);\n+        self.local_counts[*local] += 1;\n     }\n }\n \n-struct LocalUpdater<'tcx> {\n-    map: IndexVec<Local, Option<Local>>,\n+struct StatementDeclMarker<'a, 'tcx> {\n+    used_locals: &'a mut IndexVec<Local, usize>,\n+    statement: &'a Statement<'tcx>,\n+}\n+\n+impl<'a, 'tcx> StatementDeclMarker<'a, 'tcx> {\n+    pub fn new(\n+        used_locals: &'a mut IndexVec<Local, usize>,\n+        statement: &'a Statement<'tcx>,\n+    ) -> Self {\n+        Self { used_locals, statement }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for StatementDeclMarker<'a, 'tcx> {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+        // Skip the lvalue for assignments\n+        if let StatementKind::Assign(box (p, _)) = self.statement.kind {\n+            if p.local == *local && context.is_place_assignment() {\n+                return;\n+            }\n+        }\n+\n+        let use_count = &mut self.used_locals[*local];\n+        // If this is the local we're removing...\n+        if *use_count != 0 {\n+            *use_count -= 1;\n+        }\n+    }\n+}\n+\n+struct RemoveStatements<'a, 'tcx> {\n+    used_locals: &'a mut IndexVec<Local, usize>,\n+    arg_count: usize,\n     tcx: TyCtxt<'tcx>,\n+    modified: bool,\n }\n \n-impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n+impl<'a, 'tcx> RemoveStatements<'a, 'tcx> {\n+    fn new(\n+        used_locals: &'a mut IndexVec<Local, usize>,\n+        arg_count: usize,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Self {\n+        Self { used_locals, arg_count, tcx, modified: false }\n+    }\n+\n+    fn keep_local(&self, l: Local) -> bool {\n+        trace!(\"keep_local({:?}): count: {:?}\", l, self.used_locals[l]);\n+        l.as_usize() <= self.arg_count || self.used_locals[l] != 0\n+    }\n+}\n+\n+impl<'a, 'tcx> MutVisitor<'tcx> for RemoveStatements<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         // Remove unnecessary StorageLive and StorageDead annotations.\n-        data.statements.retain(|stmt| match &stmt.kind {\n-            StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => self.map[*l].is_some(),\n-            StatementKind::Assign(box (place, _)) => self.map[place.local].is_some(),\n-            _ => true,\n+        let mut i = 0usize;\n+        data.statements.retain(|stmt| {\n+            let keep = match &stmt.kind {\n+                StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n+                    self.keep_local(*l)\n+                }\n+                StatementKind::Assign(box (place, _)) => self.keep_local(place.local),\n+                _ => true,\n+            };\n+\n+            if !keep {\n+                trace!(\"removing statement {:?}\", stmt);\n+                self.modified = true;\n+\n+                let mut visitor = StatementDeclMarker::new(self.used_locals, stmt);\n+                visitor.visit_statement(stmt, Location { block, statement_index: i });\n+            }\n+\n+            i += 1;\n+\n+            keep\n         });\n+\n         self.super_basic_block_data(block, data);\n     }\n+}\n+\n+struct LocalUpdater<'tcx> {\n+    map: IndexVec<Local, Option<Local>>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n \n     fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();"}, {"sha": "63e6b8358a534d3ae3e9dd566df55f0c75e0c7de", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -30,30 +30,30 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257ealloc10+0\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257ealloc9+0\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc10 (size: 168, align: 1) {\n+alloc9 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc5+0\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc4+0\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257ealloc7+0\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257ealloc8+99\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257ealloc6+0\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257ealloc7+99\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc7 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "7dea5c664d858db302169c17c7997e6dd5b0f2d1", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -30,31 +30,31 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc10+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc9+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc10 (size: 180, align: 1) {\n+alloc9 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5+0\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4+0\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500alloc7+0\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc8+99\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500alloc6+0\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc7+99\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc7 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "f8aea27df6660c846f9281e1332a50cee391c35a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -3,15 +3,14 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             scope 3 {\n-                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             }\n         }\n     }\n@@ -26,70 +25,31 @@ fn main() -> () {\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "f8aea27df6660c846f9281e1332a50cee391c35a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -3,15 +3,14 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             scope 3 {\n-                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             }\n         }\n     }\n@@ -26,70 +25,31 @@ fn main() -> () {\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "aa5bc345359eb179260b30313c8c7da371700312", "filename": "src/test/mir-opt/simplify-locals-fixedpoint.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint.rs?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zmir-opt-level=1\n+\n+fn foo<T>() {\n+    if let (Some(a), None) = (Option::<u8>::None, Option::<T>::None) {\n+        if a > 42u8 {\n+\n+        }\n+    }\n+}\n+\n+fn main() {\n+    foo::<()>();\n+}\n+\n+// EMIT_MIR rustc.foo.SimplifyLocals.diff"}, {"sha": "bc59be48eee0fb565108da5d360f250b285cd854", "filename": "src/test/mir-opt/simplify-locals-fixedpoint/rustc.foo.SimplifyLocals.diff", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7fb5187d0423f4cd0441526571b8cd61927123c9/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff?ref=7fb5187d0423f4cd0441526571b8cd61927123c9", "patch": "@@ -0,0 +1,102 @@\n+- // MIR for `foo` before SimplifyLocals\n++ // MIR for `foo` after SimplifyLocals\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals-fixedpoint.rs:3:13: 3:13\n+      let mut _1: (std::option::Option<u8>, std::option::Option<T>); // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+      let mut _2: std::option::Option<u8>; // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+      let mut _3: std::option::Option<T>;  // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+      let mut _4: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+      let _6: u8;                          // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+      let mut _8: u8;                      // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+      scope 1 {\n+          debug a => _6;                   // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          discriminant(_2) = 0;            // bb0[2]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          discriminant(_3) = 0;            // bb0[4]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          (_1.0: std::option::Option<u8>) = move _2; // bb0[5]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.1: std::option::Option<T>) = move _3; // bb0[6]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          StorageDead(_2);                 // bb0[8]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // bb0[9]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          switchInt(move _5) -> [1isize: bb2, otherwise: bb1]; // bb0[10]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb7;                     // bb1[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+      }\n+  \n+      bb2: {\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // bb2[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          switchInt(move _4) -> [0isize: bb3, otherwise: bb1]; // bb2[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+      }\n+  \n+      bb3: {\n+          StorageLive(_6);                 // bb3[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // bb3[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          StorageLive(_7);                 // bb3[2]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          StorageLive(_8);                 // bb3[3]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _8 = _6;                         // bb3[4]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _7 = Gt(move _8, const 42u8);    // bb3[5]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x2a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:16: 5:20\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n+          StorageDead(_8);                 // bb3[6]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n+          switchInt(_7) -> [false: bb4, otherwise: bb5]; // bb3[7]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+      }\n+  \n+      bb4: {\n+          _0 = const ();                   // bb4[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb6;                     // bb4[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+      }\n+  \n+      bb5: {\n+          _0 = const ();                   // bb5[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb6;                     // bb5[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+      }\n+  \n+      bb6: {\n+          StorageDead(_7);                 // bb6[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          StorageDead(_6);                 // bb6[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          goto -> bb7;                     // bb6[2]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+      }\n+  \n+      bb7: {\n+          drop(_1) -> bb8;                 // bb7[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+      }\n+  \n+      bb8: {\n+          StorageDead(_1);                 // bb8[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+          return;                          // bb8[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:2: 9:2\n+      }\n+  }\n+  "}]}