{"sha": "2b2cd829b0f95aef338227deb05ec7503dae9b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmNkODI5YjBmOTVhZWYzMzgyMjdkZWIwNWVjNzUwM2RhZTliNmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-03T15:48:14Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-03T15:48:14Z"}, "message": "Merge #1476\n\n1476: Extend add_impl_members to constants and types r=matklad a=viorina\n\n\n\nCo-authored-by: Ekaterina Babshukova <ekaterina.babshukova@yandex.ru>", "tree": {"sha": "652be83e4e2653fd3f18c994b569926b927ca63d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652be83e4e2653fd3f18c994b569926b927ca63d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2cd829b0f95aef338227deb05ec7503dae9b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cd829b0f95aef338227deb05ec7503dae9b6c", "html_url": "https://github.com/rust-lang/rust/commit/2b2cd829b0f95aef338227deb05ec7503dae9b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cd829b0f95aef338227deb05ec7503dae9b6c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c322fe7bfd95720ef6fedba13e4d5a82552e890e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c322fe7bfd95720ef6fedba13e4d5a82552e890e", "html_url": "https://github.com/rust-lang/rust/commit/c322fe7bfd95720ef6fedba13e4d5a82552e890e"}, {"sha": "e0e42095db8fb6a7c47c23f2a9bbcebbd8971191", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e42095db8fb6a7c47c23f2a9bbcebbd8971191", "html_url": "https://github.com/rust-lang/rust/commit/e0e42095db8fb6a7c47c23f2a9bbcebbd8971191"}], "stats": {"total": 137, "additions": 87, "deletions": 50}, "files": [{"sha": "0c903a56325cc3cfc2f4d6d7561dc894d7ad9336", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 68, "deletions": 28, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/2b2cd829b0f95aef338227deb05ec7503dae9b6c/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2cd829b0f95aef338227deb05ec7503dae9b6c/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=2b2cd829b0f95aef338227deb05ec7503dae9b6c", "patch": "@@ -2,9 +2,10 @@ use crate::{Assist, AssistId, AssistCtx, ast_editor::{AstEditor, AstBuilder}};\n \n use hir::{HasSource, db::HirDatabase};\n use ra_syntax::{SmolStr, TreeArc};\n-use ra_syntax::ast::{self, AstNode, FnDef, ImplItem, ImplItemKind, NameOwner};\n+use ra_syntax::ast::{self, AstNode, ImplItem, ImplItemKind, NameOwner};\n use ra_db::FilePosition;\n \n+#[derive(PartialEq)]\n enum AddMissingImplMembersMode {\n     DefaultMethodsOnly,\n     NoDefaultMethods,\n@@ -45,39 +46,50 @@ fn add_missing_impl_members_inner(\n         resolve_target_trait_def(ctx.db, &analyzer, impl_node)?\n     };\n \n-    let missing_fns: Vec<_> = {\n-        let fn_def_opt = |kind| if let ImplItemKind::FnDef(def) = kind { Some(def) } else { None };\n-        let def_name = |def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n-\n-        let trait_items =\n-            trait_def.syntax().descendants().find_map(ast::ItemList::cast)?.impl_items();\n-        let impl_items = impl_item_list.impl_items();\n-\n-        let trait_fns = trait_items.map(ImplItem::kind).filter_map(fn_def_opt);\n-        let impl_fns = impl_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n-\n-        trait_fns\n-            .filter(|t| def_name(t).is_some())\n-            .filter(|t| match mode {\n-                AddMissingImplMembersMode::DefaultMethodsOnly => t.body().is_some(),\n-                AddMissingImplMembersMode::NoDefaultMethods => t.body().is_none(),\n-            })\n-            .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n-            .collect()\n+    let def_name = |kind| -> Option<&SmolStr> {\n+        match kind {\n+            ImplItemKind::FnDef(def) => def.name(),\n+            ImplItemKind::TypeAliasDef(def) => def.name(),\n+            ImplItemKind::ConstDef(def) => def.name(),\n+        }\n+        .map(ast::Name::text)\n     };\n-    if missing_fns.is_empty() {\n+\n+    let trait_items = trait_def.item_list()?.impl_items();\n+    let impl_items = impl_item_list.impl_items().collect::<Vec<_>>();\n+\n+    let missing_items: Vec<_> = trait_items\n+        .filter(|t| def_name(t.kind()).is_some())\n+        .filter(|t| match t.kind() {\n+            ImplItemKind::FnDef(def) => match mode {\n+                AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n+                AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n+            },\n+            _ => mode == AddMissingImplMembersMode::NoDefaultMethods,\n+        })\n+        .filter(|t| impl_items.iter().all(|i| def_name(i.kind()) != def_name(t.kind())))\n+        .collect();\n+    if missing_items.is_empty() {\n         return None;\n     }\n \n     ctx.add_action(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n-        let fns = missing_fns.into_iter().map(add_body_and_strip_docstring).collect::<Vec<_>>();\n-\n         let mut ast_editor = AstEditor::new(impl_item_list);\n         if n_existing_items == 0 {\n             ast_editor.make_multiline();\n         }\n-        ast_editor.append_functions(fns.iter().map(|it| &**it));\n+\n+        for item in missing_items {\n+            let it = match item.kind() {\n+                ImplItemKind::FnDef(def) => {\n+                    strip_docstring(ImplItem::cast(add_body(def).syntax()).unwrap())\n+                }\n+                _ => strip_docstring(item),\n+            };\n+            ast_editor.append_item(&it)\n+        }\n+\n         let first_new_item = ast_editor.ast().impl_items().nth(n_existing_items).unwrap();\n         let cursor_poisition = first_new_item.syntax().range().start();\n         ast_editor.into_text_edit(edit.text_edit_builder());\n@@ -88,14 +100,19 @@ fn add_missing_impl_members_inner(\n     ctx.build()\n }\n \n-fn add_body_and_strip_docstring(fn_def: &ast::FnDef) -> TreeArc<ast::FnDef> {\n+fn strip_docstring(item: &ast::ImplItem) -> TreeArc<ast::ImplItem> {\n+    let mut ast_editor = AstEditor::new(item);\n+    ast_editor.strip_attrs_and_docs();\n+    ast_editor.ast().to_owned()\n+}\n+\n+fn add_body(fn_def: &ast::FnDef) -> TreeArc<ast::FnDef> {\n     let mut ast_editor = AstEditor::new(fn_def);\n     if fn_def.body().is_none() {\n         ast_editor.set_body(&AstBuilder::<ast::Block>::single_expr(\n             &AstBuilder::<ast::Expr>::unimplemented(),\n         ));\n     }\n-    ast_editor.strip_attrs_and_docs();\n     ast_editor.ast().to_owned()\n }\n \n@@ -126,6 +143,10 @@ mod tests {\n             add_missing_impl_members,\n             \"\n trait Foo {\n+    type Output;\n+\n+    const CONST: usize = 42;\n+\n     fn foo(&self);\n     fn bar(&self);\n     fn baz(&self);\n@@ -139,6 +160,10 @@ impl Foo for S {\n }\",\n             \"\n trait Foo {\n+    type Output;\n+\n+    const CONST: usize = 42;\n+\n     fn foo(&self);\n     fn bar(&self);\n     fn baz(&self);\n@@ -148,7 +173,9 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>type Output;\n+    const CONST: usize = 42;\n+    fn foo(&self) { unimplemented!() }\n     fn baz(&self) { unimplemented!() }\n \n }\",\n@@ -256,6 +283,8 @@ impl Foo for S { <|> }\",\n #[doc(alias = \"test alias\")]\n trait Foo {\n     /// doc string\n+    type Output;\n+\n     #[must_use]\n     fn foo(&self);\n }\n@@ -265,12 +294,15 @@ impl Foo for S {}<|>\"#,\n #[doc(alias = \"test alias\")]\n trait Foo {\n     /// doc string\n+    type Output;\n+\n     #[must_use]\n     fn foo(&self);\n }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>type Output;\n+    fn foo(&self) { unimplemented!() }\n }\"#,\n         )\n     }\n@@ -281,13 +313,21 @@ impl Foo for S {\n             add_missing_default_members,\n             \"\n trait Foo {\n+    type Output;\n+\n+    const CONST: usize = 42;\n+\n     fn valid(some: u32) -> bool { false }\n     fn foo(some: u32) -> bool;\n }\n struct S;\n impl Foo for S { <|> }\",\n             \"\n trait Foo {\n+    type Output;\n+\n+    const CONST: usize = 42;\n+\n     fn valid(some: u32) -> bool { false }\n     fn foo(some: u32) -> bool;\n }"}, {"sha": "5f8ba3df6663451f3a5facc09d43c555b11fc696", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2b2cd829b0f95aef338227deb05ec7503dae9b6c/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2cd829b0f95aef338227deb05ec7503dae9b6c/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=2b2cd829b0f95aef338227deb05ec7503dae9b6c", "patch": "@@ -163,11 +163,7 @@ impl AstEditor<ast::ItemList> {\n         self.do_make_multiline()\n     }\n \n-    pub fn append_functions<'a>(&mut self, fns: impl Iterator<Item = &'a ast::FnDef>) {\n-        fns.for_each(|it| self.append_function(it))\n-    }\n-\n-    pub fn append_function(&mut self, fn_def: &ast::FnDef) {\n+    pub fn append_item(&mut self, item: &ast::ImplItem) {\n         let (indent, position) = match self.ast().impl_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or(\"\").to_string(),\n@@ -182,8 +178,7 @@ impl AstEditor<ast::ItemList> {\n             },\n         };\n         let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n-        let to_insert: ArrayVec<[SyntaxElement; 2]> =\n-            [ws.ws().into(), fn_def.syntax().into()].into();\n+        let to_insert: ArrayVec<[SyntaxElement; 2]> = [ws.ws().into(), item.syntax().into()].into();\n         self.ast = self.insert_children(position, to_insert.into_iter());\n     }\n \n@@ -192,6 +187,23 @@ impl AstEditor<ast::ItemList> {\n     }\n }\n \n+impl AstEditor<ast::ImplItem> {\n+    pub fn strip_attrs_and_docs(&mut self) {\n+        while let Some(start) = self\n+            .ast()\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n+        {\n+            let end = match start.next_sibling_or_token() {\n+                Some(el) if el.kind() == WHITESPACE => el,\n+                Some(_) | None => start,\n+            };\n+            self.ast = self.replace_children(RangeInclusive::new(start, end), iter::empty());\n+        }\n+    }\n+}\n+\n impl AstEditor<ast::FnDef> {\n     pub fn set_body(&mut self, body: &ast::Block) {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n@@ -210,21 +222,6 @@ impl AstEditor<ast::FnDef> {\n         let replace_range = RangeInclusive::new(old_body_or_semi, old_body_or_semi);\n         self.ast = self.replace_children(replace_range, to_insert.into_iter())\n     }\n-\n-    pub fn strip_attrs_and_docs(&mut self) {\n-        while let Some(start) = self\n-            .ast()\n-            .syntax()\n-            .children_with_tokens()\n-            .find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n-        {\n-            let end = match start.next_sibling_or_token() {\n-                Some(el) if el.kind() == WHITESPACE => el,\n-                Some(_) | None => start,\n-            };\n-            self.ast = self.replace_children(RangeInclusive::new(start, end), iter::empty());\n-        }\n-    }\n }\n \n pub struct AstBuilder<N: AstNode> {"}]}