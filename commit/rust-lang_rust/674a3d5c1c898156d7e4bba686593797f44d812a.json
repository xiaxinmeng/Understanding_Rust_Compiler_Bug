{"sha": "674a3d5c1c898156d7e4bba686593797f44d812a", "node_id": "C_kwDOAAsO6NoAKDY3NGEzZDVjMWM4OTgxNTZkN2U0YmJhNjg2NTkzNzk3ZjQ0ZDgxMmE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-01T19:05:20Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-25T15:14:33Z"}, "message": "diagnostics: exclude indirect private deps from trait impl suggest\n\nFixes #88696", "tree": {"sha": "50deb8a27540e47ddb5b5f6dd9c04285891924ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50deb8a27540e47ddb5b5f6dd9c04285891924ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/674a3d5c1c898156d7e4bba686593797f44d812a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/674a3d5c1c898156d7e4bba686593797f44d812a", "html_url": "https://github.com/rust-lang/rust/commit/674a3d5c1c898156d7e4bba686593797f44d812a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/674a3d5c1c898156d7e4bba686593797f44d812a/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "html_url": "https://github.com/rust-lang/rust/commit/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "8bf60c40b8528c6f8075852f39891a9c8f063bb4", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/674a3d5c1c898156d7e4bba686593797f44d812a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a3d5c1c898156d7e4bba686593797f44d812a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=674a3d5c1c898156d7e4bba686593797f44d812a", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -857,6 +857,27 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => def_kind.article(),\n         }\n     }\n+\n+    /// Return `true` if the supplied `CrateNum` is \"user-visible,\" meaning either a [public]\n+    /// dependency, or a [direct] private dependency. This is used to decide whether the crate can\n+    /// be shown in `impl` suggestions.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function assumes `key` exists.\n+    ///\n+    /// [public]: TyCtxt::is_private_dep\n+    /// [direct]: rustc_session::cstore::ExternCrate::is_direct\n+    pub fn is_user_visible_dep(self, key: CrateNum) -> bool {\n+        // | Private | Direct | Visible |                    |\n+        // |---------|--------|---------|--------------------|\n+        // | Yes     | Yes    | Yes     | !(true && !true)   |\n+        // | No      | Yes    | Yes     | !(false && !true)  |\n+        // | Yes     | No     | No      | !(true && !false)  |\n+        // | No      | No     | Yes     | !(false && !false) |\n+        !(self.is_private_dep(key)\n+            && !self.extern_crate(key.as_def_id()).expect(\"crate must exist\").is_direct())\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "d2cb8971708d6d34766e280bd2dcc3f14f282d7c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/674a3d5c1c898156d7e4bba686593797f44d812a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a3d5c1c898156d7e4bba686593797f44d812a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=674a3d5c1c898156d7e4bba686593797f44d812a", "patch": "@@ -1775,6 +1775,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     || !trait_pred\n                         .skip_binder()\n                         .is_constness_satisfied_by(self.tcx.constness(def_id))\n+                    || !self.tcx.is_user_visible_dep(def_id.krate)\n                 {\n                     return None;\n                 }"}, {"sha": "745fdef154632c355143f8db9fcbb32422b2f1c2", "filename": "tests/ui/suggestions/issue-88696.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/674a3d5c1c898156d7e4bba686593797f44d812a/tests%2Fui%2Fsuggestions%2Fissue-88696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a3d5c1c898156d7e4bba686593797f44d812a/tests%2Fui%2Fsuggestions%2Fissue-88696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-88696.rs?ref=674a3d5c1c898156d7e4bba686593797f44d812a", "patch": "@@ -0,0 +1,14 @@\n+// This test case should ensure that miniz_oxide isn't\n+// suggested, since it's not a direct dependency.\n+\n+fn a() -> Result<u64, i32> {\n+    Err(1)\n+}\n+\n+fn b() -> Result<u32, i32> {\n+    a().into() //~ERROR [E0277]\n+}\n+\n+fn main() {\n+    let _ = dbg!(b());\n+}"}, {"sha": "4947269d75934c372dc26a350555a9218094d8a8", "filename": "tests/ui/suggestions/issue-88696.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/674a3d5c1c898156d7e4bba686593797f44d812a/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/674a3d5c1c898156d7e4bba686593797f44d812a/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr?ref=674a3d5c1c898156d7e4bba686593797f44d812a", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `Result<u32, i32>: From<Result<u64, i32>>` is not satisfied\n+  --> $DIR/issue-88696.rs:9:9\n+   |\n+LL |     a().into()\n+   |         ^^^^ the trait `From<Result<u64, i32>>` is not implemented for `Result<u32, i32>`\n+   |\n+   = note: required for `Result<u64, i32>` to implement `Into<Result<u32, i32>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}