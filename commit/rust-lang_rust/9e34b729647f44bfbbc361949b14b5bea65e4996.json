{"sha": "9e34b729647f44bfbbc361949b14b5bea65e4996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMzRiNzI5NjQ3ZjQ0YmZiYmMzNjE5NDliMTRiNWJlYTY1ZTQ5OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T12:11:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T12:11:17Z"}, "message": "Auto merge of #77253 - jyn514:crate-link, r=Manishearth\n\nResolve `crate` in intra-doc links properly across crates\n\nCloses https://github.com/rust-lang/rust/issues/77193; see https://github.com/rust-lang/rust/issues/77193#issuecomment-699065946 for an explanation of what's going on here.\n~~This also fixes the BTreeMap docs that have been broken for a while; see the description on the second commit for why and how.~~ Nope, see the second commit for why the link had to be changed.\n\nr? `@Manishearth`\ncc `@dylni`\n\n`@dylni` note that this doesn't solve your original problem - now _both_ `with_code` and `crate::with_code` will be broken links. However this will fix a lot of other broken links (in particular I think https://docs.rs/sqlx/0.4.0-beta.1/sqlx/query/struct.Query.html is because of this bug). I'll open another issue for resolving additional docs in the new scope.", "tree": {"sha": "5a96bb441ab40aaa69818812e418898c805456bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a96bb441ab40aaa69818812e418898c805456bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e34b729647f44bfbbc361949b14b5bea65e4996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e34b729647f44bfbbc361949b14b5bea65e4996", "html_url": "https://github.com/rust-lang/rust/commit/9e34b729647f44bfbbc361949b14b5bea65e4996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e34b729647f44bfbbc361949b14b5bea65e4996/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26373fb4baa9c5b8a7a1e2821fcfa930a85d327d", "url": "https://api.github.com/repos/rust-lang/rust/commits/26373fb4baa9c5b8a7a1e2821fcfa930a85d327d", "html_url": "https://github.com/rust-lang/rust/commit/26373fb4baa9c5b8a7a1e2821fcfa930a85d327d"}, {"sha": "406584621a4e2d3752b2444c5bed2218447f0bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/406584621a4e2d3752b2444c5bed2218447f0bfe", "html_url": "https://github.com/rust-lang/rust/commit/406584621a4e2d3752b2444c5bed2218447f0bfe"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "3fb03a5412e4f9276e1cc84cecb9e9060ef7aa81", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e34b729647f44bfbbc361949b14b5bea65e4996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e34b729647f44bfbbc361949b14b5bea65e4996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=9e34b729647f44bfbbc361949b14b5bea65e4996", "patch": "@@ -811,7 +811,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// types that can be `==` without being identical. See the [module-level\n     /// documentation] for more.\n     ///\n-    /// [module-level documentation]: crate::collections#insert-and-complex-keys\n+    /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///"}, {"sha": "cf94ea384fd605a50cf5d7d36954374c29ae51ec", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9e34b729647f44bfbbc361949b14b5bea65e4996", "patch": "@@ -914,7 +914,7 @@ impl LinkCollector<'_, '_> {\n                 parent_node\n             };\n \n-            let module_id = if let Some(id) = base_node {\n+            let mut module_id = if let Some(id) = base_node {\n                 id\n             } else {\n                 debug!(\"attempting to resolve item without parent module: {}\", path_str);\n@@ -937,6 +937,17 @@ impl LinkCollector<'_, '_> {\n                     resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n                     path_str = &resolved_self;\n                 }\n+            } else if path_str.starts_with(\"crate::\") {\n+                use rustc_span::def_id::CRATE_DEF_INDEX;\n+\n+                // HACK(jynelson): rustc_resolve thinks that `crate` is the crate currently being documented.\n+                // But rustdoc wants it to mean the crate this item was originally present in.\n+                // To work around this, remove it and resolve relative to the crate root instead.\n+                // HACK(jynelson)(2): If we just strip `crate::` then suddenly primitives become ambiguous\n+                // (consider `crate::char`). Instead, change it to `self::`. This works because 'self' is now the crate root.\n+                resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n+                path_str = &resolved_self;\n+                module_id = DefId { krate: item.def_id.krate, index: CRATE_DEF_INDEX };\n             }\n \n             match self.resolve_with_disambiguator("}, {"sha": "a37848e23d9931a27e52cb00cb230b2490fcc3e0", "filename": "src/test/rustdoc/auxiliary/intra-link-cross-crate-crate.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-cross-crate-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-cross-crate-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-cross-crate-crate.rs?ref=9e34b729647f44bfbbc361949b14b5bea65e4996", "patch": "@@ -0,0 +1,5 @@\n+#![crate_name = \"inner\"]\n+\n+/// Links to [crate::g]\n+pub fn f() {}\n+pub fn g() {}"}, {"sha": "edf544708b628e9bcd081f5a3a26f2bf2bdd777c", "filename": "src/test/rustdoc/intra-link-cross-crate-crate.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Ftest%2Frustdoc%2Fintra-link-cross-crate-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e34b729647f44bfbbc361949b14b5bea65e4996/src%2Ftest%2Frustdoc%2Fintra-link-cross-crate-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-cross-crate-crate.rs?ref=9e34b729647f44bfbbc361949b14b5bea65e4996", "patch": "@@ -0,0 +1,6 @@\n+// aux-build:intra-link-cross-crate-crate.rs\n+// build-aux-docs\n+#![crate_name = \"outer\"]\n+extern crate inner;\n+// @has outer/fn.f.html '//a[@href=\"../inner/fn.g.html\"]' \"crate::g\"\n+pub use inner::f;"}]}