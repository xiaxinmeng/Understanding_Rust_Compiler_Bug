{"sha": "d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTc0YTMzNTZiOGUzMTFhYWIxNzFiZjMxNjU2MGIyZjNkN2Y1Yzg=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-30T13:37:26Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-30T13:37:26Z"}, "message": "Use vec![x; n] instead of iter::repeat(x).take(n).collect()", "tree": {"sha": "e39668f2173fa057d0f703064e2da06a8f14c33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39668f2173fa057d0f703064e2da06a8f14c33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "html_url": "https://github.com/rust-lang/rust/commit/d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e74a3356b8e311aab171bf316560b2f3d7f5c8/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ca3907e00211b2f645133af3574ca22e4f4f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca3907e00211b2f645133af3574ca22e4f4f4d", "html_url": "https://github.com/rust-lang/rust/commit/b1ca3907e00211b2f645133af3574ca22e4f4f4d"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "61b5886e7832d86371236a28449ca2e2222c077a", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1e74a3356b8e311aab171bf316560b2f3d7f5c8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e74a3356b8e311aab171bf316560b2f3d7f5c8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "patch": "@@ -295,12 +295,10 @@ impl AllocDecodingState {\n     }\n \n     pub fn new(data_offsets: Vec<u32>) -> AllocDecodingState {\n-        let decoding_state: Vec<_> = ::std::iter::repeat(Mutex::new(State::Empty))\n-            .take(data_offsets.len())\n-            .collect();\n+        let decoding_state = vec![Mutex::new(State::Empty); data_offsets.len()];\n \n         AllocDecodingState {\n-            decoding_state: decoding_state,\n+            decoding_state,\n             data_offsets,\n         }\n     }"}, {"sha": "b463faef1921ad966b24a97ac3b4e0494074d6c4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1e74a3356b8e311aab171bf316560b2f3d7f5c8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e74a3356b8e311aab171bf316560b2f3d7f5c8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d1e74a3356b8e311aab171bf316560b2f3d7f5c8", "patch": "@@ -34,7 +34,6 @@ use hir::def_id::DefId;\n use infer::{self, InferCtxt};\n use infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n-use std::iter;\n use syntax::ast;\n use session::DiagnosticMessageId;\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n@@ -1095,10 +1094,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n-                let underscores = iter::repeat(\"_\")\n-                                      .take(expected_args.len())\n-                                      .collect::<Vec<_>>()\n-                                      .join(\", \");\n+                let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_with_applicability(\n                     found_span,\n                     &format!("}]}