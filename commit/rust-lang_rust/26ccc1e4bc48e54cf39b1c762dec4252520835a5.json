{"sha": "26ccc1e4bc48e54cf39b1c762dec4252520835a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Y2NjMWU0YmM0OGU1NGNmMzliMWM3NjJkZWM0MjUyNTIwODM1YTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-17T16:22:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-18T09:38:07Z"}, "message": "add a step counter that can be changed during interpretation", "tree": {"sha": "dc9326c8a059a260d9018796130974d0cd6304b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9326c8a059a260d9018796130974d0cd6304b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ccc1e4bc48e54cf39b1c762dec4252520835a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYLsv/AAoJEFbW7qD8Z6xG01EQAJ/2l70prCYjKm0q2M9XxxcM\n30jy8XHg1qlPRIxSjSIS0VMk5ROtNjUfS6zEYpsNZSOTLVf9yjs00AbNGRrsuj/0\nt0gfFHs2ey0YnUYvoWID0vdYS5LboFq3lb+374fWkm1+DT5mUVTFfrA08iVNjbCH\nmioFjryCiRr0n50nh5ach3x0vzEScEPyge+PCxPMCbwhQ5WDVHZp3lyHy4KDIJY1\naDMP18uuLDWJD8nqmiOcndyA0IQ8plPEZhFVfe2vCA/+DBI4zi9VUrhdq9S7PECg\nd9Ud9F0QgheLP9kzW1QSakRcqWf/7Z74QOsWIWWSnFVAvLxlnuMs9nERyUnj8kkf\ncbQUp6x9sxJ75McvAAL76OWrEtRTKMlwHxM1/+GHY8UYO5/PQ0WRRBNWoq8KLtLO\nS5n+5XFgjciDSsqwyWcPi6tM4SInEXlNkil8m3DI05qhnl+xZ/1t/JB8PNGpmTd9\nAzkpxfZ/ZE/kpyvlb6MQxrunz45vThDpAK/bIEwz62ZPk4gpEEaPhkN7xOPg9fm3\nnLij1n4mTHzcK6HoZrR5zdhvZfLj+QPOrbfUmDwqPz694hFK45+uh1QmSHhdLHxb\nh1uYA2ae73YPO/emsNcMSs/Cvk77fw8aOpQbGcArBI2QHasrMOdL/NRpMQF3eIf8\ntoX0n1GaRDQsRb2rjr9x\n=jtgW\n-----END PGP SIGNATURE-----", "payload": "tree dc9326c8a059a260d9018796130974d0cd6304b6\nparent b10c53031ab87fc36fd0666467f5dd37b7f2cad1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479399754 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479461887 +0100\n\nadd a step counter that can be changed during interpretation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ccc1e4bc48e54cf39b1c762dec4252520835a5", "html_url": "https://github.com/rust-lang/rust/commit/26ccc1e4bc48e54cf39b1c762dec4252520835a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ccc1e4bc48e54cf39b1c762dec4252520835a5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10c53031ab87fc36fd0666467f5dd37b7f2cad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10c53031ab87fc36fd0666467f5dd37b7f2cad1", "html_url": "https://github.com/rust-lang/rust/commit/b10c53031ab87fc36fd0666467f5dd37b7f2cad1"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "d5057b5fdf31a07768f130fe95a957d4e9cbd0c6", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26ccc1e4bc48e54cf39b1c762dec4252520835a5/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ccc1e4bc48e54cf39b1c762dec4252520835a5/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=26ccc1e4bc48e54cf39b1c762dec4252520835a5", "patch": "@@ -40,6 +40,11 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n \n     /// The maximum number of stack frames allowed\n     stack_limit: usize,\n+\n+    /// The maximum number of operations that may be executed.\n+    /// This prevents infinite loops and huge computations from freezing up const eval.\n+    /// Remove once halting problem is solved.\n+    steps_remaining: u64,\n }\n \n /// A stack frame.\n@@ -162,13 +167,14 @@ pub enum StackPopCleanup {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, memory_size: usize, stack_limit: usize, step_limit: u64) -> Self {\n         EvalContext {\n             tcx: tcx,\n             memory: Memory::new(&tcx.data_layout, memory_size),\n             globals: HashMap::new(),\n             stack: Vec::new(),\n             stack_limit: stack_limit,\n+            steps_remaining: step_limit,\n         }\n     }\n \n@@ -500,6 +506,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Aggregate(ref kind, ref operands) => {\n+                self.inc_step_counter_and_check_limit(operands.len() as u64)?;\n                 use rustc::ty::layout::Layout::*;\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n@@ -619,6 +626,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => bug!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n                 };\n                 let elem_size = self.type_size(elem_ty).expect(\"repeat element type must be sized\");\n+                self.inc_step_counter_and_check_limit(length as u64)?;\n                 let value = self.eval_operand(operand)?;\n \n                 // FIXME(solson)\n@@ -1696,7 +1704,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     step_limit: u64,\n     stack_limit: usize,\n ) {\n-    let mut ecx = EvalContext::new(tcx, memory_size, stack_limit);\n+    let mut ecx = EvalContext::new(tcx, memory_size, stack_limit, step_limit);\n     let mir = ecx.load_mir(def_id).expect(\"main function's MIR not found\");\n \n     ecx.push_stack_frame(\n@@ -1708,7 +1716,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         StackPopCleanup::None,\n     ).expect(\"could not allocate first stack frame\");\n \n-    for _ in 0..step_limit {\n+    loop {\n         match ecx.step() {\n             Ok(true) => {}\n             Ok(false) => return,\n@@ -1718,7 +1726,6 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             }\n         }\n     }\n-    report(tcx, &ecx, EvalError::ExecutionTimeLimitReached);\n }\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {"}, {"sha": "1d075fe0e9ed2d3186da52d06f6ad4e152d2e7e7", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26ccc1e4bc48e54cf39b1c762dec4252520835a5/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ccc1e4bc48e54cf39b1c762dec4252520835a5/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=26ccc1e4bc48e54cf39b1c762dec4252520835a5", "patch": "@@ -10,7 +10,7 @@ use super::{\n     Global,\n     MirRef,\n };\n-use error::EvalResult;\n+use error::{EvalResult, EvalError};\n use rustc::mir;\n use rustc::ty::{subst, self};\n use rustc::hir::def_id::DefId;\n@@ -20,8 +20,18 @@ use std::cell::Ref;\n use syntax::codemap::Span;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n+    pub fn inc_step_counter_and_check_limit(&mut self, n: u64) -> EvalResult<'tcx, ()> {\n+        self.steps_remaining = self.steps_remaining.saturating_sub(n);\n+        if self.steps_remaining > 0 {\n+            Ok(())\n+        } else {\n+            Err(EvalError::ExecutionTimeLimitReached)\n+        }\n+    }\n+\n     /// Returns true as long as there are more things to do.\n     pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n+        self.inc_step_counter_and_check_limit(1)?;\n         if self.stack.is_empty() {\n             return Ok(false);\n         }"}, {"sha": "d489342b8599c3a8efa64ab86bb7e1897e9867b7", "filename": "tests/compile-fail/repeat2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26ccc1e4bc48e54cf39b1c762dec4252520835a5/tests%2Fcompile-fail%2Frepeat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ccc1e4bc48e54cf39b1c762dec4252520835a5/tests%2Fcompile-fail%2Frepeat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frepeat2.rs?ref=26ccc1e4bc48e54cf39b1c762dec4252520835a5", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let data: [u8; 1024*1024*1024] = [42; 1024*1024*1024];\n+    //~^ ERROR: reached the configured maximum execution time\n+    assert_eq!(data.len(), 1024*1024*1024);\n+}"}]}