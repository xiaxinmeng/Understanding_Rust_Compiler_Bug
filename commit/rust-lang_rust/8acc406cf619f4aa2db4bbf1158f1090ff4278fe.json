{"sha": "8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhY2M0MDZjZjYxOWY0YWEyZGI0YmJmMTE1OGYxMDkwZmY0Mjc4ZmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:56Z"}, "message": "Rollup merge of #46890 - arielb1:contributing-improvements, r=steveklabnik\n\nA few small improvements to the contributing docs\n\nr? @steveklabnik", "tree": {"sha": "370bfabef6c4a500777bdcb6523ceac05d92ad57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/370bfabef6c4a500777bdcb6523ceac05d92ad57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "html_url": "https://github.com/rust-lang/rust/commit/8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8acc406cf619f4aa2db4bbf1158f1090ff4278fe/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7767d84a68bc90a49b409516c6aed480f2483be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7767d84a68bc90a49b409516c6aed480f2483be4", "html_url": "https://github.com/rust-lang/rust/commit/7767d84a68bc90a49b409516c6aed480f2483be4"}, {"sha": "f68e11b4405e85d3d80242620b71b8de9d2c6dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68e11b4405e85d3d80242620b71b8de9d2c6dbd", "html_url": "https://github.com/rust-lang/rust/commit/f68e11b4405e85d3d80242620b71b8de9d2c6dbd"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "919d8329941a4b01e6337697db1f8da9f48728bd", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8acc406cf619f4aa2db4bbf1158f1090ff4278fe/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/8acc406cf619f4aa2db4bbf1158f1090ff4278fe/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "patch": "@@ -112,14 +112,17 @@ There are large number of options provided in this config file that will alter t\n configuration used in the build process. Some options to note:\n \n #### `[llvm]`:\n+- `assertions = true` = This enables LLVM assertions, which makes LLVM misuse cause an assertion failure instead of weird misbehavior. This also slows down the compiler's runtime by ~20%.\n - `ccache = true` - Use ccache when building llvm\n \n #### `[build]`:\n - `compiler-docs = true` - Build compiler documentation\n \n #### `[rust]`:\n-- `debuginfo = true` - Build a compiler with debuginfo\n-- `optimize = false` - Disable optimizations to speed up compilation of stage1 rust\n+- `debuginfo = true` - Build a compiler with debuginfo. Makes building rustc slower, but then you can use a debugger to debug `rustc`.\n+- `debuginfo-lines = true` - An alternative to `debuginfo = true` that doesn't let you use a debugger, but doesn't make building rustc slower and still gives you line numbers in backtraces.\n+- `debug-assertions = true` - Makes the log output of `debug!` work.\n+- `optimize = false` - Disable optimizations to speed up compilation of stage1 rust, but makes the stage1 compiler x100 slower.\n \n For more options, the `config.toml` file contains commented out defaults, with\n descriptions of what each option will do.\n@@ -273,6 +276,27 @@ build, you'll need to build rustdoc specially, since it's not normally built in\n stage 1. `python x.py build --stage 1 src/libstd src/tools/rustdoc` will build\n rustdoc and libstd, which will allow rustdoc to be run with that toolchain.)\n \n+### Out-of-tree builds\n+[out-of-tree-builds]: #out-of-tree-builds\n+\n+Rust's `x.py` script fully supports out-of-tree builds - it looks for\n+the Rust source code from the directory `x.py` was found in, but it\n+reads the `config.toml` configuration file from the directory it's\n+run in, and places all build artifacts within a subdirectory named `build`.\n+\n+This means that if you want to do an out-of-tree build, you can just do it:\n+```\n+$ cd my/build/dir\n+$ cp ~/my-config.toml config.toml # Or fill in config.toml otherwise\n+$ path/to/rust/x.py build\n+...\n+$ # This will use the Rust source code in `path/to/rust`, but build\n+$ # artifacts will now be in ./build\n+```\n+\n+It's absolutely fine to have multiple build directories with different\n+`config.toml` configurations using the same code.\n+\n ## Pull Requests\n [pull-requests]: #pull-requests\n \n@@ -446,14 +470,14 @@ failed to run: ~/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo build --ma\n If you haven't used the `[patch]`\n section of `Cargo.toml` before, there is [some relevant documentation about it\n in the cargo docs](http://doc.crates.io/manifest.html#the-patch-section). In\n-addition to that, you should read the \n+addition to that, you should read the\n [Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#overriding-dependencies)\n section of the documentation as well.\n \n Specifically, the following [section in Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#testing-a-bugfix) reveals what the problem is:\n \n > Next up we need to ensure that our lock file is updated to use this new version of uuid so our project uses the locally checked out copy instead of one from crates.io. The way [patch] works is that it'll load the dependency at ../path/to/uuid and then whenever crates.io is queried for versions of uuid it'll also return the local version.\n-> \n+>\n > This means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared uuid = \"1.0\" which means we'll only resolve to >= 1.0.0, < 2.0.0, and Cargo's greedy resolution algorithm also means that we'll resolve to the maximum version within that range. Typically this doesn't matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it's important to keep this in mind!\n \n This says that when we updated the submodule, the version number in our"}, {"sha": "c255294e790b71338162654703597c279f4d15f9", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8acc406cf619f4aa2db4bbf1158f1090ff4278fe/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/8acc406cf619f4aa2db4bbf1158f1090ff4278fe/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=8acc406cf619f4aa2db4bbf1158f1090ff4278fe", "patch": "@@ -35,20 +35,24 @@ The error levels that you can have are:\n ## Summary of Header Commands\n \n Header commands specify something about the entire test file as a\n-whole, instead of just a few lines inside the test.\n+whole. They are normally put right after the copyright comment, e.g.:\n+\n+```Rust\n+// Copyright blah blah blah\n+// except according to those terms.\n+\n+// ignore-test This doesn't actually work\n+```\n+\n+### Ignoring tests\n+\n+These are used to ignore the test in some situations, which means the test won't\n+be compiled or run.\n \n * `ignore-X` where `X` is a target detail or stage will ignore the test accordingly (see below)\n * `ignore-pretty` will not compile the pretty-printed test (this is done to test the pretty-printer, but might not always work)\n * `ignore-test` always ignores the test\n-* `ignore-lldb` and `ignore-gdb` will skip the debuginfo tests\n-* `min-{gdb,lldb}-version`\n-* `should-fail` indicates that the test should fail; used for \"meta testing\",\n-  where we test the compiletest program itself to check that it will generate\n-  errors in appropriate scenarios. This header is ignored for pretty-printer tests.\n-* `gate-test-X` where `X` is a feature marks the test as \"gate test\" for feature X.\n-  Such tests are supposed to ensure that the compiler errors when usage of a gated\n-  feature is attempted without the proper `#![feature(X)]` tag.\n-  Each unstable lang feature is required to have a gate test.\n+* `ignore-lldb` and `ignore-gdb` will skip a debuginfo test on that debugger.\n \n Some examples of `X` in `ignore-X`:\n \n@@ -58,6 +62,22 @@ Some examples of `X` in `ignore-X`:\n * Pointer width: `32bit`, `64bit`.\n * Stage: `stage0`, `stage1`, `stage2`.\n \n+### Other Header Commands\n+\n+* `min-{gdb,lldb}-version`\n+* `min-llvm-version`\n+* `must-compile-successfully` for UI tests, indicates that the test is supposed\n+  to compile, as opposed to the default where the test is supposed to error out.\n+* `compile-flags` passes extra command-line args to the compiler,\n+  e.g. `compile-flags -g` which forces debuginfo to be enabled.\n+* `should-fail` indicates that the test should fail; used for \"meta testing\",\n+  where we test the compiletest program itself to check that it will generate\n+  errors in appropriate scenarios. This header is ignored for pretty-printer tests.\n+* `gate-test-X` where `X` is a feature marks the test as \"gate test\" for feature X.\n+  Such tests are supposed to ensure that the compiler errors when usage of a gated\n+  feature is attempted without the proper `#![feature(X)]` tag.\n+  Each unstable lang feature is required to have a gate test.\n+\n ## Revisions\n \n Certain classes of tests support \"revisions\" (as of the time of this\n@@ -109,6 +129,12 @@ fails, we will print out the current output, but it is also saved in\n printed as part of the test failure message), so you can run `diff` and\n so forth.\n \n+Normally, the test-runner checks that UI tests fail compilation. If you want\n+to do a UI test for code that *compiles* (e.g. to test warnings, or if you\n+have a collection of tests, only some of which error out), you can use the\n+`// must-compile-successfully` header command to have the test runner instead\n+check that the test compiles successfully.\n+\n ### Editing and updating the reference files\n \n If you have changed the compiler's output intentionally, or you are"}]}