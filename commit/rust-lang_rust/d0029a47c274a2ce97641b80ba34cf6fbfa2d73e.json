{"sha": "d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMDI5YTQ3YzI3NGEyY2U5NzY0MWI4MGJhMzRjZjZmYmZhMmQ3M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-03T23:36:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T04:11:20Z"}, "message": "rollup merge of #21910: Manishearth/missing_stability\n\nCurrently, if a `#![staged_api]` crate contains an exported item without a stability marker (or inherited stability),\nthe item is useless.\n\nThis change introduces a check to ensure that all exported items have a defined stability.\n\nit also introduces the `unmarked_api` feature, which lets users import unmarked features. While this PR should in theory forbid these from existing,\nin practice we can't be so sure; so this lets users bypass this check instead of having to wait for the library and/or compiler to be fixed (since otherwise this is a hard error).\n\nr? @aturon", "tree": {"sha": "25e66a127143ade43d3afe8772d85a71762d3c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e66a127143ade43d3afe8772d85a71762d3c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "html_url": "https://github.com/rust-lang/rust/commit/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "html_url": "https://github.com/rust-lang/rust/commit/9db593c90af04dbf8f9bebb8a3650ff9609d10f2"}, {"sha": "a5ddacf001e4207efd732ecb04250783a64f36c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ddacf001e4207efd732ecb04250783a64f36c8", "html_url": "https://github.com/rust-lang/rust/commit/a5ddacf001e4207efd732ecb04250783a64f36c8"}], "stats": {"total": 189, "additions": 114, "deletions": 75}, "files": [{"sha": "326946837bf661ee0c158a212832a00cbd303525", "filename": "src/doc/reference.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -2432,6 +2432,8 @@ The currently implemented features of the reference compiler are:\n * `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n            not the SIMD interface we want to expose in the long term.\n \n+* `staged_api` - Allows usage of stability markers and `#![staged_api]` in a crate\n+\n * `struct_inherit` - Allows using struct inheritance, which is barely\n                      implemented and will probably be removed. Don't use this.\n \n@@ -2459,6 +2461,11 @@ The currently implemented features of the reference compiler are:\n                         which is considered wildly unsafe and will be\n                         obsoleted by language improvements.\n \n+* `unmarked_api` - Allows use of items within a `#![staged_api]` crate\n+                   which have not been marked with a stability marker.\n+                   Such items should not be allowed by the compiler to exist,\n+                   so if you need this there probably is a compiler bug.\n+\n * `associated_types` - Allows type aliases in traits. Experimental.\n \n If a feature is promoted to a language feature, then all existing programs will"}, {"sha": "3304bd4ae2952226f0fd3f0769280562e7a18300", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -14,6 +14,7 @@\n use session::Session;\n use lint;\n use middle::ty;\n+use middle::privacy::PublicItems;\n use metadata::csearch;\n use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n@@ -44,15 +45,16 @@ pub struct Index {\n // A private tree-walker for producing an Index.\n struct Annotator<'a> {\n     sess: &'a Session,\n-    index: Index,\n-    parent: Option<Stability>\n+    index: &'a mut Index,\n+    parent: Option<Stability>,\n+    export_map: &'a PublicItems,\n }\n \n impl<'a> Annotator<'a> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n     fn annotate<F>(&mut self, id: NodeId, use_parent: bool,\n-                   attrs: &Vec<Attribute>, item_sp: Span, f: F) where\n+                   attrs: &Vec<Attribute>, item_sp: Span, f: F, required: bool) where\n         F: FnOnce(&mut Annotator),\n     {\n         match attr::find_stability(self.sess.diagnostic(), attrs.as_slice(), item_sp) {\n@@ -70,7 +72,14 @@ impl<'a> Annotator<'a> {\n             }\n             None => {\n                 if use_parent {\n-                    self.parent.clone().map(|stab| self.index.local.insert(id, stab));\n+                    if let Some(stab) = self.parent.clone() {\n+                        self.index.local.insert(id, stab);\n+                    } else if self.index.staged_api && required\n+                           && self.export_map.contains(&id)\n+                           && !self.sess.opts.test {\n+                        self.sess.span_err(item_sp,\n+                                           \"This node does not have a stability attribute\");\n+                    }\n                 }\n                 f(self);\n             }\n@@ -93,11 +102,19 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n             _ => true,\n         };\n \n-        self.annotate(i.id, use_parent, &i.attrs, i.span, |v| visit::walk_item(v, i));\n+        // In case of a `pub use <mod>;`, we should not error since the stability\n+        // is inherited from the module itself\n+        let required = match i.node {\n+            ast::ItemUse(_) => i.vis != ast::Public,\n+            _ => true\n+        };\n+\n+        self.annotate(i.id, use_parent, &i.attrs, i.span,\n+                      |v| visit::walk_item(v, i), required);\n \n         if let ast::ItemStruct(ref sd, _) = i.node {\n             sd.ctor_id.map(|id| {\n-                self.annotate(id, true, &i.attrs, i.span, |_| {})\n+                self.annotate(id, true, &i.attrs, i.span, |_| {}, true)\n             });\n         }\n     }\n@@ -106,7 +123,7 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n                 _: &'v Block, sp: Span, _: NodeId) {\n         if let FkMethod(_, _, meth) = fk {\n             // Methods are not already annotated, so we annotate it\n-            self.annotate(meth.id, true, &meth.attrs, sp, |_| {});\n+            self.annotate(meth.id, true, &meth.attrs, sp, |_| {}, true);\n         }\n         // Items defined in a function body have no reason to have\n         // a stability attribute, so we don't recurse.\n@@ -126,27 +143,41 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n             TypeTraitItem(ref typedef) => (typedef.ty_param.id, &typedef.attrs,\n                                            typedef.ty_param.span),\n         };\n-        self.annotate(id, true, attrs, sp, |v| visit::walk_trait_item(v, t));\n+        self.annotate(id, true, attrs, sp, |v| visit::walk_trait_item(v, t), true);\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics) {\n         self.annotate(var.node.id, true, &var.node.attrs, var.span,\n-                      |v| visit::walk_variant(v, var, g))\n+                      |v| visit::walk_variant(v, var, g), true)\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n         self.annotate(s.node.id, true, &s.node.attrs, s.span,\n-                      |v| visit::walk_struct_field(v, s));\n+                      |v| visit::walk_struct_field(v, s), true);\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n-        self.annotate(i.id, true, &i.attrs, i.span, |_| {});\n+        self.annotate(i.id, true, &i.attrs, i.span, |_| {}, true);\n     }\n }\n \n impl Index {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(sess: &Session, krate: &Crate) -> Index {\n+    pub fn build(&mut self, sess: &Session, krate: &Crate, export_map: &PublicItems) {\n+        if !self.staged_api {\n+            return;\n+        }\n+        let mut annotator = Annotator {\n+            sess: sess,\n+            index: self,\n+            parent: None,\n+            export_map: export_map,\n+        };\n+        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n+                           |v| visit::walk_crate(v, krate), true);\n+    }\n+\n+    pub fn new(krate: &Crate) -> Index {\n         let mut staged_api = false;\n         for attr in &krate.attrs {\n             if attr.name().get() == \"staged_api\" {\n@@ -159,22 +190,11 @@ impl Index {\n                 }\n             }\n         }\n-        let index = Index {\n+        Index {\n             staged_api: staged_api,\n             local: NodeMap(),\n             extern_cache: DefIdMap()\n-        };\n-        if !staged_api {\n-            return index;\n         }\n-        let mut annotator = Annotator {\n-            sess: sess,\n-            index: index,\n-            parent: None\n-        };\n-        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n-                           |v| visit::walk_crate(v, krate));\n-        annotator.index\n     }\n }\n \n@@ -234,10 +254,19 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             None => {\n                 // This is an 'unmarked' API, which should not exist\n                 // in the standard library.\n-                self.tcx.sess.span_err(span, \"use of unmarked library feature\");\n-                self.tcx.sess.span_note(span, \"this is either a bug in the library you are \\\n-                                               using or a bug in the compiler - there is \\\n-                                               no way to use this feature\");\n+                if self.tcx.sess.features.borrow().unmarked_api {\n+                    self.tcx.sess.span_warn(span, \"use of unmarked library feature\");\n+                    self.tcx.sess.span_note(span, \"this is either a bug in the library you are \\\n+                                                   using and a bug in the compiler - please \\\n+                                                   report it in both places\");\n+                } else {\n+                    self.tcx.sess.span_err(span, \"use of unmarked library feature\");\n+                    self.tcx.sess.span_note(span, \"this is either a bug in the library you are \\\n+                                                   using and a bug in the compiler - please \\\n+                                                   report it in both places\");\n+                    self.tcx.sess.span_note(span, \"use #![feature(unmarked_api)] in the \\\n+                                                   crate attributes to override this\");\n+                }\n             }\n         }\n     }"}, {"sha": "8ede037594a007557d57fae70632df52507d9313", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -594,9 +594,6 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"loop checking\", (), |_|\n          middle::check_loop::check_crate(&sess, krate));\n \n-    let stability_index = time(time_passes, \"stability index\", (), |_|\n-                               stability::Index::build(&sess, krate));\n-\n     time(time_passes, \"static item recursion checking\", (), |_|\n          middle::check_static_recursion::check_crate(&sess, krate, &def_map, &ast_map));\n \n@@ -608,7 +605,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                             freevars,\n                             region_map,\n                             lang_items,\n-                            stability_index);\n+                            stability::Index::new(krate));\n \n     // passes are timed inside typeck\n     typeck::check_crate(&ty_cx, trait_map);\n@@ -628,6 +625,10 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n             time(time_passes, \"privacy checking\", maps, |(a, b)|\n                  rustc_privacy::check_crate(&ty_cx, &export_map, a, b));\n \n+    // Do not move this check past lint\n+    time(time_passes, \"stability index\", (), |_|\n+         ty_cx.stability.borrow_mut().build(&ty_cx.sess, krate, &public_items));\n+\n     time(time_passes, \"intrinsic checking\", (), |_|\n          middle::intrinsicck::check_crate(&ty_cx));\n "}, {"sha": "7dc0d9be53924f9103e1872dc4cf023bbc723dea", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -125,7 +125,6 @@ fn test_env<F>(source_string: &str,\n         resolve::resolve_crate(&sess, &ast_map, &lang_items, krate, resolve::MakeGlobMap::No);\n     let named_region_map = resolve_lifetime::krate(&sess, krate, &def_map);\n     let region_map = region::resolve_crate(&sess, krate);\n-    let stability_index = stability::Index::build(&sess, krate);\n     let tcx = ty::mk_ctxt(sess,\n                           &arenas,\n                           def_map,\n@@ -134,7 +133,7 @@ fn test_env<F>(source_string: &str,\n                           freevars,\n                           region_map,\n                           lang_items,\n-                          stability_index);\n+                          stability::Index::new(krate));\n     let infcx = infer::new_infer_ctxt(&tcx);\n     body(Env { infcx: &infcx });\n     infcx.resolve_regions_and_report_errors(ast::CRATE_NODE_ID);"}, {"sha": "9de5fd1c770eccafd2d9d140ed67adba3da75aae", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -45,6 +45,7 @@ pub mod scoped;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod __impl {\n     pub use super::imp::Key as KeyInner;\n     pub use super::imp::destroy_value;"}, {"sha": "d7a51e1149f30b0931636d3e551a0d9e4410d976", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -119,6 +119,9 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows use of #[staged_api]\n     (\"staged_api\", \"1.0.0\", Active),\n+\n+    // Allows using items which are missing stability attributes\n+    (\"unmarked_api\", \"1.0.0\", Active)\n ];\n \n enum Status {\n@@ -145,6 +148,7 @@ pub struct Features {\n     pub quote: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n+    pub unmarked_api: bool,\n     pub lib_features: Vec<(InternedString, Span)>\n }\n \n@@ -157,6 +161,7 @@ impl Features {\n             quote: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n+            unmarked_api: false,\n             lib_features: Vec::new()\n         }\n     }\n@@ -566,6 +571,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         quote: cx.has_feature(\"quote\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n+        unmarked_api: cx.has_feature(\"unmarked_api\"),\n         lib_features: unknown_features\n     }\n }"}, {"sha": "7ac3925fb24766385d7958742fa5dc49d84b44f0", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -11,6 +11,7 @@\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![staged_api]\n+#![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]\n@@ -31,8 +32,6 @@ pub fn unstable() {}\n #[unstable(feature = \"test_feature\", reason = \"text\")]\n pub fn unstable_text() {}\n \n-pub fn unmarked() {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stable() {}\n #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -61,8 +60,6 @@ impl MethodTester {\n     #[unstable(feature = \"test_feature\", reason = \"text\")]\n     pub fn method_unstable_text(&self) {}\n \n-    pub fn method_unmarked(&self) {}\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn method_stable(&self) {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -79,6 +76,7 @@ impl MethodTester {\n     pub fn method_frozen_text(&self) {}\n }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n pub trait Trait {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n     #[deprecated(since = \"1.0.0\")]\n@@ -99,8 +97,6 @@ pub trait Trait {\n     #[unstable(feature = \"test_feature\", reason = \"text\")]\n     fn trait_unstable_text(&self) {}\n \n-    fn trait_unmarked(&self) {}\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trait_stable(&self) {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -130,7 +126,6 @@ pub struct DeprecatedStruct { pub i: int }\n pub struct DeprecatedUnstableStruct { pub i: int }\n #[unstable(feature = \"test_feature\")]\n pub struct UnstableStruct { pub i: int }\n-pub struct UnmarkedStruct { pub i: int }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableStruct { pub i: int }\n \n@@ -142,10 +137,10 @@ pub struct DeprecatedUnitStruct;\n pub struct DeprecatedUnstableUnitStruct;\n #[unstable(feature = \"test_feature\")]\n pub struct UnstableUnitStruct;\n-pub struct UnmarkedUnitStruct;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n pub enum Enum {\n     #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n     #[deprecated(since = \"1.0.0\")]\n@@ -156,7 +151,6 @@ pub enum Enum {\n     #[unstable(feature = \"test_feature\")]\n     UnstableVariant,\n \n-    UnmarkedVariant,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     StableVariant,\n }\n@@ -169,7 +163,6 @@ pub struct DeprecatedTupleStruct(pub int);\n pub struct DeprecatedUnstableTupleStruct(pub int);\n #[unstable(feature = \"test_feature\")]\n pub struct UnstableTupleStruct(pub int);\n-pub struct UnmarkedTupleStruct(pub int);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(pub int);\n "}, {"sha": "4cf75bf15de275bd44262c8812893786967c4b7f", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -20,7 +20,7 @@\n #![staged_api]\n \n #[macro_use]\n-extern crate lint_stability; //~ ERROR: use of unmarked library feature\n+extern crate lint_stability;\n \n mod cross_crate {\n     extern crate stability_cfg1;\n@@ -61,10 +61,6 @@ mod cross_crate {\n         foo.method_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n         foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n \n-        unmarked(); //~ ERROR use of unmarked library feature\n-        foo.method_unmarked(); //~ ERROR use of unmarked library feature\n-        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n-\n         stable();\n         foo.method_stable();\n         foo.trait_stable();\n@@ -77,28 +73,24 @@ mod cross_crate {\n         let _ = DeprecatedUnstableStruct { i: 0 }; //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n         let _ = UnstableStruct { i: 0 }; //~ WARNING use of unstable library feature\n-        let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked library feature\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n         let _ = UnstableUnitStruct; //~ WARNING use of unstable library feature\n-        let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked library feature\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n         let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n         let _ = Enum::UnstableVariant; //~ WARNING use of unstable library feature\n-        let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked library feature\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n         let _ = UnstableTupleStruct (1); //~ WARNING use of unstable library feature\n-        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked library feature\n         let _ = StableTupleStruct (1);\n \n         // At the moment, the lint checker only checks stability in\n@@ -123,7 +115,6 @@ mod cross_crate {\n         //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n         foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n         foo.trait_stable();\n     }\n \n@@ -136,7 +127,6 @@ mod cross_crate {\n         //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n         foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n         foo.trait_stable();\n     }\n \n@@ -183,8 +173,6 @@ mod this_crate {\n     #[unstable(feature = \"test_feature\", reason = \"text\")]\n     pub fn unstable_text() {}\n \n-    pub fn unmarked() {}\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stable() {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -206,8 +194,6 @@ mod this_crate {\n         #[unstable(feature = \"test_feature\", reason = \"text\")]\n         pub fn method_unstable_text(&self) {}\n \n-        pub fn method_unmarked(&self) {}\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub fn method_stable(&self) {}\n         #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -227,8 +213,6 @@ mod this_crate {\n         #[unstable(feature = \"test_feature\", reason = \"text\")]\n         fn trait_unstable_text(&self) {}\n \n-        fn trait_unmarked(&self) {}\n-\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn trait_stable(&self) {}\n         #[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]\n@@ -242,7 +226,6 @@ mod this_crate {\n     pub struct DeprecatedStruct { i: isize }\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableStruct { i: isize }\n-    pub struct UnmarkedStruct { i: isize }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableStruct { i: isize }\n \n@@ -251,7 +234,6 @@ mod this_crate {\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableUnitStruct;\n-    pub struct UnmarkedUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n@@ -262,7 +244,6 @@ mod this_crate {\n         #[unstable(feature = \"test_feature\")]\n         UnstableVariant,\n \n-        UnmarkedVariant,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n@@ -272,7 +253,6 @@ mod this_crate {\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableTupleStruct(isize);\n-    pub struct UnmarkedTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n \n@@ -299,10 +279,6 @@ mod this_crate {\n         foo.method_unstable_text();\n         foo.trait_unstable_text();\n \n-        unmarked();\n-        foo.method_unmarked();\n-        foo.trait_unmarked();\n-\n         stable();\n         foo.method_stable();\n         foo.trait_stable();\n@@ -313,22 +289,18 @@ mod this_crate {\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = UnstableStruct { i: 0 };\n-        let _ = UnmarkedStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n         let _ = UnstableUnitStruct;\n-        let _ = UnmarkedUnitStruct;\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n         let _ = Enum::UnstableVariant;\n-        let _ = Enum::UnmarkedVariant;\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = UnstableTupleStruct (1);\n-        let _ = UnmarkedTupleStruct (1);\n         let _ = StableTupleStruct (1);\n     }\n \n@@ -337,7 +309,6 @@ mod this_crate {\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n-        foo.trait_unmarked();\n         foo.trait_stable();\n     }\n \n@@ -346,7 +317,6 @@ mod this_crate {\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n-        foo.trait_unmarked();\n         foo.trait_stable();\n     }\n "}, {"sha": "14dd983161b4a0219a39ed4ea6559414b34dc6ed", "filename": "src/test/compile-fail/missing-stability.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs?ref=d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that exported items without stability attributes cause an error\n+\n+#![crate_type=\"lib\"]\n+#![feature(staged_api)]\n+#![staged_api]\n+\n+pub fn unmarked() {\n+    //~^ ERROR This node does not have a stability attribute\n+    ()\n+}\n+\n+#[unstable(feature = \"foo\")]\n+pub mod foo {\n+    // #[unstable] is inherited\n+    pub fn unmarked() {}\n+}\n+\n+#[stable(feature = \"bar\", since=\"1.0.0\")]\n+pub mod bar {\n+    // #[stable] is not inherited\n+    pub fn unmarked() {}\n+    //~^ ERROR This node does not have a stability attribute\n+}\n\\ No newline at end of file"}]}