{"sha": "cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "node_id": "C_kwDOAAsO6NoAKGNlZGFhYTY0MGVkZmEyODU0ZWEyMTMxNDhhN2MwZjVlZTVkZDJmNzQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-09T21:00:13Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-09T21:01:58Z"}, "message": "Don't ICE on operator trait methods with generic methods\n\nEmit a fatal error instead.", "tree": {"sha": "5458f9c1616aa2b152541873164500e75f6818dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5458f9c1616aa2b152541873164500e75f6818dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQH0aiy7nijkPK21GnLX5Yau/w88MUWDNhShbUshIxEiLwNy9wg/uVZba0sHUIH9hXk\nEbJXOhqGIxMOffpTphOAo=\n-----END SSH SIGNATURE-----", "payload": "tree 5458f9c1616aa2b152541873164500e75f6818dc\nparent cc9b259b5e94e4543b96dca236e3a1af5ec496c9\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668027613 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668027718 +0100\n\nDon't ICE on operator trait methods with generic methods\n\nEmit a fatal error instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "html_url": "https://github.com/rust-lang/rust/commit/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "html_url": "https://github.com/rust-lang/rust/commit/cc9b259b5e94e4543b96dca236e3a1af5ec496c9"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "d27edd47470e83a60c74dd527f9317c1bbad4b7b", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "patch": "@@ -150,3 +150,6 @@ hir_analysis_const_bound_for_non_const_trait =\n hir_analysis_self_in_impl_self =\n     `Self` is not valid in the self type of an impl block\n     .note = replace `Self` with a different type\n+\n+hir_analysis_op_trait_generic_params =\n+    `{$method_name}` must not have any generic parameters"}, {"sha": "afac6e7d94a8116ca0ef9916c61c569d1f24dbfb", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "patch": "@@ -125,3 +125,11 @@ pub struct AddMissingParenthesesInRange {\n     #[suggestion_part(code = \")\")]\n     pub right: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_op_trait_generic_params)]\n+pub struct OpMethodGenericParams {\n+    #[primary_span]\n+    pub span: Span,\n+    pub method_name: String,\n+}"}, {"sha": "4a8b774936543698c07c7f9bba395e96792b2a0b", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "patch": "@@ -10,6 +10,7 @@ mod suggest;\n pub use self::suggest::SelfSource;\n pub use self::MethodError::*;\n \n+use crate::errors::OpMethodGenericParams;\n use crate::{Expectation, FnCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic};\n@@ -443,7 +444,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n-        assert_eq!(generics.params.len(), 0);\n+\n+        if generics.params.len() != 0 {\n+            tcx.sess.emit_fatal(OpMethodGenericParams {\n+                span: tcx.def_span(method_item.def_id),\n+                method_name: m_name.to_string(),\n+            });\n+        }\n \n         debug!(\"lookup_in_trait_adjusted: method_item={:?}\", method_item);\n         let mut obligations = vec![];"}, {"sha": "7ea3b0d5bac7679c85731f2ef28ecaa08ecf1dc7", "filename": "src/test/ui/traits/invalid_operator_trait.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.rs?ref=cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "patch": "@@ -0,0 +1,23 @@\n+#![crate_type = \"lib\"]\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+pub trait Sized {\n+    // Empty.\n+}\n+\n+#[lang = \"add\"]\n+trait Add<RHS=Self> {\n+    type Output;\n+\n+    fn add<Y>(self, _: RHS) -> Self::Output;\n+    //~^ ERROR `add` must not have any generic parameters\n+}\n+\n+#[allow(unreachable_code)]\n+fn ice(a: usize) {\n+    let r = loop {};\n+    r = r + a;\n+}"}, {"sha": "8c6e3695905ee8c3a14ce4372cdaddfdeda83f54", "filename": "src/test/ui/traits/invalid_operator_trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cedaaa640edfa2854ea213148a7c0f5ee5dd2f74/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finvalid_operator_trait.stderr?ref=cedaaa640edfa2854ea213148a7c0f5ee5dd2f74", "patch": "@@ -0,0 +1,8 @@\n+error: `add` must not have any generic parameters\n+  --> $DIR/invalid_operator_trait.rs:15:5\n+   |\n+LL |     fn add<Y>(self, _: RHS) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}