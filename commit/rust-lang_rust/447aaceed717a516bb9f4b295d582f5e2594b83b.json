{"sha": "447aaceed717a516bb9f4b295d582f5e2594b83b", "node_id": "C_kwDOAAsO6NoAKDQ0N2FhY2VlZDcxN2E1MTZiYjlmNGIyOTVkNTgyZjVlMjU5NGI4M2I", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-16T13:36:33Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-07-22T14:35:28Z"}, "message": "has_deref: simpler comparison, ty fix", "tree": {"sha": "0966acc535e958e474b8f227ed7362f7d5859530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0966acc535e958e474b8f227ed7362f7d5859530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447aaceed717a516bb9f4b295d582f5e2594b83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447aaceed717a516bb9f4b295d582f5e2594b83b", "html_url": "https://github.com/rust-lang/rust/commit/447aaceed717a516bb9f4b295d582f5e2594b83b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447aaceed717a516bb9f4b295d582f5e2594b83b/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e1e7a947e65f16b35cbd4af9607fc670474542", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e1e7a947e65f16b35cbd4af9607fc670474542", "html_url": "https://github.com/rust-lang/rust/commit/c3e1e7a947e65f16b35cbd4af9607fc670474542"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "a8408cfe5701915288b722b4be8ce422f20c22d5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/447aaceed717a516bb9f4b295d582f5e2594b83b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447aaceed717a516bb9f4b295d582f5e2594b83b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=447aaceed717a516bb9f4b295d582f5e2594b83b", "patch": "@@ -1464,11 +1464,7 @@ impl<'tcx> Place<'tcx> {\n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n     pub fn has_deref(&self) -> bool {\n-        if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n-            true\n-        } else {\n-            false\n-        }\n+        self.projection.first() == Some(&PlaceElem::Deref)\n     }\n \n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n@@ -1546,11 +1542,7 @@ impl<'tcx> PlaceRef<'tcx> {\n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n     pub fn has_deref(&self) -> bool {\n-        if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n-            true\n-        } else {\n-            false\n-        }\n+        self.projection.first() == Some(&PlaceElem::Deref)\n     }\n \n     /// If this place represents a local variable like `_X` with no"}, {"sha": "9c5896c4e4aedef2008e849348559d97ffdabb9b", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/447aaceed717a516bb9f4b295d582f5e2594b83b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447aaceed717a516bb9f4b295d582f5e2594b83b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=447aaceed717a516bb9f4b295d582f5e2594b83b", "patch": "@@ -15,13 +15,9 @@ pub struct AddRetag;\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n fn is_stable(place: PlaceRef<'_>) -> bool {\n-    if place.has_deref() {\n-        // Which place this evaluates to can change with any memory write,\n-        // so cannot assume deref to be stable.\n-        return false;\n-    } else {\n-        return true;\n-    }\n+    // Which place this evaluates to can change with any memory write,\n+    // so cannot assume deref to be stable.\n+    !place.has_deref()\n }\n \n /// Determine whether this type may contain a reference (or box), and thus needs retagging.\n@@ -82,8 +78,8 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         };\n         let place_base_raw = |place: &Place<'tcx>| {\n             // If this is a `Deref`, get the type of what we are deref'ing.\n-            if place.ret_deref().is_some() {\n-                let ty = place.ty(local_decls, tcx).ty;\n+            if place.has_deref() {\n+                let ty = &local_decls[place.local].ty;\n                 ty.is_unsafe_ptr()\n             } else {\n                 // Not a deref, and thus not raw."}]}