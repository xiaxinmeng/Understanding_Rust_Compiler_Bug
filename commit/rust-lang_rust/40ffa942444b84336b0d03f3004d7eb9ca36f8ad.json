{"sha": "40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZmZhOTQyNDQ0Yjg0MzM2YjBkMDNmMzAwNGQ3ZWI5Y2EzNmY4YWQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-02T19:11:13Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-02T19:29:23Z"}, "message": "PR feedback", "tree": {"sha": "7f1040ccf7d299ad5ffec664918f5068e66ec775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1040ccf7d299ad5ffec664918f5068e66ec775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "html_url": "https://github.com/rust-lang/rust/commit/40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe540ae1bb13d3838d1d5c78b546d96b4d44797e", "html_url": "https://github.com/rust-lang/rust/commit/fe540ae1bb13d3838d1d5c78b546d96b4d44797e"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "f71489f32311fe5bb6da204267c7ef5a35d91422", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "patch": "@@ -17,11 +17,11 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n-use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -157,11 +157,14 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        let kind = match cx.tcx.def_kind(trait_ref.def_id) {\n-            DefKind::Trait => ItemType::Trait,\n-            DefKind::TraitAlias => ItemType::TraitAlias,\n-            other => bug!(\"`TraitRef` had unexpected kind {:?}\", other),\n-        };\n+        let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n+        if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n+            span_bug!(\n+                cx.tcx.def_span(trait_ref.def_id),\n+                \"`TraitRef` had unexpected kind {:?}\",\n+                kind\n+            );\n+        }\n         inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n         let path = external_path(\n             cx,"}, {"sha": "6df06c87a09d5ea09c4cf5452e4a659b787615bd", "filename": "src/test/rustdoc/auxiliary/trait-alias-mention.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs?ref=40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "patch": "@@ -0,0 +1,3 @@\n+#![feature(trait_alias)]\n+\n+pub trait SomeAlias = std::fmt::Debug + std::marker::Copy;"}, {"sha": "6da0dc68785c58dd11ade1e357e17e640c94eff1", "filename": "src/test/rustdoc/trait-alias-mention.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ffa942444b84336b0d03f3004d7eb9ca36f8ad/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs?ref=40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "patch": "@@ -1,9 +1,10 @@\n-#![feature(trait_alias)]\n-#![feature(ptr_metadata)]\n+// aux-build:trait-alias-mention.rs\n+// build-aux-docs\n \n #![crate_name = \"foo\"]\n \n-// @has foo/fn.this_never_panics.html '//a[@title=\"traitalias core::ptr::metadata::Thin\"]' 'Thin'\n-pub fn this_never_panics<T: std::ptr::Thin>() {\n-    assert_eq!(std::mem::size_of::<&T>(), std::mem::size_of::<usize>())\n+extern crate trait_alias_mention;\n+\n+// @has foo/fn.mention_alias_in_bounds.html '//a[@href=\"../trait_alias_mention/traitalias.SomeAlias.html\"]' 'SomeAlias'\n+pub fn mention_alias_in_bounds<T: trait_alias_mention::SomeAlias>() {\n }"}]}