{"sha": "984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NGI2ODg5ZWJlYjBjYjJlMjlmYjg5M2Y1MTY4YTliNmRlMjg0MmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-09T13:52:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-09T13:52:10Z"}, "message": "Add tests", "tree": {"sha": "2cfbcd58be2039561fe7fb936411ae24892c769a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfbcd58be2039561fe7fb936411ae24892c769a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "html_url": "https://github.com/rust-lang/rust/commit/984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984b6889ebeb0cb2e29fb893f5168a9b6de2842f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce4407dcb6ca358e647b961a5bd1ad7182f59cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce4407dcb6ca358e647b961a5bd1ad7182f59cd", "html_url": "https://github.com/rust-lang/rust/commit/3ce4407dcb6ca358e647b961a5bd1ad7182f59cd"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "e9f7853835f9bf248372ec37b667aba702f8b4a5", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/984b6889ebeb0cb2e29fb893f5168a9b6de2842f/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984b6889ebeb0cb2e29fb893f5168a9b6de2842f/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "patch": "@@ -386,3 +386,132 @@ pub fn record_pattern_missing_fields(\n     }\n     Some((variant_def, missed_fields, exhaustive))\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use insta::assert_snapshot;\n+    use ra_db::fixture::WithFixture;\n+\n+    use crate::{diagnostics::MismatchedArgCount, test_db::TestDB};\n+\n+    fn check_diagnostic_message(ra_fixture: &str) -> String {\n+        TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>().0\n+    }\n+\n+    fn check_no_diagnostic(ra_fixture: &str) {\n+        let (s, diagnostic_count) =\n+            TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>();\n+\n+        assert_eq!(0, diagnostic_count, \"expected no diagnostic, found one: {}\", s);\n+    }\n+\n+    #[test]\n+    fn simple_free_fn_zero() {\n+        assert_snapshot!(check_diagnostic_message(\n+            r\"\n+            fn zero() {}\n+\n+            fn f() {\n+                zero(1);\n+            }\n+            \"\n+        ),\n+        @\"\\\"zero(1)\\\": Expected 0 arguments, found 1\\n\");\n+\n+        check_no_diagnostic(\n+            r\"\n+            fn zero() {}\n+\n+            fn f() {\n+                zero();\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_free_fn_one() {\n+        assert_snapshot!(check_diagnostic_message(\n+            r\"\n+            fn one(arg: u8) {}\n+\n+            fn f() {\n+                one();\n+            }\n+            \"\n+        ),\n+        @\"\\\"one()\\\": Expected 1 argument, found 0\\n\");\n+\n+        check_no_diagnostic(\n+            r\"\n+            fn one(arg: u8) {}\n+\n+            fn f() {\n+                one(1);\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn method_as_fn() {\n+        assert_snapshot!(check_diagnostic_message(\n+            r\"\n+            struct S;\n+            impl S {\n+                fn method(&self) {}\n+            }\n+\n+            fn f() {\n+                S::method();\n+            }\n+            \"\n+        ),\n+        @\"\\\"S::method()\\\": Expected 1 argument, found 0\\n\");\n+\n+        check_no_diagnostic(\n+            r\"\n+            struct S;\n+            impl S {\n+                fn method(&self) {}\n+            }\n+\n+            fn f() {\n+                S::method(&S);\n+                S.method();\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn method_with_arg() {\n+        assert_snapshot!(check_diagnostic_message(\n+            r\"\n+            struct S;\n+            impl S {\n+                fn method(&self, arg: u8) {}\n+            }\n+\n+            fn f() {\n+                S.method();\n+            }\n+            \"\n+        ),\n+        @\"\\\"S.method()\\\": Expected 1 argument, found 0\\n\");\n+\n+        check_no_diagnostic(\n+            r\"\n+            struct S;\n+            impl S {\n+                fn method(&self, arg: u8) {}\n+            }\n+\n+            fn f() {\n+                S::method(&S, 0);\n+                S.method(1);\n+            }\n+            \",\n+        );\n+    }\n+}"}]}