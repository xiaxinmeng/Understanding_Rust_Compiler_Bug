{"sha": "de038b746e267a4270cf4ac038fbfd92ce788526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDM4Yjc0NmUyNjdhNDI3MGNmNGFjMDM4ZmJmZDkyY2U3ODg1MjY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-08-31T14:37:14Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-08-31T14:37:14Z"}, "message": "Add full git commit hash to release channel manifests\n\nThe full hash is necessary to build the download URL for \"alternate\"\ncompiler builds.\nThis is a first step for\nhttps://github.com/rust-lang-nursery/rustup.rs/issues/1099", "tree": {"sha": "6e5e81ae738cb724d4f88f7b35466f472fbd7926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5e81ae738cb724d4f88f7b35466f472fbd7926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de038b746e267a4270cf4ac038fbfd92ce788526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de038b746e267a4270cf4ac038fbfd92ce788526", "html_url": "https://github.com/rust-lang/rust/commit/de038b746e267a4270cf4ac038fbfd92ce788526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de038b746e267a4270cf4ac038fbfd92ce788526/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b01abf3d222523d0db4f79c13ed45e7fef27e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b01abf3d222523d0db4f79c13ed45e7fef27e3", "html_url": "https://github.com/rust-lang/rust/commit/97b01abf3d222523d0db4f79c13ed45e7fef27e3"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "b7fcfc75c4f2599fc1e3bbf5b7ddc208e6ab9804", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=de038b746e267a4270cf4ac038fbfd92ce788526", "patch": "@@ -364,7 +364,9 @@ impl Step for Rustc {\n         cp(\"README.md\");\n         // tiny morsel of metadata is used by rust-packaging\n         let version = build.rust_version();\n+        let sha = build.rust_sha().unwrap_or(\"\");\n         t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+        t!(t!(File::create(overlay.join(\"git-commit-hash\"))).write_all(sha.as_bytes()));\n \n         // On MinGW we've got a few runtime DLL dependencies that we need to\n         // include. The first argument to this script is where to put these DLLs"}, {"sha": "67791e8758c0bef14305ff987505c6a81d497943", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=de038b746e267a4270cf4ac038fbfd92ce788526", "patch": "@@ -797,6 +797,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Return the full commit hash\n+    fn rust_sha(&self) -> Option<&str> {\n+        self.rust_info.sha()\n+    }\n+\n     /// Returns the `a.b.c` version that the given package is at.\n     fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();"}, {"sha": "39b5d275dffaa5c4a654d3110a2bae28c44d8e07", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de038b746e267a4270cf4ac038fbfd92ce788526/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=de038b746e267a4270cf4ac038fbfd92ce788526", "patch": "@@ -107,6 +107,7 @@ static MINGW: &'static [&'static str] = &[\n struct Manifest {\n     manifest_version: String,\n     date: String,\n+    git_commit_hash: String,\n     pkg: BTreeMap<String, Package>,\n }\n \n@@ -205,15 +206,10 @@ impl Builder {\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n-        let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n-        self.write_manifest(&toml::to_string(&manifest).unwrap(), &filename);\n-\n-        let filename = format!(\"channel-rust-{}-date.txt\", self.rust_release);\n-        self.write_date_stamp(&manifest.date, &filename);\n+        self.write_channel_files(&self.rust_release, &manifest);\n \n         if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n-            self.write_manifest(&toml::to_string(&manifest).unwrap(), \"channel-rust-stable.toml\");\n-            self.write_date_stamp(&manifest.date, \"channel-rust-stable-date.txt\");\n+            self.write_channel_files(\"stable\", &manifest);\n         }\n     }\n \n@@ -230,6 +226,7 @@ impl Builder {\n         let mut manifest = Manifest {\n             manifest_version: \"2\".to_string(),\n             date: self.date.to_string(),\n+            git_commit_hash: self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\"),\n             pkg: BTreeMap::new(),\n         };\n \n@@ -382,14 +379,31 @@ impl Builder {\n            .arg(self.input.join(&filename))\n            .arg(format!(\"{}/version\", filename.replace(\".tar.gz\", \"\")))\n            .arg(\"-O\");\n-        let version = t!(cmd.output());\n-        if !version.status.success() {\n+        let output = t!(cmd.output());\n+        if !output.status.success() {\n             panic!(\"failed to learn version:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n                    cmd,\n-                   String::from_utf8_lossy(&version.stdout),\n-                   String::from_utf8_lossy(&version.stderr));\n+                   String::from_utf8_lossy(&output.stdout),\n+                   String::from_utf8_lossy(&output.stderr));\n+        }\n+        String::from_utf8_lossy(&output.stdout).trim().to_string()\n+    }\n+\n+    fn git_commit_hash(&self, component: &str, target: &str) -> String {\n+        let mut cmd = Command::new(\"tar\");\n+        let filename = self.filename(component, target);\n+        cmd.arg(\"xf\")\n+           .arg(self.input.join(&filename))\n+           .arg(format!(\"{}/git-commit-hash\", filename.replace(\".tar.gz\", \"\")))\n+           .arg(\"-O\");\n+        let output = t!(cmd.output());\n+        if !output.status.success() {\n+            panic!(\"failed to learn git commit hash:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n+                   cmd,\n+                   String::from_utf8_lossy(&output.stdout),\n+                   String::from_utf8_lossy(&output.stderr));\n         }\n-        String::from_utf8_lossy(&version.stdout).trim().to_string()\n+        String::from_utf8_lossy(&output.stdout).trim().to_string()\n     }\n \n     fn hash(&self, path: &Path) -> String {\n@@ -425,16 +439,15 @@ impl Builder {\n         assert!(t!(child.wait()).success());\n     }\n \n-    fn write_manifest(&self, manifest: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(manifest.as_bytes()));\n-        self.hash(&dst);\n-        self.sign(&dst);\n+    fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n+        self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n+        self.write(&manifest.date, channel_name, \"-date.txt\");\n+        self.write(&manifest.git_commit_hash, channel_name, \"-git-commit-hash.txt\");\n     }\n \n-    fn write_date_stamp(&self, date: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(date.as_bytes()));\n+    fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n+        let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n+        t!(t!(File::create(&dst)).write_all(contents.as_bytes()));\n         self.hash(&dst);\n         self.sign(&dst);\n     }"}]}