{"sha": "f4ae3650d855554575f866264a3c8197dfd12835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWUzNjUwZDg1NTU1NDU3NWY4NjYyNjRhM2M4MTk3ZGZkMTI4MzU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-24T21:25:13Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-27T16:28:41Z"}, "message": "Extract the import code into the shared module", "tree": {"sha": "5db591ff6ed18f196ddde87858d14e9b9ded6dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db591ff6ed18f196ddde87858d14e9b9ded6dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ae3650d855554575f866264a3c8197dfd12835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ae3650d855554575f866264a3c8197dfd12835", "html_url": "https://github.com/rust-lang/rust/commit/f4ae3650d855554575f866264a3c8197dfd12835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ae3650d855554575f866264a3c8197dfd12835/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0993f9067cfc14cded484906283d1df8e8741e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0993f9067cfc14cded484906283d1df8e8741e8e", "html_url": "https://github.com/rust-lang/rust/commit/0993f9067cfc14cded484906283d1df8e8741e8e"}], "stats": {"total": 552, "additions": 298, "deletions": 254}, "files": [{"sha": "e7d1782cccf118682a9254dc4c2e1c3485bce088", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -53,6 +53,7 @@ dependencies = [\n  \"either\",\n  \"hir\",\n  \"ide_db\",\n+ \"ide_helpers\",\n  \"itertools\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -253,12 +254,12 @@ dependencies = [\n name = \"completion\"\n version = \"0.0.0\"\n dependencies = [\n- \"assists\",\n  \"base_db\",\n  \"either\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\",\n+ \"ide_helpers\",\n  \"itertools\",\n  \"log\",\n  \"profile\",\n@@ -657,6 +658,7 @@ dependencies = [\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\",\n+ \"ide_helpers\",\n  \"indexmap\",\n  \"itertools\",\n  \"log\",\n@@ -693,6 +695,19 @@ dependencies = [\n  \"text_edit\",\n ]\n \n+[[package]]\n+name = \"ide_helpers\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"either\",\n+ \"hir\",\n+ \"ide_db\",\n+ \"itertools\",\n+ \"profile\",\n+ \"syntax\",\n+ \"test_utils\",\n+]\n+\n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n@@ -1361,6 +1376,7 @@ dependencies = [\n  \"hir_ty\",\n  \"ide\",\n  \"ide_db\",\n+ \"ide_helpers\",\n  \"itertools\",\n  \"jod-thread\",\n  \"log\","}, {"sha": "91d9b6e3f71a4880ae2b436a185b86583f3e6920", "filename": "crates/assists/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2FCargo.toml?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n-either = \"1.5.3\"\n+either = \"1.6.1\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n@@ -21,3 +21,4 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+ide_helpers = { path = \"../ide_helpers\", version = \"0.0.0\" }"}, {"sha": "6d9934e931c077aafeae741c271060f12d8fb742", "filename": "crates/assists/src/assist_config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_config.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -5,8 +5,9 @@\n //! assists if we are allowed to.\n \n use hir::PrefixKind;\n+use ide_helpers::insert_use::MergeBehaviour;\n \n-use crate::{utils::MergeBehaviour, AssistKind};\n+use crate::AssistKind;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct AssistConfig {"}, {"sha": "95b0605993b0c841cc45615e3d9d853073d90738", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,14 +1,13 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n use hir::{HirDisplay, PathResolution, SemanticsScope};\n+use ide_helpers::mod_path_to_ast;\n use rustc_hash::FxHashMap;\n use syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n     SyntaxNode,\n };\n \n-use crate::utils::mod_path_to_ast;\n-\n pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     SyntaxRewriter::from_fn(|element| match element {\n         syntax::SyntaxElement::Node(n) => {"}, {"sha": "0b2d508d594dc4e5c95be58ce1cfdde6f7443316", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,8 +1,11 @@\n+use ide_helpers::{\n+    insert_use::{insert_use, ImportScope},\n+    mod_path_to_ast,\n+};\n use syntax::ast;\n \n use crate::{\n     utils::import_assets::{ImportAssets, ImportCandidate},\n-    utils::{insert_use, mod_path_to_ast, ImportScope},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n "}, {"sha": "fddd5354aa0604c7f289d46e8a64183ad80aef5e", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -3,17 +3,18 @@ use std::iter;\n use either::Either;\n use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n+use ide_helpers::{\n+    insert_use::{insert_use, ImportScope},\n+    mod_path_to_ast,\n+};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     algo::{find_node_at_offset, SyntaxRewriter},\n     ast::{self, edit::IndentLevel, make, AstNode, NameOwner, VisibilityOwner},\n     SourceFile, SyntaxElement, SyntaxNode, T,\n };\n \n-use crate::{\n-    utils::{insert_use, mod_path_to_ast, ImportScope},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -236,10 +237,9 @@ fn update_reference(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{\n-        tests::{check_assist, check_assist_not_applicable},\n-        utils::FamousDefs,\n-    };\n+    use ide_helpers::FamousDefs;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "bd42e0f16621dcfa870665aaf62c93be815a014b", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -2,12 +2,13 @@ use std::iter;\n \n use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::RootDatabase;\n+use ide_helpers::{mod_path_to_ast, FamousDefs};\n use itertools::Itertools;\n use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n use crate::{\n-    utils::{mod_path_to_ast, render_snippet, Cursor, FamousDefs},\n+    utils::{render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -212,12 +213,10 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n+    use ide_helpers::FamousDefs;\n     use test_utils::mark;\n \n-    use crate::{\n-        tests::{check_assist, check_assist_not_applicable, check_assist_target},\n-        utils::FamousDefs,\n-    };\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::fill_match_arms;\n "}, {"sha": "01b14d94d5fa7704c4c6457ac2c0b46601bbd534", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,8 +1,9 @@\n use ide_db::RootDatabase;\n+use ide_helpers::FamousDefs;\n use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: generate_from_impl_for_enum\n //"}, {"sha": "8207f0e6eba03b4a0affcd05a74cdf57e65b09c5", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,14 +1,12 @@\n+use ide_helpers::insert_use::{try_merge_imports, try_merge_trees, MergeBehaviour};\n use syntax::{\n     algo::{neighbor, SyntaxRewriter},\n     ast, AstNode,\n };\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    utils::{\n-        insert_use::{try_merge_imports, try_merge_trees},\n-        next_prev, MergeBehaviour,\n-    },\n+    utils::next_prev,\n     AssistId, AssistKind,\n };\n "}, {"sha": "c0ee7ea0b8d4e034c5d26d084fc16ec806dd4455", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -2,6 +2,7 @@ use std::iter;\n \n use hir::AsName;\n use ide_db::RootDatabase;\n+use ide_helpers::mod_path_to_ast;\n use syntax::{\n     ast,\n     ast::{make, ArgListOwner},\n@@ -12,7 +13,6 @@ use test_utils::mark;\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::import_assets::{ImportAssets, ImportCandidate},\n-    utils::mod_path_to_ast,\n     AssistId, AssistKind, GroupLabel,\n };\n "}, {"sha": "fe262377c92306cbdcbb8393f72a0758935ea29b", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,4 +1,5 @@\n use ide_db::imports_locator;\n+use ide_helpers::mod_path_to_ast;\n use itertools::Itertools;\n use syntax::{\n     ast::{self, make, AstNode},\n@@ -10,8 +11,7 @@ use syntax::{\n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, mod_path_to_ast, render_snippet, Cursor,\n-        DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, render_snippet, Cursor, DefaultMethods,\n     },\n     AssistId, AssistKind,\n };"}, {"sha": "9b8caacd99b2b16c228aa9344ee9379c72db876f", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,10 +1,8 @@\n+use ide_helpers::insert_use::{insert_use, ImportScope};\n use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode};\n use test_utils::mark;\n \n-use crate::{\n-    utils::{insert_use, ImportScope},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_qualified_name_with_use\n //\n@@ -53,7 +51,7 @@ pub(crate) fn replace_qualified_name_with_use(\n     )\n }\n \n-/// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n+/// Adds replacements to `re` that shorten `path` in all descendants of `node`.g\n fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: &ast::Path) {\n     for child in node.children() {\n         match_ast! {"}, {"sha": "01f5c291fb3526a8ac8289219f805160e09d12ba", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 199, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,10 +1,9 @@\n //! Assorted functions shared by several assists.\n-pub(crate) mod insert_use;\n pub(crate) mod import_assets;\n \n use std::ops;\n \n-use hir::{Crate, Enum, HasSource, Module, ScopeDef, Semantics, Trait};\n+use hir::HasSource;\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use syntax::{\n@@ -22,30 +21,6 @@ use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n };\n \n-pub use insert_use::{insert_use, ImportScope, MergeBehaviour};\n-\n-pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n-    let _p = profile::span(\"mod_path_to_ast\");\n-    let mut segments = Vec::new();\n-    let mut is_abs = false;\n-    match path.kind {\n-        hir::PathKind::Plain => {}\n-        hir::PathKind::Super(0) => segments.push(make::path_segment_self()),\n-        hir::PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n-        hir::PathKind::DollarCrate(_) | hir::PathKind::Crate => {\n-            segments.push(make::path_segment_crate())\n-        }\n-        hir::PathKind::Abs => is_abs = true,\n-    }\n-\n-    segments.extend(\n-        path.segments\n-            .iter()\n-            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n-    );\n-    make::path_from_segments(segments, is_abs)\n-}\n-\n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)\n         .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n@@ -260,179 +235,6 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n-/// Helps with finding well-know things inside the standard library. This is\n-/// somewhat similar to the known paths infra inside hir, but it different; We\n-/// want to make sure that IDE specific paths don't become interesting inside\n-/// the compiler itself as well.\n-pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n-\n-#[allow(non_snake_case)]\n-impl FamousDefs<'_, '_> {\n-    pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n-pub mod convert {\n-    pub trait From<T> {\n-        fn from(t: T) -> Self;\n-    }\n-}\n-\n-pub mod default {\n-    pub trait Default {\n-       fn default() -> Self;\n-    }\n-}\n-\n-pub mod iter {\n-    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n-    mod traits {\n-        pub(crate) mod iterator {\n-            use crate::option::Option;\n-            pub trait Iterator {\n-                type Item;\n-                fn next(&mut self) -> Option<Self::Item>;\n-                fn by_ref(&mut self) -> &mut Self {\n-                    self\n-                }\n-                fn take(self, n: usize) -> crate::iter::Take<Self> {\n-                    crate::iter::Take { inner: self }\n-                }\n-            }\n-\n-            impl<I: Iterator> Iterator for &mut I {\n-                type Item = I::Item;\n-                fn next(&mut self) -> Option<I::Item> {\n-                    (**self).next()\n-                }\n-            }\n-        }\n-        pub(crate) mod collect {\n-            pub trait IntoIterator {\n-                type Item;\n-            }\n-        }\n-    }\n-\n-    pub use self::sources::*;\n-    pub(crate) mod sources {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Repeat<A> {\n-            element: A,\n-        }\n-\n-        pub fn repeat<T>(elt: T) -> Repeat<T> {\n-            Repeat { element: elt }\n-        }\n-\n-        impl<A> Iterator for Repeat<A> {\n-            type Item = A;\n-\n-            fn next(&mut self) -> Option<A> {\n-                None\n-            }\n-        }\n-    }\n-\n-    pub use self::adapters::*;\n-    pub(crate) mod adapters {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Take<I> { pub(crate) inner: I }\n-        impl<I> Iterator for Take<I> where I: Iterator {\n-            type Item = <I as Iterator>::Item;\n-            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-                None\n-            }\n-        }\n-    }\n-}\n-\n-pub mod option {\n-    pub enum Option<T> { None, Some(T)}\n-}\n-\n-pub mod prelude {\n-    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n-}\n-#[prelude_import]\n-pub use prelude::*;\n-\"#;\n-\n-    pub fn core(&self) -> Option<Crate> {\n-        self.find_crate(\"core\")\n-    }\n-\n-    pub(crate) fn core_convert_From(&self) -> Option<Trait> {\n-        self.find_trait(\"core:convert:From\")\n-    }\n-\n-    pub(crate) fn core_option_Option(&self) -> Option<Enum> {\n-        self.find_enum(\"core:option:Option\")\n-    }\n-\n-    pub fn core_default_Default(&self) -> Option<Trait> {\n-        self.find_trait(\"core:default:Default\")\n-    }\n-\n-    pub fn core_iter_Iterator(&self) -> Option<Trait> {\n-        self.find_trait(\"core:iter:traits:iterator:Iterator\")\n-    }\n-\n-    pub fn core_iter(&self) -> Option<Module> {\n-        self.find_module(\"core:iter\")\n-    }\n-\n-    fn find_trait(&self, path: &str) -> Option<Trait> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_enum(&self, path: &str) -> Option<Enum> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_module(&self, path: &str) -> Option<Module> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_crate(&self, name: &str) -> Option<Crate> {\n-        let krate = self.1?;\n-        let db = self.0.db;\n-        let res =\n-            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n-        Some(res)\n-    }\n-\n-    fn find_def(&self, path: &str) -> Option<ScopeDef> {\n-        let db = self.0.db;\n-        let mut path = path.split(':');\n-        let trait_ = path.next_back()?;\n-        let std_crate = path.next()?;\n-        let std_crate = self.find_crate(std_crate)?;\n-        let mut module = std_crate.root_module(db);\n-        for segment in path {\n-            module = module.children(db).find_map(|child| {\n-                let name = child.name(db)?;\n-                if name.to_string() == segment {\n-                    Some(child)\n-                } else {\n-                    None\n-                }\n-            })?;\n-        }\n-        let def =\n-            module.scope(db, None).into_iter().find(|(name, _def)| name.to_string() == trait_)?.1;\n-        Some(def)\n-    }\n-}\n-\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }"}, {"sha": "102de33f8fc32bed278966c35b3429e8ce7a8972", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -15,14 +15,14 @@ log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n either = \"1.6.1\"\n \n-assists = { path = \"../assists\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+ide_helpers = { path = \"../ide_helpers\", version = \"0.0.0\" }\n \n # completions crate should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "218a1923c5fb6878567370d5561184f8e68f07cd", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,5 +1,5 @@\n //! Complete fields in record literals and patterns.\n-use assists::utils::FamousDefs;\n+use ide_helpers::FamousDefs;\n use syntax::ast::Expr;\n \n use crate::{\n@@ -45,8 +45,8 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n #[cfg(test)]\n mod tests {\n-    use assists::utils::FamousDefs;\n     use expect_test::{expect, Expect};\n+    use ide_helpers::FamousDefs;\n \n     use crate::{test_utils::completion_list, CompletionKind};\n "}, {"sha": "db5dbb7ddbc44f1384e8209a9c55bdc26366cd50", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,9 +1,9 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n-use assists::utils::ImportScope;\n use either::Either;\n use hir::{Adt, ModuleDef, ScopeDef, Type};\n use ide_db::imports_locator;\n+use ide_helpers::insert_use::ImportScope;\n use syntax::AstNode;\n use test_utils::mark;\n "}, {"sha": "1995b0754826073cce0dd1837de2fbe9d0f9eeb0", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n-use assists::utils::MergeBehaviour;\n+use ide_helpers::insert_use::MergeBehaviour;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {"}, {"sha": "675cef8c45a8afe30b56dd5c8b6a7535b11d1547", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -2,8 +2,11 @@\n \n use std::fmt;\n \n-use assists::utils::{insert_use, mod_path_to_ast, ImportScope, MergeBehaviour};\n use hir::{Documentation, ModPath, Mutability};\n+use ide_helpers::{\n+    insert_use::{self, ImportScope, MergeBehaviour},\n+    mod_path_to_ast,\n+};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -300,7 +303,7 @@ impl Builder {\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n \n-            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n+            let rewriter = insert_use::insert_use(&import_scope, import, merge_behaviour);\n             if let Some(old_ast) = rewriter.rewrite_root() {\n                 algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n             }"}, {"sha": "e9704c27c9214b768cd1b6b92d8b294030063f96", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -9,9 +9,9 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{Documentation, HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n use ide_db::RootDatabase;\n+use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n use syntax::TextRange;\n use test_utils::mark;\n "}, {"sha": "5d4fbb64118294a99fcb1c3049c480b6d8dfb0eb", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for `enum` variants.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n+use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n use itertools::Itertools;\n use test_utils::mark;\n "}, {"sha": "07e99058af81e44d9c989dd8decb7434f4152da6", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for function calls.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{HasSource, ModPath, Type};\n+use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n use syntax::{ast::Fn, display::function_declaration};\n \n use crate::{"}, {"sha": "b1284f2019e2b7cd58eea452a9ac6dd0eec96205", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,7 +1,7 @@\n //! Renderer for macro invocations.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{Documentation, HasSource, ModPath};\n+use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n@@ -12,6 +12,7 @@ use crate::{\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n+    // TODO kb add some object instead of a tuple?\n     import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     name: String,\n     macro_: hir::MacroDef,"}, {"sha": "92d4e5e9fa0b66a83f402db27b3773626fc5063d", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -24,6 +24,7 @@ stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+ide_helpers = { path = \"../ide_helpers\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "9c8bb7c45cfb757a5692f10b8cbfb4bf0febca1f", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -1,7 +1,7 @@\n-use assists::utils::FamousDefs;\n use either::Either;\n use hir::{known, Callable, HirDisplay, Semantics};\n use ide_db::RootDatabase;\n+use ide_helpers::FamousDefs;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, ArgListOwner, AstNode, NameOwner},\n@@ -427,8 +427,8 @@ fn get_callable(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir:\n \n #[cfg(test)]\n mod tests {\n-    use assists::utils::FamousDefs;\n     use expect_test::{expect, Expect};\n+    use ide_helpers::FamousDefs;\n     use test_utils::extract_annotations;\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};"}, {"sha": "5244bdd610e086fcc0be5255c2058f43bcbd3932", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -87,9 +87,7 @@ pub use ide_db::{\n     search::{Reference, ReferenceAccess, ReferenceKind},\n };\n \n-pub use assists::{\n-    utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n-};\n+pub use assists::{Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist};\n pub use hir::{Documentation, Semantics};\n pub use ide_db::base_db::{\n     Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,"}, {"sha": "c5065b22b7809b9b36ba99456fd8363783b98b34", "filename": "crates/ide_helpers/Cargo.toml", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_helpers%2FCargo.toml?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -0,0 +1,23 @@\n+[package]\n+name = \"ide_helpers\"\n+version = \"0.0.0\"\n+description = \"A set of helper methods shared between various ide-level modules\"\n+license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[features]\n+wasm = []\n+\n+[dependencies]\n+either = \"1.6.1\"\n+itertools = \"0.9.0\"\n+\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "795009eb13fd3b5c69efbb71176ad872b10cb215", "filename": "crates/ide_helpers/src/insert_use.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2Fsrc%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2Fsrc%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_helpers%2Fsrc%2Finsert_use.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -22,7 +22,7 @@ pub enum ImportScope {\n }\n \n impl ImportScope {\n-    pub(crate) fn from(syntax: SyntaxNode) -> Option<Self> {\n+    pub fn from(syntax: SyntaxNode) -> Option<Self> {\n         if let Some(module) = ast::Module::cast(syntax.clone()) {\n             module.item_list().map(ImportScope::Module)\n         } else if let this @ Some(_) = ast::SourceFile::cast(syntax.clone()) {\n@@ -180,7 +180,7 @@ fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -\n     }\n }\n \n-pub(crate) fn try_merge_imports(\n+pub fn try_merge_imports(\n     lhs: &ast::Use,\n     rhs: &ast::Use,\n     merge_behaviour: MergeBehaviour,\n@@ -195,7 +195,7 @@ pub(crate) fn try_merge_imports(\n     Some(lhs.with_use_tree(merged))\n }\n \n-pub(crate) fn try_merge_trees(\n+pub fn try_merge_trees(\n     lhs: &ast::UseTree,\n     rhs: &ast::UseTree,\n     merge: MergeBehaviour,", "previous_filename": "crates/assists/src/utils/insert_use.rs"}, {"sha": "069cb2bdd2aae0110841089ee2972e42ac4905ad", "filename": "crates/ide_helpers/src/lib.rs", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Fide_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_helpers%2Fsrc%2Flib.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -0,0 +1,201 @@\n+use hir::{Crate, Enum, Module, ScopeDef, Semantics, Trait};\n+use ide_db::RootDatabase;\n+use syntax::ast::{self, make};\n+\n+pub mod insert_use;\n+\n+pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n+    let _p = profile::span(\"mod_path_to_ast\");\n+    \n+    let mut segments = Vec::new();\n+    let mut is_abs = false;\n+    match path.kind {\n+        hir::PathKind::Plain => {}\n+        hir::PathKind::Super(0) => segments.push(make::path_segment_self()),\n+        hir::PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n+        hir::PathKind::DollarCrate(_) | hir::PathKind::Crate => {\n+            segments.push(make::path_segment_crate())\n+        }\n+        hir::PathKind::Abs => is_abs = true,\n+    }\n+\n+    segments.extend(\n+        path.segments\n+            .iter()\n+            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n+    );\n+    make::path_from_segments(segments, is_abs)\n+}\n+\n+/// Helps with finding well-know things inside the standard library. This is\n+/// somewhat similar to the known paths infra inside hir, but it different; We\n+/// want to make sure that IDE specific paths don't become interesting inside\n+/// the compiler itself as well.\n+pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n+\n+#[allow(non_snake_case)]\n+impl FamousDefs<'_, '_> {\n+    pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n+pub mod convert {\n+    pub trait From<T> {\n+        fn from(t: T) -> Self;\n+    }\n+}\n+\n+pub mod default {\n+    pub trait Default {\n+       fn default() -> Self;\n+    }\n+}\n+\n+pub mod iter {\n+    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n+    mod traits {\n+        pub(crate) mod iterator {\n+            use crate::option::Option;\n+            pub trait Iterator {\n+                type Item;\n+                fn next(&mut self) -> Option<Self::Item>;\n+                fn by_ref(&mut self) -> &mut Self {\n+                    self\n+                }\n+                fn take(self, n: usize) -> crate::iter::Take<Self> {\n+                    crate::iter::Take { inner: self }\n+                }\n+            }\n+\n+            impl<I: Iterator> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n+            }\n+        }\n+        pub(crate) mod collect {\n+            pub trait IntoIterator {\n+                type Item;\n+            }\n+        }\n+    }\n+\n+    pub use self::sources::*;\n+    pub(crate) mod sources {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Repeat<A> {\n+            element: A,\n+        }\n+\n+        pub fn repeat<T>(elt: T) -> Repeat<T> {\n+            Repeat { element: elt }\n+        }\n+\n+        impl<A> Iterator for Repeat<A> {\n+            type Item = A;\n+\n+            fn next(&mut self) -> Option<A> {\n+                None\n+            }\n+        }\n+    }\n+\n+    pub use self::adapters::*;\n+    pub(crate) mod adapters {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Take<I> { pub(crate) inner: I }\n+        impl<I> Iterator for Take<I> where I: Iterator {\n+            type Item = <I as Iterator>::Item;\n+            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+pub mod option {\n+    pub enum Option<T> { None, Some(T)}\n+}\n+\n+pub mod prelude {\n+    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n+}\n+#[prelude_import]\n+pub use prelude::*;\n+\"#;\n+\n+    pub fn core(&self) -> Option<Crate> {\n+        self.find_crate(\"core\")\n+    }\n+\n+    pub fn core_convert_From(&self) -> Option<Trait> {\n+        self.find_trait(\"core:convert:From\")\n+    }\n+\n+    pub fn core_option_Option(&self) -> Option<Enum> {\n+        self.find_enum(\"core:option:Option\")\n+    }\n+\n+    pub fn core_default_Default(&self) -> Option<Trait> {\n+        self.find_trait(\"core:default:Default\")\n+    }\n+\n+    pub fn core_iter_Iterator(&self) -> Option<Trait> {\n+        self.find_trait(\"core:iter:traits:iterator:Iterator\")\n+    }\n+\n+    pub fn core_iter(&self) -> Option<Module> {\n+        self.find_module(\"core:iter\")\n+    }\n+\n+    fn find_trait(&self, path: &str) -> Option<Trait> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_enum(&self, path: &str) -> Option<Enum> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_module(&self, path: &str) -> Option<Module> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_crate(&self, name: &str) -> Option<Crate> {\n+        let krate = self.1?;\n+        let db = self.0.db;\n+        let res =\n+            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n+        Some(res)\n+    }\n+\n+    fn find_def(&self, path: &str) -> Option<ScopeDef> {\n+        let db = self.0.db;\n+        let mut path = path.split(':');\n+        let trait_ = path.next_back()?;\n+        let std_crate = path.next()?;\n+        let std_crate = self.find_crate(std_crate)?;\n+        let mut module = std_crate.root_module(db);\n+        for segment in path {\n+            module = module.children(db).find_map(|child| {\n+                let name = child.name(db)?;\n+                if name.to_string() == segment {\n+                    Some(child)\n+                } else {\n+                    None\n+                }\n+            })?;\n+        }\n+        let def =\n+            module.scope(db, None).into_iter().find(|(name, _def)| name.to_string() == trait_)?.1;\n+        Some(def)\n+    }\n+}"}, {"sha": "3afcd2edaa175549400b0da866401ecd6ce0b0bf", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -39,6 +39,7 @@ tracing-tree = { version = \"0.1.4\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n ide = { path = \"../ide\", version = \"0.0.0\" }\n+ide_helpers = { path = \"../ide_helpers\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n project_model = { path = \"../project_model\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "d7b711f9451c860f21a991c7715f68817ccefc4c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ae3650d855554575f866264a3c8197dfd12835/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f4ae3650d855554575f866264a3c8197dfd12835", "patch": "@@ -11,10 +11,8 @@ use std::{convert::TryFrom, ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use hir::PrefixKind;\n-use ide::{\n-    AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig,\n-    MergeBehaviour,\n-};\n+use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n+use ide_helpers::insert_use::MergeBehaviour;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use rustc_hash::FxHashSet;"}]}