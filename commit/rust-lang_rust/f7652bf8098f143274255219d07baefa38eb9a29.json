{"sha": "f7652bf8098f143274255219d07baefa38eb9a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NjUyYmY4MDk4ZjE0MzI3NDI1NTIxOWQwN2JhZWZhMzhlYjlhMjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T22:31:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T22:31:48Z"}, "message": "save-analysis-json: lower def ids", "tree": {"sha": "c35162e6e1f90e287a19466d908248e3f36e7f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35162e6e1f90e287a19466d908248e3f36e7f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7652bf8098f143274255219d07baefa38eb9a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7652bf8098f143274255219d07baefa38eb9a29", "html_url": "https://github.com/rust-lang/rust/commit/f7652bf8098f143274255219d07baefa38eb9a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7652bf8098f143274255219d07baefa38eb9a29/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d61cb637678441b991619b1002982a24ca7a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d61cb637678441b991619b1002982a24ca7a3e", "html_url": "https://github.com/rust-lang/rust/commit/e1d61cb637678441b991619b1002982a24ca7a3e"}], "stats": {"total": 125, "additions": 63, "deletions": 62}, "files": [{"sha": "bcbe5575635ece2d52b6c4a74a703c1660e11483", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 63, "deletions": 62, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/f7652bf8098f143274255219d07baefa38eb9a29/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7652bf8098f143274255219d07baefa38eb9a29/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=f7652bf8098f143274255219d07baefa38eb9a29", "patch": "@@ -13,8 +13,7 @@ use std::io::Write;\n use rustc_serialize::json::as_json;\n use syntax::codemap::CodeMap;\n \n-use rustc::hir::def_id::DefId;\n-use syntax::ast::{CrateNum, NodeId};\n+use syntax::ast::CrateNum;\n \n use super::data::{self, SpanData};\n use super::dump::Dump;\n@@ -92,6 +91,8 @@ trait Lower {\n     fn lower(self, cm: &CodeMap) -> Self::Target;\n }\n \n+pub type Id = u32;\n+\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n@@ -116,11 +117,11 @@ impl Lower for data::CratePreludeData {\n /// Data for enum declarations.\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct EnumData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub value: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n }\n \n impl Lower for data::EnumData {\n@@ -140,12 +141,12 @@ impl Lower for data::EnumData {\n /// Data for extern crates.\n #[derive(Debug, RustcEncodable)]\n pub struct ExternCrateData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub name: String,\n     pub crate_num: CrateNum,\n     pub location: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n }\n \n impl Lower for data::ExternCrateData {\n@@ -167,8 +168,8 @@ impl Lower for data::ExternCrateData {\n #[derive(Debug, RustcEncodable)]\n pub struct FunctionCallData {\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: DefId,\n+    pub scope: Id,\n+    pub ref_id: Id,\n }\n \n impl Lower for data::FunctionCallData {\n@@ -178,20 +179,20 @@ impl Lower for data::FunctionCallData {\n         FunctionCallData {\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n+            ref_id: self.ref_id.index.as_u32(),\n         }\n     }\n }\n \n /// Data for all kinds of functions and methods.\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct FunctionData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub name: String,\n     pub qualname: String,\n-    pub declaration: Option<DefId>,\n+    pub declaration: Option<Id>,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n }\n \n impl Lower for data::FunctionData {\n@@ -202,7 +203,7 @@ impl Lower for data::FunctionData {\n             id: self.id,\n             name: self.name,\n             qualname: self.qualname,\n-            declaration: self.declaration,\n+            declaration: self.declaration.map(|id| id.index.as_u32()),\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n         }\n@@ -213,8 +214,8 @@ impl Lower for data::FunctionData {\n #[derive(Debug, RustcEncodable)]\n pub struct FunctionRefData {\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: DefId,\n+    pub scope: Id,\n+    pub ref_id: Id,\n }\n \n impl Lower for data::FunctionRefData {\n@@ -224,17 +225,17 @@ impl Lower for data::FunctionRefData {\n         FunctionRefData {\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n+            ref_id: self.ref_id.index.as_u32(),\n         }\n     }\n }\n #[derive(Debug, RustcEncodable)]\n pub struct ImplData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub trait_ref: Option<DefId>,\n-    pub self_ref: Option<DefId>,\n+    pub scope: Id,\n+    pub trait_ref: Option<Id>,\n+    pub self_ref: Option<Id>,\n }\n \n impl Lower for data::ImplData {\n@@ -245,17 +246,17 @@ impl Lower for data::ImplData {\n             id: self.id,\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            trait_ref: self.trait_ref,\n-            self_ref: self.self_ref,\n+            trait_ref: self.trait_ref.map(|id| id.index.as_u32()),\n+            self_ref: self.self_ref.map(|id| id.index.as_u32()),\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct InheritanceData {\n     pub span: SpanData,\n-    pub base_id: DefId,\n-    pub deriv_id: NodeId\n+    pub base_id: Id,\n+    pub deriv_id: Id\n }\n \n impl Lower for data::InheritanceData {\n@@ -264,7 +265,7 @@ impl Lower for data::InheritanceData {\n     fn lower(self, cm: &CodeMap) -> InheritanceData {\n         InheritanceData {\n             span: SpanData::from_span(self.span, cm),    \n-            base_id: self.base_id,\n+            base_id: self.base_id.index.as_u32(),\n             deriv_id: self.deriv_id\n         }\n     }\n@@ -299,7 +300,7 @@ pub struct MacroUseData {\n     // Because macro expansion happens before ref-ids are determined,\n     // we use the callee span to reference the associated macro definition.\n     pub callee_span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n     pub imported: bool,\n }\n \n@@ -322,9 +323,9 @@ impl Lower for data::MacroUseData {\n #[derive(Debug, RustcEncodable)]\n pub struct MethodCallData {\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: Option<DefId>,\n-    pub decl_id: Option<DefId>,\n+    pub scope: Id,\n+    pub ref_id: Option<Id>,\n+    pub decl_id: Option<Id>,\n }\n \n impl Lower for data::MethodCallData {\n@@ -334,19 +335,19 @@ impl Lower for data::MethodCallData {\n         MethodCallData {\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n-            decl_id: self.decl_id,\n+            ref_id: self.ref_id.map(|id| id.index.as_u32()),\n+            decl_id: self.decl_id.map(|id| id.index.as_u32()),\n         }\n     }\n }\n \n /// Data for method declarations (methods with a body are treated as functions).\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct MethodData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n }\n \n impl Lower for data::MethodData {\n@@ -365,11 +366,11 @@ impl Lower for data::MethodData {\n /// Data for modules.\n #[derive(Debug, RustcEncodable)]\n pub struct ModData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub name: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n     pub filename: String,\n }\n \n@@ -392,8 +393,8 @@ impl Lower for data::ModData {\n #[derive(Debug, RustcEncodable)]\n pub struct ModRefData {\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: Option<DefId>,\n+    pub scope: Id,\n+    pub ref_id: Option<Id>,\n     pub qualname: String\n }\n \n@@ -404,7 +405,7 @@ impl Lower for data::ModRefData {\n         ModRefData {\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n+            ref_id: self.ref_id.map(|id| id.index.as_u32()),\n             qualname: self.qualname,\n         }\n     }\n@@ -413,10 +414,10 @@ impl Lower for data::ModRefData {\n #[derive(Debug, RustcEncodable)]\n pub struct StructData {\n     pub span: SpanData,\n-    pub id: NodeId,\n-    pub ctor_id: NodeId,\n+    pub id: Id,\n+    pub ctor_id: Id,\n     pub qualname: String,\n-    pub scope: NodeId,\n+    pub scope: Id,\n     pub value: String\n }\n \n@@ -438,11 +439,11 @@ impl Lower for data::StructData {\n #[derive(Debug, RustcEncodable)]\n pub struct StructVariantData {\n     pub span: SpanData,\n-    pub id: NodeId,\n+    pub id: Id,\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: NodeId\n+    pub scope: Id\n }\n \n impl Lower for data::StructVariantData {\n@@ -463,9 +464,9 @@ impl Lower for data::StructVariantData {\n #[derive(Debug, RustcEncodable)]\n pub struct TraitData {\n     pub span: SpanData,\n-    pub id: NodeId,\n+    pub id: Id,\n     pub qualname: String,\n-    pub scope: NodeId,\n+    pub scope: Id,\n     pub value: String\n }\n \n@@ -486,12 +487,12 @@ impl Lower for data::TraitData {\n #[derive(Debug, RustcEncodable)]\n pub struct TupleVariantData {\n     pub span: SpanData,\n-    pub id: NodeId,\n+    pub id: Id,\n     pub name: String,\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: NodeId,\n+    pub scope: Id,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -513,7 +514,7 @@ impl Lower for data::TupleVariantData {\n /// Data for a typedef.\n #[derive(Debug, RustcEncodable)]\n pub struct TypedefData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub span: SpanData,\n     pub qualname: String,\n     pub value: String,\n@@ -536,8 +537,8 @@ impl Lower for data::TypedefData {\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct TypeRefData {\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: Option<DefId>,\n+    pub scope: Id,\n+    pub ref_id: Option<Id>,\n     pub qualname: String,\n }\n \n@@ -548,19 +549,19 @@ impl Lower for data::TypeRefData {\n         TypeRefData {\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n+            ref_id: self.ref_id.map(|id| id.index.as_u32()),\n             qualname: self.qualname,\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct UseData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub span: SpanData,\n     pub name: String,\n-    pub mod_id: Option<DefId>,\n-    pub scope: NodeId\n+    pub mod_id: Option<Id>,\n+    pub scope: Id\n }\n \n impl Lower for data::UseData {\n@@ -571,18 +572,18 @@ impl Lower for data::UseData {\n             id: self.id,\n             span: SpanData::from_span(self.span, cm),    \n             name: self.name,\n-            mod_id: self.mod_id,\n+            mod_id: self.mod_id.map(|id| id.index.as_u32()),\n             scope: self.scope,\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct UseGlobData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub span: SpanData,\n     pub names: Vec<String>,\n-    pub scope: NodeId\n+    pub scope: Id\n }\n \n impl Lower for data::UseGlobData {\n@@ -601,11 +602,11 @@ impl Lower for data::UseGlobData {\n /// Data for local and global variables (consts and statics).\n #[derive(Debug, RustcEncodable)]\n pub struct VariableData {\n-    pub id: NodeId,\n+    pub id: Id,\n     pub name: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n+    pub scope: Id,\n     pub value: String,\n     pub type_value: String,\n }\n@@ -632,8 +633,8 @@ impl Lower for data::VariableData {\n pub struct VariableRefData {\n     pub name: String,\n     pub span: SpanData,\n-    pub scope: NodeId,\n-    pub ref_id: DefId,\n+    pub scope: Id,\n+    pub ref_id: Id,\n }\n \n impl Lower for data::VariableRefData {\n@@ -644,7 +645,7 @@ impl Lower for data::VariableRefData {\n             name: self.name,\n             span: SpanData::from_span(self.span, cm),    \n             scope: self.scope,\n-            ref_id: self.ref_id,\n+            ref_id: self.ref_id.index.as_u32(),\n         }\n     }\n }"}]}