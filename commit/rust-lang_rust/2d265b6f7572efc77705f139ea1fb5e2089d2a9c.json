{"sha": "2d265b6f7572efc77705f139ea1fb5e2089d2a9c", "node_id": "C_kwDOAAsO6NoAKDJkMjY1YjZmNzU3MmVmYzc3NzA1ZjEzOWVhMWZiNWUyMDg5ZDJhOWM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-13T17:25:53Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-13T17:54:45Z"}, "message": "collect module item-likes in visit_items\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "ef3c9ee215f3a2ada6ae8b0644e9ab3f353d2e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3c9ee215f3a2ada6ae8b0644e9ab3f353d2e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d265b6f7572efc77705f139ea1fb5e2089d2a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d265b6f7572efc77705f139ea1fb5e2089d2a9c", "html_url": "https://github.com/rust-lang/rust/commit/2d265b6f7572efc77705f139ea1fb5e2089d2a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d265b6f7572efc77705f139ea1fb5e2089d2a9c/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "html_url": "https://github.com/rust-lang/rust/commit/275497c35e00bcf6b7766c8d1cb6540caa8a4baf"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "56cefe7e9fac9b1f7a05f11dabe760960375fd61", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d265b6f7572efc77705f139ea1fb5e2089d2a9c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d265b6f7572efc77705f139ea1fb5e2089d2a9c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=2d265b6f7572efc77705f139ea1fb5e2089d2a9c", "patch": "@@ -1238,6 +1238,10 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n     let mut collector = ItemCollector::new(tcx, true);\n \n+    // A \"crate collector\" and \"module collector\" start at a\n+    // module item (the former starts at the crate root) but only\n+    // the former needs to collect it. ItemCollector does not do this for us.\n+    collector.submodules.push(CRATE_DEF_ID);\n     tcx.hir().walk_toplevel_module(&mut collector);\n \n     let ItemCollector {\n@@ -1302,19 +1306,18 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n \n         self.items.push(item.item_id());\n \n-        if !self.crate_collector && let ItemKind::Mod(..) = item.kind {\n-            // If this declares another module, do not recurse inside it.\n+        // Items that are modules are handled here instead of in visit_mod.\n+        if let ItemKind::Mod(module) = &item.kind {\n             self.submodules.push(item.def_id);\n+            // A module collector does not recurse inside nested modules.\n+            if self.crate_collector {\n+                intravisit::walk_mod(self, module, item.hir_id());\n+            }\n         } else {\n             intravisit::walk_item(self, item)\n         }\n     }\n \n-    fn visit_mod(&mut self, m: &'hir Mod<'hir>, _s: Span, n: HirId) {\n-        self.submodules.push(n.owner);\n-        intravisit::walk_mod(self, m, n);\n-    }\n-\n     fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n         self.foreign_items.push(item.foreign_item_id());\n         intravisit::walk_foreign_item(self, item)"}]}