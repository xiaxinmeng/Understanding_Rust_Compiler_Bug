{"sha": "4ce35fdd349927c3cf1143421c71e4e75acb34e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTM1ZmRkMzQ5OTI3YzNjZjExNDM0MjFjNzFlNGU3NWFjYjM0ZTk=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-09-11T15:19:09Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:07Z"}, "message": "Add tests for unsized-locals.", "tree": {"sha": "e49ddcac28849f844f7df1aef2134f3562cad397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49ddcac28849f844f7df1aef2134f3562cad397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce35fdd349927c3cf1143421c71e4e75acb34e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce35fdd349927c3cf1143421c71e4e75acb34e9", "html_url": "https://github.com/rust-lang/rust/commit/4ce35fdd349927c3cf1143421c71e4e75acb34e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce35fdd349927c3cf1143421c71e4e75acb34e9/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eceab02ec2fcb53f855373929ea2364c12396b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eceab02ec2fcb53f855373929ea2364c12396b4", "html_url": "https://github.com/rust-lang/rust/commit/5eceab02ec2fcb53f855373929ea2364c12396b4"}], "stats": {"total": 289, "additions": 289, "deletions": 0}, "files": [{"sha": "9ac67da24431e10f1fa7d2018012b07059510a49", "filename": "src/test/compile-fail/unsized-locals/by-value-trait-object-safety.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String where Self: Sized;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    x.foo();\n+    //~^ERROR the `foo` method cannot be invoked on a trait object\n+}"}, {"sha": "23b1c72a5bf95329ada98e70260655e26cd6240d", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+#![feature(unboxed_closures)]\n+\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+struct A;\n+\n+impl FnOnce<()> for A {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl FnOnce<()> for B {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl FnOnce<()> for C {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl FnOnce<()> for D {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (): ()) -> Self::Output {\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"hello\"));\n+    let x = *(Box::new(B(42)) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"42\"));\n+    let x = *(Box::new(C(format!(\"jumping fox\"))) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"jumping fox\"));\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\")))) as Box<dyn FnOnce<(), Output = String>>);\n+    assert_eq!(x.call_once(()), format!(\"lazy dog\"));\n+}"}, {"sha": "f5d1c7e84d212c1d9cec64ef8e1fd7f73eee456e", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects-rust-call2.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects-rust-call2.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+#![feature(unboxed_closures)]\n+\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+struct A;\n+\n+impl FnOnce<(String, Box<str>)> for A {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl FnOnce<(String, Box<str>)> for B {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl FnOnce<(String, Box<str>)> for C {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl FnOnce<(String, Box<str>)> for D {\n+    type Output = String;\n+    extern \"rust-call\" fn call_once(self, (s1, s2): (String, Box<str>)) -> Self::Output {\n+        assert_eq!(&s1 as &str, \"s1\");\n+        assert_eq!(&s2 as &str, \"s2\");\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(A) as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"hello\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(B(42)) as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"42\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(C(format!(\"jumping fox\")))\n+              as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"jumping fox\"));\n+    let (s1, s2) = (format!(\"s1\"), format!(\"s2\").into_boxed_str());\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\"))))\n+              as Box<dyn FnOnce<(String, Box<str>), Output = String>>);\n+    assert_eq!(x.call_once((s1, s2)), format!(\"lazy dog\"));\n+}"}, {"sha": "688dcaed81590219a43a1efcd85b2312b2e84827", "filename": "src/test/run-pass-valgrind/unsized-locals/by-value-trait-objects.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Fby-value-trait-objects.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct B(i32);\n+\n+impl Foo for B {\n+    fn foo(self) -> String {\n+        format!(\"{}\", self.0)\n+    }\n+}\n+\n+struct C(String);\n+\n+impl Foo for C {\n+    fn foo(self) -> String {\n+        self.0\n+    }\n+}\n+\n+struct D(Box<String>);\n+\n+impl Foo for D {\n+    fn foo(self) -> String {\n+        *self.0\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+    let x = *(Box::new(B(42)) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"42\"));\n+    let x = *(Box::new(C(format!(\"jumping fox\"))) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"jumping fox\"));\n+    let x = *(Box::new(D(Box::new(format!(\"lazy dog\")))) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"lazy dog\"));\n+}"}, {"sha": "b2d228b4da301ed1970f7a5bf795947510d03bac", "filename": "src/test/run-pass/unsized-locals/by-value-trait-object-safety-withdefault.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+struct A;\n+\n+impl Foo for A {}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}, {"sha": "2912df7ce075e3047e9673c120de2a46a1377376", "filename": "src/test/run-pass/unsized-locals/by-value-trait-object-safety.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce35fdd349927c3cf1143421c71e4e75acb34e9/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=4ce35fdd349927c3cf1143421c71e4e75acb34e9", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_locals)]\n+\n+pub trait Foo {\n+    fn foo(self) -> String;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn foo(self) -> String {\n+        format!(\"hello\")\n+    }\n+}\n+\n+\n+fn main() {\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}]}