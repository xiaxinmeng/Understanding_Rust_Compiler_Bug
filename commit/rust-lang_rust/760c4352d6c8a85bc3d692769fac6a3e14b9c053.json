{"sha": "760c4352d6c8a85bc3d692769fac6a3e14b9c053", "node_id": "C_kwDOAAsO6NoAKDc2MGM0MzUyZDZjOGE4NWJjM2Q2OTI3NjlmYWM2YTNlMTRiOWMwNTM", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-04T18:19:49Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Migrate \"struct literal body without path\" error to diagnostic struct", "tree": {"sha": "ec61f122e0238d1dc26213c83756140297d4bcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec61f122e0238d1dc26213c83756140297d4bcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760c4352d6c8a85bc3d692769fac6a3e14b9c053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760c4352d6c8a85bc3d692769fac6a3e14b9c053", "html_url": "https://github.com/rust-lang/rust/commit/760c4352d6c8a85bc3d692769fac6a3e14b9c053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760c4352d6c8a85bc3d692769fac6a3e14b9c053/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "html_url": "https://github.com/rust-lang/rust/commit/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "e49661bd4e5246f1c013f4479cf022b82e773762", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/760c4352d6c8a85bc3d692769fac6a3e14b9c053/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760c4352d6c8a85bc3d692769fac6a3e14b9c053/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=760c4352d6c8a85bc3d692769fac6a3e14b9c053", "patch": "@@ -1014,3 +1014,21 @@ pub(crate) enum ExpectedSemiSugg {\n     #[suggestion_short(parser::sugg_add_semi, code = \";\", applicability = \"machine-applicable\")]\n     AddSemi(#[primary_span] Span),\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parser::struct_literal_body_without_path)]\n+pub(crate) struct StructLiteralBodyWithoutPath {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sugg: StructLiteralBodyWithoutPathSugg,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser::suggestion, applicability = \"has-placeholders\")]\n+pub(crate) struct StructLiteralBodyWithoutPathSugg {\n+    #[suggestion_part(code = \"{{ SomeStruct \")]\n+    pub before: Span,\n+    #[suggestion_part(code = \" }}\")]\n+    pub after: Span,\n+}"}, {"sha": "c18a13ef778eb5e45d4696e85e5457bf9ad2ecc7", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/760c4352d6c8a85bc3d692769fac6a3e14b9c053/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760c4352d6c8a85bc3d692769fac6a3e14b9c053/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=760c4352d6c8a85bc3d692769fac6a3e14b9c053", "patch": "@@ -6,7 +6,8 @@ use super::{\n use crate::errors::{\n     AmbiguousPlus, BadQPathStage2, BadTypePlus, BadTypePlusSub, ExpectedIdentifier, ExpectedSemi,\n     ExpectedSemiSugg, InInTypo, IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait,\n-    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UseEqInstead,\n+    StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, SuggEscapeToUseAsIdentifier,\n+    SuggRemoveComma, UseEqInstead,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -21,10 +22,10 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n use rustc_errors::{\n-    fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n+    Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -645,19 +646,13 @@ impl<'a> Parser<'a> {\n                     //     field: value,\n                     // } }\n                     err.delay_as_bug();\n-                    self.struct_span_err(\n-                        expr.span,\n-                        fluent::parser::struct_literal_body_without_path,\n-                    )\n-                    .multipart_suggestion(\n-                        fluent::parser::suggestion,\n-                        vec![\n-                            (expr.span.shrink_to_lo(), \"{ SomeStruct \".to_string()),\n-                            (expr.span.shrink_to_hi(), \" }\".to_string()),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .emit();\n+                    self.sess.emit_err(StructLiteralBodyWithoutPath {\n+                        span: expr.span,\n+                        sugg: StructLiteralBodyWithoutPathSugg {\n+                            before: expr.span.shrink_to_lo(),\n+                            after: expr.span.shrink_to_hi(),\n+                        },\n+                    });\n                     self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],"}]}