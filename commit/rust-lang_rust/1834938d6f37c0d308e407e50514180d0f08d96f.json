{"sha": "1834938d6f37c0d308e407e50514180d0f08d96f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzQ5MzhkNmYzN2MwZDMwOGU0MDdlNTA1MTQxODBkMGYwOGQ5NmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-20T07:45:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-20T07:45:04Z"}, "message": "Merge #8598\n\n8598: minor: fix ugly line wrapping in the rendered manual r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bdd7162d0123f884f7fa05fd71173bba9356f081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd7162d0123f884f7fa05fd71173bba9356f081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1834938d6f37c0d308e407e50514180d0f08d96f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfoaACRBK7hj4Ov3rIwAAJ3QIAFtH9Fry5JhSRGcFa/leeL59\ndzLlHkbTwuTmnBEbpWBO2dsOr37k6pdQreytLOkEk5bgAlENmx7Jp0K90NCmPpBu\nsUyObp9cBS1zW7zjWKQHxXvuHIlHZvRvFTVRX8HMORzeuKdU8CP7EyQiVmwgz2/x\ncbRd0cMuRif1s4tWcFzworN+Gyah/SH9h+od21Ot+2nMsXcGLv0jCcl5xsfYjkJU\ncMBRRHmV2eV5Cl8GnZ8VFsIiLUX/4pSryQvCSD0gqQ+77lRGTiSszRCCSEUI1i3t\nrxMVxkgPy2cuQZIj2FoCtfBPd9SmBdv2+pw2i8+jVVEgmNoNvv3uxkC0+EzmS5U=\n=8Mxq\n-----END PGP SIGNATURE-----\n", "payload": "tree bdd7162d0123f884f7fa05fd71173bba9356f081\nparent 15b34667c55e894e0a4881d1544bd2e89f932c01\nparent 0ce591d33db5976f97ecd2541f0d6704cdb35550\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618904704 +0000\ncommitter GitHub <noreply@github.com> 1618904704 +0000\n\nMerge #8598\n\n8598: minor: fix ugly line wrapping in the rendered manual r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1834938d6f37c0d308e407e50514180d0f08d96f", "html_url": "https://github.com/rust-lang/rust/commit/1834938d6f37c0d308e407e50514180d0f08d96f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1834938d6f37c0d308e407e50514180d0f08d96f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15b34667c55e894e0a4881d1544bd2e89f932c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b34667c55e894e0a4881d1544bd2e89f932c01", "html_url": "https://github.com/rust-lang/rust/commit/15b34667c55e894e0a4881d1544bd2e89f932c01"}, {"sha": "0ce591d33db5976f97ecd2541f0d6704cdb35550", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce591d33db5976f97ecd2541f0d6704cdb35550", "html_url": "https://github.com/rust-lang/rust/commit/0ce591d33db5976f97ecd2541f0d6704cdb35550"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "54195adb74ca15a0a835bc75c7a3c6991cc53db2", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1834938d6f37c0d308e407e50514180d0f08d96f/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1834938d6f37c0d308e407e50514180d0f08d96f/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=1834938d6f37c0d308e407e50514180d0f08d96f", "patch": "@@ -429,70 +429,92 @@ However, if you use some other build system, you'll have to describe the structu\n [source,TypeScript]\n ----\n interface JsonProject {\n-    /// Path to the directory with *source code* of sysroot crates.\n+    /// Path to the directory with *source code* of\n+    /// sysroot crates.\n+    ///\n+    /// It should point to the directory where std,\n+    /// core, and friends can be found:\n     ///\n-    /// It should point to the directory where std, core, and friends can be found:\n     /// https://github.com/rust-lang/rust/tree/master/library.\n     ///\n-    /// If provided, rust-analyzer automatically adds dependencies on sysroot\n-    /// crates. Conversely, if you omit this path, you can specify sysroot\n-    /// dependencies yourself and, for example, have several different \"sysroots\" in\n-    /// one graph of crates.\n+    /// If provided, rust-analyzer automatically adds\n+    /// dependencies on sysroot crates. Conversely,\n+    /// if you omit this path, you can specify sysroot\n+    /// dependencies yourself and, for example, have\n+    /// several different \"sysroots\" in one graph of\n+    /// crates.\n     sysroot_src?: string;\n-    /// The set of crates comprising the current project.\n-    /// Must include all transitive dependencies as well as sysroot crate (libstd, libcore and such).\n+    /// The set of crates comprising the current\n+    /// project. Must include all transitive\n+    /// dependencies as well as sysroot crate (libstd,\n+    /// libcore and such).\n     crates: Crate[];\n }\n \n interface Crate {\n-    /// Optional crate name used for display purposes, without affecting semantics.\n-    /// See the `deps` key for semantically-significant crate names.\n+    /// Optional crate name used for display purposes,\n+    /// without affecting semantics. See the `deps`\n+    /// key for semantically-significant crate names.\n     display_name?: string;\n     /// Path to the root module of the crate.\n     root_module: string;\n     /// Edition of the crate.\n     edition: \"2015\" | \"2018\" | \"2021\";\n     /// Dependencies\n     deps: Dep[];\n-    /// Should this crate be treated as a member of current \"workspace\".\n+    /// Should this crate be treated as a member of\n+    /// current \"workspace\".\n     ///\n-    /// By default, inferred from the `root_module` (members are the crates which reside\n-    /// inside the directory opened in the editor).\n+    /// By default, inferred from the `root_module`\n+    /// (members are the crates which reside inside\n+    /// the directory opened in the editor).\n     ///\n-    /// Set this to `false` for things like standard library and 3rd party crates to\n-    /// enable performance optimizations (rust-analyzer assumes that non-member crates\n-    /// don't change).\n+    /// Set this to `false` for things like standard\n+    /// library and 3rd party crates to enable\n+    /// performance optimizations (rust-analyzer\n+    /// assumes that non-member crates don't change).\n     is_workspace_member?: boolean;\n-    /// Optionally specify the (super)set of `.rs` files comprising this crate.\n+    /// Optionally specify the (super)set of `.rs`\n+    /// files comprising this crate.\n     ///\n-    /// By default, rust-analyzer assumes that only files under `root_module.parent` can belong to a crate.\n-    /// `include_dirs` are included recursively, unless a subdirectory is in `exclude_dirs`.\n+    /// By default, rust-analyzer assumes that only\n+    /// files under `root_module.parent` can belong\n+    /// to a crate. `include_dirs` are included\n+    /// recursively, unless a subdirectory is in\n+    /// `exclude_dirs`.\n     ///\n     /// Different crates can share the same `source`.\n     ///\n-    /// If two crates share an `.rs` file in common, they *must* have the same `source`.\n-    /// rust-analyzer assumes that files from one source can't refer to files in another source.\n+    /// If two crates share an `.rs` file in common,\n+    /// they *must* have the same `source`.\n+    /// rust-analyzer assumes that files from one\n+    /// source can't refer to files in another source.\n     source?: {\n         include_dirs: string[],\n         exclude_dirs: string[],\n     },\n-    /// The set of cfgs activated for a given crate, like `[\"unix\", \"feature=\\\"foo\\\"\", \"feature=\\\"bar\\\"\"]`.\n+    /// The set of cfgs activated for a given crate, like\n+    /// `[\"unix\", \"feature=\\\"foo\\\"\", \"feature=\\\"bar\\\"\"]`.\n     cfg: string[];\n     /// Target triple for this Crate.\n     ///\n-    /// Used when running `rustc --print cfg` to get target-specific cfgs.\n+    /// Used when running `rustc --print cfg`\n+    /// to get target-specific cfgs.\n     target?: string;\n-    /// Environment variables, used for the `env!` macro\n+    /// Environment variables, used for\n+    /// the `env!` macro\n     env: : { [key: string]: string; },\n \n-    /// For proc-macro crates, path to compiles proc-macro (.so file).\n+    /// For proc-macro crates, path to compiled\n+    /// proc-macro (.so file).\n     proc_macro_dylib_path?: string;\n }\n \n interface Dep {\n     /// Index of a crate in the `crates` array.\n     crate: number,\n-    /// Name as should appear in the (implicit) `extern crate name` declaration.\n+    /// Name as should appear in the (implicit)\n+    /// `extern crate name` declaration.\n     name: string,\n }\n ----"}]}