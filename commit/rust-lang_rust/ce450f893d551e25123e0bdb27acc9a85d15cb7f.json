{"sha": "ce450f893d551e25123e0bdb27acc9a85d15cb7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDUwZjg5M2Q1NTFlMjUxMjNlMGJkYjI3YWNjOWE4NWQxNWNiN2Y=", "commit": {"author": {"name": "Ali Saidi", "email": "alisaidi@amazon.com", "date": "2021-09-04T20:11:26Z"}, "committer": {"name": "Ali Saidi", "email": "alisaidi@amazon.com", "date": "2021-09-04T20:11:26Z"}, "message": "Use the 64b inner:monotonize() implementation not the 128b one for aarch64\n\naarch64 prior to v8.4 (FEAT_LSE2) doesn't have an instruction that guarantees\nuntorn 128b reads except for completing a 128b load/store exclusive pair\n(ldxp/stxp) or compare-and-swap (casp) successfully. The requirement to\ncomplete a 128b read+write atomic is actually more expensive and more unfair\nthan the previous implementation of monotonize() which used a Mutex on aarch64,\nespecially at large core counts.  For aarch64 switch to the 64b atomic\nimplementation which is about 13x faster for a benchmark that involves many\ncalls to Instant::now().", "tree": {"sha": "11d0266bdadd0c4e536cbd7666f2634141ae20de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11d0266bdadd0c4e536cbd7666f2634141ae20de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce450f893d551e25123e0bdb27acc9a85d15cb7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce450f893d551e25123e0bdb27acc9a85d15cb7f", "html_url": "https://github.com/rust-lang/rust/commit/ce450f893d551e25123e0bdb27acc9a85d15cb7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce450f893d551e25123e0bdb27acc9a85d15cb7f/comments", "author": {"login": "AGSaidi", "id": 10063075, "node_id": "MDQ6VXNlcjEwMDYzMDc1", "avatar_url": "https://avatars.githubusercontent.com/u/10063075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AGSaidi", "html_url": "https://github.com/AGSaidi", "followers_url": "https://api.github.com/users/AGSaidi/followers", "following_url": "https://api.github.com/users/AGSaidi/following{/other_user}", "gists_url": "https://api.github.com/users/AGSaidi/gists{/gist_id}", "starred_url": "https://api.github.com/users/AGSaidi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AGSaidi/subscriptions", "organizations_url": "https://api.github.com/users/AGSaidi/orgs", "repos_url": "https://api.github.com/users/AGSaidi/repos", "events_url": "https://api.github.com/users/AGSaidi/events{/privacy}", "received_events_url": "https://api.github.com/users/AGSaidi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AGSaidi", "id": 10063075, "node_id": "MDQ6VXNlcjEwMDYzMDc1", "avatar_url": "https://avatars.githubusercontent.com/u/10063075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AGSaidi", "html_url": "https://github.com/AGSaidi", "followers_url": "https://api.github.com/users/AGSaidi/followers", "following_url": "https://api.github.com/users/AGSaidi/following{/other_user}", "gists_url": "https://api.github.com/users/AGSaidi/gists{/gist_id}", "starred_url": "https://api.github.com/users/AGSaidi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AGSaidi/subscriptions", "organizations_url": "https://api.github.com/users/AGSaidi/orgs", "repos_url": "https://api.github.com/users/AGSaidi/repos", "events_url": "https://api.github.com/users/AGSaidi/events{/privacy}", "received_events_url": "https://api.github.com/users/AGSaidi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a51c39c69256c8a8256e775f2764a1983048d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a51c39c69256c8a8256e775f2764a1983048d4", "html_url": "https://github.com/rust-lang/rust/commit/72a51c39c69256c8a8256e775f2764a1983048d4"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "5783fa760dff86a6618028dc46fd38237b217660", "filename": "library/std/src/time/monotonic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce450f893d551e25123e0bdb27acc9a85d15cb7f/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce450f893d551e25123e0bdb27acc9a85d15cb7f/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs?ref=ce450f893d551e25123e0bdb27acc9a85d15cb7f", "patch": "@@ -5,7 +5,7 @@ pub(super) fn monotonize(raw: time::Instant) -> time::Instant {\n     inner::monotonize(raw)\n }\n \n-#[cfg(all(target_has_atomic = \"64\", not(target_has_atomic = \"128\")))]\n+#[cfg(any(all(target_has_atomic = \"64\", not(target_has_atomic = \"128\")), target_arch = \"aarch64\"))]\n pub mod inner {\n     use crate::sync::atomic::AtomicU64;\n     use crate::sync::atomic::Ordering::*;\n@@ -70,7 +70,7 @@ pub mod inner {\n     }\n }\n \n-#[cfg(target_has_atomic = \"128\")]\n+#[cfg(all(target_has_atomic = \"128\", not(target_arch = \"aarch64\")))]\n pub mod inner {\n     use crate::sync::atomic::AtomicU128;\n     use crate::sync::atomic::Ordering::*;"}]}