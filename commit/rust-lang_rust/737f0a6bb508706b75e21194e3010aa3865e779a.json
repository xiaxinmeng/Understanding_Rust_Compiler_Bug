{"sha": "737f0a6bb508706b75e21194e3010aa3865e779a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczN2YwYTZiYjUwODcwNmI3NWUyMTE5NGUzMDEwYWEzODY1ZTc3OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-02T17:16:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-02T17:16:29Z"}, "message": "Auto merge of #4599 - lzutao:zero-ptr-suggestion, r=flip1995\n\nAdd suggestion for zero-ptr lint\n\nchangelog: Improve suggestion of `zero_ptr` lint", "tree": {"sha": "5c8818538e1cb8898c01d7c744584922b6cf42b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8818538e1cb8898c01d7c744584922b6cf42b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/737f0a6bb508706b75e21194e3010aa3865e779a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/737f0a6bb508706b75e21194e3010aa3865e779a", "html_url": "https://github.com/rust-lang/rust/commit/737f0a6bb508706b75e21194e3010aa3865e779a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/737f0a6bb508706b75e21194e3010aa3865e779a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844765c8a5398550f3ff724104e460b2e7c73944", "url": "https://api.github.com/repos/rust-lang/rust/commits/844765c8a5398550f3ff724104e460b2e7c73944", "html_url": "https://github.com/rust-lang/rust/commit/844765c8a5398550f3ff724104e460b2e7c73944"}, {"sha": "6b1a8683f46248ac0724543e89ed01a2c900f847", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a8683f46248ac0724543e89ed01a2c900f847", "html_url": "https://github.com/rust-lang/rust/commit/6b1a8683f46248ac0724543e89ed01a2c900f847"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "54962833b58f0a0762f009ae5e85961a673cdd55", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/737f0a6bb508706b75e21194e3010aa3865e779a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737f0a6bb508706b75e21194e3010aa3865e779a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=737f0a6bb508706b75e21194e3010aa3865e779a", "patch": "@@ -13,8 +13,8 @@ use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, implements_trait, in_constant, is_integer_const, iter_input_pats,\n-    last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n-    span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n+    last_path_segment, match_qpath, match_trait_method, paths, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -621,17 +621,25 @@ fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n \n fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr, ty: &Ty) {\n     if_chain! {\n-        if let TyKind::Ptr(MutTy { mutbl, .. }) = ty.kind;\n+        if let TyKind::Ptr(ref mut_ty) = ty.kind;\n         if let ExprKind::Lit(ref lit) = e.kind;\n-        if let LitKind::Int(value, ..) = lit.node;\n-        if value == 0;\n+        if let LitKind::Int(0, _) = lit.node;\n         if !in_constant(cx, e.hir_id);\n         then {\n-            let msg = match mutbl {\n-                Mutability::MutMutable => \"`0 as *mut _` detected. Consider using `ptr::null_mut()`\",\n-                Mutability::MutImmutable => \"`0 as *const _` detected. Consider using `ptr::null()`\",\n+            let (msg, sugg_fn) = match mut_ty.mutbl {\n+                Mutability::MutMutable => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n+                Mutability::MutImmutable => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n             };\n-            span_lint(cx, ZERO_PTR, span, msg);\n+\n+            let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n+                (format!(\"{}()\", sugg_fn), Applicability::MachineApplicable)\n+            } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n+                (format!(\"{}::<{}>()\", sugg_fn, mut_ty_snip), Applicability::MachineApplicable)\n+            } else {\n+                // `MaybeIncorrect` as type inference may not work with the suggested code\n+                (format!(\"{}()\", sugg_fn), Applicability::MaybeIncorrect)\n+            };\n+            span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n         }\n     }\n }"}, {"sha": "27dad6322d88dd56cfa53450d5af91bb4f386138", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737f0a6bb508706b75e21194e3010aa3865e779a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737f0a6bb508706b75e21194e3010aa3865e779a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=737f0a6bb508706b75e21194e3010aa3865e779a", "patch": "@@ -61,7 +61,7 @@ pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n /// # Example\n ///\n /// ```rust,ignore\n-/// if in_constant(cx, expr.id) {\n+/// if in_constant(cx, expr.hir_id) {\n ///     // Do something\n /// }\n /// ```"}, {"sha": "489aa4121a3a965169b04316e4850f43aea6ad5c", "filename": "tests/ui/zero_ptr.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.fixed?ref=737f0a6bb508706b75e21194e3010aa3865e779a", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+pub fn foo(_const: *const f32, _mut: *mut i64) {}\n+\n+fn main() {\n+    let _ = std::ptr::null::<usize>();\n+    let _ = std::ptr::null_mut::<f64>();\n+    let _: *const u8 = std::ptr::null();\n+\n+    foo(0 as _, 0 as _);\n+    foo(std::ptr::null(), std::ptr::null_mut());\n+\n+    let z = 0;\n+    let _ = z as *const usize; // this is currently not caught\n+}"}, {"sha": "c3b55ef9ebd90c99ee0f4e90ccf22e735b49fdd2", "filename": "tests/ui/zero_ptr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.rs?ref=737f0a6bb508706b75e21194e3010aa3865e779a", "patch": "@@ -1,8 +1,14 @@\n-#[allow(unused_variables)]\n+// run-rustfix\n+pub fn foo(_const: *const f32, _mut: *mut i64) {}\n+\n fn main() {\n-    let x = 0 as *const usize;\n-    let y = 0 as *mut f64;\n+    let _ = 0 as *const usize;\n+    let _ = 0 as *mut f64;\n+    let _: *const u8 = 0 as *const _;\n+\n+    foo(0 as _, 0 as _);\n+    foo(0 as *const _, 0 as *mut _);\n \n     let z = 0;\n-    let z = z as *const usize; // this is currently not caught\n+    let _ = z as *const usize; // this is currently not caught\n }"}, {"sha": "4ee5e9a261686bc6ee1fac45439b32fa88e0fac3", "filename": "tests/ui/zero_ptr.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737f0a6bb508706b75e21194e3010aa3865e779a/tests%2Fui%2Fzero_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.stderr?ref=737f0a6bb508706b75e21194e3010aa3865e779a", "patch": "@@ -1,16 +1,34 @@\n-error: `0 as *const _` detected. Consider using `ptr::null()`\n-  --> $DIR/zero_ptr.rs:3:13\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr.rs:5:13\n    |\n-LL |     let x = 0 as *const usize;\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |     let _ = 0 as *const usize;\n+   |             ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<usize>()`\n    |\n    = note: `-D clippy::zero-ptr` implied by `-D warnings`\n \n-error: `0 as *mut _` detected. Consider using `ptr::null_mut()`\n-  --> $DIR/zero_ptr.rs:4:13\n+error: `0 as *mut _` detected\n+  --> $DIR/zero_ptr.rs:6:13\n    |\n-LL |     let y = 0 as *mut f64;\n-   |             ^^^^^^^^^^^^^\n+LL |     let _ = 0 as *mut f64;\n+   |             ^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<f64>()`\n \n-error: aborting due to 2 previous errors\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr.rs:7:24\n+   |\n+LL |     let _: *const u8 = 0 as *const _;\n+   |                        ^^^^^^^^^^^^^ help: try: `std::ptr::null()`\n+\n+error: `0 as *const _` detected\n+  --> $DIR/zero_ptr.rs:10:9\n+   |\n+LL |     foo(0 as *const _, 0 as *mut _);\n+   |         ^^^^^^^^^^^^^ help: try: `std::ptr::null()`\n+\n+error: `0 as *mut _` detected\n+  --> $DIR/zero_ptr.rs:10:24\n+   |\n+LL |     foo(0 as *const _, 0 as *mut _);\n+   |                        ^^^^^^^^^^^ help: try: `std::ptr::null_mut()`\n+\n+error: aborting due to 5 previous errors\n "}]}