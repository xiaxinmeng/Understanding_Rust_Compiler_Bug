{"sha": "87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "node_id": "C_kwDOAAsO6NoAKDg3Y2EzMzMyMTA0NWIxYjNhMTBmOGVkOGRhYjQwNTIxZjRiZjRiZWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-02T14:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T14:52:01Z"}, "message": "Rollup merge of #91045 - mjptree:issue-90702-fix, r=petrochenkov\n\nIssue 90702 fix: Stop treating some crate loading failures as fatal errors\n\nSurface mulitple `extern crate` resolution errors at a time.\n\nThis is achieved by creating a dummy crate, instead of aborting directly after the resolution error. The `ExternCrateError` has been added to allow propagating the resolution error from `rustc_metadata` crate to the `rustc_resolve` with a minimal public surface. The `import_extern_crate` function is a block that was factored out from `build_reduced_graph_for_item` for better organization. The only added functionality made to it where the added error handling in the `process_extern_crate` call. The remaining bits in this function are the same as before.\n\nResolves #90702\n\nr? `@petrochenkov`", "tree": {"sha": "19743533140817ec831bf60262533c54959c7a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19743533140817ec831bf60262533c54959c7a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqN2SCRBK7hj4Ov3rIwAAU14IAHJbW2XA6gZ3PkponEkgnQKu\nrZngKxFRcLGsyVGdiERjPNkl5ROjPMGvcjhS/Pc8e/m68sT7n1p6YxGzge/a7r9v\nj85aN7tUyxsixLzY4mtSgOhduYboiIiDXU4JYqHrWwbAWImgENbiuqQ0OwDLj/d7\n0o9ikxA14G3gDzhD0Uw0E57tEB3bLgCKn1lYaO6sE5quvCAw50JqK4ia/jOM/0a5\neFtGIfbguaf0ENMZNk7mIsz6fEulenFUGGCw9b9ihm0AuUjYNQ6vAvStyd5oFzN/\n6tlUqcqoMW+UcN0M5NuvcRw3ADl67NvVUaTxgdlEsBaljD/aGd/U+fCNsC3xISo=\n=ZU/S\n-----END PGP SIGNATURE-----\n", "payload": "tree 19743533140817ec831bf60262533c54959c7a07\nparent 0666a33a6b8d39112f77cff65b6742092cfa736a\nparent 2ca933301183b1e913802bc5710c0cb5218ada28\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638456721 +0100\ncommitter GitHub <noreply@github.com> 1638456721 +0100\n\nRollup merge of #91045 - mjptree:issue-90702-fix, r=petrochenkov\n\nIssue 90702 fix: Stop treating some crate loading failures as fatal errors\n\nSurface mulitple `extern crate` resolution errors at a time.\n\nThis is achieved by creating a dummy crate, instead of aborting directly after the resolution error. The `ExternCrateError` has been added to allow propagating the resolution error from `rustc_metadata` crate to the `rustc_resolve` with a minimal public surface. The `import_extern_crate` function is a block that was factored out from `build_reduced_graph_for_item` for better organization. The only added functionality made to it where the added error handling in the `process_extern_crate` call. The remaining bits in this function are the same as before.\n\nResolves #90702\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "html_url": "https://github.com/rust-lang/rust/commit/87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0666a33a6b8d39112f77cff65b6742092cfa736a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0666a33a6b8d39112f77cff65b6742092cfa736a", "html_url": "https://github.com/rust-lang/rust/commit/0666a33a6b8d39112f77cff65b6742092cfa736a"}, {"sha": "2ca933301183b1e913802bc5710c0cb5218ada28", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca933301183b1e913802bc5710c0cb5218ada28", "html_url": "https://github.com/rust-lang/rust/commit/2ca933301183b1e913802bc5710c0cb5218ada28"}], "stats": {"total": 316, "additions": 210, "deletions": 106}, "files": [{"sha": "2626a2e189c1d062cffc8b676e4669b77ab3e433", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -512,13 +512,17 @@ impl<'a> CrateLoader<'a> {\n         name: Symbol,\n         span: Span,\n         dep_kind: CrateDepKind,\n-    ) -> CrateNum {\n+    ) -> Option<CrateNum> {\n         self.used_extern_options.insert(name);\n-        self.maybe_resolve_crate(name, dep_kind, None).unwrap_or_else(|err| {\n-            let missing_core =\n-                self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n-            err.report(&self.sess, span, missing_core)\n-        })\n+        match self.maybe_resolve_crate(name, dep_kind, None) {\n+            Ok(cnum) => Some(cnum),\n+            Err(err) => {\n+                let missing_core =\n+                    self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n+                err.report(&self.sess, span, missing_core);\n+                None\n+            }\n+        }\n     }\n \n     fn maybe_resolve_crate<'b>(\n@@ -751,7 +755,7 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -791,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             );\n         }\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -991,7 +995,7 @@ impl<'a> CrateLoader<'a> {\n         item: &ast::Item,\n         definitions: &Definitions,\n         def_id: LocalDefId,\n-    ) -> CrateNum {\n+    ) -> Option<CrateNum> {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\n@@ -1011,7 +1015,7 @@ impl<'a> CrateLoader<'a> {\n                     CrateDepKind::Explicit\n                 };\n \n-                let cnum = self.resolve_crate(name, item.span, dep_kind);\n+                let cnum = self.resolve_crate(name, item.span, dep_kind)?;\n \n                 let path_len = definitions.def_path(def_id).data.len();\n                 self.update_extern_crate(\n@@ -1023,14 +1027,14 @@ impl<'a> CrateLoader<'a> {\n                         dependency_of: LOCAL_CRATE,\n                     },\n                 );\n-                cnum\n+                Some(cnum)\n             }\n             _ => bug!(),\n         }\n     }\n \n-    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit);\n+    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> Option<CrateNum> {\n+        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit)?;\n \n         self.update_extern_crate(\n             cnum,\n@@ -1043,7 +1047,7 @@ impl<'a> CrateLoader<'a> {\n             },\n         );\n \n-        cnum\n+        Some(cnum)\n     }\n \n     pub fn maybe_process_path_extern(&mut self, name: Symbol) -> Option<CrateNum> {"}, {"sha": "e2fd8056f1a7c6a63fe728b6a38c5bd36d9706d8", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -220,7 +220,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n@@ -814,11 +814,11 @@ pub fn find_plugin_registrar(\n     span: Span,\n     name: Symbol,\n ) -> PathBuf {\n-    match find_plugin_registrar_impl(sess, metadata_loader, name) {\n-        Ok(res) => res,\n+    find_plugin_registrar_impl(sess, metadata_loader, name).unwrap_or_else(|err| {\n         // `core` is always available if we got as far as loading plugins.\n-        Err(err) => err.report(sess, span, false),\n-    }\n+        err.report(sess, span, false);\n+        FatalError.raise()\n+    })\n }\n \n fn find_plugin_registrar_impl<'a>(\n@@ -931,8 +931,8 @@ impl fmt::Display for MetadataError<'_> {\n }\n \n impl CrateError {\n-    crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n-        let mut err = match self {\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) {\n+        let mut diag = match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n                 &format!(\"cannot load a crate with a non-ascii name `{}`\", crate_name),\n@@ -1210,8 +1210,6 @@ impl CrateError {\n             ),\n         };\n \n-        err.emit();\n-        sess.abort_if_errors();\n-        unreachable!();\n+        diag.emit();\n     }\n }"}, {"sha": "d45c064d5e37e5b86d32399886b78beffecb9dfc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 88, "deletions": 69, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -678,75 +678,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n-                    self.r\n-                        .session\n-                        .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n-                        .span_suggestion(\n-                            item.span,\n-                            \"try\",\n-                            \"extern crate self as name;\".into(),\n-                            Applicability::HasPlaceholders,\n-                        )\n-                        .emit();\n-                    return;\n-                } else if orig_name == Some(kw::SelfLower) {\n-                    self.r.graph_root\n-                } else {\n-                    let crate_id = self.r.crate_loader.process_extern_crate(\n-                        item,\n-                        &self.r.definitions,\n-                        local_def_id,\n-                    );\n-                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n-                    self.r.expect_module(crate_id.as_def_id())\n-                };\n-\n-                let used = self.process_macro_use_imports(item, module);\n-                let binding =\n-                    (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n-                let import = self.r.arenas.alloc_import(Import {\n-                    kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n-                    root_id: item.id,\n-                    id: item.id,\n-                    parent_scope: self.parent_scope,\n-                    imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n-                    has_attributes: !item.attrs.is_empty(),\n-                    use_span_with_attributes: item.span_with_attributes(),\n-                    use_span: item.span,\n-                    root_span: item.span,\n-                    span: item.span,\n-                    module_path: Vec::new(),\n-                    vis: Cell::new(vis),\n-                    used: Cell::new(used),\n-                });\n-                self.r.potentially_unused_imports.push(import);\n-                let imported_binding = self.r.import(binding, import);\n-                if ptr::eq(parent, self.r.graph_root) {\n-                    if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0())\n-                    {\n-                        if expansion != LocalExpnId::ROOT\n-                            && orig_name.is_some()\n-                            && entry.extern_crate_item.is_none()\n-                        {\n-                            let msg = \"macro-expanded `extern crate` items cannot \\\n-                                       shadow names passed with `--extern`\";\n-                            self.r.session.span_err(item.span, msg);\n-                        }\n-                    }\n-                    let entry =\n-                        self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n-                            ExternPreludeEntry {\n-                                extern_crate_item: None,\n-                                introduced_by_item: true,\n-                            },\n-                        );\n-                    entry.extern_crate_item = Some(imported_binding);\n-                    if orig_name.is_some() {\n-                        entry.introduced_by_item = true;\n-                    }\n-                }\n-                self.r.define(parent, ident, TypeNS, imported_binding);\n+                self.build_reduced_graph_for_extern_crate(\n+                    orig_name,\n+                    item,\n+                    local_def_id,\n+                    vis,\n+                    parent,\n+                );\n             }\n \n             ItemKind::Mod(..) => {\n@@ -884,6 +822,87 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n+    fn build_reduced_graph_for_extern_crate(\n+        &mut self,\n+        orig_name: Option<Symbol>,\n+        item: &Item,\n+        local_def_id: LocalDefId,\n+        vis: ty::Visibility,\n+        parent: Module<'a>,\n+    ) {\n+        let ident = item.ident;\n+        let sp = item.span;\n+        let parent_scope = self.parent_scope;\n+        let expansion = parent_scope.expansion;\n+\n+        let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {\n+            self.r\n+                .session\n+                .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n+                .span_suggestion(\n+                    item.span,\n+                    \"rename the `self` crate to be able to import it\",\n+                    \"extern crate self as name;\".into(),\n+                    Applicability::HasPlaceholders,\n+                )\n+                .emit();\n+            return;\n+        } else if orig_name == Some(kw::SelfLower) {\n+            Some(self.r.graph_root)\n+        } else {\n+            self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(\n+                |crate_id| {\n+                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n+                    self.r.expect_module(crate_id.as_def_id())\n+                },\n+            )\n+        }\n+        .map(|module| {\n+            let used = self.process_macro_use_imports(item, module);\n+            let binding =\n+                (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+            (used, Some(ModuleOrUniformRoot::Module(module)), binding)\n+        })\n+        .unwrap_or((true, None, self.r.dummy_binding));\n+        let import = self.r.arenas.alloc_import(Import {\n+            kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n+            root_id: item.id,\n+            id: item.id,\n+            parent_scope: self.parent_scope,\n+            imported_module: Cell::new(module),\n+            has_attributes: !item.attrs.is_empty(),\n+            use_span_with_attributes: item.span_with_attributes(),\n+            use_span: item.span,\n+            root_span: item.span,\n+            span: item.span,\n+            module_path: Vec::new(),\n+            vis: Cell::new(vis),\n+            used: Cell::new(used),\n+        });\n+        self.r.potentially_unused_imports.push(import);\n+        let imported_binding = self.r.import(binding, import);\n+        if ptr::eq(parent, self.r.graph_root) {\n+            if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {\n+                if expansion != LocalExpnId::ROOT\n+                    && orig_name.is_some()\n+                    && entry.extern_crate_item.is_none()\n+                {\n+                    let msg = \"macro-expanded `extern crate` items cannot \\\n+                                       shadow names passed with `--extern`\";\n+                    self.r.session.span_err(item.span, msg);\n+                }\n+            }\n+            let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n+                ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },\n+            );\n+            entry.extern_crate_item = Some(imported_binding);\n+            if orig_name.is_some() {\n+                entry.introduced_by_item = true;\n+            }\n+        }\n+        self.r.define(parent, ident, TypeNS, imported_binding);\n+    }\n+\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n         let local_def_id = self.r.local_def_id(item.id);"}, {"sha": "df0dc9307d697a3d4b4395b642d9d61ebb43f804", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -3285,7 +3285,9 @@ impl<'a> Resolver<'a> {\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {\n-                    self.crate_loader.process_path_extern(ident.name, ident.span)\n+                    let Some(crate_id) =\n+                        self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n+                    crate_id\n                 } else {\n                     self.crate_loader.maybe_process_path_extern(ident.name)?\n                 };"}, {"sha": "aea861e3261b5fc8a19f5be0e18f5b35e371a189", "filename": "src/test/ui/crate-loading/invalid-rlib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -6,3 +6,5 @@\n #![no_std]\n use ::foo; //~ ERROR invalid metadata files for crate `foo`\n //~| NOTE failed to mmap file\n+//~^^ ERROR invalid metadata files for crate `foo`\n+//~| NOTE failed to mmap file"}, {"sha": "3c0d23bf7b4cce575aae1978e32884981535d356", "filename": "src/test/ui/crate-loading/invalid-rlib.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -6,6 +6,14 @@ LL | use ::foo;\n    |\n    = note: failed to mmap file 'auxiliary/libfoo.rlib'\n \n-error: aborting due to previous error\n+error[E0786]: found invalid metadata files for crate `foo`\n+  --> $DIR/invalid-rlib.rs:7:7\n+   |\n+LL | use ::foo;\n+   |       ^^^\n+   |\n+   = note: failed to mmap file 'auxiliary/libfoo.rlib'\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0786`."}, {"sha": "400d9f6e0ba12c94b6b6b1e414a07f13322518b1", "filename": "src/test/ui/crate-loading/missing-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: --target x86_64-unknown-uefi\n // needs-llvm-components: x86\n // rustc-env:CARGO=/usr/bin/cargo\n+#![feature(no_core)]\n #![no_core]\n extern crate core;\n //~^ ERROR can't find crate for `core`"}, {"sha": "70bcae1e0edd076cb843a176948814a7f569ff4c", "filename": "src/test/ui/crate-loading/missing-std.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,5 +1,5 @@\n error[E0463]: can't find crate for `core`\n-  --> $DIR/missing-std.rs:5:1\n+  --> $DIR/missing-std.rs:6:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ can't find crate\n@@ -8,6 +8,8 @@ LL | extern crate core;\n    = help: consider downloading the target with `rustup target add x86_64-unknown-uefi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "3170537b0e0a088f61916102199d1b5b27c86526", "filename": "src/test/ui/extern-flag/empty-extern-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --extern std=\n // error-pattern: extern location for std does not exist\n+// needs-unwind since it affects the error output\n+// ignore-emscripten compiled with panic=abort, personality not required\n \n fn main() {}"}, {"sha": "b0628a4f6dd62a68fe6b8fe0490c293a45753dc4", "filename": "src/test/ui/extern-flag/empty-extern-arg.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,4 +1,8 @@\n error: extern location for std does not exist: \n \n-error: aborting due to previous error\n+error: language item required, but not found: `eh_personality`\n+\n+error: `#[panic_handler]` function required, but not found\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "a6560ca78624d5294f6539980d107ba0500135a2", "filename": "src/test/ui/extern/extern-crate-multiple-missing.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -0,0 +1,10 @@\n+// If multiple `extern crate` resolutions fail each of them should produce an error\n+extern crate bar; //~ ERROR can't find crate for `bar`\n+extern crate foo; //~ ERROR can't find crate for `foo`\n+\n+fn main() {\n+    // If the crate name introduced by `extern crate` failed to resolve then subsequent\n+    // derived paths do not emit additional errors\n+    foo::something();\n+    bar::something();\n+}"}, {"sha": "893bb4fb26d0d955adfa0ccf50bbd3d4fd6ad8d1", "filename": "src/test/ui/extern/extern-crate-multiple-missing.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -0,0 +1,15 @@\n+error[E0463]: can't find crate for `bar`\n+  --> $DIR/extern-crate-multiple-missing.rs:2:1\n+   |\n+LL | extern crate bar;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/extern-crate-multiple-missing.rs:3:1\n+   |\n+LL | extern crate foo;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "127765727b401f000058c11cefda55831f9b2fb7", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -2,7 +2,12 @@ error: `extern crate self;` requires renaming\n   --> $DIR/extern-crate-self-fail.rs:1:1\n    |\n LL | extern crate self;\n-   | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+help: rename the `self` crate to be able to import it\n+   |\n+LL | extern crate self as name;\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: `#[macro_use]` is not supported on `extern crate self`\n   --> $DIR/extern-crate-self-fail.rs:3:1"}, {"sha": "9ecae3e7a2b2437794896087d813dcafda6d3b3a", "filename": "src/test/ui/issues/issue-37131.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -4,6 +4,8 @@ error[E0463]: can't find crate for `std`\n    = help: consider downloading the target with `rustup target add thumbv6m-none-eabi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "4e56cca33d6a9301febbb5b4ebbba23dbd2c531a", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,4 +1,5 @@\n-//~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n+//~ ERROR can't find crate for `core`\n+//~^ ERROR can't find crate for `compiler_builtins`\n \n // compile-flags: --target thumbv7em-none-eabihf\n // needs-llvm-components: arm\n@@ -7,3 +8,6 @@\n #![no_std]\n \n extern crate cortex_m;\n+//~^ ERROR can't find crate for `cortex_m`\n+\n+fn main() {}"}, {"sha": "fcfa2bf119cff6f29c5410cdb34524ff1ab4972e", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -4,6 +4,16 @@ error[E0463]: can't find crate for `core`\n    = help: consider downloading the target with `rustup target add thumbv7em-none-eabihf`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error[E0463]: can't find crate for `compiler_builtins`\n+\n+error[E0463]: can't find crate for `cortex_m`\n+  --> $DIR/compiler-builtins-error.rs:10:1\n+   |\n+LL | extern crate cortex_m;\n+   | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "2427bde6d18bcbe543e2f92d9101d7a85f3d1a07", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,7 +1,8 @@\n // edition:2018\n // compile-flags:--extern foo --extern bar\n \n+use bar::foo; //~ ERROR can't find crate for `bar`\n use foo::bar; //~ ERROR can't find crate for `foo`\n-use bar::foo;\n+//~^^ ERROR unresolved imports `bar::foo`, `foo::bar`\n \n fn main() {}"}, {"sha": "8b9863948bd6cd9cd076df02214ec65b7bb906aa", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87ca33321045b1b3a10f8ed8dab40521f4bf4bec/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr?ref=87ca33321045b1b3a10f8ed8dab40521f4bf4bec", "patch": "@@ -1,9 +1,24 @@\n-error[E0463]: can't find crate for `foo`\n+error[E0463]: can't find crate for `bar`\n   --> $DIR/deadlock.rs:4:5\n    |\n+LL | use bar::foo;\n+   |     ^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/deadlock.rs:5:5\n+   |\n LL | use foo::bar;\n    |     ^^^ can't find crate\n \n-error: aborting due to previous error\n+error[E0432]: unresolved imports `bar::foo`, `foo::bar`\n+  --> $DIR/deadlock.rs:4:5\n+   |\n+LL | use bar::foo;\n+   |     ^^^^^^^^\n+LL | use foo::bar;\n+   |     ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0463`.\n+Some errors have detailed explanations: E0432, E0463.\n+For more information about an error, try `rustc --explain E0432`."}]}