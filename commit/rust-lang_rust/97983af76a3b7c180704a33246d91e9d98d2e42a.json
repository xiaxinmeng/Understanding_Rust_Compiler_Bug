{"sha": "97983af76a3b7c180704a33246d91e9d98d2e42a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OTgzYWY3NmEzYjdjMTgwNzA0YTMzMjQ2ZDkxZTlkOThkMmU0MmE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-24T22:31:42Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-25T14:55:20Z"}, "message": "Remove support for self-opening\n\nThis was only used for linkage test cases, which is already covered by\nthe run-make-fulldeps/symbol-visibility test -- which fairly extensively makes\nsure we're correctly exporting the right symbols at the right visibility (for\nvarious Rust crate types).", "tree": {"sha": "439975938732a501704fdf2dd96e4adc8a675af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439975938732a501704fdf2dd96e4adc8a675af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97983af76a3b7c180704a33246d91e9d98d2e42a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97983af76a3b7c180704a33246d91e9d98d2e42a", "html_url": "https://github.com/rust-lang/rust/commit/97983af76a3b7c180704a33246d91e9d98d2e42a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97983af76a3b7c180704a33246d91e9d98d2e42a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b958790b336738540d027d645718713849638d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b958790b336738540d027d645718713849638d7", "html_url": "https://github.com/rust-lang/rust/commit/0b958790b336738540d027d645718713849638d7"}], "stats": {"total": 133, "additions": 16, "deletions": 117}, "files": [{"sha": "8439ac6c9e53ceb0d13b0eaf20dbceb7b441ad59", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -205,7 +205,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n }\n \n fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n-    let lib = DynamicLibrary::open(Some(path)).unwrap_or_else(|err| {\n+    let lib = DynamicLibrary::open(path).unwrap_or_else(|err| {\n         let err = format!(\"couldn't load codegen backend {:?}: {:?}\", path, err);\n         early_error(ErrorOutputType::default(), &err);\n     });"}, {"sha": "f3c4eca5fde2c928330d281ab8703b08a5482a21", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -585,7 +585,7 @@ impl<'a> CrateLoader<'a> {\n \n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n-        let lib = match DynamicLibrary::open(Some(&path)) {\n+        let lib = match DynamicLibrary::open(&path) {\n             Ok(lib) => lib,\n             Err(err) => self.sess.span_fatal(span, &err),\n         };"}, {"sha": "ce19240a009d091f52de29382790ef80f90500b3", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -16,10 +16,9 @@ impl Drop for DynamicLibrary {\n }\n \n impl DynamicLibrary {\n-    /// Lazily open a dynamic library. When passed None it gives a\n-    /// handle to the calling process\n-    pub fn open(filename: Option<&Path>) -> Result<DynamicLibrary, String> {\n-        let maybe_library = dl::open(filename.map(|path| path.as_os_str()));\n+    /// Lazily open a dynamic library.\n+    pub fn open(filename: &Path) -> Result<DynamicLibrary, String> {\n+        let maybe_library = dl::open(filename.as_os_str());\n \n         // The dynamic library must not be constructed if there is\n         // an error opening the library so the destructor does not\n@@ -57,24 +56,13 @@ mod dl {\n     use std::ptr;\n     use std::str;\n \n-    pub(super) fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n+    pub(super) fn open(filename: &OsStr) -> Result<*mut u8, String> {\n         check_for_errors_in(|| unsafe {\n-            match filename {\n-                Some(filename) => open_external(filename),\n-                None => open_internal(),\n-            }\n+            let s = CString::new(filename.as_bytes()).unwrap();\n+            libc::dlopen(s.as_ptr(), libc::RTLD_LAZY) as *mut u8\n         })\n     }\n \n-    unsafe fn open_external(filename: &OsStr) -> *mut u8 {\n-        let s = CString::new(filename.as_bytes()).unwrap();\n-        libc::dlopen(s.as_ptr(), libc::RTLD_LAZY) as *mut u8\n-    }\n-\n-    unsafe fn open_internal() -> *mut u8 {\n-        libc::dlopen(ptr::null(), libc::RTLD_LAZY) as *mut u8\n-    }\n-\n     fn check_for_errors_in<T, F>(f: F) -> Result<T, String>\n     where\n         F: FnOnce() -> T,\n@@ -124,10 +112,10 @@ mod dl {\n \n     use winapi::shared::minwindef::HMODULE;\n     use winapi::um::errhandlingapi::SetThreadErrorMode;\n-    use winapi::um::libloaderapi::{FreeLibrary, GetModuleHandleExW, GetProcAddress, LoadLibraryW};\n+    use winapi::um::libloaderapi::{FreeLibrary, GetProcAddress, LoadLibraryW};\n     use winapi::um::winbase::SEM_FAILCRITICALERRORS;\n \n-    pub(super) fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n+    pub(super) fn open(filename: &OsStr) -> Result<*mut u8, String> {\n         // disable \"dll load failed\" error dialog.\n         let prev_error_mode = unsafe {\n             let new_error_mode = SEM_FAILCRITICALERRORS;\n@@ -139,22 +127,9 @@ mod dl {\n             prev_error_mode\n         };\n \n-        let result = match filename {\n-            Some(filename) => {\n-                let filename_str: Vec<_> = filename.encode_wide().chain(Some(0)).collect();\n-                let result = unsafe { LoadLibraryW(filename_str.as_ptr()) } as *mut u8;\n-                ptr_result(result)\n-            }\n-            None => {\n-                let mut handle = ptr::null_mut();\n-                let succeeded = unsafe { GetModuleHandleExW(0, ptr::null(), &mut handle) };\n-                if succeeded == 0 {\n-                    Err(io::Error::last_os_error().to_string())\n-                } else {\n-                    Ok(handle as *mut u8)\n-                }\n-            }\n-        };\n+        let filename_str: Vec<_> = filename.encode_wide().chain(Some(0)).collect();\n+        let result = unsafe { LoadLibraryW(filename_str.as_ptr()) } as *mut u8;\n+        let result = ptr_result(result);\n \n         unsafe {\n             SetThreadErrorMode(prev_error_mode, ptr::null_mut());"}, {"sha": "7090bbf61c794747cf0d57d9f54da91c77069733", "filename": "src/librustc_metadata/dynamic_lib/tests.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib%2Ftests.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -1,32 +1,4 @@\n use super::*;\n-use std::mem;\n-\n-#[test]\n-fn test_loading_atoi() {\n-    if cfg!(windows) {\n-        return;\n-    }\n-\n-    // The C library does not need to be loaded since it is already linked in\n-    let lib = match DynamicLibrary::open(None) {\n-        Err(error) => panic!(\"Could not load self as module: {}\", error),\n-        Ok(lib) => lib,\n-    };\n-\n-    let atoi: extern \"C\" fn(*const libc::c_char) -> libc::c_int = unsafe {\n-        match lib.symbol(\"atoi\") {\n-            Err(error) => panic!(\"Could not load function atoi: {}\", error),\n-            Ok(atoi) => mem::transmute::<*mut u8, _>(atoi),\n-        }\n-    };\n-\n-    let argument = CString::new(\"1383428980\").unwrap();\n-    let expected_result = 0x52757374;\n-    let result = atoi(argument.as_ptr());\n-    if result != expected_result {\n-        panic!(\"atoi({:?}) != {} but equaled {} instead\", argument, expected_result, result)\n-    }\n-}\n \n #[test]\n fn test_errors_do_not_crash() {\n@@ -39,7 +11,7 @@ fn test_errors_do_not_crash() {\n     // Open /dev/null as a library to get an error, and make sure\n     // that only causes an error, and not a crash.\n     let path = Path::new(\"/dev/null\");\n-    match DynamicLibrary::open(Some(&path)) {\n+    match DynamicLibrary::open(&path) {\n         Err(_) => {}\n         Ok(_) => panic!(\"Successfully opened the empty library.\"),\n     }"}, {"sha": "f48d2b6c8b5e61dc18cf01ef6ddb88fa386e0ffd", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -76,7 +76,7 @@ fn dylink_registrar(\n     // Make sure the path contains a / or the linker will search for it.\n     let path = env::current_dir().unwrap().join(&path);\n \n-    let lib = match DynamicLibrary::open(Some(&path)) {\n+    let lib = match DynamicLibrary::open(&path) {\n         Ok(lib) => lib,\n         // this is fatal: there are almost certainly macros we need\n         // inside this crate, so continue would spew \"macro undefined\""}, {"sha": "c1de6477585851296f8d535f682d61f24d75b1b5", "filename": "src/test/run-make-fulldeps/extern-fn-reachable/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97983af76a3b7c180704a33246d91e9d98d2e42a/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs?ref=97983af76a3b7c180704a33246d91e9d98d2e42a", "patch": "@@ -8,7 +8,7 @@ use std::path::Path;\n pub fn main() {\n     unsafe {\n         let path = Path::new(\"libdylib.so\");\n-        let a = DynamicLibrary::open(Some(&path)).unwrap();\n+        let a = DynamicLibrary::open(&path).unwrap();\n         assert!(a.symbol::<isize>(\"fun1\").is_ok());\n         assert!(a.symbol::<isize>(\"fun2\").is_ok());\n         assert!(a.symbol::<isize>(\"fun3\").is_ok());"}, {"sha": "837ed1f002fc99b3bb1198397989ad9ffd087a73", "filename": "src/test/ui-fulldeps/auxiliary/linkage-visibility.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -1,35 +0,0 @@\n-// ignore-musl - dlsym doesn't see symbols without \"-C link-arg=-Wl,--export-dynamic\"\n-\n-#![feature(rustc_private)]\n-\n-extern crate rustc_metadata;\n-\n-use rustc_metadata::dynamic_lib::DynamicLibrary;\n-\n-#[no_mangle]\n-pub fn foo() {\n-    bar();\n-}\n-\n-pub fn foo2<T>() {\n-    fn bar2() {\n-        bar();\n-    }\n-    bar2();\n-}\n-\n-#[no_mangle]\n-fn bar() {}\n-\n-#[allow(dead_code)]\n-#[no_mangle]\n-fn baz() {}\n-\n-pub fn test() {\n-    let lib = DynamicLibrary::open(None).unwrap();\n-    unsafe {\n-        assert!(lib.symbol::<isize>(\"foo\").is_ok());\n-        assert!(lib.symbol::<isize>(\"baz\").is_ok());\n-        assert!(lib.symbol::<isize>(\"bar\").is_ok());\n-    }\n-}"}, {"sha": "ae46fbc4e8a03b9ad82980559173c64df63506c4", "filename": "src/test/ui-fulldeps/linkage-visibility.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fui-fulldeps%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b958790b336738540d027d645718713849638d7/src%2Ftest%2Fui-fulldeps%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flinkage-visibility.rs?ref=0b958790b336738540d027d645718713849638d7", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// aux-build:linkage-visibility.rs\n-// ignore-android: FIXME(#10356)\n-// ignore-windows: std::dynamic_lib does not work on Windows well\n-// ignore-emscripten no dynamic linking\n-\n-extern crate linkage_visibility as foo;\n-\n-pub fn main() {\n-    foo::test();\n-    foo::foo2::<isize>();\n-    foo::foo();\n-}"}]}