{"sha": "bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTk2YmY5MmVkYzVjOWEzNDI3NWJhZTYxNDNmMWFkYTczZTZjN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T22:49:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T22:49:18Z"}, "message": "auto merge of #8090 : blake2-ppc/rust/iterator-adaptor-names, r=pcwalton\n\nDrop the \"Iterator\" suffix for the the structs in std::iterator.\r\nFilter, Zip, Chain etc. are shorter type names for when iterator\r\npipelines need their types written out in full in return value types, so\r\nit's easier to read and write. the iterator module already forms enough\r\nnamespace.", "tree": {"sha": "ea2ad50feddf7b7155f3cb67ec9f9d48f59cfc00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea2ad50feddf7b7155f3cb67ec9f9d48f59cfc00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "html_url": "https://github.com/rust-lang/rust/commit/bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34016d1098bbd5e74fe18b99c4222b4fe709087", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34016d1098bbd5e74fe18b99c4222b4fe709087", "html_url": "https://github.com/rust-lang/rust/commit/d34016d1098bbd5e74fe18b99c4222b4fe709087"}, {"sha": "4b45f478818386cfe8554e3a5595c2cf38541b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b45f478818386cfe8554e3a5595c2cf38541b45", "html_url": "https://github.com/rust-lang/rust/commit/4b45f478818386cfe8554e3a5595c2cf38541b45"}], "stats": {"total": 223, "additions": 111, "deletions": 112}, "files": [{"sha": "b8ba7e58f2a606d630b17615d0e6d981b0f2520c", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -25,7 +25,7 @@\n use std::cast;\n use std::ptr;\n use std::util;\n-use std::iterator::{FromIterator, InvertIterator};\n+use std::iterator::{FromIterator, Invert};\n \n use container::Deque;\n \n@@ -356,7 +356,7 @@ impl<T> DList<T> {\n \n     /// Provide a reverse iterator\n     #[inline]\n-    pub fn rev_iter<'a>(&'a self) -> InvertIterator<DListIterator<'a, T>> {\n+    pub fn rev_iter<'a>(&'a self) -> Invert<DListIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n@@ -376,7 +376,7 @@ impl<T> DList<T> {\n     }\n     /// Provide a reverse iterator with mutable references\n     #[inline]\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<MutDListIterator<'a, T>> {\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> Invert<MutDListIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n \n@@ -389,7 +389,7 @@ impl<T> DList<T> {\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n     #[inline]\n-    pub fn consume_rev_iter(self) -> InvertIterator<ConsumeIterator<T>> {\n+    pub fn consume_rev_iter(self) -> Invert<ConsumeIterator<T>> {\n         self.consume_iter().invert()\n     }\n }"}, {"sha": "200a409f63c9ea0fcfe9c726e4f910b47d4eccd3", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -16,7 +16,7 @@\n use std::num;\n use std::uint;\n use std::vec;\n-use std::iterator::{FromIterator, InvertIterator};\n+use std::iterator::{FromIterator, Invert};\n \n use container::Deque;\n \n@@ -181,7 +181,7 @@ impl<T> RingBuf<T> {\n     }\n \n     /// Back-to-front iterator.\n-    pub fn rev_iter<'a>(&'a self) -> InvertIterator<RingBufIterator<'a, T>> {\n+    pub fn rev_iter<'a>(&'a self) -> Invert<RingBufIterator<'a, T>> {\n         self.iter().invert()\n     }\n \n@@ -192,7 +192,7 @@ impl<T> RingBuf<T> {\n     }\n \n     /// Back-to-front iterator which returns mutable values.\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> InvertIterator<RingBufMutIterator<'a, T>> {\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> Invert<RingBufMutIterator<'a, T>> {\n         self.mut_iter().invert()\n     }\n }"}, {"sha": "11b093dd884974da988e1367491f69bda0891d81", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -15,7 +15,7 @@\n \n #[allow(missing_doc)];\n \n-use std::iterator::{Iterator, IteratorUtil, EnumerateIterator, FilterMapIterator, InvertIterator};\n+use std::iterator::{Iterator, IteratorUtil, Enumerate, FilterMap, Invert};\n use std::uint;\n use std::util::replace;\n use std::vec::{VecIterator, VecMutIterator};\n@@ -204,8 +204,8 @@ impl<V> SmallIntMap<V> {\n \n     /// Empties the hash map, moving all values into the specified closure\n     pub fn consume(&mut self)\n-        -> FilterMapIterator<(uint, Option<V>), (uint, V),\n-                EnumerateIterator<vec::ConsumeIterator<Option<V>>>>\n+        -> FilterMap<(uint, Option<V>), (uint, V),\n+                Enumerate<vec::ConsumeIterator<Option<V>>>>\n     {\n         let values = replace(&mut self.v, ~[]);\n         values.consume_iter().enumerate().filter_map(|(i, v)| {\n@@ -291,7 +291,7 @@ pub struct SmallIntMapIterator<'self, T> {\n \n iterator!(impl SmallIntMapIterator -> (uint, &'self T), get_ref)\n double_ended_iterator!(impl SmallIntMapIterator -> (uint, &'self T), get_ref)\n-pub type SmallIntMapRevIterator<'self, T> = InvertIterator<SmallIntMapIterator<'self, T>>;\n+pub type SmallIntMapRevIterator<'self, T> = Invert<SmallIntMapIterator<'self, T>>;\n \n pub struct SmallIntMapMutIterator<'self, T> {\n     priv front: uint,\n@@ -301,7 +301,7 @@ pub struct SmallIntMapMutIterator<'self, T> {\n \n iterator!(impl SmallIntMapMutIterator -> (uint, &'self mut T), get_mut_ref)\n double_ended_iterator!(impl SmallIntMapMutIterator -> (uint, &'self mut T), get_mut_ref)\n-pub type SmallIntMapMutRevIterator<'self, T> = InvertIterator<SmallIntMapMutIterator<'self, T>>;\n+pub type SmallIntMapMutRevIterator<'self, T> = Invert<SmallIntMapMutIterator<'self, T>>;\n \n #[cfg(test)]\n mod test_map {"}, {"sha": "a9a11b611d6d64b62c7b9f3a4c4dc4c92a29832c", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -19,7 +19,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator, ChainIterator};\n+use iterator::{Iterator, IteratorUtil, FromIterator, Chain};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -751,7 +751,7 @@ impl<T:Hash + Eq> HashSet<T> {\n \n     /// Visit the values representing the symmetric difference\n     pub fn symmetric_difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n-        -> ChainIterator<SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n+        -> Chain<SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n         self.difference_iter(other).chain_(other.difference_iter(self))\n     }\n \n@@ -764,7 +764,7 @@ impl<T:Hash + Eq> HashSet<T> {\n \n     /// Visit the values representing the union\n     pub fn union_iter<'a>(&'a self, other: &'a HashSet<T>)\n-        -> ChainIterator<HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n+        -> Chain<HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n         self.iter().chain_(other.difference_iter(self))\n     }\n "}, {"sha": "6828de51622845cb3663e8a06d548b5f45bd9e9d", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -74,7 +74,7 @@ pub trait RandomAccessIterator<A>: Iterator<A> {\n /// In the future these will be default methods instead of a utility trait.\n pub trait DoubleEndedIteratorUtil {\n     /// Flip the direction of the iterator\n-    fn invert(self) -> InvertIterator<Self>;\n+    fn invert(self) -> Invert<Self>;\n }\n \n /// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n@@ -83,25 +83,25 @@ pub trait DoubleEndedIteratorUtil {\n impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil for T {\n     /// Flip the direction of the iterator\n     #[inline]\n-    fn invert(self) -> InvertIterator<T> {\n-        InvertIterator{iter: self}\n+    fn invert(self) -> Invert<T> {\n+        Invert{iter: self}\n     }\n }\n \n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n-pub struct InvertIterator<T> {\n+pub struct Invert<T> {\n     priv iter: T\n }\n \n-impl<A, T: DoubleEndedIterator<A>> Iterator<A> for InvertIterator<T> {\n+impl<A, T: DoubleEndedIterator<A>> Iterator<A> for Invert<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.iter.next_back() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for InvertIterator<T> {\n+impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Invert<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.iter.next() }\n }\n@@ -125,7 +125,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<Self, U>;\n+    fn chain_<U: Iterator<A>>(self, other: U) -> Chain<Self, U>;\n \n     /// Creates an iterator which iterates over both this and the specified\n     /// iterators simultaneously, yielding the two elements as pairs. When\n@@ -141,7 +141,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (&0, &1));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<Self, U>;\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> Zip<Self, U>;\n \n     // FIXME: #5898: should be called map\n     /// Creates a new iterator which will apply the specified function to each\n@@ -156,7 +156,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), 4);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n+    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, Self>;\n \n     /// Creates an iterator which applies the predicate to each element returned\n     /// by this iterator. Only elements which have the predicate evaluate to\n@@ -170,7 +170,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &2);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n+    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> Filter<'r, A, Self>;\n \n     /// Creates an iterator which both filters and maps elements.\n     /// If the specified function returns None, the element is skipped.\n@@ -184,7 +184,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), 4);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn filter_map<'r,  B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, Self>;\n+    fn filter_map<'r,  B>(self, f: &'r fn(A) -> Option<B>) -> FilterMap<'r, A, B, Self>;\n \n     /// Creates an iterator which yields a pair of the value returned by this\n     /// iterator plus the current index of iteration.\n@@ -198,7 +198,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), (1, &200));\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn enumerate(self) -> EnumerateIterator<Self>;\n+    fn enumerate(self) -> Enumerate<Self>;\n \n     /// Creates an iterator which invokes the predicate on elements until it\n     /// returns false. Once the predicate returns false, all further elements are\n@@ -214,7 +214,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhileIterator<'r, A, Self>;\n+    fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhile<'r, A, Self>;\n \n     /// Creates an iterator which yields elements so long as the predicate\n     /// returns true. After the predicate returns false for the first time, no\n@@ -229,7 +229,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &2);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n+    fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhile<'r, A, Self>;\n \n     /// Creates an iterator which skips the first `n` elements of this iterator,\n     /// and then it yields all further items.\n@@ -243,7 +243,7 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &5);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn skip(self, n: uint) -> SkipIterator<Self>;\n+    fn skip(self, n: uint) -> Skip<Self>;\n \n     // FIXME: #5898: should be called take\n     /// Creates an iterator which yields the first `n` elements of this\n@@ -259,12 +259,12 @@ pub trait IteratorUtil<A> {\n     /// assert_eq!(it.next().get(), &3);\n     /// assert!(it.next().is_none());\n     /// ~~~\n-    fn take_(self, n: uint) -> TakeIterator<Self>;\n+    fn take_(self, n: uint) -> Take<Self>;\n \n     /// Creates a new iterator which behaves in a similar fashion to foldl.\n     /// There is a state which is passed between each iteration and can be\n     /// mutated as necessary. The yielded values from the closure are yielded\n-    /// from the ScanIterator instance when not None.\n+    /// from the Scan instance when not None.\n     ///\n     /// # Example\n     ///\n@@ -282,7 +282,7 @@ pub trait IteratorUtil<A> {\n     /// assert!(it.next().is_none());\n     /// ~~~\n     fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n-        -> ScanIterator<'r, A, B, Self, St>;\n+        -> Scan<'r, A, B, Self, St>;\n \n     /// Creates an iterator that maps each element to an iterator,\n     /// and yields the elements of the produced iterators\n@@ -302,7 +302,7 @@ pub trait IteratorUtil<A> {\n     /// ~~~\n     // FIXME: #5898: should be called `flat_map`\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n-        -> FlatMapIterator<'r, A, Self, U>;\n+        -> FlatMap<'r, A, Self, U>;\n \n     /// Creates an iterator that calls a function with a reference to each\n     /// element before yielding it. This is often useful for debugging an\n@@ -321,7 +321,7 @@ pub trait IteratorUtil<A> {\n     ///println(sum.to_str());\n     /// ~~~\n     // FIXME: #5898: should be called `peek`\n-    fn peek_<'r>(self, f: &'r fn(&A)) -> PeekIterator<'r, A, Self>;\n+    fn peek_<'r>(self, f: &'r fn(&A)) -> Peek<'r, A, Self>;\n \n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n@@ -469,73 +469,73 @@ pub trait IteratorUtil<A> {\n /// In the future these will be default methods instead of a utility trait.\n impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline]\n-    fn chain_<U: Iterator<A>>(self, other: U) -> ChainIterator<T, U> {\n-        ChainIterator{a: self, b: other, flag: false}\n+    fn chain_<U: Iterator<A>>(self, other: U) -> Chain<T, U> {\n+        Chain{a: self, b: other, flag: false}\n     }\n \n     #[inline]\n-    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-        ZipIterator{a: self, b: other}\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> Zip<T, U> {\n+        Zip{a: self, b: other}\n     }\n \n     // FIXME: #5898: should be called map\n     #[inline]\n-    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, T> {\n-        MapIterator{iter: self, f: f}\n+    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> Map<'r, A, B, T> {\n+        Map{iter: self, f: f}\n     }\n \n     #[inline]\n-    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, T> {\n-        FilterIterator{iter: self, predicate: predicate}\n+    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> Filter<'r, A, T> {\n+        Filter{iter: self, predicate: predicate}\n     }\n \n     #[inline]\n-    fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, T> {\n-        FilterMapIterator { iter: self, f: f }\n+    fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMap<'r, A, B, T> {\n+        FilterMap { iter: self, f: f }\n     }\n \n     #[inline]\n-    fn enumerate(self) -> EnumerateIterator<T> {\n-        EnumerateIterator{iter: self, count: 0}\n+    fn enumerate(self) -> Enumerate<T> {\n+        Enumerate{iter: self, count: 0}\n     }\n \n     #[inline]\n-    fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhileIterator<'r, A, T> {\n-        SkipWhileIterator{iter: self, flag: false, predicate: predicate}\n+    fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhile<'r, A, T> {\n+        SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n \n     #[inline]\n-    fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, T> {\n-        TakeWhileIterator{iter: self, flag: false, predicate: predicate}\n+    fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhile<'r, A, T> {\n+        TakeWhile{iter: self, flag: false, predicate: predicate}\n     }\n \n     #[inline]\n-    fn skip(self, n: uint) -> SkipIterator<T> {\n-        SkipIterator{iter: self, n: n}\n+    fn skip(self, n: uint) -> Skip<T> {\n+        Skip{iter: self, n: n}\n     }\n \n     // FIXME: #5898: should be called take\n     #[inline]\n-    fn take_(self, n: uint) -> TakeIterator<T> {\n-        TakeIterator{iter: self, n: n}\n+    fn take_(self, n: uint) -> Take<T> {\n+        Take{iter: self, n: n}\n     }\n \n     #[inline]\n     fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n-        -> ScanIterator<'r, A, B, T, St> {\n-        ScanIterator{iter: self, f: f, state: initial_state}\n+        -> Scan<'r, A, B, T, St> {\n+        Scan{iter: self, f: f, state: initial_state}\n     }\n \n     #[inline]\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n-        -> FlatMapIterator<'r, A, T, U> {\n-        FlatMapIterator{iter: self, f: f, subiter: None }\n+        -> FlatMap<'r, A, T, U> {\n+        FlatMap{iter: self, f: f, subiter: None }\n     }\n \n     // FIXME: #5898: should be called `peek`\n     #[inline]\n-    fn peek_<'r>(self, f: &'r fn(&A)) -> PeekIterator<'r, A, T> {\n-        PeekIterator{iter: self, f: f}\n+    fn peek_<'r>(self, f: &'r fn(&A)) -> Peek<'r, A, T> {\n+        Peek{iter: self, f: f}\n     }\n \n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n@@ -774,24 +774,24 @@ pub trait ClonableIterator {\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n     /// ~~~\n-    fn cycle(self) -> CycleIterator<Self>;\n+    fn cycle(self) -> Cycle<Self>;\n }\n \n impl<A, T: Clone + Iterator<A>> ClonableIterator for T {\n     #[inline]\n-    fn cycle(self) -> CycleIterator<T> {\n-        CycleIterator{orig: self.clone(), iter: self}\n+    fn cycle(self) -> Cycle<T> {\n+        Cycle{orig: self.clone(), iter: self}\n     }\n }\n \n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n-pub struct CycleIterator<T> {\n+pub struct Cycle<T> {\n     priv orig: T,\n     priv iter: T,\n }\n \n-impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<T> {\n+impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         match self.iter.next() {\n@@ -813,13 +813,13 @@ impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<T> {\n \n /// An iterator which strings two iterators together\n #[deriving(Clone)]\n-pub struct ChainIterator<T, U> {\n+pub struct Chain<T, U> {\n     priv a: T,\n     priv b: U,\n     priv flag: bool\n }\n \n-impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n+impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.flag {\n@@ -856,7 +856,7 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<T, U> {\n }\n \n impl<A, T: DoubleEndedIterator<A>, U: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n-for ChainIterator<T, U> {\n+for Chain<T, U> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         match self.b.next_back() {\n@@ -867,7 +867,7 @@ for ChainIterator<T, U> {\n }\n \n impl<A, T: RandomAccessIterator<A>, U: RandomAccessIterator<A>> RandomAccessIterator<A>\n-for ChainIterator<T, U> {\n+for Chain<T, U> {\n     #[inline]\n     fn indexable(&self) -> uint {\n         let (a, b) = (self.a.indexable(), self.b.indexable());\n@@ -892,12 +892,12 @@ for ChainIterator<T, U> {\n \n /// An iterator which iterates two other iterators simultaneously\n #[deriving(Clone)]\n-pub struct ZipIterator<T, U> {\n+pub struct Zip<T, U> {\n     priv a: T,\n     priv b: U\n }\n \n-impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<T, U> {\n+impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<(A, B)> {\n         match (self.a.next(), self.b.next()) {\n@@ -925,12 +925,12 @@ impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<T, U\n }\n \n /// An iterator which maps the values of `iter` with `f`\n-pub struct MapIterator<'self, A, B, T> {\n+pub struct Map<'self, A, B, T> {\n     priv iter: T,\n     priv f: &'self fn(A) -> B\n }\n \n-impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n+impl<'self, A, B, T: Iterator<A>> Iterator<B> for Map<'self, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         match self.iter.next() {\n@@ -946,7 +946,7 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n }\n \n impl<'self, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n-for MapIterator<'self, A, B, T> {\n+for Map<'self, A, B, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n         match self.iter.next_back() {\n@@ -957,12 +957,12 @@ for MapIterator<'self, A, B, T> {\n }\n \n /// An iterator which filters the elements of `iter` with `predicate`\n-pub struct FilterIterator<'self, A, T> {\n+pub struct Filter<'self, A, T> {\n     priv iter: T,\n     priv predicate: &'self fn(&A) -> bool\n }\n \n-impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n+impl<'self, A, T: Iterator<A>> Iterator<A> for Filter<'self, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         for self.iter.advance |x| {\n@@ -982,7 +982,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n }\n \n-impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for FilterIterator<'self, A, T> {\n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'self, A, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         loop {\n@@ -1001,12 +1001,12 @@ impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for FilterItera\n }\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n-pub struct FilterMapIterator<'self, A, B, T> {\n+pub struct FilterMap<'self, A, B, T> {\n     priv iter: T,\n     priv f: &'self fn(A) -> Option<B>\n }\n \n-impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B, T> {\n+impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'self, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         for self.iter.advance |x| {\n@@ -1026,7 +1026,7 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n }\n \n impl<'self, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n-for FilterMapIterator<'self, A, B, T> {\n+for FilterMap<'self, A, B, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n         loop {\n@@ -1045,12 +1045,12 @@ for FilterMapIterator<'self, A, B, T> {\n \n /// An iterator which yields the current count and the element during iteration\n #[deriving(Clone)]\n-pub struct EnumerateIterator<T> {\n+pub struct Enumerate<T> {\n     priv iter: T,\n     priv count: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, A)> {\n         match self.iter.next() {\n@@ -1070,13 +1070,13 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<T> {\n }\n \n /// An iterator which rejects elements while `predicate` is true\n-pub struct SkipWhileIterator<'self, A, T> {\n+pub struct SkipWhile<'self, A, T> {\n     priv iter: T,\n     priv flag: bool,\n     priv predicate: &'self fn(&A) -> bool\n }\n \n-impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhileIterator<'self, A, T> {\n+impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhile<'self, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let mut next = self.iter.next();\n@@ -1108,13 +1108,13 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhileIterator<'self, A, T> {\n }\n \n /// An iterator which only accepts elements while `predicate` is true\n-pub struct TakeWhileIterator<'self, A, T> {\n+pub struct TakeWhile<'self, A, T> {\n     priv iter: T,\n     priv flag: bool,\n     priv predicate: &'self fn(&A) -> bool\n }\n \n-impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n+impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhile<'self, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.flag {\n@@ -1143,12 +1143,12 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n \n /// An iterator which skips over `n` elements of `iter`.\n #[deriving(Clone)]\n-pub struct SkipIterator<T> {\n+pub struct Skip<T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let mut next = self.iter.next();\n@@ -1191,12 +1191,12 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n #[deriving(Clone)]\n-pub struct TakeIterator<T> {\n+pub struct Take<T> {\n     priv iter: T,\n     priv n: uint\n }\n \n-impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n+impl<A, T: Iterator<A>> Iterator<A> for Take<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let next = self.iter.next();\n@@ -1224,15 +1224,15 @@ impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n }\n \n /// An iterator to maintain state while iterating another iterator\n-pub struct ScanIterator<'self, A, B, T, St> {\n+pub struct Scan<'self, A, B, T, St> {\n     priv iter: T,\n     priv f: &'self fn(&mut St, A) -> Option<B>,\n \n     /// The current internal state to be passed to the closure next.\n     state: St\n }\n \n-impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B, T, St> {\n+impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'self, A, B, T, St> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         self.iter.next().chain(|a| (self.f)(&mut self.state, a))\n@@ -1248,14 +1248,14 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B,\n /// An iterator that maps each element to an iterator,\n /// and yields the elements of the produced iterators\n ///\n-pub struct FlatMapIterator<'self, A, T, U> {\n+pub struct FlatMap<'self, A, T, U> {\n     priv iter: T,\n     priv f: &'self fn(A) -> U,\n     priv subiter: Option<U>,\n }\n \n impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n-    FlatMapIterator<'self, A, T, U> {\n+    FlatMap<'self, A, T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         loop {\n@@ -1274,12 +1274,12 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n \n /// An iterator that calls a function with a reference to each\n /// element before yielding it.\n-pub struct PeekIterator<'self, A, T> {\n+pub struct Peek<'self, A, T> {\n     priv iter: T,\n     priv f: &'self fn(&A)\n }\n \n-impl<'self, A, T: Iterator<A>> Iterator<A> for PeekIterator<'self, A, T> {\n+impl<'self, A, T: Iterator<A>> Iterator<A> for Peek<'self, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let next = self.iter.next();\n@@ -1298,7 +1298,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for PeekIterator<'self, A, T> {\n     }\n }\n \n-impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for PeekIterator<'self, A, T> {\n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Peek<'self, A, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         let next = self.iter.next_back();\n@@ -1313,26 +1313,26 @@ impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for PeekIterato\n }\n \n /// An iterator which just modifies the contained state throughout iteration.\n-pub struct UnfoldrIterator<'self, A, St> {\n+pub struct Unfoldr<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n     state: St\n }\n \n-impl<'self, A, St> UnfoldrIterator<'self, A, St> {\n+impl<'self, A, St> Unfoldr<'self, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n     #[inline]\n     pub fn new<'a>(initial_state: St, f: &'a fn(&mut St) -> Option<A>)\n-        -> UnfoldrIterator<'a, A, St> {\n-        UnfoldrIterator {\n+        -> Unfoldr<'a, A, St> {\n+        Unfoldr {\n             f: f,\n             state: initial_state\n         }\n     }\n }\n \n-impl<'self, A, St> Iterator<A> for UnfoldrIterator<'self, A, St> {\n+impl<'self, A, St> Iterator<A> for Unfoldr<'self, A, St> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         (self.f)(&mut self.state)\n@@ -1534,7 +1534,7 @@ mod tests {\n             }\n         }\n \n-        let mut it = UnfoldrIterator::new(0, count);\n+        let mut it = Unfoldr::new(0, count);\n         let mut i = 0;\n         for it.advance |counted| {\n             assert_eq!(counted, i);"}, {"sha": "2aa5f586dd8f1b22e4c65141eac7021b36ce57df", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -23,7 +23,7 @@ use char::Char;\n use clone::Clone;\n use container::{Container, Mutable};\n use iter::Times;\n-use iterator::{Iterator, FromIterator, IteratorUtil, FilterIterator, AdditiveIterator, MapIterator};\n+use iterator::{Iterator, FromIterator, IteratorUtil, Filter, AdditiveIterator, Map};\n use libc;\n use num::Zero;\n use option::{None, Option, Some};\n@@ -295,12 +295,11 @@ pub struct CharSplitIterator<'self,Sep> {\n \n /// An iterator over the words of a string, separated by an sequence of whitespace\n pub type WordIterator<'self> =\n-    FilterIterator<'self, &'self str,\n-             CharSplitIterator<'self, extern \"Rust\" fn(char) -> bool>>;\n+    Filter<'self, &'self str, CharSplitIterator<'self, extern \"Rust\" fn(char) -> bool>>;\n \n /// An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`).\n pub type AnyLineIterator<'self> =\n-    MapIterator<'self, &'self str, &'self str, CharSplitIterator<'self, char>>;\n+    Map<'self, &'self str, &'self str, CharSplitIterator<'self, char>>;\n \n impl<'self, Sep: CharEq> Iterator<&'self str> for CharSplitIterator<'self, Sep> {\n     #[inline]"}, {"sha": "fdfe357ae51066b6ec4103e948a159f679e0f8fa", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -2166,7 +2166,7 @@ pub struct VecIterator<'self, T> {\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n random_access_iterator!{impl VecIterator -> &'self T}\n-pub type RevIterator<'self, T> = InvertIterator<VecIterator<'self, T>>;\n+pub type RevIterator<'self, T> = Invert<VecIterator<'self, T>>;\n \n impl<'self, T> Clone for VecIterator<'self, T> {\n     fn clone(&self) -> VecIterator<'self, T> { *self }\n@@ -2182,7 +2182,7 @@ pub struct VecMutIterator<'self, T> {\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n random_access_iterator!{impl VecMutIterator -> &'self mut T}\n-pub type MutRevIterator<'self, T> = InvertIterator<VecMutIterator<'self, T>>;\n+pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n #[deriving(Clone)]"}, {"sha": "7a86116d3ecacae5eae7c0f16b3b86a43c91ac61", "filename": "src/test/run-pass/unfoldr-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb996bf92edc5c9a34275bae6143f1ada73e6c7f/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs?ref=bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "patch": "@@ -10,7 +10,7 @@\n \n use std::iterator::*;\n \n-// UnfoldrIterator had a bug with 'self that mean it didn't work\n+// Unfoldr had a bug with 'self that mean it didn't work\n // cross-crate\n \n fn main() {\n@@ -24,7 +24,7 @@ fn main() {\n         }\n     }\n \n-    let mut it = UnfoldrIterator::new(0, count);\n+    let mut it = Unfoldr::new(0, count);\n     let mut i = 0;\n     for it.advance |counted| {\n         assert_eq!(counted, i);"}]}