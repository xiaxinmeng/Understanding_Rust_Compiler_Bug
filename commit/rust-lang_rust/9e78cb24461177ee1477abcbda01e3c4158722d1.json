{"sha": "9e78cb24461177ee1477abcbda01e3c4158722d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzhjYjI0NDYxMTc3ZWUxNDc3YWJjYmRhMDFlM2M0MTU4NzIyZDE=", "commit": {"author": {"name": "Artyom Pavlov", "email": "newpavlov@gmail.com", "date": "2018-09-13T01:40:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-13T01:40:38Z"}, "message": "move checks to from_float_secs", "tree": {"sha": "b5e36a683b33df9a949848b8375632fba02e9f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e36a683b33df9a949848b8375632fba02e9f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e78cb24461177ee1477abcbda01e3c4158722d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmcAWCRBK7hj4Ov3rIwAAdHIIAER6EfZItT3/G5QymfO6Nw7L\no6HJThcZ86Nnn0e5Bqqjp2L0/O8OQeqYxSrnFkP8UUJky8Pa28K3oyXZTHvnnzlr\nD9wXrQnu04ihSuz/mc4q+xy/ysPHXyERjOaNETD/8EwHxdDt0Rkb5IActvJjXq7g\nahCwOaHjStzvPxESqx1Px24nNjxSSocX7gRNsroCSnLI7FQen+IdHZ/VkjDulp/K\nYSTJuI1+Ps/JqF5PDnnXAg1EKyIcg5CQ1X/6jjMySKRNy387xbDIdnNQBmNT6rvz\ncHUq4bplO9xwxsHkqJzgNTKmIRxM50NZrlwbCM6PDXljJ2wt1HoyVWyh+mU33Jg=\n=uwl7\n-----END PGP SIGNATURE-----\n", "payload": "tree b5e36a683b33df9a949848b8375632fba02e9f2b\nparent 8a0aa9f3ae2459f15270638add69bdc7619cd327\nauthor Artyom Pavlov <newpavlov@gmail.com> 1536802838 +0000\ncommitter GitHub <noreply@github.com> 1536802838 +0000\n\nmove checks to from_float_secs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e78cb24461177ee1477abcbda01e3c4158722d1", "html_url": "https://github.com/rust-lang/rust/commit/9e78cb24461177ee1477abcbda01e3c4158722d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e78cb24461177ee1477abcbda01e3c4158722d1/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0aa9f3ae2459f15270638add69bdc7619cd327", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0aa9f3ae2459f15270638add69bdc7619cd327", "html_url": "https://github.com/rust-lang/rust/commit/8a0aa9f3ae2459f15270638add69bdc7619cd327"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "f0e4b29700b4651b50e48eb29d3ff38c86e1c2a8", "filename": "src/libcore/time.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e78cb24461177ee1477abcbda01e3c4158722d1/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e78cb24461177ee1477abcbda01e3c4158722d1/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=9e78cb24461177ee1477abcbda01e3c4158722d1", "patch": "@@ -30,7 +30,7 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n const NANOS_PER_MICRO: u32 = 1_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n-const MAX_NANOS_F64: f64 = ((u64::MAX as u128)*(NANOS_PER_SEC as u128)) as f64;\n+const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128) - 1) as f64;\n \n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n@@ -491,7 +491,17 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn from_float_secs(secs: f64) -> Duration {\n-        let nanos =  (secs * (NANOS_PER_SEC as f64)) as u128;\n+        let nanos =  secs * (NANOS_PER_SEC as f64);\n+        if !nanos.is_finite() {\n+            panic!(\"got non-finite value when converting float to duration\");\n+        }\n+        if nanos > MAX_NANOS_F64 {\n+            panic!(\"overflow when converting float to duration\");\n+        }\n+        if nanos < 0.0 {\n+            panic!(\"underflow when converting float to duration\");\n+        }\n+        let nanos =  nanos as u128;\n         Duration {\n             secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n             nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n@@ -512,17 +522,7 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n-        let secs = rhs * self.as_float_secs();\n-        if !secs.is_finite() {\n-            panic!(\"got non-finite value when multiplying duration by float\");\n-        }\n-        if secs > MAX_NANOS_F64 {\n-            panic!(\"overflow when multiplying duration by float\");\n-        }\n-        if secs < 0.0 {\n-            panic!(\"underflow when multiplying duration by float\");\n-        }\n-        Duration::from_float_secs(secs)\n+        Duration::from_float_secs(rhs * self.as_float_secs())\n     }\n \n     /// Divide `Duration` by `f64`.\n@@ -540,17 +540,7 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n-        let secs = self.as_float_secs() / rhs;\n-        if !secs.is_finite() {\n-            panic!(\"got non-finite value when dividing duration by float\");\n-        }\n-        if secs > MAX_NANOS_F64 {\n-            panic!(\"overflow when dividing duration by float\");\n-        }\n-        if secs < 0.0 {\n-            panic!(\"underflow when multiplying duration by float\");\n-        }\n-        Duration::from_float_secs(secs)\n+        Duration::from_float_secs(self.as_float_secs() / rhs)\n     }\n \n     /// Divide `Duration` by `Duration` and return `f64`.\n@@ -567,7 +557,7 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn div_duration(self, rhs: Duration) -> f64 {\n-        self.as_float_secs()/rhs.as_float_secs()\n+        self.as_float_secs() / rhs.as_float_secs()\n     }\n }\n "}]}