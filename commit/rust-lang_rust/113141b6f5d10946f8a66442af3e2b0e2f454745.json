{"sha": "113141b6f5d10946f8a66442af3e2b0e2f454745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzE0MWI2ZjVkMTA5NDZmOGE2NjQ0MmFmM2UyYjBlMmY0NTQ3NDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-03T13:14:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-03T13:14:11Z"}, "message": "Only warn about unused `mut` in user-written code", "tree": {"sha": "41281eb66fe6dee40eb25c6182e32c9e05ba2c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41281eb66fe6dee40eb25c6182e32c9e05ba2c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113141b6f5d10946f8a66442af3e2b0e2f454745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113141b6f5d10946f8a66442af3e2b0e2f454745", "html_url": "https://github.com/rust-lang/rust/commit/113141b6f5d10946f8a66442af3e2b0e2f454745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113141b6f5d10946f8a66442af3e2b0e2f454745/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7416d565048efdc42efdb143eb7bb0b382f5273", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7416d565048efdc42efdb143eb7bb0b382f5273", "html_url": "https://github.com/rust-lang/rust/commit/e7416d565048efdc42efdb143eb7bb0b382f5273"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "821c55a9f4e770a16241e280a45f13551fdeefa5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=113141b6f5d10946f8a66442af3e2b0e2f454745", "patch": "@@ -4058,16 +4058,16 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let head = self.lower_expr(head);\n                 let head_sp = head.span;\n+                let desugared_span = self.allow_internal_unstable(\n+                    CompilerDesugaringKind::ForLoop,\n+                    head.span,\n+                );\n \n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n-                let next_sp = self.allow_internal_unstable(\n-                    CompilerDesugaringKind::ForLoop,\n-                    head_sp,\n-                );\n                 let next_pat = self.pat_ident_binding_mode(\n-                    next_sp,\n+                    desugared_span,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n                 );\n@@ -4096,8 +4096,11 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 // `mut iter`\n-                let iter_pat =\n-                    self.pat_ident_binding_mode(head_sp, iter, hir::BindingAnnotation::Mutable);\n+                let iter_pat = self.pat_ident_binding_mode(\n+                    desugared_span,\n+                    iter,\n+                    hir::BindingAnnotation::Mutable\n+                );\n \n                 // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n                 let match_expr = {\n@@ -4126,8 +4129,12 @@ impl<'a> LoweringContext<'a> {\n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n                 // `let mut __next`\n-                let next_let =\n-                    self.stmt_let_pat(head_sp, None, next_pat, hir::LocalSource::ForLoopDesugar);\n+                let next_let = self.stmt_let_pat(\n+                    desugared_span,\n+                    None,\n+                    next_pat,\n+                    hir::LocalSource::ForLoopDesugar,\n+                );\n \n                 // `let <pat> = __next`\n                 let pat = self.lower_pat(pat);"}, {"sha": "b1f89ce33fcfa58339a4ac31e5ec8f4160face2c", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=113141b6f5d10946f8a66442af3e2b0e2f454745", "patch": "@@ -76,10 +76,14 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n             }\n \n             let (hir_id, span) = ids[0];\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+            if span.compiler_desugaring_kind().is_some() {\n+                // If the `mut` arises as part of a desugaring, we should ignore it.\n+                continue;\n+            }\n \n             // Ok, every name wasn't used mutably, so issue a warning that this\n             // didn't need to be mutable.\n+            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n             tcx.struct_span_lint_hir(UNUSED_MUT,\n                                      hir_id,\n                                      span,"}, {"sha": "67170017a12b851641f5e844438280e3e7da03b0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=113141b6f5d10946f8a66442af3e2b0e2f454745", "patch": "@@ -316,14 +316,18 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             }\n \n             let span = local_decl.source_info.span;\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+            if span.compiler_desugaring_kind().is_some() {\n+                // If the `mut` arises as part of a desugaring, we should ignore it.\n+                continue;\n+            }\n \n             let mut err = tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n                 vsi[local_decl.source_info.scope].lint_root,\n                 span,\n                 \"variable does not need to be mutable\",\n             );\n+            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n             err.span_suggestion_short_with_applicability(\n                 mut_span,\n                 \"remove this `mut`\","}, {"sha": "288bc7f4814b086e5ab431562aadc2f1307c6448", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=113141b6f5d10946f8a66442af3e2b0e2f454745", "patch": "@@ -140,7 +140,8 @@ enum CallKind {\n fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n-        mutability, ty,\n+        mutability,\n+        ty,\n         user_ty: None,\n         name: None,\n         source_info,"}, {"sha": "419d580419f42270217c2f633ea4dbba70b9ee33", "filename": "src/test/ui/mut/no-mut-lint-for-desugared-mut.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113141b6f5d10946f8a66442af3e2b0e2f454745/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fno-mut-lint-for-desugared-mut.rs?ref=113141b6f5d10946f8a66442af3e2b0e2f454745", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+#![deny(unused_mut)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+    for _ in { return (); 0..3 } {} // ok\n+}"}]}