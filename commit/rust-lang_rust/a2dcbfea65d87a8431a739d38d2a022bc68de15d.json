{"sha": "a2dcbfea65d87a8431a739d38d2a022bc68de15d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZGNiZmVhNjVkODdhODQzMWE3MzlkMzhkMmEwMjJiYzY4ZGUxNWQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-17T14:45:50Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-17T14:45:56Z"}, "message": "const eval: implement ! for integers", "tree": {"sha": "ead7721aa19d60819a4e05f74f03a0690738fa2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead7721aa19d60819a4e05f74f03a0690738fa2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2dcbfea65d87a8431a739d38d2a022bc68de15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dcbfea65d87a8431a739d38d2a022bc68de15d", "html_url": "https://github.com/rust-lang/rust/commit/a2dcbfea65d87a8431a739d38d2a022bc68de15d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2dcbfea65d87a8431a739d38d2a022bc68de15d/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f17e8c4a86073b551799f343d68da18fbc5729", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f17e8c4a86073b551799f343d68da18fbc5729", "html_url": "https://github.com/rust-lang/rust/commit/26f17e8c4a86073b551799f343d68da18fbc5729"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "239f72e877420c5d73dcf16bc41c10352683c4b9", "filename": "src/consts.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcbfea65d87a8431a739d38d2a022bc68de15d/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcbfea65d87a8431a739d38d2a022bc68de15d/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=a2dcbfea65d87a8431a739d38d2a022bc68de15d", "patch": "@@ -105,7 +105,7 @@ impl PartialEq for ConstantVariant {\n         match (self, other) {\n             (&ConstantStr(ref ls, ref lsty), &ConstantStr(ref rs, ref rsty)) =>\n                 ls == rs && lsty == rsty,\n-            (&ConstantBinary(ref l),&ConstantBinary(ref r)) => l == r,\n+            (&ConstantBinary(ref l), &ConstantBinary(ref r)) => l == r,\n             (&ConstantByte(l), &ConstantByte(r)) => l == r,\n             (&ConstantChar(l), &ConstantChar(r)) => l == r,\n             (&ConstantInt(lv, lty), &ConstantInt(rv, rty)) => lv == rv &&\n@@ -184,13 +184,7 @@ pub fn constant(cx: &Context, e: &Expr) -> Option<Constant> {\n                 Some(ConstantRepeat(Box::new(v), n.as_u64() as usize))),\n         &ExprUnary(op, ref operand) => constant(cx, operand).and_then(\n             |o| match op {\n-                UnNot =>\n-                    if let ConstantBool(b) = o.constant {\n-                        Some(Constant{\n-                            needed_resolution: o.needed_resolution,\n-                            constant: ConstantBool(!b),\n-                        })\n-                    } else { None },\n+                UnNot => constant_not(o),\n                 UnNeg => constant_negate(o),\n                 UnUniq | UnDeref => Some(o),\n             }),\n@@ -227,7 +221,7 @@ fn constant_vec<E: Deref<Target=Expr> + Sized>(cx: &Context, vec: &[E]) -> Optio\n     for opt_part in vec {\n         match constant(cx, opt_part) {\n             Some(p) => {\n-                resolved |= (&p).needed_resolution;\n+                resolved |= p.needed_resolution;\n                 parts.push(p)\n             },\n             None => { return None; },\n@@ -245,7 +239,7 @@ fn constant_tup<E: Deref<Target=Expr> + Sized>(cx: &Context, tup: &[E]) -> Optio\n     for opt_part in tup {\n         match constant(cx, opt_part) {\n             Some(p) => {\n-                resolved |= (&p).needed_resolution;\n+                resolved |= p.needed_resolution;\n                 parts.push(p)\n             },\n             None => { return None; },\n@@ -289,6 +283,43 @@ fn constant_if(cx: &Context, cond: &Expr, then: &Block, otherwise:\n     } else { None }\n }\n \n+fn constant_not(o: Constant) -> Option<Constant> {\n+    Some(Constant {\n+        needed_resolution: o.needed_resolution,\n+        constant: match o.constant {\n+            ConstantBool(b) => ConstantBool(!b),\n+            ConstantInt(value, ty) => {\n+                let (nvalue, nty) = match ty {\n+                    SignedIntLit(ity, Plus) => {\n+                        if value == ::std::u64::MAX { return None; }\n+                        (value + 1, SignedIntLit(ity, Minus))\n+                    },\n+                    SignedIntLit(ity, Minus) => {\n+                        if value == 0 {\n+                            (1, SignedIntLit(ity, Minus))\n+                        } else {\n+                            (value - 1, SignedIntLit(ity, Plus))\n+                        }\n+                    }\n+                    UnsignedIntLit(ity) => {\n+                        let mask = match ity {\n+                            UintTy::TyU8 => ::std::u8::MAX as u64,\n+                            UintTy::TyU16 => ::std::u16::MAX as u64,\n+                            UintTy::TyU32 => ::std::u32::MAX as u64,\n+                            UintTy::TyU64 => ::std::u64::MAX,\n+                            UintTy::TyUs => { return None; }  // refuse to guess\n+                        };\n+                        (!value & mask, UnsignedIntLit(ity))\n+                    }\n+                    UnsuffixedIntLit(_) => { return None; }  // refuse to guess\n+                };\n+                ConstantInt(nvalue, nty)\n+            },\n+            _ => { return None; }\n+        }\n+    })\n+}\n+\n fn constant_negate(o: Constant) -> Option<Constant> {\n     Some(Constant{\n         needed_resolution: o.needed_resolution,"}]}