{"sha": "8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNmUyZmY0NTI0OGRkZTYzMWZmOTNmNmZjMjEwNDlkYmFmZDVjYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T05:26:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-12T05:26:10Z"}, "message": "Auto merge of #40584 - nrc:rls-submod, r=alexcrichton\n\nAdd the RLS as a submodule and build a package out of it\n\nr? @brson (and cc @alexcrichton) Please review closely, I am not at all convinced I've done the right things here. I did run `x.py dist` and it makes an rls package which looks right to my eyes, but I haven't tested on non-linux platforms nor am I really sure what it should look like.\n\nThis does not attempt to run tests for the RLS yet.", "tree": {"sha": "ed124cc3405275ab7c6cb3b88365efb2184943d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed124cc3405275ab7c6cb3b88365efb2184943d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "html_url": "https://github.com/rust-lang/rust/commit/8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da32752d92589e99feab80921b9eecb6090cf310", "url": "https://api.github.com/repos/rust-lang/rust/commits/da32752d92589e99feab80921b9eecb6090cf310", "html_url": "https://github.com/rust-lang/rust/commit/da32752d92589e99feab80921b9eecb6090cf310"}, {"sha": "13d008d1e8b671e78c92e61b42ae7b82f5736121", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d008d1e8b671e78c92e61b42ae7b82f5736121", "html_url": "https://github.com/rust-lang/rust/commit/13d008d1e8b671e78c92e61b42ae7b82f5736121"}], "stats": {"total": 157, "additions": 118, "deletions": 39}, "files": [{"sha": "4f29cef85700ee18bfa7387167718929abfe2910", "filename": ".gitmodules", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -26,3 +26,7 @@\n [submodule \"book\"]\n \tpath = src/doc/book\n \turl = https://github.com/rust-lang/book.git\n+[submodule \"rls\"]\n+\tpath = rls\n+\turl = https://github.com/rust-lang-nursery/rls.git\n+"}, {"sha": "35b376d5f27b8c498d3691e720c9d3dcde558f45", "filename": "configure", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -445,7 +445,6 @@ opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"check if the LLVM version is supported, build anyway\"\n opt codegen-tests 1 \"run the src/test/codegen tests\"\n-opt save-analysis 0 \"save API analysis data\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n opt locked-deps 0 \"force Cargo.lock to be up to date\""}, {"sha": "016cbc514cf44a2bd3fe806e8afa6b9c50287373", "filename": "rls", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rls?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -0,0 +1 @@\n+Subproject commit 016cbc514cf44a2bd3fe806e8afa6b9c50287373"}, {"sha": "693114d01ad9c56fc04409c7d02706e888695e88", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -74,7 +74,6 @@ pub struct Config {\n     pub rustc_default_ar: Option<String>,\n     pub rust_optimize_tests: bool,\n     pub rust_debuginfo_tests: bool,\n-    pub rust_save_analysis: bool,\n     pub rust_dist_src: bool,\n \n     pub build: String,\n@@ -226,7 +225,6 @@ struct Rust {\n     optimize_tests: Option<bool>,\n     debuginfo_tests: Option<bool>,\n     codegen_tests: Option<bool>,\n-    save_analysis: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -352,7 +350,6 @@ impl Config {\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n-            set(&mut config.rust_save_analysis, rust.save_analysis);\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.debug_jemalloc, rust.debug_jemalloc);\n             set(&mut config.use_jemalloc, rust.use_jemalloc);\n@@ -460,7 +457,6 @@ impl Config {\n                 (\"LOCAL_REBUILD\", self.local_rebuild),\n                 (\"NINJA\", self.ninja),\n                 (\"CODEGEN_TESTS\", self.codegen_tests),\n-                (\"SAVE_ANALYSIS\", self.rust_save_analysis),\n                 (\"LOCKED_DEPS\", self.locked_deps),\n                 (\"VENDOR\", self.vendor),\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),"}, {"sha": "fad79022043e33dbc800288edc60bd5174dc4f93", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -234,9 +234,6 @@\n # saying that the FileCheck executable is missing, you may want to disable this.\n #codegen-tests = true\n \n-# Flag indicating whether the API analysis data should be saved.\n-#save-analysis = false\n-\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "4328c4e3f1d4c58126c11d62b428557f8b2845be", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 66, "deletions": 8, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -39,6 +39,8 @@ use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n fn pkgname(build: &Build, component: &str) -> String {\n     if component == \"cargo\" {\n         format!(\"{}-{}\", component, build.cargo_package_vers())\n+    } else if component == \"rls\" {\n+        format!(\"{}-{}\", component, build.package_vers(&build.release_num(\"rls\")))\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, build.rust_package_vers())\n@@ -315,15 +317,12 @@ pub fn rust_src_location(build: &Build) -> PathBuf {\n \n /// Creates a tarball of save-analysis metadata, if available.\n pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n-    if !build.config.rust_save_analysis {\n-        return\n-    }\n-\n+    assert!(build.config.extended);\n     println!(\"Dist analysis\");\n \n     if compiler.host != build.config.build {\n         println!(\"\\tskipping, not a build host\");\n-        return\n+        return;\n     }\n \n     // Package save-analysis from stage1 if not doing a full bootstrap, as the\n@@ -393,6 +392,7 @@ pub fn rust_src(build: &Build) {\n         \"man\",\n         \"src\",\n         \"cargo\",\n+        \"rls\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -539,7 +539,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n \n     let src = build.src.join(\"cargo\");\n     let etc = src.join(\"src/etc\");\n-    let release_num = build.cargo_release_num();\n+    let release_num = build.release_num(\"cargo\");\n     let name = pkgname(build, \"cargo\");\n     let version = build.cargo_info.version(build, &release_num);\n \n@@ -593,6 +593,55 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     build.run(&mut cmd);\n }\n \n+pub fn rls(build: &Build, stage: u32, target: &str) {\n+    assert!(build.config.extended);\n+    println!(\"Dist RLS stage{} ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let src = build.src.join(\"rls\");\n+    let release_num = build.release_num(\"rls\");\n+    let name = pkgname(build, \"rls\");\n+    let version = build.rls_info.version(build, &release_num);\n+\n+    let tmp = tmpdir(build);\n+    let image = tmp.join(\"rls-image\");\n+    drop(fs::remove_dir_all(&image));\n+    t!(fs::create_dir_all(&image));\n+\n+    // Prepare the image directory\n+    let rls = build.cargo_out(&compiler, Mode::Tool, target)\n+                     .join(exe(\"rls\", target));\n+    install(&rls, &image.join(\"bin\"), 0o755);\n+    let doc = image.join(\"share/doc/rls\");\n+    install(&src.join(\"README.md\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+\n+    // Prepare the overlay\n+    let overlay = tmp.join(\"rls-overlay\");\n+    drop(fs::remove_dir_all(&overlay));\n+    t!(fs::create_dir_all(&overlay));\n+    install(&src.join(\"README.md\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+    // Generate the installer tarball\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=RLS-ready-to-serve.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(\"--component-name=rls\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+}\n+\n /// Creates a combined installer for the specified target in the provided stage.\n pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n@@ -604,6 +653,12 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     let cargo_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"cargo\"),\n                                             target));\n+    let rls_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                          pkgname(build, \"rls\"),\n+                                          target));\n+    let analysis_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                               pkgname(build, \"rust-analysis\"),\n+                                               target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n                                            target));\n@@ -631,9 +686,11 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{}\",\n+    let mut input_tarballs = format!(\"{},{},{},{},{},{}\",\n                                      sanitize_sh(&rustc_installer),\n                                      sanitize_sh(&cargo_installer),\n+                                     sanitize_sh(&rls_installer),\n+                                     sanitize_sh(&analysis_installer),\n                                      sanitize_sh(&docs_installer),\n                                      sanitize_sh(&std_installer));\n     if target.contains(\"pc-windows-gnu\") {\n@@ -946,7 +1003,8 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(distdir(build));\n     cmd.arg(today.trim());\n     cmd.arg(build.rust_package_vers());\n-    cmd.arg(build.package_vers(&build.cargo_release_num()));\n+    cmd.arg(build.package_vers(&build.release_num(\"cargo\")));\n+    cmd.arg(build.package_vers(&build.release_num(\"rls\")));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "d508616e4b1cc2e6caf285737c09137305f1e894", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -55,11 +55,6 @@ pub fn install(build: &Build, stage: u32, host: &str) {\n                    &docdir, &libdir, &mandir, &empty_dir);\n     }\n \n-    if build.config.rust_save_analysis {\n-        install_sh(&build, \"analysis\", \"rust-analysis\", stage, host, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n-    }\n-\n     install_sh(&build, \"rustc\", \"rustc\", stage, host, &prefix,\n                &docdir, &libdir, &mandir, &empty_dir);\n     t!(fs::remove_dir_all(&empty_dir));"}, {"sha": "d711b63ea2e26f348b9c4e679c32e88cc076cf15", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -151,6 +151,7 @@ pub struct Build {\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n+    rls_info: channel::GitInfo,\n     local_rebuild: bool,\n \n     // Probed tools at runtime\n@@ -234,6 +235,7 @@ impl Build {\n         };\n         let rust_info = channel::GitInfo::new(&src);\n         let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"rls\"));\n         let src_is_git = src.join(\".git\").exists();\n \n         Build {\n@@ -246,6 +248,7 @@ impl Build {\n \n             rust_info: rust_info,\n             cargo_info: cargo_info,\n+            rls_info: rls_info,\n             local_rebuild: local_rebuild,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n@@ -545,7 +548,7 @@ impl Build {\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n         }\n \n-        if self.config.rust_save_analysis && compiler.is_final_stage(self) {\n+        if self.config.extended && compiler.is_final_stage(self) {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n@@ -1017,7 +1020,7 @@ impl Build {\n \n     /// Returns the value of `package_vers` above for Cargo\n     fn cargo_package_vers(&self) -> String {\n-        self.package_vers(&self.cargo_release_num())\n+        self.package_vers(&self.release_num(\"cargo\"))\n     }\n \n     /// Returns the `version` string associated with this compiler for Rust\n@@ -1029,10 +1032,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n-    /// Returns the `a.b.c` version that Cargo is at.\n-    fn cargo_release_num(&self) -> String {\n+    /// Returns the `a.b.c` version that the given package is at.\n+    fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();\n-        t!(t!(File::open(self.src.join(\"cargo/Cargo.toml\"))).read_to_string(&mut toml));\n+        let toml_file_name = self.src.join(&format!(\"{}/Cargo.toml\", package));\n+        t!(t!(File::open(toml_file_name)).read_to_string(&mut toml));\n         for line in toml.lines() {\n             let prefix = \"version = \\\"\";\n             let suffix = \"\\\"\";\n@@ -1041,7 +1045,7 @@ impl Build {\n             }\n         }\n \n-        panic!(\"failed to find version in cargo's Cargo.toml\")\n+        panic!(\"failed to find version in {}'s Cargo.toml\", package)\n     }\n \n     /// Returns whether unstable features should be enabled for the compiler"}, {"sha": "596cbcf01bb8088e4f7a15772a6f23c3b3967e8d", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -570,6 +570,16 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n+    rules.build(\"tool-rls\", \"rls\")\n+         .host(true)\n+         .dep(|s| s.name(\"librustc\"))\n+         .dep(move |s| {\n+             // rls, like cargo, uses procedural macros\n+             s.name(\"librustc-link\")\n+              .target(&build.config.build)\n+              .host(&build.config.build)\n+         })\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n \n     // ========================================================================\n     // Documentation targets\n@@ -691,9 +701,13 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n          .dep(|s| s.name(\"dist-std\"))\n-         .default(true)\n          .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n+    rules.dist(\"dist-rls\", \"rls\")\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"tool-rls\"))\n+         .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n          .run(move |s| install::install(build, s.stage, s.target));\n@@ -711,6 +725,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|d| d.name(\"dist-mingw\"))\n          .dep(|d| d.name(\"dist-docs\"))\n          .dep(|d| d.name(\"dist-cargo\"))\n+         .dep(|d| d.name(\"dist-rls\"))\n+         .dep(|d| d.name(\"dist-analysis\"))\n          .run(move |s| dist::extended(build, s.stage, s.target));\n \n     rules.dist(\"dist-sign\", \"hash-and-sign\")"}, {"sha": "c6510120b47ae7ec3fb500d71df5db6ba5dc52ff", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -42,7 +42,6 @@ fi\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=nightly\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-save-analysis\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\""}, {"sha": "28c8d22707325f82eb80172e1dc297468511c96d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6e2ff45248dde631ff93f6fc21049dbafd5cba/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8c6e2ff45248dde631ff93f6fc21049dbafd5cba", "patch": "@@ -135,6 +135,7 @@ macro_rules! t {\n struct Builder {\n     rust_release: String,\n     cargo_release: String,\n+    rls_release: String,\n     input: PathBuf,\n     output: PathBuf,\n     gpg_passphrase: String,\n@@ -143,6 +144,7 @@ struct Builder {\n     date: String,\n     rust_version: String,\n     cargo_version: String,\n+    rls_version: String,\n }\n \n fn main() {\n@@ -152,13 +154,15 @@ fn main() {\n     let date = args.next().unwrap();\n     let rust_release = args.next().unwrap();\n     let cargo_release = args.next().unwrap();\n+    let rls_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n \n     Builder {\n         rust_release: rust_release,\n         cargo_release: cargo_release,\n+        rls_release: rls_release,\n         input: input,\n         output: output,\n         gpg_passphrase: passphrase,\n@@ -167,13 +171,15 @@ fn main() {\n         date: date,\n         rust_version: String::new(),\n         cargo_version: String::new(),\n+        rls_version: String::new(),\n     }.build();\n }\n \n impl Builder {\n     fn build(&mut self) {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n+        self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let Manifest { manifest_version, date, pkg } = self.build_manifest();\n@@ -223,10 +229,8 @@ impl Builder {\n         self.package(\"rust-std\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n-\n-        if self.rust_release == \"nightly\" {\n-            self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n-        }\n+        self.package(\"rls\", &mut manifest.pkg, HOSTS);\n+        self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n@@ -265,19 +269,21 @@ impl Builder {\n                 });\n             }\n \n+            extensions.push(Component {\n+                pkg: \"rls\".to_string(),\n+                target: host.to_string(),\n+            });\n+            extensions.push(Component {\n+                pkg: \"rust-analysis\".to_string(),\n+                target: host.to_string(),\n+            });\n             for target in TARGETS {\n                 if target != host {\n                     extensions.push(Component {\n                         pkg: \"rust-std\".to_string(),\n                         target: target.to_string(),\n                     });\n                 }\n-                if self.rust_release == \"nightly\" {\n-                    extensions.push(Component {\n-                        pkg: \"rust-analysis\".to_string(),\n-                        target: target.to_string(),\n-                    });\n-                }\n             }\n             extensions.push(Component {\n                 pkg: \"rust-src\".to_string(),\n@@ -343,6 +349,8 @@ impl Builder {\n             format!(\"rust-src-{}.tar.gz\", self.rust_release)\n         } else if component == \"cargo\" {\n             format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n+        } else if component == \"rls\" {\n+            format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n@@ -351,6 +359,8 @@ impl Builder {\n     fn cached_version(&self, component: &str) -> &str {\n         if component == \"cargo\" {\n             &self.cargo_version\n+        } else if component == \"rls\" {\n+            &self.rls_version\n         } else {\n             &self.rust_version\n         }"}]}