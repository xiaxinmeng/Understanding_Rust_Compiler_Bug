{"sha": "1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZjZiNzM2MGMzZjFkMGUyMGRlY2U1MjI3OTc5YmM0ZDc0YTM1MmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T18:47:34Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T18:47:34Z"}, "message": "Use chalk_ir::PlaceholderIndex", "tree": {"sha": "13a5ae932c1af88d50bbde849ea6d4c317d196f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a5ae932c1af88d50bbde849ea6d4c317d196f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "html_url": "https://github.com/rust-lang/rust/commit/1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d69eb131f58dee1bc188b8df8d5cf0ebf9d97f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d69eb131f58dee1bc188b8df8d5cf0ebf9d97f2", "html_url": "https://github.com/rust-lang/rust/commit/2d69eb131f58dee1bc188b8df8d5cf0ebf9d97f2"}], "stats": {"total": 97, "additions": 53, "deletions": 44}, "files": [{"sha": "571b89bc3a6d4828d15d65449ba10f0beb905b91", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -1384,7 +1384,7 @@ impl TypeParam {\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.parent.resolver(db.upcast());\n         let krate = self.id.parent.module(db.upcast()).krate();\n-        let ty = TyKind::Placeholder(self.id).intern(&Interner);\n+        let ty = TyKind::Placeholder(hir_ty::to_placeholder_idx(db, self.id)).intern(&Interner);\n         Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n "}, {"sha": "c198f690377482820fac0b511373409f2ea6b721", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -81,7 +81,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_callable_def(&self, callable_def: CallableDefId) -> InternedCallableDefId;\n     #[salsa::interned]\n-    fn intern_type_param_id(&self, param_id: TypeParamId) -> GlobalTypeParamId;\n+    fn intern_type_param_id(&self, param_id: TypeParamId) -> InternedTypeParamId;\n     #[salsa::interned]\n     fn intern_impl_trait_id(&self, id: OpaqueTyId) -> InternedOpaqueTyId;\n     #[salsa::interned]\n@@ -149,8 +149,8 @@ fn hir_database_is_object_safe() {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct GlobalTypeParamId(salsa::InternId);\n-impl_intern_key!(GlobalTypeParamId);\n+pub struct InternedTypeParamId(salsa::InternId);\n+impl_intern_key!(InternedTypeParamId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct InternedOpaqueTyId(salsa::InternId);"}, {"sha": "0a13c8636bbbaa52601b8697fc592cc8aea05844", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -11,10 +11,10 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, primitive, to_assoc_type_id,\n-    traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n-    GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar,\n-    Substs, TraitRef, Ty, TyKind,\n+    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n+    to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId,\n+    CallableSig, GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId,\n+    ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -541,16 +541,17 @@ impl HirDisplay for Ty {\n                     write!(f, \"{{closure}}\")?;\n                 }\n             }\n-            TyKind::Placeholder(id) => {\n+            TyKind::Placeholder(idx) => {\n+                let id = from_placeholder_idx(f.db, *idx);\n                 let generics = generics(f.db.upcast(), id.parent);\n                 let param_data = &generics.params.types[id.local_id];\n                 match param_data.provenance {\n                     TypeParamProvenance::TypeParamList | TypeParamProvenance::TraitSelf => {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        let bounds = f.db.generic_predicates_for_param(*id);\n-                        let substs = Substs::type_params_for_generics(&generics);\n+                        let bounds = f.db.generic_predicates_for_param(id);\n+                        let substs = Substs::type_params_for_generics(f.db, &generics);\n                         write_bounds_like_dyn_trait_with_prefix(\n                             \"impl\",\n                             &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),"}, {"sha": "4f746342280363a089fe7ee91a04357df282cd94", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -454,7 +454,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             TypeNs::SelfType(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substs::type_params_for_generics(&generics);\n+                let substs = Substs::type_params_for_generics(self.db, &generics);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 match unresolved {\n                     None => {"}, {"sha": "c6681834c16d8f221dd6995e78ac18cfed6b84e6", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -79,7 +79,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             ValueNs::ImplSelf(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substs::type_params_for_generics(&generics);\n+                let substs = Substs::type_params_for_generics(self.db, &generics);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 if let Some((AdtId::StructId(struct_id), substs)) = ty.as_adt() {\n                     let ty = self.db.value_ty(struct_id.into()).subst(&substs);"}, {"sha": "d1c01828331506f5e7f294d057346e42f13e9637", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -54,6 +54,7 @@ pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type FnDefId = chalk_ir::FnDefId<Interner>;\n pub type ClosureId = chalk_ir::ClosureId<Interner>;\n+pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n@@ -220,7 +221,7 @@ pub enum TyKind {\n     /// {}` when we're type-checking the body of that function. In this\n     /// situation, we know this stands for *some* type, but don't know the exact\n     /// type.\n-    Placeholder(TypeParamId),\n+    Placeholder(PlaceholderIndex),\n \n     /// A bound type variable. This is used in various places: when representing\n     /// some polymorphic type like the type of function `fn f<T>`, the type\n@@ -310,19 +311,22 @@ impl Substs {\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n-    pub(crate) fn type_params_for_generics(generic_params: &Generics) -> Substs {\n+    pub(crate) fn type_params_for_generics(\n+        db: &dyn HirDatabase,\n+        generic_params: &Generics,\n+    ) -> Substs {\n         Substs(\n             generic_params\n                 .iter()\n-                .map(|(id, _)| TyKind::Placeholder(id).intern(&Interner))\n+                .map(|(id, _)| TyKind::Placeholder(to_placeholder_idx(db, id)).intern(&Interner))\n                 .collect(),\n         )\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub fn type_params(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> Substs {\n         let params = generics(db.upcast(), def.into());\n-        Substs::type_params_for_generics(&params)\n+        Substs::type_params_for_generics(db, &params)\n     }\n \n     /// Return Substs that replace each parameter by a bound variable.\n@@ -909,13 +913,14 @@ impl Ty {\n \n                 predicates.map(|it| it.value)\n             }\n-            TyKind::Placeholder(id) => {\n+            TyKind::Placeholder(idx) => {\n+                let id = from_placeholder_idx(db, *idx);\n                 let generic_params = db.generic_params(id.parent);\n                 let param_data = &generic_params.types[id.local_id];\n                 match param_data.provenance {\n                     hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n                         let predicates = db\n-                            .generic_predicates_for_param(*id)\n+                            .generic_predicates_for_param(id)\n                             .into_iter()\n                             .map(|pred| pred.value.clone())\n                             .collect_vec();\n@@ -1148,3 +1153,17 @@ pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n     salsa::InternKey::from_intern_id(id.0)\n }\n+\n+pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_type_param_id(interned_id)\n+}\n+\n+pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n+    let interned_id = db.intern_type_param_id(id);\n+    PlaceholderIndex {\n+        ui: chalk_ir::UniverseIndex::ROOT,\n+        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n+    }\n+}"}, {"sha": "78a914cacee34565795e041650770af1dddda914", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -27,7 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id,\n+    to_assoc_type_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -249,7 +249,9 @@ impl Ty {\n                                     data.provenance == TypeParamProvenance::ArgumentImplTrait\n                                 })\n                                 .nth(idx as usize)\n-                                .map_or(TyKind::Unknown, |(id, _)| TyKind::Placeholder(id));\n+                                .map_or(TyKind::Unknown, |(id, _)| {\n+                                    TyKind::Placeholder(to_placeholder_idx(ctx.db, id))\n+                                });\n                             param.intern(&Interner)\n                         } else {\n                             TyKind::Unknown.intern(&Interner)\n@@ -384,7 +386,9 @@ impl Ty {\n                     ctx.resolver.generic_def().expect(\"generics in scope\"),\n                 );\n                 match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => TyKind::Placeholder(param_id),\n+                    TypeParamLoweringMode::Placeholder => {\n+                        TyKind::Placeholder(to_placeholder_idx(ctx.db, param_id))\n+                    }\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                         TyKind::BoundVar(BoundVar::new(ctx.in_binders, idx))\n@@ -396,7 +400,7 @@ impl Ty {\n                 let generics = generics(ctx.db.upcast(), impl_id.into());\n                 let substs = match ctx.type_param_mode {\n                     TypeParamLoweringMode::Placeholder => {\n-                        Substs::type_params_for_generics(&generics)\n+                        Substs::type_params_for_generics(ctx.db, &generics)\n                     }\n                     TypeParamLoweringMode::Variable => {\n                         Substs::bound_vars(&generics, ctx.in_binders)\n@@ -408,7 +412,7 @@ impl Ty {\n                 let generics = generics(ctx.db.upcast(), adt.into());\n                 let substs = match ctx.type_param_mode {\n                     TypeParamLoweringMode::Placeholder => {\n-                        Substs::type_params_for_generics(&generics)\n+                        Substs::type_params_for_generics(ctx.db, &generics)\n                     }\n                     TypeParamLoweringMode::Variable => {\n                         Substs::bound_vars(&generics, ctx.in_binders)\n@@ -689,8 +693,9 @@ impl GenericPredicate {\n                         let generics = generics(ctx.db.upcast(), generic_def);\n                         let param_id =\n                             hir_def::TypeParamId { parent: generic_def, local_id: *param_id };\n+                        let placeholder = to_placeholder_idx(ctx.db, param_id);\n                         match ctx.type_param_mode {\n-                            TypeParamLoweringMode::Placeholder => TyKind::Placeholder(param_id),\n+                            TypeParamLoweringMode::Placeholder => TyKind::Placeholder(placeholder),\n                             TypeParamLoweringMode::Variable => {\n                                 let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, idx))"}, {"sha": "46095575652a0d39e129505bdcf839fdbc9bbcb8", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf6b7360c3f1d0e20dece5227979bc4d74a352f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "patch": "@@ -3,10 +3,7 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{\n-    cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData, PlaceholderIndex,\n-    UniverseIndex,\n-};\n+use chalk_ir::{cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n@@ -91,14 +88,7 @@ impl ToChalk for Ty {\n                 .cast(&Interner)\n                 .intern(&Interner)\n             }\n-            TyKind::Placeholder(id) => {\n-                let interned_id = db.intern_type_param_id(id);\n-                PlaceholderIndex {\n-                    ui: UniverseIndex::ROOT,\n-                    idx: interned_id.as_intern_id().as_usize(),\n-                }\n-                .to_ty::<Interner>(&Interner)\n-            }\n+            TyKind::Placeholder(idx) => idx.to_ty::<Interner>(&Interner),\n             TyKind::BoundVar(idx) => chalk_ir::TyKind::BoundVar(idx).intern(&Interner),\n             TyKind::InferenceVar(..) => panic!(\"uncanonicalized infer ty\"),\n             TyKind::Dyn(predicates) => {\n@@ -128,13 +118,7 @@ impl ToChalk for Ty {\n         match chalk.data(&Interner).kind.clone() {\n             chalk_ir::TyKind::Error => TyKind::Unknown,\n             chalk_ir::TyKind::Array(ty, _size) => TyKind::Array(Substs::single(from_chalk(db, ty))),\n-            chalk_ir::TyKind::Placeholder(idx) => {\n-                assert_eq!(idx.ui, UniverseIndex::ROOT);\n-                let interned_id = crate::db::GlobalTypeParamId::from_intern_id(\n-                    crate::salsa::InternId::from(idx.idx),\n-                );\n-                TyKind::Placeholder(db.lookup_intern_type_param_id(interned_id))\n-            }\n+            chalk_ir::TyKind::Placeholder(idx) => TyKind::Placeholder(idx),\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);"}]}