{"sha": "645ef505da378b6f810b1567806d1bcc2856395f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NWVmNTA1ZGEzNzhiNmY4MTBiMTU2NzgwNmQxYmNjMjg1NjM5NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T21:53:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T21:53:23Z"}, "message": "Auto merge of #6257 - giraffate:sync-from-rust, r=ebroto\n\nRustup\n\nchangelog: none", "tree": {"sha": "c6e946348b0d2638cb3cddc78830645fef187933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e946348b0d2638cb3cddc78830645fef187933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645ef505da378b6f810b1567806d1bcc2856395f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645ef505da378b6f810b1567806d1bcc2856395f", "html_url": "https://github.com/rust-lang/rust/commit/645ef505da378b6f810b1567806d1bcc2856395f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645ef505da378b6f810b1567806d1bcc2856395f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de83f09be8694b241bf3d924c0d1e70ca71c38da", "url": "https://api.github.com/repos/rust-lang/rust/commits/de83f09be8694b241bf3d924c0d1e70ca71c38da", "html_url": "https://github.com/rust-lang/rust/commit/de83f09be8694b241bf3d924c0d1e70ca71c38da"}, {"sha": "e83e79f1c21f7bf08b639c9f3cb04b38b7fecf81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e83e79f1c21f7bf08b639c9f3cb04b38b7fecf81", "html_url": "https://github.com/rust-lang/rust/commit/e83e79f1c21f7bf08b639c9f3cb04b38b7fecf81"}], "stats": {"total": 165, "additions": 24, "deletions": 141}, "files": [{"sha": "e9054c459eddd7dee9067379f863577ab6b61f64", "filename": ".github/driver.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -22,9 +22,9 @@ unset CARGO_MANIFEST_DIR\n \n # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n # FIXME: How to match the clippy invocation in compile-test.rs?\n-./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1\n-sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cstring.stderr > normalized.stderr\n-diff normalized.stderr tests/ui/cstring.stderr\n+./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/double_neg.rs 2> double_neg.stderr && exit 1\n+sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" double_neg.stderr > normalized.stderr\n+diff normalized.stderr tests/ui/double_neg.stderr\n \n \n # make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same"}, {"sha": "461c6e31d3eb40b2ad099246f598caf7f69714b9", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -172,3 +172,12 @@ declare_deprecated_lint! {\n     pub DROP_BOUNDS,\n     \"this lint has been uplifted to rustc and is now called `drop_bounds`\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `temporary_cstring_as_ptr`.\n+    pub TEMPORARY_CSTRING_AS_PTR,\n+    \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\"\n+}"}, {"sha": "2d37496984609b213df72b51794fcb1ca0be4cba", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -488,6 +488,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::drop_bounds\",\n         \"this lint has been uplifted to rustc and is now called `drop_bounds`\",\n     );\n+    store.register_removed(\n+        \"clippy::temporary_cstring_as_ptr\",\n+        \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -712,7 +716,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n-        &methods::TEMPORARY_CSTRING_AS_PTR,\n         &methods::UNINIT_ASSUMED_INIT,\n         &methods::UNNECESSARY_FILTER_MAP,\n         &methods::UNNECESSARY_FOLD,\n@@ -1436,7 +1439,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n-        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n@@ -1793,7 +1795,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),"}, {"sha": "d250bfd71e93661424ab1a598ac9c5cdf99c849e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -798,40 +798,6 @@ declare_clippy_lint! {\n     \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the inner pointer of a temporary\n-    /// `CString`.\n-    ///\n-    /// **Why is this bad?** The inner pointer of a `CString` is only valid as long\n-    /// as the `CString` is alive.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # use std::ffi::CString;\n-    /// # fn call_some_ffi_func(_: *const i8) {}\n-    /// #\n-    /// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n-    /// unsafe {\n-    ///     call_some_ffi_func(c_str);\n-    /// }\n-    /// ```\n-    /// Here `c_str` points to a freed address. The correct use would be:\n-    /// ```rust\n-    /// # use std::ffi::CString;\n-    /// # fn call_some_ffi_func(_: *const i8) {}\n-    /// #\n-    /// let c_str = CString::new(\"foo\").unwrap();\n-    /// unsafe {\n-    ///     call_some_ffi_func(c_str.as_ptr());\n-    /// }\n-    /// ```\n-    pub TEMPORARY_CSTRING_AS_PTR,\n-    correctness,\n-    \"getting the inner pointer of a temporary `CString`\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for calling `.step_by(0)` on iterators which panics.\n     ///\n@@ -1406,7 +1372,6 @@ declare_lint_pass!(Methods => [\n     SINGLE_CHAR_PATTERN,\n     SINGLE_CHAR_PUSH_STR,\n     SEARCH_IS_SOME,\n-    TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n@@ -1490,7 +1455,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"as_ptr\", \"unwrap\" | \"expect\"] => lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n@@ -2207,26 +2171,6 @@ fn lint_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>\n     }\n }\n \n-fn lint_cstring_as_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, source: &hir::Expr<'_>, unwrap: &hir::Expr<'_>) {\n-    if_chain! {\n-        let source_type = cx.typeck_results().expr_ty(source);\n-        if let ty::Adt(def, substs) = source_type.kind();\n-        if cx.tcx.is_diagnostic_item(sym!(result_type), def.did);\n-        if match_type(cx, substs.type_at(0), &paths::CSTRING);\n-        then {\n-            span_lint_and_then(\n-                cx,\n-                TEMPORARY_CSTRING_AS_PTR,\n-                expr.span,\n-                \"you are getting the inner pointer of a temporary `CString`\",\n-                |diag| {\n-                    diag.note(\"that pointer will be invalid outside this expression\");\n-                    diag.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n-                });\n-        }\n-    }\n-}\n-\n fn lint_iter_cloned_collect<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, iter_args: &'tcx [hir::Expr<'_>]) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym!(vec_type));"}, {"sha": "cd72fdd61fd3ab0c285c9f385c85385ccf80aaee", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -21,7 +21,6 @@ pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n-pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];"}, {"sha": "c2e63ecb581ecde0afb8282304d06283dc1f0f35", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -2293,13 +2293,6 @@ vec![\n         deprecation: None,\n         module: \"temporary_assignment\",\n     },\n-    Lint {\n-        name: \"temporary_cstring_as_ptr\",\n-        group: \"correctness\",\n-        desc: \"getting the inner pointer of a temporary `CString`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"to_digit_is_some\",\n         group: \"style\","}, {"sha": "6cdd6b4ff6e77671afb525e01d9f5398ad536a0e", "filename": "tests/ui/cstring.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de83f09be8694b241bf3d924c0d1e70ca71c38da/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de83f09be8694b241bf3d924c0d1e70ca71c38da/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=de83f09be8694b241bf3d924c0d1e70ca71c38da", "patch": "@@ -1,24 +0,0 @@\n-#![deny(clippy::temporary_cstring_as_ptr)]\n-\n-fn main() {}\n-\n-fn temporary_cstring() {\n-    use std::ffi::CString;\n-\n-    CString::new(\"foo\").unwrap().as_ptr();\n-    CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-}\n-\n-mod issue4375 {\n-    use std::ffi::CString;\n-    use std::os::raw::c_char;\n-\n-    extern \"C\" {\n-        fn foo(data: *const c_char);\n-    }\n-\n-    pub fn bar(v: &[u8]) {\n-        let cstr = CString::new(v);\n-        unsafe { foo(cstr.unwrap().as_ptr()) }\n-    }\n-}"}, {"sha": "87cb29be57758a3f9679a2d95cebd4fe2caf321a", "filename": "tests/ui/cstring.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/de83f09be8694b241bf3d924c0d1e70ca71c38da/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de83f09be8694b241bf3d924c0d1e70ca71c38da/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=de83f09be8694b241bf3d924c0d1e70ca71c38da", "patch": "@@ -1,46 +0,0 @@\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:8:5\n-   |\n-LL |     CString::new(\"foo\").unwrap().as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/cstring.rs:1:9\n-   |\n-LL | #![deny(clippy::temporary_cstring_as_ptr)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:8:5\n-   |\n-LL |     CString::new(\"foo\").unwrap().as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:9:5\n-   |\n-LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:9:5\n-   |\n-LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:22:22\n-   |\n-LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:22:22\n-   |\n-LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n-   |                      ^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "56755596c97fc646faee8d75531021c79660b22d", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -9,5 +9,6 @@\n #[warn(clippy::unused_label)]\n #[warn(clippy::regex_macro)]\n #[warn(clippy::drop_bounds)]\n+#[warn(clippy::temporary_cstring_as_ptr)]\n \n fn main() {}"}, {"sha": "37b726fc00f1c414e76421db7b6bb12f8918262d", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/645ef505da378b6f810b1567806d1bcc2856395f/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/645ef505da378b6f810b1567806d1bcc2856395f/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=645ef505da378b6f810b1567806d1bcc2856395f", "patch": "@@ -66,11 +66,17 @@ error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted\n LL | #[warn(clippy::drop_bounds)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr``\n+  --> $DIR/deprecated.rs:12:8\n+   |\n+LL | #[warn(clippy::temporary_cstring_as_ptr)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}