{"sha": "6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2I1ZDc3MmYxNmFmMGQxZjYyZGFkNTVmYmRlNzUwNzJmYjllODk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-17T07:20:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T07:20:28Z"}, "message": "Merge #8048\n\n8048: Fix missing unresolved macro diagnostic in function body r=edwin0cheng a=brandondong\n\nThis was an issue I found while working on https://github.com/rust-analyzer/rust-analyzer/pull/7970.\r\n\r\n**Reproduction:**\r\n1. Call a non-existent macro in a function body.\r\n```\r\nfn main() {\r\n  foo!();\r\n}\r\n```\r\n2. No diagnostics are raised. An unresolved-macro-call diagnostic is expected.\r\n3. If the macro call is instead outside of the function body, this works as expected.\r\n\r\nI believe this worked previously and regressed in https://github.com/rust-analyzer/rust-analyzer/pull/7805.\r\n\r\n**Behavior prior to https://github.com/rust-analyzer/rust-analyzer/pull/7805:**\r\n- The unresolved-macro-call diagnostic did not exist. Instead, a macro-error diagnostic would be raised with the text \"could not resolve macro [path]\".\r\n- This was implemented by adding an error to the error sink (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8L657).\r\n- The error was propagated through https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body.rs#L123 eventually reaching https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body/lower.rs#L569.\r\n\r\n**Behavior after:**\r\n- Instead of writing to the error sink, an UnresolvedMacro error is now returned (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8R631).\r\n- The parent caller throws away the error as its function signature is `Option<MacroCallId>` (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8R604).\r\n- We instead now reach the warn condition (https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body.rs#L124) and no diagnostics are created in https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body/lower.rs#L575.\r\n\r\n**Fix:**\r\n- Make sure to propagate the UnresolvedMacro error. Report the error using the new unresolved-macro-call diagnostic.\r\n\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>", "tree": {"sha": "e4ddd896f9ca8ca1f99c346a49104b04bc4ca04c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ddd896f9ca8ca1f99c346a49104b04bc4ca04c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUa28CRBK7hj4Ov3rIwAAdHIIAFXU6MzRl3hkVLwr6T9MO0iC\niTm7ZcSBfHKVN1eWFBv/JnNwTi2leFlM+Nt+5iix+3z3sKQI+UZCxTrRbGOoGMHo\nld6Xx+fF/dU9Cjoi5CoYh0ptciSMGLC7K0q2ycc1WYTXlASkvI53xHFFn50+tRWe\nncXP6Gwvp0S4Q6jaOLIgakhPTkH0BKnSWexWszgf/NBdRLYMfSESkMAisOZ6VD2y\nTRdvytGFu1xGMaOYNtoKUWb/CLsxXLhJ+PJMgMAJvvWW3Z93j8Pwk/CFWcCmnM6m\nsYeEJumk9pPxCeHFa1spPZ0xIJPIFYtWMNtrft9t1JrpKXpGGFruxA7MF5U23dk=\n=kyFE\n-----END PGP SIGNATURE-----\n", "payload": "tree e4ddd896f9ca8ca1f99c346a49104b04bc4ca04c\nparent 83e6940efb42675226adb8d2856c095b8dce36c5\nparent a79b5673e8f5d1f8d569bc7c984a293a972a7bb0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615965628 +0000\ncommitter GitHub <noreply@github.com> 1615965628 +0000\n\nMerge #8048\n\n8048: Fix missing unresolved macro diagnostic in function body r=edwin0cheng a=brandondong\n\nThis was an issue I found while working on https://github.com/rust-analyzer/rust-analyzer/pull/7970.\r\n\r\n**Reproduction:**\r\n1. Call a non-existent macro in a function body.\r\n```\r\nfn main() {\r\n  foo!();\r\n}\r\n```\r\n2. No diagnostics are raised. An unresolved-macro-call diagnostic is expected.\r\n3. If the macro call is instead outside of the function body, this works as expected.\r\n\r\nI believe this worked previously and regressed in https://github.com/rust-analyzer/rust-analyzer/pull/7805.\r\n\r\n**Behavior prior to https://github.com/rust-analyzer/rust-analyzer/pull/7805:**\r\n- The unresolved-macro-call diagnostic did not exist. Instead, a macro-error diagnostic would be raised with the text \"could not resolve macro [path]\".\r\n- This was implemented by adding an error to the error sink (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8L657).\r\n- The error was propagated through https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body.rs#L123 eventually reaching https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body/lower.rs#L569.\r\n\r\n**Behavior after:**\r\n- Instead of writing to the error sink, an UnresolvedMacro error is now returned (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8R631).\r\n- The parent caller throws away the error as its function signature is `Option<MacroCallId>` (https://github.com/rust-analyzer/rust-analyzer/pull/7805/files#diff-50a326c5ae465bd9b31ee4310186380aa06e4fa1f6b41dbc0aed5bcc656a3cb8R604).\r\n- We instead now reach the warn condition (https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body.rs#L124) and no diagnostics are created in https://github.com/rust-analyzer/rust-analyzer/blob/1a82af3527e476d52410ff4dfd2fb4c57466abcb/crates/hir_def/src/body/lower.rs#L575.\r\n\r\n**Fix:**\r\n- Make sure to propagate the UnresolvedMacro error. Report the error using the new unresolved-macro-call diagnostic.\r\n\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "html_url": "https://github.com/rust-lang/rust/commit/6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e6940efb42675226adb8d2856c095b8dce36c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e6940efb42675226adb8d2856c095b8dce36c5", "html_url": "https://github.com/rust-lang/rust/commit/83e6940efb42675226adb8d2856c095b8dce36c5"}, {"sha": "a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0"}], "stats": {"total": 127, "additions": 80, "deletions": 47}, "files": [{"sha": "1080d9c2c37eec862c0ef5844fbba5498bc3425c", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -32,6 +32,7 @@ use crate::{\n     path::{ModPath, Path},\n     src::HasSource,\n     AsMacroCall, BlockId, DefWithBodyId, HasModule, LocalModuleId, Lookup, ModuleId,\n+    UnresolvedMacro,\n };\n \n /// A subset of Expander that only deals with cfg attributes. We only need it to\n@@ -101,10 +102,12 @@ impl Expander {\n         &mut self,\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n-    ) -> ExpandResult<Option<(Mark, T)>> {\n+    ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n         if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n             cov_mark::hit!(your_stack_belongs_to_me);\n-            return ExpandResult::str_err(\"reached recursion limit during macro expansion\".into());\n+            return Ok(ExpandResult::str_err(\n+                \"reached recursion limit during macro expansion\".into(),\n+            ));\n         }\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n@@ -116,14 +119,11 @@ impl Expander {\n         let call_id =\n             macro_call.as_call_id_with_errors(db, self.def_map.krate(), resolver, &mut |e| {\n                 err.get_or_insert(e);\n-            });\n+            })?;\n         let call_id = match call_id {\n-            Some(it) => it,\n-            None => {\n-                if err.is_none() {\n-                    log::warn!(\"no error despite `as_call_id_with_errors` returning `None`\");\n-                }\n-                return ExpandResult { value: None, err };\n+            Ok(it) => it,\n+            Err(_) => {\n+                return Ok(ExpandResult { value: None, err });\n             }\n         };\n \n@@ -141,17 +141,17 @@ impl Expander {\n                     log::warn!(\"no error despite `parse_or_expand` failing\");\n                 }\n \n-                return ExpandResult::only_err(err.unwrap_or_else(|| {\n+                return Ok(ExpandResult::only_err(err.unwrap_or_else(|| {\n                     mbe::ExpandError::Other(\"failed to parse macro invocation\".into())\n-                }));\n+                })));\n             }\n         };\n \n         let node = match T::cast(raw_node) {\n             Some(it) => it,\n             None => {\n                 // This can happen without being an error, so only forward previous errors.\n-                return ExpandResult { value: None, err };\n+                return Ok(ExpandResult { value: None, err });\n             }\n         };\n \n@@ -167,7 +167,7 @@ impl Expander {\n         self.current_file_id = file_id;\n         self.ast_id_map = db.ast_id_map(file_id);\n \n-        ExpandResult { value: Some((mark, node)), err }\n+        Ok(ExpandResult { value: Some((mark, node)), err })\n     }\n \n     pub(crate) fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {"}, {"sha": "f6992c9a8a946c9a03e3c551aa4de492020f8b8d", "filename": "crates/hir_def/src/body/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -2,13 +2,14 @@\n \n use hir_expand::diagnostics::DiagnosticSink;\n \n-use crate::diagnostics::{InactiveCode, MacroError, UnresolvedProcMacro};\n+use crate::diagnostics::{InactiveCode, MacroError, UnresolvedMacroCall, UnresolvedProcMacro};\n \n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum BodyDiagnostic {\n     InactiveCode(InactiveCode),\n     MacroError(MacroError),\n     UnresolvedProcMacro(UnresolvedProcMacro),\n+    UnresolvedMacroCall(UnresolvedMacroCall),\n }\n \n impl BodyDiagnostic {\n@@ -23,6 +24,9 @@ impl BodyDiagnostic {\n             BodyDiagnostic::UnresolvedProcMacro(diag) => {\n                 sink.push(diag.clone());\n             }\n+            BodyDiagnostic::UnresolvedMacroCall(diag) => {\n+                sink.push(diag.clone());\n+            }\n         }\n     }\n }"}, {"sha": "60b25db5632cb9b895ab442fdb641bbc5e64139f", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     body::{Body, BodySourceMap, Expander, LabelSource, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n-    diagnostics::{InactiveCode, MacroError, UnresolvedProcMacro},\n+    diagnostics::{InactiveCode, MacroError, UnresolvedMacroCall, UnresolvedProcMacro},\n     expr::{\n         dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Label,\n         LabelId, Literal, LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField,\n@@ -33,7 +33,7 @@ use crate::{\n     item_scope::BuiltinShadowMode,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n-    AdtId, BlockLoc, ModuleDefId,\n+    AdtId, BlockLoc, ModuleDefId, UnresolvedMacro,\n };\n \n use super::{diagnostics::BodyDiagnostic, ExprSource, PatSource};\n@@ -554,6 +554,17 @@ impl ExprCollector<'_> {\n         let macro_call = self.expander.to_source(AstPtr::new(&e));\n         let res = self.expander.enter_expand(self.db, e);\n \n+        let res = match res {\n+            Ok(res) => res,\n+            Err(UnresolvedMacro) => {\n+                self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedMacroCall(\n+                    UnresolvedMacroCall { file: outer_file, node: syntax_ptr.cast().unwrap() },\n+                ));\n+                collector(self, None);\n+                return;\n+            }\n+        };\n+\n         match &res.err {\n             Some(ExpandError::UnresolvedProcMacro) => {\n                 self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro("}, {"sha": "f8e6f70e87b24894817cb6df84e849c6ceb7d7d6", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -174,6 +174,18 @@ fn f() {\n     );\n }\n \n+#[test]\n+fn unresolved_macro_diag() {\n+    check_diagnostics(\n+        r#\"\n+fn f() {\n+    m!();\n+  //^^^^ unresolved macro call\n+}\n+      \"#,\n+    );\n+}\n+\n #[test]\n fn dollar_crate_in_builtin_macro() {\n     check_diagnostics("}, {"sha": "1a27f7bf21b2c0abb6371368dc1ab8a091c84105", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -267,23 +267,26 @@ fn collect_items(\n                 let ast_id_map = db.ast_id_map(file_id);\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n-\n-                if let Some((mark, mac)) = expander.enter_expand(db, call).value {\n-                    let src: InFile<ast::MacroItems> = expander.to_source(mac);\n-                    let item_tree = db.item_tree(src.file_id);\n-                    let iter =\n-                        item_tree.top_level_items().iter().filter_map(ModItem::as_assoc_item);\n-                    items.extend(collect_items(\n-                        db,\n-                        module,\n-                        expander,\n-                        iter,\n-                        src.file_id,\n-                        container,\n-                        limit - 1,\n-                    ));\n-\n-                    expander.exit(db, mark);\n+                let res = expander.enter_expand(db, call);\n+\n+                if let Ok(res) = res {\n+                    if let Some((mark, mac)) = res.value {\n+                        let src: InFile<ast::MacroItems> = expander.to_source(mac);\n+                        let item_tree = db.item_tree(src.file_id);\n+                        let iter =\n+                            item_tree.top_level_items().iter().filter_map(ModItem::as_assoc_item);\n+                        items.extend(collect_items(\n+                            db,\n+                            module,\n+                            expander,\n+                            iter,\n+                            src.file_id,\n+                            container,\n+                            limit - 1,\n+                        ));\n+\n+                        expander.exit(db, mark);\n+                    }\n                 }\n             }\n         }"}, {"sha": "97abf865345ffe4b601919dcb8561784dc5f77c8", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -99,7 +99,7 @@ impl Diagnostic for UnresolvedImport {\n //\n // This diagnostic is triggered if rust-analyzer is unable to resolve the path to a\n // macro in a macro invocation.\n-#[derive(Debug)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct UnresolvedMacroCall {\n     pub file: HirFileId,\n     pub node: AstPtr<ast::MacroCall>,"}, {"sha": "6758411a0c1ab22184e6a60ef761e6abd6ec7519", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -58,7 +58,7 @@ use std::{\n use base_db::{impl_intern_key, salsa, CrateId};\n use hir_expand::{\n     ast_id_map::FileAstId,\n-    eager::{expand_eager_macro, ErrorEmitted},\n+    eager::{expand_eager_macro, ErrorEmitted, ErrorSink},\n     hygiene::Hygiene,\n     AstId, HirFileId, InFile, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n@@ -583,7 +583,7 @@ pub trait AsMacroCall {\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n-        self.as_call_id_with_errors(db, krate, resolver, &mut |_| ())\n+        self.as_call_id_with_errors(db, krate, resolver, &mut |_| ()).ok()?.ok()\n     }\n \n     fn as_call_id_with_errors(\n@@ -592,7 +592,7 @@ pub trait AsMacroCall {\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n         error_sink: &mut dyn FnMut(mbe::ExpandError),\n-    ) -> Option<MacroCallId>;\n+    ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro>;\n }\n \n impl AsMacroCall for InFile<&ast::MacroCall> {\n@@ -601,25 +601,28 @@ impl AsMacroCall for InFile<&ast::MacroCall> {\n         db: &dyn db::DefDatabase,\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n-        error_sink: &mut dyn FnMut(mbe::ExpandError),\n-    ) -> Option<MacroCallId> {\n+        mut error_sink: &mut dyn FnMut(mbe::ExpandError),\n+    ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro> {\n         let ast_id = AstId::new(self.file_id, db.ast_id_map(self.file_id).ast_id(self.value));\n         let h = Hygiene::new(db.upcast(), self.file_id);\n         let path = self.value.path().and_then(|path| path::ModPath::from_src(path, &h));\n \n-        if path.is_none() {\n-            error_sink(mbe::ExpandError::Other(\"malformed macro invocation\".into()));\n-        }\n+        let path = match error_sink\n+            .option(path, || mbe::ExpandError::Other(\"malformed macro invocation\".into()))\n+        {\n+            Ok(path) => path,\n+            Err(error) => {\n+                return Ok(Err(error));\n+            }\n+        };\n \n         macro_call_as_call_id(\n-            &AstIdWithPath::new(ast_id.file_id, ast_id.value, path?),\n+            &AstIdWithPath::new(ast_id.file_id, ast_id.value, path),\n             db,\n             krate,\n             resolver,\n             error_sink,\n         )\n-        .ok()?\n-        .ok()\n     }\n }\n \n@@ -636,7 +639,7 @@ impl<T: ast::AstNode> AstIdWithPath<T> {\n     }\n }\n \n-struct UnresolvedMacro;\n+pub struct UnresolvedMacro;\n \n fn macro_call_as_call_id(\n     call: &AstIdWithPath<ast::MacroCall>,"}, {"sha": "dc618a9ee1f5354ede4c1f75aaec77a33290b43a", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcb5d772f16af0d1f62dad55fbde75072fb9e89/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=6fcb5d772f16af0d1f62dad55fbde75072fb9e89", "patch": "@@ -35,7 +35,7 @@ pub struct ErrorEmitted {\n     _private: (),\n }\n \n-trait ErrorSink {\n+pub trait ErrorSink {\n     fn emit(&mut self, err: mbe::ExpandError);\n \n     fn option<T>("}]}