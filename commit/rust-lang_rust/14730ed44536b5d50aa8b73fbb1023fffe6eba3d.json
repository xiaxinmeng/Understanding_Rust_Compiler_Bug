{"sha": "14730ed44536b5d50aa8b73fbb1023fffe6eba3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzMwZWQ0NDUzNmI1ZDUwYWE4YjczZmJiMTAyM2ZmZmU2ZWJhM2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-06T00:33:26Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-10T00:47:05Z"}, "message": "Make `bound_context` more like neighboring functions", "tree": {"sha": "af23dcff3453e49c581425165727f72a83ad8327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af23dcff3453e49c581425165727f72a83ad8327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14730ed44536b5d50aa8b73fbb1023fffe6eba3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14730ed44536b5d50aa8b73fbb1023fffe6eba3d", "html_url": "https://github.com/rust-lang/rust/commit/14730ed44536b5d50aa8b73fbb1023fffe6eba3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14730ed44536b5d50aa8b73fbb1023fffe6eba3d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9950a1f3bdfec11db6bbe2019b819b4410e26905", "url": "https://api.github.com/repos/rust-lang/rust/commits/9950a1f3bdfec11db6bbe2019b819b4410e26905", "html_url": "https://github.com/rust-lang/rust/commit/9950a1f3bdfec11db6bbe2019b819b4410e26905"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "724d717304c203a8772771a821e4ec2aa8fae413", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14730ed44536b5d50aa8b73fbb1023fffe6eba3d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14730ed44536b5d50aa8b73fbb1023fffe6eba3d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=14730ed44536b5d50aa8b73fbb1023fffe6eba3d", "patch": "@@ -24,6 +24,7 @@ use syntax::walk_list;\n \n use rustc_error_codes::*;\n \n+/// A syntactic context that disallows certain kinds of bounds (e.g., `?Trait` or `?const Trait`).\n #[derive(Clone, Copy)]\n enum BoundContext {\n     ImplTrait,\n@@ -50,10 +51,11 @@ struct AstValidator<'a> {\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n     outer_impl_trait: Option<Span>,\n \n-    /// Tracks the context in which a bound can appear.\n+    /// Keeps track of the `BoundContext` as we recurse.\n     ///\n-    /// This is used to forbid `?const Trait` bounds in certain contexts.\n-    bound_context_stack: Vec<Option<BoundContext>>,\n+    /// This is used to forbid `?const Trait` bounds in, e.g.,\n+    /// `impl Iterator<Item = Box<dyn ?const Trait>`.\n+    bound_context: Option<BoundContext>,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -80,21 +82,19 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n-        self.bound_context_stack.push(outer.map(|_| BoundContext::ImplTrait));\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n-        f(self);\n+        if outer.is_some() {\n+            self.with_bound_context(BoundContext::ImplTrait, |this| f(this));\n+        } else {\n+            f(self)\n+        }\n         self.outer_impl_trait = old;\n-        self.bound_context_stack.pop();\n     }\n \n-    fn with_bound_context(&mut self, ctx: Option<BoundContext>, f: impl FnOnce(&mut Self)) {\n-        self.bound_context_stack.push(ctx);\n+    fn with_bound_context(&mut self, ctx: BoundContext, f: impl FnOnce(&mut Self)) {\n+        let old = self.bound_context.replace(ctx);\n         f(self);\n-        self.bound_context_stack.pop();\n-    }\n-\n-    fn innermost_bound_context(&mut self) -> Option<BoundContext> {\n-        self.bound_context_stack.iter().rev().find(|x| x.is_some()).copied().flatten()\n+        self.bound_context = old;\n     }\n \n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n@@ -119,9 +119,7 @@ impl<'a> AstValidator<'a> {\n                 self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n             TyKind::TraitObject(..) => {\n-                self.with_bound_context(Some(BoundContext::TraitObject), |this| {\n-                    visit::walk_ty(this, t)\n-                });\n+                self.with_bound_context(BoundContext::TraitObject, |this| visit::walk_ty(this, t));\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n@@ -231,8 +229,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    // FIXME(ecstaticmorse): Instead, use the `bound_context_stack` to check this in\n-    // `visit_param_bound`.\n+    // FIXME(ecstaticmorse): Instead, use `bound_context` to check this in `visit_param_bound`.\n     fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n             if let GenericBound::Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n@@ -744,7 +741,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n-                self.with_bound_context(Some(BoundContext::TraitBounds), |this| {\n+                self.with_bound_context(BoundContext::TraitBounds, |this| {\n                     walk_list!(this, visit_param_bound, bounds);\n                 });\n                 walk_list!(self, visit_trait_item, trait_items);\n@@ -903,7 +900,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .span_err(bound.span(), \"`?const` and `?` are mutually exclusive\");\n                     }\n \n-                    if let Some(ctx) = self.innermost_bound_context() {\n+                    if let Some(ctx) = self.bound_context {\n                         let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n                         self.err_handler().span_err(bound.span(), &msg);\n                     }\n@@ -1025,7 +1022,7 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffe\n         session,\n         has_proc_macro_decls: false,\n         outer_impl_trait: None,\n-        bound_context_stack: Vec::new(),\n+        bound_context: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n         lint_buffer: lints,"}]}