{"sha": "5399616f1d98b4bcc1da87af15f75c95e3c2288b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTk2MTZmMWQ5OGI0YmNjMWRhODdhZjE1Zjc1Yzk1ZTNjMjI4OGI=", "commit": {"author": {"name": "Otto Rask", "email": "ojrask@gmail.com", "date": "2018-08-29T10:20:56Z"}, "committer": {"name": "Otto Rask", "email": "ojrask@gmail.com", "date": "2018-08-29T10:20:56Z"}, "message": "Make Arc cloning mechanics clearer in module docs\n\nAdd some more wording to module documentation regarding how\n`Arc::clone()` works, as some users have assumed cloning Arc's\nto work via dereferencing to inner value as follows:\n\n    use std::sync::Arc;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(1 == myarcref);\n\nInstead of the actual mechanic of referencing the existing\nArc value:\n\n    use std::sync::Arg;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(myarcref == &myarc); // not sure if assert could assert this\n    in the real world", "tree": {"sha": "c86c2e4583f614d5080cc05cd4ae4384a7d2c6d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c86c2e4583f614d5080cc05cd4ae4384a7d2c6d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5399616f1d98b4bcc1da87af15f75c95e3c2288b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5399616f1d98b4bcc1da87af15f75c95e3c2288b", "html_url": "https://github.com/rust-lang/rust/commit/5399616f1d98b4bcc1da87af15f75c95e3c2288b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5399616f1d98b4bcc1da87af15f75c95e3c2288b/comments", "author": {"login": "rask", "id": 98275, "node_id": "MDQ6VXNlcjk4Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/98275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rask", "html_url": "https://github.com/rask", "followers_url": "https://api.github.com/users/rask/followers", "following_url": "https://api.github.com/users/rask/following{/other_user}", "gists_url": "https://api.github.com/users/rask/gists{/gist_id}", "starred_url": "https://api.github.com/users/rask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rask/subscriptions", "organizations_url": "https://api.github.com/users/rask/orgs", "repos_url": "https://api.github.com/users/rask/repos", "events_url": "https://api.github.com/users/rask/events{/privacy}", "received_events_url": "https://api.github.com/users/rask/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rask", "id": 98275, "node_id": "MDQ6VXNlcjk4Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/98275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rask", "html_url": "https://github.com/rask", "followers_url": "https://api.github.com/users/rask/followers", "following_url": "https://api.github.com/users/rask/following{/other_user}", "gists_url": "https://api.github.com/users/rask/gists{/gist_id}", "starred_url": "https://api.github.com/users/rask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rask/subscriptions", "organizations_url": "https://api.github.com/users/rask/orgs", "repos_url": "https://api.github.com/users/rask/repos", "events_url": "https://api.github.com/users/rask/events{/privacy}", "received_events_url": "https://api.github.com/users/rask/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e981cfe474f598b34ca07df8c8f16f042e120f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e981cfe474f598b34ca07df8c8f16f042e120f", "html_url": "https://github.com/rust-lang/rust/commit/f4e981cfe474f598b34ca07df8c8f16f042e120f"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "176743fdd1d388284b06776f27d0f46476acbcb8", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5399616f1d98b4bcc1da87af15f75c95e3c2288b/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5399616f1d98b4bcc1da87af15f75c95e3c2288b/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=5399616f1d98b4bcc1da87af15f75c95e3c2288b", "patch": "@@ -49,9 +49,9 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// The type `Arc<T>` provides shared ownership of a value of type `T`,\n /// allocated in the heap. Invoking [`clone`][clone] on `Arc` produces\n-/// a new pointer to the same value in the heap. When the last `Arc`\n-/// pointer to a given value is destroyed, the pointed-to value is\n-/// also destroyed.\n+/// a new pointer to the same `Arc` reference value in the heap. When the last\n+/// `Arc` pointer to a given value is destroyed, the pointed-to value is also\n+/// destroyed.\n ///\n /// Shared references in Rust disallow mutation by default, and `Arc` is no\n /// exception: you cannot generally obtain a mutable reference to something\n@@ -107,7 +107,8 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// // The two syntaxes below are equivalent.\n /// let a = foo.clone();\n /// let b = Arc::clone(&foo);\n-/// // a and b both point to the same memory location as foo.\n+/// // a and b both point to the same memory location where foo resides\n+/// // (not where the value wrapped by foo resides).\n /// ```\n ///\n /// The [`Arc::clone(&from)`] syntax is the most idiomatic because it conveys more explicitly"}]}