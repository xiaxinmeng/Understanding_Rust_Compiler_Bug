{"sha": "999ee0190fbcabf13253d6f95bb7ab73709c9240", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OWVlMDE5MGZiY2FiZjEzMjUzZDZmOTViYjdhYjczNzA5YzkyNDA=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-17T12:28:33Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-17T12:28:33Z"}, "message": "code review fixes", "tree": {"sha": "8a24c9358d8c86c39f2dddb4e88a8c17f3342fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a24c9358d8c86c39f2dddb4e88a8c17f3342fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999ee0190fbcabf13253d6f95bb7ab73709c9240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999ee0190fbcabf13253d6f95bb7ab73709c9240", "html_url": "https://github.com/rust-lang/rust/commit/999ee0190fbcabf13253d6f95bb7ab73709c9240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999ee0190fbcabf13253d6f95bb7ab73709c9240/comments", "author": null, "committer": null, "parents": [{"sha": "d0c0815f013dc3cbd166dbd66557ed8cabd5611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c0815f013dc3cbd166dbd66557ed8cabd5611c", "html_url": "https://github.com/rust-lang/rust/commit/d0c0815f013dc3cbd166dbd66557ed8cabd5611c"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "bd17080e8c2a183256202a0b5d717cdbfafe2a87", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/999ee0190fbcabf13253d6f95bb7ab73709c9240/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999ee0190fbcabf13253d6f95bb7ab73709c9240/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=999ee0190fbcabf13253d6f95bb7ab73709c9240", "patch": "@@ -68,6 +68,26 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     }\n }\n \n+/// Adjust the span from the block, to the last expression of the\n+/// block. This is a better span when returning a mutable reference\n+/// with too short a lifetime. The error message will use the span\n+/// from the assignment to the return place, which should only point\n+/// at the returned value, not the entire function body.\n+///\n+/// fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n+///      x\n+///   // ^ error message points at this expression.\n+/// }\n+fn adjust_span<'tcx>(expr: &mut Expr<'tcx>) -> Span {\n+    if let ExprKind::Block { body } = expr.kind {\n+        if let Some(ref last_expr) = body.expr {\n+            expr.span = last_expr.span;\n+        }\n+    }\n+\n+    expr.span\n+}\n+\n fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     hir_expr: &'tcx hir::Expr,\n                                     mut expr: Expr<'tcx>,\n@@ -76,12 +96,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let Expr { temp_lifetime, mut span, .. } = expr;\n     let kind = match adjustment.kind {\n         Adjust::Pointer(PointerCast::Unsize) => {\n-            if let ExprKind::Block { body } = expr.kind {\n-                if let Some(ref last_expr) = body.expr {\n-                    span = last_expr.span;\n-                    expr.span = span;\n-                }\n-            }\n+            span = adjust_span(&mut expr);\n             ExprKind::Pointer { cast: PointerCast::Unsize, source: expr.to_ref() }\n         }\n         Adjust::Pointer(cast) => {\n@@ -91,28 +106,12 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ExprKind::NeverToAny { source: expr.to_ref() }\n         }\n         Adjust::Deref(None) => {\n-            // Adjust the span from the block, to the last expression of the\n-            // block. This is a better span when returning a mutable reference\n-            // with too short a lifetime. The error message will use the span\n-            // from the assignment to the return place, which should only point\n-            // at the returned value, not the entire function body.\n-            //\n-            // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n-            //      x\n-            //   // ^ error message points at this expression.\n-            // }\n-            //\n-            // We don't need to do this adjustment in the next match arm since\n-            // deref coercions always start with a built-in deref.\n-            if let ExprKind::Block { body } = expr.kind {\n-                if let Some(ref last_expr) = body.expr {\n-                    span = last_expr.span;\n-                    expr.span = span;\n-                }\n-            }\n+            span = adjust_span(&mut expr);\n             ExprKind::Deref { arg: expr.to_ref() }\n         }\n         Adjust::Deref(Some(deref)) => {\n+            // We don't need to do call adjust_span here since\n+            // deref coercions always start with a built-in deref.\n             let call = deref.method_call(cx.tcx(), expr.ty);\n \n             expr = Expr {"}]}