{"sha": "8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlY2JlNDlhOGZhOGI0YmIxN2MyZDc5OGQ1ZGU2ZmMwMzAzYzViYzY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T01:44:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T01:44:39Z"}, "message": "Add -minimal mode to rustboot that skips emitting code that's broken or unneeded for rustc. Shrink rustc by 300kb. Back under 1mb.", "tree": {"sha": "11c52a82f424b8782e7dd13e7965e580dbf01c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c52a82f424b8782e7dd13e7965e580dbf01c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "html_url": "https://github.com/rust-lang/rust/commit/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e59d691039731b8ae05aadf8358c499dfa5b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e59d691039731b8ae05aadf8358c499dfa5b89", "html_url": "https://github.com/rust-lang/rust/commit/d1e59d691039731b8ae05aadf8358c499dfa5b89"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "758488a27d9db1b86e13c3904d5a489e6385688d", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -368,7 +368,8 @@ endif\n \n $(CFG_COMPILER): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n \t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ $<\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) \\\n+      -minimal -o $@ $<\n \t$(CFG_QUIET)chmod 0755 $@\n \n self: $(CFG_COMPILER)"}, {"sha": "a7b98c2cd6a3c57b3b081503df5a28f7e85c7220", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -126,7 +126,8 @@ type abi =\n                                -> Common.nabi\n                                  -> Common.fixup (* grow_task *)\n                                    -> bool       (* is_obj_fn *)\n-                                     -> unit);\n+                                     -> bool     (* minimal *)\n+                                       -> unit);\n \n     abi_emit_fn_epilogue: (Il.emitter -> unit);\n "}, {"sha": "dd21c3291952a11f5603130b87071aa064cfdd80", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -1236,6 +1236,7 @@ let fn_prologue\n     (nabi:nabi)\n     (grow_task_fixup:fixup)\n     (is_obj_fn:bool)\n+    (minimal:bool)\n     : unit =\n \n   let esi_n = word_n (h esi) in\n@@ -1372,8 +1373,11 @@ let fn_prologue\n       in\n \n         (* \"Full\" frame size-check. *)\n-        stack_growth_check e nabi grow_task_fixup\n-          dynamic_frame_sz dynamic_grow_jmp restart_pc (h esi) (h edi);\n+        match dynamic_grow_jmp with\n+            None when minimal -> ()\n+          | _ ->\n+              stack_growth_check e nabi grow_task_fixup\n+                dynamic_frame_sz dynamic_grow_jmp restart_pc (h esi) (h edi);\n \n \n         (* Establish a frame, wherever we landed. *)"}, {"sha": "eacecc2d4f22de8bebc85fe21606222102efdbed", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -24,6 +24,7 @@ let (sess:Session.sess) =\n     Session.sess_out = None;\n     Session.sess_library_mode = false;\n     Session.sess_alt_backend = false;\n+    Session.sess_minimal = false;\n     Session.sess_use_pexps = false;\n     (* FIXME (issue #69): need something fancier here for unix\n      * sub-flavours.\n@@ -229,6 +230,10 @@ let argspecs =\n     (flag (fun _ -> sess.Session.sess_use_pexps <- true)\n        \"-pexp\"         \"use pexp portion of AST\");\n \n+    (flag (fun _ -> sess.Session.sess_minimal <- true)\n+       \"-minimal\"     (\"reduce code size by disabling various features\"\n+                       ^ \" (use at own risk)\"));\n+\n     (\"-zc\", Arg.Int (fun i -> sess.Session.sess_fuzz_item_count <- i),\n      \"count of items to generate when fuzzing\");\n "}, {"sha": "8d7c331965c12c7e903b977e81e5c4d607013b68", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -13,6 +13,7 @@ type sess =\n   mutable sess_out: filename option;\n   mutable sess_library_mode: bool;\n   mutable sess_alt_backend: bool;\n+  mutable sess_minimal: bool;\n   mutable sess_use_pexps: bool;\n   mutable sess_targ: target;\n   mutable sess_log_lex: bool;"}, {"sha": "83c675797bd1e839e06adc8a6e31f548bf383e95", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "patch": "@@ -1488,6 +1488,7 @@ let trans_visitor\n     let frame_fns =\n       match fnid with\n           None -> zero\n+        | Some _ when cx.ctxt_sess.Session.sess_minimal -> zero\n         | Some fnid -> get_frame_glue_fns fnid\n     in\n     let crate_ptr_reg = next_vreg () in\n@@ -1499,14 +1500,19 @@ let trans_visitor\n       mov (word_at (fp_imm frame_fns_disp)) frame_fns\n \n   and check_interrupt_flag _ =\n-    let dom = next_vreg_cell wordptr_ty in\n-    let flag = next_vreg_cell word_sty in\n-      mov dom (Il.Cell (tp_imm (word_n Abi.task_field_dom)));\n-      mov flag (Il.Cell (deref_imm dom\n-                           (word_n Abi.dom_field_interrupt_flag)));\n-      let null_jmp = null_check flag in\n-        trans_yield ();\n-        patch null_jmp\n+    if cx.ctxt_sess.Session.sess_minimal\n+    then ()\n+    else\n+      begin\n+        let dom = next_vreg_cell wordptr_ty in\n+        let flag = next_vreg_cell word_sty in\n+          mov dom (Il.Cell (tp_imm (word_n Abi.task_field_dom)));\n+          mov flag (Il.Cell (deref_imm dom\n+                               (word_n Abi.dom_field_interrupt_flag)));\n+          let null_jmp = null_check flag in\n+            trans_yield ();\n+            patch null_jmp\n+      end\n \n   and trans_glue_frame_entry\n       (callsz:size)\n@@ -1534,7 +1540,8 @@ let trans_visitor\n       push_new_emitter_with_vregs None;\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") false;\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\")\n+        false cx.ctxt_sess.Session.sess_minimal;\n       write_frame_info_ptrs None;\n       (* FIXME: not clear why, but checking interrupt in glue context\n        * causes many.rs to crash when run on a sufficiently large number\n@@ -4766,7 +4773,8 @@ let trans_visitor\n       push_new_emitter_with_vregs (Some id);\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") false;\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\")\n+        false cx.ctxt_sess.Session.sess_minimal;\n       write_frame_info_ptrs None;\n       iflog (fun _ -> annotate \"finished prologue\");\n       trans_block fe.Ast.for_each_body;\n@@ -5371,7 +5379,8 @@ let trans_visitor\n                                   (string_of_size callsz)));\n       abi.Abi.abi_emit_fn_prologue\n         (emitter()) framesz callsz nabi_rust\n-        (upcall_fixup \"upcall_grow_task\") obj_fn;\n+        (upcall_fixup \"upcall_grow_task\") obj_fn\n+        cx.ctxt_sess.Session.sess_minimal;\n \n       write_frame_info_ptrs (Some fnid);\n       if yield_check\n@@ -5765,7 +5774,8 @@ let trans_visitor\n       push_new_emitter_with_vregs (Some b.id);\n       iflog (fun _ -> annotate \"prologue\");\n       abi.Abi.abi_emit_fn_prologue (emitter())\n-        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\") true;\n+        framesz callsz nabi_rust (upcall_fixup \"upcall_grow_task\")\n+        true cx.ctxt_sess.Session.sess_minimal;\n       write_frame_info_ptrs None;\n       iflog (fun _ -> annotate \"finished prologue\");\n       trans_block b;"}]}