{"sha": "94b93d3c1c91a78bc50fee44415fc2e9e1be3acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjkzZDNjMWM5MWE3OGJjNTBmZWU0NDQxNWZjMmU5ZTFiZTNhY2Q=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-02T04:47:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T09:53:54Z"}, "message": "Allow all boolean options to take values.\n\nThey now all accept yes/no/y/n/on/off values. (Previously only some of\nthem did.)\n\nThis commit also makes `parse_bool` and `parse_opt_bool` more concise\nand readable, and adds some helpful comments to some functions.", "tree": {"sha": "042d8996218282c4d1a54252132f5849ae127619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042d8996218282c4d1a54252132f5849ae127619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd", "html_url": "https://github.com/rust-lang/rust/commit/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2109464cc5b0553c1016dd7acee0951c99796fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2109464cc5b0553c1016dd7acee0951c99796fae", "html_url": "https://github.com/rust-lang/rust/commit/2109464cc5b0553c1016dd7acee0951c99796fae"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "525dc7fe0d5a71c0a2696af8a60dbc732426d370", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b93d3c1c91a78bc50fee44415fc2e9e1be3acd/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=94b93d3c1c91a78bc50fee44415fc2e9e1be3acd", "patch": "@@ -236,9 +236,8 @@ macro_rules! options {\n \n     #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n-        pub const parse_bool: Option<&str> = None;\n-        pub const parse_opt_bool: Option<&str> =\n-            Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n+        pub const parse_bool: Option<&str> = Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n+        pub const parse_opt_bool: Option<&str> = parse_bool;\n         pub const parse_string: Option<&str> = Some(\"a string\");\n         pub const parse_string_push: Option<&str> = Some(\"a string\");\n         pub const parse_pathbuf_push: Option<&str> = Some(\"a path\");\n@@ -310,52 +309,45 @@ macro_rules! options {\n             }\n         )*\n \n-        /// Set a flag to true. Note that it cannot set the flag to false, so\n-        /// using this parser in combination with a flag that defaults to true\n-        /// is useless; the flag will always be true.\n+        /// Use this for any boolean option that has a static default.\n         fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n             match v {\n-                Some(..) => false,\n-                None => { *slot = true; true }\n+                Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => { *slot = true; true }\n+                Some(\"n\") | Some(\"no\") | Some(\"off\") => { *slot = false; true }\n+                _ => false,\n             }\n         }\n \n+        /// Use this for any boolean option that lacks a static default. (The\n+        /// actions taken when such an option is not specified will depend on\n+        /// other factors, such as other options, or target options.)\n         fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => {\n-                    match s {\n-                        \"n\" | \"no\" | \"off\" => {\n-                            *slot = Some(false);\n-                        }\n-                        \"y\" | \"yes\" | \"on\" => {\n-                            *slot = Some(true);\n-                        }\n-                        _ => { return false; }\n-                    }\n-\n-                    true\n-                },\n-                None => { *slot = Some(true); true }\n+                Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => { *slot = Some(true); true }\n+                Some(\"n\") | Some(\"no\") | Some(\"off\") => { *slot = Some(false); true }\n+                _ => false,\n             }\n         }\n \n-        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool {\n+        /// Use this for any string option that has a static default.\n+        fn parse_string(slot: &mut String, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = Some(s.to_string()); true },\n+                Some(s) => { *slot = s.to_string(); true },\n                 None => false,\n             }\n         }\n \n-        fn parse_opt_pathbuf(slot: &mut Option<PathBuf>, v: Option<&str>) -> bool {\n+        /// Use this for any string option that lacks a static default.\n+        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = Some(PathBuf::from(s)); true },\n+                Some(s) => { *slot = Some(s.to_string()); true },\n                 None => false,\n             }\n         }\n \n-        fn parse_string(slot: &mut String, v: Option<&str>) -> bool {\n+        fn parse_opt_pathbuf(slot: &mut Option<PathBuf>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = s.to_string(); true },\n+                Some(s) => { *slot = Some(PathBuf::from(s)); true },\n                 None => false,\n             }\n         }\n@@ -417,13 +409,15 @@ macro_rules! options {\n             }\n         }\n \n+        /// Use this for any uint option that has a static default.\n         fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n                 None => false\n             }\n         }\n \n+        /// Use this for any uint option that lacks a static default.\n         fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }"}]}