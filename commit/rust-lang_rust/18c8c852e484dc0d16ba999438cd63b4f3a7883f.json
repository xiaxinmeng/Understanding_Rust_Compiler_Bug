{"sha": "18c8c852e484dc0d16ba999438cd63b4f3a7883f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzhjODUyZTQ4NGRjMGQxNmJhOTk5NDM4Y2Q2M2I0ZjNhNzg4M2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-29T14:42:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-29T14:42:01Z"}, "message": "factor out shared code", "tree": {"sha": "00ca4c2836e000734df9bd9af5e7f8be18d5f674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ca4c2836e000734df9bd9af5e7f8be18d5f674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c8c852e484dc0d16ba999438cd63b4f3a7883f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX7Sg5AAoJEFbW7qD8Z6xGcQYQAKgvYB8g1xM8YkqlULf9EOeK\nIVd0NaxMcLDorf27PPUEfjlcddtkwDeOzwoIJYo2id+oaORtcVE5tiNMLfrwn6JK\nv1hOV57g6HiuXgkhfqRS2SeWirtcptfOR7U80lWLTOB5IOV0HVT15muKOA2iU0ae\nP7IvuZgX/k5lOuN+t17ALG4jZYc3aptMCDo809G5fXqLOAXJZDZxvmZ5N85JcaAc\n4wooLQhiJKdGl+KKsnwI9lhWjBM5ivQ7v8Z2p4Xt5zaoQ/HaDvoyYD8mGtFAG7Yq\nUx0k+BHBGcnAacFY8N6NVcDhVVicUIIJbCSqD6GjkHyD7Bdt5EI/fKbQYYL5A5zu\nSqBha4AVWchb6ZFSKEd8JTGffHZpS/9cdTxZ9P0UdbB+XHMfyiYuH3zAUp2qa7FX\nfVZx0Q6TU8+jVmSn5p6MRFsxgThlzdM9tUKH1+aDhL/JIdUgBnTOk4nM4QfjGhpm\nPVcjnN19REh79DTEzdEi6xKB8VVNxUMgf7u8TqNlUS2AYDmxA0GKq2hEmJ7CQFkQ\nCyU+MyzFioEGqtLBWNg/Qh+/DJLvPMppYXIeG+WtVcarG1N5z0z80eTwdXOdEe2q\nowJGMISnP3/eGhQ6g0t7rRjMVNyxLW3c3nfzeC4REpi3qPcAEt5eoS2QAMk5uDkK\n9xGqFo6+Y44igf4OqqQQ\n=VWx7\n-----END PGP SIGNATURE-----", "payload": "tree 00ca4c2836e000734df9bd9af5e7f8be18d5f674\nparent f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475160121 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475160121 +0200\n\nfactor out shared code"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c8c852e484dc0d16ba999438cd63b4f3a7883f", "html_url": "https://github.com/rust-lang/rust/commit/18c8c852e484dc0d16ba999438cd63b4f3a7883f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c8c852e484dc0d16ba999438cd63b4f3a7883f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "html_url": "https://github.com/rust-lang/rust/commit/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "817ded7273d61bf935e30fe09126381fb120300c", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 58, "deletions": 68, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/18c8c852e484dc0d16ba999438cd63b4f3a7883f/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c8c852e484dc0d16ba999438cd63b4f3a7883f/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=18c8c852e484dc0d16ba999438cd63b4f3a7883f", "patch": "@@ -31,7 +31,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let f32 = self.tcx.types.f32;\n         let f64 = self.tcx.types.f64;\n \n-        match &self.tcx.item_name(def_id).as_str()[..] {\n+        let intrinsic_name = &self.tcx.item_name(def_id).as_str()[..];\n+        match intrinsic_name {\n             \"add_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Add, &args[0], &args[1], dest, dest_layout)?,\n             \"sub_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Sub, &args[0], &args[1], dest, dest_layout)?,\n             \"mul_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Mul, &args[0], &args[1], dest, dest_layout)?,\n@@ -64,76 +65,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.copy(src, dest, count as usize * elem_size, elem_align)?;\n             }\n \n-            \"ctpop\" => {\n-                let elem_ty = substs.type_at(0);\n-                let elem_size = self.type_size(elem_ty);\n-                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n-                let num = match num {\n-                    PrimVal::I8(i) => i.count_ones(),\n-                    PrimVal::U8(i) => i.count_ones(),\n-                    PrimVal::I16(i) => i.count_ones(),\n-                    PrimVal::U16(i) => i.count_ones(),\n-                    PrimVal::I32(i) => i.count_ones(),\n-                    PrimVal::U32(i) => i.count_ones(),\n-                    PrimVal::I64(i) => i.count_ones(),\n-                    PrimVal::U64(i) => i.count_ones(),\n-                    _ => bug!(\"ctpop called with non-integer type\"),\n-                };\n-                self.memory.write_uint(dest, num.into(), elem_size)?;\n-            }\n-\n+            \"ctpop\" |\n+            \"cttz\" |\n+            \"ctlz\" |\n             \"bswap\" => {\n                 let elem_ty = substs.type_at(0);\n-                let elem_size = self.type_size(elem_ty);\n                 let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n-                let num = match num {\n-                    PrimVal::I8(i) => i.swap_bytes() as u64,\n-                    PrimVal::U8(i) => i.swap_bytes() as u64,\n-                    PrimVal::I16(i) => i.swap_bytes() as u64,\n-                    PrimVal::U16(i) => i.swap_bytes() as u64,\n-                    PrimVal::I32(i) => i.swap_bytes() as u64,\n-                    PrimVal::U32(i) => i.swap_bytes() as u64,\n-                    PrimVal::I64(i) => i.swap_bytes() as u64,\n-                    PrimVal::U64(i) => i.swap_bytes(),\n-                    _ => bug!(\"bswap called with non-integer type\"),\n-                };\n-                self.memory.write_uint(dest, num, elem_size)?;\n-            }\n-\n-            \"cttz\" => {\n-                let elem_ty = substs.type_at(0);\n-                let elem_size = self.type_size(elem_ty);\n-                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n-                let num = match num {\n-                    PrimVal::I8(i) => i.trailing_zeros(),\n-                    PrimVal::U8(i) => i.trailing_zeros(),\n-                    PrimVal::I16(i) => i.trailing_zeros(),\n-                    PrimVal::U16(i) => i.trailing_zeros(),\n-                    PrimVal::I32(i) => i.trailing_zeros(),\n-                    PrimVal::U32(i) => i.trailing_zeros(),\n-                    PrimVal::I64(i) => i.trailing_zeros(),\n-                    PrimVal::U64(i) => i.trailing_zeros(),\n-                    _ => bug!(\"cttz called with non-integer type\"),\n-                };\n-                self.memory.write_uint(dest, num.into(), elem_size)?;\n-            }\n-\n-            \"ctlz\" => {\n-                let elem_ty = substs.type_at(0);\n-                let elem_size = self.type_size(elem_ty);\n-                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n-                let num = match num {\n-                    PrimVal::I8(i) => i.leading_zeros(),\n-                    PrimVal::U8(i) => i.leading_zeros(),\n-                    PrimVal::I16(i) => i.leading_zeros(),\n-                    PrimVal::U16(i) => i.leading_zeros(),\n-                    PrimVal::I32(i) => i.leading_zeros(),\n-                    PrimVal::U32(i) => i.leading_zeros(),\n-                    PrimVal::I64(i) => i.leading_zeros(),\n-                    PrimVal::U64(i) => i.leading_zeros(),\n-                    _ => bug!(\"ctlz called with non-integer type\"),\n-                };\n-                self.memory.write_uint(dest, num.into(), elem_size)?;\n+                let num = numeric_intrinsic(intrinsic_name, num);\n+                self.memory.write_primval(dest, num)?;\n             }\n \n             \"discriminant_value\" => {\n@@ -396,3 +335,54 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.tcx.normalize_associated_type(&f.ty(self.tcx, param_substs))\n     }\n }\n+\n+fn numeric_intrinsic(name: &str, val: PrimVal) -> PrimVal {\n+    use primval::PrimVal::*;\n+    match name {\n+        \"ctpop\" => match val {\n+            I8(i) => I8(i.count_ones() as i8),\n+            U8(i) => U8(i.count_ones() as u8),\n+            I16(i) => I16(i.count_ones() as i16),\n+            U16(i) => U16(i.count_ones() as u16),\n+            I32(i) => I32(i.count_ones() as i32),\n+            U32(i) => U32(i.count_ones() as u32),\n+            I64(i) => I64(i.count_ones() as i64),\n+            U64(i) => U64(i.count_ones() as u64),\n+            other => bug!(\"invalid `ctpop` argument: {:?}\", other),\n+        },\n+        \"cttz\" => match val {\n+            I8(i) => I8(i.trailing_zeros() as i8),\n+            U8(i) => U8(i.trailing_zeros() as u8),\n+            I16(i) => I16(i.trailing_zeros() as i16),\n+            U16(i) => U16(i.trailing_zeros() as u16),\n+            I32(i) => I32(i.trailing_zeros() as i32),\n+            U32(i) => U32(i.trailing_zeros() as u32),\n+            I64(i) => I64(i.trailing_zeros() as i64),\n+            U64(i) => U64(i.trailing_zeros() as u64),\n+            other => bug!(\"invalid `cttz` argument: {:?}\", other),\n+        },\n+        \"ctlz\" => match val {\n+            I8(i) => I8(i.leading_zeros() as i8),\n+            U8(i) => U8(i.leading_zeros() as u8),\n+            I16(i) => I16(i.leading_zeros() as i16),\n+            U16(i) => U16(i.leading_zeros() as u16),\n+            I32(i) => I32(i.leading_zeros() as i32),\n+            U32(i) => U32(i.leading_zeros() as u32),\n+            I64(i) => I64(i.leading_zeros() as i64),\n+            U64(i) => U64(i.leading_zeros() as u64),\n+            other => bug!(\"invalid `ctlz` argument: {:?}\", other),\n+        },\n+        \"bswap\" => match val {\n+            I8(i) => I8(i.swap_bytes() as i8),\n+            U8(i) => U8(i.swap_bytes() as u8),\n+            I16(i) => I16(i.swap_bytes() as i16),\n+            U16(i) => U16(i.swap_bytes() as u16),\n+            I32(i) => I32(i.swap_bytes() as i32),\n+            U32(i) => U32(i.swap_bytes() as u32),\n+            I64(i) => I64(i.swap_bytes() as i64),\n+            U64(i) => U64(i.swap_bytes() as u64),\n+            other => bug!(\"invalid `bswap` argument: {:?}\", other),\n+        },\n+        _ => bug!(\"not a numeric intrinsic: {}\", name),\n+    }\n+}"}]}