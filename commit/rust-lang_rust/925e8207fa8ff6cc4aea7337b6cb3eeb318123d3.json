{"sha": "925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNWU4MjA3ZmE4ZmY2Y2M0YWVhNzMzN2I2Y2IzZWViMzE4MTIzZDM=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-27T20:58:29Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-27T20:58:29Z"}, "message": "Respond to review comments\n\nUpdate README and CHANGELOG using the util scripts, refine the help message and fix the float_cmp error.", "tree": {"sha": "604744435a971c8f4413b903c14230330230a3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604744435a971c8f4413b903c14230330230a3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "html_url": "https://github.com/rust-lang/rust/commit/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c962ddbd29ed5b374c55a0fba43cf3d0af9ad680", "url": "https://api.github.com/repos/rust-lang/rust/commits/c962ddbd29ed5b374c55a0fba43cf3d0af9ad680", "html_url": "https://github.com/rust-lang/rust/commit/c962ddbd29ed5b374c55a0fba43cf3d0af9ad680"}], "stats": {"total": 93, "additions": 57, "deletions": 36}, "files": [{"sha": "089897811a595aa128d57a3947ee68a8e7cc04ea", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -1138,6 +1138,7 @@ Released 2018-09-13\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n+[`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg"}, {"sha": "38651f72eb3661b99527dd344ee674883e6d7024", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 308 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 309 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "908bbeb5e19fbb8df5717ae6023a6ecfdf3e0d8a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -263,9 +263,9 @@ pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n+pub mod trait_bounds;\n pub mod transmute;\n pub mod transmuting_null;\n-pub mod trait_bounds;\n pub mod trivially_copy_pass_by_ref;\n pub mod try_err;\n pub mod types;\n@@ -860,6 +860,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n@@ -870,7 +871,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n         transmuting_null::TRANSMUTING_NULL,\n-        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n         try_err::TRY_ERR,\n         types::ABSURD_EXTREME_COMPARISONS,\n@@ -1042,6 +1042,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         reference::REF_IN_DEREF,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,"}, {"sha": "8a719c0dd041bdfd5f05bf0b0eda73d49dbfc1a2", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -1,20 +1,21 @@\n use crate::utils::{in_macro, snippet, span_help_and_lint, SpanlessHash};\n+use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::hir::*;\n \n #[derive(Copy, Clone)]\n pub struct TraitBounds;\n \n declare_clippy_lint! {\n     /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n     ///\n-    /// **Why is this bad?** Complexity\n+    /// **Why is this bad?** Repeating the type for every bound makes the code\n+    /// less readable than combining the bounds\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// pub fn foo<T>(t: T) where T: Copy, T: Clone \n+    /// pub fn foo<T>(t: T) where T: Copy, T: Clone\n     /// ```\n     ///\n     /// Could be written as:\n@@ -34,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n         if in_macro(gen.span) {\n             return;\n         }\n-        let hash = | ty | -> u64 {\n+        let hash = |ty| -> u64 {\n             let mut hasher = SpanlessHash::new(cx, cx.tables);\n             hasher.hash_ty(ty);\n             hasher.finish()\n@@ -44,17 +45,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n                 let h = hash(&p.bounded_ty);\n                 if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {\n-                    let mut hint_string = format!(\"consider combining the bounds: `{}: \", snippet(cx, p.bounded_ty.span, \"_\"));\n+                    let mut hint_string = format!(\n+                        \"consider combining the bounds: `{}:\",\n+                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    );\n                     for b in v.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\"{}, \", path));\n+                            hint_string.push_str(&format!(\" {} +\", path));\n                         }\n                     }\n                     for b in p.bounds.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\"{}, \", path));\n+                            hint_string.push_str(&format!(\" {} +\", path));\n                         }\n                     }\n                     hint_string.truncate(hint_string.len() - 2);"}, {"sha": "db7b10c6bacd921bb2bf59063cf1fb27151ba410", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -639,23 +639,20 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 for ty in ty_list {\n                     self.hash_ty(ty);\n                 }\n-\n             },\n-            TyKind::Path(qpath) => {\n-                match qpath {\n-                    QPath::Resolved(ref maybe_ty, ref path) => {\n-                        if let Some(ref ty) = maybe_ty {\n-                            self.hash_ty(ty);\n-                        }\n-                        for segment in &path.segments {\n-                            segment.ident.name.hash(&mut self.s);\n-                        }\n-                    }, \n-                    QPath::TypeRelative(ref ty, ref segment) => {\n+            TyKind::Path(qpath) => match qpath {\n+                QPath::Resolved(ref maybe_ty, ref path) => {\n+                    if let Some(ref ty) = maybe_ty {\n                         self.hash_ty(ty);\n+                    }\n+                    for segment in &path.segments {\n                         segment.ident.name.hash(&mut self.s);\n-                    },\n-                }\n+                    }\n+                },\n+                QPath::TypeRelative(ref ty, ref segment) => {\n+                    self.hash_ty(ty);\n+                    segment.ident.name.hash(&mut self.s);\n+                },\n             },\n             TyKind::Def(_, arg_list) => {\n                 for arg in arg_list {\n@@ -670,14 +667,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n             TyKind::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n-\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n             },\n-            TyKind::CVarArgs(lifetime) => {\n-                self.hash_lifetime(lifetime) \n-            },\n+            TyKind::CVarArgs(lifetime) => self.hash_lifetime(lifetime),\n             TyKind::Err | TyKind::Infer | TyKind::Never => {},\n         }\n     }"}, {"sha": "49bce5a6cef4d2ef3ff26ccd867189ac35c833ea", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 308] = [\n+pub const ALL_LINTS: [Lint; 309] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1848,6 +1848,13 @@ pub const ALL_LINTS: [Lint; 308] = [\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"type_repetition_in_bounds\",\n+        group: \"complexity\",\n+        desc: \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\",\n+        deprecation: None,\n+        module: \"trait_bounds\",\n+    },\n     Lint {\n         name: \"unicode_not_nfc\",\n         group: \"pedantic\","}, {"sha": "d1ffc0d15c722b6b68740925aa089bf846237048", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -1,3 +1,12 @@\n+error: this type has already been used as a bound predicate\n+  --> $DIR/float_cmp.rs:12:5\n+   |\n+LL |     T: Copy,\n+   |     ^^^^^^^\n+   |\n+   = note: `-D clippy::type-repetition-in-bounds` implied by `-D warnings`\n+   = help: consider combining the bounds: `T: Add<T, Output = T>, Copy`\n+\n error: strict comparison of f32 or f64\n   --> $DIR/float_cmp.rs:60:5\n    |\n@@ -35,5 +44,5 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "8b538be762b0c3bb9821171388e33c85c99f1fea", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925e8207fa8ff6cc4aea7337b6cb3eeb318123d3/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=925e8207fa8ff6cc4aea7337b6cb3eeb318123d3", "patch": "@@ -1,14 +1,19 @@\n #[deny(clippy::type_repetition_in_bounds)]\n \n-pub fn foo<T>(_t: T) where T: Copy, T: Clone {\n+pub fn foo<T>(_t: T)\n+where\n+    T: Copy,\n+    T: Clone,\n+{\n     unimplemented!();\n }\n \n-pub fn bar<T, U>(_t: T, _u: U) where T: Copy, U: Clone {\n+pub fn bar<T, U>(_t: T, _u: U)\n+where\n+    T: Copy,\n+    U: Clone,\n+{\n     unimplemented!();\n }\n \n-\n-fn main() {\n-\n-}\n+fn main() {}"}]}