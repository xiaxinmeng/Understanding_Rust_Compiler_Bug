{"sha": "a841789a41941ad73a57cd9972dfbd5fdff02685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDE3ODlhNDE5NDFhZDczYTU3Y2Q5OTcyZGZiZDVmZGZmMDI2ODU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-01T01:58:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-01T01:58:23Z"}, "message": "rustc: Add non_camel_case_types lint check", "tree": {"sha": "70f8e1237967409d5c8d11b415bc6c4238f37d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f8e1237967409d5c8d11b415bc6c4238f37d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a841789a41941ad73a57cd9972dfbd5fdff02685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a841789a41941ad73a57cd9972dfbd5fdff02685", "html_url": "https://github.com/rust-lang/rust/commit/a841789a41941ad73a57cd9972dfbd5fdff02685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a841789a41941ad73a57cd9972dfbd5fdff02685/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3084b527120db7c0645a191ef6147962dbe23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3084b527120db7c0645a191ef6147962dbe23d", "html_url": "https://github.com/rust-lang/rust/commit/2a3084b527120db7c0645a191ef6147962dbe23d"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "2d103398b2e88729fd78dbdc9481ba671d8cd824", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -49,6 +49,7 @@ enum lint {\n     non_implicitly_copyable_typarams,\n     vecs_implicitly_copyable,\n     deprecated_mode,\n+    non_camel_case_types\n }\n \n // This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n@@ -64,6 +65,7 @@ fn int_to_lint(i: int) -> lint {\n       6 { non_implicitly_copyable_typarams }\n       7 { vecs_implicitly_copyable }\n       8 { deprecated_mode }\n+      9 { non_camel_case_types }\n     }\n }\n \n@@ -136,6 +138,11 @@ fn get_lint_dict() -> lint_dict {\n         (~\"deprecated_mode\",\n          @{lint: deprecated_mode,\n            desc: ~\"warn about deprecated uses of modes\",\n+           default: allow}),\n+\n+        (~\"non_camel_case_types\",\n+         @{lint: non_camel_case_types,\n+           desc: ~\"types, variants and traits must have camel case names\",\n            default: allow})\n     ];\n     hash_from_strs(v)\n@@ -333,6 +340,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_ctypes(cx, i);\n     check_item_while_true(cx, i);\n     check_item_path_statement(cx, i);\n+    check_item_non_camel_case_types(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -433,6 +441,39 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n+fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n+    fn is_camel_case(ident: ast::ident) -> bool {\n+        assert ident.is_not_empty();\n+        char::is_uppercase(str::char_at(*ident, 0)) &&\n+            !ident.contains_char('_')\n+    }\n+\n+    fn check_case(cx: ty::ctxt, ident: ast::ident,\n+                  expr_id: ast::node_id, item_id: ast::node_id,\n+                  span: span) {\n+        if !is_camel_case(ident) {\n+            cx.sess.span_lint(\n+                non_camel_case_types, expr_id, item_id, span,\n+                ~\"type, variant, or trait must be camel case\");\n+        }\n+    }\n+\n+    alt it.node {\n+      ast::item_ty(*) | ast::item_class(*) |\n+      ast::item_trait(*) | ast::item_impl(*) {\n+        check_case(cx, it.ident, it.id, it.id, it.span)\n+      }\n+      ast::item_enum(variants, _) {\n+        check_case(cx, it.ident, it.id, it.id, it.span);\n+        for variants.each |variant| {\n+            check_case(cx, variant.node.name,\n+                       variant.node.id, it.id, variant.span);\n+        }\n+      }\n+      _ { }\n+    }\n+}\n+\n fn check_fn(tcx: ty::ctxt, fk: visit::fn_kind, decl: ast::fn_decl,\n             _body: ast::blk, span: span, id: ast::node_id) {\n     debug!{\"lint check_fn fk=%? id=%?\", fk, id};"}, {"sha": "701e3f8f4a0f8d3decd0af632c0fc125f2b4166c", "filename": "src/test/compile-fail/lint-non-camel-case-class.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -0,0 +1,11 @@\n+#[forbid(non_camel_case_types)]\n+class foo { //~ ERROR type, variant, or trait must be camel case\n+    let bar: int;\n+\n+    new() {\n+        self.bar = 0;\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "3d6f133f3bcd940ef0464f0ddd924bc2121eeae6", "filename": "src/test/compile-fail/lint-non-camel-case-enum.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-enum.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -0,0 +1,7 @@\n+#[forbid(non_camel_case_types)]\n+enum foo { //~ ERROR type, variant, or trait must be camel case\n+    Bar\n+}\n+\n+fn main() {\n+}"}, {"sha": "a715c73a497ef09fa41029706b516d88a9865c02", "filename": "src/test/compile-fail/lint-non-camel-case-struct.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-struct.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -0,0 +1,7 @@\n+#[forbid(non_camel_case_types)]\n+struct foo { //~ ERROR type, variant, or trait must be camel case\n+    bar: int;\n+}\n+\n+fn main() {\n+}"}, {"sha": "a288d37b1ae6bce473fcb61a463cf97fa5ce9d06", "filename": "src/test/compile-fail/lint-non-camel-case-type.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-type.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -0,0 +1,5 @@\n+#[forbid(non_camel_case_types)]\n+type foo = int; //~ ERROR type, variant, or trait must be camel case\n+\n+fn main() {\n+}"}, {"sha": "8d7258feccb03b2076ebcbab4f250da32d288d05", "filename": "src/test/compile-fail/lint-non-camel-case-variant.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a841789a41941ad73a57cd9972dfbd5fdff02685/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-variant.rs?ref=a841789a41941ad73a57cd9972dfbd5fdff02685", "patch": "@@ -0,0 +1,7 @@\n+#[forbid(non_camel_case_types)]\n+enum Foo {\n+    bar //~ ERROR type, variant, or trait must be camel case\n+}\n+\n+fn main() {\n+}"}]}