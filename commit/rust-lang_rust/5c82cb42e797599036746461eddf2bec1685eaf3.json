{"sha": "5c82cb42e797599036746461eddf2bec1685eaf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODJjYjQyZTc5NzU5OTAzNjc0NjQ2MWVkZGYyYmVjMTY4NWVhZjM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-15T23:10:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-15T23:10:08Z"}, "message": "Add Ast.ATOM_pexp and -pexp mode wherein pexps live beyond parsing, into later stages. Fixes to pexp pretty printer.", "tree": {"sha": "f4a79464c688a7002c26620522d40b770bd63e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a79464c688a7002c26620522d40b770bd63e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c82cb42e797599036746461eddf2bec1685eaf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c82cb42e797599036746461eddf2bec1685eaf3", "html_url": "https://github.com/rust-lang/rust/commit/5c82cb42e797599036746461eddf2bec1685eaf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c82cb42e797599036746461eddf2bec1685eaf3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3350b17c60eec98264c62c3e12893d5ca8e00e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3350b17c60eec98264c62c3e12893d5ca8e00e7d", "html_url": "https://github.com/rust-lang/rust/commit/3350b17c60eec98264c62c3e12893d5ca8e00e7d"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "8f6865222524b269ae14bc9d1ec32cb04313218c", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -24,6 +24,7 @@ let (sess:Session.sess) =\n     Session.sess_out = None;\n     Session.sess_library_mode = false;\n     Session.sess_alt_backend = false;\n+    Session.sess_use_pexps = false;\n     (* FIXME (issue #69): need something fancier here for unix\n      * sub-flavours.\n      *)\n@@ -214,6 +215,10 @@ let argspecs =\n      \"report dependencies of input, then exit\");\n     (\"-version\", Arg.Unit (fun _ -> print_version()),\n      \"print version information, then exit\");\n+\n+    (flag (fun _ -> sess.Session.sess_use_pexps <- true)\n+       \"-pexp\"         \"use pexp portion of AST\");\n+\n   ] @ (Glue.alt_argspecs sess)\n ;;\n "}, {"sha": "f8e79fe2034e7d2fcf336a864123c72126a4d605", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -13,6 +13,7 @@ type sess =\n   mutable sess_out: filename option;\n   mutable sess_library_mode: bool;\n   mutable sess_alt_backend: bool;\n+  mutable sess_use_pexps: bool;\n   mutable sess_targ: target;\n   mutable sess_log_lex: bool;\n   mutable sess_log_parse: bool;"}, {"sha": "44c56d623415fbd44e5690b5ace5f2bf772dc45b", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -318,6 +318,7 @@ and port_case =\n and atom =\n     ATOM_literal of (lit identified)\n   | ATOM_lval of lval\n+  | ATOM_pexp of pexp\n \n and expr =\n     EXPR_binary of (binop * atom * atom)\n@@ -930,6 +931,7 @@ and fmt_pexp (ff:Format.formatter) (pexp:pexp) : unit =\n           fmt_bracketed_arr_sep \"(\" \")\" \",\" fmt_opt ff arg_opts\n \n     | PEXP_rec (elts, base) ->\n+        fmt_obox_n ff 0;\n         fmt ff \"rec(\";\n         let fmt_elt ff (ident, mut, pexp) =\n           fmt_mutability ff mut;\n@@ -945,6 +947,7 @@ and fmt_pexp (ff:Format.formatter) (pexp:pexp) : unit =\n                   fmt ff \" with \";\n                   fmt_pexp ff b\n           end;\n+          fmt_cbox ff;\n           fmt ff \")\"\n \n     | PEXP_tup elts ->\n@@ -1014,11 +1017,11 @@ and fmt_pexp (ff:Format.formatter) (pexp:pexp) : unit =\n     | PEXP_lit lit ->\n         fmt_lit ff lit\n \n-    | PEXP_str str -> fmt_str ff str\n+    | PEXP_str str -> fmt_str ff  (\"\\\"\" ^ str ^ \"\\\"\")\n \n     | PEXP_box (mut, pexp) ->\n         fmt_mutability ff mut;\n-        fmt ff \"@\";\n+        fmt ff \"@@\";\n         fmt_pexp ff pexp\n \n     | PEXP_custom (name, args, txt) ->\n@@ -1089,6 +1092,7 @@ and fmt_atom (ff:Format.formatter) (a:atom) : unit =\n   match a with\n       ATOM_literal lit -> fmt_lit ff lit.node\n     | ATOM_lval lval -> fmt_lval ff lval\n+    | ATOM_pexp pexp -> fmt_pexp ff pexp\n \n and fmt_atoms (ff:Format.formatter) (az:atom array) : unit =\n   fmt ff \"(\";\n@@ -1200,7 +1204,7 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n               | Some e ->\n                   begin\n                     fmt_cbb ff;\n-                    fmt_obox_3 ff;\n+                    fmt_obox_n ff 3;\n                     fmt ff \" else \";\n                     fmt_obr ff;\n                     fmt_stmts ff e.node"}, {"sha": "00eb8387adf73270338abcebb9c2c48b5c0b3986", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -17,7 +17,9 @@ let empty_view = { Ast.view_imports = Hashtbl.create 0;\n \n let rec parse_expr (ps:pstate) : (Ast.stmt array * Ast.expr) =\n   let pexp = ctxt \"expr\" Pexp.parse_pexp ps in\n-    Pexp.desugar_expr ps pexp\n+    if ps.pstate_sess.Session.sess_use_pexps\n+    then ([||], Ast.EXPR_atom (Ast.ATOM_pexp pexp))\n+    else Pexp.desugar_expr ps pexp\n \n and parse_prim_expr (ps:pstate) : Ast.expr =\n   let pexp = ctxt \"expr\" Pexp.parse_pexp ps in\n@@ -28,7 +30,9 @@ and parse_prim_expr (ps:pstate) : Ast.expr =\n \n and parse_expr_atom (ps:pstate) : (Ast.stmt array * Ast.atom) =\n   let pexp = ctxt \"expr\" Pexp.parse_pexp ps in\n-    Pexp.desugar_expr_atom ps pexp\n+    if ps.pstate_sess.Session.sess_use_pexps\n+    then ([||], Ast.ATOM_pexp pexp)\n+    else Pexp.desugar_expr_atom ps pexp\n \n and parse_expr_atom_list\n     (bra:token)\n@@ -39,12 +43,29 @@ and parse_expr_atom_list\n             (ctxt \"expr-atom list\" parse_expr_atom) ps)\n \n and parse_expr_init (lv:Ast.lval) (ps:pstate) : (Ast.stmt array) =\n+  let apos = lexpos ps in\n   let pexp = ctxt \"expr\" Pexp.parse_pexp ps in\n-    Pexp.desugar_expr_init ps lv pexp\n+  let bpos = lexpos ps in\n+    if ps.pstate_sess.Session.sess_use_pexps\n+    then [|\n+      span ps apos bpos\n+        (Ast.STMT_copy (lv, Ast.EXPR_atom (Ast.ATOM_pexp pexp)))\n+    |]\n+    else Pexp.desugar_expr_init ps lv pexp\n \n and parse_lval (ps:pstate) : (Ast.stmt array * Ast.lval) =\n-  let pexp = Pexp.parse_pexp ps in\n-    Pexp.desugar_lval ps pexp\n+  let apos = lexpos ps in\n+  let pexp = ctxt \"lval\" Pexp.parse_pexp ps in\n+  let bpos = lexpos ps in\n+    if ps.pstate_sess.Session.sess_use_pexps\n+    then\n+      let (_, tmp, decl_stmt) = build_tmp ps slot_auto apos bpos in\n+      let copy_stmt =\n+        span ps apos bpos\n+          (Ast.STMT_copy (tmp, Ast.EXPR_atom (Ast.ATOM_pexp pexp)))\n+      in\n+        ([| decl_stmt; copy_stmt |], (clone_lval ps tmp))\n+    else Pexp.desugar_lval ps pexp\n \n and parse_identified_slot_and_ident\n     (aliases_ok:bool)"}, {"sha": "883ee01d0ae09b6d89607064160c1dd179f8de42", "filename": "src/boot/fe/parser.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fparser.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fparser.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fparser.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -164,6 +164,7 @@ let clone_atom (ps:pstate) (atom:Ast.atom) : Ast.atom =\n   match atom with\n       Ast.ATOM_literal _ -> atom\n     | Ast.ATOM_lval lv -> Ast.ATOM_lval (clone_lval ps lv)\n+    | Ast.ATOM_pexp _ -> bug () \"Parser.clone_atom on ATOM_pexp\"\n ;;\n \n let ctxt (n:string) (f:pstate -> 'a) (ps:pstate) : 'a ="}, {"sha": "58a6447430d2eaf0694ae93fe3fb76055ae21c4c", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -1263,10 +1263,11 @@ and desugar_expr_init\n             aa arg_stmts stmts\n \n \n-and atom_lval (ps:pstate) (at:Ast.atom) : Ast.lval =\n+and atom_lval (_:pstate) (at:Ast.atom) : Ast.lval =\n   match at with\n       Ast.ATOM_lval lv -> lv\n-    | Ast.ATOM_literal _ -> raise (err \"literal where lval expected\" ps)\n+    | Ast.ATOM_literal _\n+    | Ast.ATOM_pexp _ -> bug () \"Pexp.atom_lval on non-ATOM_lval\"\n ;;\n \n "}, {"sha": "c116cf057878fc8c6c126d2a222f28fc88080b90", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -817,6 +817,8 @@ let trans_crate\n           | Ast.ATOM_lval lval ->\n               Llvm.build_load (fst (trans_lval lval)) (anon_llid \"tmp\")\n                 llbuilder\n+          | Ast.ATOM_pexp _ ->\n+              bug () \"Lltrans.trans_atom on ATOM_pexp\"\n       in\n \n       let build_binop (op:Ast.binop) (lllhs:Llvm.llvalue) (llrhs:Llvm.llvalue)"}, {"sha": "1be2e3b9b3513cf1717a82d0c58b1176bc9a5b14", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -495,6 +495,9 @@ let type_resolving_visitor\n                 | Ast.COMP_atom (Ast.ATOM_literal _) -> ext\n                 | Ast.COMP_atom (Ast.ATOM_lval lv) ->\n                     Ast.COMP_atom (Ast.ATOM_lval (rebuild_lval lv))\n+                | Ast.COMP_atom (Ast.ATOM_pexp _) ->\n+                    bug () \"Resolve.rebuild_lval' on ATOM_pexp\"\n+\n                 | Ast.COMP_named (Ast.COMP_app (ident, params)) ->\n                     Ast.COMP_named\n                       (Ast.COMP_app (ident, Array.map resolve_ty params))"}, {"sha": "42df903b5b1e24b33b46a19c2a18bddd54b273a5", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -1326,6 +1326,7 @@ let rec atom_type (cx:ctxt) (at:Ast.atom) : Ast.ty =\n     | Ast.ATOM_literal {node=(Ast.LIT_nil); id=_} -> Ast.TY_nil\n     | Ast.ATOM_literal {node=(Ast.LIT_mach_int (m,_)); id=_} -> Ast.TY_mach m\n     | Ast.ATOM_lval lv -> lval_ty cx lv\n+    | Ast.ATOM_pexp _ -> bug () \"Semant.atom_type on ATOM_pexp\"\n ;;\n \n let expr_type (cx:ctxt) (e:Ast.expr) : Ast.ty ="}, {"sha": "8053c0f91be43b761d889bed31b487b827b51cfa", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -1031,6 +1031,9 @@ let trans_visitor\n       | Ast.ATOM_lval lv ->\n           trans_const_lval lv\n \n+      | Ast.ATOM_pexp _ ->\n+          unimpl None \"constant-folding pexp atom\"\n+\n   and trans_const_expr\n       (expr:Ast.expr)\n       : (Ast.ty * const) =\n@@ -1404,6 +1407,8 @@ let trans_visitor\n             Il.Cell (fst (deref_ty DEREF_none false cell ty))\n \n       | Ast.ATOM_literal lit -> trans_lit lit.node\n+      | Ast.ATOM_pexp _ -> bug () \"Trans.trans_atom on ATOM_pexp\"\n+\n \n   and fixup_to_ptr_operand\n       (imm_ok:bool)\n@@ -3583,6 +3588,10 @@ let trans_visitor\n                   dst_cell dst_ty\n                   src_cell src_ty\n \n+        | (_, Ast.EXPR_atom (Ast.ATOM_pexp _)) ->\n+            bug () \"Trans.trans_copy on ATOM_pexp\"\n+\n+\n   and trans_init_direct_fn\n       (dst_cell:Il.cell)\n       (flv:Ast.lval)"}, {"sha": "4e737be2f945c91bb9ac4da00de2fee9686f2cda", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -624,6 +624,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n     match atom with\n         Ast.ATOM_lval lval -> check_lval ~deref:deref lval\n       | Ast.ATOM_literal lit_id -> check_literal lit_id.Common.node\n+      | Ast.ATOM_pexp _ -> Common.bug () \"Type.check_atom on ATOM_pexp\"\n   in\n \n   let infer_slot (ty:Ast.ty) (slot_id:Common.node_id) : unit ="}, {"sha": "a88adcd293c7528d83f674a7f3a0178cc75c8e9a", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -258,6 +258,7 @@ and atom_slots (cx:ctxt) (a:Ast.atom) : node_id array =\n   match a with\n       Ast.ATOM_literal _ -> [| |]\n     | Ast.ATOM_lval lv -> lval_slots cx lv\n+    | Ast.ATOM_pexp _ -> bug () \"Typestate.atom_slots on ATOM_pexp\"\n ;;\n \n let lval_option_slots (cx:ctxt) (lv:Ast.lval option) : node_id array ="}, {"sha": "552debdf0527ad9de2fa2a6fa8429cb93b5ceaa3", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -557,6 +557,7 @@ and walk_atom\n   match a with\n       Ast.ATOM_literal ls -> walk_lit v ls.node\n     | Ast.ATOM_lval lv -> walk_lval v lv\n+    | Ast.ATOM_pexp _ -> bug () \"Walk.walk_atom on ATOM_pexp\"\n \n \n and walk_opt_atom"}, {"sha": "8fa4169574f2503b581bfda590e3fff6a82b1069", "filename": "src/boot/util/fmt.ml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Futil%2Ffmt.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5c82cb42e797599036746461eddf2bec1685eaf3/src%2Fboot%2Futil%2Ffmt.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Ffmt.ml?ref=5c82cb42e797599036746461eddf2bec1685eaf3", "patch": "@@ -9,11 +9,12 @@ let fmt_str ff = fmt ff \"%s\"\n ;;\n \n let fmt_obox ff = Format.pp_open_box ff 4;;\n-let fmt_obox_3 ff = Format.pp_open_box ff 3;;\n+let fmt_obox_n ff n = Format.pp_open_box ff n;;\n let fmt_cbox ff = Format.pp_close_box ff ();;\n let fmt_obr ff = fmt ff \"{\";;\n let fmt_cbr ff = fmt ff \"@\\n}\";;\n let fmt_cbb ff = (fmt_cbox ff; fmt_cbr ff);;\n+let fmt_break ff = Format.pp_print_space ff ();;\n \n let fmt_bracketed\n     (bra:string)\n@@ -23,7 +24,9 @@ let fmt_bracketed\n     (a:'a)\n     : unit =\n   fmt_str ff bra;\n+  fmt_obox_n ff 0;\n   inner ff a;\n+  fmt_cbox ff;\n   fmt_str ff ket\n ;;\n \n@@ -37,7 +40,7 @@ let fmt_arr_sep\n     begin\n       fun i a ->\n         if i <> 0\n-        then fmt_str ff sep;\n+        then (fmt_str ff sep; fmt_break ff);\n         inner ff a\n     end\n     az"}]}