{"sha": "7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmVkMmUzMmEzYjU2YTJhOTAzNWM2NGVkOGZiZmEwMjFjODY5MDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-22T21:17:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T15:25:45Z"}, "message": "refactor goto_block and also add unwind_to_block", "tree": {"sha": "065445d389f0d560ea3c99b27ca2437179d076eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065445d389f0d560ea3c99b27ca2437179d076eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "html_url": "https://github.com/rust-lang/rust/commit/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9025395c8e46599f062216c818e3388e597d553", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9025395c8e46599f062216c818e3388e597d553", "html_url": "https://github.com/rust-lang/rust/commit/d9025395c8e46599f062216c818e3388e597d553"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "fc17da498ec8cbb59e11795f51053ad4ab645329", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "patch": "@@ -338,7 +338,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 // that for const fn!  We certainly do *not* want to actually call the fn\n                 // though, so be sure we return here.\n                 return if ecx.hook_panic_fn(instance, args, dest)? {\n-                    ecx.goto_block(ret)?; // fully evaluated and done\n+                    ecx.return_to_block(ret)?; // callee is fully evaluated and done\n                     Ok(None)\n                 } else {\n                     throw_unsup_format!(\"calling non-const function `{}`\", instance)"}, {"sha": "3253b7758a910891ad2300a501cc5e0d6f4aff01", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "patch": "@@ -553,6 +553,37 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Jump to the given block.\n+    #[inline]\n+    pub fn go_to_block(&mut self, target: mir::BasicBlock) {\n+        let frame = self.frame_mut();\n+        frame.block = Some(target);\n+        frame.stmt = 0;\n+    }\n+\n+    /// *Return* to the given `target` basic block.\n+    /// Do *not* use for unwinding! Use `unwind_to_block` instead.\n+    ///\n+    /// If `target` is `None`, that indicates the function cannot return, so we raise UB.\n+    pub fn return_to_block(&mut self, target: Option<mir::BasicBlock>) -> InterpResult<'tcx> {\n+        if let Some(target) = target {\n+            Ok(self.go_to_block(target))\n+        } else {\n+            throw_ub!(Unreachable)\n+        }\n+    }\n+\n+    /// *Unwind* to the given `target` basic block.\n+    /// Do *not* use for returning! Use `return_to_block` instead.\n+    ///\n+    /// If `target` is `None`, that indicates the function does not need cleanup during\n+    /// unwinding, and we will just keep propagating that upwards.\n+    pub fn unwind_to_block(&mut self, target: Option<mir::BasicBlock>) {\n+        let frame = self.frame_mut();\n+        frame.block = target;\n+        frame.stmt = 0;\n+    }\n+\n     /// Pops the current frame from the stack, deallocating the\n     /// memory for allocated locals.\n     ///\n@@ -628,10 +659,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if cur_unwinding {\n             // Follow the unwind edge.\n             let unwind = next_block.expect(\"Encounted StackPopCleanup::None when unwinding!\");\n-            let next_frame = self.frame_mut();\n-            // If `unwind` is `None`, we'll leave that function immediately again.\n-            next_frame.block = unwind;\n-            next_frame.stmt = 0;\n+            self.unwind_to_block(unwind);\n         } else {\n             // Follow the normal return edge.\n             // Validate the return value. Do this after deallocating so that we catch dangling\n@@ -658,7 +686,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             // Jump to new block -- *after* validation so that the spans make more sense.\n             if let Some(ret) = next_block {\n-                self.goto_block(ret)?;\n+                self.return_to_block(ret)?;\n             }\n         }\n "}, {"sha": "f61fe7b5e38aee55a108843a65809bf4eb9e6b32", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "patch": "@@ -12,17 +12,6 @@ use super::{\n };\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n-    #[inline]\n-    pub fn goto_block(&mut self, target: Option<mir::BasicBlock>) -> InterpResult<'tcx> {\n-        if let Some(target) = target {\n-            self.frame_mut().block = Some(target);\n-            self.frame_mut().stmt = 0;\n-            Ok(())\n-        } else {\n-            throw_ub!(Unreachable)\n-        }\n-    }\n-\n     pub(super) fn eval_terminator(\n         &mut self,\n         terminator: &mir::Terminator<'tcx>,\n@@ -34,7 +23,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.pop_stack_frame(/* unwinding */ false)?\n             }\n \n-            Goto { target } => self.goto_block(Some(target))?,\n+            Goto { target } => self.go_to_block(target),\n \n             SwitchInt {\n                 ref discr,\n@@ -60,7 +49,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                 }\n \n-                self.goto_block(Some(target_block))?;\n+                self.go_to_block(target_block);\n             }\n \n             Call {\n@@ -133,7 +122,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let cond_val = self.read_immediate(self.eval_operand(cond, None)?)?\n                     .to_scalar()?.to_bool()?;\n                 if expected == cond_val {\n-                    self.goto_block(Some(target))?;\n+                    self.go_to_block(target);\n                 } else {\n                     // Compute error message\n                     use rustc::mir::interpret::PanicInfo::*;\n@@ -272,7 +261,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // No stack frame gets pushed, the main loop will just act as if the\n                 // call completed.\n                 if ret.is_some() {\n-                    self.goto_block(ret)?;\n+                    self.return_to_block(ret)?;\n                 } else {\n                     // If this intrinsic call doesn't have a ret block,\n                     // then the intrinsic implementation should have"}]}