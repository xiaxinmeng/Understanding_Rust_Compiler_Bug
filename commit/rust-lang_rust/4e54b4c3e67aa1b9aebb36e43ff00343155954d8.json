{"sha": "4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTRiNGMzZTY3YWExYjlhZWJiMzZlNDNmZjAwMzQzMTU1OTU0ZDg=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-10-12T22:40:40Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:18:55Z"}, "message": "Intra doc links for the pointer primitive", "tree": {"sha": "4a028a26db92eb7d58920657e815e7406c399fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a028a26db92eb7d58920657e815e7406c399fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "html_url": "https://github.com/rust-lang/rust/commit/4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e54b4c3e67aa1b9aebb36e43ff00343155954d8/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c27ccff1962a6a25992708f0d2d1f36a0ea4fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c27ccff1962a6a25992708f0d2d1f36a0ea4fa1", "html_url": "https://github.com/rust-lang/rust/commit/9c27ccff1962a6a25992708f0d2d1f36a0ea4fa1"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "abffde316bbaf151f988f6343223b2a23e03a8c8", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e54b4c3e67aa1b9aebb36e43ff00343155954d8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e54b4c3e67aa1b9aebb36e43ff00343155954d8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "patch": "@@ -723,7 +723,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: ./ptr/fn.read.html\n+    /// [`ptr::read`]: read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -743,7 +743,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: ./ptr/fn.read_volatile.html\n+    /// [`ptr::read_volatile`]: read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -761,7 +761,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: ./ptr/fn.read_unaligned.html\n+    /// [`ptr::read_unaligned`]: read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -779,7 +779,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -797,7 +797,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)"}, {"sha": "1b342ce1f91522d1bf4edc230b8e8d5f745fd80f", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e54b4c3e67aa1b9aebb36e43ff00343155954d8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e54b4c3e67aa1b9aebb36e43ff00343155954d8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=4e54b4c3e67aa1b9aebb36e43ff00343155954d8", "patch": "@@ -830,7 +830,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: ./ptr/fn.read.html\n+    /// [`ptr::read`]: read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -850,7 +850,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: ./ptr/fn.read_volatile.html\n+    /// [`ptr::read_volatile`]: read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -868,7 +868,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: ./ptr/fn.read_unaligned.html\n+    /// [`ptr::read_unaligned`]: read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -886,7 +886,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -904,7 +904,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n@@ -922,7 +922,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from(self, src: *const T, count: usize)\n@@ -940,7 +940,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n@@ -955,7 +955,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::drop_in_place`] for safety concerns and examples.\n     ///\n-    /// [`ptr::drop_in_place`]: ./ptr/fn.drop_in_place.html\n+    /// [`ptr::drop_in_place`]: drop_in_place()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn drop_in_place(self) {\n@@ -968,7 +968,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write`]: ./ptr/fn.write.html\n+    /// [`ptr::write`]: write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write(self, val: T)\n@@ -984,7 +984,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_bytes`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_bytes`]: ./ptr/fn.write_bytes.html\n+    /// [`ptr::write_bytes`]: write_bytes()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_bytes(self, val: u8, count: usize)\n@@ -1004,7 +1004,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_volatile`]: ./ptr/fn.write_volatile.html\n+    /// [`ptr::write_volatile`]: write_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_volatile(self, val: T)\n@@ -1022,7 +1022,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_unaligned`]: ./ptr/fn.write_unaligned.html\n+    /// [`ptr::write_unaligned`]: write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_unaligned(self, val: T)\n@@ -1038,7 +1038,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::replace`] for safety concerns and examples.\n     ///\n-    /// [`ptr::replace`]: ./ptr/fn.replace.html\n+    /// [`ptr::replace`]: replace()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn replace(self, src: T) -> T\n@@ -1055,7 +1055,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::swap`] for safety concerns and examples.\n     ///\n-    /// [`ptr::swap`]: ./ptr/fn.swap.html\n+    /// [`ptr::swap`]: swap()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn swap(self, with: *mut T)"}]}