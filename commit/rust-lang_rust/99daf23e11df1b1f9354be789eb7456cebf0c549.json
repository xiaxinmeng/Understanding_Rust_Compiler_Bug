{"sha": "99daf23e11df1b1f9354be789eb7456cebf0c549", "node_id": "C_kwDOAAsO6NoAKDk5ZGFmMjNlMTFkZjFiMWY5MzU0YmU3ODllYjc0NTZjZWJmMGM1NDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T09:28:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T09:28:39Z"}, "message": "Auto merge of #13671 - Veykril:goto-decl, r=Veykril\n\nImprove goto declaration\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/13599\n\n- goto decl now goes to assoc items of trait declarations over the items of trait implementations\n- goto decl now goes to the field declaration (opposed to goto def which shows both the field decl and binding created/local being used)\n- also adds back the goto definition fallback that seems to have been dropped at some point.", "tree": {"sha": "44199dbad40a86eedaf96f593c0e18c55e9d2c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44199dbad40a86eedaf96f593c0e18c55e9d2c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99daf23e11df1b1f9354be789eb7456cebf0c549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99daf23e11df1b1f9354be789eb7456cebf0c549", "html_url": "https://github.com/rust-lang/rust/commit/99daf23e11df1b1f9354be789eb7456cebf0c549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99daf23e11df1b1f9354be789eb7456cebf0c549/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6918009fea0ce0f37bd81664227e006fe120949b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6918009fea0ce0f37bd81664227e006fe120949b", "html_url": "https://github.com/rust-lang/rust/commit/6918009fea0ce0f37bd81664227e006fe120949b"}, {"sha": "ae0bdffcc9b9e25412f118dfe788cf112fb7e2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0bdffcc9b9e25412f118dfe788cf112fb7e2ef", "html_url": "https://github.com/rust-lang/rust/commit/ae0bdffcc9b9e25412f118dfe788cf112fb7e2ef"}], "stats": {"total": 123, "additions": 112, "deletions": 11}, "files": [{"sha": "c7130a2a4bb0ae91266a63a9634c5fc1b30bf281", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 112, "deletions": 11, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/99daf23e11df1b1f9354be789eb7456cebf0c549/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daf23e11df1b1f9354be789eb7456cebf0c549/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=99daf23e11df1b1f9354be789eb7456cebf0c549", "patch": "@@ -1,18 +1,22 @@\n-use hir::Semantics;\n+use hir::{AsAssocItem, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, T};\n \n-use crate::{FilePosition, NavigationTarget, RangeInfo};\n+use crate::{\n+    goto_definition::goto_definition, navigation_target::TryToNav, FilePosition, NavigationTarget,\n+    RangeInfo,\n+};\n \n // Feature: Go to Declaration\n //\n // Navigates to the declaration of an identifier.\n //\n-// This is currently the same as `Go to Definition` with the exception of outline modules where it\n-// will navigate to the `mod name;` item declaration.\n+// This is the same as `Go to Definition` with the following exceptions:\n+// - outline modules will navigate to the `mod name;` item declaration\n+// - trait assoc items will navigate to the assoc item of the trait declaration opposed to the trait impl\n pub(crate) fn goto_declaration(\n     db: &RootDatabase,\n     position: FilePosition,\n@@ -32,25 +36,37 @@ pub(crate) fn goto_declaration(\n                 match parent {\n                     ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n                         NameRefClass::Definition(it) => Some(it),\n-                        _ => None\n+                        NameRefClass::FieldShorthand { field_ref, .. } => return field_ref.try_to_nav(db),\n                     },\n                     ast::Name(name) => match NameClass::classify(&sema, &name)? {\n-                        NameClass::Definition(it) => Some(it),\n-                        _ => None\n+                        NameClass::Definition(it) | NameClass::ConstReference(it) => Some(it),\n+                        NameClass::PatFieldShorthand { field_ref, .. } => return field_ref.try_to_nav(db),\n                     },\n                     _ => None\n                 }\n             };\n-            match def? {\n+            let assoc = match def? {\n                 Definition::Module(module) => {\n-                    Some(NavigationTarget::from_module_to_decl(db, module))\n+                    return Some(NavigationTarget::from_module_to_decl(db, module))\n                 }\n+                Definition::Const(c) => c.as_assoc_item(db),\n+                Definition::TypeAlias(ta) => ta.as_assoc_item(db),\n+                Definition::Function(f) => f.as_assoc_item(db),\n                 _ => None,\n-            }\n+            }?;\n+\n+            let trait_ = assoc.containing_trait_impl(db)?;\n+            let name = Some(assoc.name(db)?);\n+            let item = trait_.items(db).into_iter().find(|it| it.name(db) == name)?;\n+            item.try_to_nav(db)\n         })\n         .collect();\n \n-    Some(RangeInfo::new(range, info))\n+    if info.is_empty() {\n+        goto_definition(db, position)\n+    } else {\n+        Some(RangeInfo::new(range, info))\n+    }\n }\n \n #[cfg(test)]\n@@ -109,4 +125,89 @@ mod foo {\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn goto_decl_goto_def_fallback() {\n+        check(\n+            r#\"\n+struct Foo;\n+    // ^^^\n+impl Foo$0 {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_assoc_item_no_impl_item() {\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {}\n+\n+fn main() {\n+    <()>::C$0;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_assoc_item() {\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {\n+    const C: () = ();\n+}\n+\n+fn main() {\n+    <()>::C$0;\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {\n+    const C$0: () = ();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_field_pat_shorthand() {\n+        check(\n+            r#\"\n+struct Foo { field: u32 }\n+           //^^^^^\n+fn main() {\n+    let Foo { field$0 };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_constructor_shorthand() {\n+        check(\n+            r#\"\n+struct Foo { field: u32 }\n+           //^^^^^\n+fn main() {\n+    let field = 0;\n+    Foo { field$0 };\n+}\n+\"#,\n+        );\n+    }\n }"}]}