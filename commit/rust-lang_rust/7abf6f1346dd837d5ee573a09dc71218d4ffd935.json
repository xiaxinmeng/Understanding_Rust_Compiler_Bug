{"sha": "7abf6f1346dd837d5ee573a09dc71218d4ffd935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYmY2ZjEzNDZkZDgzN2Q1ZWU1NzNhMDlkYzcxMjE4ZDRmZmQ5MzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T21:38:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T01:29:13Z"}, "message": "librand: Remove all uses of `~str` from `librand`", "tree": {"sha": "8b214a0e6d35fd564a8a7fa17cec682080d8e4ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b214a0e6d35fd564a8a7fa17cec682080d8e4ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abf6f1346dd837d5ee573a09dc71218d4ffd935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abf6f1346dd837d5ee573a09dc71218d4ffd935", "html_url": "https://github.com/rust-lang/rust/commit/7abf6f1346dd837d5ee573a09dc71218d4ffd935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abf6f1346dd837d5ee573a09dc71218d4ffd935/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6415d06616a5203c76d9885b11b42fa95a639b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/6415d06616a5203c76d9885b11b42fa95a639b41", "html_url": "https://github.com/rust-lang/rust/commit/6415d06616a5203c76d9885b11b42fa95a639b41"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "5b71d5c4da722c34c3b3a9b58acf8274040731b6", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=7abf6f1346dd837d5ee573a09dc71218d4ffd935", "patch": "@@ -260,15 +260,15 @@ pub trait Rng {\n     ///\n     /// println!(\"{}\", task_rng().gen_ascii_str(10));\n     /// ```\n-    fn gen_ascii_str(&mut self, len: uint) -> ~str {\n+    fn gen_ascii_str(&mut self, len: uint) -> StrBuf {\n         static GEN_ASCII_STR_CHARSET: &'static [u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                                                              abcdefghijklmnopqrstuvwxyz\\\n                                                              0123456789\");\n         let mut s = StrBuf::with_capacity(len);\n         for _ in range(0, len) {\n             s.push_char(self.choose(GEN_ASCII_STR_CHARSET) as char)\n         }\n-        s.into_owned()\n+        s\n     }\n \n     /// Choose an item randomly, failing if `values` is empty."}, {"sha": "4c4ba8dd6bf93e133db10fa4b8208cd85cf5cbed", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=7abf6f1346dd837d5ee573a09dc71218d4ffd935", "patch": "@@ -159,7 +159,7 @@ fn gen_text(n: uint) -> StrBuf {\n             *b = '\\n' as u8\n         }\n     }\n-    str::from_utf8(bytes).unwrap().to_strbuf()\n+    str::from_utf8(bytes.as_slice()).unwrap().to_strbuf()\n }\n \n throughput!(easy0_32, easy0(), 32)"}, {"sha": "88081d90b40013d55c8e37acb74e118e65659de7", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6f1346dd837d5ee573a09dc71218d4ffd935/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=7abf6f1346dd837d5ee573a09dc71218d4ffd935", "patch": "@@ -1511,9 +1511,9 @@ mod tests {\n \n     fn make_rand_name() -> ~str {\n         let mut rng = rand::task_rng();\n-        let n = \"TEST\".to_owned() + rng.gen_ascii_str(10u);\n-        assert!(getenv(n).is_none());\n-        n\n+        let n = format_strbuf!(\"TEST{}\", rng.gen_ascii_str(10u).as_slice());\n+        assert!(getenv(n.as_slice()).is_none());\n+        n.into_owned()\n     }\n \n     #[test]"}]}