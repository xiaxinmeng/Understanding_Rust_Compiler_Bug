{"sha": "2db0dc32970a70bcf622e0854c944753a065cb15", "node_id": "C_kwDOAAsO6NoAKDJkYjBkYzMyOTcwYTcwYmNmNjIyZTA4NTRjOTQ0NzUzYTA2NWNiMTU", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-11-26T20:33:12Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-11-28T22:12:01Z"}, "message": "Simplify checking for `GeneratorKind::Async`\n\nAdds a helper method around `generator_kind` that makes matching async constructs simpler.", "tree": {"sha": "aac0904e2dda68df188d8cda04abe9c3feaa5fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac0904e2dda68df188d8cda04abe9c3feaa5fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db0dc32970a70bcf622e0854c944753a065cb15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmOFMjgACgkQ/HvKd4JL\nMpibnhAAhvH5KnX7I4fU+Rajw3gaqP0RmjBB31PzL4hrSVfaLWziBJrnRSHlunwL\nlWfgK978wh/w9HefskmJDSmkCL1uKSgez1MZYhrKgY590TU5X5cEth/vj/HkY3D4\nwYpf+aH6PJsjc5f8iWfeQ9OCy5dAjRPogav1/aHrRAdg3r1rvf4EMNynnjKPfLNZ\nKF2U8ebZ7np7N3N/glAZxlsErW3fmawHrq8FPwMQbSnyCQdfV2CtVSBadCvc1R0l\nW7pUN9IyHj221B5zk8MLjplOzPMHNJYya5viWBVAot0XV+6LtfZ+gzfeaTu6E42F\nyjvcu2Jwm0pqQw5HTlnyV4X3vMA5/bDAIQgWp5qS4ExyceMaZJAytNUNgC3hBSVx\ncHcgZ5pQ8OIeHMkgVeb4qV5bLLi/TP5V8KX0pAUTPJFm2zekdm1y4RM7sFKKASPr\nbOCssDm/yNtOcFi8Ev0eCSVDh2LIvT05Lhu3Qu1k62VCxG/zCm3Z0AhCUu5SH55s\n70L+PxoctXkGDewcnf8hBTyVyhay2+TDsSuoi+56iBKg+o43uC9j5IeGBBnJo4iQ\nhSyWzFce1uBPqqlrWQuygsadqY+FYfRKBvQZH6uq0Af21+K7pbppygiGLeJQQTK8\nSap7i/X5xdoNLNuRzCTcBOTmg0S9VKXz4V4wJGQBxfVZ35tfIc8=\n=GPTt\n-----END PGP SIGNATURE-----", "payload": "tree aac0904e2dda68df188d8cda04abe9c3feaa5fbf\nparent 8a09420ac48658cad726e0a6997687ceac4151e3\nauthor Arpad Borsos <swatinem@swatinem.de> 1669494792 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1669673521 +0100\n\nSimplify checking for `GeneratorKind::Async`\n\nAdds a helper method around `generator_kind` that makes matching async constructs simpler.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db0dc32970a70bcf622e0854c944753a065cb15", "html_url": "https://github.com/rust-lang/rust/commit/2db0dc32970a70bcf622e0854c944753a065cb15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db0dc32970a70bcf622e0854c944753a065cb15/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a09420ac48658cad726e0a6997687ceac4151e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a09420ac48658cad726e0a6997687ceac4151e3", "html_url": "https://github.com/rust-lang/rust/commit/8a09420ac48658cad726e0a6997687ceac4151e3"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "7aa099433a76d902145decf600c3fac97be5ded7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=2db0dc32970a70bcf622e0854c944753a065cb15", "patch": "@@ -514,12 +514,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             span: *span,\n             ty_err: match output_ty.kind() {\n                 ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n-                ty::Generator(def, ..)\n-                    if matches!(\n-                        self.infcx.tcx.generator_kind(def),\n-                        Some(hir::GeneratorKind::Async(_))\n-                    ) =>\n-                {\n+                ty::Generator(def, ..) if self.infcx.tcx.generator_is_async(*def) => {\n                     FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n                 }\n                 _ => FnMutReturnTypeErr::ReturnRef { span: *span },"}, {"sha": "88ad4c67d93e4e80119ddf417c2204f38f6c01cd", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=2db0dc32970a70bcf622e0854c944753a065cb15", "patch": "@@ -322,10 +322,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Closure(..) => Some(MustUsePath::Closure(span)),\n                 ty::Generator(def_id, ..) => {\n                     // async fn should be treated as \"implementor of `Future`\"\n-                    let must_use = if matches!(\n-                        cx.tcx.generator_kind(def_id),\n-                        Some(hir::GeneratorKind::Async(..))\n-                    ) {\n+                    let must_use = if cx.tcx.generator_is_async(def_id) {\n                         let def_id = cx.tcx.lang_items().future_trait().unwrap();\n                         is_def_must_use(cx, def_id, span)\n                             .map(|inner| MustUsePath::Opaque(Box::new(inner)))"}, {"sha": "1628cca638ea56b90d3dadfac4fee3039d33c7ed", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2db0dc32970a70bcf622e0854c944753a065cb15", "patch": "@@ -1360,6 +1360,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)\n     }\n \n+    /// Returns `true` if the node pointed to by `def_id` is a generator for an async construct.\n+    pub fn generator_is_async(self, def_id: DefId) -> bool {\n+        matches!(self.generator_kind(def_id), Some(hir::GeneratorKind::Async(_)))\n+    }\n+\n     pub fn stability(self) -> &'tcx stability::Index {\n         self.stability_index(())\n     }"}, {"sha": "eeb4693eec3b6fa1270af529a3d3d3ec1dbc08fd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2db0dc32970a70bcf622e0854c944753a065cb15", "patch": "@@ -1988,11 +1988,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .as_local()\n             .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n-        let is_async = self\n-            .tcx\n-            .generator_kind(generator_did)\n-            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-            .unwrap_or(false);\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -2069,6 +2064,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         debug!(?interior_or_upvar_span);\n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n+            let is_async = self.tcx.generator_is_async(generator_did);\n             let typeck_results = match generator_data {\n                 GeneratorData::Local(typeck_results) => Some(typeck_results),\n                 GeneratorData::Foreign(_) => None,\n@@ -2641,10 +2637,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 if is_future\n                                     && obligated_types.last().map_or(false, |ty| match ty.kind() {\n                                         ty::Generator(last_def_id, ..) => {\n-                                            matches!(\n-                                                tcx.generator_kind(last_def_id),\n-                                                Some(GeneratorKind::Async(..))\n-                                            )\n+                                            tcx.generator_is_async(*last_def_id)\n                                         }\n                                         _ => false,\n                                     })"}, {"sha": "627ed4674b0e9e41344ee60de0bb925f9a72f7f1", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db0dc32970a70bcf622e0854c944753a065cb15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=2db0dc32970a70bcf622e0854c944753a065cb15", "patch": "@@ -430,9 +430,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         let self_ty = obligation.self_ty().skip_binder();\n         if let ty::Generator(did, ..) = self_ty.kind() {\n-            if let Some(rustc_hir::GeneratorKind::Async(_generator_kind)) =\n-                self.tcx().generator_kind(did)\n-            {\n+            if self.tcx().generator_is_async(*did) {\n                 debug!(?self_ty, ?obligation, \"assemble_future_candidates\",);\n \n                 candidates.vec.push(FutureCandidate);"}]}