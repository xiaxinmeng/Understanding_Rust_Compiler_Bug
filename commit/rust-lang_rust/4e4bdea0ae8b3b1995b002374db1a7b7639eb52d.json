{"sha": "4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNGJkZWEwYWU4YjNiMTk5NWIwMDIzNzRkYjFhN2I3NjM5ZWI1MmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-10T10:19:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:32:46Z"}, "message": "propagate sub-obligations better\n\nThe most interesting place is the hinting mechanism; once we start\nhaving subtyping obligations, it's important to see those through.", "tree": {"sha": "8249626ed5f61d07759babe0f2840b103915b517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8249626ed5f61d07759babe0f2840b103915b517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "html_url": "https://github.com/rust-lang/rust/commit/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58609ef879e604d161f4ee6c612d6d127120e289", "url": "https://api.github.com/repos/rust-lang/rust/commits/58609ef879e604d161f4ee6c612d6d127120e289", "html_url": "https://github.com/rust-lang/rust/commit/58609ef879e604d161f4ee6c612d6d127120e289"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "59dbbfe49f0a99848f3a712f02cd7fd808bf7eb5", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "patch": "@@ -1149,19 +1149,16 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         self.probe(|_| {\n             // First check that the self type can be related.\n-            match self.sub_types(false,\n-                                 &ObligationCause::dummy(),\n-                                 self_ty,\n-                                 probe.xform_self_ty) {\n-                Ok(InferOk { obligations, value: () }) => {\n-                    // FIXME(#32730) propagate obligations\n-                    assert!(obligations.is_empty())\n-                }\n+            let sub_obligations = match self.sub_types(false,\n+                                                       &ObligationCause::dummy(),\n+                                                       self_ty,\n+                                                       probe.xform_self_ty) {\n+                Ok(InferOk { obligations, value: () }) => obligations,\n                 Err(_) => {\n                     debug!(\"--> cannot relate self-types\");\n                     return false;\n                 }\n-            }\n+            };\n \n             // If so, impls may carry other conditions (e.g., where\n             // clauses) that must be considered. Make sure that those\n@@ -1200,6 +1197,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // Evaluate those obligations to see if they might possibly hold.\n             let mut all_true = true;\n             for o in obligations.iter()\n+                .chain(sub_obligations.iter())\n                 .chain(norm_obligations.iter())\n                 .chain(ref_obligations.iter()) {\n                 if !selcx.evaluate_obligation(o) {"}, {"sha": "77213b5a7436fddd249b30911adb92ea63f6c7bf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "patch": "@@ -90,7 +90,7 @@ use rustc_back::slice::ref_slice;\n use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::ty::subst::{Kind, Subst, Substs};\n-use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n+use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::{ParamTy, ParameterEnvironment};\n use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::ty::{self, Ty, TyCtxt, Visibility};\n@@ -2552,11 +2552,30 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // No argument expectations are produced if unification fails.\n                 let origin = self.misc(call_span);\n                 let ures = self.sub_types(false, &origin, formal_ret, ret_ty);\n+\n                 // FIXME(#15760) can't use try! here, FromError doesn't default\n                 // to identity so the resulting type is not constrained.\n                 match ures {\n-                    Ok(ok) => self.register_infer_ok_obligations(ok),\n-                    Err(e) => return Err(e),\n+                    Ok(ok) => {\n+                        // Process any obligations locally as much as\n+                        // we can.  We don't care if some things turn\n+                        // out unconstrained or ambiguous, as we're\n+                        // just trying to get hints here.\n+                        let result = self.save_and_restore_obligations_in_snapshot_flag(|_| {\n+                            let mut fulfill = FulfillmentContext::new();\n+                            let ok = ok; // FIXME(#30046)\n+                            for obligation in ok.obligations {\n+                                fulfill.register_predicate_obligation(self, obligation);\n+                            }\n+                            fulfill.select_where_possible(self)\n+                        });\n+\n+                        match result {\n+                            Ok(()) => { }\n+                            Err(_) => return Err(()),\n+                        }\n+                    }\n+                    Err(_) => return Err(()),\n                 }\n \n                 // Record all the argument types, with the substitutions"}]}