{"sha": "1abebf042a0dc8fcbf6c313e20046ca68e3d09ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYmViZjA0MmEwZGM4ZmNiZjZjMzEzZTIwMDQ2Y2E2OGUzZDA5ZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-13T22:51:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:47Z"}, "message": "Convert std::aio to new spawn functions\n\nIssue #1022", "tree": {"sha": "3cb9db5ffdc17890f3039e787e1735dee87ac6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb9db5ffdc17890f3039e787e1735dee87ac6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed", "html_url": "https://github.com/rust-lang/rust/commit/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4956a7cddae26361022899d0e9a64e821422d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4956a7cddae26361022899d0e9a64e821422d5c", "html_url": "https://github.com/rust-lang/rust/commit/a4956a7cddae26361022899d0e9a64e821422d5c"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "618e3f0872651f7f5328a0d7e4d6f196cb7fdac6", "filename": "src/lib/aio.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abebf042a0dc8fcbf6c313e20046ca68e3d09ed/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=1abebf042a0dc8fcbf6c313e20046ca68e3d09ed", "patch": "@@ -49,7 +49,8 @@ fn ip_to_sbuf(ip: net::ip_addr) -> *u8 unsafe {\n     vec::to_ptr(str::bytes(net::format_addr(ip)))\n }\n \n-fn connect_task(ip: net::ip_addr, portnum: int, evt: chan<socket_event>) {\n+fn# connect_task(args: (net::ip_addr, int, chan<socket_event>)) {\n+    let (ip, portnum, evt) = args;\n     let connecter = port();\n     rustrt::aio_connect(ip_to_sbuf(ip), portnum, chan(connecter));\n     let client = recv(connecter);\n@@ -83,7 +84,8 @@ fn new_client(client: client, evt: chan<socket_event>) {\n     log \"close message sent\";\n }\n \n-fn accept_task(client: client, events: chan<server_event>) {\n+fn# accept_task(args: (client, chan<server_event>)) {\n+    let (client, events) = args;\n     log \"accept task was spawned\";\n     let p = port();\n     send(events, pending(chan(p)));\n@@ -92,8 +94,9 @@ fn accept_task(client: client, events: chan<server_event>) {\n     log \"done accepting\";\n }\n \n-fn server_task(ip: net::ip_addr, portnum: int, events: chan<server_event>,\n-               server: chan<server>) {\n+fn# server_task(args: (net::ip_addr, int, chan<server_event>,\n+                       chan<server>)) {\n+    let (ip, portnum, events, server) = args;\n     let accepter = port();\n     send(server, rustrt::aio_serve(ip_to_sbuf(ip), portnum, chan(accepter)));\n \n@@ -104,11 +107,11 @@ fn server_task(ip: net::ip_addr, portnum: int, events: chan<server_event>,\n         if rustrt::aio_is_null_client(client) {\n             log \"client was actually null, returning\";\n             ret;\n-        } else { task::spawn(bind accept_task(client, events)); }\n+        } else { task::spawn2((client, events), accept_task); }\n     }\n }\n \n-fn request_task(c: chan<ctx>) {\n+fn# request_task(c: chan<ctx>) {\n     // Create a port to accept IO requests on\n     let p = port();\n     // Hand of its channel to our spawner\n@@ -126,10 +129,10 @@ fn request_task(c: chan<ctx>) {\n             ret;\n           }\n           connect(remote(ip, portnum), client) {\n-            task::spawn(bind connect_task(ip, portnum, client));\n+            task::spawn2((ip, portnum, client), connect_task);\n           }\n           serve(ip, portnum, events, server) {\n-            task::spawn(bind server_task(ip, portnum, events, server));\n+            task::spawn2((ip, portnum, events, server), server_task);\n           }\n           write(socket, v, status) unsafe {\n             rustrt::aio_writedata(socket, vec::unsafe::to_ptr::<u8>(v),\n@@ -147,14 +150,14 @@ fn request_task(c: chan<ctx>) {\n     }\n }\n \n-fn iotask(c: chan<ctx>) {\n+fn# iotask(c: chan<ctx>) {\n     log \"io task spawned\";\n     // Initialize before accepting requests\n     rustrt::aio_init();\n \n     log \"io task init\";\n     // Spawn our request task\n-    let reqtask = task::spawn_joinable(bind request_task(c));\n+    let reqtask = task::spawn_joinable2(c, request_task);\n \n     log \"uv run task init\";\n     // Enter IO loop. This never returns until aio_stop is called.\n@@ -166,7 +169,7 @@ fn iotask(c: chan<ctx>) {\n \n fn new() -> ctx {\n     let p: port<ctx> = port();\n-    task::spawn(bind iotask(chan(p)));\n+    task::spawn2(chan(p), iotask);\n     ret recv(p);\n }\n "}]}