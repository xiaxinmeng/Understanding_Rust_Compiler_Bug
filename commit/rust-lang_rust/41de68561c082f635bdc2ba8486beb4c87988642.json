{"sha": "41de68561c082f635bdc2ba8486beb4c87988642", "node_id": "C_kwDOAAsO6NoAKDQxZGU2ODU2MWMwODJmNjM1YmRjMmJhODQ4NmJlYjRjODc5ODg2NDI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-23T20:21:41Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-23T20:21:41Z"}, "message": "rustdoc: write directly to buffer in `inner_full_print`\n\nThis change avoids several temporary allocations for every argument.", "tree": {"sha": "14b4d1ccd63a0e03df6396815fd7abcaabcf9eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b4d1ccd63a0e03df6396815fd7abcaabcf9eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41de68561c082f635bdc2ba8486beb4c87988642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41de68561c082f635bdc2ba8486beb4c87988642", "html_url": "https://github.com/rust-lang/rust/commit/41de68561c082f635bdc2ba8486beb4c87988642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41de68561c082f635bdc2ba8486beb4c87988642/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c651ba8a542c7d89b271efbf024a31091c824f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c651ba8a542c7d89b271efbf024a31091c824f4b", "html_url": "https://github.com/rust-lang/rust/commit/c651ba8a542c7d89b271efbf024a31091c824f4b"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "91cc6a713b7af77487d94069cb62d88e84a845bb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/41de68561c082f635bdc2ba8486beb4c87988642/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41de68561c082f635bdc2ba8486beb4c87988642/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=41de68561c082f635bdc2ba8486beb4c87988642", "patch": "@@ -1171,8 +1171,8 @@ impl clean::FnDecl {\n         cx: &Context<'_>,\n     ) -> fmt::Result {\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n-        let mut args = String::new();\n-        let mut args_plain = String::new();\n+        let mut args = Buffer::html();\n+        let mut args_plain = Buffer::new();\n         for (i, input) in self.inputs.values.iter().enumerate() {\n             if i == 0 {\n                 args.push_str(\"<br>\");\n@@ -1185,59 +1185,51 @@ impl clean::FnDecl {\n                         args_plain.push_str(\"self\");\n                     }\n                     clean::SelfBorrowed(Some(ref lt), mtbl) => {\n-                        args.push_str(&format!(\n-                            \"{}{} {}self\",\n-                            amp,\n-                            lt.print(),\n-                            mtbl.print_with_space()\n-                        ));\n-                        args_plain.push_str(&format!(\n-                            \"&{} {}self\",\n-                            lt.print(),\n-                            mtbl.print_with_space()\n-                        ));\n+                        write!(args, \"{}{} {}self\", amp, lt.print(), mtbl.print_with_space());\n+                        write!(args_plain, \"&{} {}self\", lt.print(), mtbl.print_with_space());\n                     }\n                     clean::SelfBorrowed(None, mtbl) => {\n-                        args.push_str(&format!(\"{}{}self\", amp, mtbl.print_with_space()));\n-                        args_plain.push_str(&format!(\"&{}self\", mtbl.print_with_space()));\n+                        write!(args, \"{}{}self\", amp, mtbl.print_with_space());\n+                        write!(args_plain, \"&{}self\", mtbl.print_with_space());\n                     }\n                     clean::SelfExplicit(ref typ) => {\n                         if f.alternate() {\n-                            args.push_str(&format!(\"self: {:#}\", typ.print(cx)));\n+                            write!(args, \"self: {:#}\", typ.print(cx));\n                         } else {\n-                            args.push_str(&format!(\"self: {}\", typ.print(cx)));\n+                            write!(args, \"self: {}\", typ.print(cx));\n                         }\n-                        args_plain.push_str(&format!(\"self: {:#}\", typ.print(cx)));\n+                        write!(args_plain, \"self: {:#}\", typ.print(cx));\n                     }\n                 }\n             } else {\n                 if i > 0 {\n                     args.push_str(\" <br>\");\n-                    args_plain.push(' ');\n+                    args_plain.push_str(\" \");\n                 }\n                 if input.is_const {\n                     args.push_str(\"const \");\n                     args_plain.push_str(\"const \");\n                 }\n                 if !input.name.is_empty() {\n-                    args.push_str(&format!(\"{}: \", input.name));\n-                    args_plain.push_str(&format!(\"{}: \", input.name));\n+                    write!(args, \"{}: \", input.name);\n+                    write!(args_plain, \"{}: \", input.name);\n                 }\n \n                 if f.alternate() {\n-                    args.push_str(&format!(\"{:#}\", input.type_.print(cx)));\n+                    write!(args, \"{:#}\", input.type_.print(cx));\n                 } else {\n-                    args.push_str(&input.type_.print(cx).to_string());\n+                    write!(args, \"{}\", input.type_.print(cx));\n                 }\n-                args_plain.push_str(&format!(\"{:#}\", input.type_.print(cx)));\n+                write!(args_plain, \"{:#}\", input.type_.print(cx));\n             }\n             if i + 1 < self.inputs.values.len() {\n-                args.push(',');\n-                args_plain.push(',');\n+                args.push_str(\",\");\n+                args_plain.push_str(\",\");\n             }\n         }\n \n-        let mut args_plain = format!(\"({})\", args_plain);\n+        let mut args_plain = format!(\"({})\", args_plain.into_inner());\n+        let mut args = args.into_inner();\n \n         if self.c_variadic {\n             args.push_str(\",<br> ...\");"}]}