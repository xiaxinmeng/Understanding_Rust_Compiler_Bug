{"sha": "21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZmYxZDQzYmEyZGQyYTZlOTAxMWIzOTNkOTQ1OTliMDRlZmZjMmY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-19T22:42:20Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-19T22:46:39Z"}, "message": "Unify a bunch of option types into IndentStyle", "tree": {"sha": "560eaf5285e2103f9c65d01193910b85dae6f19c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560eaf5285e2103f9c65d01193910b85dae6f19c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "html_url": "https://github.com/rust-lang/rust/commit/21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c986e895bbe856ffafd6999cc1d4418330e47f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/c986e895bbe856ffafd6999cc1d4418330e47f86", "html_url": "https://github.com/rust-lang/rust/commit/c986e895bbe856ffafd6999cc1d4418330e47f86"}], "stats": {"total": 145, "additions": 63, "deletions": 82}, "files": [{"sha": "3a3ce74bbb672789fd6c4ebcb049e38103650082", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -80,7 +80,7 @@ use Shape;\n use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, first_line_width, last_line_width};\n use expr::rewrite_call;\n-use config::BlockIndentStyle;\n+use config::IndentStyle;\n use macros::convert_try_mac;\n \n use std::iter;\n@@ -134,8 +134,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let first_child_shape = if extend {\n         let mut shape = try_opt!(parent_shape.shrink_left(last_line_width(&parent_rewrite)));\n         match context.config.chain_indent {\n-            BlockIndentStyle::Visual => other_child_shape,\n-            BlockIndentStyle::Tabbed => {\n+            IndentStyle::Visual => other_child_shape,\n+            IndentStyle::Block => {\n                 shape.offset = shape.offset.checked_sub(context.config.tab_spaces).unwrap_or(0);\n                 shape.indent.block_indent += context.config.tab_spaces;\n                 shape\n@@ -294,8 +294,8 @@ fn make_subexpr_list(expr: &ast::Expr, context: &RewriteContext) -> (ast::Expr,\n \n fn chain_indent(context: &RewriteContext, shape: Shape) -> Shape {\n     match context.config.chain_indent {\n-        BlockIndentStyle::Visual => shape.visual_indent(0),\n-        BlockIndentStyle::Tabbed => shape.block_indent(context.config.tab_spaces),\n+        IndentStyle::Visual => shape.visual_indent(0),\n+        IndentStyle::Block => shape.block_indent(context.config.tab_spaces),\n     }\n }\n "}, {"sha": "0ff5a45e57aa8d8d7912d75a5671a0e248112df5", "filename": "src/config.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -61,30 +61,12 @@ configuration_option_enum! { ReturnIndent:\n     WithWhereClause,\n }\n \n-// How to style a struct literal.\n-configuration_option_enum! { StructLitStyle:\n+configuration_option_enum! { IndentStyle:\n     // First line on the same line as the opening brace, all lines aligned with\n     // the first line.\n     Visual,\n     // First line is on a new line and all lines align with block indent.\n     Block,\n-    // FIXME Maybe we should also have an option to align types.\n-}\n-\n-// How to style fn args.\n-configuration_option_enum! { FnArgLayoutStyle:\n-    // First line on the same line as the opening brace, all lines aligned with\n-    // the first line.\n-    Visual,\n-    // Put args on one line if they fit, or start a new line with block indent.\n-    Block,\n-}\n-\n-configuration_option_enum! { BlockIndentStyle:\n-    // One level deeper than parent.\n-    Tabbed,\n-    // Aligned with block open.\n-    Visual,\n }\n \n configuration_option_enum! { Density:\n@@ -357,31 +339,31 @@ create_config! {\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";\n     fn_args_density: Density, Density::Tall, \"Argument density in functions\";\n-    fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual,\n+    fn_args_layout: IndentStyle, IndentStyle::Visual,\n         \"Layout of function arguments and tuple structs\";\n-    fn_arg_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indent on function arguments\";\n-    array_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual, \"Indent on arrays\";\n+    fn_arg_indent: IndentStyle, IndentStyle::Visual, \"Indent on function arguments\";\n+    array_layout: IndentStyle, IndentStyle::Visual, \"Indent on arrays\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     where_style: Style, Style::Default, \"Overall strategy for where clauses\";\n     // Should we at least try to put the where clause on the same line as the rest of the\n     // function decl?\n     where_density: Density, Density::CompressedIfEmpty, \"Density of a where clause\";\n     // Visual will be treated like Tabbed\n-    where_indent: BlockIndentStyle, BlockIndentStyle::Tabbed, \"Indentation of a where clause\";\n+    where_indent: IndentStyle, IndentStyle::Block, \"Indentation of a where clause\";\n     where_layout: ListTactic, ListTactic::Vertical, \"Element layout inside a where clause\";\n-    where_pred_indent: BlockIndentStyle, BlockIndentStyle::Visual,\n+    where_pred_indent: IndentStyle, IndentStyle::Visual,\n         \"Indentation style of a where predicate\";\n     generics_style: Style, Style::Default, \"Overall strategy for generics\";\n-    generics_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indentation of generics\";\n-    struct_lit_style: StructLitStyle, StructLitStyle::Block, \"Style of struct definition\";\n+    generics_indent: IndentStyle, IndentStyle::Visual, \"Indentation of generics\";\n+    struct_lit_style: IndentStyle, IndentStyle::Block, \"Style of struct definition\";\n     struct_lit_multiline_style: MultilineStyle, MultilineStyle::PreferSingle,\n         \"Multiline style on literal structs\";\n     report_todo: ReportTactic, ReportTactic::Never,\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never,\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n-    chain_indent: BlockIndentStyle, BlockIndentStyle::Tabbed, \"Indentation of chain\";\n+    chain_indent: IndentStyle, IndentStyle::Block, \"Indentation of chain\";\n     chain_one_line_max: usize, 4, \"Maximum number of elements in a chain to fit on a single line\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imported_names: bool, false,"}, {"sha": "9e1237bd7c28f16327f1d2f063afdf73a553fe41", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -24,7 +24,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr};\n use visitor::FmtVisitor;\n-use config::{Config, StructLitStyle, MultilineStyle, ControlBraceStyle, FnArgLayoutStyle};\n+use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::{rewrite_path, PathContext};\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -331,8 +331,8 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     };\n \n     let nested_shape = match context.config.array_layout {\n-        FnArgLayoutStyle::Block => shape.block().block_indent(context.config.tab_spaces),\n-        FnArgLayoutStyle::Visual => {\n+        IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces),\n+        IndentStyle::Visual => {\n             try_opt!(shape.visual_indent(bracket_size).sub_width(bracket_size * 2))\n         }\n     };\n@@ -361,14 +361,14 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                                            |acc, x| acc.and_then(|y| x.map(|x| x || y))));\n \n     let tactic = match context.config.array_layout {\n-        FnArgLayoutStyle::Block => {\n+        IndentStyle::Block => {\n             // TODO wrong shape in one-line case\n             match shape.width.checked_sub(2 * bracket_size) {\n                 Some(width) => definitive_tactic(&items, ListTactic::HorizontalVertical, width),\n                 None => DefinitiveListTactic::Vertical,\n             }\n         }\n-        FnArgLayoutStyle::Visual => {\n+        IndentStyle::Visual => {\n             if has_long_item || items.iter().any(ListItem::is_multiline) {\n                 definitive_tactic(&items, ListTactic::HorizontalVertical, nested_shape.width)\n             } else {\n@@ -387,7 +387,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     };\n     let list_str = try_opt!(write_list(&items, &fmt));\n \n-    let result = if context.config.array_layout == FnArgLayoutStyle::Visual ||\n+    let result = if context.config.array_layout == IndentStyle::Visual ||\n                     tactic != DefinitiveListTactic::Vertical {\n         if context.config.spaces_within_square_brackets && list_str.len() > 0 {\n             format!(\"[ {} ]\", list_str)\n@@ -1734,10 +1734,10 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     // Foo { a: Foo } - indent is +3, width is -5.\n     let h_shape = shape.sub_width(path_str.len() + 5);\n     let v_shape = match context.config.struct_lit_style {\n-        StructLitStyle::Visual => {\n+        IndentStyle::Visual => {\n             try_opt!(try_opt!(shape.shrink_left(path_str.len() + 3)).sub_width(2))\n         }\n-        StructLitStyle::Block => {\n+        IndentStyle::Block => {\n             let shape = shape.block_indent(context.config.tab_spaces);\n             Shape {\n                 width: try_opt!(context.config.max_width.checked_sub(shape.indent.width())),\n@@ -1784,7 +1784,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n \n     let tactic = if let Some(h_shape) = h_shape {\n         let mut prelim_tactic = match (context.config.struct_lit_style, fields.len()) {\n-            (StructLitStyle::Visual, 1) => ListTactic::HorizontalVertical,\n+            (IndentStyle::Visual, 1) => ListTactic::HorizontalVertical,\n             _ => context.config.struct_lit_multiline_style.to_list_tactic(),\n         };\n \n@@ -1802,7 +1802,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n         _ => v_shape,\n     };\n \n-    let ends_with_newline = context.config.struct_lit_style != StructLitStyle::Visual &&\n+    let ends_with_newline = context.config.struct_lit_style != IndentStyle::Visual &&\n                             tactic == DefinitiveListTactic::Vertical;\n \n     let fmt = ListFormatting {\n@@ -1825,7 +1825,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     }\n \n     // One liner or visual indent.\n-    if context.config.struct_lit_style == StructLitStyle::Visual ||\n+    if context.config.struct_lit_style == IndentStyle::Visual ||\n        (context.config.struct_lit_multiline_style != MultilineStyle::ForceMulti &&\n         !fields_str.contains('\\n') &&\n         fields_str.len() <= h_shape.map(|s| s.width).unwrap_or(0)) {"}, {"sha": "70063af269484443e8d07386ca18f86f7c81f094", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -21,7 +21,7 @@ use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annota\n use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, FnArgLayoutStyle, Style};\n+use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style};\n use itertools::Itertools;\n \n use syntax::{ast, abi, codemap, ptr, symbol};\n@@ -779,9 +779,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let where_density =\n             if (context.config.where_density == Density::Compressed &&\n-                (!result.contains('\\n') ||\n-                 context.config.fn_args_layout == FnArgLayoutStyle::Block)) ||\n-               (context.config.fn_args_layout == FnArgLayoutStyle::Block && result.is_empty()) ||\n+                (!result.contains('\\n') || context.config.fn_args_layout == IndentStyle::Block)) ||\n+               (context.config.fn_args_layout == IndentStyle::Block && result.is_empty()) ||\n                (context.config.where_density == Density::CompressedIfEmpty && !has_body &&\n                 !result.contains('\\n')) {\n                 Density::Compressed\n@@ -1020,11 +1019,11 @@ fn format_tuple_struct(context: &RewriteContext,\n     };\n \n     let (tactic, item_indent) = match context.config.fn_args_layout {\n-        FnArgLayoutStyle::Visual => {\n+        IndentStyle::Visual => {\n             // 1 = `(`\n             (ListTactic::HorizontalVertical, offset.block_only() + result.len() + 1)\n         }\n-        FnArgLayoutStyle::Block => {\n+        IndentStyle::Block => {\n             (ListTactic::HorizontalVertical, offset.block_only().block_indent(&context.config))\n         }\n     };\n@@ -1056,7 +1055,7 @@ fn format_tuple_struct(context: &RewriteContext,\n                                     context.config,\n                                     tactic));\n \n-    if context.config.fn_args_layout == FnArgLayoutStyle::Visual || !body.contains('\\n') {\n+    if context.config.fn_args_layout == IndentStyle::Visual || !body.contains('\\n') {\n         result.push('(');\n         if context.config.spaces_within_parens && body.len() > 0 {\n             result.push(' ');\n@@ -1512,7 +1511,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let (mut one_line_budget, mut multi_line_budget, mut arg_indent) =\n         try_opt!(compute_budgets_for_args(context, &result, indent, ret_str_len, newline_brace));\n \n-    if context.config.fn_args_layout == FnArgLayoutStyle::Block {\n+    if context.config.fn_args_layout == IndentStyle::Block {\n         arg_indent = indent.block_indent(context.config);\n         multi_line_budget = context.config.max_width - arg_indent.width();\n     }\n@@ -1566,7 +1565,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let multi_line_arg_str = arg_str.contains('\\n');\n \n     let put_args_in_block = match context.config.fn_args_layout {\n-        FnArgLayoutStyle::Block => multi_line_arg_str || generics_str.contains('\\n'),\n+        IndentStyle::Block => multi_line_arg_str || generics_str.contains('\\n'),\n         _ => false,\n     } && !fd.inputs.is_empty();\n \n@@ -1590,7 +1589,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     if !ret_str.is_empty() {\n         let ret_should_indent = match context.config.fn_args_layout {\n             // If our args are block layout then we surely must have space.\n-            FnArgLayoutStyle::Block if put_args_in_block => false,\n+            IndentStyle::Block if put_args_in_block => false,\n             _ => {\n                 // If we've already gone multi-line, or the return type would push over the max\n                 // width, then put the return type on a new line. With the +1 for the signature\n@@ -1802,8 +1801,8 @@ fn rewrite_args(context: &RewriteContext,\n     }\n \n     let indent = match context.config.fn_arg_indent {\n-        BlockIndentStyle::Tabbed => indent.block_indent(context.config),\n-        BlockIndentStyle::Visual => arg_indent,\n+        IndentStyle::Block => indent.block_indent(context.config),\n+        IndentStyle::Visual => arg_indent,\n     };\n \n     let tactic = definitive_tactic(&arg_items,\n@@ -1817,7 +1816,7 @@ fn rewrite_args(context: &RewriteContext,\n     debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n \n     let (trailing_comma, end_with_newline) = match context.config.fn_args_layout {\n-        FnArgLayoutStyle::Block => (SeparatorTactic::Vertical, true),\n+        IndentStyle::Block => (SeparatorTactic::Vertical, true),\n         _ => (SeparatorTactic::Never, false),\n     };\n \n@@ -1909,9 +1908,9 @@ fn rewrite_generics(context: &RewriteContext,\n     }\n \n     let offset = match context.config.generics_indent {\n-        BlockIndentStyle::Tabbed => shape.indent.block_indent(context.config),\n+        IndentStyle::Block => shape.indent.block_indent(context.config),\n         // 1 = <\n-        BlockIndentStyle::Visual => generics_offset + 1,\n+        IndentStyle::Visual => generics_offset + 1,\n     };\n \n     let h_budget = try_opt!(shape.width.checked_sub(generics_offset.width() + 2));\n@@ -1945,7 +1944,7 @@ fn rewrite_generics(context: &RewriteContext,\n     let list_str =\n         try_opt!(format_item_list(items, Shape::legacy(h_budget, offset), context.config));\n \n-    let result = if context.config.generics_indent != BlockIndentStyle::Visual &&\n+    let result = if context.config.generics_indent != IndentStyle::Visual &&\n                     list_str.contains('\\n') {\n         format!(\"<\\n{}{}\\n{}>\",\n                 offset.to_string(context.config),\n@@ -2074,9 +2073,9 @@ fn rewrite_where_clause(context: &RewriteContext,\n     let extra_indent = Indent::new(context.config.tab_spaces, 0);\n \n     let offset = match context.config.where_pred_indent {\n-        BlockIndentStyle::Tabbed => shape.indent + extra_indent.block_indent(context.config),\n+        IndentStyle::Block => shape.indent + extra_indent.block_indent(context.config),\n         // 6 = \"where \".len()\n-        BlockIndentStyle::Visual => shape.indent + extra_indent + 6,\n+        IndentStyle::Visual => shape.indent + extra_indent + 6,\n     };\n     // FIXME: if where_pred_indent != Visual, then the budgets below might\n     // be out by a char or two."}, {"sha": "25b2dcf7383dce10f0e9170272ea6fb333715e56", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -9,7 +9,7 @@ fn_args_density = \"Tall\"\n fn_args_layout = \"Visual\"\n fn_arg_indent = \"Visual\"\n where_density = \"Tall\"\n-where_indent = \"Tabbed\"\n+where_indent = \"Block\"\n where_layout = \"Vertical\"\n where_pred_indent = \"Visual\"\n generics_indent = \"Visual\""}, {"sha": "7a5afdfc9eff8504f284e39fc7c8e25bdbef37ce", "filename": "tests/source/chains-indent-tabbed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Fchains-indent-tabbed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Fchains-indent-tabbed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-indent-tabbed.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-chain_indent: Tabbed\n+// rustfmt-chain_indent: Block\n \n fn test() {\n     let x = my_long_function().my_even_longer_function().my_nested_function().some_random_name().another_function().do_it();"}, {"sha": "588a4f25c7b6b0b90b8bd693877119ce1bf9fe56", "filename": "tests/source/fn-custom-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-2.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,6 +1,6 @@\n-// rustfmt-fn_arg_indent: Tabbed\n-// rustfmt-generics_indent: Tabbed\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n+// rustfmt-generics_indent: Block\n+// rustfmt-where_indent: Block\n // rustfmt-where_layout: Mixed\n // Test different indents.\n "}, {"sha": "e9deff6c327c801b50f7fd431895f967e250ea6e", "filename": "tests/source/fn-custom-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-3.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n-// rustfmt-fn_arg_indent: Tabbed\n-// rustfmt-generics_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n+// rustfmt-generics_indent: Block\n // rustfmt-where_layout: HorizontalVertical\n // Test different indents.\n "}, {"sha": "009ceb87c2b7e76f51f2aeb209fa817864ac50fb", "filename": "tests/source/fn-custom-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-4.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-where_pred_indent: Tabbed\n+// rustfmt-where_pred_indent: Block\n // rustfmt-where_density: Compressed\n // Test different indents.\n "}, {"sha": "fbac1bb18072e4f7607c1789d6afebc179489653", "filename": "tests/source/fn-custom-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-6.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-fn_args_layout: Block\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-where_indent: Block\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents.\n "}, {"sha": "e5072b178f2fd9c73cedfa71677b573a93b95023", "filename": "tests/source/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-7.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-normalize_comments: true\n // rustfmt-fn_args_layout: Block\n // rustfmt-fn_args_density: Vertical\n-// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n // rustfmt-fn_brace_style: AlwaysNextLine\n \n // Case with only one variable."}, {"sha": "5c4d51c0387b5770795adb0f64e71cf11df0b796", "filename": "tests/source/fn-custom-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Fsource%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-8.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-fn_args_layout: Block\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-where_indent: Block\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents.\n "}, {"sha": "8222b1c6ac74c46bf96aa1e4c30c8eb92055ccfe", "filename": "tests/target/chains-indent-tabbed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Fchains-indent-tabbed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Fchains-indent-tabbed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-indent-tabbed.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-chain_indent: Tabbed\n+// rustfmt-chain_indent: Block\n \n fn test() {\n     let x = my_long_function()"}, {"sha": "3740cf2a49062640d22c70e63b8e90c97e3bc2cf", "filename": "tests/target/fn-custom-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,6 +1,6 @@\n-// rustfmt-fn_arg_indent: Tabbed\n-// rustfmt-generics_indent: Tabbed\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n+// rustfmt-generics_indent: Block\n+// rustfmt-where_indent: Block\n // rustfmt-where_layout: Mixed\n // Test different indents.\n "}, {"sha": "24a8db358e723dad910c8ebbb6a5acd6fc46b59b", "filename": "tests/target/fn-custom-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n-// rustfmt-fn_arg_indent: Tabbed\n-// rustfmt-generics_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n+// rustfmt-generics_indent: Block\n // rustfmt-where_layout: HorizontalVertical\n // Test different indents.\n "}, {"sha": "d2ba91b7632ca3b6675250004030c8f9894ef916", "filename": "tests/target/fn-custom-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-4.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-where_pred_indent: Tabbed\n+// rustfmt-where_pred_indent: Block\n // rustfmt-where_density: Compressed\n // Test different indents.\n "}, {"sha": "af58492497cd0eacecdfcd2844dbbb32899a3d70", "filename": "tests/target/fn-custom-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-6.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-fn_args_layout: Block\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-where_indent: Block\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents.\n "}, {"sha": "f29a6b933ca47de3edb4e97462ecaca879a2c24d", "filename": "tests/target/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-7.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-normalize_comments: true\n // rustfmt-fn_args_layout: Block\n // rustfmt-fn_args_density: Vertical\n-// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-fn_arg_indent: Block\n // rustfmt-fn_brace_style: AlwaysNextLine\n \n // Case with only one variable."}, {"sha": "d029982728f1a0a1a28c8fc04d82a474b25e728d", "filename": "tests/target/fn-custom-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ff1d43ba2dd2a6e9011b393d94599b04effc2f/tests%2Ftarget%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-8.rs?ref=21ff1d43ba2dd2a6e9011b393d94599b04effc2f", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-fn_args_layout: Block\n-// rustfmt-where_indent: Tabbed\n+// rustfmt-where_indent: Block\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents.\n "}]}