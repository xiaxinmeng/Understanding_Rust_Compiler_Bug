{"sha": "b1a0abe404740e1425a8586c7519114578d20372", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYTBhYmU0MDQ3NDBlMTQyNWE4NTg2Yzc1MTkxMTQ1NzhkMjAzNzI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-25T04:57:50Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-25T04:57:50Z"}, "message": "Don't panic", "tree": {"sha": "e32921170fdd93567892ba000bd2f635e7b98bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32921170fdd93567892ba000bd2f635e7b98bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1a0abe404740e1425a8586c7519114578d20372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a0abe404740e1425a8586c7519114578d20372", "html_url": "https://github.com/rust-lang/rust/commit/b1a0abe404740e1425a8586c7519114578d20372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1a0abe404740e1425a8586c7519114578d20372/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "746991572fac33ba29c4d1a83574d3b7c2776998", "url": "https://api.github.com/repos/rust-lang/rust/commits/746991572fac33ba29c4d1a83574d3b7c2776998", "html_url": "https://github.com/rust-lang/rust/commit/746991572fac33ba29c4d1a83574d3b7c2776998"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "ec118052fbc2aff229ddfb496b1d232b4a1869c0", "filename": "src/matches.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1a0abe404740e1425a8586c7519114578d20372/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a0abe404740e1425a8586c7519114578d20372/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=b1a0abe404740e1425a8586c7519114578d20372", "patch": "@@ -2,6 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::ty;\n use syntax::ast::Lit_::LitBool;\n+use syntax::codemap::Span;\n \n use utils::{snippet, span_lint, span_help_and_lint, in_external_macro, expr_block};\n \n@@ -113,12 +114,12 @@ impl LateLintPass for MatchPass {\n             // check preconditions for MATCH_REF_PATS\n             if has_only_ref_pats(arms) {\n                 if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {\n-                    let template = match_template(source, \"\", &snippet(cx, inner.span, \"..\"));\n+                    let template = match_template(cx, expr.span, source, \"\", inner);\n                     span_lint(cx, MATCH_REF_PATS, expr.span, &format!(\n                         \"you don't need to add `&` to both the expression \\\n                          and the patterns: use `{}`\", template));\n                 } else {\n-                    let template = match_template(source, \"*\", &snippet(cx, ex.span, \"..\"));\n+                    let template = match_template(cx, expr.span, source, \"*\", ex);\n                     span_lint(cx, MATCH_REF_PATS, expr.span, &format!(\n                         \"instead of prefixing all patterns with `&`, you can dereference the \\\n                          expression: `{}`\", template));\n@@ -146,19 +147,24 @@ fn has_only_ref_pats(arms: &[Arm]) -> bool {\n     mapped.map_or(false, |v| v.iter().any(|el| *el))\n }\n \n-fn match_template(source: MatchSource, op: &str, expr: &str) -> String {\n+fn match_template(cx: &LateContext,\n+                  span: Span,\n+                  source: MatchSource,\n+                  op: &str,\n+                  expr: &Expr) -> String {\n+    let expr_snippet = snippet(cx, expr.span, \"..\");\n     match source {\n         MatchSource::Normal => {\n-            format!(\"match {}{} {{ ...\", op, expr)\n+            format!(\"match {}{} {{ ...\", op, expr_snippet)\n         }\n         MatchSource::IfLetDesugar { .. } => {\n-            format!(\"if let ... = {}{} {{\", op, expr)\n+            format!(\"if let ... = {}{} {{\", op, expr_snippet)\n         }\n         MatchSource::WhileLetDesugar => {\n-            format!(\"while let ... = {}{} {{\", op, expr)\n+            format!(\"while let ... = {}{} {{\", op, expr_snippet)\n         }\n         MatchSource::ForLoopDesugar => {\n-            panic!(\"for loop desugared to match with &-patterns!\")\n+            cx.sess().span_bug(span, \"for loop desugared to match with &-patterns!\")\n         }\n     }\n }"}]}