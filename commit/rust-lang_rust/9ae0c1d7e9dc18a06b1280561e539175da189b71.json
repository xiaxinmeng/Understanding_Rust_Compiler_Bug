{"sha": "9ae0c1d7e9dc18a06b1280561e539175da189b71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZTBjMWQ3ZTlkYzE4YTA2YjEyODA1NjFlNTM5MTc1ZGExODliNzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T17:47:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-29T17:19:59Z"}, "message": "Make error apply only to impl/trait mismatch", "tree": {"sha": "7f526d8d658b024970a96d2dd745b3ce0c87e941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f526d8d658b024970a96d2dd745b3ce0c87e941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae0c1d7e9dc18a06b1280561e539175da189b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae0c1d7e9dc18a06b1280561e539175da189b71", "html_url": "https://github.com/rust-lang/rust/commit/9ae0c1d7e9dc18a06b1280561e539175da189b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae0c1d7e9dc18a06b1280561e539175da189b71/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6998085c030d657d7c8698585409c0fe878d5e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6998085c030d657d7c8698585409c0fe878d5e7a", "html_url": "https://github.com/rust-lang/rust/commit/6998085c030d657d7c8698585409c0fe878d5e7a"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "0194300c507214356bbf9203e3f15176d29796a4", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=9ae0c1d7e9dc18a06b1280561e539175da189b71", "patch": "@@ -26,21 +26,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         if let (\n                             ValuePairs::Types(sub_expected_found),\n                             ValuePairs::Types(sup_expected_found),\n-                        ) = (&sub_trace.values, &sup_trace.values) {\n+                            CompareImplMethodObligation { trait_item_def_id, .. },\n+                        ) = (&sub_trace.values, &sup_trace.values, &sub_trace.cause.code) {\n                             if sup_expected_found == sub_expected_found {\n-                                let sp = var_origin.span();\n-                                let impl_sp = if let CompareImplMethodObligation {\n-                                    trait_item_def_id, ..\n-                                } = &sub_trace.cause.code {\n-                                    Some(self.tcx().def_span(*trait_item_def_id))\n-                                } else {\n-                                    None\n-                                };\n                                 self.emit_err(\n-                                    sp,\n+                                    var_origin.span(),\n                                     sub_expected_found.expected,\n                                     sub_expected_found.found,\n-                                    impl_sp,\n+                                    self.tcx().def_span(*trait_item_def_id),\n                                 );\n                                 return Some(ErrorReported);\n                             }\n@@ -53,16 +46,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Option<Span>) {\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Span) {\n         let mut err = self.tcx().sess.struct_span_err(\n             sp,\n             \"`impl` item signature doesn't match `trait` item signature\",\n         );\n         err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n         err.span_label(sp, &format!(\"found {:?}\", found));\n-        if let Some(span) = impl_sp {\n-            err.span_label(span, &format!(\"expected {:?}\", expected));\n-        }\n+        err.span_label(impl_sp, &format!(\"expected {:?}\", expected));\n         err.emit();\n     }\n }"}, {"sha": "b3cb83f94e053c82dd8c4eb97bff0dbe74807ff2", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=9ae0c1d7e9dc18a06b1280561e539175da189b71", "patch": "@@ -52,6 +52,6 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR `impl` item signature doesn't match `trait` item signature\n+//~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n pub fn main() { }"}, {"sha": "609a40163a30c38fcb3e8ccc7efabe9ab064f115", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae0c1d7e9dc18a06b1280561e539175da189b71/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=9ae0c1d7e9dc18a06b1280561e539175da189b71", "patch": "@@ -89,16 +89,27 @@ note: Use same sequence of generic type and region parameters that is on the str\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `impl` item signature doesn't match `trait` item signature\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n   --> $DIR/reject-specialized-drops-8142.rs:54:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found W<'_, '_>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 17:10...\n+  --> $DIR/reject-specialized-drops-8142.rs:17:10\n+   |\n+LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n+   |          ^^^\n+note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 17:15...\n+  --> $DIR/reject-specialized-drops-8142.rs:17:15\n    |\n-   = note: expected `W<'l1, 'l2>`\n-              found `W<'_, '_>`\n+LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n+   |               ^^^\n+   = note: ...so that the types are compatible:\n+           expected W<'l1, 'l2>\n+              found W<'_, '_>\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0308, E0366, E0367.\n+Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`."}]}