{"sha": "05a35a2e5c0b342cd48ce91c244d4570aa30e658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTM1YTJlNWMwYjM0MmNkNDhjZTkxYzI0NGQ0NTcwYWEzMGU2NTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-13T20:40:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-14T22:59:32Z"}, "message": "Remove two comm-oriented benchmarks that have pipe equivs", "tree": {"sha": "c1860a3a0d0bbe8bbe630875ee5dfac5743d60db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1860a3a0d0bbe8bbe630875ee5dfac5743d60db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a35a2e5c0b342cd48ce91c244d4570aa30e658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a35a2e5c0b342cd48ce91c244d4570aa30e658", "html_url": "https://github.com/rust-lang/rust/commit/05a35a2e5c0b342cd48ce91c244d4570aa30e658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a35a2e5c0b342cd48ce91c244d4570aa30e658/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a6524d003e89cf04e2aa1b3fd244830596eba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a6524d003e89cf04e2aa1b3fd244830596eba2", "html_url": "https://github.com/rust-lang/rust/commit/01a6524d003e89cf04e2aa1b3fd244830596eba2"}], "stats": {"total": 83, "additions": 0, "deletions": 83}, "files": [{"sha": "390202f1af79e07f6dbeac84e76e471f00d51710", "filename": "src/test/bench/msgsend.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/01a6524d003e89cf04e2aa1b3fd244830596eba2/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a6524d003e89cf04e2aa1b3fd244830596eba2/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=01a6524d003e89cf04e2aa1b3fd244830596eba2", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// A port of the simplistic benchmark from\n-//\n-//    http://github.com/PaulKeeble/ScalaVErlangAgents\n-//\n-// I *think* it's the same, more or less.\n-\n-extern mod std;\n-use io::Writer;\n-use io::WriterUtil;\n-\n-enum request {\n-    get_count,\n-    bytes(uint),\n-    stop\n-}\n-\n-fn server(requests: comm::Port<request>, responses: comm::Chan<uint>) {\n-    let mut count = 0u;\n-    let mut done = false;\n-    while !done {\n-        match comm::recv(requests) {\n-          get_count => { comm::send(responses, copy count); }\n-          bytes(b) => { count += b; }\n-          stop => { done = true; }\n-        }\n-    }\n-    comm::send(responses, count);\n-}\n-\n-fn run(args: ~[~str]) {\n-    let (from_child, to_child) = do task::spawn_conversation |po, ch| {\n-        server(po, ch);\n-    };\n-    let size = uint::from_str(args[1]).get();\n-    let workers = uint::from_str(args[2]).get();\n-    let start = std::time::precise_time_s();\n-    let mut worker_results = ~[];\n-    for uint::range(0, workers) |_i| {\n-        do task::task().future_result(|+r| {\n-            worker_results.push(move r);\n-        }).spawn {\n-            for uint::range(0, size / workers) |_i| {\n-                comm::send(to_child, bytes(100));\n-            }\n-        };\n-    }\n-    for vec::each(worker_results) |r| {\n-        r.recv();\n-    }\n-    comm::send(to_child, stop);\n-    let result = comm::recv(from_child);\n-    let end = std::time::precise_time_s();\n-    let elapsed = end - start;\n-    io::stdout().write_str(fmt!(\"Count is %?\\n\", result));\n-    io::stdout().write_str(fmt!(\"Test took %? seconds\\n\", elapsed));\n-    let thruput = ((size / workers * workers) as float) / (elapsed as float);\n-    io::stdout().write_str(fmt!(\"Throughput=%f per sec\\n\", thruput));\n-}\n-\n-fn main() {\n-    let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"1000000\", ~\"10000\"]\n-    } else if args.len() <= 1u {\n-        ~[~\"\", ~\"10000\", ~\"4\"]\n-    } else {\n-        args\n-    };\n-\n-    debug!(\"%?\", args);\n-    run(args);\n-}\n-"}]}