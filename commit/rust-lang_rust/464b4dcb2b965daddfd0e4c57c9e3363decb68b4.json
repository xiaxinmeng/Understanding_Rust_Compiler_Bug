{"sha": "464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NGI0ZGNiMmI5NjVkYWRkZmQwZTRjNTdjOWUzMzYzZGVjYjY4YjQ=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-12-28T23:11:13Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-01-03T21:27:06Z"}, "message": "Unify tests\n\nImplement compile tests as variants of existing tests", "tree": {"sha": "46dda99ec8326d8792a06588c549a278eb78a1cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46dda99ec8326d8792a06588c549a278eb78a1cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAlwufioACgkQqHvO5SBc\n5ImgnwgAwZqU6Bsyh5Qv2QIeOwwzYBxFVdJcrpdOjZC2P4Myz8c0Sg60o4/KQ+oV\nJuaCfBE7klagBsa3wdPtoQRA+Kw2BrvvoGCZ5YxpJZiZ8Sk1NQRYI1UJPTY02RMz\nAmzJk1gVz2Kb0xnfUs8tFBymgws3sOdHm6lg0ICej652yztD0aw7lFUYICL3QqWO\nRk3rKrFHEqTmteEksTuXR7Iw7QsOtnc1Ysdc/kdyQcMAGiVCLh7cCUllwxAXPbWa\nZK0DJ4rM8Z/LeuEW8KlpmdL9vQ/FmpgsEJyThrQega/W1a/hGdnIZz+AD+zFrKLF\nutID7BA620cEjf1MX9gj+zpEo2a03Q==\n=GF+m\n-----END PGP SIGNATURE-----", "payload": "tree 46dda99ec8326d8792a06588c549a278eb78a1cd\nparent 2888d5631c64216c472933fea51371e6c563818f\nauthor Georg Semmler <georg_semmler_05@web.de> 1546038673 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1546550826 +0100\n\nUnify tests\n\nImplement compile tests as variants of existing tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "html_url": "https://github.com/rust-lang/rust/commit/464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2888d5631c64216c472933fea51371e6c563818f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2888d5631c64216c472933fea51371e6c563818f", "html_url": "https://github.com/rust-lang/rust/commit/2888d5631c64216c472933fea51371e6c563818f"}], "stats": {"total": 3123, "additions": 400, "deletions": 2723}, "files": [{"sha": "68c924ee274034be7214d18649a2402632ef9a01", "filename": "src/test/ui/coherence/coherence-all-remote.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,9 +1,13 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n impl<T> Remote1<T> for isize { }\n-//~^ ERROR E0210\n+//[old]~^ ERROR E0210\n+//[re]~^^ ERROR E0210\n \n fn main() { }"}, {"sha": "24106b4b348d4f149a08deccb6236998689defb8", "filename": "src/test/ui/coherence/coherence-bigint-param.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;\n \n impl<T> Remote1<BigInt> for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0210\n \n fn main() { }"}, {"sha": "098a13e54bfb4a199eac6219cd79c87151e0beb9", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -21,7 +25,10 @@ impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+impl<T:Odd> MyTrait for T {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n+\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "5b76fc0174b3031e821f32db370ba98a10c86d41", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -17,7 +21,9 @@ impl<T:Even> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+impl<T:Odd> MyTrait for T {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { 0 }\n }\n "}, {"sha": "b0aaf57e2a9421932c6c5864e43347d5722849f8", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,4 +1,7 @@\n // aux-build:go_trait.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate go_trait;\n \n@@ -12,7 +15,9 @@ impl Go for MyThingy {\n     fn go(&self, arg: isize) { }\n }\n \n-impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+impl GoMut for MyThingy {\n+//[old]~^ ERROR conflicting implementations\n+//[re]~^^ ERROR E0119\n     fn go_mut(&mut self, arg: isize) { }\n }\n "}, {"sha": "9192d123514ab191b3f94b6b2d6d4db7eed75c4d", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -19,7 +23,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+impl MyTrait<MyType> for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { (*self).clone() }\n }\n "}, {"sha": "51cb10e6185565177f34c329dabc76605f023d1b", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,6 +1,10 @@\n // Test that a blank impl for all T:PartialEq conflicts with an impl for some\n // specific T when T:PartialEq.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait OtherTrait {\n     fn noop(&self);\n }\n@@ -17,7 +21,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType { //~ ERROR E0119\n+impl MyTrait for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "3ecb613188ae45b3f0178d2e835c758e2def6cde", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -16,7 +20,9 @@ struct MyType {\n     dummy: usize\n }\n \n-impl MyTrait for MyType { //~ ERROR E0119\n+impl MyTrait for MyType {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "e05fecb11ed4ba95d658acddf787f5d059809ab3", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -8,11 +11,13 @@ struct TestType<T>(::std::marker::PhantomData<T>);\n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n \n impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[re]~^^ ERROR E0119\n \n unsafe impl<T:'static> Send for TestType<T> {}\n \n impl !Send for TestType<i32> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Send`\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "2a3e57b1ce25b40dffd56317ef40d5cd1bd303bd", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:16:1\n+  --> $DIR/coherence-cow.rs:28:1\n    |\n-LL | impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0210\n+LL | impl<T> Remote for Pair<T,Cover<T>> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter"}, {"sha": "0512baef136699e04419d658990394ed878791c4", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,7 +1,7 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:19:1\n+  --> $DIR/coherence-cow.rs:33:1\n    |\n-LL | impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0210\n+LL | impl<T> Remote for Pair<Cover<T>,T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter"}, {"sha": "1a95d82a03acf0da9d285194b70f932effb2ec60", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:22:1\n+  --> $DIR/coherence-cow.rs:38:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type"}, {"sha": "956b073414861aa9763ec5d1a49976176bceb603", "filename": "src/test/ui/coherence/coherence-cow.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,4 +1,6 @@\n-// revisions: a b c\n+// revisions: a b c re_a re_b re_c\n+\n+#![cfg_attr(any(re_a, re_b, re_c), feature(re_rebalance_coherence))]\n \n // aux-build:coherence_lib.rs\n \n@@ -12,14 +14,19 @@ use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);\n \n-#[cfg(a)]\n-impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0210\n+#[cfg(any(a, re_a))]\n+impl<T> Remote for Pair<T,Cover<T>> { }\n+//[a]~^ ERROR E0210\n+//[re_a]~^^ ERROR E0117\n \n-#[cfg(b)]\n-impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0210\n+#[cfg(any(b, re_b))]\n+impl<T> Remote for Pair<Cover<T>,T> { }\n+//[b]~^ ERROR E0210\n+//[re_b]~^^ ERROR E0117\n \n-#[cfg(c)]\n+#[cfg(any(c, re_c))]\n impl<T,U> Remote for Pair<Cover<T>,U> { }\n //[c]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re_c]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "9643ab643dfe5321cbec24de7c30a04316d42b0a", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,12 +2,18 @@\n // generalizes the one upstream\n \n // aux-build:trait_impl_conflict.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {\n-    //~^ ERROR type parameter `A` must be used as the type parameter for some local type\n-    //~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n+    //[old]~^ ERROR type parameter `A` must be used as the type parameter for some local type\n+    //[old]~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n+    //[re]~^^^ ERROR E0119\n+    //[re]~| ERROR E0210\n }\n \n fn main() {"}, {"sha": "606b4947b5f09c70e886f7dcb47518f06d06af57", "filename": "src/test/ui/coherence/coherence-default-trait-impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,15 +1,20 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n auto trait MySafeTrait {}\n \n struct Foo;\n \n unsafe impl MySafeTrait for Foo {}\n-//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+//[old]~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+//[re]~^^ ERROR E0199\n \n unsafe auto trait MyUnsafeTrait {}\n \n impl MyUnsafeTrait for Foo {}\n-//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+//[old]~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+//[re]~^^ ERROR E0200\n \n fn main() {}"}, {"sha": "60b88fb80e44f2677e7c5daf0e389aba42b8c13c", "filename": "src/test/ui/coherence/coherence-error-suppression.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-error-suppression.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,12 +1,18 @@\n // check that error types in coherence do not cause error cascades.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo {}\n \n impl Foo for i8 {}\n impl Foo for i16 {}\n impl Foo for i32 {}\n impl Foo for i64 {}\n-impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+impl Foo for DoesNotExist {}\n+//[old]~^ ERROR cannot find type `DoesNotExist` in this scope\n+//[re]~^^ ERROR E0412\n impl Foo for u8 {}\n impl Foo for u16 {}\n impl Foo for u32 {}"}, {"sha": "803e8fc6bca64c558a1de5cd95a6f01f8431ef8b", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,9 +1,15 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n // If the trait is not object-safe, we give a more tailored message\n // because we're such schnuckels:\n trait NotObjectSafe { fn eq(&self, other: Self); }\n-impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+impl NotObjectSafe for NotObjectSafe { }\n+//[old]~^ ERROR E0038\n+//[re]~^^ ERROR E0038\n \n fn main() { }"}, {"sha": "dcaf564fdecfed1fb4be5b77d75dc4dccc82823e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,14 +1,24 @@\n // Test that we give suitable error messages when the user attempts to\n // impl a trait `Trait` for its own object type.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo { fn dummy(&self) { } }\n trait Bar: Foo { }\n trait Baz: Bar { }\n \n // Supertraits of Baz are not legal:\n-impl Foo for Baz { }   //~ ERROR E0371\n-impl Bar for Baz { }   //~ ERROR E0371\n-impl Baz for Baz { }   //~ ERROR E0371\n+impl Foo for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n+impl Bar for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n+impl Baz for Baz { }\n+//[old]~^ ERROR E0371\n+//[re]~^^ ERROR E0371\n \n // But other random traits are:\n trait Other { }"}, {"sha": "97133bc33ce0deb46f2c3778b34f2cbf639bd39f", "filename": "src/test/ui/coherence/coherence-impls-copy.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,11 +1,15 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n \n impl Copy for i32 {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0119\n+//[re]~| ERROR E0117\n enum TestE {\n   A\n }\n@@ -21,23 +25,27 @@ impl Clone for TestE { fn clone(&self) -> Self { *self } }\n impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[re]~^^ ERROR E0206\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0206\n+//[re]~| ERROR E0117\n impl Copy for &'static NotSync {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+//[re]~^^  ERROR E0119\n impl Copy for [MyType] {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR the trait `Copy` may not be implemented for this type\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0206\n+//[re]~| ERROR E0117\n impl Copy for &'static [NotSync] {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n+//[old]~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+//[old]~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//[re]~^^^ ERROR E0119\n+//[re]~| ERROR E0117\n fn main() {\n }"}, {"sha": "ef13e9caa66783f79e452efda49ab4f3d4c87f20", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n #![feature(overlapping_marker_traits)]\n \n@@ -15,16 +18,20 @@ impl !Sync for NotSync {}\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n unsafe impl Send for &'static NotSync {}\n-//~^ ERROR E0321\n+//[old]~^ ERROR E0321\n+//[re]~^^ ERROR E0321\n \n unsafe impl Send for [MyType] {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() {\n }"}, {"sha": "84ae2dd291b60dbec52730082cc22b000e4f9a9f", "filename": "src/test/ui/coherence/coherence-impls-sized.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Copy;\n@@ -11,26 +14,41 @@ struct MyType;\n struct NotSync;\n impl !Sync for NotSync {}\n \n-impl Sized for TestE {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for MyType {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for (MyType, MyType) {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static NotSync {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for [MyType] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static [NotSync] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n+impl Sized for TestE {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for MyType {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for (MyType, MyType) {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n+\n+impl Sized for &'static NotSync {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[re]~^^^ ERROR E0322\n+\n+impl Sized for [MyType] {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n+\n+impl Sized for &'static [NotSync] {}\n+//[old]~^ ERROR E0322\n+//[old]~| impl of 'Sized' not allowed\n+//[old]~| ERROR E0117\n+//[re]~^^^^ ERROR E0322\n+//[re]~| ERROR E0117\n \n fn main() {\n }"}, {"sha": "5a6b8fb7316d8181f98339496372c8d7d0f5b582", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -4,10 +4,14 @@\n //\n // No we expect to run into a more user-friendly cycle error instead.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(specialization)]\n \n trait Trait<T> { type Assoc; }\n-//~^ cycle detected\n+//[old]~^ cycle detected\n+//[re]~^^ ERROR E0391\n \n impl<T> Trait<T> for Vec<T> {\n     type Assoc = ();"}, {"sha": "63b38bf1cc1383db16cbc7de49cab910ca6e508c", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,9 +1,14 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n impl<T> Remote for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0210\n+\n \n fn main() { }"}, {"sha": "b6658d5bfa4147cde64d8c5f895e647d48c4ffad", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,10 +1,14 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n use std::marker::Send;\n \n struct TestType;\n \n unsafe impl !Send for TestType {}\n-//~^ ERROR negative impls cannot be unsafe\n+//[old]~^ ERROR negative impls cannot be unsafe\n+//[re]~^^ ERROR E0198\n \n fn main() {}"}, {"sha": "9717f1ed0510e5684740b1ad6746bd0b472dbdca", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,8 +1,14 @@\n // Test that you cannot *directly* dispatch on lifetime requirements\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait MyTrait { fn foo() {} }\n \n impl<T> MyTrait for T {}\n-impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+impl<T: 'static> MyTrait for T {}\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "18f50e46021f9b3bf4998fc50bc935f6596eda38", "filename": "src/test/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,5 +1,7 @@\n // aux-build:coherence_orphan_lib.rs\n+// revisions: old re\n \n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(optin_builtin_traits)]\n \n extern crate coherence_orphan_lib as lib;\n@@ -9,13 +11,15 @@ use lib::TheTrait;\n struct TheType;\n \n impl TheTrait<usize> for isize { }\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n impl !Send for Vec<isize> { }\n-//~^ ERROR E0117\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "bf3ce89f70bbaa3abcc20b7ca49533756c22505c", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -6,14 +6,20 @@\n //\n // Seems pretty basic, but then there was issue #24241. :)\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait From<U> {\n     fn foo() {}\n }\n \n impl <T> From<T> for T {\n }\n \n-impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+impl <T11, U11> From<(U11,)> for (T11,) {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n }\n \n fn main() { }"}, {"sha": "ad54d247f918d0386a21937cb14eecd04ea29470", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,17 +1,23 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n struct Sweet<X>(X);\n pub trait Sugar {}\n pub trait Fruit {}\n impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n \n trait Bar<X> {}\n struct A<T, X>(T, X);\n impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<X> A<i32, X> { fn f(&self) {} }\n \n fn main() {}"}, {"sha": "c6ced7b80fd9d221cf4e900b371058363c7611ea", "filename": "src/test/ui/coherence/coherence-overlap-downstream.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,17 +1,23 @@\n // Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n // though no impls are found.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar {}\n pub trait Fruit {}\n pub trait Sweet {}\n impl<T:Sugar> Sweet for T { }\n impl<T:Fruit> Sweet for T { }\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n pub trait Foo<X> {}\n pub trait Bar<X> {}\n impl<X, T> Foo<X> for T where T: Bar<X> {}\n impl<X> Foo<X> for i32 {}\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "969366e29cc350cadfd5427a2886838aeaa4857e", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,12 +2,17 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar {}\n \n struct Cake<X>(X);\n \n impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n \n fn main() { }"}, {"sha": "e3c15e149f8b54bde0d46b9b128c184e7cb7c8cf", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,10 +2,15 @@\n // though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n // error is reported for the following pair of impls (#23516).\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n impl<T:Sugar> Sweet for T { }\n impl<U:Sugar> Sweet for Box<U> { }\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "e0e2e672e98ddfa4ba9be05f0f000b3fbf227cc3", "filename": "src/test/ui/coherence/coherence-overlap-messages.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,22 +1,37 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n trait Foo { fn foo() {} }\n \n impl<T> Foo for T {}\n-impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+impl<U> Foo for U {}\n+//[old]~^ ERROR conflicting implementations of trait `Foo`:\n+//[re]~^^ ERROR E0119\n+\n \n trait Bar { fn bar() {} }\n \n impl<T> Bar for (T, u8) {}\n-impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+impl<T> Bar for (u8, T) {}\n+//[old]~^ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+//[re]~^^ ERROR E0119\n \n trait Baz<T> { fn baz() {} }\n \n impl<T> Baz<u8> for T {}\n-impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+impl<T> Baz<T> for u8 {}\n+//[old]~^ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+//[re]~^^ ERROR E0119\n \n trait Quux<U, V> { fn quux() {} }\n \n impl<T, U, V> Quux<U, V> for T {}\n-impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+impl<T, U> Quux<U, U> for T {}\n+//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n+//[re]~^^ ERROR E0119\n+impl<T, V> Quux<T, V> for T {}\n+//[old]~^ ERROR conflicting implementations of trait `Quux<_, _>`:\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "92b619af076b97fd619d5a389a8e9ed135eb5eca", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,14 +2,19 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib;\n \n use coherence_lib::Remote;\n \n struct A<X>(X);\n impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-//~^ ERROR E0592\n+//[old]~^ ERROR E0592\n+//[re]~^^ ERROR E0592\n impl A<i16> { fn dummy(&self) { } }\n \n fn main() {}"}, {"sha": "62f675003f9c4003d40028526354de0e4e891b1a", "filename": "src/test/ui/coherence/coherence-overlap-upstream.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,6 +2,10 @@\n // though the upstream crate doesn't implement it for now.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib;\n \n@@ -10,6 +14,7 @@ use coherence_lib::Remote;\n trait Foo {}\n impl<T> Foo for T where T: Remote {}\n impl Foo for i16 {}\n-//~^ ERROR E0119\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "de31a0839405dcc20e6e296f7aed0da2cfa7986e", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Foo;\n \n impl<T> Remote for lib::Pair<T,Foo> { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "91794b7999b1c3f35385e9e53e9ce50ff4633936", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,13 +2,18 @@\n // list of type parameters, not the self type.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n \n extern crate coherence_lib as lib;\n use lib::{Remote1, Pair};\n \n pub struct Local<T>(T);\n \n impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "49a91412bec71f22307fc1c3eb4c080b7e131bbf", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,11 +1,15 @@\n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::{Remote, Pair};\n \n struct Local<T>(T);\n \n impl<T,U> Remote for Pair<T,Local<U>> { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[old]~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "4f7fc71536ba81b95da0009f69b2b394965bf961", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![feature(rustc_attrs)]\n \n // Here we expect a coherence conflict because, even though `i32` does\n@@ -13,6 +16,8 @@ pub trait Bar {\n \n impl Foo<i32> for i32 { }\n \n-impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+impl<A:Iterator> Foo<A::Item> for A { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "819947fa547567a4d15485c304bd882f797098f8", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,12 +1,18 @@\n // Coherence error results because we do not know whether `T: Foo<P>` or not\n // for the second impl.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n \n impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n \n-impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+impl<T, U> Foo<T> for Option<U> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() {}"}, {"sha": "4086aeef8c03a2f06472102273bffb5117ac7bd5", "filename": "src/test/ui/coherence/coherence-projection-conflict.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::marker::PhantomData;\n \n pub trait Foo<P> { fn foo() {} }\n@@ -8,7 +12,9 @@ pub trait Bar {\n \n impl Foo<i32> for i32 { }\n \n-impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+impl<A:Bar> Foo<A::Output> for A { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n impl Bar for i32 {\n     type Output = i32;"}, {"sha": "652b438feb13791b7a082cbec98b5bb114740314", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n // Here we do not get a coherence conflict because `Baz: Iterator`\n // does not hold and (due to the orphan rules), we can rely on that."}, {"sha": "f759a9e1b45085baa77a16764440444ae2e238da", "filename": "src/test/ui/coherence/coherence-projection-ok.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n pub trait Foo<P> {}\n \n pub trait Bar {"}, {"sha": "130867b22428b918988d4f9a7e8fd25970d9a906", "filename": "src/test/ui/coherence/coherence-tuple-conflict.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,3 +1,7 @@\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n use std::fmt::Debug;\n use std::default::Default;\n \n@@ -12,7 +16,9 @@ impl<T> MyTrait for (T,T) {\n     fn get(&self) -> usize { 0 }\n }\n \n-impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+impl<A,B> MyTrait for (A,B) {\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n     fn get(&self) -> usize { self.dummy }\n }\n "}, {"sha": "423543964c20bdd921f8b0becc51be687630df05", "filename": "src/test/ui/coherence/coherence-vec-local-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,12 +2,17 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local<T>(T);\n \n-impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0210\n+impl<T> Remote for Vec<Local<T>> { }\n+//[old]~^ ERROR E0210\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "351ddd2aa6744505e57d7d5432361fe1fc0dfc24", "filename": "src/test/ui/coherence/coherence-vec-local.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,12 +2,17 @@\n // *non-fundamental* remote type like `Vec` is not considered local.\n \n // aux-build:coherence_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local;\n \n-impl Remote for Vec<Local> { } //~ ERROR E0117\n+impl Remote for Vec<Local> { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n fn main() { }"}, {"sha": "a030314262270ec4cbdcc8d5f9ebd0d64ff031d8", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codgen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "bd8317e224699fc4e10534fd8fedfa26c676878c", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "2a61042c6a03a7489a7354e313a3a7e80c368da0", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,7 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n \n extern crate coherence_copy_like_lib as lib;\n@@ -14,7 +16,9 @@ trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental.\n-impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n \n fn main() { }"}, {"sha": "38fc2e662d71e91aae66bbec006fb03346af4ed8", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,4 +1,7 @@\n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n@@ -16,6 +19,8 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //     MyStruct<MyType>: !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+impl MyTrait for lib::MyStruct<MyType> { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "7234bed1ba0d0d3b4e5d323810cd35758228582f", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,6 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -15,6 +18,8 @@ impl<T: lib::MyCopy> MyTrait for T { }\n //     (MyType,): !MyTrait\n //\n // which we cannot approve.\n-impl MyTrait for (MyType,) { } //~ ERROR E0119\n+impl MyTrait for (MyType,) { }\n+//[old]~^ ERROR E0119\n+//[re]~^^ ERROR E0119\n \n fn main() { }"}, {"sha": "f0d3682adb8ca1bde0455512cd629787b2a1b7fb", "filename": "src/test/ui/coherence/coherence_inherent.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,6 +1,10 @@\n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n \n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n mod Lib {\n     pub trait TheTrait {\n         fn the_fn(&self);\n@@ -28,7 +32,9 @@ mod NoImport {\n     use Lib::TheStruct;\n \n     fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n+        s.the_fn();\n+        //[old]~^ ERROR no method named `the_fn` found\n+        //[re]~^^ ERROR E0599\n     }\n }\n "}, {"sha": "2c980d839b94be8dd656b405076dfdaff5ecfbff", "filename": "src/test/ui/coherence/coherence_inherent_cc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -1,4 +1,7 @@\n // aux-build:coherence_inherent_cc_lib.rs\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n \n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n@@ -20,7 +23,9 @@ mod NoImport {\n     use coherence_inherent_cc_lib::TheStruct;\n \n     fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n+        s.the_fn();\n+        //[old]~^ ERROR no method named `the_fn` found\n+        //[re]~^^ ERROR E0599\n     }\n }\n "}, {"sha": "cac45b0b9edffcc049fd76b1bf36d1eeaa4d94c1", "filename": "src/test/ui/coherence/coherence_local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "d6faaf2977a76834651c69fe0278dca98e415a96", "filename": "src/test/ui/coherence/coherence_local_err_struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,8 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n-\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -13,7 +14,9 @@ struct MyType { x: i32 }\n // These are all legal because they are all fundamental types:\n \n // MyStruct is not fundamental.\n-impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+impl lib::MyCopy for lib::MyStruct<MyType> { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "2685b2df8cb655773878d7a6d60416dd1dd8c392", "filename": "src/test/ui/coherence/coherence_local_err_tuple.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -2,8 +2,9 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n+// revisions: old re\n \n-\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -13,7 +14,9 @@ struct MyType { x: i32 }\n // These are all legal because they are all fundamental types:\n \n // Tuples are not fundamental, so this is not a local impl.\n-impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+impl lib::MyCopy for (MyType,) { }\n+//[old]~^ ERROR E0117\n+//[re]~^^ ERROR E0117\n \n \n fn main() { }"}, {"sha": "a52510b8ea9ca63eb87b8063e72e193507117c91", "filename": "src/test/ui/coherence/coherence_local_ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464b4dcb2b965daddfd0e4c57c9e3363decb68b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs?ref=464b4dcb2b965daddfd0e4c57c9e3363decb68b4", "patch": "@@ -4,6 +4,9 @@\n // aux-build:coherence_copy_like_lib.rs\n // compile-pass\n // skip-codegen\n+// revisions: old re\n+\n+#![cfg_attr(re, feature(re_rebalance_coherence))]\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;"}, {"sha": "d3d389c6a8bd52da51a2579ea7bf4c6408ee2c69", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_copy_like_lib.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_type = \"rlib\"]\n-#![feature(fundamental)]\n-\n-pub trait MyCopy { }\n-impl MyCopy for i32 { }\n-\n-pub struct MyStruct<T>(T);\n-\n-#[fundamental]\n-pub struct MyFundamentalStruct<T>(T);"}, {"sha": "0458636a401ef5be00402a224e8dd09c6673ae5d", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_inherent_cc_lib.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// See coherence_inherent_cc.rs\n-\n-pub trait TheTrait {\n-    fn the_fn(&self);\n-}\n-\n-pub struct TheStruct;\n-\n-impl TheTrait for TheStruct {\n-    fn the_fn(&self) {}\n-}"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_lib.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_type=\"lib\"]\n-\n-pub trait Remote {\n-    fn foo(&self) { }\n-}\n-\n-pub trait Remote1<T> {\n-    fn foo(&self, t: T) { }\n-}\n-\n-pub trait Remote2<T, U> {\n-    fn foo(&self, t: T, u: U) { }\n-}\n-\n-pub struct Pair<T,U>(T,U);"}, {"sha": "b22d12300c7d1297a05884baba7349503dc7923a", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_orphan_lib.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub trait TheTrait<T> {\n-    fn the_fn(&self);\n-}"}, {"sha": "044bb606b40e224b15a0dd6766a72f4e1fec9155", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/go_trait.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,53 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Common code used for tests that model the Fn/FnMut/FnOnce hierarchy.\n-\n-pub trait Go {\n-    fn go(&self, arg: isize);\n-}\n-\n-pub fn go<G:Go>(this: &G, arg: isize) {\n-    this.go(arg)\n-}\n-\n-pub trait GoMut {\n-    fn go_mut(&mut self, arg: isize);\n-}\n-\n-pub fn go_mut<G:GoMut>(this: &mut G, arg: isize) {\n-    this.go_mut(arg)\n-}\n-\n-pub trait GoOnce {\n-    fn go_once(self, arg: isize);\n-}\n-\n-pub fn go_once<G:GoOnce>(this: G, arg: isize) {\n-    this.go_once(arg)\n-}\n-\n-impl<G> GoMut for G\n-    where G : Go\n-{\n-    default fn go_mut(&mut self, arg: isize) {\n-        go(&*self, arg)\n-    }\n-}\n-\n-impl<G> GoOnce for G\n-    where G : GoMut\n-{\n-    default fn go_once(mut self, arg: isize) {\n-        go_mut(&mut self, arg)\n-    }\n-}"}, {"sha": "3190ce430ad67ca41fc32553745bc6b016e52678", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/trait_impl_conflict.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub trait Foo {\n-    fn foo() {}\n-}\n-\n-impl Foo for isize {\n-}"}, {"sha": "0769518b36beba5806336033f5aab4b7df9f15ac", "filename": "src/test/ui/re_rebalance_coherence/coherence-all-remote.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:coherence_lib.rs\n-\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote1;\n-\n-impl<T> Remote1<T> for isize { }\n-//~^ ERROR E0210\n-\n-fn main() { }"}, {"sha": "509cee34b233f1b4f36310c41c140a18411e80c3", "filename": "src/test/ui/re_rebalance_coherence/coherence-all-remote.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:18:1\n-   |\n-LL | impl<T> Remote1<T> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "712fe9bdb4c758d2c8fdea6fd0c247c4fd7440dd", "filename": "src/test/ui/re_rebalance_coherence/coherence-bigint-param.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote1;\n-\n-pub struct BigInt;\n-\n-impl<T> Remote1<BigInt> for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-\n-fn main() { }"}, {"sha": "c2f6a15e8e3f752c88a34717d207d097e97eecf3", "filename": "src/test/ui/re_rebalance_coherence/coherence-bigint-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:20:1\n-   |\n-LL | impl<T> Remote1<BigInt> for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "da0221c3e0af1ba2399f55738fcfedbac7271fcb", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-// Test that two blanket impls conflict (at least without negative\n-// bounds).  After all, some other crate could implement Even or Odd\n-// for the same type (though this crate doesn't).\n-\n-trait MyTrait {\n-    fn get(&self) -> usize;\n-}\n-\n-trait Even { }\n-\n-trait Odd { }\n-\n-impl Even for isize { }\n-\n-impl Odd for usize { }\n-\n-impl<T:Even> MyTrait for T {\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-fn main() { }"}, {"sha": "8d5d4787780751cd5ebabc910a86432e7f14c2d7", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:36:1\n-   |\n-LL | impl<T:Even> MyTrait for T {\n-   | -------------------------- first implementation here\n-...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "5e407588e2aff126958876423304bd7b627fc7ec", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-// Test that two blanket impls conflict (at least without negative\n-// bounds).  After all, some other crate could implement Even or Odd\n-// for the same type (though this crate doesn't implement them at all).\n-\n-trait MyTrait {\n-    fn get(&self) -> usize;\n-}\n-\n-trait Even {}\n-\n-trait Odd {}\n-\n-impl<T:Even> MyTrait for T {\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-impl<T:Odd> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-fn main() { }"}, {"sha": "6e7df5e6ed3bf47c83ec7737634ce12120803bd6", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:32:1\n-   |\n-LL | impl<T:Even> MyTrait for T {\n-   | -------------------------- first implementation here\n-...\n-LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "9d1caf929222e9ae5b061e91b2fffe53fff896e9", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:go_trait.rs\n-\n-extern crate go_trait;\n-\n-use go_trait::{Go,GoMut};\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-struct MyThingy;\n-\n-impl Go for MyThingy {\n-    fn go(&self, arg: isize) { }\n-}\n-\n-impl GoMut for MyThingy { //~ ERROR conflicting implementations\n-    fn go_mut(&mut self, arg: isize) { }\n-}\n-\n-fn main() { }"}, {"sha": "30656fa41b4f84f133f1f98e2948131c843a7041", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:27:1\n-   |\n-LL | impl GoMut for MyThingy { //~ ERROR conflicting implementations\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `go_trait`:\n-           - impl<G> go_trait::GoMut for G\n-             where G: go_trait::Go;\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "f866465bd081d1c5bb267bdd713638d2921295a7", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-// Test that a blank impl for all T conflicts with an impl for some\n-// specific T, even when there are multiple type parameters involved.\n-\n-trait MyTrait<T> {\n-    fn get(&self) -> T;\n-}\n-\n-impl<T> MyTrait<T> for T {\n-    fn get(&self) -> T {\n-        panic!()\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct MyType {\n-    dummy: usize\n-}\n-\n-impl MyTrait<MyType> for MyType { //~ ERROR E0119\n-    fn get(&self) -> usize { (*self).clone() }\n-}\n-\n-fn main() { }"}, {"sha": "f68e1fd94f0c20e49cbc9aead357c9abb2db8e2e", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:34:1\n-   |\n-LL | impl<T> MyTrait<T> for T {\n-   | ------------------------ first implementation here\n-...\n-LL | impl MyTrait<MyType> for MyType { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "74b458b838e04d2167e91ff1193d8ed895d49535", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-trait.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that a blank impl for all T:PartialEq conflicts with an impl for some\n-// specific T when T:PartialEq.\n-\n-trait OtherTrait {\n-    fn noop(&self);\n-}\n-\n-trait MyTrait {\n-    fn get(&self) -> usize;\n-}\n-\n-impl<T:OtherTrait> MyTrait for T {\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-struct MyType {\n-    dummy: usize\n-}\n-\n-impl MyTrait for MyType { //~ ERROR E0119\n-    fn get(&self) -> usize { self.dummy }\n-}\n-\n-impl OtherTrait for MyType {\n-    fn noop(&self) { }\n-}\n-\n-fn main() { }"}, {"sha": "bafeadcfcbefbb7e67f35d55daf58042620a94eb", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-trait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:32:1\n-   |\n-LL | impl<T:OtherTrait> MyTrait for T {\n-   | -------------------------------- first implementation here\n-...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "51de0e33034c87ae1c22dc15e32ab3bbe7d43a32", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-// Test that a blank impl for all T conflicts with an impl for some\n-// specific T.\n-\n-trait MyTrait {\n-    fn get(&self) -> usize;\n-}\n-\n-impl<T> MyTrait for T {\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-struct MyType {\n-    dummy: usize\n-}\n-\n-impl MyTrait for MyType { //~ ERROR E0119\n-    fn get(&self) -> usize { self.dummy }\n-}\n-\n-fn main() { }"}, {"sha": "efc32d1236402af15abc5171c65a507d963bdeb3", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n-  --> $DIR/coherence-blanket-conflicts-with-specific.rs:31:1\n-   |\n-LL | impl<T> MyTrait for T {\n-   | --------------------- first implementation here\n-...\n-LL | impl MyTrait for MyType { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "c2db97c68e8ec605a39485ee908a8bbf8bb66032", "filename": "src/test/ui/re_rebalance_coherence/coherence-conflicting-negative-trait-impl.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(overlapping_marker_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-trait MyTrait {}\n-\n-struct TestType<T>(::std::marker::PhantomData<T>);\n-\n-unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-\n-impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n-\n-unsafe impl<T:'static> Send for TestType<T> {}\n-\n-impl !Send for TestType<i32> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n-\n-fn main() {}"}, {"sha": "7555e9996cf29b2560256590281aa426675184bd", "filename": "src/test/ui/re_rebalance_coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:21:1\n-   |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n-LL | \n-LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:26:1\n-   |\n-LL | unsafe impl<T:'static> Send for TestType<T> {}\n-   | ------------------------------------------- first implementation here\n-LL | \n-LL | impl !Send for TestType<i32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "09cc9801c14a1954878245e21c5b5ccfe6480b54", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.a.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-cow.rs:28:1\n-   |\n-LL | impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "7bb8378ee4ba8b480e52281aec9b9f1030fe9e8c", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.b.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-cow.rs:31:1\n-   |\n-LL | impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "6dbf0a44f02b87175c0b08445863c29657947706", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.c.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-cow.rs:34:1\n-   |\n-LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "da69d56a25a56dce1792d751fc3f356bee97f0fb", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// revisions: a b c\n-\n-// aux-build:coherence_lib.rs\n-\n-// Test that the `Pair` type reports an error if it contains type\n-// parameters, even when they are covered by local types. This test\n-// was originally intended to test the opposite, but the rules changed\n-// with RFC 1023 and this became illegal.\n-\n-extern crate coherence_lib as lib;\n-use lib::{Remote,Pair};\n-\n-pub struct Cover<T>(T);\n-\n-#[cfg(a)]\n-impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0117\n-\n-#[cfg(b)]\n-impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0117\n-\n-#[cfg(c)]\n-impl<T,U> Remote for Pair<Cover<T>,U> { }\n-//[c]~^ ERROR E0117\n-\n-fn main() { }"}, {"sha": "02624c70dc9d871561b66e69347e1834a3085a56", "filename": "src/test/ui/re_rebalance_coherence/coherence-cross-crate-conflict.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// The error here is strictly due to orphan rules; the impl here\n-// generalizes the one upstream\n-\n-// aux-build:trait_impl_conflict.rs\n-extern crate trait_impl_conflict;\n-use trait_impl_conflict::Foo;\n-\n-impl<A> Foo for A {\n-    //~^ ERROR type parameter `A` must be used as the type parameter for some local type\n-    //~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n-}\n-\n-fn main() {\n-}"}, {"sha": "cc10ac8f025447ac59ba0fbada9613f2fb617f47", "filename": "src/test/ui/re_rebalance_coherence/coherence-cross-crate-conflict.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n-  --> $DIR/coherence-cross-crate-conflict.rs:20:1\n-   |\n-LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `trait_impl_conflict`:\n-           - impl trait_impl_conflict::Foo for isize;\n-\n-error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:20:1\n-   |\n-LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`."}, {"sha": "86dd0e4f74fbda2b6a12e5c9cdd890f5e230ddef", "filename": "src/test/ui/re_rebalance_coherence/coherence-default-trait-impl.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-auto trait MySafeTrait {}\n-\n-struct Foo;\n-\n-unsafe impl MySafeTrait for Foo {}\n-//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n-\n-unsafe auto trait MyUnsafeTrait {}\n-\n-impl MyUnsafeTrait for Foo {}\n-//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-\n-fn main() {}"}, {"sha": "6c3d79cf53c1ce6a5bd87e4ea4dc2f4d2f7a82d8", "filename": "src/test/ui/re_rebalance_coherence/coherence-default-trait-impl.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,16 +0,0 @@\n-error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:18:1\n-   |\n-LL | unsafe impl MySafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:23:1\n-   |\n-LL | impl MyUnsafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0199, E0200.\n-For more information about an error, try `rustc --explain E0199`."}, {"sha": "24df1a1ee01f844a8f2acd617509ffaf48c53d62", "filename": "src/test/ui/re_rebalance_coherence/coherence-error-suppression.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// check that error types in coherence do not cause error cascades.\n-\n-trait Foo {}\n-\n-impl Foo for i8 {}\n-impl Foo for i16 {}\n-impl Foo for i32 {}\n-impl Foo for i64 {}\n-impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n-impl Foo for u8 {}\n-impl Foo for u16 {}\n-impl Foo for u32 {}\n-impl Foo for u64 {}\n-\n-fn main() {}"}, {"sha": "97ed46c71bd53f2928a3dc5aa6c1e65b39a67647", "filename": "src/test/ui/re_rebalance_coherence/coherence-error-suppression.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,9 +0,0 @@\n-error[E0412]: cannot find type `DoesNotExist` in this scope\n-  --> $DIR/coherence-error-suppression.rs:21:14\n-   |\n-LL | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n-   |              ^^^^^^^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0412`."}, {"sha": "9e9a00af903dd6c901d298eabbf463c4df4f00d0", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that we give suitable error messages when the user attempts to\n-// impl a trait `Trait` for its own object type.\n-\n-// If the trait is not object-safe, we give a more tailored message\n-// because we're such schnuckels:\n-trait NotObjectSafe { fn eq(&self, other: Self); }\n-impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n-\n-fn main() { }"}, {"sha": "0f4f33e4eb9a8167cc9cedc3edc27b3699ad898d", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,11 +0,0 @@\n-error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:19:6\n-   |\n-LL | impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n-   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0038`."}, {"sha": "0ed88058f1fb09c725fabcf6c6cf690b2fed6480", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that we give suitable error messages when the user attempts to\n-// impl a trait `Trait` for its own object type.\n-\n-trait Foo { fn dummy(&self) { } }\n-trait Bar: Foo { }\n-trait Baz: Bar { }\n-\n-// Supertraits of Baz are not legal:\n-impl Foo for Baz { }   //~ ERROR E0371\n-impl Bar for Baz { }   //~ ERROR E0371\n-impl Baz for Baz { }   //~ ERROR E0371\n-\n-// But other random traits are:\n-trait Other { }\n-impl Other for Baz { } // OK, Other not a supertrait of Baz\n-\n-fn main() { }"}, {"sha": "d529e86f8fc012e14b06b79446fcb59eed78005d", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:21:1\n-   |\n-LL | impl Foo for Baz { }   //~ ERROR E0371\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n-\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:22:1\n-   |\n-LL | impl Bar for Baz { }   //~ ERROR E0371\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n-\n-error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n-  --> $DIR/coherence-impl-trait-for-trait.rs:23:1\n-   |\n-LL | impl Baz for Baz { }   //~ ERROR E0371\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0371`."}, {"sha": "9f58d13efc2a4d0051069f859d64b21b8250b7c1", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-copy.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-use std::marker::Copy;\n-\n-impl Copy for i32 {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n-enum TestE {\n-  A\n-}\n-\n-struct MyType;\n-\n-struct NotSync;\n-impl !Sync for NotSync {}\n-\n-impl Copy for TestE {}\n-impl Clone for TestE { fn clone(&self) -> Self { *self } }\n-\n-impl Copy for MyType {}\n-\n-impl Copy for &'static mut MyType {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-impl Clone for MyType { fn clone(&self) -> Self { *self } }\n-\n-impl Copy for (MyType, MyType) {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n-impl Copy for &'static NotSync {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-\n-impl Copy for [MyType] {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n-impl Copy for &'static [NotSync] {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n-fn main() {\n-}"}, {"sha": "80e2d203aaaab988258b529b5314093927ad5927", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-copy.stderr", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,87 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n-  --> $DIR/coherence-impls-copy.rs:16:1\n-   |\n-LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl std::marker::Copy for i32;\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n-  --> $DIR/coherence-impls-copy.rs:42:1\n-   |\n-LL | impl Copy for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n-             where T: ?Sized;\n-\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n-  --> $DIR/coherence-impls-copy.rs:49:1\n-   |\n-LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::marker::Copy for &T\n-             where T: ?Sized;\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:34:15\n-   |\n-LL | impl Copy for &'static mut MyType {}\n-   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:38:15\n-   |\n-LL | impl Copy for (MyType, MyType) {}\n-   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:45:15\n-   |\n-LL | impl Copy for [MyType] {}\n-   |               ^^^^^^^^ type is not a structure or enumeration\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:16:1\n-   |\n-LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:38:1\n-   |\n-LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:45:1\n-   |\n-LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:49:1\n-   |\n-LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 10 previous errors\n-\n-Some errors occurred: E0117, E0119, E0206.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "11b92d5254c440136ec6b23ceaca929eb5bf560f", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-send.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(overlapping_marker_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-use std::marker::Copy;\n-\n-enum TestE {\n-  A\n-}\n-\n-struct MyType;\n-\n-struct NotSync;\n-impl !Sync for NotSync {}\n-\n-unsafe impl Send for TestE {}\n-unsafe impl Send for MyType {}\n-unsafe impl Send for (MyType, MyType) {}\n-//~^ ERROR E0117\n-\n-unsafe impl Send for &'static NotSync {}\n-//~^ ERROR E0321\n-\n-unsafe impl Send for [MyType] {}\n-//~^ ERROR E0117\n-\n-unsafe impl Send for &'static [NotSync] {}\n-//~^ ERROR E0117\n-\n-fn main() {\n-}"}, {"sha": "8f09deeeb930304996167110cd920ceb7a30528c", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-send.stderr", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,37 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:28:1\n-   |\n-LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n-  --> $DIR/coherence-impls-send.rs:31:1\n-   |\n-LL | unsafe impl Send for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:34:1\n-   |\n-LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-send.rs:37:1\n-   |\n-LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0117, E0321.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "3f7970f34fc5e53ad708c904100e8bce786cdfee", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-sized.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-use std::marker::Copy;\n-\n-enum TestE {\n-  A\n-}\n-\n-struct MyType;\n-\n-struct NotSync;\n-impl !Sync for NotSync {}\n-\n-impl Sized for TestE {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for MyType {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for (MyType, MyType) {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static NotSync {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-\n-impl Sized for [MyType] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-impl Sized for &'static [NotSync] {} //~ ERROR E0322\n-//~^ impl of 'Sized' not allowed\n-//~| ERROR E0117\n-\n-fn main() {\n-}"}, {"sha": "92b165bdc3b74d4e4fddb267968b765ff349ad94", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-sized.stderr", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,67 +0,0 @@\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:25:1\n-   |\n-LL | impl Sized for TestE {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:28:1\n-   |\n-LL | impl Sized for MyType {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:31:1\n-   |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:35:1\n-   |\n-LL | impl Sized for &'static NotSync {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:38:1\n-   |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0322]: explicit impls for the `Sized` trait are not permitted\n-  --> $DIR/coherence-impls-sized.rs:42:1\n-   |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:31:1\n-   |\n-LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:38:1\n-   |\n-LL | impl Sized for [MyType] {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-sized.rs:42:1\n-   |\n-LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 9 previous errors\n-\n-Some errors occurred: E0117, E0322.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "a2cfb11fdc2344ff6ca91b08bcf74c692c52d4d4", "filename": "src/test/ui/re_rebalance_coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Formerly this ICEd with the following message:\n-// Tried to project an inherited associated type during coherence checking,\n-// which is currently not supported.\n-//\n-// No we expect to run into a more user-friendly cycle error instead.\n-\n-#![feature(specialization)]\n-#![feature(re_rebalance_coherence)]\n-\n-trait Trait<T> { type Assoc; }\n-//~^ cycle detected\n-\n-impl<T> Trait<T> for Vec<T> {\n-    type Assoc = ();\n-}\n-\n-impl Trait<u8> for Vec<u8> {}\n-\n-impl<T> Trait<T> for String {\n-    type Assoc = ();\n-}\n-\n-impl Trait<<Vec<u8> as Trait<u8>>::Assoc> for String {}\n-\n-fn main() {}"}, {"sha": "aca2d64b6231b9b5352b33bf32c7bc187e5265ba", "filename": "src/test/ui/re_rebalance_coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,16 +0,0 @@\n-error[E0391]: cycle detected when processing `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:20:1\n-   |\n-LL | trait Trait<T> { type Assoc; }\n-   | ^^^^^^^^^^^^^^\n-   |\n-   = note: ...which again requires processing `Trait`, completing the cycle\n-note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:20:1\n-   |\n-LL | trait Trait<T> { type Assoc; }\n-   | ^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "8d3551beb5fcd70752afcb00e0d09dc65fcd77b6", "filename": "src/test/ui/re_rebalance_coherence/coherence-lone-type-parameter.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote;\n-\n-impl<T> Remote for T { }\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n-\n-fn main() { }"}, {"sha": "403ced3f287c211d86ddcb595210fcdb80266245", "filename": "src/test/ui/re_rebalance_coherence/coherence-lone-type-parameter.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,11 +0,0 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:18:1\n-   |\n-LL | impl<T> Remote for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n-   |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0210`."}, {"sha": "40f7ebfd25025cbd28b6070b4707c65b799e3a1a", "filename": "src/test/ui/re_rebalance_coherence/coherence-negative-impls-safe.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-use std::marker::Send;\n-\n-struct TestType;\n-\n-unsafe impl !Send for TestType {}\n-//~^ ERROR negative impls cannot be unsafe\n-\n-fn main() {}"}, {"sha": "70a879efa27c380336196a67d76f6f7c8a56016a", "filename": "src/test/ui/re_rebalance_coherence/coherence-negative-impls-safe.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,9 +0,0 @@\n-error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:18:1\n-   |\n-LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0198`."}, {"sha": "838bc71d3afeb8449bb75998f3a218cebbd8a089", "filename": "src/test/ui/re_rebalance_coherence/coherence-no-direct-lifetime-dispatch.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that you cannot *directly* dispatch on lifetime requirements\n-\n-trait MyTrait { fn foo() {} }\n-\n-impl<T> MyTrait for T {}\n-impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n-\n-fn main() {}"}, {"sha": "aa6427ba24f957691044759e31177f62c33503bb", "filename": "src/test/ui/re_rebalance_coherence/coherence-no-direct-lifetime-dispatch.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,11 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:18:1\n-   |\n-LL | impl<T> MyTrait for T {}\n-   | --------------------- first implementation here\n-LL | impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "dbe26a8898d4dd09bc8bc1779bb66b320f2fb75f", "filename": "src/test/ui/re_rebalance_coherence/coherence-orphan.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:coherence_orphan_lib.rs\n-\n-#![feature(optin_builtin_traits)]\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_orphan_lib as lib;\n-\n-use lib::TheTrait;\n-\n-struct TheType;\n-\n-impl TheTrait<usize> for isize { }\n-//~^ ERROR E0117\n-\n-impl TheTrait<TheType> for isize { }\n-\n-impl TheTrait<isize> for TheType { }\n-\n-impl !Send for Vec<isize> { }\n-//~^ ERROR E0117\n-\n-fn main() { }"}, {"sha": "6e5e734401f4105d653f32fbd94d6fa8f3763f69", "filename": "src/test/ui/re_rebalance_coherence/coherence-orphan.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:22:1\n-   |\n-LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:29:1\n-   |\n-LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "13604d9e4952a04162fd442657f632bb7ad8582b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-all-t-and-tuple.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Check that we detect an overlap here in the case where:\n-//\n-//    for some type X:\n-//      T = (X,)\n-//      T11 = X, U11 = X\n-//\n-// Seems pretty basic, but then there was issue #24241. :)\n-\n-trait From<U> {\n-    fn foo() {}\n-}\n-\n-impl <T> From<T> for T {\n-}\n-\n-impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n-}\n-\n-fn main() { }"}, {"sha": "dc052931ed14e4b6a6858e14c97f3e092f7e0c92", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-all-t-and-tuple.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n-  --> $DIR/coherence-overlap-all-t-and-tuple.rs:28:1\n-   |\n-LL | impl <T> From<T> for T {\n-   | ---------------------- first implementation here\n-...\n-LL | impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "1f0ca50b60fca2563349ddb8542ae5b74471942e", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream-inherent.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n-// though no impls are found.\n-\n-struct Sweet<X>(X);\n-pub trait Sugar {}\n-pub trait Fruit {}\n-impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n-impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-\n-trait Bar<X> {}\n-struct A<T, X>(T, X);\n-impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-//~^ ERROR E0592\n-impl<X> A<i32, X> { fn f(&self) {} }\n-\n-fn main() {}"}, {"sha": "8a817fcb440676c8408b60e69ed6e0e964bb373d", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream-inherent.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,23 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:19:26\n-   |\n-LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n-LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-   |                          ------------------- other definition for `dummy`\n-\n-error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:25:38\n-   |\n-LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-LL | //~^ ERROR E0592\n-LL | impl<X> A<i32, X> { fn f(&self) {} }\n-   |                     -------------- other definition for `f`\n-   |\n-   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "7a2b28f49b549eebe980ce327081d10c9dbcb84b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n-// though no impls are found.\n-\n-pub trait Sugar {}\n-pub trait Fruit {}\n-pub trait Sweet {}\n-impl<T:Sugar> Sweet for T { }\n-impl<T:Fruit> Sweet for T { }\n-//~^ ERROR E0119\n-\n-pub trait Foo<X> {}\n-pub trait Bar<X> {}\n-impl<X, T> Foo<X> for T where T: Bar<X> {}\n-impl<X> Foo<X> for i32 {}\n-//~^ ERROR E0119\n-\n-fn main() { }"}, {"sha": "ce08ae15df1315113700e4bab2aeb91fd50bcb92", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,21 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:20:1\n-   |\n-LL | impl<T:Sugar> Sweet for T { }\n-   | ------------------------- first implementation here\n-LL | impl<T:Fruit> Sweet for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:26:1\n-   |\n-LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n-   | --------------------------------------- first implementation here\n-LL | impl<X> Foo<X> for i32 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-   |\n-   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "ff6af49dfb2ef5e533be853b1d6f5160c0d8438b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516-inherent.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `Box<U>: !Sugar` to be ambiguous, even\n-// though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n-// error is reported for the following pair of impls (#23516).\n-\n-pub trait Sugar {}\n-\n-struct Cake<X>(X);\n-\n-impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-//~^ ERROR E0592\n-impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-\n-fn main() { }"}, {"sha": "26b59fbe71bd7be326f82629f3512aef8aaa3b1d", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516-inherent.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-issue-23516-inherent.rs:21:25\n-   |\n-LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n-LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-   |                              ------------------- other definition for `dummy`\n-   |\n-   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "2e45572e4eccd7ff6999a2369fd5794a944a0771", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `Box<U>: !Sugar` to be ambiguous, even\n-// though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n-// error is reported for the following pair of impls (#23516).\n-\n-pub trait Sugar { fn dummy(&self) { } }\n-pub trait Sweet { fn dummy(&self) { } }\n-impl<T:Sugar> Sweet for T { }\n-impl<U:Sugar> Sweet for Box<U> { }\n-//~^ ERROR E0119\n-\n-fn main() { }"}, {"sha": "9d3d564b8a91cbcd534d01e0d7111bfc81cc980b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:20:1\n-   |\n-LL | impl<T:Sugar> Sweet for T { }\n-   | ------------------------- first implementation here\n-LL | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n-   |\n-   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "1474fbd700c7706891faa00ddb4f9da535b4b166", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-messages.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-trait Foo { fn foo() {} }\n-\n-impl<T> Foo for T {}\n-impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n-\n-trait Bar { fn bar() {} }\n-\n-impl<T> Bar for (T, u8) {}\n-impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-\n-trait Baz<T> { fn baz() {} }\n-\n-impl<T> Baz<u8> for T {}\n-impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n-\n-trait Quux<U, V> { fn quux() {} }\n-\n-impl<T, U, V> Quux<U, V> for T {}\n-impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-\n-fn main() {}"}, {"sha": "c7b24e7bf6dee452f0a8e9c9eb704ae2d096b959", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-messages.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,44 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo`:\n-  --> $DIR/coherence-overlap-messages.rs:16:1\n-   |\n-LL | impl<T> Foo for T {}\n-   | ----------------- first implementation here\n-LL | impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n-   | ^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-  --> $DIR/coherence-overlap-messages.rs:21:1\n-   |\n-LL | impl<T> Bar for (T, u8) {}\n-   | ----------------------- first implementation here\n-LL | impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n-\n-error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n-  --> $DIR/coherence-overlap-messages.rs:26:1\n-   |\n-LL | impl<T> Baz<u8> for T {}\n-   | --------------------- first implementation here\n-LL | impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n-   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n-\n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:31:1\n-   |\n-LL | impl<T, U, V> Quux<U, V> for T {}\n-   | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n-  --> $DIR/coherence-overlap-messages.rs:32:1\n-   |\n-LL | impl<T, U, V> Quux<U, V> for T {}\n-   | ------------------------------ first implementation here\n-LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-LL | impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "e802c0113ad82b5e3f0d60558b88de23180b24db", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream-inherent.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `i16: Remote` to be ambiguous, even\n-// though the upstream crate doesn't implement it for now.\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib;\n-\n-use coherence_lib::Remote;\n-\n-struct A<X>(X);\n-impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-//~^ ERROR E0592\n-impl A<i16> { fn dummy(&self) { } }\n-\n-fn main() {}"}, {"sha": "70b19ddb429a5703f82213a6a274b5e2a32fd2f8", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream-inherent.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0592]: duplicate definitions with name `dummy`\n-  --> $DIR/coherence-overlap-upstream-inherent.rs:23:32\n-   |\n-LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-LL | //~^ ERROR E0592\n-LL | impl A<i16> { fn dummy(&self) { } }\n-   |               ------------------- other definition for `dummy`\n-   |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0592`."}, {"sha": "afbc69cac330fb800dedbf978a092dfb93c4cd41", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that we consider `i16: Remote` to be ambiguous, even\n-// though the upstream crate doesn't implement it for now.\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib;\n-\n-use coherence_lib::Remote;\n-\n-trait Foo {}\n-impl<T> Foo for T where T: Remote {}\n-impl Foo for i16 {}\n-//~^ ERROR E0119\n-\n-fn main() {}"}, {"sha": "88bea02b3481651368ed2b77e7606bc789c5389c", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:24:1\n-   |\n-LL | impl<T> Foo for T where T: Remote {}\n-   | --------------------------------- first implementation here\n-LL | impl Foo for i16 {}\n-   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n-   |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "25d8e3197f42a9b897e949a943b0eae12f5c1058", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlapping-pairs.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote;\n-\n-struct Foo;\n-\n-impl<T> Remote for lib::Pair<T,Foo> { }\n-//~^ ERROR E0117\n-\n-fn main() { }"}, {"sha": "2629a017b7933708c86fd82420c005d63c046b38", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlapping-pairs.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-overlapping-pairs.rs:20:1\n-   |\n-LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "002b422f704c52bb133f57c0efbce4f154b04fa9", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered-1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that the same coverage rules apply even if the local type appears in the\n-// list of type parameters, not the self type.\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::{Remote1, Pair};\n-\n-pub struct Local<T>(T);\n-\n-impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-//~^ ERROR E0117\n-\n-fn main() { }"}, {"sha": "197056746b9c54b42870543fc9fb4cae683f865d", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered-1.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:23:1\n-   |\n-LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "9b0d7177ffcce66cf5688c171d4a7605f6bfa712", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::{Remote, Pair};\n-\n-struct Local<T>(T);\n-\n-impl<T,U> Remote for Pair<T,Local<U>> { }\n-//~^ ERROR E0117\n-\n-fn main() { }"}, {"sha": "b9e2eced94b18a84c11b902734a65718a62a97a1", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-pair-covered-uncovered.rs:20:1\n-   |\n-LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "e3f945504feba4a6a81e559779a30e82b52a0307", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-orphan.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_attrs)]\n-#![feature(re_rebalance_coherence)]\n-\n-// Here we expect a coherence conflict because, even though `i32` does\n-// not implement `Iterator`, we cannot rely on that negative reasoning\n-// due to the orphan rules. Therefore, `A::Item` may yet turn out to\n-// be `i32`.\n-\n-pub trait Foo<P> { fn foo() {} }\n-\n-pub trait Bar {\n-    type Output: 'static;\n-}\n-\n-impl Foo<i32> for i32 { }\n-\n-impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n-\n-fn main() {}"}, {"sha": "81b1343837348aa026e0f5fb88b951438b733497", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-orphan.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict-orphan.rs:27:1\n-   |\n-LL | impl Foo<i32> for i32 { }\n-   | --------------------- first implementation here\n-LL | \n-LL | impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-   |\n-   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "cb5c94a18a7286de58c020b48055d8dd3a5025a5", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-ty-param.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Coherence error results because we do not know whether `T: Foo<P>` or not\n-// for the second impl.\n-\n-use std::marker::PhantomData;\n-\n-pub trait Foo<P> { fn foo() {} }\n-\n-impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n-\n-impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n-\n-fn main() {}"}, {"sha": "fe5a66ef9ea24e816277a45e324e35ddcd67e26a", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-ty-param.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n-  --> $DIR/coherence-projection-conflict-ty-param.rs:22:1\n-   |\n-LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n-   | ---------------------------------------- first implementation here\n-LL | \n-LL | impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "73adba0819e69f095d5316fa4ecc7d24cac12f39", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::marker::PhantomData;\n-\n-pub trait Foo<P> { fn foo() {} }\n-\n-pub trait Bar {\n-    type Output: 'static;\n-}\n-\n-impl Foo<i32> for i32 { }\n-\n-impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n-\n-impl Bar for i32 {\n-    type Output = i32;\n-}\n-\n-fn main() {}"}, {"sha": "7f5ff3de17864532e8695632236faf0d6e00065e", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n-  --> $DIR/coherence-projection-conflict.rs:23:1\n-   |\n-LL | impl Foo<i32> for i32 { }\n-   | --------------------- first implementation here\n-LL | \n-LL | impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "b02289dc68e522261eb315d7fc872a37866203a0", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-ok-orphan.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n-// Here we do not get a coherence conflict because `Baz: Iterator`\n-// does not hold and (due to the orphan rules), we can rely on that.\n-\n-pub trait Foo<P> {}\n-\n-pub trait Bar {\n-    type Output: 'static;\n-}\n-\n-struct Baz;\n-impl Foo<i32> for Baz { }\n-\n-impl<A:Iterator> Foo<A::Item> for A { }\n-\n-\n-fn main() {}"}, {"sha": "9c797b61a43b2f9a63ff7b676c6b6262f5560b80", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-ok.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// compile-pass\n-// skip-codegen\n-pub trait Foo<P> {}\n-\n-pub trait Bar {\n-    type Output: 'static;\n-}\n-\n-impl Foo<i32> for i32 { }\n-\n-impl<A:Bar> Foo<A::Output> for A { }\n-\n-impl Bar for i32 {\n-    type Output = u32;\n-}\n-\n-\n-fn main() {}"}, {"sha": "c6dda7f277316f6fa65906c977a96f74410316ba", "filename": "src/test/ui/re_rebalance_coherence/coherence-tuple-conflict.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-use std::fmt::Debug;\n-use std::default::Default;\n-\n-// Test that a blank impl for all T conflicts with an impl for some\n-// specific T.\n-\n-trait MyTrait {\n-    fn get(&self) -> usize;\n-}\n-\n-impl<T> MyTrait for (T,T) {\n-    fn get(&self) -> usize { 0 }\n-}\n-\n-impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n-    fn get(&self) -> usize { self.dummy }\n-}\n-\n-fn main() { }"}, {"sha": "bd4f2908cdfe72db937fe234b1babf55d6615992", "filename": "src/test/ui/re_rebalance_coherence/coherence-tuple-conflict.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n-  --> $DIR/coherence-tuple-conflict.rs:27:1\n-   |\n-LL | impl<T> MyTrait for (T,T) {\n-   | ------------------------- first implementation here\n-...\n-LL | impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "6849f004c635d3227a61d9908b0dbf2ec64b5fe5", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local-2.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that a local, generic type appearing within a\n-// *non-fundamental* remote type like `Vec` is not considered local.\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote;\n-\n-struct Local<T>(T);\n-\n-impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0117\n-\n-fn main() { }"}, {"sha": "d507edbb0bde998b30c9419dce3bc5b467bdd9e7", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local-2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local-2.rs:23:1\n-   |\n-LL | impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "24a00febfd8f4c1e050c5b24553394eb6555fa6a", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that a local type (with no type parameters) appearing within a\n-// *non-fundamental* remote type like `Vec` is not considered local.\n-\n-// aux-build:coherence_lib.rs\n-\n-extern crate coherence_lib as lib;\n-use lib::Remote;\n-\n-struct Local;\n-\n-impl Remote for Vec<Local> { } //~ ERROR E0117\n-\n-fn main() { }"}, {"sha": "fc400da71155172391ab213f2784d05a66232565", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-vec-local.rs:23:1\n-   |\n-LL | impl Remote for Vec<Local> { } //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "5e09cf69a61affa458bc08581e8ac282d09e17ab", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codgen\n-#![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-trait MyTrait { fn foo() {} }\n-impl<T: lib::MyCopy> MyTrait for T { }\n-\n-// `MyFundamentalStruct` is declared fundamental, so we can test that\n-//\n-//    MyFundamentalStruct<MyTrait>: !MyTrait\n-//\n-// Huzzah.\n-impl MyTrait for lib::MyFundamentalStruct<MyType> { }\n-\n-\n-fn main() { }"}, {"sha": "8e5d2bf4cf7b60cc353a1c5008d52961e8ab358a", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-trait MyTrait { fn foo() {} }\n-impl<T: lib::MyCopy> MyTrait for T { }\n-\n-// `MyFundamentalStruct` is declared fundamental, so we can test that\n-//\n-//    MyFundamentalStruct<&MyTrait>: !MyTrait\n-//\n-// Huzzah.\n-impl<'a> MyTrait for lib::MyFundamentalStruct<&'a MyType> { }\n-\n-\n-fn main() { }"}, {"sha": "e7a8edbd221479063a2d14d0cb139f374c84dd1c", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-\n-\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-trait MyTrait { fn foo() {} }\n-\n-impl<T: lib::MyCopy> MyTrait for T { }\n-\n-// Tuples are not fundamental.\n-impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n-\n-\n-fn main() { }"}, {"sha": "e6adc08c28c37a3d196a393096a8e5758e9ea789", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:29:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "3f91750104b9a5c6c8b91adee35999bfabc59d76", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_struct.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_copy_like_lib.rs\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-trait MyTrait { fn foo() {} }\n-impl<T: lib::MyCopy> MyTrait for T { }\n-\n-// `MyStruct` is not declared fundamental, therefore this would\n-// require that\n-//\n-//     MyStruct<MyType>: !MyTrait\n-//\n-// which we cannot approve.\n-impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n-\n-fn main() { }"}, {"sha": "a40ae4fc4488d88050fddd5745aed5daa234afd5", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_struct.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n-  --> $DIR/coherence_copy_like_err_struct.rs:31:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "0e7eef6fe6de2e0ab0c8dd4ffa84f4faad1fb127", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_tuple.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-trait MyTrait { fn foo() {} }\n-impl<T: lib::MyCopy> MyTrait for T { }\n-\n-// Tuples are not fundamental, therefore this would require that\n-//\n-//     (MyType,): !MyTrait\n-//\n-// which we cannot approve.\n-impl MyTrait for (MyType,) { } //~ ERROR E0119\n-\n-fn main() { }"}, {"sha": "82e43f6d721eb395850a8944de51a9dbbba1fb37", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_tuple.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n-  --> $DIR/coherence_copy_like_err_tuple.rs:30:1\n-   |\n-LL | impl<T: lib::MyCopy> MyTrait for T { }\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl MyTrait for (MyType,) { } //~ ERROR E0119\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "d4d29326e4f789a0c541f35ef425320d4223b885", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// Tests that methods that implement a trait cannot be invoked\n-// unless the trait is imported.\n-\n-mod Lib {\n-    pub trait TheTrait {\n-        fn the_fn(&self);\n-    }\n-\n-    pub struct TheStruct;\n-\n-    impl TheTrait for TheStruct {\n-        fn the_fn(&self) {}\n-    }\n-}\n-\n-mod Import {\n-    // Trait is in scope here:\n-    use Lib::TheStruct;\n-    use Lib::TheTrait;\n-\n-    fn call_the_fn(s: &TheStruct) {\n-        s.the_fn();\n-    }\n-}\n-\n-mod NoImport {\n-    // Trait is not in scope here:\n-    use Lib::TheStruct;\n-\n-    fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "9294899bfee549a2a4bee1eea8da4f8a175190bc", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent.rs:43:11\n-   |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n-   |           ^^^^^^\n-   |\n-   = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           `use Lib::TheTrait;`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "beb60f57a2a2c10df1b5e76922f74cd6741dae8d", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent_cc.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(re_rebalance_coherence)]\n-\n-// aux-build:coherence_inherent_cc_lib.rs\n-\n-// Tests that methods that implement a trait cannot be invoked\n-// unless the trait is imported.\n-\n-extern crate coherence_inherent_cc_lib;\n-\n-mod Import {\n-    // Trait is in scope here:\n-    use coherence_inherent_cc_lib::TheStruct;\n-    use coherence_inherent_cc_lib::TheTrait;\n-\n-    fn call_the_fn(s: &TheStruct) {\n-        s.the_fn();\n-    }\n-}\n-\n-mod NoImport {\n-    // Trait is not in scope here:\n-    use coherence_inherent_cc_lib::TheStruct;\n-\n-    fn call_the_fn(s: &TheStruct) {\n-        s.the_fn(); //~ ERROR no method named `the_fn` found\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "bf67313879b7ebb4c71afcd025136b7fc19b7573", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent_cc.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,13 +0,0 @@\n-error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n-  --> $DIR/coherence_inherent_cc.rs:35:11\n-   |\n-LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n-   |           ^^^^^^\n-   |\n-   = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           `use coherence_inherent_cc_lib::TheTrait;`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "7f72ff7af8887886d1c071df02f3277a009f7a5c", "filename": "src/test/ui/re_rebalance_coherence/coherence_local.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-// These are all legal because they are all fundamental types:\n-\n-impl lib::MyCopy for MyType { }\n-impl<'a> lib::MyCopy for &'a MyType { }\n-impl<'a> lib::MyCopy for &'a Box<MyType> { }\n-impl lib::MyCopy for Box<MyType> { }\n-impl lib::MyCopy for lib::MyFundamentalStruct<MyType> { }\n-impl lib::MyCopy for lib::MyFundamentalStruct<Box<MyType>> { }\n-\n-\n-fn main() { }"}, {"sha": "3d7145e489d18cc89a6ce9d1a84e2edfad67e103", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_struct.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(re_rebalance_coherence)]\n-#![allow(dead_code)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-// These are all legal because they are all fundamental types:\n-\n-// MyStruct is not fundamental.\n-impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n-\n-\n-fn main() { }"}, {"sha": "c35e95040de1523cce18986743a4c0783076fb33", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_struct.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_struct.rs:26:1\n-   |\n-LL | impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "f2c9008dd8ca9cacc0e5a1d4ec76d8f195b77d90", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_tuple.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(re_rebalance_coherence)]\n-#![allow(dead_code)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-// These are all legal because they are all fundamental types:\n-\n-// Tuples are not fundamental, so this is not a local impl.\n-impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n-\n-\n-fn main() { }"}, {"sha": "a3f9f2d32b8f9249f7b046bf12f5bda5bfde8602", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_tuple.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,12 +0,0 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence_local_err_tuple.rs:26:1\n-   |\n-LL | impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n-   |\n-   = note: the impl does not reference any types defined in this crate\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0117`."}, {"sha": "b15a5cc245bf45e43183af8dd6176b544d1793e6", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_ref.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2888d5631c64216c472933fea51371e6c563818f/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs?ref=2888d5631c64216c472933fea51371e6c563818f", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we are able to introduce a negative constraint that\n-// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n-\n-// aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n-#![feature(re_rebalance_coherence)]\n-\n-extern crate coherence_copy_like_lib as lib;\n-\n-struct MyType { x: i32 }\n-\n-// naturally, legal\n-impl lib::MyCopy for MyType { }\n-\n-\n-fn main() { }"}]}