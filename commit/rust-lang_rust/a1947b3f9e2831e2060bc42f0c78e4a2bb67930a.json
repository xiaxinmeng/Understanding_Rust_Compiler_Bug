{"sha": "a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTQ3YjNmOWUyODMxZTIwNjBiYzQyZjBjNzhlNGEyYmI2NzkzMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T21:25:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T21:25:55Z"}, "message": "Auto merge of #76574 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nBiweekly Clippy update\n\nr? `@Manishearth`", "tree": {"sha": "12bcd37d232cd3bed1b9cef338c843aedba82e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12bcd37d232cd3bed1b9cef338c843aedba82e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "html_url": "https://github.com/rust-lang/rust/commit/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "html_url": "https://github.com/rust-lang/rust/commit/ad3a6f70ac9457173aa1f3f3af372aadec915f8d"}, {"sha": "ca6c695320e2ee35b70d7ff3ebfbc747946c7a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6c695320e2ee35b70d7ff3ebfbc747946c7a3d", "html_url": "https://github.com/rust-lang/rust/commit/ca6c695320e2ee35b70d7ff3ebfbc747946c7a3d"}], "stats": {"total": 1776, "additions": 1360, "deletions": 416}, "files": [{"sha": "64f9379b303cda15d6cd5919d4208718149b8348", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 107, "deletions": 3, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -6,11 +6,113 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[c2c07fa...master](https://github.com/rust-lang/rust-clippy/compare/c2c07fa...master)\n+[09bd400...master](https://github.com/rust-lang/rust-clippy/compare/09bd400...master)\n+\n+## Rust 1.47\n+\n+Current beta, release 2020-10-08\n+\n+[c2c07fa...09bd400](https://github.com/rust-lang/rust-clippy/compare/c2c07fa...09bd400)\n+\n+### New lints\n+\n+* [`derive_ord_xor_partial_ord`] [#5848](https://github.com/rust-lang/rust-clippy/pull/5848)\n+* [`trait_duplication_in_bounds`] [#5852](https://github.com/rust-lang/rust-clippy/pull/5852)\n+* [`map_identity`] [#5694](https://github.com/rust-lang/rust-clippy/pull/5694)\n+* [`unit_return_expecting_ord`] [#5737](https://github.com/rust-lang/rust-clippy/pull/5737)\n+* [`pattern_type_mismatch`] [#4841](https://github.com/rust-lang/rust-clippy/pull/4841)\n+* [`repeat_once`] [#5773](https://github.com/rust-lang/rust-clippy/pull/5773)\n+* [`same_item_push`] [#5825](https://github.com/rust-lang/rust-clippy/pull/5825)\n+* [`needless_arbitrary_self_type`] [#5869](https://github.com/rust-lang/rust-clippy/pull/5869)\n+* [`match_like_matches_macro`] [#5769](https://github.com/rust-lang/rust-clippy/pull/5769)\n+* [`stable_sort_primitive`] [#5809](https://github.com/rust-lang/rust-clippy/pull/5809)\n+* [`blanket_clippy_restriction_lints`] [#5750](https://github.com/rust-lang/rust-clippy/pull/5750)\n+* [`option_if_let_else`] [#5301](https://github.com/rust-lang/rust-clippy/pull/5301)\n+\n+### Moves and Deprecations\n+\n+* Deprecate [`regex_macro`] lint\n+  [#5760](https://github.com/rust-lang/rust-clippy/pull/5760)\n+* Move [`range_minus_one`] to `pedantic`\n+  [#5752](https://github.com/rust-lang/rust-clippy/pull/5752)\n+\n+### Enhancements\n+\n+* Improve [`needless_collect`] by catching `collect` calls followed by `iter` or `into_iter` calls\n+  [#5837](https://github.com/rust-lang/rust-clippy/pull/5837)\n+* [`panic`], [`todo`], [`unimplemented`] and [`unreachable`] now detect calls with formatting\n+  [#5811](https://github.com/rust-lang/rust-clippy/pull/5811)\n+* Detect more cases of [`suboptimal_flops`] and [`imprecise_flops`]\n+  [#5443](https://github.com/rust-lang/rust-clippy/pull/5443)\n+* Handle asymmetrical implementations of `PartialEq` in [`cmp_owned`]\n+  [#5701](https://github.com/rust-lang/rust-clippy/pull/5701)\n+* Make it possible to allow [`unsafe_derive_deserialize`]\n+  [#5870](https://github.com/rust-lang/rust-clippy/pull/5870)\n+* Catch `ord.min(a).max(b)` where a < b in [`min_max`]\n+  [#5871](https://github.com/rust-lang/rust-clippy/pull/5871)\n+* Make [`clone_on_copy`] suggestion machine applicable\n+  [#5745](https://github.com/rust-lang/rust-clippy/pull/5745)\n+* Enable [`len_zero`] on ranges now that `is_empty` is stable on them\n+  [#5961](https://github.com/rust-lang/rust-clippy/pull/5961)\n+\n+### False Positive Fixes\n+\n+* Avoid triggering [`or_fun_call`] with const fns that take no arguments\n+  [#5889](https://github.com/rust-lang/rust-clippy/pull/5889)\n+* Fix [`redundant_closure_call`] false positive for closures that have multiple calls\n+  [#5800](https://github.com/rust-lang/rust-clippy/pull/5800)\n+* Don't lint cases involving `ManuallyDrop` in [`redundant_clone`]\n+  [#5824](https://github.com/rust-lang/rust-clippy/pull/5824)\n+* Treat a single expression the same as a single statement in the 2nd arm of a match in [`single_match_else`]\n+  [#5771](https://github.com/rust-lang/rust-clippy/pull/5771)\n+* Don't trigger [`unnested_or_patterns`] if the feature `or_patterns` is not enabled\n+  [#5758](https://github.com/rust-lang/rust-clippy/pull/5758)\n+* Avoid linting if key borrows in [`unnecessary_sort_by`]\n+  [#5756](https://github.com/rust-lang/rust-clippy/pull/5756)\n+* Consider `Try` impl for `Poll` when generating suggestions in [`try_err`]\n+  [#5857](https://github.com/rust-lang/rust-clippy/pull/5857)\n+* Take input lifetimes into account in `manual_async_fn`\n+  [#5859](https://github.com/rust-lang/rust-clippy/pull/5859)\n+* Fix multiple false positives in [`type_repetition_in_bounds`] and add a configuration option\n+  [#5761](https://github.com/rust-lang/rust-clippy/pull/5761)\n+* Limit the [`suspicious_arithmetic_impl`] lint to one binary operation\n+  [#5820](https://github.com/rust-lang/rust-clippy/pull/5820)\n+\n+### Suggestion Fixes/Improvements\n+\n+* Improve readability of [`shadow_unrelated`] suggestion by truncating the RHS snippet\n+  [#5788](https://github.com/rust-lang/rust-clippy/pull/5788)\n+* Suggest `filter_map` instead of `flat_map` when mapping to `Option` in [`map_flatten`]\n+  [#5846](https://github.com/rust-lang/rust-clippy/pull/5846)\n+* Ensure suggestion is shown correctly for long method call chains in [`iter_nth_zero`]\n+  [#5793](https://github.com/rust-lang/rust-clippy/pull/5793)\n+* Drop borrow operator in suggestions of [`redundant_pattern_matching`]\n+  [#5815](https://github.com/rust-lang/rust-clippy/pull/5815)\n+* Add suggestion for [`iter_skip_next`]\n+  [#5843](https://github.com/rust-lang/rust-clippy/pull/5843)\n+* Improve [`collapsible_if`] fix suggestion\n+  [#5732](https://github.com/rust-lang/rust-clippy/pull/5732)\n+\n+### ICE Fixes\n+\n+* Fix ICE caused by [`needless_collect`]\n+  [#5877](https://github.com/rust-lang/rust-clippy/pull/5877)\n+* Fix ICE caused by [`unnested_or_patterns`]\n+  [#5784](https://github.com/rust-lang/rust-clippy/pull/5784)\n+\n+### Documentation Improvements\n+\n+* Fix grammar of [`await_holding_lock`] documentation\n+  [#5748](https://github.com/rust-lang/rust-clippy/pull/5748)\n+\n+### Others\n+\n+* Make lints adhere to the rustc dev guide\n+  [#5888](https://github.com/rust-lang/rust-clippy/pull/5888)\n \n ## Rust 1.46\n \n-Current beta, release 2020-08-27\n+Current stable, released 2020-08-27\n \n [7ea7cd1...c2c07fa](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...c2c07fa)\n \n@@ -72,7 +174,7 @@ Current beta, release 2020-08-27\n \n ## Rust 1.45\n \n-Current stable, released 2020-07-16\n+Released 2020-07-16\n \n [891e1a8...7ea7cd1](https://github.com/rust-lang/rust-clippy/compare/891e1a8...7ea7cd1)\n \n@@ -1410,6 +1512,7 @@ Released 2018-09-13\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n+[`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map\n@@ -1444,6 +1547,7 @@ Released 2018-09-13\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n+[`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n [`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call"}, {"sha": "88d9d3b5a263d06ee312b6cc0be90f30852e5acf", "filename": "src/tools/clippy/clippy_lints/src/async_yields_async.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,86 @@\n+use crate::utils::{implements_trait, snippet, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for async blocks that yield values of types\n+    /// that can themselves be awaited.\n+    ///\n+    /// **Why is this bad?** An await is likely missing.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo()\n+    ///   };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo().await\n+    ///   };\n+    /// }\n+    /// ```\n+    pub ASYNC_YIELDS_ASYNC,\n+    correctness,\n+    \"async blocks that return a type that can be awaited\"\n+}\n+\n+declare_lint_pass!(AsyncYieldsAsync => [ASYNC_YIELDS_ASYNC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n+    fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n+        use AsyncGeneratorKind::{Block, Closure};\n+        // For functions, with explicitly defined types, don't warn.\n+        // XXXkhuey maybe we should?\n+        if let Some(GeneratorKind::Async(Block | Closure)) = body.generator_kind {\n+            if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait() {\n+                let body_id = BodyId {\n+                    hir_id: body.value.hir_id,\n+                };\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+                let typeck_results = cx.tcx.typeck(def_id);\n+                let expr_ty = typeck_results.expr_ty(&body.value);\n+\n+                if implements_trait(cx, expr_ty, future_trait_def_id, &[]) {\n+                    let return_expr_span = match &body.value.kind {\n+                        // XXXkhuey there has to be a better way.\n+                        ExprKind::Block(block, _) => block.expr.map(|e| e.span),\n+                        ExprKind::Path(QPath::Resolved(_, path)) => Some(path.span),\n+                        _ => None,\n+                    };\n+                    if let Some(return_expr_span) = return_expr_span {\n+                        span_lint_and_then(\n+                            cx,\n+                            ASYNC_YIELDS_ASYNC,\n+                            return_expr_span,\n+                            \"an async construct yields a type which is itself awaitable\",\n+                            |db| {\n+                                db.span_label(body.value.span, \"outer async construct\");\n+                                db.span_label(return_expr_span, \"awaitable value not awaited\");\n+                                db.span_suggestion(\n+                                    return_expr_span,\n+                                    \"consider awaiting this value\",\n+                                    format!(\"{}.await\", snippet(cx, return_expr_span, \"..\")),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "c8f153e7201cb12988e0030f928446f7490bcda2", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -71,8 +71,9 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n-    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]` and\n-    /// `#[allow(unreachable_pub)]` on `use` items and `#[allow(unused_imports)]` on\n+    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n+    /// `#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n+    /// `#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n     /// `extern crate` items with a `#[macro_use]` attribute.\n     ///\n     /// **Why is this bad?** Lint attributes have no effect on crate imports. Most\n@@ -318,7 +319,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                         if let Some(ident) = attr.ident() {\n                             match &*ident.as_str() {\n                                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // permit `unused_imports`, `deprecated` and `unreachable_pub` for `use` items\n+                                    // permit `unused_imports`, `deprecated`, `unreachable_pub`,\n+                                    // `clippy::wildcard_imports`, and `clippy::enum_glob_use` for `use` items\n                                     // and `unused_imports` for `extern crate` items with `macro_use`\n                                     for lint in lint_list {\n                                         match item.kind {\n@@ -327,6 +329,9 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                                     || is_word(lint, sym!(deprecated))\n                                                     || is_word(lint, sym!(unreachable_pub))\n                                                     || is_word(lint, sym!(unused))\n+                                                    || extract_clippy_lint(lint)\n+                                                        .map_or(false, |s| s == \"wildcard_imports\")\n+                                                    || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n                                                 {\n                                                     return;\n                                                 }\n@@ -387,24 +392,25 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n }\n \n-fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n-    fn extract_name(lint: &NestedMetaItem) -> Option<SymbolStr> {\n-        if_chain! {\n-            if let Some(meta_item) = lint.meta_item();\n-            if meta_item.path.segments.len() > 1;\n-            if let tool_name = meta_item.path.segments[0].ident;\n-            if tool_name.as_str() == \"clippy\";\n-            let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            then {\n-                return Some(lint_name.as_str());\n-            }\n+/// Returns the lint name if it is clippy lint.\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+    if_chain! {\n+        if let Some(meta_item) = lint.meta_item();\n+        if meta_item.path.segments.len() > 1;\n+        if let tool_name = meta_item.path.segments[0].ident;\n+        if tool_name.as_str() == \"clippy\";\n+        let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n+        then {\n+            return Some(lint_name.as_str());\n         }\n-        None\n     }\n+    None\n+}\n \n+fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n     let lint_store = cx.lints();\n     for lint in items {\n-        if let Some(lint_name) = extract_name(lint) {\n+        if let Some(lint_name) = extract_clippy_lint(lint) {\n             if let CheckLintNameResult::Tool(Err((None, _))) =\n                 lint_store.check_lint_name(&lint_name, Some(sym!(clippy)))\n             {"}, {"sha": "4002fb655a5ebe18d99bed1c4933ed0d74992527", "filename": "src/tools/clippy/clippy_lints/src/create_dir.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcreate_dir.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,51 @@\n+use crate::utils::{match_def_path, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks usage of `std::fs::create_dir` and suggest using `std::fs::create_dir_all` instead.\n+    ///\n+    /// **Why is this bad?** Sometimes `std::fs::crate_dir` is mistakenly chosen over `std::fs::create_dir_all`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// std::fs::create_dir(\"foo\");\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// std::fs::create_dir_all(\"foo\");\n+    /// ```\n+    pub CREATE_DIR,\n+    restriction,\n+    \"calling `std::fs::create_dir` instead of `std::fs::create_dir_all`\"\n+}\n+\n+declare_lint_pass!(CreateDir => [CREATE_DIR]);\n+\n+impl LateLintPass<'_> for CreateDir {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref args) = expr.kind;\n+            if let ExprKind::Path(ref path) = func.kind;\n+            if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n+            if match_def_path(cx, def_id, &paths::STD_FS_CREATE_DIR);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    CREATE_DIR,\n+                    expr.span,\n+                    \"calling `std::fs::create_dir` where there may be a better way\",\n+                    \"consider calling `std::fs::create_dir_all` instead\",\n+                    format!(\"create_dir_all({})\", snippet(cx, args[0].span, \"..\")),\n+                    Applicability::MaybeIncorrect,\n+                )\n+            }\n+        }\n+    }\n+}"}, {"sha": "3048436d9a7b5f30d066fc7374fd2db090d9e2db", "filename": "src/tools/clippy/clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -38,37 +38,23 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n             if let ExprKind::Path(ref qpath) = path.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            // Detect and ignore <Foo as Default>::default() because these calls do explicitly name the type.\n+            if let QPath::Resolved(None, _path) = qpath;\n             then {\n-                match qpath {\n-                    QPath::Resolved(..) => {\n-                        if_chain! {\n-                            // Detect and ignore <Foo as Default>::default() because these calls do\n-                            // explicitly name the type.\n-                            if let ExprKind::Call(ref method, ref _args) = expr.kind;\n-                            if let ExprKind::Path(ref p) = method.kind;\n-                            if let QPath::Resolved(Some(_ty), _path) = p;\n-                            then {\n-                                return;\n-                            }\n-                        }\n-\n-                        // TODO: Work out a way to put \"whatever the imported way of referencing\n-                        // this type in this file\" rather than a fully-qualified type.\n-                        let expr_ty = cx.typeck_results().expr_ty(expr);\n-                        if let ty::Adt(..) = expr_ty.kind() {\n-                            let replacement = format!(\"{}::default()\", expr_ty);\n-                            span_lint_and_sugg(\n-                                cx,\n-                                DEFAULT_TRAIT_ACCESS,\n-                                expr.span,\n-                                &format!(\"calling `{}` is more clear than this expression\", replacement),\n-                                \"try\",\n-                                replacement,\n-                                Applicability::Unspecified, // First resolve the TODO above\n-                            );\n-                         }\n-                    },\n-                    QPath::TypeRelative(..) | QPath::LangItem(..) => {},\n+                let expr_ty = cx.typeck_results().expr_ty(expr);\n+                if let ty::Adt(def, ..) = expr_ty.kind() {\n+                    // TODO: Work out a way to put \"whatever the imported way of referencing\n+                    // this type in this file\" rather than a fully-qualified type.\n+                    let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n+                    span_lint_and_sugg(\n+                        cx,\n+                        DEFAULT_TRAIT_ACCESS,\n+                        expr.span,\n+                        &format!(\"calling `{}` is more clear than this expression\", replacement),\n+                        \"try\",\n+                        replacement,\n+                        Applicability::Unspecified, // First resolve the TODO above\n+                    );\n                 }\n             }\n         }"}, {"sha": "50b39cf4ea7c07109680bab252029431dc613017", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -374,7 +374,12 @@ impl<'tcx> Functions {\n         }\n \n         if line_count > self.max_lines {\n-            span_lint(cx, TOO_MANY_LINES, span, \"this function has a large number of lines\")\n+            span_lint(\n+                cx,\n+                TOO_MANY_LINES,\n+                span,\n+                &format!(\"this function has too many lines ({}/{})\", line_count, self.max_lines),\n+            )\n         }\n     }\n "}, {"sha": "2020ef78509b0c24f80f01f4105da0652462ebf9", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -154,6 +154,7 @@ mod arithmetic;\n mod as_conversions;\n mod assertions_on_constants;\n mod assign_ops;\n+mod async_yields_async;\n mod atomic_ordering;\n mod attrs;\n mod await_holding_lock;\n@@ -169,6 +170,7 @@ mod collapsible_if;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n+mod create_dir;\n mod dbg_macro;\n mod default_trait_access;\n mod dereference;\n@@ -483,6 +485,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n+        &async_yields_async::ASYNC_YIELDS_ASYNC,\n         &atomic_ordering::INVALID_ATOMIC_ORDERING,\n         &attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         &attrs::DEPRECATED_CFG_ATTR,\n@@ -511,6 +514,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copies::MATCH_SAME_ARMS,\n         &copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n         &copy_iterator::COPY_ITERATOR,\n+        &create_dir::CREATE_DIR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n         &dereference::EXPLICIT_DEREF_METHODS,\n@@ -1042,6 +1046,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_late_pass(|| box create_dir::CreateDir);\n     store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n@@ -1099,11 +1104,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n         LintId::of(&as_conversions::AS_CONVERSIONS),\n+        LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         LintId::of(&exit::EXIT),\n@@ -1232,6 +1239,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n@@ -1675,6 +1683,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n         LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),"}, {"sha": "6c54c07869ad1a6a2b7f1814fef1ed6ee20718d6", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 64, "deletions": 36, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1131,6 +1131,27 @@ fn detect_same_item_push<'tcx>(\n     body: &'tcx Expr<'_>,\n     _: &'tcx Expr<'_>,\n ) {\n+    fn emit_lint(cx: &LateContext<'_>, vec: &Expr<'_>, pushed_item: &Expr<'_>) {\n+        let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+        let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+\n+        span_lint_and_help(\n+            cx,\n+            SAME_ITEM_PUSH,\n+            vec.span,\n+            \"it looks like the same item is being pushed into this Vec\",\n+            None,\n+            &format!(\n+                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                item_str, vec_str, item_str\n+            ),\n+        )\n+    }\n+\n+    if !matches!(pat.kind, PatKind::Wild) {\n+        return;\n+    }\n+\n     // Determine whether it is safe to lint the body\n     let mut same_item_push_visitor = SameItemPushVisitor {\n         should_lint: true,\n@@ -1140,43 +1161,50 @@ fn detect_same_item_push<'tcx>(\n     walk_expr(&mut same_item_push_visitor, body);\n     if same_item_push_visitor.should_lint {\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push {\n-            // Make sure that the push does not involve possibly mutating values\n-            if let PatKind::Wild = pat.kind {\n-                let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n-                let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n-                if let ExprKind::Path(ref qpath) = pushed_item.kind {\n-                    if_chain! {\n-                        if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id);\n-                        let node = cx.tcx.hir().get(hir_id);\n-                        if let Node::Binding(pat) = node;\n-                        if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                        if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n-                        then {\n-                            span_lint_and_help(\n-                                cx,\n-                                SAME_ITEM_PUSH,\n-                                vec.span,\n-                                \"it looks like the same item is being pushed into this Vec\",\n-                                None,\n-                                &format!(\n-                                    \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                    item_str, vec_str, item_str\n-                                ),\n-                            )\n+            let vec_ty = cx.typeck_results().expr_ty(vec);\n+            let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .clone_trait()\n+                .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n+            {\n+                // Make sure that the push does not involve possibly mutating values\n+                match pushed_item.kind {\n+                    ExprKind::Path(ref qpath) => {\n+                        match qpath_res(cx, qpath, pushed_item.hir_id) {\n+                            // immutable bindings that are initialized with literal or constant\n+                            Res::Local(hir_id) => {\n+                                if_chain! {\n+                                    let node = cx.tcx.hir().get(hir_id);\n+                                    if let Node::Binding(pat) = node;\n+                                    if let PatKind::Binding(bind_ann, ..) = pat.kind;\n+                                    if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n+                                    let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n+                                    if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n+                                    if let Some(init) = parent_let_expr.init;\n+                                    then {\n+                                        match init.kind {\n+                                            // immutable bindings that are initialized with literal\n+                                            ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n+                                            // immutable bindings that are initialized with constant\n+                                            ExprKind::Path(ref path) => {\n+                                                if let Res::Def(DefKind::Const, ..) = qpath_res(cx, path, init.hir_id) {\n+                                                    emit_lint(cx, vec, pushed_item);\n+                                                }\n+                                            }\n+                                            _ => {},\n+                                        }\n+                                    }\n+                                }\n+                            },\n+                            // constant\n+                            Res::Def(DefKind::Const, ..) => emit_lint(cx, vec, pushed_item),\n+                            _ => {},\n                         }\n-                    }\n-                } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n-                    span_lint_and_help(\n-                        cx,\n-                        SAME_ITEM_PUSH,\n-                        vec.span,\n-                        \"it looks like the same item is being pushed into this Vec\",\n-                        None,\n-                        &format!(\n-                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                            item_str, vec_str, item_str\n-                        ),\n-                    )\n+                    },\n+                    ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n+                    _ => {},\n                 }\n             }\n         }"}, {"sha": "076ef235b8bd80cc7d0cbada94d2b2d217ad3a10", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -9,7 +9,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `option.map(f)` where f is a function\n-    /// or closure that returns the unit type.\n+    /// or closure that returns the unit type `()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more clearly with\n     /// an if let statement\n@@ -51,7 +51,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `result.map(f)` where f is a function\n-    /// or closure that returns the unit type.\n+    /// or closure that returns the unit type `()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more clearly with\n     /// an if let statement\n@@ -197,7 +197,7 @@ fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n     format!(\n-        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type\",\n+        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type `()`\",\n         map_type, function_type\n     )\n }"}, {"sha": "ba69c8266b1182be338a48dfb85571a9acb83ba8", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1324,20 +1324,20 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using push_str with a single-character string literal,\n-    /// and push with a char would work fine.\n+    /// **What it does:** Warns when using `push_str` with a single-character string literal,\n+    /// and `push` with a `char` would work fine.\n     ///\n-    /// **Why is this bad?** It's less clear that we are pushing a single character\n+    /// **Why is this bad?** It's less clear that we are pushing a single character.\n     ///\n     /// **Known problems:** None\n     ///\n     /// **Example:**\n-    /// ```\n+    /// ```rust\n     /// let mut string = String::new();\n     /// string.push_str(\"R\");\n     /// ```\n     /// Could be written as\n-    /// ```\n+    /// ```rust\n     /// let mut string = String::new();\n     /// string.push('R');\n     /// ```"}, {"sha": "fb891866364ccbc9730697e739d923681d9b8094", "filename": "src/tools/clippy/clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -21,11 +21,8 @@ declare_clippy_lint! {\n     \"assignments to temporaries\"\n }\n \n-fn is_temporary(_cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    match &expr.kind {\n-        ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n-        _ => false,\n-    }\n+fn is_temporary(expr: &Expr<'_>) -> bool {\n+    matches!(&expr.kind, ExprKind::Struct(..) | ExprKind::Tup(..))\n }\n \n declare_lint_pass!(TemporaryAssignment => [TEMPORARY_ASSIGNMENT]);\n@@ -37,7 +34,7 @@ impl<'tcx> LateLintPass<'tcx> for TemporaryAssignment {\n             while let ExprKind::Field(f, _) | ExprKind::Index(f, _) = &base.kind {\n                 base = f;\n             }\n-            if is_temporary(cx, base) && !is_adjusted(cx, base) {\n+            if is_temporary(base) && !is_adjusted(cx, base) {\n                 span_lint(cx, TEMPORARY_ASSIGNMENT, expr.span, \"assignment to temporary\");\n             }\n         }"}, {"sha": "c75adb62f2575aedab44e40b1b8163b0522a8f84", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -331,8 +331,9 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::TRANSMUTE);\n             then {\n-                // Avoid suggesting from/to bits in const contexts.\n+                // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n                 // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n+                // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n                 let const_context = in_constant(cx, e.hir_id);\n \n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n@@ -486,7 +487,8 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                     Applicability::Unspecified,\n                                 );\n                             } else {\n-                                if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n+                                if (cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty))\n+                                    && !const_context {\n                                     span_lint_and_then(\n                                         cx,\n                                         TRANSMUTE_PTR_TO_PTR,"}, {"sha": "6c6188d61ad52fc6f492453ec95667fba4e67662", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 88, "deletions": 36, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -11,8 +11,8 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitFn,\n-    TraitItem, TraitItemKind, TyKind, UnOp,\n+    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n+    TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -31,12 +31,13 @@ use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    qpath_res, reindent_multiline, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Box<Vec<_>>` anywhere in the code.\n+    /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n     /// the heap. So if you `Box` it, you just add another level of indirection\n@@ -65,6 +66,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n+    /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n     /// the heap. So if you `Box` its contents, you just add another level of indirection.\n@@ -167,6 +169,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `&Box<T>` anywhere in the code.\n+    /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// **Why is this bad?** Any `&Box<T>` can also be a `&T`, which is more\n     /// general.\n@@ -802,6 +805,45 @@ impl<'tcx> LateLintPass<'tcx> for UnitArg {\n     }\n }\n \n+fn fmt_stmts_and_call(\n+    cx: &LateContext<'_>,\n+    call_expr: &Expr<'_>,\n+    call_snippet: &str,\n+    args_snippets: &[impl AsRef<str>],\n+    non_empty_block_args_snippets: &[impl AsRef<str>],\n+) -> String {\n+    let call_expr_indent = indent_of(cx, call_expr.span).unwrap_or(0);\n+    let call_snippet_with_replacements = args_snippets\n+        .iter()\n+        .fold(call_snippet.to_owned(), |acc, arg| acc.replacen(arg.as_ref(), \"()\", 1));\n+\n+    let mut stmts_and_call = non_empty_block_args_snippets\n+        .iter()\n+        .map(|it| it.as_ref().to_owned())\n+        .collect::<Vec<_>>();\n+    stmts_and_call.push(call_snippet_with_replacements);\n+    stmts_and_call = stmts_and_call\n+        .into_iter()\n+        .map(|v| reindent_multiline(v.into(), true, Some(call_expr_indent)).into_owned())\n+        .collect();\n+\n+    let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n+    // expr is not in a block statement or result expression position, wrap in a block\n+    let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(call_expr.hir_id));\n+    if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n+        let block_indent = call_expr_indent + 4;\n+        stmts_and_call_snippet =\n+            reindent_multiline(stmts_and_call_snippet.into(), true, Some(block_indent)).into_owned();\n+        stmts_and_call_snippet = format!(\n+            \"{{\\n{}{}\\n{}}}\",\n+            \" \".repeat(block_indent),\n+            &stmts_and_call_snippet,\n+            \" \".repeat(call_expr_indent)\n+        );\n+    }\n+    stmts_and_call_snippet\n+}\n+\n fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     let (singular, plural) = if args_to_recover.len() > 1 {\n@@ -844,43 +886,52 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                         Applicability::MaybeIncorrect,\n                     );\n                     or = \"or \";\n+                    applicability = Applicability::MaybeIncorrect;\n                 });\n-            let sugg = args_to_recover\n+\n+            let arg_snippets: Vec<String> = args_to_recover\n+                .iter()\n+                .filter_map(|arg| snippet_opt(cx, arg.span))\n+                .collect();\n+            let arg_snippets_without_empty_blocks: Vec<String> = args_to_recover\n                 .iter()\n                 .filter(|arg| !is_empty_block(arg))\n-                .enumerate()\n-                .map(|(i, arg)| {\n-                    let indent = if i == 0 {\n-                        0\n-                    } else {\n-                        indent_of(cx, expr.span).unwrap_or(0)\n-                    };\n-                    format!(\n-                        \"{}{};\",\n-                        \" \".repeat(indent),\n-                        snippet_block_with_applicability(cx, arg.span, \"..\", Some(expr.span), &mut applicability)\n-                    )\n-                })\n-                .collect::<Vec<String>>();\n-            let mut and = \"\";\n-            if !sugg.is_empty() {\n-                let plural = if sugg.len() > 1 { \"s\" } else { \"\" };\n-                db.span_suggestion(\n-                    expr.span.with_hi(expr.span.lo()),\n-                    &format!(\"{}move the expression{} in front of the call...\", or, plural),\n-                    format!(\"{}\\n\", sugg.join(\"\\n\")),\n-                    applicability,\n+                .filter_map(|arg| snippet_opt(cx, arg.span))\n+                .collect();\n+\n+            if let Some(call_snippet) = snippet_opt(cx, expr.span) {\n+                let sugg = fmt_stmts_and_call(\n+                    cx,\n+                    expr,\n+                    &call_snippet,\n+                    &arg_snippets,\n+                    &arg_snippets_without_empty_blocks,\n                 );\n-                and = \"...and \"\n+\n+                if arg_snippets_without_empty_blocks.is_empty() {\n+                    db.multipart_suggestion(\n+                        &format!(\"use {}unit literal{} instead\", singular, plural),\n+                        args_to_recover\n+                            .iter()\n+                            .map(|arg| (arg.span, \"()\".to_string()))\n+                            .collect::<Vec<_>>(),\n+                        applicability,\n+                    );\n+                } else {\n+                    let plural = arg_snippets_without_empty_blocks.len() > 1;\n+                    let empty_or_s = if plural { \"s\" } else { \"\" };\n+                    let it_or_them = if plural { \"them\" } else { \"it\" };\n+                    db.span_suggestion(\n+                        expr.span,\n+                        &format!(\n+                            \"{}move the expression{} in front of the call and replace {} with the unit literal `()`\",\n+                            or, empty_or_s, it_or_them\n+                        ),\n+                        sugg,\n+                        applicability,\n+                    );\n+                }\n             }\n-            db.multipart_suggestion(\n-                &format!(\"{}use {}unit literal{} instead\", and, singular, plural),\n-                args_to_recover\n-                    .iter()\n-                    .map(|arg| (arg.span, \"()\".to_string()))\n-                    .collect::<Vec<_>>(),\n-                applicability,\n-            );\n         },\n     );\n }\n@@ -2055,6 +2106,7 @@ impl PartialOrd for FullInt {\n         })\n     }\n }\n+\n impl Ord for FullInt {\n     #[must_use]\n     fn cmp(&self, other: &Self) -> Ordering {"}, {"sha": "9b6a9075a2954b8e0c7753f63309c86a4aa6a785", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,5 +1,4 @@\n use crate::utils;\n-use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -171,12 +170,22 @@ fn mirrored_exprs(\n }\n \n fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n+    // NOTE: Vectors of references are not supported. In order to avoid hitting https://github.com/rust-lang/rust/issues/34162,\n+    // (different unnamed lifetimes for closure arg and return type) we need to make sure the suggested\n+    // closure parameter is not a reference in case we suggest `Reverse`. Trying to destructure more\n+    // than one level of references would add some extra complexity as we would have to compensate\n+    // in the closure body.\n+\n     if_chain! {\n         if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n-        if utils::match_type(cx, &cx.typeck_results().expr_ty(vec), &paths::VEC);\n+        let vec_ty = cx.typeck_results().expr_ty(vec);\n+        if utils::is_type_diagnostic_item(cx, vec_ty, sym!(vec_type));\n+        let ty = vec_ty.walk().nth(1).unwrap().expect_ty(); // T in Vec<T>\n+        if !matches!(&ty.kind(), ty::Ref(..));\n+        if utils::is_copy(cx, ty);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &[\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},"}, {"sha": "fa8dd210ebadd12bc68a22a794cd339bc84aff74", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -191,7 +191,9 @@ pub fn eq_stmt(l: &Stmt, r: &Stmt) -> bool {\n         (Item(l), Item(r)) => eq_item(l, r, eq_item_kind),\n         (Expr(l), Expr(r)) | (Semi(l), Semi(r)) => eq_expr(l, r),\n         (Empty, Empty) => true,\n-        (MacCall(l), MacCall(r)) => l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r)),\n+        (MacCall(l), MacCall(r)) => {\n+            l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        },\n         _ => false,\n     }\n }"}, {"sha": "9c5a12ea9c8e1674e7be4e522437555e156b977e", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -122,7 +122,7 @@ define_Conf! {\n         \"IPv4\", \"IPv6\",\n         \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\",\n         \"NaN\", \"NaNs\",\n-        \"OAuth\",\n+        \"OAuth\", \"GraphQL\",\n         \"OCaml\",\n         \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\",\n         \"TensorFlow\","}, {"sha": "3ebbfed6456273638409bceffc8f6faa9c572d02", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -19,6 +19,7 @@ pub mod paths;\n pub mod ptr;\n pub mod sugg;\n pub mod usage;\n+\n pub use self::attrs::*;\n pub use self::diagnostics::*;\n pub use self::hir_utils::{both, eq_expr_value, over, SpanlessEq, SpanlessHash};\n@@ -108,6 +109,7 @@ pub fn in_macro(span: Span) -> bool {\n         false\n     }\n }\n+\n // If the snippet is empty, it's an attribute that was inserted during macro\n // expansion and we want to ignore those, because they could come from external\n // sources that the user has no control over.\n@@ -571,7 +573,7 @@ pub fn snippet_block<'a, T: LintContext>(\n ) -> Cow<'a, str> {\n     let snip = snippet(cx, span, default);\n     let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n-    trim_multiline(snip, true, indent)\n+    reindent_multiline(snip, true, indent)\n }\n \n /// Same as `snippet_block`, but adapts the applicability level by the rules of\n@@ -585,7 +587,7 @@ pub fn snippet_block_with_applicability<'a, T: LintContext>(\n ) -> Cow<'a, str> {\n     let snip = snippet_with_applicability(cx, span, default, applicability);\n     let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n-    trim_multiline(snip, true, indent)\n+    reindent_multiline(snip, true, indent)\n }\n \n /// Returns a new Span that extends the original Span to the first non-whitespace char of the first\n@@ -661,16 +663,16 @@ pub fn expr_block<'a, T: LintContext>(\n     }\n }\n \n-/// Trim indentation from a multiline string with possibility of ignoring the\n-/// first line.\n-fn trim_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n-    let s_space = trim_multiline_inner(s, ignore_first, indent, ' ');\n-    let s_tab = trim_multiline_inner(s_space, ignore_first, indent, '\\t');\n-    trim_multiline_inner(s_tab, ignore_first, indent, ' ')\n+/// Reindent a multiline string with possibility of ignoring the first line.\n+#[allow(clippy::needless_pass_by_value)]\n+pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n+    let s_space = reindent_multiline_inner(&s, ignore_first, indent, ' ');\n+    let s_tab = reindent_multiline_inner(&s_space, ignore_first, indent, '\\t');\n+    reindent_multiline_inner(&s_tab, ignore_first, indent, ' ').into()\n }\n \n-fn trim_multiline_inner(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>, ch: char) -> Cow<'_, str> {\n-    let mut x = s\n+fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>, ch: char) -> String {\n+    let x = s\n         .lines()\n         .skip(ignore_first as usize)\n         .filter_map(|l| {\n@@ -683,26 +685,20 @@ fn trim_multiline_inner(s: Cow<'_, str>, ignore_first: bool, indent: Option<usiz\n         })\n         .min()\n         .unwrap_or(0);\n-    if let Some(indent) = indent {\n-        x = x.saturating_sub(indent);\n-    }\n-    if x > 0 {\n-        Cow::Owned(\n-            s.lines()\n-                .enumerate()\n-                .map(|(i, l)| {\n-                    if (ignore_first && i == 0) || l.is_empty() {\n-                        l\n-                    } else {\n-                        l.split_at(x).1\n-                    }\n-                })\n-                .collect::<Vec<_>>()\n-                .join(\"\\n\"),\n-        )\n-    } else {\n-        s\n-    }\n+    let indent = indent.unwrap_or(0);\n+    s.lines()\n+        .enumerate()\n+        .map(|(i, l)| {\n+            if (ignore_first && i == 0) || l.is_empty() {\n+                l.to_owned()\n+            } else if x > indent {\n+                l.split_at(x - indent).1.to_owned()\n+            } else {\n+                \" \".repeat(indent - x) + l\n+            }\n+        })\n+        .collect::<Vec<String>>()\n+        .join(\"\\n\")\n }\n \n /// Gets the parent expression, if any \u2013- this is useful to constrain a lint.\n@@ -899,7 +895,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n                 // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn, def_id) if has_no_arguments(cx, def_id) => {\n+                def::Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) if has_no_arguments(cx, def_id) => {\n                     const_eval::is_const_fn(cx.tcx, def_id)\n                 },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n@@ -1432,7 +1428,7 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n             } else {\n                 unreachable!()\n             }\n-        }\n+        },\n         _ => false,\n     };\n \n@@ -1474,26 +1470,26 @@ macro_rules! unwrap_cargo_metadata {\n \n #[cfg(test)]\n mod test {\n-    use super::{trim_multiline, without_block_comments};\n+    use super::{reindent_multiline, without_block_comments};\n \n     #[test]\n-    fn test_trim_multiline_single_line() {\n-        assert_eq!(\"\", trim_multiline(\"\".into(), false, None));\n-        assert_eq!(\"...\", trim_multiline(\"...\".into(), false, None));\n-        assert_eq!(\"...\", trim_multiline(\"    ...\".into(), false, None));\n-        assert_eq!(\"...\", trim_multiline(\"\\t...\".into(), false, None));\n-        assert_eq!(\"...\", trim_multiline(\"\\t\\t...\".into(), false, None));\n+    fn test_reindent_multiline_single_line() {\n+        assert_eq!(\"\", reindent_multiline(\"\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"    ...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"\\t...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"\\t\\t...\".into(), false, None));\n     }\n \n     #[test]\n     #[rustfmt::skip]\n-    fn test_trim_multiline_block() {\n+    fn test_reindent_multiline_block() {\n         assert_eq!(\"\\\n     if x {\n         y\n     } else {\n         z\n-    }\", trim_multiline(\"    if x {\n+    }\", reindent_multiline(\"    if x {\n             y\n         } else {\n             z\n@@ -1503,7 +1499,7 @@ mod test {\n     \\ty\n     } else {\n     \\tz\n-    }\", trim_multiline(\"    if x {\n+    }\", reindent_multiline(\"    if x {\n         \\ty\n         } else {\n         \\tz\n@@ -1512,21 +1508,37 @@ mod test {\n \n     #[test]\n     #[rustfmt::skip]\n-    fn test_trim_multiline_empty_line() {\n+    fn test_reindent_multiline_empty_line() {\n         assert_eq!(\"\\\n     if x {\n         y\n \n     } else {\n         z\n-    }\", trim_multiline(\"    if x {\n+    }\", reindent_multiline(\"    if x {\n             y\n \n         } else {\n             z\n         }\".into(), false, None));\n     }\n \n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_reindent_multiline_lines_deeper() {\n+        assert_eq!(\"\\\n+        if x {\n+            y\n+        } else {\n+            z\n+        }\", reindent_multiline(\"\\\n+    if x {\n+        y\n+    } else {\n+        z\n+    }\".into(), true, Some(8)));\n+    }\n+\n     #[test]\n     fn test_without_block_comments_lines_without_block_comments() {\n         let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);"}, {"sha": "65320d6a0e0bd98e9230b0e1143c0bab5a519562", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -110,6 +110,7 @@ pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n+pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];"}, {"sha": "811fde388d15adbaeffbd998ddcf91ea91089f52", "filename": "src/tools/clippy/clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -132,7 +132,11 @@ impl<'a> Sugg<'a> {\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let snippet = snippet(cx, expr.span, default);\n+        let snippet = if expr.span.from_expansion() {\n+            snippet_with_macro_callsite(cx, expr.span, default)\n+        } else {\n+            snippet(cx, expr.span, default)\n+        };\n \n         match expr.kind {\n             ast::ExprKind::AddrOf(..)"}, {"sha": "6697835e950d982d1767421d138411d921ee37ba", "filename": "src/tools/clippy/src/lintlist/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -52,6 +52,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"assign_ops\",\n     },\n+    Lint {\n+        name: \"async_yields_async\",\n+        group: \"correctness\",\n+        desc: \"async blocks that return a type that can be awaited\",\n+        deprecation: None,\n+        module: \"async_yields_async\",\n+    },\n     Lint {\n         name: \"await_holding_lock\",\n         group: \"pedantic\",\n@@ -290,6 +297,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"copy_iterator\",\n     },\n+    Lint {\n+        name: \"create_dir\",\n+        group: \"restriction\",\n+        desc: \"calling `std::fs::create_dir` instead of `std::fs::create_dir_all`\",\n+        deprecation: None,\n+        module: \"create_dir\",\n+    },\n     Lint {\n         name: \"crosspointer_transmute\",\n         group: \"complexity\","}, {"sha": "a27ce945ca58461cc08fef154aef3ba7c3cc7f23", "filename": "src/tools/clippy/tests/ui-toml/functions_maxlines/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,4 @@\n-error: this function has a large number of lines\n+error: this function has too many lines (2/1)\n   --> $DIR/test.rs:18:1\n    |\n LL | / fn too_many_lines() {\n@@ -9,7 +9,7 @@ LL | | }\n    |\n    = note: `-D clippy::too-many-lines` implied by `-D warnings`\n \n-error: this function has a large number of lines\n+error: this function has too many lines (2/1)\n   --> $DIR/test.rs:38:1\n    |\n LL | / fn comment_before_code() {"}, {"sha": "9b1a7ac3ba9de85493244232abca89ce4d5d5452", "filename": "src/tools/clippy/tests/ui/async_yields_async.fixed", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _i = async {\n+        CustomFutureType.await\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _k = async || {\n+        CustomFutureType.await\n+    };\n+    let _l = async || CustomFutureType.await;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType.await\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "731c094edb42b16b7a8488293fb09affc43d92db", "filename": "src/tools/clippy/tests/ui/async_yields_async.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }\n+    };\n+    let _i = async {\n+        CustomFutureType\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+    let _k = async || {\n+        CustomFutureType\n+    };\n+    let _l = async || CustomFutureType;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "17d0c3751064ff2b2ddf604c4dc78af7f6d04676", "filename": "src/tools/clippy/tests/ui/async_yields_async.stderr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fasync_yields_async.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,96 @@\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:40:9\n+   |\n+LL |        let _h = async {\n+   |   ____________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+   = note: `-D clippy::async-yields-async` implied by `-D warnings`\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:45:9\n+   |\n+LL |       let _i = async {\n+   |  ____________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:51:9\n+   |\n+LL |        let _j = async || {\n+   |   _______________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:56:9\n+   |\n+LL |       let _k = async || {\n+   |  _______________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:58:23\n+   |\n+LL |     let _l = async || CustomFutureType;\n+   |                       ^^^^^^^^^^^^^^^^\n+   |                       |\n+   |                       outer async construct\n+   |                       awaitable value not awaited\n+   |                       help: consider awaiting this value: `CustomFutureType.await`\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:64:9\n+   |\n+LL |       let _m = async || {\n+   |  _______________________-\n+LL | |         println!(\"I'm bored\");\n+LL | |         // Some more stuff\n+LL | |\n+LL | |         // Finally something to await\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "efd4187947b201221058dbede468a1f1a76f841f", "filename": "src/tools/clippy/tests/ui/collapsible_if.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -135,4 +135,7 @@ fn main() {\n             if truth() {}\n         }\n     }\n+\n+    // Fix #5962\n+    if matches!(true, true) && matches!(true, true) {}\n }"}, {"sha": "657f32d38a32bc1a3714c8de089e6ade5a52c628", "filename": "src/tools/clippy/tests/ui/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -149,4 +149,9 @@ fn main() {\n             if truth() {}\n         }\n     }\n+\n+    // Fix #5962\n+    if matches!(true, true) {\n+        if matches!(true, true) {}\n+    }\n }"}, {"sha": "acd1ec3f2caeaf6a924529a5f1d9307e8ca9075a", "filename": "src/tools/clippy/tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -118,5 +118,13 @@ LL |         println!(\"Hello world!\");\n LL |     }\n    |\n \n-error: aborting due to 7 previous errors\n+error: this `if` statement can be collapsed\n+  --> $DIR/collapsible_if.rs:154:5\n+   |\n+LL | /     if matches!(true, true) {\n+LL | |         if matches!(true, true) {}\n+LL | |     }\n+   | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "8ed53a56ac043357ed4ad192d344eab357d99753", "filename": "src/tools/clippy/tests/ui/create_dir.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![allow(unused_must_use)]\n+#![warn(clippy::create_dir)]\n+\n+use std::fs::create_dir_all;\n+\n+fn create_dir() {}\n+\n+fn main() {\n+    // Should be warned\n+    create_dir_all(\"foo\");\n+    create_dir_all(\"bar\").unwrap();\n+\n+    // Shouldn't be warned\n+    create_dir();\n+    std::fs::create_dir_all(\"foobar\");\n+}"}, {"sha": "19c8fc24ba23fa26ff0ba6cf1419c26b70cb2d9d", "filename": "src/tools/clippy/tests/ui/create_dir.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![allow(unused_must_use)]\n+#![warn(clippy::create_dir)]\n+\n+use std::fs::create_dir_all;\n+\n+fn create_dir() {}\n+\n+fn main() {\n+    // Should be warned\n+    std::fs::create_dir(\"foo\");\n+    std::fs::create_dir(\"bar\").unwrap();\n+\n+    // Shouldn't be warned\n+    create_dir();\n+    std::fs::create_dir_all(\"foobar\");\n+}"}, {"sha": "67298fc47095c98144b7994fce1fc058ebed0cb6", "filename": "src/tools/clippy/tests/ui/create_dir.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcreate_dir.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,16 @@\n+error: calling `std::fs::create_dir` where there may be a better way\n+  --> $DIR/create_dir.rs:11:5\n+   |\n+LL |     std::fs::create_dir(\"foo\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `std::fs::create_dir_all` instead: `create_dir_all(\"foo\")`\n+   |\n+   = note: `-D clippy::create-dir` implied by `-D warnings`\n+\n+error: calling `std::fs::create_dir` where there may be a better way\n+  --> $DIR/create_dir.rs:12:5\n+   |\n+LL |     std::fs::create_dir(\"bar\").unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `std::fs::create_dir_all` instead: `create_dir_all(\"bar\")`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d05567a3f82493cf908778222291721a5555d7a5", "filename": "src/tools/clippy/tests/ui/default_trait_access.fixed", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -0,0 +1,106 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n+\n+use std::default;\n+use std::default::Default as D2;\n+use std::string;\n+\n+fn main() {\n+    let s1: String = std::string::String::default();\n+\n+    let s2 = String::default();\n+\n+    let s3: String = std::string::String::default();\n+\n+    let s4: String = std::string::String::default();\n+\n+    let s5 = string::String::default();\n+\n+    let s6: String = std::string::String::default();\n+\n+    let s7 = std::string::String::default();\n+\n+    let s8: String = DefaultFactory::make_t_badly();\n+\n+    let s9: String = DefaultFactory::make_t_nicely();\n+\n+    let s10 = DerivedDefault::default();\n+\n+    let s11: GenericDerivedDefault<String> = GenericDerivedDefault::default();\n+\n+    let s12 = GenericDerivedDefault::<String>::default();\n+\n+    let s13 = TupleDerivedDefault::default();\n+\n+    let s14: TupleDerivedDefault = TupleDerivedDefault::default();\n+\n+    let s15: ArrayDerivedDefault = ArrayDerivedDefault::default();\n+\n+    let s16 = ArrayDerivedDefault::default();\n+\n+    let s17: TupleStructDerivedDefault = TupleStructDerivedDefault::default();\n+\n+    let s18 = TupleStructDerivedDefault::default();\n+\n+    let s19 = <DerivedDefault as Default>::default();\n+\n+    println!(\n+        \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}], [{:?}]\",\n+        s1,\n+        s2,\n+        s3,\n+        s4,\n+        s5,\n+        s6,\n+        s7,\n+        s8,\n+        s9,\n+        s10,\n+        s11,\n+        s12,\n+        s13,\n+        s14,\n+        s15,\n+        s16,\n+        s17,\n+        s18,\n+        s19,\n+    );\n+}\n+\n+struct DefaultFactory;\n+\n+impl DefaultFactory {\n+    pub fn make_t_badly<T: Default>() -> T {\n+        Default::default()\n+    }\n+\n+    pub fn make_t_nicely<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct DerivedDefault {\n+    pub s: String,\n+}\n+\n+#[derive(Debug, Default)]\n+struct GenericDerivedDefault<T: Default + std::fmt::Debug> {\n+    pub s: T,\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleDerivedDefault {\n+    pub s: (String, String),\n+}\n+\n+#[derive(Debug, Default)]\n+struct ArrayDerivedDefault {\n+    pub s: [String; 10],\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleStructDerivedDefault(String);"}, {"sha": "447e70c0bbbea74d9fbe5958e3f3aceb9c60a64c", "filename": "src/tools/clippy/tests/ui/default_trait_access.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,7 @@\n-#![warn(clippy::default_trait_access)]\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n \n use std::default;\n use std::default::Default as D2;"}, {"sha": "df8a5b94ddcf3c81468744a3263fdd0b316964c5", "filename": "src/tools/clippy/tests/ui/default_trait_access.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,49 +1,53 @@\n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:8:22\n+  --> $DIR/default_trait_access.rs:11:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n-   = note: `-D clippy::default-trait-access` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/default_trait_access.rs:4:9\n+   |\n+LL | #![deny(clippy::default_trait_access)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:12:22\n+  --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:14:22\n+  --> $DIR/default_trait_access.rs:17:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:18:22\n+  --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:28:46\n+error: calling `GenericDerivedDefault::default()` is more clear than this expression\n+  --> $DIR/default_trait_access.rs:31:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n-   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n+   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault::default()`\n \n error: calling `TupleDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:34:36\n+  --> $DIR/default_trait_access.rs:37:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:36:36\n+  --> $DIR/default_trait_access.rs:39:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:40:42\n+  --> $DIR/default_trait_access.rs:43:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`"}, {"sha": "68c5d32846f19b69887d21d0b8dcf8c2157d9100", "filename": "src/tools/clippy/tests/ui/doc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -49,6 +49,16 @@ fn test_emphasis() {\n fn test_units() {\n }\n \n+/// This tests allowed identifiers.\n+/// DirectX\n+/// ECMAScript\n+/// OAuth GraphQL\n+/// TeX LaTeX BibTeX BibLaTeX\n+/// CamelCase (see also #2395)\n+/// be_sure_we_got_to_the_end_of_it\n+fn test_allowed() {\n+}\n+\n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/rust-lang/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n@@ -168,9 +178,6 @@ fn issue_1920() {}\n /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n fn issue_1832() {}\n \n-/// Ok: CamelCase (It should not be surrounded by backticks)\n-fn issue_2395() {}\n-\n /// An iterator over mycrate::Collection's values.\n /// It should not lint a `'static` lifetime in ticks.\n fn issue_2210() {}"}, {"sha": "23fca43590b4f5a11b85c810ee651e88af46fe4a", "filename": "src/tools/clippy/tests/ui/doc.stderr", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -54,131 +54,137 @@ error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the doc\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:58:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: you should put `link_with_underscores` between ticks in the documentation\n-  --> $DIR/doc.rs:52:22\n+  --> $DIR/doc.rs:62:22\n    |\n LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `inline_link2` between ticks in the documentation\n-  --> $DIR/doc.rs:55:21\n+  --> $DIR/doc.rs:65:21\n    |\n LL | /// It can also be [inline_link2].\n    |                     ^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:65:5\n+  --> $DIR/doc.rs:75:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:73:8\n+  --> $DIR/doc.rs:83:8\n    |\n LL | /// ## CamelCaseThing\n    |        ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:76:7\n+  --> $DIR/doc.rs:86:7\n    |\n LL | /// # CamelCaseThing\n    |       ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:78:22\n+  --> $DIR/doc.rs:88:22\n    |\n LL | /// Not a title #897 CamelCaseThing\n    |                      ^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:79:5\n+  --> $DIR/doc.rs:89:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:86:5\n+  --> $DIR/doc.rs:96:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:99:5\n+  --> $DIR/doc.rs:109:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:110:43\n+  --> $DIR/doc.rs:120:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:115:5\n+  --> $DIR/doc.rs:125:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:116:1\n+  --> $DIR/doc.rs:126:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:121:43\n+  --> $DIR/doc.rs:131:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:126:5\n+  --> $DIR/doc.rs:136:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:127:1\n+  --> $DIR/doc.rs:137:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:138:5\n+  --> $DIR/doc.rs:148:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:165:13\n+  --> $DIR/doc.rs:175:13\n    |\n LL | /// Not ok: http://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:166:13\n+  --> $DIR/doc.rs:176:13\n    |\n LL | /// Not ok: https://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:167:13\n+  --> $DIR/doc.rs:177:13\n    |\n LL | /// Not ok: http://www.unicode.org/\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:168:13\n+  --> $DIR/doc.rs:178:13\n    |\n LL | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `mycrate::Collection` between ticks in the documentation\n-  --> $DIR/doc.rs:174:22\n+  --> $DIR/doc.rs:181:22\n    |\n LL | /// An iterator over mycrate::Collection's values.\n    |                      ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 31 previous errors\n "}, {"sha": "dc6c8ba2f154d8cfd52adedb40601973c0bd9de3", "filename": "src/tools/clippy/tests/ui/functions_maxlines.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions_maxlines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions_maxlines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffunctions_maxlines.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,4 @@\n-error: this function has a large number of lines\n+error: this function has too many lines (102/100)\n   --> $DIR/functions_maxlines.rs:58:1\n    |\n LL | / fn bad_lines() {"}, {"sha": "d7d45ef9b0b334dd92827e6b92ce32f0e1c864b6", "filename": "src/tools/clippy/tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,135 +8,135 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:40:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:42:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:48:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:57:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:66:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:68:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:75:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:80:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:82:5\n    |\n LL |     option().map(do_nothing);}"}, {"sha": "5fb568672d35638a4fb027c61ad6f8aef687c6d1", "filename": "src/tools/clippy/tests/ui/or_fun_call.fixed", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -58,12 +58,6 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);\n \n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert_with(String::new);\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert_with(String::new);\n-\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n \n@@ -122,6 +116,17 @@ pub fn skip_const_fn_with_no_args() {\n         Some(42)\n     }\n     let _ = None.or(foo());\n+\n+    // See issue #5693.\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(1, vec![1]);\n+    map.entry(1).or_insert(vec![]);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n }\n \n fn main() {}"}, {"sha": "737b0f7e55bc7a56773f0e9b63e64e2a0626b67e", "filename": "src/tools/clippy/tests/ui/or_fun_call.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -58,12 +58,6 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n \n@@ -122,6 +116,17 @@ pub fn skip_const_fn_with_no_args() {\n         Some(42)\n     }\n     let _ = None.or(foo());\n+\n+    // See issue #5693.\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(1, vec![1]);\n+    map.entry(1).or_insert(vec![]);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n }\n \n fn main() {}"}, {"sha": "b8a436993f329f3d6f608a228fcee774841b3249", "filename": "src/tools/clippy/tests/ui/or_fun_call.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2For_fun_call.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -60,35 +60,23 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n-error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:19\n-   |\n-LL |     map.entry(42).or_insert(String::new());\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:65:21\n-   |\n-LL |     btree.entry(42).or_insert(String::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:68:21\n+  --> $DIR/or_fun_call.rs:62:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:93:35\n+  --> $DIR/or_fun_call.rs:87:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:97:10\n+  --> $DIR/or_fun_call.rs:91:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "4f3a8c6b7923986359d770df58bdc6e530410983", "filename": "src/tools/clippy/tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:35:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:37:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:45:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:47:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:52:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:61:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:70:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:72:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });"}, {"sha": "88e4efdb0f054dcf372f31e207f3ae3122ed8f2b", "filename": "src/tools/clippy/tests/ui/result_map_unit_fn_unfixable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n@@ -8,15 +8,15 @@ LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:25:5\n    |\n LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { ... }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:29:5\n    |\n LL |        x.field.map(|value| {\n@@ -30,23 +30,23 @@ LL | ||     });\n    | |_______|\n    | \n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:33:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { ... }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:37:5\n    |\n LL |     \"12\".parse::<i32>().map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(a) = \"12\".parse::<i32>() { diverge(a) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:43:5\n    |\n LL |     y.map(do_nothing);"}, {"sha": "a37c8782ec3300c58f887df041a048abf143159f", "filename": "src/tools/clippy/tests/ui/same_item_push.rs", "status": "modified", "additions": 83, "deletions": 29, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,5 +1,7 @@\n #![warn(clippy::same_item_push)]\n \n+const VALUE: u8 = 7;\n+\n fn mutate_increment(x: &mut u8) -> u8 {\n     *x += 1;\n     *x\n@@ -9,65 +11,81 @@ fn increment(x: u8) -> u8 {\n     x + 1\n }\n \n-fn main() {\n-    // Test for basic case\n-    let mut spaces = Vec::with_capacity(10);\n-    for _ in 0..10 {\n-        spaces.push(vec![b' ']);\n-    }\n+fn fun() -> usize {\n+    42\n+}\n \n-    let mut vec2: Vec<u8> = Vec::new();\n+fn main() {\n+    // ** linted cases **\n+    let mut vec: Vec<u8> = Vec::new();\n     let item = 2;\n     for _ in 5..=20 {\n-        vec2.push(item);\n+        vec.push(item);\n     }\n \n-    let mut vec3: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     for _ in 0..15 {\n         let item = 2;\n-        vec3.push(item);\n+        vec.push(item);\n     }\n \n-    let mut vec4: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     for _ in 0..15 {\n-        vec4.push(13);\n+        vec.push(13);\n+    }\n+\n+    let mut vec = Vec::new();\n+    for _ in 0..20 {\n+        vec.push(VALUE);\n+    }\n+\n+    let mut vec = Vec::new();\n+    let item = VALUE;\n+    for _ in 0..20 {\n+        vec.push(item);\n+    }\n+\n+    // ** non-linted cases **\n+    let mut spaces = Vec::with_capacity(10);\n+    for _ in 0..10 {\n+        spaces.push(vec![b' ']);\n     }\n \n     // Suggestion should not be given as pushed variable can mutate\n-    let mut vec5: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     let mut item: u8 = 2;\n     for _ in 0..30 {\n-        vec5.push(mutate_increment(&mut item));\n+        vec.push(mutate_increment(&mut item));\n     }\n \n-    let mut vec6: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     let mut item: u8 = 2;\n     let mut item2 = &mut mutate_increment(&mut item);\n     for _ in 0..30 {\n-        vec6.push(mutate_increment(item2));\n+        vec.push(mutate_increment(item2));\n     }\n \n-    let mut vec7: Vec<usize> = Vec::new();\n+    let mut vec: Vec<usize> = Vec::new();\n     for (a, b) in [0, 1, 4, 9, 16].iter().enumerate() {\n-        vec7.push(a);\n+        vec.push(a);\n     }\n \n-    let mut vec8: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     for i in 0..30 {\n-        vec8.push(increment(i));\n+        vec.push(increment(i));\n     }\n \n-    let mut vec9: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     for i in 0..30 {\n-        vec9.push(i + i * i);\n+        vec.push(i + i * i);\n     }\n \n     // Suggestion should not be given as there are multiple pushes that are not the same\n-    let mut vec10: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     let item: u8 = 2;\n     for _ in 0..30 {\n-        vec10.push(item);\n-        vec10.push(item * 2);\n+        vec.push(item);\n+        vec.push(item * 2);\n     }\n \n     // Suggestion should not be given as Vec is not involved\n@@ -82,16 +100,52 @@ fn main() {\n     for i in 0..30 {\n         vec_a.push(A { kind: i });\n     }\n-    let mut vec12: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     for a in vec_a {\n-        vec12.push(2u8.pow(a.kind));\n+        vec.push(2u8.pow(a.kind));\n     }\n \n     // Fix #5902\n-    let mut vec13: Vec<u8> = Vec::new();\n+    let mut vec: Vec<u8> = Vec::new();\n     let mut item = 0;\n     for _ in 0..10 {\n-        vec13.push(item);\n+        vec.push(item);\n         item += 10;\n     }\n+\n+    // Fix #5979\n+    let mut vec: Vec<std::fs::File> = Vec::new();\n+    for _ in 0..10 {\n+        vec.push(std::fs::File::open(\"foobar\").unwrap());\n+    }\n+    // Fix #5979\n+    #[derive(Clone)]\n+    struct S {}\n+\n+    trait T {}\n+    impl T for S {}\n+\n+    let mut vec: Vec<Box<dyn T>> = Vec::new();\n+    for _ in 0..10 {\n+        vec.push(Box::new(S {}));\n+    }\n+\n+    // Fix #5985\n+    let mut vec = Vec::new();\n+    let item = 42;\n+    let item = fun();\n+    for _ in 0..20 {\n+        vec.push(item);\n+    }\n+\n+    // Fix #5985\n+    let mut vec = Vec::new();\n+    let key = 1;\n+    for _ in 0..20 {\n+        let item = match key {\n+            1 => 10,\n+            _ => 0,\n+        };\n+        vec.push(item);\n+    }\n }"}, {"sha": "d9ffa15780ad004b17609a48ef8e241af1992c7e", "filename": "src/tools/clippy/tests/ui/same_item_push.stderr", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsame_item_push.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,35 +1,43 @@\n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:16:9\n+  --> $DIR/same_item_push.rs:23:9\n    |\n-LL |         spaces.push(vec![b' ']);\n-   |         ^^^^^^\n+LL |         vec.push(item);\n+   |         ^^^\n    |\n    = note: `-D clippy::same-item-push` implied by `-D warnings`\n-   = help: try using vec![vec![b' '];SIZE] or spaces.resize(NEW_SIZE, vec![b' '])\n+   = help: try using vec![item;SIZE] or vec.resize(NEW_SIZE, item)\n \n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:22:9\n+  --> $DIR/same_item_push.rs:29:9\n    |\n-LL |         vec2.push(item);\n-   |         ^^^^\n+LL |         vec.push(item);\n+   |         ^^^\n    |\n-   = help: try using vec![item;SIZE] or vec2.resize(NEW_SIZE, item)\n+   = help: try using vec![item;SIZE] or vec.resize(NEW_SIZE, item)\n \n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:28:9\n+  --> $DIR/same_item_push.rs:34:9\n    |\n-LL |         vec3.push(item);\n-   |         ^^^^\n+LL |         vec.push(13);\n+   |         ^^^\n    |\n-   = help: try using vec![item;SIZE] or vec3.resize(NEW_SIZE, item)\n+   = help: try using vec![13;SIZE] or vec.resize(NEW_SIZE, 13)\n \n error: it looks like the same item is being pushed into this Vec\n-  --> $DIR/same_item_push.rs:33:9\n+  --> $DIR/same_item_push.rs:39:9\n    |\n-LL |         vec4.push(13);\n-   |         ^^^^\n+LL |         vec.push(VALUE);\n+   |         ^^^\n    |\n-   = help: try using vec![13;SIZE] or vec4.resize(NEW_SIZE, 13)\n+   = help: try using vec![VALUE;SIZE] or vec.resize(NEW_SIZE, VALUE)\n \n-error: aborting due to 4 previous errors\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:45:9\n+   |\n+LL |         vec.push(item);\n+   |         ^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec.resize(NEW_SIZE, item)\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "b4a931043b00d4d0c7e3a0f5320d804345b1a09b", "filename": "src/tools/clippy/tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -54,11 +54,6 @@ fn main() {\n     ArrayStruct { array: [0] }.array[0] = 1;\n     (0, 0).0 = 1;\n \n-    A.0 = 2;\n-    B.field = 2;\n-    C.structure.field = 2;\n-    D.array[0] = 2;\n-\n     // no error\n     s.field = 1;\n     t.0 = 1;"}, {"sha": "26b03bdc74055665d927efde9bbd8ae50ccd6f71", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -51,4 +51,12 @@ fn transmute_ptr_to_ptr() {\n     let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n }\n \n+// dereferencing raw pointers in const contexts, should not lint as it's unstable (issue 5959)\n+const _: &() = {\n+    struct ZST;\n+    let zst = &ZST;\n+\n+    unsafe { std::mem::transmute::<&'static ZST, &'static ()>(zst) }\n+};\n+\n fn main() {}"}, {"sha": "fec115ff29d6699cd82adafbf5d34dbcc1e25d3a", "filename": "src/tools/clippy/tests/ui/unit_arg.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n+#![allow(\n+    clippy::no_effect,\n+    unused_must_use,\n+    unused_variables,\n+    clippy::unused_unit,\n+    clippy::or_fun_call\n+)]\n \n use std::fmt::Debug;\n \n@@ -47,6 +53,11 @@ fn bad() {\n             foo(3);\n         },\n     );\n+    // here Some(foo(2)) isn't the top level statement expression, wrap the suggestion in a block\n+    None.or(Some(foo(2)));\n+    // in this case, the suggestion can be inlined, no need for a surrounding block\n+    // foo(()); foo(()) instead of { foo(()); foo(()) }\n+    foo(foo(()))\n }\n \n fn ok() {"}, {"sha": "90fee3aab23b0c96cd3b8cff521f208ad8cff55d", "filename": "src/tools/clippy/tests/ui/unit_arg.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:23:5\n+  --> $DIR/unit_arg.rs:29:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -11,34 +11,28 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         1\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         1;\n LL |     };\n-   |\n-help: ...and use a unit literal instead\n-   |\n LL |     foo(());\n-   |         ^^\n+   |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:26:5\n+  --> $DIR/unit_arg.rs:32:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     foo(1);\n-   |\n-help: ...and use a unit literal instead\n-   |\n LL |     foo(());\n-   |         ^^\n+   |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:27:5\n+  --> $DIR/unit_arg.rs:33:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -50,20 +44,17 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         foo(2)\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         foo(1);\n LL |         foo(2);\n LL |     };\n-   |\n-help: ...and use a unit literal instead\n-   |\n LL |     foo(());\n-   |         ^^\n+   |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:5\n+  --> $DIR/unit_arg.rs:38:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,35 +65,29 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         1\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         1;\n LL |     };\n-   |\n-help: ...and use a unit literal instead\n-   |\n LL |     b.bar(());\n-   |           ^^\n+   |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:35:5\n+  --> $DIR/unit_arg.rs:41:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expressions in front of the call...\n+help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     foo(0);\n LL |     foo(1);\n-   |\n-help: ...and use unit literals instead\n-   |\n LL |     taking_multiple_units((), ());\n-   |                           ^^  ^^\n+   |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:36:5\n+  --> $DIR/unit_arg.rs:42:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -114,21 +99,18 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         foo(2)\n    |\n-help: or move the expressions in front of the call...\n+help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     foo(0);\n LL |     {\n LL |         foo(1);\n LL |         foo(2);\n LL |     };\n-   |\n-help: ...and use unit literals instead\n-   |\n LL |     taking_multiple_units((), ());\n-   |                           ^^  ^^\n+   |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:40:5\n+  --> $DIR/unit_arg.rs:46:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -147,7 +129,7 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |             foo(3)\n    |\n-help: or move the expressions in front of the call...\n+help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     {\n LL |         foo(0);\n@@ -156,26 +138,44 @@ LL |     };\n LL |     {\n LL |         foo(2);\n  ...\n-help: ...and use unit literals instead\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:57:13\n+   |\n+LL |     None.or(Some(foo(2)));\n+   |             ^^^^^^^^^^^^\n    |\n-LL |         (),\n-LL |         (),\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     None.or({\n+LL |         foo(2);\n+LL |         Some(())\n+LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:82:5\n+  --> $DIR/unit_arg.rs:60:5\n    |\n-LL |     Some(foo(1))\n+LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(1);\n+LL |     foo(());\n+LL |     foo(())\n    |\n-help: ...and use a unit literal instead\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:93:5\n    |\n+LL |     Some(foo(1))\n+   |     ^^^^^^^^^^^^\n+   |\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     foo(1);\n LL |     Some(())\n-   |          ^^\n+   |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "456b12a2c6b1654a7b18b2325603f740593ce8aa", "filename": "src/tools/clippy/tests/ui/unit_arg_empty_blocks.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -22,30 +22,24 @@ error: passing unit values to a function\n LL |     taking_two_units({}, foo(0));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     foo(0);\n-   |\n-help: ...and use unit literals instead\n-   |\n LL |     taking_two_units((), ());\n-   |                      ^^  ^^\n+   |\n \n error: passing unit values to a function\n   --> $DIR/unit_arg_empty_blocks.rs:18:5\n    |\n LL |     taking_three_units({}, foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expressions in front of the call...\n+help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     foo(0);\n LL |     foo(1);\n-   |\n-help: ...and use unit literals instead\n-   |\n LL |     taking_three_units((), (), ());\n-   |                        ^^  ^^  ^^\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ad0d0387db03cb81b3fe8224beea7cb9b8162678", "filename": "src/tools/clippy/tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -25,17 +25,25 @@ fn unnecessary_sort_by() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n+\n+    // Ignore vectors of references\n+    let mut vec: Vec<&&&isize> = vec![&&&3, &&&6, &&&1, &&&2, &&&5];\n+    vec.sort_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_unstable_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_by(|a, b| b.cmp(a));\n+    vec.sort_unstable_by(|a, b| b.cmp(a));\n }\n \n-// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+// Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`\n mod issue_5754 {\n-    struct Test(String);\n+    #[derive(Clone, Copy)]\n+    struct Test(usize);\n \n     #[derive(PartialOrd, Ord, PartialEq, Eq)]\n-    struct Wrapper<'a>(&'a str);\n+    struct Wrapper<'a>(&'a usize);\n \n     impl Test {\n-        fn name(&self) -> &str {\n+        fn name(&self) -> &usize {\n             &self.0\n         }\n \n@@ -60,7 +68,33 @@ mod issue_5754 {\n     }\n }\n \n+// `Vec::sort_by_key` closure parameter is `F: FnMut(&T) -> K`\n+// The suggestion is destructuring T and we know T is not a reference, so test that non-Copy T are\n+// not linted.\n+mod issue_6001 {\n+    struct Test(String);\n+\n+    impl Test {\n+        // Return an owned type so that we don't hit the fix for 5754\n+        fn name(&self) -> String {\n+            self.0.clone()\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(&b.name()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(&b.name()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(&a.name()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(&a.name()));\n+    }\n+}\n+\n fn main() {\n     unnecessary_sort_by();\n     issue_5754::test();\n+    issue_6001::test();\n }"}, {"sha": "9746f6e6849ddb46c632e498783c73f633418169", "filename": "src/tools/clippy/tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_sort_by.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -25,17 +25,25 @@ fn unnecessary_sort_by() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n+\n+    // Ignore vectors of references\n+    let mut vec: Vec<&&&isize> = vec![&&&3, &&&6, &&&1, &&&2, &&&5];\n+    vec.sort_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_unstable_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_by(|a, b| b.cmp(a));\n+    vec.sort_unstable_by(|a, b| b.cmp(a));\n }\n \n-// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+// Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`\n mod issue_5754 {\n-    struct Test(String);\n+    #[derive(Clone, Copy)]\n+    struct Test(usize);\n \n     #[derive(PartialOrd, Ord, PartialEq, Eq)]\n-    struct Wrapper<'a>(&'a str);\n+    struct Wrapper<'a>(&'a usize);\n \n     impl Test {\n-        fn name(&self) -> &str {\n+        fn name(&self) -> &usize {\n             &self.0\n         }\n \n@@ -60,7 +68,33 @@ mod issue_5754 {\n     }\n }\n \n+// `Vec::sort_by_key` closure parameter is `F: FnMut(&T) -> K`\n+// The suggestion is destructuring T and we know T is not a reference, so test that non-Copy T are\n+// not linted.\n+mod issue_6001 {\n+    struct Test(String);\n+\n+    impl Test {\n+        // Return an owned type so that we don't hit the fix for 5754\n+        fn name(&self) -> String {\n+            self.0.clone()\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(&b.name()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(&b.name()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(&a.name()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(&a.name()));\n+    }\n+}\n+\n fn main() {\n     unnecessary_sort_by();\n     issue_5754::test();\n+    issue_6001::test();\n }"}, {"sha": "a5fcde768f18344ed7684116e0ce5f9aeeb52ee5", "filename": "src/tools/clippy/tests/ui/useless_attribute.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.fixed?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #![allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "0396d39e3d54eff2151a4d43964c70cac8d86051", "filename": "src/tools/clippy/tests/ui/useless_attribute.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.rs?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #[allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "d0194e4bbbe5b0a3133c130a8ccd30a80402fd59", "filename": "src/tools/clippy/tests/ui/useless_attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1947b3f9e2831e2060bc42f0c78e4a2bb67930a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_attribute.stderr?ref=a1947b3f9e2831e2060bc42f0c78e4a2bb67930a", "patch": "@@ -13,7 +13,7 @@ LL | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:53:5\n+  --> $DIR/useless_attribute.rs:61:5\n    |\n LL |     #[allow(clippy::almost_swapped)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(clippy::almost_swapped)]`"}]}