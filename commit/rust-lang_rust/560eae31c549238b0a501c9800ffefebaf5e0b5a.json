{"sha": "560eae31c549238b0a501c9800ffefebaf5e0b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MGVhZTMxYzU0OTIzOGIwYTUwMWM5ODAwZmZlZmViYWY1ZTBiNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T18:04:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T18:04:51Z"}, "message": "Rollup merge of #70199 - pnkfelix:issue-68808-dont-turn-dummy-spans-into-invalid-lines, r=estebank\n\nRevised span-to-lines conversion to produce an empty vec on DUMMY_SP.\n\nThis required revising some of the client code to stop relying on the returned set of lines being non-empty.\n\nFix #68808", "tree": {"sha": "a0dc0ab6abbec8ee617b7e1c1157c0dd1e8c469e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0dc0ab6abbec8ee617b7e1c1157c0dd1e8c469e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560eae31c549238b0a501c9800ffefebaf5e0b5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeePpDCRBK7hj4Ov3rIwAAdHIIALKJ38p8+KMRkMLGptLFFyJD\n8iecLl+udw9GuZI0+9htz33LgRD7tPzUw3sWWSC81KY7dhGu+edEhYRqRhpw0xw3\nDAEd2E3+0qTPCLKg2ZKEtfN2Xcg/jwDpZT+Jg/we/4aX63OnM8lN+rgdZKxbU3xU\n5qnKQPqodadQ9YRLNUUijYiabPxfbRhjU5dOmqVrezKViGhDUAEC+NYgHyeAnIoD\n+z/yQE9Yl+zCPmOCd4iQMjvz0WCLK7N5YDKz1BcCHKE+2q9h4xMTXZUU/9OqoKNk\n5+8laYT/K2TRX6npu0pfkhifpGTxqRfrHmVWvbfb+0qgfe5uLMozbNMb7c9l8QI=\n=VqfG\n-----END PGP SIGNATURE-----\n", "payload": "tree a0dc0ab6abbec8ee617b7e1c1157c0dd1e8c469e\nparent ad6d30314b1af00d6d95edd5fa83aa5baa41da77\nparent 763121d68b7600c96430067cf1bcfa73b32429c0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584986691 +0100\ncommitter GitHub <noreply@github.com> 1584986691 +0100\n\nRollup merge of #70199 - pnkfelix:issue-68808-dont-turn-dummy-spans-into-invalid-lines, r=estebank\n\nRevised span-to-lines conversion to produce an empty vec on DUMMY_SP.\n\nThis required revising some of the client code to stop relying on the returned set of lines being non-empty.\n\nFix #68808\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560eae31c549238b0a501c9800ffefebaf5e0b5a", "html_url": "https://github.com/rust-lang/rust/commit/560eae31c549238b0a501c9800ffefebaf5e0b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560eae31c549238b0a501c9800ffefebaf5e0b5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6d30314b1af00d6d95edd5fa83aa5baa41da77", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6d30314b1af00d6d95edd5fa83aa5baa41da77", "html_url": "https://github.com/rust-lang/rust/commit/ad6d30314b1af00d6d95edd5fa83aa5baa41da77"}, {"sha": "763121d68b7600c96430067cf1bcfa73b32429c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/763121d68b7600c96430067cf1bcfa73b32429c0", "html_url": "https://github.com/rust-lang/rust/commit/763121d68b7600c96430067cf1bcfa73b32429c0"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "94053b98cd75b47ef74343528779dce888b7e2dc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=560eae31c549238b0a501c9800ffefebaf5e0b5a", "patch": "@@ -1574,7 +1574,7 @@ impl EmitterWriter {\n                 .span_to_lines(parts[0].span)\n                 .expect(\"span_to_lines failed when emitting suggestion\");\n \n-            assert!(!lines.lines.is_empty());\n+            assert!(!lines.lines.is_empty() || parts[0].span.is_dummy());\n \n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);"}, {"sha": "a21314afb1e3b1d7a3bdd90121b69899262c2a62", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=560eae31c549238b0a501c9800ffefebaf5e0b5a", "patch": "@@ -194,7 +194,7 @@ impl CodeSuggestion {\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 // The different spans might belong to different contexts, if so ignore suggestion.\n                 let lines = sm.span_to_lines(bounding_span).ok()?;\n-                assert!(!lines.lines.is_empty());\n+                assert!(!lines.lines.is_empty() || bounding_span.is_dummy());\n \n                 // We can't splice anything if the source is unavailable.\n                 if !sm.ensure_source_file_source_present(lines.file.clone()) {\n@@ -213,8 +213,8 @@ impl CodeSuggestion {\n                 let sf = &lines.file;\n                 let mut prev_hi = sm.lookup_char_pos(bounding_span.lo());\n                 prev_hi.col = CharPos::from_usize(0);\n-\n-                let mut prev_line = sf.get_line(lines.lines[0].line_index);\n+                let mut prev_line =\n+                    lines.lines.get(0).and_then(|line0| sf.get_line(line0.line_index));\n                 let mut buf = String::new();\n \n                 for part in &substitution.parts {"}, {"sha": "fa5baffbe48da84f17d7add772c4ad807238447c", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560eae31c549238b0a501c9800ffefebaf5e0b5a/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=560eae31c549238b0a501c9800ffefebaf5e0b5a", "patch": "@@ -535,6 +535,10 @@ impl SourceMap {\n         let (lo, hi) = self.is_valid_span(sp)?;\n         assert!(hi.line >= lo.line);\n \n+        if sp.is_dummy() {\n+            return Ok(FileLines { file: lo.file, lines: Vec::new() });\n+        }\n+\n         let mut lines = Vec::with_capacity(hi.line - lo.line + 1);\n \n         // The span starts partway through the first line,\n@@ -545,6 +549,9 @@ impl SourceMap {\n         // and to the end of the line. Be careful because the line\n         // numbers in Loc are 1-based, so we subtract 1 to get 0-based\n         // lines.\n+        //\n+        // FIXME: now that we handle DUMMY_SP up above, we should consider\n+        // asserting that the line numbers here are all indeed 1-based.\n         let hi_line = hi.line.saturating_sub(1);\n         for line_index in lo.line.saturating_sub(1)..hi_line {\n             let line_len = lo.file.get_line(line_index).map(|s| s.chars().count()).unwrap_or(0);"}]}