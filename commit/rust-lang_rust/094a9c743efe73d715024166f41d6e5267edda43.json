{"sha": "094a9c743efe73d715024166f41d6e5267edda43", "node_id": "C_kwDOAAsO6NoAKDA5NGE5Yzc0M2VmZTczZDcxNTAyNDE2NmY0MWQ2ZTUyNjdlZGRhNDM", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-09-23T15:21:01Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-15T17:50:33Z"}, "message": "simplify constrain_opaque_types", "tree": {"sha": "05fa27e2e7e940d41c36fefeb8f31d1579cde66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fa27e2e7e940d41c36fefeb8f31d1579cde66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094a9c743efe73d715024166f41d6e5267edda43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094a9c743efe73d715024166f41d6e5267edda43", "html_url": "https://github.com/rust-lang/rust/commit/094a9c743efe73d715024166f41d6e5267edda43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094a9c743efe73d715024166f41d6e5267edda43/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "html_url": "https://github.com/rust-lang/rust/commit/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27"}], "stats": {"total": 750, "additions": 419, "deletions": 331}, "files": [{"sha": "22bb3a29425ee1b49d5b44a3bc228030af3d0ac7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -689,6 +689,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // them down.\n         let mut choice_regions: Vec<ty::RegionVid> = choice_regions.to_vec();\n \n+        // Convert to the SCC representative: sometimes we have inference\n+        // variables in the member constraint that wind up equated with\n+        // universal regions. The scc representative is the minimal numbered\n+        // one from the corresponding scc so it will be the universal region\n+        // if one exists.\n+        for c_r in &mut choice_regions {\n+            let scc = self.constraint_sccs.scc(*c_r);\n+            *c_r = self.scc_representatives[scc];\n+        }\n+\n         // The 'member region' in a member constraint is part of the\n         // hidden type, which must be in the root universe. Therefore,\n         // it cannot have any placeholders in its value."}, {"sha": "7e69e710d68681ffed9ff5265bf22527661a1fdc", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -36,7 +36,7 @@ use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::opaque_types::{GenerateMemberConstraints, InferCtxtExt};\n+use rustc_trait_selection::opaque_types::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n@@ -185,7 +185,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &region_bound_pairs,\n         implicit_region_bound,\n         &mut borrowck_context,\n-        &universal_region_relations,\n         |mut cx| {\n             cx.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n             liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n@@ -253,15 +252,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n }\n \n #[instrument(\n-    skip(\n-        infcx,\n-        body,\n-        promoted,\n-        region_bound_pairs,\n-        borrowck_context,\n-        universal_region_relations,\n-        extra\n-    ),\n+    skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),\n     level = \"debug\"\n )]\n fn type_check_internal<'a, 'tcx, R>(\n@@ -272,7 +263,6 @@ fn type_check_internal<'a, 'tcx, R>(\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n-    universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n     extra: impl FnOnce(TypeChecker<'a, 'tcx>) -> R,\n ) -> R {\n     let mut checker = TypeChecker::new(\n@@ -282,7 +272,6 @@ fn type_check_internal<'a, 'tcx, R>(\n         region_bound_pairs,\n         implicit_region_bound,\n         borrowck_context,\n-        universal_region_relations,\n     );\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, body, promoted);\n@@ -901,7 +890,6 @@ struct TypeChecker<'a, 'tcx> {\n     implicit_region_bound: ty::Region<'tcx>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n-    universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n }\n \n struct BorrowCheckContext<'a, 'tcx> {\n@@ -1050,7 +1038,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: ty::Region<'tcx>,\n         borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n-        universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n     ) -> Self {\n         let mut checker = Self {\n             infcx,\n@@ -1062,7 +1049,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             implicit_region_bound,\n             borrowck_context,\n             reported_errors: Default::default(),\n-            universal_region_relations,\n         };\n         checker.check_user_type_annotations();\n         checker\n@@ -1322,8 +1308,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             ),\n         )?;\n \n-        let universal_region_relations = self.universal_region_relations;\n-\n         // Finally, if we instantiated the anon types successfully, we\n         // have to solve any bounds (e.g., `-> impl Iterator` needs to\n         // prove that `T: Iterator` where `T` is the type we\n@@ -1335,12 +1319,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 ConstraintCategory::OpaqueType,\n                 CustomTypeOp::new(\n                     |infcx| {\n-                        infcx.constrain_opaque_type(\n-                            opaque_type_key,\n-                            &opaque_decl,\n-                            GenerateMemberConstraints::IfNoStaticBound,\n-                            universal_region_relations,\n-                        );\n+                        infcx.constrain_opaque_type(opaque_type_key, &opaque_decl);\n                         Ok(InferOk { value: (), obligations: vec![] })\n                     },\n                     || \"opaque_type_map\".to_string(),"}, {"sha": "db217cc61378bc91d3c04c58977db99f6264077e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 16, "deletions": 90, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -4,7 +4,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n-use rustc_infer::infer::free_regions::FreeRegionRelations;\n use rustc_infer::infer::opaque_types::OpaqueTypeDecl;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n@@ -37,14 +36,12 @@ pub trait InferCtxtExt<'tcx> {\n         value_span: Span,\n     ) -> InferOk<'tcx, T>;\n \n-    fn constrain_opaque_types<FRR: FreeRegionRelations<'tcx>>(&self, free_region_relations: &FRR);\n+    fn constrain_opaque_types(&self);\n \n-    fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n+    fn constrain_opaque_type(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        mode: GenerateMemberConstraints,\n-        free_region_relations: &FRR,\n     );\n \n     /*private*/\n@@ -270,26 +267,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `opaque_types` -- the map produced by `instantiate_opaque_types`\n     /// - `free_region_relations` -- something that can be used to relate\n     ///   the free regions (`'a`) that appear in the impl trait.\n-    fn constrain_opaque_types<FRR: FreeRegionRelations<'tcx>>(&self, free_region_relations: &FRR) {\n+    fn constrain_opaque_types(&self) {\n         let opaque_types = self.inner.borrow().opaque_types.clone();\n         for (opaque_type_key, opaque_defn) in opaque_types {\n-            self.constrain_opaque_type(\n-                opaque_type_key,\n-                &opaque_defn,\n-                GenerateMemberConstraints::WhenRequired,\n-                free_region_relations,\n-            );\n+            self.constrain_opaque_type(opaque_type_key, &opaque_defn);\n         }\n     }\n \n     /// See `constrain_opaque_types` for documentation.\n-    #[instrument(level = \"debug\", skip(self, free_region_relations))]\n-    fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn constrain_opaque_type(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        mode: GenerateMemberConstraints,\n-        free_region_relations: &FRR,\n     ) {\n         let def_id = opaque_type_key.def_id;\n \n@@ -347,6 +337,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         debug!(\"{:#?}\", bounds);\n         let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n \n+        // (A) The regions that appear in the hidden type must be equal to\n+        // one of the regions in scope for the opaque type.\n+        self.generate_member_constraint(\n+            concrete_ty,\n+            opaque_defn,\n+            opaque_type_key,\n+            first_own_region,\n+        );\n+\n+        // (B) We can also generate outlives bounds that must be enforced.\n         let required_region_bounds = required_region_bounds(tcx, opaque_type, bounds);\n         if !required_region_bounds.is_empty() {\n             for required_region in required_region_bounds {\n@@ -355,81 +355,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n                 });\n             }\n-            if let GenerateMemberConstraints::IfNoStaticBound = mode {\n-                self.generate_member_constraint(\n-                    concrete_ty,\n-                    opaque_defn,\n-                    opaque_type_key,\n-                    first_own_region,\n-                );\n-            }\n-            return;\n         }\n-\n-        // There were no `required_region_bounds`,\n-        // so we have to search for a `least_region`.\n-        // Go through all the regions used as arguments to the\n-        // opaque type. These are the parameters to the opaque\n-        // type; so in our example above, `substs` would contain\n-        // `['a]` for the first impl trait and `'b` for the\n-        // second.\n-        let mut least_region = None;\n-\n-        for subst_arg in &opaque_type_key.substs[first_own_region..] {\n-            let subst_region = match subst_arg.unpack() {\n-                GenericArgKind::Lifetime(r) => r,\n-                GenericArgKind::Type(_) | GenericArgKind::Const(_) => continue,\n-            };\n-\n-            // Compute the least upper bound of it with the other regions.\n-            debug!(?least_region);\n-            debug!(?subst_region);\n-            match least_region {\n-                None => least_region = Some(subst_region),\n-                Some(lr) => {\n-                    if free_region_relations.sub_free_regions(self.tcx, lr, subst_region) {\n-                        // keep the current least region\n-                    } else if free_region_relations.sub_free_regions(self.tcx, subst_region, lr) {\n-                        // switch to `subst_region`\n-                        least_region = Some(subst_region);\n-                    } else {\n-                        // There are two regions (`lr` and\n-                        // `subst_region`) which are not relatable. We\n-                        // can't find a best choice. Therefore,\n-                        // instead of creating a single bound like\n-                        // `'r: 'a` (which is our preferred choice),\n-                        // we will create a \"in bound\" like `'r in\n-                        // ['a, 'b, 'c]`, where `'a..'c` are the\n-                        // regions that appear in the impl trait.\n-\n-                        return self.generate_member_constraint(\n-                            concrete_ty,\n-                            opaque_defn,\n-                            opaque_type_key,\n-                            first_own_region,\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-\n-        let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n-        debug!(?least_region);\n-\n-        if let GenerateMemberConstraints::IfNoStaticBound = mode {\n-            if least_region != tcx.lifetimes.re_static {\n-                self.generate_member_constraint(\n-                    concrete_ty,\n-                    opaque_defn,\n-                    opaque_type_key,\n-                    first_own_region,\n-                );\n-            }\n-        }\n-        concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            tcx,\n-            op: |r| self.sub_regions(infer::CallReturn(span), least_region, r),\n-        });\n     }\n \n     /// As a fallback, we sometimes generate an \"in constraint\". For"}, {"sha": "85602f11593923964d3118de493e4102cf8fca3a", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.visit_body(body);\n         self.visit_region_obligations(body_id.hir_id);\n \n-        self.constrain_opaque_types(self.outlives_environment.free_region_map());\n+        self.constrain_opaque_types();\n     }\n \n     fn visit_region_obligations(&mut self, hir_id: hir::HirId) {"}, {"sha": "9b0018d8904ac10ad464492cabbf98c81471de8e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,13 +1,31 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:10:65\n+  --> $DIR/ret-impl-trait-one.rs:10:85\n+   |\n+LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |  ________________________________--__--_______________________________________________^\n+   | |                                |   |\n+   | |                                |   lifetime `'b` defined here\n+   | |                                lifetime `'a` defined here\n+LL | |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ret-impl-trait-one.rs:16:65\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                --  --                           ^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n-   |                                |   |\n-   |                                |   lifetime `'b` defined here\n-   |                                lifetime `'a` defined here\n+   |                                    --                           ^^^^^^^^^^^^^^\n+   |                                    |\n+   |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-   = help: consider adding the following bound: `'b: 'a`\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                                                ++++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "e2d00d8c9c4f22f16c61e762a835f12ddbad5ff2", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -6,9 +6,16 @@\n trait Trait<'a> { }\n impl<T> Trait<'_> for T { }\n \n+// Fails to recognize that both 'a and 'b are mentioned and should thus be accepted\n+async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+    //~^ ERROR lifetime mismatch\n+    (a, b)\n+}\n+\n // Only `'a` permitted in return type, not `'b`.\n async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-    //~^ ERROR lifetime mismatch\n+    //~^ ERROR captures lifetime that does not appear in bounds\n+    //~| ERROR captures lifetime that does not appear in bounds\n     (a, b)\n }\n "}, {"sha": "8d2a8e8f1d869f930d6eee4b1f0a5cdd1f19ec23", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,13 +1,40 @@\n error[E0623]: lifetime mismatch\n   --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n+LL | async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                      ------     ^^^^^^^^^^^^^^^^^^^\n+   |                                                      |          |\n+   |                                                      |          ...but data from `a` is held across an await point here\n+   |                                                      |          this `async fn` implicitly returns an `impl Future<Output = impl Trait<'a> + 'b>`\n+   |                                                      this parameter and the returned future are declared with different lifetimes...\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ret-impl-trait-one.rs:16:65\n+   |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                           ------                ^^^^^^^^^^^^^^\n-   |                                           |                     |\n-   |                                           |                     ...but data from `b` is held across an await point here\n-   |                                           |                     this `async fn` implicitly returns an `impl Future<Output = impl Trait<'a>>`\n-   |                                           this parameter and the returned future are declared with different lifetimes...\n+   |                                    --                           ^^^^^^^^^^^^^^\n+   |                                    |\n+   |                                    hidden type `(&u8, &u8)` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+   |\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                                                ++++\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ret-impl-trait-one.rs:16:65\n+   |\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+   |                                    --                           ^^^^^^^^^^^^^^\n+   |                                    |\n+   |                                    hidden type `(&u8, &u8)` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+   |\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                                                ++++\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0623`.\n+Some errors have detailed explanations: E0623, E0700.\n+For more information about an error, try `rustc --explain E0623`."}, {"sha": "60d3409a8accf14989cdca1a5cfe5971c2eac7b9", "filename": "src/test/ui/impl-trait/hidden-lifetimes.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -0,0 +1,29 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/hidden-lifetimes.rs:28:54\n+   |\n+LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n+   |                 --                                   ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+   |\n+LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n+   |                                                                     ++++\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/hidden-lifetimes.rs:45:70\n+   |\n+LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n+   |                        --                                            ^^^^^^^^^^^^^^\n+   |                        |\n+   |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+   |\n+LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n+   |                                                                                     ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "bba9203870025b55309dbe10ef4ad20a267aa215", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n    |                 --                                   ^^^^^^^^^^^^^^\n    |                 |\n-   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n+   |                 hidden type `&mut &'b T` captures the lifetime `'b` as defined here\n    |\n help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |"}, {"sha": "479874695a7fc7dac7c1fc0c1358b35aedf2ff66", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,31 +1,31 @@\n-error: lifetime may not live long enough\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              -        ^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |              ----     ^^^^^^^^^\n    |              |\n-   |              let's call the lifetime of this reference `'1`\n+   |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n-error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |             --                 ^^^^^^^^^\n    |             |\n-   |             lifetime `'a` defined here\n+   |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:7:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               -                              ^ returning this value requires that `'1` must outlive `'static`\n@@ -35,49 +35,52 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    = help: consider replacing `'1` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:41\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----                      ^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:55\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               -        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |               -                                       ^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n    |               |\n    |               let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:28:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n \n-error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:32:61\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n-   |                          |\n-   |                          lifetime `'a` defined here\n+   |                              --                             ^^^^^^^^^^^^^^^^\n+   |                              |\n+   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures the lifetime `'b` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-   = help: consider adding the following bound: `'b: 'a`\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n+   |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:37:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:40:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^\n@@ -86,5 +89,5 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0310, E0621.\n+Some errors have detailed explanations: E0310, E0621, E0700.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "d30e019184091010ac30ce174ba19ab3a3eae717", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,8 +1,10 @@\n use std::fmt::Debug;\n \n-fn elided(x: &i32) -> impl Copy { x } //~ ERROR E0759\n+fn elided(x: &i32) -> impl Copy { x }\n+//~^ ERROR: captures lifetime that does not appear in bounds\n \n-fn explicit<'a>(x: &'a i32) -> impl Copy { x } //~ ERROR E0759\n+fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n+//~^ ERROR: captures lifetime that does not appear in bounds\n \n fn elided2(x: &i32) -> impl Copy + 'static { x } //~ ERROR E0759\n \n@@ -20,7 +22,7 @@ fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n \n fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) } //~ ERROR E0759\n-//~^ ERROR E0759\n+//~^ ERROR: captures lifetime that does not appear in bounds\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n@@ -30,7 +32,8 @@ fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x } //~ ERRO\n // Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected.\n fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-    //~^ ERROR lifetime mismatch\n+    //~^ ERROR: captures lifetime that does not appear in bounds\n+    //~| ERROR: captures lifetime that does not appear in bounds\n     move |_| println!(\"{}\", y)\n }\n "}, {"sha": "b472132a12b52b705831cb319b55f4cd45228c38", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 53, "deletions": 58, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,49 +1,37 @@\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----                 ^ ...is captured here...\n-   |              |\n-   |              this data with an anonymous lifetime `'_`...\n+   |                       ^^^^^^^^^\n    |\n-note: ...and is required to live as long as `'static` here\n+note: hidden type `&i32` captures lifetime smaller than the function body\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |                       ^^^^^^^^^\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                                 ++++\n \n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:5:44\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                    -------                 ^ ...is captured here...\n-   |                    |\n-   |                    this data with lifetime `'a`...\n+   |                                ^^^^^^^^^\n    |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n+note: hidden type `&i32` captures lifetime smaller than the function body\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                                ^^^^^^^^^\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'a` lifetime bound\n-   |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                          ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:7:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----                           ^ ...is captured here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:7:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -57,15 +45,15 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------                           ^ ...is captured here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:33\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                                 ^^^^^^^^^^^^^^^^^^^\n@@ -79,39 +67,31 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:65\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:41\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n+   |                                         ^^^^^^^^^^\n    |\n-help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n+note: hidden type `&i32` captures lifetime smaller than the function body\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:41\n    |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n-   |                                       ++++\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n-   |                                                    ++++\n+LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n+   |                                         ^^^^^^^^^^\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`...     ^ ...is captured here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:41\n+   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |                                         ^^^^^^^^^^\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n@@ -122,13 +102,13 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:28:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:28:34\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:34\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -141,25 +121,40 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ~~~~~~~~~~~~\n \n-error[E0623]: lifetime mismatch\n-  --> $DIR/must_outlive_least_region_or_bound.rs:32:61\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                                                 -------     ^^^^^^^^^^^^^^^^\n-   |                                                 |           |\n-   |                                                 |           ...but data from `y` is returned here\n-   |                                                 this parameter and the return type are declared with different lifetimes...\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures lifetime smaller than the function body\n+  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+   |\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n+   |                                                             ^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+   |\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:37:5: 37:31]` captures lifetime smaller than the function body\n+  --> $DIR/must_outlive_least_region_or_bound.rs:34:61\n+   |\n+LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n+   |                                                             ^^^^^^^^^^^^^^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:37:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:40:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:14:50\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n@@ -172,7 +167,7 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:59\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n@@ -185,7 +180,7 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:60\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n@@ -202,7 +197,7 @@ LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n@@ -216,7 +211,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ~~~~~~~~~~~~\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n-Some errors have detailed explanations: E0310, E0621, E0623, E0759.\n+Some errors have detailed explanations: E0310, E0621, E0700, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "3d435bd1c3ffd2b2ecc5fbf511f5a123967b7747", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,28 +1,55 @@\n-error: lifetime may not live long enough\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -         ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n-   |                         let's call the lifetime of this reference `'1`\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures the anonymous lifetime defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n \n-error: lifetime may not live long enough\n-  --> $DIR/static-return-lifetime-infered.rs:9:37\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                         -----     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures the anonymous lifetime defined here\n+   |\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n+   |                                                           ++++\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures the lifetime `'a` as defined here\n+   |\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                                             ++++\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |                    --               ^^^^^^^^^^^^^^^^^^^^^^^\n    |                    |\n-   |                    lifetime `'a` defined here\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures the lifetime `'a` as defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n+help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "e204cb0f7a7ff526b8109b7490c99bd4e45e2c34", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -4,10 +4,18 @@ struct A {\n \n impl A {\n     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-        self.x.iter().map(|a| a.0) //~ ERROR E0759\n+        //~^ ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        self.x.iter().map(|a| a.0)\n     }\n     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-        self.x.iter().map(|a| a.0) //~ ERROR E0759\n+        //~^ ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        //~| ERROR: captures lifetime that does not appear in bounds\n+        self.x.iter().map(|a| a.0)\n     }\n }\n "}, {"sha": "33502bcf7d0569283505df3fea40783e738199d8", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 81, "deletions": 25, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,43 +1,99 @@\n-error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/static-return-lifetime-infered.rs:7:16\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- this data with an anonymous lifetime `'_`...\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ------ ^^^^\n-   |         |\n-   |         ...is captured here...\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n-note: ...and is required to live as long as `'static` here\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:6:35\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                                           ++++\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/static-return-lifetime-infered.rs:10:16\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        -------- this data with lifetime `'a`...\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ------ ^^^^\n-   |         |\n-   |         ...is captured here...\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n    |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/static-return-lifetime-infered.rs:9:37\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                                             ++++\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:18:27: 18:34]>` captures lifetime smaller than the function body\n+  --> $DIR/static-return-lifetime-infered.rs:13:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0759`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "e29ba09b3694dbabcc901566b2d72813a67f55c0", "filename": "src/test/ui/nll/issue-73159-rpit-static.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -6,7 +6,8 @@\n struct Foo<'a>(&'a [u8]);\n \n impl<'a> Foo<'a> {\n-    fn make_it(&self) -> impl Iterator<Item = u8> { //~ ERROR lifetime may not live\n+    fn make_it(&self) -> impl Iterator<Item = u8> {\n+        //~^ ERROR: captures lifetime that does not appear in bounds\n         self.0.iter().copied()\n     }\n }"}, {"sha": "6c7cd0c8254938c8b1f49c5abe5dd03cca59eb1c", "filename": "src/test/ui/nll/issue-73159-rpit-static.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,10 +1,11 @@\n-error: lifetime may not live long enough\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/issue-73159-rpit-static.rs:9:26\n    |\n LL | impl<'a> Foo<'a> {\n-   |      -- lifetime `'a` defined here\n+   |      -- hidden type `Copied<std::slice::Iter<'a, u8>>` captures the lifetime `'a` as defined here\n LL |     fn make_it(&self) -> impl Iterator<Item = u8> {\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "8af23aad7261b80a3bdba5c104be56bcb8abb76f", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -8,7 +8,7 @@ trait Foo<'a> {\n impl<'a, T> Foo<'a> for T { }\n \n fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+//~^ ERROR captures lifetime that does not appear in bounds\n     x\n }\n "}, {"sha": "21d1eea54e6c517dcb41a16ca1d51d80b50b9832", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,14 +1,16 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:10:25\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                         ^^^^^^^^^^^^ lifetime `ReEarlyBound(0, 'a)` required\n+   |                  --     ^^^^^^^^^^^^\n+   |                  |\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n    |\n-help: add explicit lifetime `ReEarlyBound(0, 'a)` to the type of `x`\n+help: to declare that the `impl Trait` captures ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)), you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &ReEarlyBound(0, 'a) T) -> impl Foo<'a> {\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)) {\n+   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "953d7cd6a07692630c827bdf67d6e05670579ddc", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,15 +1,16 @@\n-error: lifetime may not live long enough\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                          -          ^^^^^^^^^^\n    |                          |\n-   |                          let's call the lifetime of this reference `'1`\n+   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "e3483e4e62abe365c77c05304874160dae9729c6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -6,7 +6,8 @@ struct Foo;\n \n impl Foo {\n     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-    //~^ ERROR E0759\n+    //~^ ERROR: captures lifetime that does not appear in bounds\n+    //~| ERROR: captures lifetime that does not appear in bounds\n }\n \n fn main() {"}, {"sha": "aac585ca414ca0f71af08696164ff72adca60790", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,17 +1,29 @@\n-error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ----------     ---------- ...and is required to live as long as `'static` here\n-   |                |     |\n-   |                |     this data with an anonymous lifetime `'_`...\n-   |                ...is captured here...\n+   |                          -          ^^^^^^^^^^\n+   |                          |\n+   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n    |\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++\n \n-error: aborting due to previous error\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          -          ^^^^^^^^^^\n+   |                          |\n+   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n+   |\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                                ++++\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0759`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "faa1233ffde634335590e0f5730a39c3bd668112", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,15 +1,16 @@\n-error: lifetime may not live long enough\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                    -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                    -----      ^^^^^^^^^^\n    |                    |\n-   |                    let's call the lifetime of this reference `'1`\n+   |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n+help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ++++\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "4db2fa7dcb81eef2cf602f6c17a0640bca33cfd0", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -3,7 +3,8 @@ use std::pin::Pin;\n struct Foo;\n \n impl Foo {\n-    fn f(self: Pin<&Self>) -> impl Clone { self } //~ ERROR E0759\n+    fn f(self: Pin<&Self>) -> impl Clone { self }\n+    //~^ ERROR: captures lifetime that does not appear in bounds\n }\n \n fn main() {"}, {"sha": "7b645f51fe08980a76bc7722e5c83744787df4b2", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,21 +1,15 @@\n-error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ----------                  ^^^^ ...is captured here...\n-   |                |\n-   |                this data with an anonymous lifetime `'_`...\n+   |                               ^^^^^^^^^^\n    |\n-note: ...and is required to live as long as `'static` here\n+note: hidden type `Pin<&Foo>` captures lifetime smaller than the function body\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                               ^^^^^^^^^^\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n-   |\n-LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                          ++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0759`.\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "2dc300ac76f278d4de4b0dbf29e4fa434441f5a5", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,17 +1,8 @@\n-error[E0597]: `val` does not live long enough\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:21:9\n    |\n-LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n-   |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ borrowed value does not live long enough\n-LL |     }\n-   |     - `val` dropped here while still borrowed\n-   |\n-help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n-   |\n-LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n-   |                                                                                  ++++\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n@@ -27,5 +18,4 @@ LL |         val.use_self()\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "0045d3fcf1c7b5f02cf9f3296d05dce23968dde3", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -18,7 +18,7 @@ mod bav {\n     impl Bar for i32 {}\n \n     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n-        val.use_self() //~ ERROR E0597\n+        val.use_self() //~ ERROR cannot return reference to function parameter\n     }\n }\n "}, {"sha": "2961d8d7eacc99a9a0e59b6c3dc0d115dc2092d8", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,17 +1,8 @@\n-error[E0597]: `val` does not live long enough\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:21:9\n    |\n-LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n-   |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ borrowed value does not live long enough\n-LL |     }\n-   |     - `val` dropped here while still borrowed\n-   |\n-help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n-   |\n-LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n-   |                                                                                  ++++\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n@@ -47,5 +38,4 @@ LL |     impl MyTrait for Box<dyn ObjectTrait<Assoc = i32> + '_> {\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "3ed3827b97da3b0b38c2c78a45d214e95ce1fd46", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/094a9c743efe73d715024166f41d6e5267edda43/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=094a9c743efe73d715024166f41d6e5267edda43", "patch": "@@ -1,10 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:27:23\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:28:9\n    |\n-LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n-   |             -         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n-   |             |\n-   |             let's call the lifetime of this reference `'1`\n+LL |       fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n+   |               - let's call the lifetime of this reference `'1`\n+LL | /         Iter {\n+LL | |             current: None,\n+LL | |             remaining: self.0.iter(),\n+LL | |         }\n+   | |_________^ returning this value requires that `'1` must outlive `'static`\n    |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n@@ -34,12 +37,15 @@ LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:60:30\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:61:9\n    |\n-LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n-   |             --               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n-   |             |\n-   |             lifetime `'a` defined here\n+LL |       fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n+   |               -- lifetime `'a` defined here\n+LL | /         Iter {\n+LL | |             current: None,\n+LL | |             remaining: self.0.iter(),\n+LL | |         }\n+   | |_________^ returning this value requires that `'a` must outlive `'static`\n    |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |"}]}