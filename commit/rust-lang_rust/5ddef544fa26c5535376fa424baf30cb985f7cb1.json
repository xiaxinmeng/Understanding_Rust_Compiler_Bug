{"sha": "5ddef544fa26c5535376fa424baf30cb985f7cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGVmNTQ0ZmEyNmM1NTM1Mzc2ZmE0MjRiYWYzMGNiOTg1ZjdjYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T19:06:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T19:06:45Z"}, "message": "Auto merge of #77674 - cuviper:direntry-diet, r=dtolnay\n\nunix/vxworks: make DirEntry slightly smaller\n\n`DirEntry` contains a `ReadDir` handle, which used to just be a wrapper\non `Arc<InnerReadDir>`. Commit af75314ecdbc5 added `end_of_stream: bool`\nwhich is not needed by `DirEntry`, but adds 8 bytes after padding. We\ncan let `DirEntry` have an `Arc<InnerReadDir>` directly to avoid that.", "tree": {"sha": "b9029581a79f79fb28d18a8b0ece31b1bfb56d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9029581a79f79fb28d18a8b0ece31b1bfb56d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1", "html_url": "https://github.com/rust-lang/rust/commit/5ddef544fa26c5535376fa424baf30cb985f7cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b06cb10522854cbd3baf45364ea8647b1285170", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b06cb10522854cbd3baf45364ea8647b1285170", "html_url": "https://github.com/rust-lang/rust/commit/7b06cb10522854cbd3baf45364ea8647b1285170"}, {"sha": "1d06b07765e1be71f3aeec1d0c0f365b0907c7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d06b07765e1be71f3aeec1d0c0f365b0907c7a8", "html_url": "https://github.com/rust-lang/rust/commit/1d06b07765e1be71f3aeec1d0c0f365b0907c7a8"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "8184c25afcfb863a5b0ca079c521c12c328ef955", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ddef544fa26c5535376fa424baf30cb985f7cb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddef544fa26c5535376fa424baf30cb985f7cb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=5ddef544fa26c5535376fa424baf30cb985f7cb1", "patch": "@@ -183,9 +183,14 @@ struct InnerReadDir {\n     root: PathBuf,\n }\n \n-#[derive(Clone)]\n pub struct ReadDir {\n     inner: Arc<InnerReadDir>,\n+    #[cfg(not(any(\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\",\n+    )))]\n     end_of_stream: bool,\n }\n \n@@ -196,7 +201,7 @@ unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n     entry: dirent64,\n-    dir: ReadDir,\n+    dir: Arc<InnerReadDir>,\n     // We need to store an owned copy of the entry name\n     // on Solaris and Fuchsia because a) it uses a zero-length\n     // array to store the name, b) its lifetime between readdir\n@@ -443,7 +448,7 @@ impl Iterator for ReadDir {\n                     name: slice::from_raw_parts(name as *const u8, namelen as usize)\n                         .to_owned()\n                         .into_boxed_slice(),\n-                    dir: self.clone(),\n+                    dir: Arc::clone(&self.inner),\n                 };\n                 if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {\n                     return Some(Ok(ret));\n@@ -464,7 +469,7 @@ impl Iterator for ReadDir {\n         }\n \n         unsafe {\n-            let mut ret = DirEntry { entry: mem::zeroed(), dir: self.clone() };\n+            let mut ret = DirEntry { entry: mem::zeroed(), dir: Arc::clone(&self.inner) };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n                 if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n@@ -497,7 +502,7 @@ impl Drop for Dir {\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        self.dir.inner.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.root.join(OsStr::from_bytes(self.name_bytes()))\n     }\n \n     pub fn file_name(&self) -> OsString {\n@@ -506,7 +511,7 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        let fd = cvt(unsafe { dirfd(self.dir.inner.dirp.0) })?;\n+        let fd = cvt(unsafe { dirfd(self.dir.dirp.0) })?;\n         let name = self.entry.d_name.as_ptr();\n \n         cfg_has_statx! {\n@@ -944,7 +949,16 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n             Err(Error::last_os_error())\n         } else {\n             let inner = InnerReadDir { dirp: Dir(ptr), root };\n-            Ok(ReadDir { inner: Arc::new(inner), end_of_stream: false })\n+            Ok(ReadDir {\n+                inner: Arc::new(inner),\n+                #[cfg(not(any(\n+                    target_os = \"solaris\",\n+                    target_os = \"illumos\",\n+                    target_os = \"fuchsia\",\n+                    target_os = \"redox\",\n+                )))]\n+                end_of_stream: false,\n+            })\n         }\n     }\n }"}, {"sha": "cb761af1a25c2d4ea123d3c2f73b35b4d1637927", "filename": "library/std/src/sys/vxworks/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ddef544fa26c5535376fa424baf30cb985f7cb1/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddef544fa26c5535376fa424baf30cb985f7cb1/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffs.rs?ref=5ddef544fa26c5535376fa424baf30cb985f7cb1", "patch": "@@ -27,7 +27,6 @@ struct InnerReadDir {\n     root: PathBuf,\n }\n \n-#[derive(Clone)]\n pub struct ReadDir {\n     inner: Arc<InnerReadDir>,\n     end_of_stream: bool,\n@@ -40,7 +39,7 @@ unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n     entry: dirent,\n-    dir: ReadDir,\n+    dir: Arc<InnerReadDir>,\n }\n \n #[derive(Clone, Debug)]\n@@ -170,7 +169,7 @@ impl Iterator for ReadDir {\n         }\n \n         unsafe {\n-            let mut ret = DirEntry { entry: mem::zeroed(), dir: self.clone() };\n+            let mut ret = DirEntry { entry: mem::zeroed(), dir: Arc::clone(&self.inner) };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n                 if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n@@ -204,7 +203,7 @@ impl Drop for Dir {\n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n         use crate::sys::vxworks::ext::ffi::OsStrExt;\n-        self.dir.inner.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.root.join(OsStr::from_bytes(self.name_bytes()))\n     }\n \n     pub fn file_name(&self) -> OsString {"}]}