{"sha": "1999d759f7076d935dc433f3bd6dabd1f0634762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTlkNzU5ZjcwNzZkOTM1ZGM0MzNmM2JkNmRhYmQxZjA2MzQ3NjI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-29T19:24:46Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-29T19:24:46Z"}, "message": "Rollup merge of #25861 - tringenbach:master, r=steveklabnik\n\nThis adds an example from mem::swap, and provides some suggested uses of this\r\nfunction.\r\n\r\nThis is my attempt to summarize the answers to a question I asked on reddit http://www.reddit.com/r/rust/comments/37jcul/what_is_forget_for/ and add the answers to the documentation so that no one else has to google or ask the question again.", "tree": {"sha": "17729d8466e6991b618e3d579509393aa1794592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17729d8466e6991b618e3d579509393aa1794592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1999d759f7076d935dc433f3bd6dabd1f0634762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1999d759f7076d935dc433f3bd6dabd1f0634762", "html_url": "https://github.com/rust-lang/rust/commit/1999d759f7076d935dc433f3bd6dabd1f0634762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1999d759f7076d935dc433f3bd6dabd1f0634762/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e2a11a6ae73c20312cb213cd32ce8c19ab5bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e2a11a6ae73c20312cb213cd32ce8c19ab5bc7", "html_url": "https://github.com/rust-lang/rust/commit/e9e2a11a6ae73c20312cb213cd32ce8c19ab5bc7"}, {"sha": "8746b1ac6f3c95383a19ad2ab365a62140516206", "url": "https://api.github.com/repos/rust-lang/rust/commits/8746b1ac6f3c95383a19ad2ab365a62140516206", "html_url": "https://github.com/rust-lang/rust/commit/8746b1ac6f3c95383a19ad2ab365a62140516206"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "26c6e899df1ce81d5b6817726b2762c3dc75a478", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1999d759f7076d935dc433f3bd6dabd1f0634762/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999d759f7076d935dc433f3bd6dabd1f0634762/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=1999d759f7076d935dc433f3bd6dabd1f0634762", "patch": "@@ -52,20 +52,61 @@ pub use intrinsics::transmute;\n /// * `mpsc::{Sender, Receiver}` cycles (they use `Arc` internally)\n /// * Panicking destructors are likely to leak local resources\n ///\n+/// # When To Use\n+///\n+/// There's only a few reasons to use this function. They mainly come\n+/// up in unsafe code or FFI code.\n+///\n+/// * You have an uninitialized value, perhaps for performance reasons, and\n+///   need to prevent the destructor from running on it.\n+/// * You have two copies of a value (like `std::mem::swap`), but need the\n+///   destructor to only run once to prevent a double free.\n+/// * Transferring resources across FFI boundries.\n+///\n /// # Example\n ///\n-/// ```rust,no_run\n+/// Leak some heap memory by never deallocating it.\n+///\n+/// ```rust\n /// use std::mem;\n-/// use std::fs::File;\n ///\n-/// // Leak some heap memory by never deallocating it\n /// let heap_memory = Box::new(3);\n /// mem::forget(heap_memory);\n+/// ```\n+///\n+/// Leak an I/O object, never closing the file.\n+///\n+/// ```rust,no_run\n+/// use std::mem;\n+/// use std::fs::File;\n ///\n-/// // Leak an I/O object, never closing the file\n /// let file = File::open(\"foo.txt\").unwrap();\n /// mem::forget(file);\n /// ```\n+///\n+/// The swap function uses forget to good effect.\n+///\n+/// ```rust\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// fn swap<T>(x: &mut T, y: &mut T) {\n+///     unsafe {\n+///         // Give ourselves some scratch space to work with\n+///         let mut t: T = mem::uninitialized();\n+///\n+///         // Perform the swap, `&mut` pointers never alias\n+///         ptr::copy_nonoverlapping(&*x, &mut t, 1);\n+///         ptr::copy_nonoverlapping(&*y, x, 1);\n+///         ptr::copy_nonoverlapping(&t, y, 1);\n+///\n+///         // y and t now point to the same thing, but we need to completely\n+///         // forget `t` because we do not want to run the destructor for `T`\n+///         // on its value, which is still owned somewhere outside this function.\n+///         mem::forget(t);\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n     unsafe { intrinsics::forget(t) }\n@@ -267,8 +308,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         ptr::copy_nonoverlapping(&*y, x, 1);\n         ptr::copy_nonoverlapping(&t, y, 1);\n \n-        // y and t now point to the same thing, but we need to completely forget `t`\n-        // because it's no longer relevant.\n+        // y and t now point to the same thing, but we need to completely\n+        // forget `t` because we do not want to run the destructor for `T`\n+        // on its value, which is still owned somewhere outside this function.\n         forget(t);\n     }\n }"}]}