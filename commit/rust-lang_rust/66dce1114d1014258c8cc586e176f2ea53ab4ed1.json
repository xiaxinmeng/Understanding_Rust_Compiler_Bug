{"sha": "66dce1114d1014258c8cc586e176f2ea53ab4ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZGNlMTExNGQxMDE0MjU4YzhjYzU4NmUxNzZmMmVhNTNhYjRlZDE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-24T21:25:20Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-24T21:32:07Z"}, "message": "Store ptr_width as u32 on Config\n\nThis removes the dependency on IntTy, UintTy from Session.", "tree": {"sha": "a77e2d5f09682aa800fee5f4da22a5c779edcd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a77e2d5f09682aa800fee5f4da22a5c779edcd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66dce1114d1014258c8cc586e176f2ea53ab4ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66dce1114d1014258c8cc586e176f2ea53ab4ed1", "html_url": "https://github.com/rust-lang/rust/commit/66dce1114d1014258c8cc586e176f2ea53ab4ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66dce1114d1014258c8cc586e176f2ea53ab4ed1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1d028d4c8fc15473dc10473c38df162daa7b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1d028d4c8fc15473dc10473c38df162daa7b41", "html_url": "https://github.com/rust-lang/rust/commit/5a1d028d4c8fc15473dc10473c38df162daa7b41"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "a02f01d0c9764cd5a64275d7c4bd50ef9b481465", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=66dce1114d1014258c8cc586e176f2ea53ab4ed1", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel\n use rustc_target::spec::{Target, TargetTriple};\n \n use syntax;\n-use syntax::ast::{self, IntTy, UintTy};\n+use syntax::ast;\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::symbol::{sym, Symbol};\n@@ -36,8 +36,7 @@ use std::path::{Path, PathBuf};\n \n pub struct Config {\n     pub target: Target,\n-    pub isize_ty: IntTy,\n-    pub usize_ty: UintTy,\n+    pub ptr_width: u32,\n }\n \n #[derive(Clone, Hash, Debug)]\n@@ -1570,10 +1569,10 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n         FatalError.raise();\n     });\n \n-    let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n-        \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n-        \"32\" => (ast::IntTy::I32, ast::UintTy::U32),\n-        \"64\" => (ast::IntTy::I64, ast::UintTy::U64),\n+    let ptr_width = match &target.target_pointer_width[..] {\n+        \"16\" => 16,\n+        \"32\" => 32,\n+        \"64\" => 64,\n         w => sp.fatal(&format!(\n             \"target specification was invalid: \\\n              unrecognized target-pointer-width {}\",\n@@ -1583,8 +1582,7 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n \n     Config {\n         target,\n-        isize_ty,\n-        usize_ty,\n+        ptr_width,\n     }\n }\n "}, {"sha": "6f72466c559dc82484a318b71b087474fb51e233", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=66dce1114d1014258c8cc586e176f2ea53ab4ed1", "patch": "@@ -325,8 +325,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         use rustc::ty::{Int, Uint};\n \n         let new_kind = match ty.kind {\n-            Int(Isize) => Int(self.tcx.sess.target.isize_ty),\n-            Uint(Usize) => Uint(self.tcx.sess.target.usize_ty),\n+            Int(t @ Isize) => Int(t.normalize(self.tcx.sess.target.ptr_width)),\n+            Uint(t @ Usize) => Uint(t.normalize(self.tcx.sess.target.ptr_width)),\n             ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n             _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n         };"}, {"sha": "aa55f3a19e2be45edd4e0fcdad72dc2cb8466b2e", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=66dce1114d1014258c8cc586e176f2ea53ab4ed1", "patch": "@@ -1926,15 +1926,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, bool)> {\n     match ty.kind {\n         ty::Int(t) => Some((match t {\n-            ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,\n+            ast::IntTy::Isize => cx.tcx.sess.target.ptr_width as u64,\n             ast::IntTy::I8 => 8,\n             ast::IntTy::I16 => 16,\n             ast::IntTy::I32 => 32,\n             ast::IntTy::I64 => 64,\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::Uint(t) => Some((match t {\n-            ast::UintTy::Usize => cx.tcx.sess.target.usize_ty.bit_width().unwrap() as u64,\n+            ast::UintTy::Usize => cx.tcx.sess.target.ptr_width as u64,\n             ast::UintTy::U8 => 8,\n             ast::UintTy::U16 => 16,\n             ast::UintTy::U32 => 32,"}, {"sha": "f2e56c69fd79f5567fcc8be8b35e99277ae570a3", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=66dce1114d1014258c8cc586e176f2ea53ab4ed1", "patch": "@@ -252,12 +252,7 @@ fn lint_int_literal<'a, 'tcx>(\n     t: ast::IntTy,\n     v: u128,\n ) {\n-    let int_type = if let ast::IntTy::Isize = t {\n-        cx.sess().target.isize_ty\n-    } else {\n-        t\n-    };\n-\n+    let int_type = t.normalize(cx.sess().target.ptr_width);\n     let (_, max) = int_ty_range(int_type);\n     let max = max as u128;\n     let negative = type_limits.negated_expr_id == e.hir_id;\n@@ -303,11 +298,7 @@ fn lint_uint_literal<'a, 'tcx>(\n     lit: &hir::Lit,\n     t: ast::UintTy,\n ) {\n-    let uint_type = if let ast::UintTy::Usize = t {\n-        cx.sess().target.usize_ty\n-    } else {\n-        t\n-    };\n+    let uint_type = t.normalize(cx.sess().target.ptr_width);\n     let (min, max) = uint_ty_range(uint_type);\n     let lit_val: u128 = match lit.node {\n         // _v is u8, within range by definition"}, {"sha": "b8561216896e26dd0bfc09f32f4b3dc4b9021640", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dce1114d1014258c8cc586e176f2ea53ab4ed1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=66dce1114d1014258c8cc586e176f2ea53ab4ed1", "patch": "@@ -1693,6 +1693,18 @@ impl IntTy {\n             IntTy::I128 => 128,\n         })\n     }\n+\n+    pub fn normalize(&self, target_width: u32) -> Self {\n+        match self {\n+            IntTy::Isize => match target_width {\n+                16 => IntTy::I16,\n+                32 => IntTy::I32,\n+                64 => IntTy::I64,\n+                _ => unreachable!(),\n+            },\n+            _ => *self,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n@@ -1743,6 +1755,18 @@ impl UintTy {\n             UintTy::U128 => 128,\n         })\n     }\n+\n+    pub fn normalize(&self, target_width: u32) -> Self {\n+        match self {\n+            UintTy::Usize => match target_width {\n+                16 => UintTy::U16,\n+                32 => UintTy::U32,\n+                64 => UintTy::U64,\n+                _ => unreachable!(),\n+            },\n+            _ => *self,\n+        }\n+    }\n }\n \n /// A constraint on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or"}]}