{"sha": "629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWU4ZDFlZDBhZWFiZjI3YTFlMWIxZDNjOGM5MTM0NzE2MDQzZTM=", "commit": {"author": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-03T10:46:56Z"}, "committer": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-03T10:46:56Z"}, "message": "Apply more clippy suggestions and update generated", "tree": {"sha": "c55fdaf665ba247aa5df4f9912290fd5ddd1841a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55fdaf665ba247aa5df4f9912290fd5ddd1841a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "html_url": "https://github.com/rust-lang/rust/commit/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/comments", "author": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "html_url": "https://github.com/rust-lang/rust/commit/3c6dc0f89dc9c2902d71e8639b4913917a396f8a"}], "stats": {"total": 193, "additions": 51, "deletions": 142}, "files": [{"sha": "18eb97f0d58a9ffdbb8bc153eb32dd96446581d6", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -187,7 +187,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n             let a = 1664525;\n             let c = 1013904223;\n             *seed = usize::wrapping_add(usize::wrapping_mul(*seed, a), c);\n-            return *seed;\n+            *seed\n         }\n         fn make_ident(ident: &str) -> tt::TokenTree {\n             tt::Leaf::Ident(tt::Ident { id: tt::TokenId::unspecified(), text: SmolStr::new(ident) })"}, {"sha": "c982eb58f1fe823d9cd90fc6276946ffbead62e1", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -219,7 +219,7 @@ impl BindingsBuilder {\n         bindings\n     }\n \n-    fn build_inner(&self, bindings: &mut Bindings, link_nodes: &Vec<LinkNode<Rc<BindingKind>>>) {\n+    fn build_inner(&self, bindings: &mut Bindings, link_nodes: &[LinkNode<Rc<BindingKind>>]) {\n         let mut nodes = Vec::new();\n         self.collect_nodes(&link_nodes, &mut nodes);\n \n@@ -301,7 +301,7 @@ impl BindingsBuilder {\n \n     fn collect_nodes<'a>(\n         &'a self,\n-        link_nodes: &'a Vec<LinkNode<Rc<BindingKind>>>,\n+        link_nodes: &'a [LinkNode<Rc<BindingKind>>],\n         nodes: &mut Vec<&'a Rc<BindingKind>>,\n     ) {\n         link_nodes.iter().for_each(|it| match it {\n@@ -494,15 +494,8 @@ fn match_loop_inner<'t>(\n                         }\n                         Some(err) => {\n                             res.add_err(err);\n-                            match match_res.value {\n-                                Some(fragment) => {\n-                                    bindings_builder.push_fragment(\n-                                        &mut item.bindings,\n-                                        &name,\n-                                        fragment,\n-                                    );\n-                                }\n-                                _ => {}\n+                            if let Some(fragment) = match_res.value {\n+                                bindings_builder.push_fragment(&mut item.bindings, &name, fragment);\n                             }\n                             item.is_error = true;\n                             error_items.push(item);\n@@ -578,9 +571,9 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n         );\n         stdx::always!(cur_items.is_empty());\n \n-        if error_items.len() > 0 {\n+        if !error_items.is_empty() {\n             error_recover_item = error_items.pop().map(|it| it.bindings);\n-        } else if eof_items.len() > 0 {\n+        } else if !eof_items.is_empty() {\n             error_recover_item = Some(eof_items[0].bindings.clone());\n         }\n \n@@ -793,7 +786,7 @@ impl<'a> TtIter<'a> {\n             _ => (),\n         }\n \n-        let tt = self.next().ok_or_else(|| ())?.clone();\n+        let tt = self.next().ok_or(())?.clone();\n         let punct = match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.spacing == tt::Spacing::Joint => {\n                 punct"}, {"sha": "380a5074431c918f6ca180f89ef0a64bbe5147cc", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -295,8 +295,8 @@ fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n                 // Checks that no repetition which could match an empty token\n                 // https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_expand/mbe/macro_rules.rs#L558\n \n-                if separator.is_none() {\n-                    if subtree.iter().all(|child_op| {\n+                if separator.is_none()\n+                    && subtree.iter().all(|child_op| {\n                         match child_op {\n                             Op::Var { kind, .. } => {\n                                 // vis is optional\n@@ -314,9 +314,9 @@ fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n                             Op::Subtree { .. } => {}\n                         }\n                         false\n-                    }) {\n-                        return Err(ParseError::RepetitionEmptyTokenTree);\n-                    }\n+                    })\n+                {\n+                    return Err(ParseError::RepetitionEmptyTokenTree);\n                 }\n                 validate(subtree)?\n             }"}, {"sha": "04c0d3e7543d026c809328c84429f914311dfed1", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -213,7 +213,7 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n     Ok(res)\n }\n \n-fn eat_fragment_kind<'a>(src: &mut TtIter<'a>, mode: Mode) -> Result<Option<SmolStr>, ParseError> {\n+fn eat_fragment_kind(src: &mut TtIter<'_>, mode: Mode) -> Result<Option<SmolStr>, ParseError> {\n     if let Mode::Pattern = mode {\n         src.expect_char(':').map_err(|()| err!(\"bad fragment specifier 1\"))?;\n         let ident = src.expect_ident().map_err(|()| err!(\"bad fragment specifier 1\"))?;"}, {"sha": "978c75747a207d3f75388be0a51596f55c4f28f4", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -243,8 +243,7 @@ trait TokenConvertor {\n     type Token: SrcToken;\n \n     fn go(&mut self) -> tt::Subtree {\n-        let mut subtree = tt::Subtree::default();\n-        subtree.delimiter = None;\n+        let mut subtree = tt::Subtree { delimiter: None, ..Default::default() };\n         while self.peek().is_some() {\n             self.collect_leaf(&mut subtree.token_trees);\n         }\n@@ -506,7 +505,7 @@ impl TokenConvertor for Convertor {\n \n     fn peek(&self) -> Option<Self::Token> {\n         if let Some((punct, mut offset)) = self.punct_offset.clone() {\n-            offset = offset + TextSize::of('.');\n+            offset += TextSize::of('.');\n             if usize::from(offset) < punct.text().len() {\n                 return Some(SynToken::Punch(punct, offset));\n             }"}, {"sha": "bd54f2442bfa3670a995c48c1564b2f342fd1582", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -138,7 +138,7 @@ impl<'a> TtIter<'a> {\n             }\n         }\n         self.inner = self.inner.as_slice()[res.len()..].iter();\n-        if res.len() == 0 && err.is_none() {\n+        if res.is_empty() && err.is_none() {\n             err = Some(err!(\"no tokens consumed\"));\n         }\n         let res = match res.len() {"}, {"sha": "bcefd183a1af608d8d2629c5946a84cd4cdc5d46", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 23, "deletions": 106, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -260,116 +260,33 @@ pub enum SyntaxKind {\n use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n-        matches!(\n-            self,\n-            AS_KW\n-                | ASYNC_KW\n-                | AWAIT_KW\n-                | BOX_KW\n-                | BREAK_KW\n-                | CONST_KW\n-                | CONTINUE_KW\n-                | CRATE_KW\n-                | DYN_KW\n-                | ELSE_KW\n-                | ENUM_KW\n-                | EXTERN_KW\n-                | FALSE_KW\n-                | FN_KW\n-                | FOR_KW\n-                | IF_KW\n-                | IMPL_KW\n-                | IN_KW\n-                | LET_KW\n-                | LOOP_KW\n-                | MACRO_KW\n-                | MATCH_KW\n-                | MOD_KW\n-                | MOVE_KW\n-                | MUT_KW\n-                | PUB_KW\n-                | REF_KW\n-                | RETURN_KW\n-                | SELF_KW\n-                | STATIC_KW\n-                | STRUCT_KW\n-                | SUPER_KW\n-                | TRAIT_KW\n-                | TRUE_KW\n-                | TRY_KW\n-                | TYPE_KW\n-                | UNSAFE_KW\n-                | USE_KW\n-                | WHERE_KW\n-                | WHILE_KW\n-                | YIELD_KW\n-                | AUTO_KW\n-                | DEFAULT_KW\n-                | EXISTENTIAL_KW\n-                | UNION_KW\n-                | RAW_KW\n-                | MACRO_RULES_KW\n-        )\n+        match self {\n+            AS_KW | ASYNC_KW | AWAIT_KW | BOX_KW | BREAK_KW | CONST_KW | CONTINUE_KW | CRATE_KW\n+            | DYN_KW | ELSE_KW | ENUM_KW | EXTERN_KW | FALSE_KW | FN_KW | FOR_KW | IF_KW\n+            | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n+            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n+            | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n+            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n+            | MACRO_RULES_KW => true,\n+            _ => false,\n+        }\n     }\n     pub fn is_punct(self) -> bool {\n-        matches!(\n-            self,\n-            SEMICOLON\n-                | COMMA\n-                | L_PAREN\n-                | R_PAREN\n-                | L_CURLY\n-                | R_CURLY\n-                | L_BRACK\n-                | R_BRACK\n-                | L_ANGLE\n-                | R_ANGLE\n-                | AT\n-                | POUND\n-                | TILDE\n-                | QUESTION\n-                | DOLLAR\n-                | AMP\n-                | PIPE\n-                | PLUS\n-                | STAR\n-                | SLASH\n-                | CARET\n-                | PERCENT\n-                | UNDERSCORE\n-                | DOT\n-                | DOT2\n-                | DOT3\n-                | DOT2EQ\n-                | COLON\n-                | COLON2\n-                | EQ\n-                | EQ2\n-                | FAT_ARROW\n-                | BANG\n-                | NEQ\n-                | MINUS\n-                | THIN_ARROW\n-                | LTEQ\n-                | GTEQ\n-                | PLUSEQ\n-                | MINUSEQ\n-                | PIPEEQ\n-                | AMPEQ\n-                | CARETEQ\n-                | SLASHEQ\n-                | STAREQ\n-                | PERCENTEQ\n-                | AMP2\n-                | PIPE2\n-                | SHL\n-                | SHR\n-                | SHLEQ\n-                | SHREQ\n-        )\n+        match self {\n+            SEMICOLON | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK\n+            | L_ANGLE | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS\n+            | STAR | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOT2 | DOT3 | DOT2EQ | COLON\n+            | COLON2 | EQ | EQ2 | FAT_ARROW | BANG | NEQ | MINUS | THIN_ARROW | LTEQ | GTEQ\n+            | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ | PERCENTEQ | AMP2\n+            | PIPE2 | SHL | SHR | SHLEQ | SHREQ => true,\n+            _ => false,\n+        }\n     }\n     pub fn is_literal(self) -> bool {\n-        matches!(self, INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING)\n+        match self {\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n+            _ => false,\n+        }\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {"}, {"sha": "304f47b3dc9fbdf43c985d84f783ffaa2d913e21", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -36,8 +36,8 @@ pub(crate) fn incremental_reparse(\n     None\n }\n \n-fn reparse_token<'node>(\n-    root: &'node SyntaxNode,\n+fn reparse_token(\n+    root: &SyntaxNode,\n     edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let prev_token = root.covering_element(edit.delete).as_token()?.clone();\n@@ -84,8 +84,8 @@ fn reparse_token<'node>(\n     }\n }\n \n-fn reparse_block<'node>(\n-    root: &'node SyntaxNode,\n+fn reparse_block(\n+    root: &SyntaxNode,\n     edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;"}, {"sha": "9f24261717fc9ce6eb27ac1062617987d6f2e175", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -236,7 +236,7 @@ where\n         }\n     });\n     dir_tests(&test_data_dir(), err_paths, \"rast\", |text, path| {\n-        if let Ok(_) = f(text) {\n+        if f(text).is_ok() {\n             panic!(\"'{:?}' successfully parsed when it should have errored\", path);\n         } else {\n             \"ERROR\\n\".to_owned()"}, {"sha": "2384a746f300db245429841311bbbb9bc1fe877a", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -132,7 +132,7 @@ fn parse_changelog_line(s: &str) -> Option<PrInfo> {\n             return Some(PrInfo { kind, message: Some(message) });\n         }\n     };\n-    let res = PrInfo { kind, message };\n+    let res = PrInfo { message, kind };\n     Some(res)\n }\n \n@@ -152,7 +152,7 @@ fn parse_title_line(s: &str) -> PrInfo {\n                 PrKind::Skip => None,\n                 _ => Some(s[prefix.len()..].to_string()),\n             };\n-            return PrInfo { kind, message };\n+            return PrInfo { message, kind };\n         }\n     }\n     PrInfo { kind: PrKind::Other, message: Some(s.to_string()) }"}, {"sha": "e1a62da27764c2bed987861483534793516e836c", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=629e8d1ed0aeabf27a1e1b1d3c8c9134716043e3", "patch": "@@ -33,7 +33,7 @@ fn check_code_formatting() {\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n     crate::ensure_rustfmt().unwrap();\n     let res = cmd!(\"cargo fmt -- --check\").run();\n-    if !res.is_ok() {\n+    if res.is_err() {\n         let _ = cmd!(\"cargo fmt\").run();\n     }\n     res.unwrap()\n@@ -244,19 +244,19 @@ Zlib OR Apache-2.0 OR MIT\n         .map(|it| it.trim())\n         .map(|it| it[r#\"\"license\":\"#.len()..].trim_matches('\"'))\n         .collect::<Vec<_>>();\n-    licenses.sort();\n+    licenses.sort_unstable();\n     licenses.dedup();\n     if licenses != expected {\n         let mut diff = String::new();\n \n-        diff += &format!(\"New Licenses:\\n\");\n+        diff += &\"New Licenses:\\n\".to_string();\n         for &l in licenses.iter() {\n             if !expected.contains(&l) {\n                 diff += &format!(\"  {}\\n\", l)\n             }\n         }\n \n-        diff += &format!(\"\\nMissing Licenses:\\n\");\n+        diff += &\"\\nMissing Licenses:\\n\".to_string();\n         for &l in expected.iter() {\n             if !licenses.contains(&l) {\n                 diff += &format!(\"  {}\\n\", l)"}]}