{"sha": "da57f5dc17303cfd5ba318d1735c7f325f6b7130", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTdmNWRjMTczMDNjZmQ1YmEzMThkMTczNWM3ZjMyNWY2YjcxMzA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T12:32:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-03T14:33:25Z"}, "message": "Shortcut `block_def_map` if there's no inner items\n\nThis previously didn't work, but apparently only because of the wonky\ntest setup", "tree": {"sha": "e3df694209537a03437b6b041e4c3cb24c481563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3df694209537a03437b6b041e4c3cb24c481563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da57f5dc17303cfd5ba318d1735c7f325f6b7130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da57f5dc17303cfd5ba318d1735c7f325f6b7130", "html_url": "https://github.com/rust-lang/rust/commit/da57f5dc17303cfd5ba318d1735c7f325f6b7130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da57f5dc17303cfd5ba318d1735c7f325f6b7130/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eff6705cc1c1d4399a7c9da360d344a96df59b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eff6705cc1c1d4399a7c9da360d344a96df59b6", "html_url": "https://github.com/rust-lang/rust/commit/7eff6705cc1c1d4399a7c9da360d344a96df59b6"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "540c6c9ada7b6f281cf65a305bc8c1822204efa6", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=da57f5dc17303cfd5ba318d1735c7f325f6b7130", "patch": "@@ -700,10 +700,13 @@ impl ExprCollector<'_> {\n         let ast_id = self.expander.ast_id(&block);\n         let block_loc = BlockLoc { ast_id, module: self.expander.module };\n         let block_id = self.db.intern_block(block_loc);\n-        let def_map = self.db.block_def_map(block_id);\n-        let root = def_map.module_id(def_map.root());\n+        let opt_def_map = self.db.block_def_map(block_id);\n+        let has_def_map = opt_def_map.is_some();\n+        let def_map = opt_def_map.unwrap_or_else(|| self.expander.def_map.clone());\n+        let module =\n+            if has_def_map { def_map.module_id(def_map.root()) } else { self.expander.module };\n         let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n-        let prev_module = mem::replace(&mut self.expander.module, root);\n+        let prev_module = mem::replace(&mut self.expander.module, module);\n \n         self.collect_stmts_items(block.statements());\n         let statements ="}, {"sha": "404603360844f1f3a17440954ebb6810cfef8922", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=da57f5dc17303cfd5ba318d1735c7f325f6b7130", "patch": "@@ -43,7 +43,7 @@ fn block_def_map_at(ra_fixture: &str) -> Arc<DefMap> {\n     let mut block =\n         block_at_pos(&db, &def_map, position).expect(\"couldn't find enclosing function or block\");\n     loop {\n-        let def_map = db.block_def_map(block);\n+        let def_map = db.block_def_map(block).unwrap_or_else(|| def_map.clone());\n         let new_block = block_at_pos(&db, &def_map, position);\n         match new_block {\n             Some(new_block) => {\n@@ -58,6 +58,7 @@ fn block_def_map_at(ra_fixture: &str) -> Arc<DefMap> {\n }\n \n fn block_at_pos(db: &dyn DefDatabase, def_map: &DefMap, position: FilePosition) -> Option<BlockId> {\n+    // Find the smallest (innermost) function containing the cursor.\n     let mut size = None;\n     let mut fn_def = None;\n     for (_, module) in def_map.modules() {\n@@ -73,7 +74,6 @@ fn block_at_pos(db: &dyn DefDatabase, def_map: &DefMap, position: FilePosition)\n                 let ast = ast_map.get(item_tree[it.lookup(db).id.value].ast_id).to_node(&root);\n                 let range = ast.syntax().text_range();\n \n-                // Find the smallest (innermost) function containing the cursor.\n                 if !range.contains(position.offset) {\n                     continue;\n                 }"}, {"sha": "7fe6f6346a5998fc1dcbe1e720b859c66205638b", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=da57f5dc17303cfd5ba318d1735c7f325f6b7130", "patch": "@@ -59,7 +59,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     fn crate_def_map_query(&self, krate: CrateId) -> Arc<DefMap>;\n \n     #[salsa::invoke(DefMap::block_def_map_query)]\n-    fn block_def_map(&self, block: BlockId) -> Arc<DefMap>;\n+    fn block_def_map(&self, block: BlockId) -> Option<Arc<DefMap>>;\n \n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;"}, {"sha": "5dd3705b0bbdd16bdba80de71f33c03bda592078", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=da57f5dc17303cfd5ba318d1735c7f325f6b7130", "patch": "@@ -81,7 +81,13 @@ pub struct ModuleId {\n impl ModuleId {\n     pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n         match self.block {\n-            Some(block) => db.block_def_map(block),\n+            Some(block) => {\n+                db.block_def_map(block).unwrap_or_else(|| {\n+                    // NOTE: This should be unreachable - all `ModuleId`s come from their `DefMap`s,\n+                    // so the `DefMap` here must exist.\n+                    panic!(\"no `block_def_map` for `ModuleId` {:?}\", self);\n+                })\n+            }\n             None => db.crate_def_map(self.krate),\n         }\n     }\n@@ -239,6 +245,7 @@ pub struct BlockId(salsa::InternId);\n #[derive(Debug, Hash, PartialEq, Eq, Clone)]\n pub struct BlockLoc {\n     ast_id: AstId<ast::BlockExpr>,\n+    /// The containing module.\n     module: ModuleId,\n }\n impl_intern!(BlockId, BlockLoc, intern_block, lookup_intern_block);"}, {"sha": "ece5958f4a49c30d0df1103d8f03fbce38c3295e", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57f5dc17303cfd5ba318d1735c7f325f6b7130/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=da57f5dc17303cfd5ba318d1735c7f325f6b7130", "patch": "@@ -197,12 +197,17 @@ impl DefMap {\n         Arc::new(def_map)\n     }\n \n-    pub(crate) fn block_def_map_query(db: &dyn DefDatabase, block_id: BlockId) -> Arc<DefMap> {\n+    pub(crate) fn block_def_map_query(\n+        db: &dyn DefDatabase,\n+        block_id: BlockId,\n+    ) -> Option<Arc<DefMap>> {\n         let block: BlockLoc = db.lookup_intern_block(block_id);\n         let parent = block.module.def_map(db);\n \n-        // FIXME: It would be good to just return the parent map when the block has no items, but\n-        // we rely on `def_map.block` in a few places, which is `Some` for the inner `DefMap`.\n+        let item_tree = db.item_tree(block.ast_id.file_id);\n+        if item_tree.inner_items_of_block(block.ast_id.value).is_empty() {\n+            return None;\n+        }\n \n         let block_info =\n             BlockInfo { block: block_id, parent, parent_module: block.module.local_id };\n@@ -211,7 +216,7 @@ impl DefMap {\n         def_map.block = Some(block_info);\n \n         let def_map = collector::collect_defs(db, def_map, Some(block.ast_id));\n-        Arc::new(def_map)\n+        Some(Arc::new(def_map))\n     }\n \n     fn empty(krate: CrateId, edition: Edition) -> DefMap {"}]}