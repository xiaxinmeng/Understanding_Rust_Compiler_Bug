{"sha": "38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzMyYzRiNWNmNzc4Y2IxYjQ0MWJmYzQyOTBiM2UzNTI0YjgwYzI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T15:09:33Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand: Correct the implementation of Rand for f32 & f64.", "tree": {"sha": "a1577c0a69f15b8ffc3a06ddd2dcdd773973331d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1577c0a69f15b8ffc3a06ddd2dcdd773973331d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "html_url": "https://github.com/rust-lang/rust/commit/38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38732c4b5cf778cb1b441bfc4290b3e3524b80c2/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a836f13dc0c2c636fd00b77d05f50a00cc3a7c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/a836f13dc0c2c636fd00b77d05f50a00cc3a7c55", "html_url": "https://github.com/rust-lang/rust/commit/a836f13dc0c2c636fd00b77d05f50a00cc3a7c55"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "8ad0bd9e29755f81ddf0430122775713f076d335", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/38732c4b5cf778cb1b441bfc4290b3e3524b80c2/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38732c4b5cf778cb1b441bfc4290b3e3524b80c2/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "patch": "@@ -95,23 +95,28 @@ impl Rand for u64 {\n }\n \n impl Rand for f32 {\n-    /// A random `f32` in the range `[0, 1)`.\n+    /// A random `f32` in the range `[0, 1)`, using 24 bits of\n+    /// precision.\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> f32 {\n-        // weird, but this is the easiest way to get 2**32\n-        static SCALE: f32 = 2.0 * (1u32 << 31) as f32;\n-        rng.next_u32() as f32 / SCALE\n+        // using any more than 24 bits will cause (e.g.) 0xffff_ffff\n+        // to correspond to 1 exactly, so we need to drop 8 to\n+        // guarantee the open end.\n+\n+        static SCALE: f32 = (1u32 << 24) as f32;\n+        (rng.next_u32() >> 8) as f32 / SCALE\n     }\n }\n \n impl Rand for f64 {\n-    /// A random `f64` in the range `[0, 1)`.\n+    /// A random `f64` in the range `[0, 1)`, using 53 bits of\n+    /// precision.\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> f64 {\n-        // weird, but this is the easiest way to get 2**64\n-        static SCALE: f64 = 2.0 * (1u64 << 63) as f64;\n+        // as for f32, but using more bits.\n \n-        rng.next_u64() as f64 / SCALE\n+        static SCALE: f64 = (1u64 << 53) as f64;\n+        (rng.next_u64() >> 11) as f64 / SCALE\n     }\n }\n \n@@ -198,3 +203,19 @@ impl<T: Rand + 'static> Rand for @T {\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> @T { @rng.gen() }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use rand::Rng;\n+    struct ConstantRng(u64);\n+    impl Rng for ConstantRng {\n+        fn next_u64(&mut self) -> u64 {\n+            **self\n+        }\n+    }\n+    fn floating_point_edge_cases() {\n+        // the test for exact equality is correct here.\n+        assert!(ConstantRng(0xffff_ffff).gen::<f32>() != 1.0)\n+        assert!(ConstantRng(0xffff_ffff_ffff_ffff).gen::<f64>() != 1.0)\n+    }\n+}"}]}