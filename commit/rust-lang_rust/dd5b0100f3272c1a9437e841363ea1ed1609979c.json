{"sha": "dd5b0100f3272c1a9437e841363ea1ed1609979c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNWIwMTAwZjMyNzJjMWE5NDM3ZTg0MTM2M2VhMWVkMTYwOTk3OWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T14:13:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T14:13:09Z"}, "message": "Merge remote-tracking branch 'origin/master' into memory", "tree": {"sha": "aae84114a11e7baf1c825c3845ce7477fce244bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae84114a11e7baf1c825c3845ce7477fce244bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd5b0100f3272c1a9437e841363ea1ed1609979c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkJPgACgkQpp+NIls6\n19mIoA//S9onDdggNCUNqAjoVAualpTPLy2FHyka7f9IryvL2C+LG59uO4V/eeF+\nkr/jeoocqH4Kh6HesZyvffpdldLFhVoz74KotwoPI840Z+iaBgQS17rTJYlDzrbE\nc8NW+lCXWvbdQluMUBUjTCxXybTwRDDBGXdzOjcWEdNKUeDRJBrpiv600aqiHqoB\nKyTgaqErwei3irbawFzleG+WWash5TcuFopoFxQ37F6SZhb7BxzwqXQlJYawhvPU\nbbKUFsVl52rWB5+7wzdAfgfLE/g9t/06dDPfhHRP4NqyqTW9Q9SxTToBb93GXhKb\n2oOQNcI8mxW7HxvEt67s0KRL1PHGLh3R0l4theOrj2bQuefCm1+UhKz5SmAgHqhF\nxndWnqCFpDUHSDxlrf8xw2k39urKXwNSuoJqbq2QeDoph9AUyW7+GzSwVumrzdzc\nbZc9MI08Ui+ltvlECgZ1gJ4/FgzcsB5T80brXOl1e0yhBSnIh7LJVU28nRm3UlXi\nV3fV2AQAFIaNEu6FaW9LTCxxwnhSxqizxgkqgWkmPU46Ea35B+0PH8VmiBAaMOvA\nmy1qDr90zm45Swn+0z6h2tdRKW4VH26KfYCsGFyZCs+uLTSpd9ty7hrKZGY9ZDUE\nOwxdvZLbmZHsQVZmV+wyzTEs861A3ROXi4v9w0IXhx2GxYggxhY=\n=pfbx\n-----END PGP SIGNATURE-----", "payload": "tree aae84114a11e7baf1c825c3845ce7477fce244bd\nparent 2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e\nparent 44a360d8ba3cd77e86fcb510808e2b1c550d4c46\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503929589 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503929589 +0200\n\nMerge remote-tracking branch 'origin/master' into memory\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5b0100f3272c1a9437e841363ea1ed1609979c", "html_url": "https://github.com/rust-lang/rust/commit/dd5b0100f3272c1a9437e841363ea1ed1609979c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd5b0100f3272c1a9437e841363ea1ed1609979c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "html_url": "https://github.com/rust-lang/rust/commit/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e"}, {"sha": "44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a360d8ba3cd77e86fcb510808e2b1c550d4c46", "html_url": "https://github.com/rust-lang/rust/commit/44a360d8ba3cd77e86fcb510808e2b1c550d4c46"}], "stats": {"total": 87, "additions": 41, "deletions": 46}, "files": [{"sha": "852a4cbe2aa8ac2303c127287d26ac3962c061aa", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -6,11 +6,8 @@\n // From rustc.\n #[macro_use]\n extern crate log;\n-extern crate log_settings;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_const_math;\n-extern crate rustc_data_structures;\n extern crate syntax;\n \n use rustc::ty::{self, TyCtxt};\n@@ -146,9 +143,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n }\n \n-struct Evaluator;\n+pub struct Evaluator;\n #[derive(Default)]\n-struct EvaluatorData {\n+pub struct EvaluatorData {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, MemoryPointer>,\n@@ -163,7 +160,7 @@ pub struct TlsEntry<'tcx> {\n }\n \n #[derive(Default)]\n-struct MemoryData<'tcx> {\n+pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n "}, {"sha": "e1a0a7d365908bf124c72bf029673c99212fbc20", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -79,7 +79,7 @@ impl LockInfo {\n pub struct AllocId(u64);\n \n #[derive(Debug)]\n-enum AllocIdKind {\n+pub enum AllocIdKind {\n     /// We can't ever have more than `usize::max_value` functions at the same time\n     /// since we never \"deallocate\" functions\n     Function(usize),\n@@ -89,7 +89,7 @@ enum AllocIdKind {\n }\n \n impl AllocIdKind {\n-    fn into_alloc_id(self) -> AllocId {\n+    pub fn into_alloc_id(self) -> AllocId {\n         match self {\n             AllocIdKind::Function(n) => AllocId(n as u64),\n             AllocIdKind::Runtime(n) => AllocId((1 << 63) | n),\n@@ -103,10 +103,10 @@ impl AllocId {\n         self.0 >> 63\n     }\n     /// Yields everything but the discriminant bits\n-    fn index(self) -> u64 {\n+    pub fn index(self) -> u64 {\n         self.0 & ((1 << 63) - 1)\n     }\n-    fn into_alloc_id_kind(self) -> AllocIdKind {\n+    pub fn into_alloc_id_kind(self) -> AllocIdKind {\n         match self.discriminant() {\n             0 => AllocIdKind::Function(self.index() as usize),\n             1 => AllocIdKind::Runtime(self.index()),\n@@ -1091,6 +1091,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         let dest = dest.to_ptr()?;\n         self.check_relocation_edges(src, size)?;\n \n+        // first copy the relocations to a temporary buffer, because\n+        // `get_bytes_mut` will clear the relocations, which is correct,\n+        // since we don't want to keep any relocations at the target.\n+\n+        let relocations: Vec<_> = self.relocations(src, size)?\n+            .map(|(&offset, &alloc_id)| {\n+                // Update relocation offsets for the new positions in the destination allocation.\n+                (offset + dest.offset - src.offset, alloc_id)\n+            })\n+            .collect();\n+\n         let src_bytes = self.get_bytes_unchecked(src, size, align)?.as_ptr();\n         let dest_bytes = self.get_bytes_mut(dest, size, align)?.as_mut_ptr();\n \n@@ -1116,7 +1127,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n \n         self.copy_undef_mask(src, dest, size)?;\n-        self.copy_relocations(src, dest, size)?;\n+        // copy back the relocations\n+        self.get_mut(dest.alloc_id)?.relocations.extend(relocations);\n \n         Ok(())\n     }\n@@ -1330,22 +1342,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n         Ok(())\n     }\n-\n-    fn copy_relocations(\n-        &mut self,\n-        src: MemoryPointer,\n-        dest: MemoryPointer,\n-        size: u64,\n-    ) -> EvalResult<'tcx> {\n-        let relocations: Vec<_> = self.relocations(src, size)?\n-            .map(|(&offset, &alloc_id)| {\n-                // Update relocation offsets for the new positions in the destination allocation.\n-                (offset + dest.offset - src.offset, alloc_id)\n-            })\n-            .collect();\n-        self.get_mut(dest.alloc_id)?.relocations.extend(relocations);\n-        Ok(())\n-    }\n }\n \n /// Undefined bytes"}, {"sha": "9dcb1c9b0f5f2cf3315de54012c2e7ef4e83e7a5", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -27,7 +27,7 @@ pub use self::eval_context::{EvalContext, Frame, ResourceLimits, StackPopCleanup\n \n pub use self::lvalue::{Lvalue, LvalueExtra, GlobalId};\n \n-pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory, AccessKind};\n+pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory, AccessKind, AllocIdKind};\n \n use self::memory::{PointerArithmetic, Lock};\n "}, {"sha": "b2bc6722afb04fd22c6a0bc4b546ecab3fe1e5ac", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n //error-pattern: the evaluated program leaked memory\n \n use std::rc::Rc;"}, {"sha": "4247cdaa4635ab01cf9780c57fbbb593e7d1fac8", "filename": "tests/compile-fail/panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,5 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n+// FIXME: Probably failing due to https://github.com/solson/miri/issues/296\n // compile-flags: -Zmir-emit-validate=0\n-\n //error-pattern: the evaluated program panicked\n \n fn main() {"}, {"sha": "fa4ae9afdf6925bf31de40b8226d74172bcfd65a", "filename": "tests/compile-fail/zst2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst2.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,5 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n+// FIXME: Probably failing due to https://github.com/solson/miri/issues/296\n // compile-flags: -Zmir-emit-validate=0\n-\n // error-pattern: the evaluated program panicked\n \n #[derive(Debug)]"}, {"sha": "320541552fb59161eb101994c45c6298c3088a76", "filename": "tests/compile-fail/zst3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Fcompile-fail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst3.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,5 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n+// FIXME: Probably failing due to https://github.com/solson/miri/issues/296\n // compile-flags: -Zmir-emit-validate=0\n-\n // error-pattern: the evaluated program panicked\n \n #[derive(Debug)]"}, {"sha": "55e6b07a6585467d8bbef34fd510f9c37a486146", "filename": "tests/run-pass/btreemap.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -0,0 +1,17 @@\n+// mir validation can't cope with `mem::uninitialized::<SomeEnum>()`\n+// compile-flags: -Zmir-emit-validate=0\n+\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+pub enum Foo {\n+    A(&'static str),\n+    _B,\n+    _C,\n+}\n+\n+pub fn main() {\n+    let mut b = std::collections::BTreeSet::new();\n+    b.insert(Foo::A(\"\\'\"));\n+    b.insert(Foo::A(\"/=\"));\n+    b.insert(Foo::A(\"#\"));\n+    b.insert(Foo::A(\"0o\"));\n+}"}, {"sha": "c6de3675abe8ccb11e62c385233a40468a5ea18c", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "4ac1b5436f522aad5f9538ec34b2facd7ff56d96", "filename": "tests/run-pass/send-is-not-static-par-for.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -10,9 +10,6 @@\n \n //ignore-windows\n \n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n use std::sync::Mutex;\n \n fn par_for<I, F>(iter: I, f: F)"}, {"sha": "e0e23812d275e43e004e483f2b5381617a6a4a92", "filename": "tests/run-pass/std.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5b0100f3272c1a9437e841363ea1ed1609979c/tests%2Frun-pass%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd.rs?ref=dd5b0100f3272c1a9437e841363ea1ed1609979c", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Due to https://github.com/rust-lang/rust/issues/43457 we have to disable validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n use std::sync::Arc;"}]}