{"sha": "99165ce1f76573729530c241036a0514ca1cf232", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MTY1Y2UxZjc2NTczNzI5NTMwYzI0MTAzNmEwNTE0Y2ExY2YyMzI=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-07T00:09:40Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-07T02:37:54Z"}, "message": "Caller location is propagated via immediates rather than memory.", "tree": {"sha": "0f89851311552d8aef8d02905017e49e320cf0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f89851311552d8aef8d02905017e49e320cf0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99165ce1f76573729530c241036a0514ca1cf232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99165ce1f76573729530c241036a0514ca1cf232", "html_url": "https://github.com/rust-lang/rust/commit/99165ce1f76573729530c241036a0514ca1cf232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99165ce1f76573729530c241036a0514ca1cf232/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afbbf7e8add3c14e5fe30b1b5e4c4a26179b9b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7afbbf7e8add3c14e5fe30b1b5e4c4a26179b9b7", "html_url": "https://github.com/rust-lang/rust/commit/7afbbf7e8add3c14e5fe30b1b5e4c4a26179b9b7"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "5d25f7022c51250217d28a21c70227883edbcd57", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99165ce1f76573729530c241036a0514ca1cf232/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99165ce1f76573729530c241036a0514ca1cf232/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=99165ce1f76573729530c241036a0514ca1cf232", "patch": "@@ -1016,9 +1016,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         span: Span,\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        if let Some(l) = self.caller_location {\n-            bx.load_operand(l)\n-        } else {\n+        self.caller_location.unwrap_or_else(|| {\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = bx.tcx().const_caller_location((\n@@ -1027,7 +1025,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 caller.col_display as u32 + 1,\n             ));\n             OperandRef::from_const(bx, const_loc)\n-        }\n+        })\n     }\n \n     fn get_personality_slot("}, {"sha": "5e4da8f21257da614613d0ebf67107690b488924", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99165ce1f76573729530c241036a0514ca1cf232/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99165ce1f76573729530c241036a0514ca1cf232/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=99165ce1f76573729530c241036a0514ca1cf232", "patch": "@@ -79,7 +79,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'tcx mir::VarDebugInfo<'tcx>>>>,\n \n     /// Caller location propagated if this function has `#[track_caller]`.\n-    caller_location: Option<PlaceRef<'tcx, Bx::Value>>,\n+    caller_location: Option<OperandRef<'tcx, Bx::Value>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -434,10 +434,17 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             fx.fn_abi.args.len(), args.len() + 1,\n             \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n         );\n+\n         let arg = &fx.fn_abi.args.last().unwrap();\n-        let place = PlaceRef::alloca(bx, arg.layout);\n-        bx.store_fn_arg(arg, &mut llarg_idx, place);\n-        fx.caller_location = Some(place);\n+        match arg.mode {\n+            PassMode::Direct(_) => (),\n+            _ => panic!(\"caller location must be PassMode::Direct, found {:?}\", arg.mode),\n+        }\n+\n+        fx.caller_location = Some(OperandRef {\n+            val: OperandValue::Immediate(bx.get_param(llarg_idx)),\n+            layout: arg.layout,\n+        });\n     }\n \n     args"}]}