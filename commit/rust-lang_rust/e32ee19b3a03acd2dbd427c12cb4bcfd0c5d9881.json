{"sha": "e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "node_id": "C_kwDOAAsO6NoAKGUzMmVlMTliM2EwM2FjZDJkYmQ0MjdjMTJjYjRiY2ZkMGM1ZDk4ODE", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-26T16:48:33Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-26T16:48:33Z"}, "message": "proc_macro: Rename ExpnContext to ExpnGlobals, and unify method on Server trait", "tree": {"sha": "c4af7cf8bdf1b448e367b559faec775c58c54381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4af7cf8bdf1b448e367b559faec775c58c54381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "html_url": "https://github.com/rust-lang/rust/commit/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2456ff892889fff5dea1ed0d234c22ab676d91da", "url": "https://api.github.com/repos/rust-lang/rust/commits/2456ff892889fff5dea1ed0d234c22ab676d91da", "html_url": "https://github.com/rust-lang/rust/commit/2456ff892889fff5dea1ed0d234c22ab676d91da"}], "stats": {"total": 75, "additions": 28, "deletions": 47}, "files": [{"sha": "6b9bc0ab54bf3b6d2bbfae29e32cb519ba31ca79", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "patch": "@@ -14,7 +14,7 @@ use rustc_span::def_id::CrateNum;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, SourceFile, Span};\n \n-use pm::bridge::{server, TokenTree};\n+use pm::bridge::{server, ExpnGlobals, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n use std::ops::Bound;\n use std::{ascii, panic};\n@@ -370,10 +370,7 @@ impl<'a, 'b> Rustc<'a, 'b> {\n     }\n \n     fn lit(&mut self, kind: token::LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Literal {\n-        Literal {\n-            lit: token::Lit::new(kind, symbol, suffix),\n-            span: server::Server::call_site(self),\n-        }\n+        Literal { lit: token::Lit::new(kind, symbol, suffix), span: self.call_site }\n     }\n }\n \n@@ -550,7 +547,7 @@ impl server::Group for Rustc<'_, '_> {\n         Group {\n             delimiter,\n             stream: stream.unwrap_or_default(),\n-            span: DelimSpan::from_single(server::Server::call_site(self)),\n+            span: DelimSpan::from_single(self.call_site),\n             flatten: false,\n         }\n     }\n@@ -582,7 +579,7 @@ impl server::Group for Rustc<'_, '_> {\n \n impl server::Punct for Rustc<'_, '_> {\n     fn new(&mut self, ch: char, spacing: Spacing) -> Self::Punct {\n-        Punct::new(ch, spacing == Spacing::Joint, server::Server::call_site(self))\n+        Punct::new(ch, spacing == Spacing::Joint, self.call_site)\n     }\n \n     fn as_char(&mut self, punct: Self::Punct) -> char {\n@@ -919,15 +916,11 @@ impl server::Span for Rustc<'_, '_> {\n }\n \n impl server::Server for Rustc<'_, '_> {\n-    fn def_site(&mut self) -> Self::Span {\n-        self.def_site\n-    }\n-\n-    fn call_site(&mut self) -> Self::Span {\n-        self.call_site\n-    }\n-\n-    fn mixed_site(&mut self) -> Self::Span {\n-        self.mixed_site\n+    fn globals(&mut self) -> ExpnGlobals<Self::Span> {\n+        ExpnGlobals {\n+            def_site: self.def_site,\n+            call_site: self.call_site,\n+            mixed_site: self.mixed_site,\n+        }\n     }\n }"}, {"sha": "74b4a91662bb550587e706cdc58c676904ba0106", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "patch": "@@ -232,15 +232,15 @@ impl Clone for SourceFile {\n \n impl Span {\n     pub(crate) fn def_site() -> Span {\n-        Bridge::with(|bridge| bridge.context.def_site)\n+        Bridge::with(|bridge| bridge.globals.def_site)\n     }\n \n     pub(crate) fn call_site() -> Span {\n-        Bridge::with(|bridge| bridge.context.call_site)\n+        Bridge::with(|bridge| bridge.globals.call_site)\n     }\n \n     pub(crate) fn mixed_site() -> Span {\n-        Bridge::with(|bridge| bridge.context.mixed_site)\n+        Bridge::with(|bridge| bridge.globals.mixed_site)\n     }\n }\n \n@@ -285,8 +285,8 @@ struct Bridge<'a> {\n     /// Server-side function that the client uses to make requests.\n     dispatch: closure::Closure<'a, Buffer, Buffer>,\n \n-    /// Provided context for this macro expansion.\n-    context: ExpnContext<Span>,\n+    /// Provided globals for this macro expansion.\n+    globals: ExpnGlobals<Span>,\n }\n \n impl<'a> !Send for Bridge<'a> {}\n@@ -414,11 +414,11 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n         maybe_install_panic_hook(force_show_panics);\n \n         let reader = &mut &buf[..];\n-        let (input, context) = <(A, ExpnContext<Span>)>::decode(reader, &mut ());\n+        let (globals, input) = <(ExpnGlobals<Span>, A)>::decode(reader, &mut ());\n \n         // Put the buffer we used for input back in the `Bridge` for requests.\n         let new_state =\n-            BridgeState::Connected(Bridge { cached_buffer: buf.take(), dispatch, context });\n+            BridgeState::Connected(Bridge { cached_buffer: buf.take(), dispatch, globals });\n \n         BRIDGE_STATE.with(|state| {\n             state.set(new_state, || {"}, {"sha": "3bdc9007cd2e9b133b3ced391e7ea218c8955f6f", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "patch": "@@ -465,15 +465,15 @@ compound_traits!(\n     }\n );\n \n-/// Context provided alongside the initial inputs for a macro expansion.\n+/// Globals provided alongside the initial inputs for a macro expansion.\n /// Provides values such as spans which are used frequently to avoid RPC.\n #[derive(Clone)]\n-struct ExpnContext<S> {\n-    def_site: S,\n-    call_site: S,\n-    mixed_site: S,\n+pub struct ExpnGlobals<S> {\n+    pub def_site: S,\n+    pub call_site: S,\n+    pub mixed_site: S,\n }\n \n compound_traits!(\n-    struct ExpnContext<Sp> { def_site, call_site, mixed_site }\n+    struct ExpnGlobals<Sp> { def_site, call_site, mixed_site }\n );"}, {"sha": "1b7657eab703400f598afeb9c49f9392b0ad0b93", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=e32ee19b3a03acd2dbd427c12cb4bcfd0c5d9881", "patch": "@@ -39,9 +39,7 @@ macro_rules! declare_server_traits {\n         })*\n \n         pub trait Server: Types $(+ $name)* {\n-            fn def_site(&mut self) -> Self::Span;\n-            fn call_site(&mut self) -> Self::Span;\n-            fn mixed_site(&mut self) -> Self::Span;\n+            fn globals(&mut self) -> ExpnGlobals<Self::Span>;\n         }\n     }\n }\n@@ -50,14 +48,8 @@ with_api!(Self, self_, declare_server_traits);\n pub(super) struct MarkedTypes<S: Types>(S);\n \n impl<S: Server> Server for MarkedTypes<S> {\n-    fn def_site(&mut self) -> Self::Span {\n-        <_>::mark(Server::def_site(&mut self.0))\n-    }\n-    fn call_site(&mut self) -> Self::Span {\n-        <_>::mark(Server::call_site(&mut self.0))\n-    }\n-    fn mixed_site(&mut self) -> Self::Span {\n-        <_>::mark(Server::mixed_site(&mut self.0))\n+    fn globals(&mut self) -> ExpnGlobals<Self::Span> {\n+        <_>::mark(Server::globals(&mut self.0))\n     }\n }\n \n@@ -279,14 +271,10 @@ fn run_server<\n     let mut dispatcher =\n         Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };\n \n-    let expn_context = ExpnContext {\n-        def_site: dispatcher.server.def_site(),\n-        call_site: dispatcher.server.call_site(),\n-        mixed_site: dispatcher.server.mixed_site(),\n-    };\n+    let globals = dispatcher.server.globals();\n \n     let mut buf = Buffer::new();\n-    (input, expn_context).encode(&mut buf, &mut dispatcher.handle_store);\n+    (globals, input).encode(&mut buf, &mut dispatcher.handle_store);\n \n     buf = strategy.run_bridge_and_client(&mut dispatcher, buf, run_client, force_show_panics);\n "}]}