{"sha": "19d1fe21c75bcfda468611c38da518f98d6e2c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDFmZTIxYzc1YmNmZGE0Njg2MTFjMzhkYTUxOGY5OGQ2ZTJjMzI=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-15T23:05:45Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "make unevaluated const substs optional", "tree": {"sha": "1297bac7128504471809f14ea8d827bec636950f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1297bac7128504471809f14ea8d827bec636950f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d1fe21c75bcfda468611c38da518f98d6e2c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d1fe21c75bcfda468611c38da518f98d6e2c32", "html_url": "https://github.com/rust-lang/rust/commit/19d1fe21c75bcfda468611c38da518f98d6e2c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d1fe21c75bcfda468611c38da518f98d6e2c32/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d627fc41b0a34d99afbaa21f3b8c301d942ffc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d627fc41b0a34d99afbaa21f3b8c301d942ffc8", "html_url": "https://github.com/rust-lang/rust/commit/4d627fc41b0a34d99afbaa21f3b8c301d942ffc8"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "2a85a67fa099cac9355d26e61ca5bdada9387994", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=19d1fe21c75bcfda468611c38da518f98d6e2c32", "patch": "@@ -187,11 +187,7 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated {\n-            def: ty::WithOptConstParam::unknown(def_id),\n-            substs,\n-            promoted: None,\n-        },\n+        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)"}, {"sha": "f5e43264a5c69809b4dfc04d00d93b4b2f0886ee", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=19d1fe21c75bcfda468611c38da518f98d6e2c32", "patch": "@@ -705,8 +705,8 @@ struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n \n impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n     type BreakTy = ();\n-    fn tcx_for_anon_const_substs(&self) -> TyCtxt<'tcx> {\n-        self.0\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.0)\n     }\n \n     fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "8bf31807d55d1441d74e503a42e29334aee365f0", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d1fe21c75bcfda468611c38da518f98d6e2c32/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=19d1fe21c75bcfda468611c38da518f98d6e2c32", "patch": "@@ -346,11 +346,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated {\n-                            def: ty::WithOptConstParam::unknown(def_id),\n-                            substs,\n-                            promoted: None,\n-                        },\n+                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n                         None,\n                     )\n                     .ok()"}]}