{"sha": "2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDdmMGM0ZWE3NGQ5NmFiNjRkMjdhMmVmNWVmYzZiNzVhMDJkZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-10T01:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T01:47:34Z"}, "message": "Rollup merge of #68071 - estebank:ice-67995, r=Centril\n\nExtend support of `_` in type parameters\n\n - Account for `impl Trait<_>`.\n - Provide a reasonable `Span` for empty `Generics` in `impl`s.\n - Account for `fn foo<_>(_: _) {}` to suggest `fn foo<T>(_: T) {}`.\n - Fix #67995. Follow up to #67597.", "tree": {"sha": "f0372c1648a4b6544d306e986393f4071bfbbb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0372c1648a4b6544d306e986393f4071bfbbb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF9e3CRBK7hj4Ov3rIwAAdHIIAJK6SFgvoHvAW1L/RssXsDTa\nzswiz2BA11LxAWzkHvC9a2h/4FNH/NWOyw/Qfy13jD4cbIfTdFVwRpMT26wQekEg\nmdKSQxh0/gswBgNmHpK/M2JR0eXk6vxEF8zbAT9lCuyx67OYexaov58SlO6GMAOp\n5HdSAFkREuvDvNz/XY9V5xKT0fIEQl4xESgYL1GtQuENTKkdciWd9JPwGAIWLumU\naoBlkxwGxaV2Ghc4pzVo7UQjY0NdcHXbAiBXxFoH5IQHYqxCcDM65NbVYPi+UzWF\nyE0yvB3REpTeLGXunux9kGGpPCqpSyKt54fj0UP+XqoWHAqnAuenjyuBInAtWbE=\n=lSi9\n-----END PGP SIGNATURE-----\n", "payload": "tree f0372c1648a4b6544d306e986393f4071bfbbb64\nparent 3bfa28c3a8e09364207c4f5c437c8e73dac67716\nparent 6e04cf062f605fbd70d728dcd364ad3eac0f822c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578620854 +0100\ncommitter GitHub <noreply@github.com> 1578620854 +0100\n\nRollup merge of #68071 - estebank:ice-67995, r=Centril\n\nExtend support of `_` in type parameters\n\n - Account for `impl Trait<_>`.\n - Provide a reasonable `Span` for empty `Generics` in `impl`s.\n - Account for `fn foo<_>(_: _) {}` to suggest `fn foo<T>(_: T) {}`.\n - Fix #67995. Follow up to #67597.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "html_url": "https://github.com/rust-lang/rust/commit/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bfa28c3a8e09364207c4f5c437c8e73dac67716", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfa28c3a8e09364207c4f5c437c8e73dac67716", "html_url": "https://github.com/rust-lang/rust/commit/3bfa28c3a8e09364207c4f5c437c8e73dac67716"}, {"sha": "6e04cf062f605fbd70d728dcd364ad3eac0f822c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e04cf062f605fbd70d728dcd364ad3eac0f822c", "html_url": "https://github.com/rust-lang/rust/commit/6e04cf062f605fbd70d728dcd364ad3eac0f822c"}], "stats": {"total": 371, "additions": 280, "deletions": 91}, "files": [{"sha": "075583711f5d3e8f9b129364cd1a0f9143327557", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -156,7 +156,7 @@ impl<'a> Parser<'a> {\n             self.expect_gt()?;\n             (params, span_lo.to(self.prev_span))\n         } else {\n-            (vec![], self.prev_span.between(self.token.span))\n+            (vec![], self.prev_span.shrink_to_hi())\n         };\n         Ok(ast::Generics {\n             params,"}, {"sha": "c53f132ff3d6b85cd4d9754131878150335a3a9d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -556,7 +556,11 @@ impl<'a> Parser<'a> {\n         let mut generics = if self.choose_generics_over_qpath() {\n             self.parse_generics()?\n         } else {\n-            Generics::default()\n+            let mut generics = Generics::default();\n+            // impl A for B {}\n+            //    /\\ this is where `generics.span` should point when there are no type params.\n+            generics.span = self.prev_span.shrink_to_hi();\n+            generics\n         };\n \n         let constness = if self.eat_keyword(kw::Const) {"}, {"sha": "7c7480339a5eebf65d09bfc029a362fa8848a6f9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -2803,7 +2803,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // allowed. `allow_ty_infer` gates this behavior.\n             crate::collect::placeholder_type_error(\n                 tcx,\n-                ident_span.unwrap_or(DUMMY_SP),\n+                ident_span.map(|sp| sp.shrink_to_hi()).unwrap_or(DUMMY_SP),\n                 generic_params,\n                 visitor.0,\n                 ident_span.is_some(),"}, {"sha": "3bb06d76349834043d2ffebd861203a0f1ffc858", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -127,7 +127,7 @@ struct CollectItemTypesVisitor<'tcx> {\n /// all already existing generic type parameters to avoid suggesting a name that is already in use.\n crate fn placeholder_type_error(\n     tcx: TyCtxt<'tcx>,\n-    ident_span: Span,\n+    span: Span,\n     generics: &[hir::GenericParam<'_>],\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n@@ -153,7 +153,14 @@ crate fn placeholder_type_error(\n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n     if generics.is_empty() {\n-        sugg.push((ident_span.shrink_to_hi(), format!(\"<{}>\", type_name)));\n+        sugg.push((span, format!(\"<{}>\", type_name)));\n+    } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n+        hir::ParamName::Plain(Ident { name: kw::Underscore, .. }) => true,\n+        _ => false,\n+    }) {\n+        // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n+        // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n+        sugg.push((arg.span, format!(\"{}\", type_name)));\n     } else {\n         sugg.push((\n             generics.iter().last().unwrap().span.shrink_to_hi(),\n@@ -175,16 +182,20 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let (generics, suggest) = match &item.kind {\n         hir::ItemKind::Union(_, generics)\n         | hir::ItemKind::Enum(_, generics)\n-        | hir::ItemKind::Struct(_, generics) => (&generics.params[..], true),\n-        hir::ItemKind::TyAlias(_, generics) => (&generics.params[..], false),\n+        | hir::ItemKind::TraitAlias(generics, _)\n+        | hir::ItemKind::Trait(_, _, generics, ..)\n+        | hir::ItemKind::Impl(_, _, _, generics, ..)\n+        | hir::ItemKind::Struct(_, generics) => (generics, true),\n+        hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. })\n+        | hir::ItemKind::TyAlias(_, generics) => (generics, false),\n         // `static`, `fn` and `const` are handled elsewhere to suggest appropriate type.\n         _ => return,\n     };\n \n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, item.ident.span, generics, visitor.0, suggest);\n+    placeholder_type_error(tcx, generics.span, &generics.params[..], visitor.0, suggest);\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -1798,10 +1809,19 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n /// Whether `ty` is a type with `_` placeholders that can be infered. Used in diagnostics only to\n /// use inference to provide suggestions for the appropriate type if possible.\n fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+    use hir::TyKind::*;\n     match &ty.kind {\n-        hir::TyKind::Infer => true,\n-        hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_suggestable_infer_ty(ty),\n-        hir::TyKind::Tup(tys) => tys.iter().any(|ty| is_suggestable_infer_ty(ty)),\n+        Infer => true,\n+        Slice(ty) | Array(ty, _) => is_suggestable_infer_ty(ty),\n+        Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n+        Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n+        Def(_, generic_args) => generic_args\n+            .iter()\n+            .filter_map(|arg| match arg {\n+                hir::GenericArg::Type(ty) => Some(ty),\n+                _ => None,\n+            })\n+            .any(is_suggestable_infer_ty),\n         _ => false,\n     }\n }"}, {"sha": "adecbd7e5b40ea24cfa447dad7edd77e43ddaaf4", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -1,3 +1,4 @@\n+#![feature(type_alias_impl_trait)] // Needed for single test `type Y = impl Trait<_>`\n // This test checks that it is not possible to enable global type\n // inference by using the `_` type placeholder.\n \n@@ -42,6 +43,16 @@ impl Test9 {\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n+fn test11(x: &usize) -> &_ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    &x\n+}\n+\n+unsafe fn test12(x: *const usize) -> *const *const _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    &x\n+}\n+\n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n@@ -131,3 +142,37 @@ trait T {\n     fn assoc_fn_test3() -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n+\n+struct BadStruct<_>(_);\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+trait BadTrait<_> {}\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+impl BadTrait<_> for BadStruct<_> {}\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+fn impl_trait() -> impl BadTrait<_> {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    unimplemented!()\n+}\n+\n+struct BadStruct1<_, _>(_);\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR the name `_` is already used\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+struct BadStruct2<_, T>(_, T);\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+type X = Box<_>;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+struct Struct;\n+trait Trait<T> {}\n+impl Trait<usize> for Struct {}\n+type Y = impl Trait<_>;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+fn foo() -> Y {\n+    Struct\n+}"}, {"sha": "05326a3e07a9324c302cb3563c644dc5a86005ab", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 200, "deletions": 80, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=2307f0c4ea74d96ab64d27a2ef5efc6b75a02df5", "patch": "@@ -1,5 +1,43 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:146:18\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                  ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:149:16\n+   |\n+LL | trait BadTrait<_> {}\n+   |                ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:159:19\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                   ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:159:22\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                      ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:164:19\n+   |\n+LL | struct BadStruct2<_, T>(_, T);\n+   |                   ^ expected identifier, found reserved identifier\n+\n+error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/typeck_type_placeholder_item.rs:159:22\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                   -  ^ already used\n+   |                   |\n+   |                   first use of `_`\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:4:14\n+  --> $DIR/typeck_type_placeholder_item.rs:5:14\n    |\n LL | fn test() -> _ { 5 }\n    |              ^\n@@ -8,7 +46,7 @@ LL | fn test() -> _ { 5 }\n    |              help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:7:16\n+  --> $DIR/typeck_type_placeholder_item.rs:8:16\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n    |               -^--^-\n@@ -18,7 +56,7 @@ LL | fn test2() -> (_, _) { (5, 5) }\n    |               help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:10:15\n+  --> $DIR/typeck_type_placeholder_item.rs:11:15\n    |\n LL | static TEST3: _ = \"test\";\n    |               ^\n@@ -27,7 +65,7 @@ LL | static TEST3: _ = \"test\";\n    |               help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:13:15\n+  --> $DIR/typeck_type_placeholder_item.rs:14:15\n    |\n LL | static TEST4: _ = 145;\n    |               ^\n@@ -36,13 +74,13 @@ LL | static TEST4: _ = 145;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:16:15\n+  --> $DIR/typeck_type_placeholder_item.rs:17:15\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |               ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:19:13\n+  --> $DIR/typeck_type_placeholder_item.rs:20:13\n    |\n LL | fn test6(_: _) { }\n    |             ^ not allowed in type signatures\n@@ -53,7 +91,7 @@ LL | fn test6<T>(_: T) { }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:22:18\n+  --> $DIR/typeck_type_placeholder_item.rs:23:18\n    |\n LL | fn test6_b<T>(_: _, _: T) { }\n    |                  ^ not allowed in type signatures\n@@ -64,7 +102,7 @@ LL | fn test6_b<T, K>(_: K, _: T) { }\n    |             ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:25:30\n+  --> $DIR/typeck_type_placeholder_item.rs:26:30\n    |\n LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n    |                              ^ not allowed in type signatures\n@@ -75,7 +113,7 @@ LL | fn test6_c<T, K, L, A, B, C>(_: C, _: (T, K, L, A, B)) { }\n    |                         ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:28:13\n+  --> $DIR/typeck_type_placeholder_item.rs:29:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n    |             ^ not allowed in type signatures\n@@ -86,13 +124,13 @@ LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:31:22\n+  --> $DIR/typeck_type_placeholder_item.rs:32:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n    |                      ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:31:22\n+  --> $DIR/typeck_type_placeholder_item.rs:32:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n    |                      ^ not allowed in type signatures\n@@ -103,7 +141,25 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:54:8\n+  --> $DIR/typeck_type_placeholder_item.rs:46:26\n+   |\n+LL | fn test11(x: &usize) -> &_ {\n+   |                         -^\n+   |                         ||\n+   |                         |not allowed in type signatures\n+   |                         help: replace with the correct return type: `&&usize`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:51:52\n+   |\n+LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n+   |                                      --------------^\n+   |                                      |             |\n+   |                                      |             not allowed in type signatures\n+   |                                      help: replace with the correct return type: `*const *const usize`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:65:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n@@ -122,7 +178,7 @@ LL |     b: (T, T),\n    |\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:60:21\n+  --> $DIR/typeck_type_placeholder_item.rs:71:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -131,7 +187,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:63:23\n+  --> $DIR/typeck_type_placeholder_item.rs:74:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -141,7 +197,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:66:22\n+  --> $DIR/typeck_type_placeholder_item.rs:77:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -150,7 +206,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:69:22\n+  --> $DIR/typeck_type_placeholder_item.rs:80:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -159,13 +215,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:72:22\n+  --> $DIR/typeck_type_placeholder_item.rs:83:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:75:20\n+  --> $DIR/typeck_type_placeholder_item.rs:86:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -176,7 +232,7 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:78:20\n+  --> $DIR/typeck_type_placeholder_item.rs:89:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -187,13 +243,13 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:81:29\n+  --> $DIR/typeck_type_placeholder_item.rs:92:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:81:29\n+  --> $DIR/typeck_type_placeholder_item.rs:92:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -204,7 +260,7 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:12\n+  --> $DIR/typeck_type_placeholder_item.rs:115:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -223,21 +279,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:109:27\n+  --> $DIR/typeck_type_placeholder_item.rs:120:27\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                           ^^^^^^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:109:28\n+  --> $DIR/typeck_type_placeholder_item.rs:120:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:113:30\n+  --> $DIR/typeck_type_placeholder_item.rs:124:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -247,7 +303,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:116:33\n+  --> $DIR/typeck_type_placeholder_item.rs:127:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n@@ -256,7 +312,76 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:121:31\n+  --> $DIR/typeck_type_placeholder_item.rs:146:21\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct<T>(T);\n+   |                  ^  ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:151:15\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |               ^                ^ not allowed in type signatures\n+   |               |\n+   |               not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | impl<T> BadTrait<T> for BadStruct<T> {}\n+   |     ^^^          ^                ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:154:34\n+   |\n+LL | fn impl_trait() -> impl BadTrait<_> {\n+   |                                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:159:25\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct1<T, _>(T);\n+   |                   ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:164:25\n+   |\n+LL | struct BadStruct2<_, T>(_, T);\n+   |                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct2<K, T>(K, T);\n+   |                   ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:168:14\n+   |\n+LL | type X = Box<_>;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:42:27\n+   |\n+LL |     fn test10(&self, _x : _) { }\n+   |                           ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn test10<T>(&self, _x : T) { }\n+   |              ^^^             ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:132:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -267,7 +392,7 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:123:31\n+  --> $DIR/typeck_type_placeholder_item.rs:134:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -280,7 +405,7 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:125:31\n+  --> $DIR/typeck_type_placeholder_item.rs:136:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -291,7 +416,7 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:26\n+  --> $DIR/typeck_type_placeholder_item.rs:138:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -302,7 +427,7 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:129:26\n+  --> $DIR/typeck_type_placeholder_item.rs:140:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -315,7 +440,7 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:131:28\n+  --> $DIR/typeck_type_placeholder_item.rs:142:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -326,47 +451,64 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:38:24\n+  --> $DIR/typeck_type_placeholder_item.rs:60:37\n    |\n-LL |     fn test9(&self) -> _ { () }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `()`\n+LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n+   |                                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n+   |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:41:27\n+  --> $DIR/typeck_type_placeholder_item.rs:102:34\n    |\n-LL |     fn test10(&self, _x : _) { }\n-   |                           ^ not allowed in type signatures\n+LL |         fn fn_test10(&self, _x : _) { }\n+   |                                  ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n-LL |     fn test10<T>(&self, _x : T) { }\n-   |              ^^^             ^\n+LL |         fn fn_test10<T>(&self, _x : T) { }\n+   |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:46:24\n+  --> $DIR/typeck_type_placeholder_item.rs:110:41\n    |\n-LL |     fn clone(&self) -> _ { Test9 }\n+LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n+   |                                         ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n+   |                      ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:174:21\n+   |\n+LL | type Y = impl Trait<_>;\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:39:24\n+   |\n+LL |     fn test9(&self) -> _ { () }\n    |                        ^\n    |                        |\n    |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `Test9`\n+   |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:49:37\n+  --> $DIR/typeck_type_placeholder_item.rs:57:24\n    |\n-LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  ^^^                   ^\n+LL |     fn clone(&self) -> _ { Test9 }\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:88:31\n+  --> $DIR/typeck_type_placeholder_item.rs:99:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -375,37 +517,15 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:91:34\n-   |\n-LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn fn_test10<T>(&self, _x : T) { }\n-   |                     ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:96:28\n+  --> $DIR/typeck_type_placeholder_item.rs:107:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:99:41\n-   |\n-LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      ^^^                   ^\n-\n-error: aborting due to 40 previous errors\n+error: aborting due to 55 previous errors\n \n-Some errors have detailed explanations: E0121, E0282.\n+Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}