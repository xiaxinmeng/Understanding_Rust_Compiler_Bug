{"sha": "eac635de01d083e0423dcf9e548cf522ec41015d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzYzNWRlMDFkMDgzZTA0MjNkY2Y5ZTU0OGNmNTIyZWM0MTAxNWQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-23T00:45:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T15:41:48Z"}, "message": "Remove unused transmutes from tests", "tree": {"sha": "c352030ebbfe669cd90e2300c08730fd11598e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c352030ebbfe669cd90e2300c08730fd11598e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac635de01d083e0423dcf9e548cf522ec41015d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac635de01d083e0423dcf9e548cf522ec41015d", "html_url": "https://github.com/rust-lang/rust/commit/eac635de01d083e0423dcf9e548cf522ec41015d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac635de01d083e0423dcf9e548cf522ec41015d/comments", "author": null, "committer": null, "parents": [{"sha": "b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "html_url": "https://github.com/rust-lang/rust/commit/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7"}], "stats": {"total": 178, "additions": 78, "deletions": 100}, "files": [{"sha": "f6778588addb9f0c8ce3f6ec8af058d6e55ec715", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 41, "deletions": 52, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/eac635de01d083e0423dcf9e548cf522ec41015d/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac635de01d083e0423dcf9e548cf522ec41015d/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=eac635de01d083e0423dcf9e548cf522ec41015d", "patch": "@@ -443,7 +443,6 @@ static dot_dot_static: &'static [u8] = b\"..\";\n mod tests {\n     use prelude::*;\n     use super::*;\n-    use mem;\n     use str;\n     use str::StrPrelude;\n \n@@ -601,10 +600,8 @@ mod tests {\n         macro_rules! t(\n             (s: $path:expr, $op:ident, $exp:expr) => (\n                 {\n-                    unsafe {\n-                        let path = Path::new($path);\n-                        assert!(path.$op() == mem::transmute(($exp).as_bytes()));\n-                    }\n+                    let path = Path::new($path);\n+                    assert!(path.$op() == ($exp).as_bytes());\n                 }\n             );\n             (s: $path:expr, $op:ident, $exp:expr, opt) => (\n@@ -616,11 +613,9 @@ mod tests {\n             );\n             (v: $path:expr, $op:ident, $exp:expr) => (\n                 {\n-                    unsafe {\n-                        let arg = $path;\n-                        let path = Path::new(arg);\n-                        assert!(path.$op() == mem::transmute($exp));\n-                    }\n+                    let arg = $path;\n+                    let path = Path::new(arg);\n+                    assert!(path.$op() == $exp);\n                 }\n             );\n         )\n@@ -668,9 +663,8 @@ mod tests {\n         t!(v: b\"hi/there.txt\", extension, Some(b\"txt\"));\n         t!(v: b\"hi/there\\x80.txt\", extension, Some(b\"txt\"));\n         t!(v: b\"hi/there.t\\x80xt\", extension, Some(b\"t\\x80xt\"));\n-        let no: Option<&'static [u8]> = None;\n-        t!(v: b\"hi/there\", extension, no);\n-        t!(v: b\"hi/there\\x80\", extension, no);\n+        t!(v: b\"hi/there\", extension, None);\n+        t!(v: b\"hi/there\\x80\", extension, None);\n         t!(s: \"hi/there.txt\", extension, Some(\"txt\"), opt);\n         t!(s: \"hi/there\", extension, None, opt);\n         t!(s: \"there.txt\", extension, Some(\"txt\"), opt);\n@@ -959,62 +953,57 @@ mod tests {\n         macro_rules! t(\n             (s: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        let filename = $filename;\n-                        assert!(path.filename_str() == filename,\n-                                \"{}.filename_str(): Expected `{}`, found {}\",\n-                                path.as_str().unwrap(), filename, path.filename_str());\n-                        let dirname = $dirname;\n-                        assert!(path.dirname_str() == dirname,\n-                                \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), dirname, path.dirname_str());\n-                        let filestem = $filestem;\n-                        assert!(path.filestem_str() == filestem,\n-                                \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), filestem, path.filestem_str());\n-                        let ext = $ext;\n-                        assert!(path.extension_str() == mem::transmute(ext),\n-                                \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), ext, path.extension_str());\n-                    }\n+                    let path = $path;\n+                    let filename = $filename;\n+                    assert!(path.filename_str() == filename,\n+                            \"{}.filename_str(): Expected `{}`, found {}\",\n+                            path.as_str().unwrap(), filename, path.filename_str());\n+                    let dirname = $dirname;\n+                    assert!(path.dirname_str() == dirname,\n+                            \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), dirname, path.dirname_str());\n+                    let filestem = $filestem;\n+                    assert!(path.filestem_str() == filestem,\n+                            \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), filestem, path.filestem_str());\n+                    let ext = $ext;\n+                    assert!(path.extension_str() == ext,\n+                            \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), ext, path.extension_str());\n                 }\n             );\n             (v: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        assert!(path.filename() == mem::transmute($filename));\n-                        assert!(path.dirname() == mem::transmute($dirname));\n-                        assert!(path.filestem() == mem::transmute($filestem));\n-                        assert!(path.extension() == mem::transmute($ext));\n-                    }\n+                    let path = $path;\n+                    assert!(path.filename() == $filename);\n+                    assert!(path.dirname() == $dirname);\n+                    assert!(path.filestem() == $filestem);\n+                    assert!(path.extension() == $ext);\n                 }\n             )\n         )\n \n-        let no: Option<&'static str> = None;\n-        t!(v: Path::new(b\"a/b/c\"), Some(b\"c\"), b\"a/b\", Some(b\"c\"), no);\n-        t!(v: Path::new(b\"a/b/\\xFF\"), Some(b\"\\xFF\"), b\"a/b\", Some(b\"\\xFF\"), no);\n+        t!(v: Path::new(b\"a/b/c\"), Some(b\"c\"), b\"a/b\", Some(b\"c\"), None);\n+        t!(v: Path::new(b\"a/b/\\xFF\"), Some(b\"\\xFF\"), b\"a/b\", Some(b\"\\xFF\"), None);\n         t!(v: Path::new(b\"hi/there.\\xFF\"), Some(b\"there.\\xFF\"), b\"hi\",\n               Some(b\"there\"), Some(b\"\\xFF\"));\n-        t!(s: Path::new(\"a/b/c\"), Some(\"c\"), Some(\"a/b\"), Some(\"c\"), no);\n-        t!(s: Path::new(\".\"), None, Some(\".\"), None, no);\n-        t!(s: Path::new(\"/\"), None, Some(\"/\"), None, no);\n-        t!(s: Path::new(\"..\"), None, Some(\"..\"), None, no);\n-        t!(s: Path::new(\"../..\"), None, Some(\"../..\"), None, no);\n+        t!(s: Path::new(\"a/b/c\"), Some(\"c\"), Some(\"a/b\"), Some(\"c\"), None);\n+        t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n+        t!(s: Path::new(\"/\"), None, Some(\"/\"), None, None);\n+        t!(s: Path::new(\"..\"), None, Some(\"..\"), None, None);\n+        t!(s: Path::new(\"../..\"), None, Some(\"../..\"), None, None);\n         t!(s: Path::new(\"hi/there.txt\"), Some(\"there.txt\"), Some(\"hi\"),\n               Some(\"there\"), Some(\"txt\"));\n-        t!(s: Path::new(\"hi/there\"), Some(\"there\"), Some(\"hi\"), Some(\"there\"), no);\n+        t!(s: Path::new(\"hi/there\"), Some(\"there\"), Some(\"hi\"), Some(\"there\"), None);\n         t!(s: Path::new(\"hi/there.\"), Some(\"there.\"), Some(\"hi\"),\n               Some(\"there\"), Some(\"\"));\n-        t!(s: Path::new(\"hi/.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), no);\n+        t!(s: Path::new(\"hi/.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), None);\n         t!(s: Path::new(\"hi/..there\"), Some(\"..there\"), Some(\"hi\"),\n               Some(\".\"), Some(\"there\"));\n-        t!(s: Path::new(b\"a/b/\\xFF\"), None, Some(\"a/b\"), None, no);\n+        t!(s: Path::new(b\"a/b/\\xFF\"), None, Some(\"a/b\"), None, None);\n         t!(s: Path::new(b\"a/b/\\xFF.txt\"), None, Some(\"a/b\"), None, Some(\"txt\"));\n-        t!(s: Path::new(b\"a/b/c.\\x80\"), None, Some(\"a/b\"), Some(\"c\"), no);\n-        t!(s: Path::new(b\"\\xFF/b\"), Some(\"b\"), None, Some(\"b\"), no);\n+        t!(s: Path::new(b\"a/b/c.\\x80\"), None, Some(\"a/b\"), Some(\"c\"), None);\n+        t!(s: Path::new(b\"\\xFF/b\"), Some(\"b\"), None, Some(\"b\"), None);\n     }\n \n     #[test]"}, {"sha": "13891a63330144da656fdd005f12b13ede1fcb9a", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/eac635de01d083e0423dcf9e548cf522ec41015d/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac635de01d083e0423dcf9e548cf522ec41015d/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=eac635de01d083e0423dcf9e548cf522ec41015d", "patch": "@@ -1115,7 +1115,6 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n \n #[cfg(test)]\n mod tests {\n-    use mem;\n     use prelude::*;\n     use super::*;\n     use super::parse_prefix;\n@@ -1358,11 +1357,9 @@ mod tests {\n         macro_rules! t(\n             (s: $path:expr, $op:ident, $exp:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        let path = Path::new(path);\n-                        assert!(path.$op() == Some(mem::transmute($exp)));\n-                    }\n+                    let path = $path;\n+                    let path = Path::new(path);\n+                    assert!(path.$op() == Some($exp));\n                 }\n             );\n             (s: $path:expr, $op:ident, $exp:expr, opt) => (\n@@ -1375,11 +1372,9 @@ mod tests {\n             );\n             (v: $path:expr, $op:ident, $exp:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        let path = Path::new(path);\n-                        assert!(path.$op() == mem::transmute($exp));\n-                    }\n+                    let path = $path;\n+                    let path = Path::new(path);\n+                    assert!(path.$op() == $exp);\n                 }\n             )\n         )\n@@ -1464,8 +1459,7 @@ mod tests {\n         // filestem is based on filename, so we don't need the full set of prefix tests\n \n         t!(v: b\"hi\\\\there.txt\", extension, Some(b\"txt\"));\n-        let no: Option<&'static [u8]> = None;\n-        t!(v: b\"hi\\\\there\", extension, no);\n+        t!(v: b\"hi\\\\there\", extension, None);\n         t!(s: \"hi\\\\there.txt\", extension_str, Some(\"txt\"), opt);\n         t!(s: \"hi\\\\there\", extension_str, None, opt);\n         t!(s: \"there.txt\", extension_str, Some(\"txt\"), opt);\n@@ -1872,53 +1866,48 @@ mod tests {\n         macro_rules! t(\n             (s: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        let filename = $filename;\n-                        assert!(path.filename_str() == filename,\n-                                \"`{}`.filename_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), filename, path.filename_str());\n-                        let dirname = $dirname;\n-                        assert!(path.dirname_str() == dirname,\n-                                \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), dirname, path.dirname_str());\n-                        let filestem = $filestem;\n-                        assert!(path.filestem_str() == filestem,\n-                                \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), filestem, path.filestem_str());\n-                        let ext = $ext;\n-                        assert!(path.extension_str() == mem::transmute(ext),\n-                                \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n-                                path.as_str().unwrap(), ext, path.extension_str());\n-                    }\n+                    let path = $path;\n+                    let filename = $filename;\n+                    assert!(path.filename_str() == filename,\n+                            \"`{}`.filename_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), filename, path.filename_str());\n+                    let dirname = $dirname;\n+                    assert!(path.dirname_str() == dirname,\n+                            \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), dirname, path.dirname_str());\n+                    let filestem = $filestem;\n+                    assert!(path.filestem_str() == filestem,\n+                            \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), filestem, path.filestem_str());\n+                    let ext = $ext;\n+                    assert!(path.extension_str() == ext,\n+                            \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n+                            path.as_str().unwrap(), ext, path.extension_str());\n                 }\n             );\n             (v: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n                 {\n-                    unsafe {\n-                        let path = $path;\n-                        assert!(path.filename() == mem::transmute($filename));\n-                        assert!(path.dirname() == mem::transmute($dirname));\n-                        assert!(path.filestem() == mem::transmute($filestem));\n-                        assert!(path.extension() == mem::transmute($ext));\n-                    }\n+                    let path = $path;\n+                    assert!(path.filename() == $filename);\n+                    assert!(path.dirname() == $dirname);\n+                    assert!(path.filestem() == $filestem);\n+                    assert!(path.extension() == $ext);\n                 }\n             )\n         )\n \n-        let no: Option<&'static str> = None;\n-        t!(v: Path::new(b\"a\\\\b\\\\c\"), Some(b\"c\"), b\"a\\\\b\", Some(b\"c\"), no);\n-        t!(s: Path::new(\"a\\\\b\\\\c\"), Some(\"c\"), Some(\"a\\\\b\"), Some(\"c\"), no);\n-        t!(s: Path::new(\".\"), None, Some(\".\"), None, no);\n-        t!(s: Path::new(\"\\\\\"), None, Some(\"\\\\\"), None, no);\n-        t!(s: Path::new(\"..\"), None, Some(\"..\"), None, no);\n-        t!(s: Path::new(\"..\\\\..\"), None, Some(\"..\\\\..\"), None, no);\n+        t!(v: Path::new(b\"a\\\\b\\\\c\"), Some(b\"c\"), b\"a\\\\b\", Some(b\"c\"), None);\n+        t!(s: Path::new(\"a\\\\b\\\\c\"), Some(\"c\"), Some(\"a\\\\b\"), Some(\"c\"), None);\n+        t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n+        t!(s: Path::new(\"\\\\\"), None, Some(\"\\\\\"), None, None);\n+        t!(s: Path::new(\"..\"), None, Some(\"..\"), None, None);\n+        t!(s: Path::new(\"..\\\\..\"), None, Some(\"..\\\\..\"), None, None);\n         t!(s: Path::new(\"hi\\\\there.txt\"), Some(\"there.txt\"), Some(\"hi\"),\n               Some(\"there\"), Some(\"txt\"));\n-        t!(s: Path::new(\"hi\\\\there\"), Some(\"there\"), Some(\"hi\"), Some(\"there\"), no);\n+        t!(s: Path::new(\"hi\\\\there\"), Some(\"there\"), Some(\"hi\"), Some(\"there\"), None);\n         t!(s: Path::new(\"hi\\\\there.\"), Some(\"there.\"), Some(\"hi\"),\n               Some(\"there\"), Some(\"\"));\n-        t!(s: Path::new(\"hi\\\\.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), no);\n+        t!(s: Path::new(\"hi\\\\.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), None);\n         t!(s: Path::new(\"hi\\\\..there\"), Some(\"..there\"), Some(\"hi\"),\n               Some(\".\"), Some(\"there\"));\n "}]}