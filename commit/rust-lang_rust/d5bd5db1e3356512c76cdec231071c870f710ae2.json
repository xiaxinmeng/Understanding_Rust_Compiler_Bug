{"sha": "d5bd5db1e3356512c76cdec231071c870f710ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmQ1ZGIxZTMzNTY1MTJjNzZjZGVjMjMxMDcxYzg3MGY3MTBhZTI=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-09T22:56:02Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:20:37Z"}, "message": "extract helper fn", "tree": {"sha": "d4c2453a730abb0a674bb071c05c348aca2bbe29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c2453a730abb0a674bb071c05c348aca2bbe29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5bd5db1e3356512c76cdec231071c870f710ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bd5db1e3356512c76cdec231071c870f710ae2", "html_url": "https://github.com/rust-lang/rust/commit/d5bd5db1e3356512c76cdec231071c870f710ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5bd5db1e3356512c76cdec231071c870f710ae2/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232bd4c7ab919f9d423e65cd5d00c9c6d919f5af", "url": "https://api.github.com/repos/rust-lang/rust/commits/232bd4c7ab919f9d423e65cd5d00c9c6d919f5af", "html_url": "https://github.com/rust-lang/rust/commit/232bd4c7ab919f9d423e65cd5d00c9c6d919f5af"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "c33c4ca454bd8fa80eab1daa726cf26bd899f6c7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5bd5db1e3356512c76cdec231071c870f710ae2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bd5db1e3356512c76cdec231071c870f710ae2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d5bd5db1e3356512c76cdec231071c870f710ae2", "patch": "@@ -1964,9 +1964,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                 \"access to extern crates through prelude is experimental\").emit();\n                 }\n \n-                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n-                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                self.populate_module_if_necessary(crate_root);\n+                let crate_root = self.load_extern_prelude_crate_if_needed(ident);\n \n                 let binding = (crate_root, ty::Visibility::Public,\n                                ident.span, Mark::root()).to_name_binding(self.arenas);\n@@ -1994,6 +1992,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n+    fn load_extern_prelude_crate_if_needed(&mut self, ident: Ident) -> Module<'a> {\n+                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(&crate_root);\n+                crate_root\n+    }\n+\n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n         if !module.expansion.is_descendant_of(span.ctxt().outer()) {"}]}