{"sha": "75ce28a9745940bbc56110911cfd83b2498bcef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Y2UyOGE5NzQ1OTQwYmJjNTYxMTA5MTFjZmQ4M2IyNDk4YmNlZjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-26T08:41:56Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:06Z"}, "message": "Show auto-applicable correction warning for short circuiting in constants", "tree": {"sha": "5cdb7da83aa13d0664c554b34d0852c89e1e345f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cdb7da83aa13d0664c554b34d0852c89e1e345f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ce28a9745940bbc56110911cfd83b2498bcef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ce28a9745940bbc56110911cfd83b2498bcef6", "html_url": "https://github.com/rust-lang/rust/commit/75ce28a9745940bbc56110911cfd83b2498bcef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ce28a9745940bbc56110911cfd83b2498bcef6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "html_url": "https://github.com/rust-lang/rust/commit/507ea97a3e245887bc8cbea0f0fe8474d082bd0e"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "1dfd77dee1fed827734877745570dcec755650ea", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75ce28a9745940bbc56110911cfd83b2498bcef6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ce28a9745940bbc56110911cfd83b2498bcef6/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=75ce28a9745940bbc56110911cfd83b2498bcef6", "patch": "@@ -23,6 +23,7 @@ use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::mir::{BorrowKind};\n use syntax_pos::Span;\n+use syntax::errors::Applicability;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -373,6 +374,17 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // they can handle that kind of control-flow.\n                     (hir::BinOpKind::And, hir::Constness::Const) => {\n                         cx.control_flow_destroyed = true;\n+                        cx.tcx.sess.struct_span_warn(\n+                            op.span,\n+                            \"boolean short circuiting operators in constants do\n+                             not actually short circuit. Thus new const eval features\n+                             are not accessible in constants.\"\n+                        ).span_suggestion_with_applicability(\n+                            op.span,\n+                            \"use a bit operator instead\",\n+                            \"&\".into(),\n+                            Applicability::MachineApplicable,\n+                        ).emit();\n                         ExprKind::Binary {\n                             op: BinOp::BitAnd,\n                             lhs: lhs.to_ref(),\n@@ -381,6 +393,17 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     }\n                     (hir::BinOpKind::Or, hir::Constness::Const) => {\n                         cx.control_flow_destroyed = true;\n+                        cx.tcx.sess.struct_span_warn(\n+                            op.span,\n+                            \"boolean short circuiting operators in constants do\n+                             not actually short circuit. Thus new const eval features\n+                             are not accessible in constants.\"\n+                        ).span_suggestion_with_applicability(\n+                            op.span,\n+                            \"use a bit operator instead\",\n+                            \"|\".into(),\n+                            Applicability::MachineApplicable,\n+                        ).emit();\n                         ExprKind::Binary {\n                             op: BinOp::BitOr,\n                             lhs: lhs.to_ref(),"}]}