{"sha": "8d4d2b00c551301348cc09583498c02fdfbd64d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNGQyYjAwYzU1MTMwMTM0OGNjMDk1ODM0OThjMDJmZGZiZDY0ZDc=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-13T14:11:35Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-13T14:11:35Z"}, "message": "Add inverse hyperbolic functions", "tree": {"sha": "b777a98cf8160baaa1a40378cda922afe447f191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b777a98cf8160baaa1a40378cda922afe447f191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4d2b00c551301348cc09583498c02fdfbd64d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4d2b00c551301348cc09583498c02fdfbd64d7", "html_url": "https://github.com/rust-lang/rust/commit/8d4d2b00c551301348cc09583498c02fdfbd64d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4d2b00c551301348cc09583498c02fdfbd64d7/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830b945a9db072b68970b6f83dfafc1aaff8f837", "url": "https://api.github.com/repos/rust-lang/rust/commits/830b945a9db072b68970b6f83dfafc1aaff8f837", "html_url": "https://github.com/rust-lang/rust/commit/830b945a9db072b68970b6f83dfafc1aaff8f837"}], "stats": {"total": 263, "additions": 263, "deletions": 0}, "files": [{"sha": "ec901d9e5f0ca710a5a951809a2fcac9a3d63399", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=8d4d2b00c551301348cc09583498c02fdfbd64d7", "patch": "@@ -450,6 +450,58 @@ impl Hyperbolic for f32 {\n \n     #[inline(always)]\n     fn tanh(&self) -> f32 { tanh(*self) }\n+\n+    ///\n+    /// Inverse hyperbolic sine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic sine of `self` will be returned\n+    /// - `self` if `self` is `0.0`, `-0.0`, `infinity`, or `neg_infinity`\n+    /// - `NaN` if `self` is `NaN`\n+    ///\n+    #[inline(always)]\n+    fn asinh(&self) -> f32 {\n+        match *self {\n+            infinity     => infinity,\n+            neg_infinity => neg_infinity,\n+            x            => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic cosine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic cosine of `self` will be returned\n+    /// - `infinity` if `self` is `infinity`\n+    /// - `NaN` if `self` is `NaN` or `self < 1.0` (including `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn acosh(&self) -> f32 {\n+        match *self {\n+            x if x < 1.0 => Float::NaN(),\n+            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic tangent\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic tangent of `self` will be returned\n+    /// - `self` if `self` is `0.0` or `-0.0`\n+    /// - `infinity` if `self` is `1.0`\n+    /// - `neg_infinity` if `self` is `-1.0`\n+    /// - `NaN` if the `self` is `NaN` or outside the domain of `-1.0 <= self <= 1.0`\n+    ///   (including `infinity` and `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn atanh(&self) -> f32 {\n+        0.5 * ((2.0 * *self) / (1.0 - *self)).ln_1p()\n+    }\n }\n \n impl Real for f32 {\n@@ -972,6 +1024,43 @@ mod tests {\n         assert_approx_eq!((-1.7f32).fract(), -0.7f32);\n     }\n \n+    #[test]\n+    fn test_asinh() {\n+        assert_eq!(0.0f32.asinh(), 0.0f32);\n+        assert_eq!((-0.0f32).asinh(), -0.0f32);\n+        assert_eq!(Float::infinity::<f32>().asinh(), Float::infinity::<f32>());\n+        assert_eq!(Float::neg_infinity::<f32>().asinh(), Float::neg_infinity::<f32>());\n+        assert!(Float::NaN::<f32>().asinh().is_NaN());\n+        assert_approx_eq!(2.0f32.asinh(), 1.443635475178810342493276740273105f32);\n+        assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n+    }\n+\n+    #[test]\n+    fn test_acosh() {\n+        assert_eq!(1.0f32.acosh(), 0.0f32);\n+        assert!(0.999f32.acosh().is_NaN());\n+        assert_eq!(Float::infinity::<f32>().acosh(), Float::infinity::<f32>());\n+        assert!(Float::neg_infinity::<f32>().acosh().is_NaN());\n+        assert!(Float::NaN::<f32>().acosh().is_NaN());\n+        assert_approx_eq!(2.0f32.acosh(), 1.31695789692481670862504634730796844f32);\n+        assert_approx_eq!(3.0f32.acosh(), 1.76274717403908605046521864995958461f32);\n+    }\n+\n+    #[test]\n+    fn test_atanh() {\n+        assert_eq!(0.0f32.atanh(), 0.0f32);\n+        assert_eq!((-0.0f32).atanh(), -0.0f32);\n+        assert_eq!(1.0f32.atanh(), Float::infinity::<f32>());\n+        assert_eq!((-1.0f32).atanh(), Float::neg_infinity::<f32>());\n+        assert!(2f64.atanh().atanh().is_NaN());\n+        assert!((-2f64).atanh().atanh().is_NaN());\n+        assert!(Float::infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::neg_infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::NaN::<f32>().atanh().is_NaN());\n+        assert_approx_eq!(0.5f32.atanh(), 0.54930614433405484569762261846126285f32);\n+        assert_approx_eq!((-0.5f32).atanh(), -0.54930614433405484569762261846126285f32);\n+    }\n+\n     #[test]\n     fn test_real_consts() {\n         assert_approx_eq!(Real::two_pi::<f32>(), 2f32 * Real::pi::<f32>());"}, {"sha": "acdec7dd368d39a842e8af5872933f3d28cfc086", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=8d4d2b00c551301348cc09583498c02fdfbd64d7", "patch": "@@ -463,6 +463,58 @@ impl Hyperbolic for f64 {\n \n     #[inline(always)]\n     fn tanh(&self) -> f64 { tanh(*self) }\n+\n+    ///\n+    /// Inverse hyperbolic sine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic sine of `self` will be returned\n+    /// - `self` if `self` is `0.0`, `-0.0`, `infinity`, or `neg_infinity`\n+    /// - `NaN` if `self` is `NaN`\n+    ///\n+    #[inline(always)]\n+    fn asinh(&self) -> f64 {\n+        match *self {\n+            infinity     => infinity,\n+            neg_infinity => neg_infinity,\n+            x            => (x + ((x * x) + 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic cosine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic cosine of `self` will be returned\n+    /// - `infinity` if `self` is `infinity`\n+    /// - `NaN` if `self` is `NaN` or `self < 1.0` (including `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn acosh(&self) -> f64 {\n+        match *self {\n+            x if x < 1.0 => Float::NaN(),\n+            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        }\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic tangent\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic tangent of `self` will be returned\n+    /// - `self` if `self` is `0.0` or `-0.0`\n+    /// - `infinity` if `self` is `1.0`\n+    /// - `neg_infinity` if `self` is `-1.0`\n+    /// - `NaN` if the `self` is `NaN` or outside the domain of `-1.0 <= self <= 1.0`\n+    ///   (including `infinity` and `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn atanh(&self) -> f64 {\n+        0.5 * ((2.0 * *self) / (1.0 - *self)).ln_1p()\n+    }\n }\n \n impl Real for f64 {\n@@ -1019,6 +1071,43 @@ mod tests {\n         assert_approx_eq!((-1.7f64).fract(), -0.7f64);\n     }\n \n+    #[test]\n+    fn test_asinh() {\n+        assert_eq!(0.0f64.asinh(), 0.0f64);\n+        assert_eq!((-0.0f64).asinh(), -0.0f64);\n+        assert_eq!(Float::infinity::<f64>().asinh(), Float::infinity::<f64>());\n+        assert_eq!(Float::neg_infinity::<f64>().asinh(), Float::neg_infinity::<f64>());\n+        assert!(Float::NaN::<f64>().asinh().is_NaN());\n+        assert_approx_eq!(2.0f64.asinh(), 1.443635475178810342493276740273105f64);\n+        assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n+    }\n+\n+    #[test]\n+    fn test_acosh() {\n+        assert_eq!(1.0f64.acosh(), 0.0f64);\n+        assert!(0.999f64.acosh().is_NaN());\n+        assert_eq!(Float::infinity::<f64>().acosh(), Float::infinity::<f64>());\n+        assert!(Float::neg_infinity::<f64>().acosh().is_NaN());\n+        assert!(Float::NaN::<f64>().acosh().is_NaN());\n+        assert_approx_eq!(2.0f64.acosh(), 1.31695789692481670862504634730796844f64);\n+        assert_approx_eq!(3.0f64.acosh(), 1.76274717403908605046521864995958461f64);\n+    }\n+\n+    #[test]\n+    fn test_atanh() {\n+        assert_eq!(0.0f64.atanh(), 0.0f64);\n+        assert_eq!((-0.0f64).atanh(), -0.0f64);\n+        assert_eq!(1.0f64.atanh(), Float::infinity::<f64>());\n+        assert_eq!((-1.0f64).atanh(), Float::neg_infinity::<f64>());\n+        assert!(2f64.atanh().atanh().is_NaN());\n+        assert!((-2f64).atanh().atanh().is_NaN());\n+        assert!(Float::infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::neg_infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::NaN::<f64>().atanh().is_NaN());\n+        assert_approx_eq!(0.5f64.atanh(), 0.54930614433405484569762261846126285f64);\n+        assert_approx_eq!((-0.5f64).atanh(), -0.54930614433405484569762261846126285f64);\n+    }\n+\n     #[test]\n     fn test_real_consts() {\n         assert_approx_eq!(Real::two_pi::<f64>(), 2.0 * Real::pi::<f64>());"}, {"sha": "879c94941055380e2592101d1cd301724a3d0899", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=8d4d2b00c551301348cc09583498c02fdfbd64d7", "patch": "@@ -585,6 +585,51 @@ impl Hyperbolic for float {\n     fn tanh(&self) -> float {\n         (*self as f64).tanh() as float\n     }\n+\n+    ///\n+    /// Inverse hyperbolic sine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic sine of `self` will be returned\n+    /// - `self` if `self` is `0.0`, `-0.0`, `infinity`, or `neg_infinity`\n+    /// - `NaN` if `self` is `NaN`\n+    ///\n+    #[inline(always)]\n+    fn asinh(&self) -> float {\n+        (*self as f64).asinh() as float\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic cosine\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic cosine of `self` will be returned\n+    /// - `infinity` if `self` is `infinity`\n+    /// - `NaN` if `self` is `NaN` or `self < 1.0` (including `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn acosh(&self) -> float {\n+        (*self as f64).acosh() as float\n+    }\n+\n+    ///\n+    /// Inverse hyperbolic tangent\n+    ///\n+    /// # Returns\n+    ///\n+    /// - on success, the inverse hyperbolic tangent of `self` will be returned\n+    /// - `self` if `self` is `0.0` or `-0.0`\n+    /// - `infinity` if `self` is `1.0`\n+    /// - `neg_infinity` if `self` is `-1.0`\n+    /// - `NaN` if the `self` is `NaN` or outside the domain of `-1.0 <= self <= 1.0`\n+    ///   (including `infinity` and `neg_infinity`)\n+    ///\n+    #[inline(always)]\n+    fn atanh(&self) -> float {\n+        (*self as f64).atanh() as float\n+    }\n }\n \n impl Real for float {\n@@ -972,6 +1017,43 @@ mod tests {\n         assert_approx_eq!((-1.7f).fract(), -0.7f);\n     }\n \n+    #[test]\n+    fn test_asinh() {\n+        assert_eq!(0.0f.asinh(), 0.0f);\n+        assert_eq!((-0.0f).asinh(), -0.0f);\n+        assert_eq!(Float::infinity::<float>().asinh(), Float::infinity::<float>());\n+        assert_eq!(Float::neg_infinity::<float>().asinh(), Float::neg_infinity::<float>());\n+        assert!(Float::NaN::<float>().asinh().is_NaN());\n+        assert_approx_eq!(2.0f.asinh(), 1.443635475178810342493276740273105f);\n+        assert_approx_eq!((-2.0f).asinh(), -1.443635475178810342493276740273105f);\n+    }\n+\n+    #[test]\n+    fn test_acosh() {\n+        assert_eq!(1.0f.acosh(), 0.0f);\n+        assert!(0.999f.acosh().is_NaN());\n+        assert_eq!(Float::infinity::<float>().acosh(), Float::infinity::<float>());\n+        assert!(Float::neg_infinity::<float>().acosh().is_NaN());\n+        assert!(Float::NaN::<float>().acosh().is_NaN());\n+        assert_approx_eq!(2.0f.acosh(), 1.31695789692481670862504634730796844f);\n+        assert_approx_eq!(3.0f.acosh(), 1.76274717403908605046521864995958461f);\n+    }\n+\n+    #[test]\n+    fn test_atanh() {\n+        assert_eq!(0.0f.atanh(), 0.0f);\n+        assert_eq!((-0.0f).atanh(), -0.0f);\n+        assert_eq!(1.0f.atanh(), Float::infinity::<float>());\n+        assert_eq!((-1.0f).atanh(), Float::neg_infinity::<float>());\n+        assert!(2f64.atanh().atanh().is_NaN());\n+        assert!((-2f64).atanh().atanh().is_NaN());\n+        assert!(Float::infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::neg_infinity::<f64>().atanh().is_NaN());\n+        assert!(Float::NaN::<float>().atanh().is_NaN());\n+        assert_approx_eq!(0.5f.atanh(), 0.54930614433405484569762261846126285f);\n+        assert_approx_eq!((-0.5f).atanh(), -0.54930614433405484569762261846126285f);\n+    }\n+\n     #[test]\n     fn test_real_consts() {\n         assert_approx_eq!(Real::two_pi::<float>(), 2f * Real::pi::<float>());"}, {"sha": "18d552c273c5bc00317eb1ece9e679a5b2cb0d1d", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4d2b00c551301348cc09583498c02fdfbd64d7/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=8d4d2b00c551301348cc09583498c02fdfbd64d7", "patch": "@@ -133,6 +133,9 @@ pub trait Hyperbolic: Exponential {\n     fn sinh(&self) -> Self;\n     fn cosh(&self) -> Self;\n     fn tanh(&self) -> Self;\n+    fn asinh(&self) -> Self;\n+    fn acosh(&self) -> Self;\n+    fn atanh(&self) -> Self;\n }\n \n ///"}]}