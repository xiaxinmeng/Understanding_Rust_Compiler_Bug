{"sha": "6f982930ba2da1ee99c3c4378179bcfe6f615db6", "node_id": "C_kwDOAAsO6NoAKDZmOTgyOTMwYmEyZGExZWU5OWMzYzQzNzgxNzliY2ZlNmY2MTVkYjY", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-13T03:55:11Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-11-13T03:55:11Z"}, "message": "add tracking issue for `downcast_unchecked`", "tree": {"sha": "d6fe0919795a0a765e114b7b3765786127f1804b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fe0919795a0a765e114b7b3765786127f1804b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f982930ba2da1ee99c3c4378179bcfe6f615db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f982930ba2da1ee99c3c4378179bcfe6f615db6", "html_url": "https://github.com/rust-lang/rust/commit/6f982930ba2da1ee99c3c4378179bcfe6f615db6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f982930ba2da1ee99c3c4378179bcfe6f615db6/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29403eeef0b175b4a65cc3c7865708ee15d8a7e8", "html_url": "https://github.com/rust-lang/rust/commit/29403eeef0b175b4a65cc3c7865708ee15d8a7e8"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1e2c1b2eee67a4d3aa28e9d73c27816e7e373da9", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f982930ba2da1ee99c3c4378179bcfe6f615db6/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f982930ba2da1ee99c3c4378179bcfe6f615db6/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=6f982930ba2da1ee99c3c4378179bcfe6f615db6", "patch": "@@ -1528,7 +1528,7 @@ impl<A: Allocator> Box<dyn Any, A> {\n     /// The contained value must be of type `T`. Calling this method\n     /// with the incorrect type is *undefined behavior*.\n     #[inline]\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n         debug_assert!(self.is::<T>());\n         unsafe {\n@@ -1585,7 +1585,7 @@ impl<A: Allocator> Box<dyn Any + Send, A> {\n     /// The contained value must be of type `T`. Calling this method\n     /// with the incorrect type is *undefined behavior*.\n     #[inline]\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n         debug_assert!(self.is::<T>());\n         unsafe {\n@@ -1642,7 +1642,7 @@ impl<A: Allocator> Box<dyn Any + Send + Sync, A> {\n     /// The contained value must be of type `T`. Calling this method\n     /// with the incorrect type is *undefined behavior*.\n     #[inline]\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     pub unsafe fn downcast_unchecked<T: Any>(self) -> Box<T, A> {\n         debug_assert!(self.is::<T>());\n         unsafe {"}, {"sha": "3e306b1333a1e15e08c6a68512f691df5b0b50c7", "filename": "library/core/src/any.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f982930ba2da1ee99c3c4378179bcfe6f615db6/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f982930ba2da1ee99c3c4378179bcfe6f615db6/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=6f982930ba2da1ee99c3c4378179bcfe6f615db6", "patch": "@@ -285,7 +285,7 @@ impl dyn Any {\n     ///\n     /// The contained value must be of type `T`. Calling this method\n     /// with the incorrect type is *undefined behavior*.\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n         debug_assert!(self.is::<T>());\n@@ -317,7 +317,7 @@ impl dyn Any {\n     ///\n     /// The contained value must be of type `T`. Calling this method\n     /// with the incorrect type is *undefined behavior*.\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n         debug_assert!(self.is::<T>());\n@@ -422,7 +422,7 @@ impl dyn Any + Send {\n     /// # Safety\n     ///\n     /// Same as the method on the type `dyn Any`.\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n         // SAFETY: guaranteed by caller\n@@ -450,7 +450,7 @@ impl dyn Any + Send {\n     /// # Safety\n     ///\n     /// Same as the method on the type `dyn Any`.\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n         // SAFETY: guaranteed by caller\n@@ -550,7 +550,7 @@ impl dyn Any + Send + Sync {\n     ///     assert_eq!(*x.downcast_ref_unchecked::<usize>(), 1);\n     /// }\n     /// ```\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_ref_unchecked<T: Any>(&self) -> &T {\n         // SAFETY: guaranteed by caller\n@@ -574,7 +574,7 @@ impl dyn Any + Send + Sync {\n     ///\n     /// assert_eq!(*x.downcast_ref::<usize>().unwrap(), 2);\n     /// ```\n-    #[unstable(feature = \"downcast_unchecked\", issue = \"none\")]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n     #[inline]\n     pub unsafe fn downcast_mut_unchecked<T: Any>(&mut self) -> &mut T {\n         // SAFETY: guaranteed by caller"}]}