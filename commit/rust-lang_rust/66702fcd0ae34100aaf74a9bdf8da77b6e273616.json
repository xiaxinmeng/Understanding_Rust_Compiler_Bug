{"sha": "66702fcd0ae34100aaf74a9bdf8da77b6e273616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzAyZmNkMGFlMzQxMDBhYWY3NGE5YmRmOGRhNzdiNmUyNzM2MTY=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-02T12:22:48Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-06T18:24:28Z"}, "message": "Run name-anon-globals after LTO passes as well\n\nIf we're going to emit bitcode (through ThinLTOBuffer), then we\nneed to ensure that anon globals are named. This was already done\nafter optimization passes, but also has to happen after LTO passes,\nas we always emit the final result in a ThinLTO-compatible manner.\n\nFixes #51947.", "tree": {"sha": "a0f4b9a4286c59b051f68cdeec972d84b5da7b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f4b9a4286c59b051f68cdeec972d84b5da7b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66702fcd0ae34100aaf74a9bdf8da77b6e273616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66702fcd0ae34100aaf74a9bdf8da77b6e273616", "html_url": "https://github.com/rust-lang/rust/commit/66702fcd0ae34100aaf74a9bdf8da77b6e273616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66702fcd0ae34100aaf74a9bdf8da77b6e273616/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "html_url": "https://github.com/rust-lang/rust/commit/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "3d96fef7c0d6f09e9e47f93c52e475fd0d700627", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=66702fcd0ae34100aaf74a9bdf8da77b6e273616", "patch": "@@ -605,6 +605,13 @@ fn run_pass_manager(cgcx: &CodegenContext,\n             }\n         });\n \n+        // We always generate bitcode through ThinLTOBuffers,\n+        // which do not support anonymous globals\n+        if config.bitcode_needed() {\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr() as *const _);\n+            llvm::LLVMRustAddPass(pm, pass.unwrap());\n+        }\n+\n         if config.verify_llvm_ir {\n             let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n             llvm::LLVMRustAddPass(pm, pass.unwrap());"}, {"sha": "184be4b9eab39d76841af69ce451f065c2ee9757", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=66702fcd0ae34100aaf74a9bdf8da77b6e273616", "patch": "@@ -337,6 +337,11 @@ impl ModuleConfig {\n         self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n                                sess.opts.optimize == config::OptLevel::Aggressive;\n     }\n+\n+    pub fn bitcode_needed(&self) -> bool {\n+        self.emit_bc || self.obj_is_bitcode\n+            || self.emit_bc_compressed || self.embed_bitcode\n+    }\n }\n \n /// Assembler name and command used by codegen when no_integrated_as is enabled\n@@ -564,8 +569,7 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM.\n-            let using_thin_buffers = config.emit_bc || config.obj_is_bitcode\n-                || config.emit_bc_compressed || config.embed_bitcode;\n+            let using_thin_buffers = config.bitcode_needed();\n             let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);"}, {"sha": "7b79807e4d7ff5df6ffa42a3e4a12a3ec698367d", "filename": "src/test/ui/issue-51947.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Ftest%2Fui%2Fissue-51947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66702fcd0ae34100aaf74a9bdf8da77b6e273616/src%2Ftest%2Fui%2Fissue-51947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51947.rs?ref=66702fcd0ae34100aaf74a9bdf8da77b6e273616", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![crate_type = \"lib\"]\n+#![feature(linkage)]\n+\n+// MergeFunctions will merge these via an anonymous internal\n+// backing function, which must be named if ThinLTO buffers are used\n+\n+#[linkage = \"weak\"]\n+pub fn fn1(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}\n+\n+#[linkage = \"weak\"]\n+pub fn fn2(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}"}]}