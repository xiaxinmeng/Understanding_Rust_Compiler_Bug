{"sha": "157e7974afa53a28804752d209c70738d10b093b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1N2U3OTc0YWZhNTNhMjg4MDQ3NTJkMjA5YzcwNzM4ZDEwYjA5M2I=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-02-24T16:54:53Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:18Z"}, "message": "Fix rebase fallout", "tree": {"sha": "7dad8ed9cfc85cb0125457011c1077e516e85e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dad8ed9cfc85cb0125457011c1077e516e85e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157e7974afa53a28804752d209c70738d10b093b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3boACgkQaTCGhp1Q\nZje+7A//STI7ND5YqP/jE4V3TuYsbpHYgDZqUipmFMtZ77NQPZtvPFOo39PMR91h\nQ1tgM4U5QhjMoeBOOtjRsmVrJdHrEDQuBBrl9gTDBGnkXggQWUuYlIcZiPyfdsvA\nPacogolZo5vDmWYLArOM+Aubz6yuDYkAsebYXrAALwQDhvFnC3/KzKtMaXP8PvJT\nytPFdVu/ph+IBBqzgb917iLXpHCWg6U5eYh2D/DAY8dNBZx3G0R1ShFGQInhXLNo\ni5uCMPYYy2jPBlJP84a/2h/h8OpEjo4qPxYlrKlRzAiToO19CBZ8JK/g1T38asCE\naWhQFWcaQF/g9IwBoRQZd8r29mI+W+YenefO3ypuDeQwkQrotntEcAmzbwZ/ipBo\nE7Mptazu0ZeQPAnqE+uGqGzn3Ue4grtfMQFDm6eLK+dhA5qCRXre8Iy5fra/iAZv\nSFE9xAGc+ia3m+3W2RiHYWr+g/IULMKFbfDjw/gBw2imGl1WtDUSYjqLB8YVxzMy\nB+958nLT5sgHToKvktBs//gB8SHyQejlCRL9Ku+2hEXBYS1zBgp8kwwPw1l1WIyN\np7TH8tynWa5aEE6vcOONxV1JszuaoM+HfJkM5K+VAnR4R4bj/YEXal+0rwjwN6V8\n/QPipo3u5EOJ4WCQ4Lgrn1Ys2cWnp4WY3UocwndEQn1XyE/3XTs=\n=LUwl\n-----END PGP SIGNATURE-----", "payload": "tree 7dad8ed9cfc85cb0125457011c1077e516e85e58\nparent a2a8c441068bc73bc37ccec03bfefed2ef9ff054\nauthor flip1995 <hello@philkrones.com> 1551027293 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308538 +0200\n\nFix rebase fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157e7974afa53a28804752d209c70738d10b093b", "html_url": "https://github.com/rust-lang/rust/commit/157e7974afa53a28804752d209c70738d10b093b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157e7974afa53a28804752d209c70738d10b093b/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a8c441068bc73bc37ccec03bfefed2ef9ff054", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a8c441068bc73bc37ccec03bfefed2ef9ff054", "html_url": "https://github.com/rust-lang/rust/commit/a2a8c441068bc73bc37ccec03bfefed2ef9ff054"}], "stats": {"total": 129, "additions": 54, "deletions": 75}, "files": [{"sha": "22386b1c7a588dca2d3b07fcbc478e77bc83c0de", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/157e7974afa53a28804752d209c70738d10b093b/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e7974afa53a28804752d209c70738d10b093b/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=157e7974afa53a28804752d209c70738d10b093b", "patch": "@@ -1,21 +1,11 @@\n-// Copyright 2012-2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use errors::Applicability;\n-use hir::{Expr, ExprKind, PatKind, Path, QPath, Ty, TyKind};\n-use lint::{\n+use crate::hir::{Expr, ExprKind, PatKind, Path, QPath, Ty, TyKind};\n+use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n+use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::Ident;\n \n@@ -42,6 +32,10 @@ impl LintPass for DefaultHashTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEFAULT_HASH_TYPES)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"DefaultHashTypes\"\n+    }\n }\n \n impl EarlyLintPass for DefaultHashTypes {\n@@ -53,7 +47,7 @@ impl EarlyLintPass for DefaultHashTypes {\n                 replace, ident_string\n             );\n             let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n-            db.span_suggestion_with_applicability(\n+            db.span_suggestion(\n                 ident.span,\n                 \"use\",\n                 replace.to_string(),\n@@ -80,6 +74,10 @@ impl LintPass for TyKindUsage {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(USAGE_OF_TY_TYKIND)\n     }\n+\n+    fn name(&self) -> &'static str {\n+        \"TyKindUsage\"\n+    }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n@@ -124,12 +122,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n                                     path.span,\n                                     \"usage of `ty::TyKind::<kind>`\",\n                                 )\n-                                .span_suggestion_with_applicability(\n+                                .span_suggestion(\n                                     path.span,\n                                     \"try using ty::<kind> directly\",\n                                     \"ty\".to_string(),\n                                     Applicability::MaybeIncorrect, // ty maybe needs an import\n-                                ).emit();\n+                                )\n+                                .emit();\n                             }\n                         }\n                     }"}, {"sha": "a6b0dbafbeb9b3b04b3a00ff20e8cb64b03c2ef5", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=157e7974afa53a28804752d209c70738d10b093b", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // compile-flags: -Z internal-lints\n \n #![feature(rustc_private)]"}, {"sha": "323a3880d1cdcbdc5b53a5a85e70e87f283f2813", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=157e7974afa53a28804752d209c70738d10b093b", "patch": "@@ -1,5 +1,5 @@\n warning: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:18:24\n+  --> $DIR/default_hash_types.rs:8:24\n    |\n LL | use std::collections::{HashMap, HashSet};\n    |                        ^^^^^^^ help: use: `FxHashMap`\n@@ -8,44 +8,44 @@ LL | use std::collections::{HashMap, HashSet};\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n warning: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:18:33\n+  --> $DIR/default_hash_types.rs:8:33\n    |\n LL | use std::collections::{HashMap, HashSet};\n    |                                 ^^^^^^^ help: use: `FxHashSet`\n    |\n    = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n \n error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:24:15\n+  --> $DIR/default_hash_types.rs:14:15\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |               ^^^^^^^ help: use: `FxHashMap`\n    |\n note: lint level defined here\n-  --> $DIR/default_hash_types.rs:22:8\n+  --> $DIR/default_hash_types.rs:12:8\n    |\n LL | #[deny(default_hash_types)]\n    |        ^^^^^^^^^^^^^^^^^^\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:24:41\n+  --> $DIR/default_hash_types.rs:14:41\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |                                         ^^^^^^^ help: use: `FxHashMap`\n    |\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:27:15\n+  --> $DIR/default_hash_types.rs:17:15\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n    |               ^^^^^^^ help: use: `FxHashSet`\n    |\n    = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n \n error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:27:33\n+  --> $DIR/default_hash_types.rs:17:33\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n    |                                 ^^^^^^^ help: use: `FxHashSet`"}, {"sha": "a1e08cd3b95bc96fc0214ecdff4bb0a582ae247e", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=157e7974afa53a28804752d209c70738d10b093b", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // compile-flags: -Z internal-lints\n \n #![feature(rustc_private)]"}, {"sha": "d3ad5e1264a4d43e278092fd574ee734bb294fa1", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/157e7974afa53a28804752d209c70738d10b093b/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=157e7974afa53a28804752d209c70738d10b093b", "patch": "@@ -1,191 +1,191 @@\n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:21:15\n+  --> $DIR/ty_tykind_usage.rs:11:15\n    |\n LL |     let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n    |               ^^^^^^ help: try using ty::<kind> directly: `ty`\n    |\n note: lint level defined here\n-  --> $DIR/ty_tykind_usage.rs:19:8\n+  --> $DIR/ty_tykind_usage.rs:9:8\n    |\n LL | #[deny(usage_of_ty_tykind)]\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:24:9\n+  --> $DIR/ty_tykind_usage.rs:14:9\n    |\n LL |         TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:25:9\n+  --> $DIR/ty_tykind_usage.rs:15:9\n    |\n LL |         TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:26:9\n+  --> $DIR/ty_tykind_usage.rs:16:9\n    |\n LL |         TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:27:9\n+  --> $DIR/ty_tykind_usage.rs:17:9\n    |\n LL |         TyKind::Uint(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:28:9\n+  --> $DIR/ty_tykind_usage.rs:18:9\n    |\n LL |         TyKind::Float(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:29:9\n+  --> $DIR/ty_tykind_usage.rs:19:9\n    |\n LL |         TyKind::Adt(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:30:9\n+  --> $DIR/ty_tykind_usage.rs:20:9\n    |\n LL |         TyKind::Foreign(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:31:9\n+  --> $DIR/ty_tykind_usage.rs:21:9\n    |\n LL |         TyKind::Str => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:32:9\n+  --> $DIR/ty_tykind_usage.rs:22:9\n    |\n LL |         TyKind::Array(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:33:9\n+  --> $DIR/ty_tykind_usage.rs:23:9\n    |\n LL |         TyKind::Slice(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:34:9\n+  --> $DIR/ty_tykind_usage.rs:24:9\n    |\n LL |         TyKind::RawPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:35:9\n+  --> $DIR/ty_tykind_usage.rs:25:9\n    |\n LL |         TyKind::Ref(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:36:9\n+  --> $DIR/ty_tykind_usage.rs:26:9\n    |\n LL |         TyKind::FnDef(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:37:9\n+  --> $DIR/ty_tykind_usage.rs:27:9\n    |\n LL |         TyKind::FnPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:38:9\n+  --> $DIR/ty_tykind_usage.rs:28:9\n    |\n LL |         TyKind::Dynamic(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:39:9\n+  --> $DIR/ty_tykind_usage.rs:29:9\n    |\n LL |         TyKind::Closure(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:40:9\n+  --> $DIR/ty_tykind_usage.rs:30:9\n    |\n LL |         TyKind::Generator(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:41:9\n+  --> $DIR/ty_tykind_usage.rs:31:9\n    |\n LL |         TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:42:9\n+  --> $DIR/ty_tykind_usage.rs:32:9\n    |\n LL |         TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:43:9\n+  --> $DIR/ty_tykind_usage.rs:33:9\n    |\n LL |         TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:44:9\n+  --> $DIR/ty_tykind_usage.rs:34:9\n    |\n LL |         TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:45:9\n+  --> $DIR/ty_tykind_usage.rs:35:9\n    |\n LL |         TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:46:9\n+  --> $DIR/ty_tykind_usage.rs:36:9\n    |\n LL |         TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:47:9\n+  --> $DIR/ty_tykind_usage.rs:37:9\n    |\n LL |         TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:48:9\n+  --> $DIR/ty_tykind_usage.rs:38:9\n    |\n LL |         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:49:9\n+  --> $DIR/ty_tykind_usage.rs:39:9\n    |\n LL |         TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:50:9\n+  --> $DIR/ty_tykind_usage.rs:40:9\n    |\n LL |         TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:51:9\n+  --> $DIR/ty_tykind_usage.rs:41:9\n    |\n LL |         TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:56:12\n+  --> $DIR/ty_tykind_usage.rs:46:12\n    |\n LL |     if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n    |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:58:24\n+  --> $DIR/ty_tykind_usage.rs:48:24\n    |\n LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n    |                        ^^^^^^^^^^"}]}