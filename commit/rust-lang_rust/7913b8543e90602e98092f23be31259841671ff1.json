{"sha": "7913b8543e90602e98092f23be31259841671ff1", "node_id": "C_kwDOAAsO6NoAKDc5MTNiODU0M2U5MDYwMmU5ODA5MmYyM2JlMzEyNTk4NDE2NzFmZjE", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-06-16T13:37:01Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-07-06T14:53:22Z"}, "message": "unit tests that inspect LLVM output directly. This relies on a human being to confirm that the\nentries actually correspond to what is specified in each of the respective ABIs...\n\nupdated to incorporate feedback: fix x86_64/i686 tests to use correct name for the corresponding llvm component.", "tree": {"sha": "8420e5ec4db62fc96f060c04fca0508223347da8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8420e5ec4db62fc96f060c04fca0508223347da8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7913b8543e90602e98092f23be31259841671ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7913b8543e90602e98092f23be31259841671ff1", "html_url": "https://github.com/rust-lang/rust/commit/7913b8543e90602e98092f23be31259841671ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7913b8543e90602e98092f23be31259841671ff1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "html_url": "https://github.com/rust-lang/rust/commit/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "7fc34af3da72a2d2137d3da41c9fd207737b4c91", "filename": "src/test/codegen/some-abis-do-extend-params-to-32-bits.rs", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/7913b8543e90602e98092f23be31259841671ff1/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7913b8543e90602e98092f23be31259841671ff1/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs?ref=7913b8543e90602e98092f23be31259841671ff1", "patch": "@@ -0,0 +1,204 @@\n+// compile-flags: -Cno-prepopulate-passes\n+\n+// revisions:x86_64 i686 aarch64-apple aarch64-windows aarch64-linux arm riscv\n+\n+//[x86_64] compile-flags: --target x86_64-unknown-uefi\n+//[x86_64] needs-llvm-components: x86\n+//[i686] compile-flags: --target i686-unknown-linux-musl\n+//[i686] needs-llvm-components: x86\n+//[aarch64-windows] compile-flags: --target aarch64-pc-windows-msvc\n+//[aarch64-windows] needs-llvm-components: aarch64\n+//[aarch64-linux] compile-flags: --target aarch64-unknown-linux-gnu\n+//[aarch64-linux] needs-llvm-components: aarch64\n+//[aarch64-apple] compile-flags: --target aarch64-apple-darwin\n+//[aarch64-apple] needs-llvm-components: aarch64\n+//[arm] compile-flags: --target armv7r-none-eabi\n+//[arm] needs-llvm-components: arm\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n+//[riscv] needs-llvm-components: riscv\n+\n+// See bottom of file for a corresponding C source file that is meant to yield\n+// equivalent declarations.\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![no_core]\n+\n+#[lang=\"sized\"] trait Sized { }\n+#[lang=\"freeze\"] trait Freeze { }\n+#[lang=\"copy\"] trait Copy { }\n+\n+// The patterns in this file are written in the style of a table to make the\n+// uniformities and distinctions more apparent.\n+//\n+//                  ZERO/SIGN-EXTENDING TO 32 BITS            NON-EXTENDING\n+//                  ==============================  =======================\n+// x86_64:          void @c_arg_u8(i8 zeroext %_a)\n+// i686:            void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u8(i8 zeroext %_a)\n+// aarch64-windows:                                  void @c_arg_u8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_u8(i8 %_a)\n+// arm:             void @c_arg_u8(i8 zeroext %_a)\n+// riscv:           void @c_arg_u8(i8 zeroext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u8(_a: u8) { }\n+\n+// x86_64:          void @c_arg_u16(i16 zeroext %_a)\n+// i686:            void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-apple:   void @c_arg_u16(i16 zeroext %_a)\n+// aarch64-windows:                                 void @c_arg_u16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_u16(i16 %_a)\n+// arm:             void @c_arg_u16(i16 zeroext %_a)\n+// riscv:           void @c_arg_u16(i16 zeroext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u16(_a: u16) { }\n+\n+// x86_64:          void @c_arg_u32(i32 %_a)\n+// i686:            void @c_arg_u32(i32 %_a)\n+// aarch64-apple:   void @c_arg_u32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_u32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_u32(i32 %_a)\n+// arm:             void @c_arg_u32(i32 %_a)\n+// riscv:           void @c_arg_u32(i32 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u32(_a: u32) { }\n+\n+// x86_64:          void @c_arg_u64(i64 %_a)\n+// i686:            void @c_arg_u64(i64 %_a)\n+// aarch64-apple:   void @c_arg_u64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_u64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_u64(i64 %_a)\n+// arm:             void @c_arg_u64(i64 %_a)\n+// riscv:           void @c_arg_u64(i64 %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_u64(_a: u64) { }\n+\n+// x86_64:          void @c_arg_i8(i8 signext %_a)\n+// i686:            void @c_arg_i8(i8 signext %_a)\n+// aarch64-apple:   void @c_arg_i8(i8 signext %_a)\n+// aarch64-windows:                                  void @c_arg_i8(i8 %_a)\n+// aarch64-linux:                                    void @c_arg_i8(i8 %_a)\n+// arm:             void @c_arg_i8(i8 signext %_a)\n+// riscv:           void @c_arg_i8(i8 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i8(_a: i8) { }\n+\n+// x86_64:          void @c_arg_i16(i16 signext %_a)\n+// i686:            void @c_arg_i16(i16 signext %_a)\n+// aarch64-apple:   void @c_arg_i16(i16 signext %_a)\n+// aarch64-windows:                                 void @c_arg_i16(i16 %_a)\n+// aarch64-linux:                                   void @c_arg_i16(i16 %_a)\n+// arm:             void @c_arg_i16(i16 signext %_a)\n+// riscv:           void @c_arg_i16(i16 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i16(_a: i16) { }\n+\n+// x86_64:          void @c_arg_i32(i32 %_a)\n+// i686:            void @c_arg_i32(i32 %_a)\n+// aarch64-apple:   void @c_arg_i32(i32 %_a)\n+// aarch64-windows:                                 void @c_arg_i32(i32 %_a)\n+// aarch64-linux:                                   void @c_arg_i32(i32 %_a)\n+// arm:             void @c_arg_i32(i32 %_a)\n+// riscv:           void @c_arg_i32(i32 signext %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i32(_a: i32) { }\n+\n+// x86_64:          void @c_arg_i64(i64 %_a)\n+// i686:            void @c_arg_i64(i64 %_a)\n+// aarch64-apple:   void @c_arg_i64(i64 %_a)\n+// aarch64-windows:                                 void @c_arg_i64(i64 %_a)\n+// aarch64-linux:                                   void @c_arg_i64(i64 %_a)\n+// arm:             void @c_arg_i64(i64 %_a)\n+// riscv:           void @c_arg_i64(i64 %_a)\n+#[no_mangle] pub extern \"C\" fn c_arg_i64(_a: i64) { }\n+\n+// x86_64:          zeroext i8 @c_ret_u8()\n+// i686:            zeroext i8 @c_ret_u8()\n+// aarch64-apple:   zeroext i8 @c_ret_u8()\n+// aarch64-windows:                                 i8 @c_ret_u8()\n+// aarch64-linux:                                   i8 @c_ret_u8()\n+// arm:             zeroext i8 @c_ret_u8()\n+// riscv:           zeroext i8 @c_ret_u8()\n+#[no_mangle] pub extern \"C\" fn c_ret_u8() -> u8 { 0 }\n+\n+// x86_64:          zeroext i16 @c_ret_u16()\n+// i686:            zeroext i16 @c_ret_u16()\n+// aarch64-apple:   zeroext i16 @c_ret_u16()\n+// aarch64-windows:                                 i16 @c_ret_u16()\n+// aarch64-linux:                                   i16 @c_ret_u16()\n+// arm:             zeroext i16 @c_ret_u16()\n+// riscv:           zeroext i16 @c_ret_u16()\n+#[no_mangle] pub extern \"C\" fn c_ret_u16() -> u16 { 0 }\n+\n+// x86_64:          i32 @c_ret_u32()\n+// i686:            i32 @c_ret_u32()\n+// aarch64-apple:   i32 @c_ret_u32()\n+// aarch64-windows:                                 i32 @c_ret_u32()\n+// aarch64-linux:                                   i32 @c_ret_u32()\n+// arm:             i32 @c_ret_u32()\n+// riscv:           signext i32 @c_ret_u32()\n+#[no_mangle] pub extern \"C\" fn c_ret_u32() -> u32 { 0 }\n+\n+// x86_64:          i64 @c_ret_u64()\n+// i686:            i64 @c_ret_u64()\n+// aarch64-apple:   i64 @c_ret_u64()\n+// aarch64-windows:                                 i64 @c_ret_u64()\n+// aarch64-linux:                                   i64 @c_ret_u64()\n+// arm:             i64 @c_ret_u64()\n+// riscv:           i64 @c_ret_u64()\n+#[no_mangle] pub extern \"C\" fn c_ret_u64() -> u64 { 0 }\n+\n+// x86_64:          signext i8 @c_ret_i8()\n+// i686:            signext i8 @c_ret_i8()\n+// aarch64-apple:   signext i8 @c_ret_i8()\n+// aarch64-windows:                                 i8 @c_ret_i8()\n+// aarch64-linux:                                   i8 @c_ret_i8()\n+// arm:             signext i8 @c_ret_i8()\n+// riscv:           signext i8 @c_ret_i8()\n+#[no_mangle] pub extern \"C\" fn c_ret_i8() -> i8 { 0 }\n+\n+// x86_64:          signext i16 @c_ret_i16()\n+// i686:            signext i16 @c_ret_i16()\n+// aarch64-apple:   signext i16 @c_ret_i16()\n+// aarch64-windows:                                 i16 @c_ret_i16()\n+// aarch64-linux:                                   i16 @c_ret_i16()\n+// arm:             signext i16 @c_ret_i16()\n+// riscv:           signext i16 @c_ret_i16()\n+#[no_mangle] pub extern \"C\" fn c_ret_i16() -> i16 { 0 }\n+\n+// x86_64:          i32 @c_ret_i32()\n+// i686:            i32 @c_ret_i32()\n+// aarch64-apple:   i32 @c_ret_i32()\n+// aarch64-windows:                                 i32 @c_ret_i32()\n+// aarch64-linux:                                   i32 @c_ret_i32()\n+// arm:             i32 @c_ret_i32()\n+// riscv:           signext i32 @c_ret_i32()\n+#[no_mangle] pub extern \"C\" fn c_ret_i32() -> i32 { 0 }\n+\n+// x86_64:          i64 @c_ret_i64()\n+// i686:            i64 @c_ret_i64()\n+// aarch64-apple:   i64 @c_ret_i64()\n+// aarch64-windows:                                 i64 @c_ret_i64()\n+// aarch64-linux:                                   i64 @c_ret_i64()\n+// arm:             i64 @c_ret_i64()\n+// riscv:           i64 @c_ret_i64()\n+#[no_mangle] pub extern \"C\" fn c_ret_i64() -> i64 { 0 }\n+\n+const C_SOURCE_FILE: &'static str = r##\"\n+#include <stdlib.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+\n+void c_arg_u8(uint8_t _a) { }\n+void c_arg_u16(uint16_t _a) { }\n+void c_arg_u32(uint32_t _a) { }\n+void c_arg_u64(uint64_t _a) { }\n+\n+void c_arg_i8(int8_t _a) { }\n+void c_arg_i16(int16_t _a) { }\n+void c_arg_i32(int32_t _a) { }\n+void c_arg_i64(int64_t _a) { }\n+\n+uint8_t  c_ret_u8()  { return 0; }\n+uint16_t c_ret_u16() { return 0; }\n+uint32_t c_ret_u32() { return 0; }\n+uint64_t c_ret_u64() { return 0; }\n+\n+int8_t   c_ret_i8()  { return 0; }\n+int16_t  c_ret_i16() { return 0; }\n+int32_t  c_ret_i32() { return 0; }\n+int64_t  c_ret_i64() { return 0; }\n+\"##;"}]}