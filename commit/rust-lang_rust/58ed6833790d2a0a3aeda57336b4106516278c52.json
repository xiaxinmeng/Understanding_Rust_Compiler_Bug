{"sha": "58ed6833790d2a0a3aeda57336b4106516278c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZWQ2ODMzNzkwZDJhMGEzYWVkYTU3MzM2YjQxMDY1MTYyNzhjNTI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T11:11:42Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:45Z"}, "message": "passes: HirIdify Id", "tree": {"sha": "aa4b383af73a316fdc59872d379993cea2be4120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4b383af73a316fdc59872d379993cea2be4120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ed6833790d2a0a3aeda57336b4106516278c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ed6833790d2a0a3aeda57336b4106516278c52", "html_url": "https://github.com/rust-lang/rust/commit/58ed6833790d2a0a3aeda57336b4106516278c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ed6833790d2a0a3aeda57336b4106516278c52/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b74e5eaf4439e859fd057bbf7048f93d8659d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b74e5eaf4439e859fd057bbf7048f93d8659d5", "html_url": "https://github.com/rust-lang/rust/commit/00b74e5eaf4439e859fd057bbf7048f93d8659d5"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "c74314ce0c4b509aea306cc743dc09def8520249", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58ed6833790d2a0a3aeda57336b4106516278c52/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ed6833790d2a0a3aeda57336b4106516278c52/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=58ed6833790d2a0a3aeda57336b4106516278c52", "patch": "@@ -2,7 +2,7 @@\n // pieces of AST and HIR. The resulting numbers are good approximations but not\n // completely accurate (some things might be counted twice, others missed).\n \n-use rustc::hir;\n+use rustc::hir::{self, HirId};\n use rustc::hir::intravisit as hir_visit;\n use rustc::util::common::to_readable_str;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -12,7 +12,7 @@ use syntax_pos::Span;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n enum Id {\n-    Node(NodeId),\n+    Node(HirId),\n     Attr(AttrId),\n     None,\n }\n@@ -119,7 +119,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_item(&mut self, i: &'v hir::Item) {\n-        self.record(\"Item\", Id::Node(i.id), i);\n+        self.record(\"Item\", Id::Node(i.hir_id), i);\n         hir_visit::walk_item(self, i)\n     }\n \n@@ -129,22 +129,22 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem) {\n-        self.record(\"ForeignItem\", Id::Node(i.id), i);\n+        self.record(\"ForeignItem\", Id::Node(i.hir_id), i);\n         hir_visit::walk_foreign_item(self, i)\n     }\n \n     fn visit_local(&mut self, l: &'v hir::Local) {\n-        self.record(\"Local\", Id::Node(l.id), l);\n+        self.record(\"Local\", Id::Node(l.hir_id), l);\n         hir_visit::walk_local(self, l)\n     }\n \n     fn visit_block(&mut self, b: &'v hir::Block) {\n-        self.record(\"Block\", Id::Node(b.id), b);\n+        self.record(\"Block\", Id::Node(b.hir_id), b);\n         hir_visit::walk_block(self, b)\n     }\n \n     fn visit_stmt(&mut self, s: &'v hir::Stmt) {\n-        self.record(\"Stmt\", Id::Node(s.id), s);\n+        self.record(\"Stmt\", Id::Node(s.hir_id), s);\n         hir_visit::walk_stmt(self, s)\n     }\n \n@@ -154,17 +154,17 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_pat(&mut self, p: &'v hir::Pat) {\n-        self.record(\"Pat\", Id::Node(p.id), p);\n+        self.record(\"Pat\", Id::Node(p.hir_id), p);\n         hir_visit::walk_pat(self, p)\n     }\n \n     fn visit_expr(&mut self, ex: &'v hir::Expr) {\n-        self.record(\"Expr\", Id::Node(ex.id), ex);\n+        self.record(\"Expr\", Id::Node(ex.hir_id), ex);\n         hir_visit::walk_expr(self, ex)\n     }\n \n     fn visit_ty(&mut self, t: &'v hir::Ty) {\n-        self.record(\"Ty\", Id::Node(t.id), t);\n+        self.record(\"Ty\", Id::Node(t.hir_id), t);\n         hir_visit::walk_ty(self, t)\n     }\n \n@@ -184,12 +184,12 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'v hir::TraitItem) {\n-        self.record(\"TraitItem\", Id::Node(ti.id), ti);\n+        self.record(\"TraitItem\", Id::Node(ti.hir_id), ti);\n         hir_visit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n-        self.record(\"ImplItem\", Id::Node(ii.id), ii);\n+        self.record(\"ImplItem\", Id::Node(ii.hir_id), ii);\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n@@ -199,7 +199,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_struct_field(&mut self, s: &'v hir::StructField) {\n-        self.record(\"StructField\", Id::Node(s.id), s);\n+        self.record(\"StructField\", Id::Node(s.hir_id), s);\n         hir_visit::walk_struct_field(self, s)\n     }\n \n@@ -212,7 +212,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n-        self.record(\"Lifetime\", Id::Node(lifetime.id), lifetime);\n+        self.record(\"Lifetime\", Id::Node(lifetime.hir_id), lifetime);\n         hir_visit::walk_lifetime(self, lifetime)\n     }\n \n@@ -234,7 +234,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding) {\n-        self.record(\"TypeBinding\", Id::Node(type_binding.id), type_binding);\n+        self.record(\"TypeBinding\", Id::Node(type_binding.hir_id), type_binding);\n         hir_visit::walk_assoc_type_binding(self, type_binding)\n     }\n \n@@ -243,7 +243,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef) {\n-        self.record(\"MacroDef\", Id::Node(macro_def.id), macro_def);\n+        self.record(\"MacroDef\", Id::Node(macro_def.hir_id), macro_def);\n         hir_visit::walk_macro_def(self, macro_def)\n     }\n }"}]}