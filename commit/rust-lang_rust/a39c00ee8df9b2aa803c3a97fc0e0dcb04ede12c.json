{"sha": "a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "node_id": "C_kwDOAAsO6NoAKGEzOWMwMGVlOGRmOWIyYWE4MDNjM2E5N2ZjMGUwZGNiMDRlZGUxMmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-26T08:56:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T08:56:56Z"}, "message": "Rollup merge of #99618 - compiler-errors:uhh-idk, r=lcnr\n\nhandle consts with param/infer in `const_eval_resolve` better\n\nThis PR addresses [this thread here](https://github.com/rust-lang/rust/pull/99449#discussion_r924141230). Was this the change you were looking for ``@lcnr?``\n\nInterestingly, one test has begun to pass. Was that expected?\n\nr? ``@lcnr``", "tree": {"sha": "06dfff884c5f46aa0e7c1588bf6908bf17c429c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06dfff884c5f46aa0e7c1588bf6908bf17c429c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi36xZCRBK7hj4Ov3rIwAAXssIAD6ZN0iN3MqZEnmURMFMfEN7\nWY1iK5yfkiVAlA3ZQici0h90fKE3qbZ21SJpAkTtYpDrsFB3xnqSftT46OyclEJ8\n8AsVNckrohbpd19HTPr77Nr05xHl6+ErhKEVerSXfkB42i4IXbMtthwOUwfCbvHx\nKkB30gOOV68eCWAmYyh5ZU4e3i+npbZJzgDUGjv9xIqFjMxaXwQ0THVMapqwbVUj\nc3xWWYgkX7AtKvB56LwiyEsGVH9JJm4QKTBdMCHE6mNece3iN0F52UrF8D+X1uuq\nRyMZb+klODwEEb81oSIAf4wOnm2FBnadu0qh8nDTga/iBalO0dnK6x6m7eCsOxA=\n=bB0h\n-----END PGP SIGNATURE-----\n", "payload": "tree 06dfff884c5f46aa0e7c1588bf6908bf17c429c3\nparent b629c85bd74dfb730a3e9308312b007c0bf027cb\nparent b248647ef0aed88dc8f3be29bec0b98d8be64c3c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658825816 +0530\ncommitter GitHub <noreply@github.com> 1658825816 +0530\n\nRollup merge of #99618 - compiler-errors:uhh-idk, r=lcnr\n\nhandle consts with param/infer in `const_eval_resolve` better\n\nThis PR addresses [this thread here](https://github.com/rust-lang/rust/pull/99449#discussion_r924141230). Was this the change you were looking for ``@lcnr?``\n\nInterestingly, one test has begun to pass. Was that expected?\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "html_url": "https://github.com/rust-lang/rust/commit/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b629c85bd74dfb730a3e9308312b007c0bf027cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b629c85bd74dfb730a3e9308312b007c0bf027cb", "html_url": "https://github.com/rust-lang/rust/commit/b629c85bd74dfb730a3e9308312b007c0bf027cb"}, {"sha": "b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "html_url": "https://github.com/rust-lang/rust/commit/b248647ef0aed88dc8f3be29bec0b98d8be64c3c"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "260b1affda9f855ff0015360b7141503cf59ca0a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n use rustc_middle::mir::interpret::{ErrorHandled, EvalToValTreeResult};\n use rustc_middle::traits::select;\n-use rustc_middle::ty::abstract_const::AbstractConst;\n+use rustc_middle::ty::abstract_const::{AbstractConst, FailureKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n@@ -1675,7 +1675,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn const_eval_resolve(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n+        mut param_env: ty::ParamEnv<'tcx>,\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n@@ -1686,10 +1686,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // variables\n         if substs.has_infer_types_or_consts() {\n             let ac = AbstractConst::new(self.tcx, unevaluated.shrink());\n-            if let Ok(None) = ac {\n-                substs = InternalSubsts::identity_for_item(self.tcx, unevaluated.def.did);\n-            } else {\n-                return Err(ErrorHandled::TooGeneric);\n+            match ac {\n+                Ok(None) => {\n+                    substs = InternalSubsts::identity_for_item(self.tcx, unevaluated.def.did);\n+                    param_env = self.tcx.param_env(unevaluated.def.did);\n+                }\n+                Ok(Some(ct)) => {\n+                    if ct.unify_failure_kind(self.tcx) == FailureKind::Concrete {\n+                        substs = replace_param_and_infer_substs_with_placeholder(self.tcx, substs);\n+                    } else {\n+                        return Err(ErrorHandled::TooGeneric);\n+                    }\n+                }\n+                Err(guar) => return Err(ErrorHandled::Reported(guar)),\n             }\n         }\n \n@@ -2000,3 +2009,43 @@ impl<'tcx> fmt::Debug for RegionObligation<'tcx> {\n         )\n     }\n }\n+\n+/// Replaces substs that reference param or infer variables with suitable\n+/// placeholders. This function is meant to remove these param and infer\n+/// substs when they're not actually needed to evaluate a constant.\n+fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+) -> SubstsRef<'tcx> {\n+    tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n+        match arg.unpack() {\n+            GenericArgKind::Type(_)\n+                if arg.has_param_types_or_consts() || arg.has_infer_types_or_consts() =>\n+            {\n+                tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                    universe: ty::UniverseIndex::ROOT,\n+                    name: ty::BoundVar::from_usize(idx),\n+                }))\n+                .into()\n+            }\n+            GenericArgKind::Const(ct)\n+                if ct.has_infer_types_or_consts() || ct.has_param_types_or_consts() =>\n+            {\n+                let ty = ct.ty();\n+                // If the type references param or infer, replace that too...\n+                if ty.has_param_types_or_consts() || ty.has_infer_types_or_consts() {\n+                    bug!(\"const `{ct}`'s type should not reference params or types\");\n+                }\n+                tcx.mk_const(ty::ConstS {\n+                    ty,\n+                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                        universe: ty::UniverseIndex::ROOT,\n+                        name: ty::BoundConst { ty, var: ty::BoundVar::from_usize(idx) },\n+                    }),\n+                })\n+                .into()\n+            }\n+            _ => arg,\n+        }\n+    }))\n+}"}, {"sha": "254bc4ab66386bbf345a630e5ec306741b6701e5", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "patch": "@@ -185,21 +185,12 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         }\n         let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n         match concrete {\n-            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n-                NotConstEvaluatable::MentionsInfer\n-            } else if uv.has_param_types_or_consts() {\n-                infcx\n-                    .tcx\n-                    .sess\n-                    .delay_span_bug(span, &format!(\"unexpected `TooGeneric` for {:?}\", uv));\n-                NotConstEvaluatable::MentionsParam\n-            } else {\n-                let guar = infcx.tcx.sess.delay_span_bug(\n+            Err(ErrorHandled::TooGeneric) => {\n+                Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n                     span,\n                     format!(\"Missing value for constant, but no error reported?\"),\n-                );\n-                NotConstEvaluatable::Error(guar)\n-            }),\n+                )))\n+            }\n             Err(ErrorHandled::Linted) => {\n                 let reported = infcx\n                     .tcx"}, {"sha": "5874625adff61e1ca35d95416fae6af120f30b81", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=a39c00ee8df9b2aa803c3a97fc0e0dcb04ede12c", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n@@ -21,11 +23,6 @@ where\n }\n \n fn main() {\n-    // FIXME(generic_const_exprs): We can't correctly infer `T` which requires\n-    // evaluating `{ N + 1 }` which has substs containing an inference var\n     let mut _q = Default::default();\n-    //~^ ERROR type annotations needed\n-\n     _q = foo::<_, 2>(_q);\n-    //~^ ERROR type annotations needed\n }"}, {"sha": "9e8328d37017ea0ee92fd90ed4de5f2064761ecb", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b629c85bd74dfb730a3e9308312b007c0bf027cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b629c85bd74dfb730a3e9308312b007c0bf027cb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr?ref=b629c85bd74dfb730a3e9308312b007c0bf027cb", "patch": "@@ -1,38 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/const_eval_resolve_canonical.rs:26:9\n-   |\n-LL |     let mut _q = Default::default();\n-   |         ^^^^^^\n-   |\n-help: consider giving `_q` an explicit type\n-   |\n-LL |     let mut _q: _ = Default::default();\n-   |               +++\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/const_eval_resolve_canonical.rs:29:10\n-   |\n-LL |     _q = foo::<_, 2>(_q);\n-   |          ^^^^^^^^^^^ cannot infer the value of the constant `{ N + 1 }`\n-   |\n-note: multiple `impl`s satisfying `(): Foo<{ N + 1 }>` found\n-  --> $DIR/const_eval_resolve_canonical.rs:8:1\n-   |\n-LL | impl Foo<0> for () {\n-   | ^^^^^^^^^^^^^^^^^^\n-...\n-LL | impl Foo<3> for () {\n-   | ^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `foo`\n-  --> $DIR/const_eval_resolve_canonical.rs:18:9\n-   |\n-LL | fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n-   |    --- required by a bound in this\n-LL | where\n-LL |     (): Foo<{ N + 1 }>,\n-   |         ^^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0283.\n-For more information about an error, try `rustc --explain E0282`."}]}