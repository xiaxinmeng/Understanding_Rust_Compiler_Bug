{"sha": "34dae82b484cd59067aeb102feb643da83cba2be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZGFlODJiNDg0Y2Q1OTA2N2FlYjEwMmZlYjY0M2RhODNjYmEyYmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-22T18:23:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T20:26:19Z"}, "message": "Add a session field to ty_ctxt and change an err to span_err\n\nI changed instantiate to print out a more helpful error message,\nwhich required passing it a session argument. To avoid\nthreading extra arguments through a lot of functions,\nI added a session field to ty_ctxt.", "tree": {"sha": "ba9e4b14670e7170d4901392a52fe7519b0551cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9e4b14670e7170d4901392a52fe7519b0551cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34dae82b484cd59067aeb102feb643da83cba2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34dae82b484cd59067aeb102feb643da83cba2be", "html_url": "https://github.com/rust-lang/rust/commit/34dae82b484cd59067aeb102feb643da83cba2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34dae82b484cd59067aeb102feb643da83cba2be/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "url": "https://api.github.com/repos/rust-lang/rust/commits/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "html_url": "https://github.com/rust-lang/rust/commit/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "584d81ad7f23557b719f6d6844a5123ab13b6d26", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=34dae82b484cd59067aeb102feb643da83cba2be", "patch": "@@ -80,8 +80,8 @@ fn compile_input(session.session sess,\n     crate = resolve.resolve_crate(sess, crate);\n     capture.check_for_captures(sess, crate);\n \n-    auto ty_cx = ty.mk_ctxt();\n-    auto typeck_result = typeck.check_crate(sess, ty_cx, crate);\n+    auto ty_cx = ty.mk_ctxt(sess);\n+    auto typeck_result = typeck.check_crate(ty_cx, crate);\n     crate = typeck_result._0;\n     auto type_cache = typeck_result._1;\n     // FIXME: uncomment once typestate_check works"}, {"sha": "47442f2b8035f9038439d0356dce50803f35c784", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=34dae82b484cd59067aeb102feb643da83cba2be", "patch": "@@ -46,7 +46,7 @@ type mt = rec(t ty, ast.mutability mut);\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-type ctxt = rec(@type_store ts);\n+type ctxt = rec(@type_store ts, session.session sess);\n type ty_ctxt = ctxt;    // Needed for disambiguation from Unify.ctxt.\n \n // Convert from method type to function type.  Pretty easy; we just drop\n@@ -200,7 +200,7 @@ fn mk_type_store() -> @type_store {\n              others=map.mk_hashmap[t,t](hasher, eqer));\n }\n \n-fn mk_ctxt() -> ctxt { ret rec(ts=mk_type_store()); }\n+fn mk_ctxt(session.session s) -> ctxt { ret rec(ts=mk_type_store(), sess=s); }\n \n // Type constructors\n "}, {"sha": "3354fe46ad96390445045a3c2f04b7d7103546fd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dae82b484cd59067aeb102feb643da83cba2be/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=34dae82b484cd59067aeb102feb643da83cba2be", "patch": "@@ -106,7 +106,7 @@ fn substitute_ty_params(&@crate_ctxt ccx,\n \n \n // Returns the type parameter count and the type for the given definition.\n-fn ty_param_count_and_ty_for_def(@fn_ctxt fcx, &ast.def defn)\n+fn ty_param_count_and_ty_for_def(@fn_ctxt fcx, &ast.span sp, &ast.def defn)\n         -> ty_param_count_and_ty {\n     alt (defn) {\n         case (ast.def_arg(?id)) {\n@@ -157,7 +157,7 @@ fn ty_param_count_and_ty_for_def(@fn_ctxt fcx, &ast.def defn)\n         }\n \n         case (ast.def_ty(_)) {\n-            fcx.ccx.sess.err(\"expected value but found type\");\n+            fcx.ccx.sess.span_err(sp, \"expected value but found type\");\n             fail;\n         }\n \n@@ -308,7 +308,10 @@ fn ast_ty_to_ty(ty.ctxt tcx, ty_getter getter, &@ast.ty ast_ty) -> ty.t {\n                     typ = instantiate(tcx, getter, id, path.node.types);\n                 }\n                 case (ast.def_ty_arg(?id)) { typ = ty.mk_param(tcx, id); }\n-                case (_)                   { fail; }\n+                case (_)                   { \n+                    tcx.sess.span_err(ast_ty.span,\n+                       \"found type name used as a variable\");\n+                    fail; }\n             }\n \n             cname = some(path_to_str(path));\n@@ -1839,7 +1842,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             check (defopt != none[ast.def]);\n             auto defn = option.get[ast.def](defopt);\n \n-            auto tpt = ty_param_count_and_ty_for_def(fcx, defn);\n+            auto tpt = ty_param_count_and_ty_for_def(fcx, expr.span, defn);\n \n             if (ty.def_has_ty_params(defn)) {\n                 auto ann = instantiate_path(fcx, pth, tpt, expr.span);\n@@ -2623,13 +2626,15 @@ fn check_stmt(&@fn_ctxt fcx, &@ast.stmt stmt) -> @ast.stmt {\n                 case (ast.decl_local(_)) {\n                     auto decl_1 = check_decl_local(fcx, decl);\n                     ret @fold.respan[ast.stmt_](stmt.span,\n-                           ast.stmt_decl(decl_1, plain_ann(fcx.ccx.tystore)));\n+                           ast.stmt_decl(decl_1,\n+                             plain_ann(fcx.ccx.tcx)));\n                 }\n \n                 case (ast.decl_item(_)) {\n                     // Ignore for now. We'll return later.\n                     ret @fold.respan[ast.stmt_](stmt.span,\n-                           ast.stmt_decl(decl, plain_ann(fcx.ccx.tystore)));\n+                           ast.stmt_decl(decl,\n+                             plain_ann(fcx.ccx.tcx)));\n                 }\n             }\n \n@@ -2641,7 +2646,7 @@ fn check_stmt(&@fn_ctxt fcx, &@ast.stmt stmt) -> @ast.stmt {\n             expr_t = Pushdown.pushdown_expr(fcx, expr_ty(fcx.ccx.tcx, expr_t),\n                                             expr_t);\n             ret @fold.respan[ast.stmt_](stmt.span,\n-                   ast.stmt_expr(expr_t, plain_ann(fcx.ccx.tystore)));\n+                   ast.stmt_expr(expr_t, plain_ann(fcx.ccx.tcx)));\n         }\n     }\n \n@@ -2790,8 +2795,9 @@ fn eq_unify_cache_entry(&unify_cache_entry a, &unify_cache_entry b) -> bool {\n \n type typecheck_result = tup(@ast.crate, ty.type_cache);\n \n-fn check_crate(session.session sess, ty.ctxt tcx, @ast.crate crate)\n+fn check_crate(ty.ctxt tcx, @ast.crate crate)\n         -> typecheck_result {\n+    auto sess = tcx.sess;\n     auto result = Collect.collect_item_types(sess, tcx, crate);\n \n     let vec[ast.obj_field] fields = vec();"}]}