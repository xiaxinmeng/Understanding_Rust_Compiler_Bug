{"sha": "d858360483153d9b3a64f0fd44a0ad39c047d6a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NTgzNjA0ODMxNTNkOWIzYTY0ZjBmZDQ0YTBhZDM5YzA0N2Q2YTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-08T16:20:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-08T21:26:56Z"}, "message": "Build libuv/jemalloc only once (not per stage)\n\nReorganize the makefiles to stop building these once per stage because there's\nno need to do this at all.\n\nCloses #7002", "tree": {"sha": "7e3ca7957c14a5b97cf7d3d4daefa9343bb8f169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e3ca7957c14a5b97cf7d3d4daefa9343bb8f169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d858360483153d9b3a64f0fd44a0ad39c047d6a4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d858360483153d9b3a64f0fd44a0ad39c047d6a4", "html_url": "https://github.com/rust-lang/rust/commit/d858360483153d9b3a64f0fd44a0ad39c047d6a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d858360483153d9b3a64f0fd44a0ad39c047d6a4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e293026e9c41a5322d95098c30e193fdb815c1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e293026e9c41a5322d95098c30e193fdb815c1bb", "html_url": "https://github.com/rust-lang/rust/commit/e293026e9c41a5322d95098c30e193fdb815c1bb"}], "stats": {"total": 234, "additions": 119, "deletions": 115}, "files": [{"sha": "c2629324d80364d885dc73b6518ebbc090c500b8", "filename": "configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d858360483153d9b3a64f0fd44a0ad39c047d6a4/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d858360483153d9b3a64f0fd44a0ad39c047d6a4/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d858360483153d9b3a64f0fd44a0ad39c047d6a4", "patch": "@@ -680,11 +680,15 @@ do\n   for s in 0 1 2 3\n   do\n     make_dir $t/rt/stage$s\n+    make_dir $t/rt/libuv\n+    make_dir $t/rt/libuv/src/ares\n+    make_dir $t/rt/libuv/src/eio\n+    make_dir $t/rt/libuv/src/ev\n+    make_dir $t/rt/jemalloc\n     for i in                                          \\\n       isaac linenoise sync test \\\n       arch/i386 arch/x86_64 arch/arm arch/mips  \\\n-      libuv libuv/src/ares libuv/src/eio libuv/src/ev \\\n-      jemalloc sundown/src sundown/html\n+      sundown/src sundown/html\n     do\n       make_dir $t/rt/stage$s/$i\n     done"}, {"sha": "5885a57f69b0904d180411cb29fc768d9b8992aa", "filename": "mk/platform.mk", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d858360483153d9b3a64f0fd44a0ad39c047d6a4/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d858360483153d9b3a64f0fd44a0ad39c047d6a4/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=d858360483153d9b3a64f0fd44a0ad39c047d6a4", "patch": "@@ -145,6 +145,7 @@ CXX_x86_64-unknown-linux-gnu=$(CXX)\n CPP_x86_64-unknown-linux-gnu=$(CPP)\n AR_x86_64-unknown-linux-gnu=$(AR)\n CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64\n@@ -171,6 +172,7 @@ CXX_i686-unknown-linux-gnu=$(CXX)\n CPP_i686-unknown-linux-gnu=$(CPP)\n AR_i686-unknown-linux-gnu=$(AR)\n CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_i686-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32\n@@ -197,6 +199,7 @@ CXX_x86_64-apple-darwin=$(CXX)\n CPP_x86_64-apple-darwin=$(CPP)\n AR_x86_64-apple-darwin=$(AR)\n CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n+CFG_STATIC_LIB_NAME_x86_64-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64\n@@ -222,6 +225,7 @@ CXX_i686-apple-darwin=$(CXX)\n CPP_i686-apple-darwin=$(CPP)\n AR_i686-apple-darwin=$(AR)\n CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n+CFG_STATIC_LIB_NAME_i686-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386\n@@ -247,6 +251,7 @@ CXX_arm-linux-androideabi=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-g+\n CPP_arm-linux-androideabi=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-gcc -E\n AR_arm-linux-androideabi=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-ar\n CFG_LIB_NAME_arm-linux-androideabi=lib$(1).so\n+CFG_STATIC_LIB_NAME_arm-linux-androideabi=lib$(1).a\n CFG_LIB_GLOB_arm-linux-androideabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-linux-androideabi=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__\n@@ -273,6 +278,7 @@ CXX_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-g++\n CPP_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-gcc -E\n AR_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-ar\n CFG_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).so\n+CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__\n@@ -299,6 +305,7 @@ CXX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-g++\n CPP_arm-unknown-linux-gnueabi=arm-linux-gnueabi-gcc -E\n AR_arm-unknown-linux-gnueabi=arm-linux-gnueabi-ar\n CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n+CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__\n@@ -325,6 +332,7 @@ CXX_mips-unknown-linux-gnu=mips-linux-gnu-g++\n CPP_mips-unknown-linux-gnu=mips-linux-gnu-gcc -E\n AR_mips-unknown-linux-gnu=mips-linux-gnu-ar\n CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_mips-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 -mno-compact-eh\n@@ -351,6 +359,7 @@ CXX_i686-pc-mingw32=$(CXX)\n CPP_i686-pc-mingw32=$(CPP)\n AR_i686-pc-mingw32=$(AR)\n CFG_LIB_NAME_i686-pc-mingw32=$(1).dll\n+CFG_STATIC_LIB_NAME_i686-pc-mingw32=$(1).lib\n CFG_LIB_GLOB_i686-pc-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i686-pc-mingw32=$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_i686-pc-mingw32 := -Wall -Werror -g -m32 -march=i686 -D_WIN32_WINNT=0x0600 -I$(CFG_SRC_DIR)src/etc/mingw-fix-include\n@@ -377,6 +386,7 @@ CXX_i586-mingw32msvc=$(CFG_MINGW32_CROSS_PATH)/bin/i586-mingw32msvc-g++\n CPP_i586-mingw32msvc=$(CFG_MINGW32_CROSS_PATH)/bin/i586-mingw32msvc-cpp\n AR_i586-mingw32msvc=$(CFG_MINGW32_CROSS_PATH)/bin/i586-mingw32msvc-ar\n CFG_LIB_NAME_i586-mingw32msvc=$(1).dll\n+CFG_STATIC_LIB_NAME_i586-mingw32msvc=$(1).lib\n CFG_LIB_GLOB_i586-mingw32msvc=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i586-mingw32msvc=$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_i586-mingw32msvc := -Wall -Werror -g -march=i586 -m32\n@@ -404,6 +414,7 @@ CXX_x86_64-w64-mingw32=$(CXX)\n CPP_x86_64-w64-mingw32=$(CPP)\n AR_x86_64-w64-mingw32=$(AR)\n CFG_LIB_NAME_x86_64-w64-mingw32=$(1).dll\n+CFG_STATIC_LIB_NAME_x86_64-w64-mingw32=$(1).lib\n CFG_LIB_GLOB_x86_64-w64-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_x86_64-w64-mingw32=$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_x86_64-w64-mingw32 := -Wall -Werror -g -m64 -D_WIN32_WINNT=0x0600\n@@ -429,6 +440,7 @@ CXX_x86_64-unknown-freebsd=$(CXX)\n CPP_x86_64-unknown-freebsd=$(CPP)\n AR_x86_64-unknown-freebsd=$(AR)\n CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-freebsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include"}, {"sha": "5d75b9615108d2118c25a02d9656327097636f13", "filename": "mk/rt.mk", "status": "modified", "additions": 101, "deletions": 113, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/d858360483153d9b3a64f0fd44a0ad39c047d6a4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d858360483153d9b3a64f0fd44a0ad39c047d6a4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=d858360483153d9b3a64f0fd44a0ad39c047d6a4", "patch": "@@ -46,6 +46,21 @@ define DEF_LIBUV_ARCH_VAR\n endef\n $(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_LIBUV_ARCH_VAR,$(t))))\n \n+ifdef CFG_ENABLE_FAST_MAKE\n+LIBUV_DEPS := $(S)/.gitmodules\n+else\n+LIBUV_DEPS := $(wildcard \\\n+              $(S)src/libuv/* \\\n+              $(S)src/libuv/*/* \\\n+              $(S)src/libuv/*/*/* \\\n+              $(S)src/libuv/*/*/*/*)\n+endif\n+\n+LIBUV_NO_LOAD = run-benchmarks.target.mk run-tests.target.mk \\\n+\t\tuv_dtrace_header.target.mk uv_dtrace_provider.target.mk\n+\n+export PYTHONPATH := $(PYTHONPATH):$(S)src/gyp/pylib\n+\n define DEF_RUNTIME_TARGETS\n \n ######################################################################\n@@ -97,31 +112,8 @@ RUNTIME_S_$(1)_$(2) := rt/arch/$$(HOST_$(1))/_context.S \\\n \t\t\trt/arch/$$(HOST_$(1))/ccall.S \\\n \t\t\trt/arch/$$(HOST_$(1))/record_sp.S\n \n-RT_OUTPUT_DIR_$(1) := $(1)/rt\n RT_BUILD_DIR_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/stage$(2)\n \n-ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n-  LIBUV_OSTYPE_$(1)_$(2) := win\n-  LIBUV_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/libuv/libuv.a\n-  JEMALLOC_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc/lib/jemalloc.lib\n-else ifeq ($(OSTYPE_$(1)), apple-darwin)\n-  LIBUV_OSTYPE_$(1)_$(2) := mac\n-  LIBUV_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/libuv/libuv.a\n-  JEMALLOC_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc/lib/libjemalloc_pic.a\n-else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n-  LIBUV_OSTYPE_$(1)_$(2) := freebsd\n-  LIBUV_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/libuv/libuv.a\n-  JEMALLOC_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc/lib/libjemalloc_pic.a\n-else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-  LIBUV_OSTYPE_$(1)_$(2) := android\n-  LIBUV_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/libuv/libuv.a\n-  JEMALLOC_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc/lib/libjemalloc_pic.a\n-else\n-  LIBUV_OSTYPE_$(1)_$(2) := linux\n-  LIBUV_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/libuv/libuv.a\n-  JEMALLOC_LIB_$(1)_$(2) := $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc/lib/libjemalloc_pic.a\n-endif\n-\n RUNTIME_DEF_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/rustrt$$(CFG_DEF_SUFFIX_$(1))\n RUNTIME_INCS_$(1)_$(2) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                      -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n@@ -157,133 +149,129 @@ $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJ_$\n \t$$(Q)$(AR_$(1)) rcs $$@ $$<\n \n $$(RT_BUILD_DIR_$(1)_$(2))/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS) \\\n-                        $$(RUNTIME_DEF_$(1)_$(2)) $$(LIBUV_LIB_$(1)_$(2)) $$(JEMALLOC_LIB_$(1)_$(2))\n+                        $$(RUNTIME_DEF_$(1)_$(2)) $$(LIBUV_LIB_$(1)) $$(JEMALLOC_LIB_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)_$(2)) \\\n-\t  $$(JEMALLOC_LIB_$(1)_$(2)) $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(LIBUV_LIB_$(1)_$(2)) \\\n-\t  $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)_$(2)),$$(CFG_RUNTIME_$(1)))\n+\t    $$(JEMALLOC_LIB_$(1)) $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(LIBUV_LIB_$(1)) \\\n+\t    $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)_$(2)),$$(CFG_RUNTIME_$(1)))\n \n-# FIXME: For some reason libuv's makefiles can't figure out the\n-# correct definition of CC on the mingw I'm using, so we are\n-# explicitly using gcc. Also, we have to list environment variables\n-# first on windows... mysterious\n+# These could go in rt.mk or rustllvm.mk, they're needed for both.\n \n-ifdef CFG_ENABLE_FAST_MAKE\n-LIBUV_DEPS := $$(S)/.gitmodules\n+# This regexp has a single $, escaped twice\n+$(1)/%.bsd.def:    %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n+$(1)/%.linux.def:    %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n+$(1)/%.darwin.def:\t%.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)sed 's/^./_&/' $$< > $$@\n+\n+$(1)/%.android.def:  %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n+$(1)/%.mingw32.def:\t%.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo LIBRARY $$* > $$@\n+\t$$(Q)echo EXPORTS >> $$@\n+\t$$(Q)sed 's/^./    &/' $$< >> $$@\n+\n+endef\n+\n+\n+######################################################################\n+# Runtime third party targets (libuv, jemalloc, etc.)\n+#\n+# These targets do not need to be built once per stage, so these\n+# rules just build them once and then we're done with them.\n+######################################################################\n+\n+define DEF_THIRD_PARTY_TARGETS\n+\n+# $(1) is the target triple\n+\n+RT_OUTPUT_DIR_$(1) := $(1)/rt\n+JEMALLOC_TARGET_$(1) := jemalloc_pic\n+\n+ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n+  LIBUV_OSTYPE_$(1) := win\n+  JEMALLOC_TARGET_$(1) := jemalloc\n+else ifeq ($(OSTYPE_$(1)), apple-darwin)\n+  LIBUV_OSTYPE_$(1) := mac\n+else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n+  LIBUV_OSTYPE_$(1) := freebsd\n+else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n+  LIBUV_OSTYPE_$(1) := android\n+  JEMALLOC_ARGS_$(1) := --disable-tls\n+  LIBUV_ARGS_$(1) := PLATFORM=android host=android OS=linux\n else\n-LIBUV_DEPS := $$(wildcard \\\n-              $$(S)src/libuv/* \\\n-              $$(S)src/libuv/*/* \\\n-              $$(S)src/libuv/*/*/* \\\n-              $$(S)src/libuv/*/*/*/*)\n+  LIBUV_OSTYPE_$(1) := linux\n endif\n \n-LIBUV_MAKEFILE_$(1)_$(2) := $$(CFG_BUILD_DIR)$$(RT_BUILD_DIR_$(1)_$(2))/libuv/Makefile\n-LIBUV_NO_LOAD = run-benchmarks.target.mk run-tests.target.mk \\\n-\t\tuv_dtrace_header.target.mk uv_dtrace_provider.target.mk\n+LIBUV_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),uv)\n+LIBUV_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/libuv/$$(LIBUV_NAME_$(1))\n+JEMALLOC_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$$(JEMALLOC_TARGET_$(1)))\n+JEMALLOC_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/jemalloc/lib/$$(JEMALLOC_NAME_$(1))\n \n-export PYTHONPATH := $(PYTHONPATH):$$(S)src/gyp/pylib\n+LIBUV_MAKEFILE_$(1) := $$(CFG_BUILD_DIR)$$(RT_OUTPUT_DIR_$(1))/libuv/Makefile\n \n-$$(LIBUV_MAKEFILE_$(1)_$(2)): $$(LIBUV_DEPS)\n+$$(LIBUV_MAKEFILE_$(1)): $$(LIBUV_DEPS)\n \t(cd $(S)src/libuv/ && \\\n-\t $$(CFG_PYTHON) ./gyp_uv -f make -Dtarget_arch=$$(LIBUV_ARCH_$(1)) -D ninja \\\n-\t   -DOS=$$(LIBUV_OSTYPE_$(1)_$(2)) \\\n+\t $$(CFG_PYTHON) ./gyp_uv -f make -Dtarget_arch=$$(LIBUV_ARCH_$(1)) \\\n+\t   -D ninja \\\n+\t   -DOS=$$(LIBUV_OSTYPE_$(1)) \\\n \t   -Goutput_dir=$$(@D) --generator-output $$(@D))\n \n-# XXX: Shouldn't need platform-specific conditions here\n+# Windows has a completely different build system for libuv because of mingw. In\n+# theory when we support msvc then we should be using gyp's msvc output instead\n+# of mingw's makefile for windows\n ifdef CFG_WINDOWSY_$(1)\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv -f Makefile.mingw \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n \t\tV=$$(VERBOSE)\n \t$$(Q)cp $$(S)src/libuv/libuv.a $$@\n-else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)_$(2))\n-\t$$(Q)$$(MAKE) -C $$(@D) \\\n-\t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n-\t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n-\t\tCC=\"$$(CC_$(1))\" \\\n-\t\tCXX=\"$$(CXX_$(1))\" \\\n-\t \tLINK=\"$$(CXX_$(1))\" \\\n-\t\tAR=\"$$(AR_$(1))\" \\\n-\t\tPLATFORM=android \\\n-\t\thost=android OS=linux \\\n-\t\tbuilddir=\".\" \\\n-\t\tBUILDTYPE=Release \\\n-\t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n-\t\tV=$$(VERBOSE)\n else\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)_$(2))\n+$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1))\n \t$$(Q)$$(MAKE) -C $$(@D) \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n+\t\t$$(LIBUV_ARGS_$(1)) \\\n \t\tbuilddir=\".\" \\\n \t\tBUILDTYPE=Release \\\n \t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n endif\n \n-ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-$$(JEMALLOC_LIB_$(1)_$(2)):\n-\tcd $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc; $(S)src/rt/jemalloc/configure \\\n-\t\t--disable-experimental --build=$(CFG_BUILD_TRIPLE) --host=$(1) --disable-tls \\\n-\t\tEXTRA_CFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n-\t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n-\t\tCC=\"$$(CC_$(1))\" \\\n-\t\tCXX=\"$$(CXX_$(1))\" \\\n-\t\tAR=\"$$(AR_$(1))\"\n-\t$$(Q)$$(MAKE) -C $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc\n-else\n-$$(JEMALLOC_LIB_$(1)_$(2)):\n-\tcd $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc; $(S)src/rt/jemalloc/configure \\\n+$$(JEMALLOC_LIB_$(1)):\n+\tcd $$(RT_OUTPUT_DIR_$(1))/jemalloc; $(S)src/rt/jemalloc/configure \\\n+\t\t$$(JEMALLOC_ARGS_$(1)) \\\n \t\t--disable-experimental --build=$(CFG_BUILD_TRIPLE) --host=$(1) \\\n-\t\tEXTRA_CFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n-\t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n+\t\tEXTRA_CFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\"\n-\t$$(Q)$$(MAKE) -C $$(RT_BUILD_DIR_$(1)_$(2))/jemalloc\n-endif\n-\n-\n-# These could go in rt.mk or rustllvm.mk, they're needed for both.\n-\n-# This regexp has a single $, escaped twice\n-$(1)/%.bsd.def:    %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.linux.def:    %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.darwin.def:\t%.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)sed 's/^./_&/' $$< > $$@\n-\n-$(1)/%.android.def:  %.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo \"{\" > $$@\n-\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n-\t$$(Q)echo \"};\" >> $$@\n-\n-$(1)/%.mingw32.def:\t%.def.in $$(MKFILE_DEPS)\n-\t@$$(call E, def: $$@)\n-\t$$(Q)echo LIBRARY $$* > $$@\n-\t$$(Q)echo EXPORTS >> $$@\n-\t$$(Q)sed 's/^./    &/' $$< >> $$@\n+\t$$(Q)$$(MAKE) -C $$(RT_OUTPUT_DIR_$(1))/jemalloc build_lib_static\n \n endef\n \n-# Instantiate template for all stages\n+# Instantiate template for all stages/targets\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+     $(eval $(call DEF_THIRD_PARTY_TARGETS,$(target))))\n $(foreach stage,$(STAGES), \\\n-\t$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+    $(foreach target,$(CFG_TARGET_TRIPLES), \\\n \t $(eval $(call DEF_RUNTIME_TARGETS,$(target),$(stage)))))"}]}