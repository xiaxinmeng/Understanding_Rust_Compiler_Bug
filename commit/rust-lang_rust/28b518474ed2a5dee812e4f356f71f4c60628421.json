{"sha": "28b518474ed2a5dee812e4f356f71f4c60628421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjUxODQ3NGVkMmE1ZGVlODEyZTRmMzU2ZjcxZjRjNjA2Mjg0MjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T15:03:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T15:03:09Z"}, "message": "review comments: error code text", "tree": {"sha": "c5d85641afd1087107c068b968f3f77246546f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d85641afd1087107c068b968f3f77246546f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b518474ed2a5dee812e4f356f71f4c60628421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b518474ed2a5dee812e4f356f71f4c60628421", "html_url": "https://github.com/rust-lang/rust/commit/28b518474ed2a5dee812e4f356f71f4c60628421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b518474ed2a5dee812e4f356f71f4c60628421/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "html_url": "https://github.com/rust-lang/rust/commit/efe85943b3a5e7b3920db5a5a53183c75fc80d0c"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "a2b1f16ef3de7e41c9a1b24ff55580607d95d2b5", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28b518474ed2a5dee812e4f356f71f4c60628421/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b518474ed2a5dee812e4f356f71f4c60628421/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=28b518474ed2a5dee812e4f356f71f4c60628421", "patch": "@@ -2431,26 +2431,28 @@ This error indicates that the `self` parameter in a method has an invalid\n \n Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. These are syntactic sugar for\n-`self: Self`, `self: &Self`, and `self: &mut Self` respectively. The type\n-`Self` acts as an alias to the type of the current trait implementer, or\n-\"receiver type\". Besides the already mentioned `Self`, `&Self` and\n-`&mut Self` valid receiver types, the following are also valid:\n-`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n-(where P is one of the previous types except `Self`).\n+`self: Self`, `self: &Self`, and `self: &mut Self` respectively.\n \n ```\n # struct Foo;\n trait Trait {\n     fn foo(&self);\n+//         ^^^^^ `self` here is a reference to the receiver object\n }\n \n impl Trait for Foo {\n     fn foo(&self) {}\n-//         ^^^^^ this the receiver type `&Foo`\n+//         ^^^^^ the receiver type is `&Foo`\n }\n ```\n \n-The above is equivalent to:\n+The type `Self` acts as an alias to the type of the current trait\n+implementer, or \"receiver type\". Besides the already mentioned `Self`,\n+`&Self` and `&mut Self` valid receiver types, the following are also valid:\n+`self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>`\n+(where P is one of the previous types except `Self`). Note that `Self` can\n+also be the underlying implementing type, like `Foo` in the following\n+example:\n \n ```\n # struct Foo;"}]}