{"sha": "90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "node_id": "C_kwDOAAsO6NoAKDkwMTI4YzMwYTBhNjliMTU4N2JkZjNkM2Q4YThkZTA3NTA2NTNhYTA", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-11-19T19:43:12Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-11-19T19:43:12Z"}, "message": "revert-overflow", "tree": {"sha": "1267434172dd804327d981ad0ba7eae7473d89d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1267434172dd804327d981ad0ba7eae7473d89d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "html_url": "https://github.com/rust-lang/rust/commit/90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a434286a96d61e9f55a3144004beec48206bb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a434286a96d61e9f55a3144004beec48206bb29", "html_url": "https://github.com/rust-lang/rust/commit/2a434286a96d61e9f55a3144004beec48206bb29"}], "stats": {"total": 63, "additions": 8, "deletions": 55}, "files": [{"sha": "30fa469f857341b767d1abd99aa2ae46a75e9f2c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "patch": "@@ -566,22 +566,6 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     .flatten()\n                     .unwrap_or_else(|| ty.super_fold_with(self).into())\n                 };\n-                // For cases like #95134 we would like to catch overflows early\n-                // otherwise they slip away and cause ICE.\n-                let recursion_limit = self.tcx().recursion_limit();\n-                if !recursion_limit.value_within_limit(self.depth)\n-                    // HACK: Don't overflow when running cargo doc see #100991\n-                    && !self.tcx().sess.opts.actually_rustdoc\n-                {\n-                    let obligation = Obligation::with_depth(\n-                        self.selcx.tcx(),\n-                        self.cause.clone(),\n-                        recursion_limit.0,\n-                        self.param_env,\n-                        ty,\n-                    );\n-                    self.selcx.infcx().err_ctxt().report_overflow_error(&obligation, true);\n-                }\n                 debug!(\n                     ?self.depth,\n                     ?ty,"}, {"sha": "33af86918e08c797fd7ded7f84052d6c565427ed", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "patch": "@@ -1,10 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `<T as Next>::Next`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n   --> $DIR/issue-23122-2.rs:10:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n+note: required for `GetNext<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>` to implement `Next`\n+  --> $DIR/issue-23122-2.rs:9:15\n+   |\n+LL | impl<T: Next> Next for GetNext<T> {\n+   |               ^^^^     ^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-23122-2/issue-23122-2.long-type-2230235837754269907.txt'\n \n error: aborting due to previous error\n "}, {"sha": "4d00a7083137782aba899be905d2dd4e9d34033e", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90128c30a0a69b1587bdf3d3d8a8de0750653aa0/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=90128c30a0a69b1587bdf3d3d8a8de0750653aa0", "patch": "@@ -9,11 +9,9 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `<std::ops::Range<u8> as Iterator>::Item`\n+error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n-   = note: 64 redundant requirements hidden\n    = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n "}, {"sha": "adc9c6ee2d967d4781586e6215579ba6db1c046e", "filename": "src/test/ui/recursion/issue-95134.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,28 +0,0 @@\n-// build-fail\n-// compile-flags: -Copt-level=0\n-//~^^ ERROR overflow evaluating the requirement\n-\n-pub fn encode_num<Writer: ExampleWriter>(n: u32, mut writer: Writer) -> Result<(), Writer::Error> {\n-    if n > 15 {\n-        encode_num(n / 16, &mut writer)?;\n-    }\n-    Ok(())\n-}\n-\n-pub trait ExampleWriter {\n-    type Error;\n-}\n-\n-impl<'a, T: ExampleWriter> ExampleWriter for &'a mut T {\n-    type Error = T::Error;\n-}\n-\n-struct EmptyWriter;\n-\n-impl ExampleWriter for EmptyWriter {\n-    type Error = ();\n-}\n-\n-fn main() {\n-    encode_num(69, &mut EmptyWriter).unwrap();\n-}"}, {"sha": "57a498694b7c1215aa79b48e2bb95772d873c0fe", "filename": "src/test/ui/recursion/issue-95134.stderr", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-95134.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,7 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `<EmptyWriter as ExampleWriter>::Error`\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_95134`)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}]}