{"sha": "85c38454c0044d727e68cc123ff93376da62abfc", "node_id": "C_kwDOAAsO6NoAKDg1YzM4NDU0YzAwNDRkNzI3ZTY4Y2MxMjNmZjkzMzc2ZGE2MmFiZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-29T19:19:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T19:19:51Z"}, "message": "Rollup merge of #109716 - scottmcm:field-to-fieldidx, r=oli-obk\n\nMove `mir::Field` \u2192 `abi::FieldIdx`\n\nThe first PR for https://github.com/rust-lang/compiler-team/issues/606\n\nThis is just the move-and-rename, because it's plenty big already.  Future PRs will start using `FieldIdx` more broadly, and concomitantly removing `FieldIdx::new`s.", "tree": {"sha": "e5c066cb2f0db3ce000128fd99af6f28564cd632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c066cb2f0db3ce000128fd99af6f28564cd632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c38454c0044d727e68cc123ff93376da62abfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJI9XCRBK7hj4Ov3rIwAAiBMIAG76fjsy/le6rLvIyOZjw+1t\nqACs5Pn2UPEb34/CwbN+3bqDu6lT75uuDR8a8yOH1qKziCvr4ZJpITBNvYC3lu3o\nL0UGkBHaRw0kcGav0sZSdaeMbPaKPusQxp+DTZwaN7j5rHUrFCoceRFKZk8BXyRR\nYfnh7mlqht+41KBYDKkJ8pmJs1Rxl+N1YV73Ip3j0kUmxSCM5iCVQcPM+/eGEw8q\n1gr38h939M9j9vWaiL+ZHydORK/JKRGcnrg1kI0JM2hl7V9buav69zNn2F1AIM4b\nwZvSUZH3OwsOOMkHZDzgVLr4xAhKw5AHuUmJV2NsftorUwA5zcvICuNqfabHFgQ=\n=TvmK\n-----END PGP SIGNATURE-----\n", "payload": "tree e5c066cb2f0db3ce000128fd99af6f28564cd632\nparent 5937ec1915c09f6891825f393bc6d0e592a1d511\nparent 5bbaeadc013cae79e440fb5d3da2175c83cb36e4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680117591 +0200\ncommitter GitHub <noreply@github.com> 1680117591 +0200\n\nRollup merge of #109716 - scottmcm:field-to-fieldidx, r=oli-obk\n\nMove `mir::Field` \u2192 `abi::FieldIdx`\n\nThe first PR for https://github.com/rust-lang/compiler-team/issues/606\n\nThis is just the move-and-rename, because it's plenty big already.  Future PRs will start using `FieldIdx` more broadly, and concomitantly removing `FieldIdx::new`s.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c38454c0044d727e68cc123ff93376da62abfc", "html_url": "https://github.com/rust-lang/rust/commit/85c38454c0044d727e68cc123ff93376da62abfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c38454c0044d727e68cc123ff93376da62abfc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5937ec1915c09f6891825f393bc6d0e592a1d511", "url": "https://api.github.com/repos/rust-lang/rust/commits/5937ec1915c09f6891825f393bc6d0e592a1d511", "html_url": "https://github.com/rust-lang/rust/commit/5937ec1915c09f6891825f393bc6d0e592a1d511"}, {"sha": "5bbaeadc013cae79e440fb5d3da2175c83cb36e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbaeadc013cae79e440fb5d3da2175c83cb36e4", "html_url": "https://github.com/rust-lang/rust/commit/5bbaeadc013cae79e440fb5d3da2175c83cb36e4"}], "stats": {"total": 349, "additions": 192, "deletions": 157}, "files": [{"sha": "428191bc8b93477ec3de63c46f6d6bc92881354b", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -1057,6 +1057,32 @@ impl Scalar {\n     }\n }\n \n+rustc_index::newtype_index! {\n+    /// The *source-order* index of a field in a variant.\n+    ///\n+    /// This is how most code after type checking refers to fields, rather than\n+    /// using names (as names have hygiene complications and more complex lookup).\n+    ///\n+    /// Particularly for `repr(Rust)` types, this may not be the same as *layout* order.\n+    /// (It is for `repr(C)` `struct`s, however.)\n+    ///\n+    /// For example, in the following types,\n+    /// ```rust\n+    /// # enum Never {}\n+    /// # #[repr(u16)]\n+    /// enum Demo1 {\n+    ///    Variant0 { a: Never, b: i32 } = 100,\n+    ///    Variant1 { c: u8, d: u64 } = 10,\n+    /// }\n+    /// struct Demo2 { e: u8, f: u16, g: u8 }\n+    /// ```\n+    /// `b` is `FieldIdx(1)` in `VariantIdx(0)`,\n+    /// `d` is `FieldIdx(1)` in `VariantIdx(1)`, and\n+    /// `f` is `FieldIdx(1)` in `VariantIdx(0)`.\n+    #[derive(HashStable_Generic)]\n+    pub struct FieldIdx {}\n+}\n+\n /// Describes how the fields of a type are located in memory.\n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n #[cfg_attr(feature = \"nightly\", derive(HashStable_Generic))]"}, {"sha": "5827fa81cffb55e39673a2309c852f93c84d7195", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -9,15 +9,15 @@ use rustc_hir::GeneratorKind;\n use rustc_infer::infer::{LateBoundRegionConversionTime, TyCtxtInferExt};\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n-    AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n-    Place, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, Constant, FakeReadCause, Local, LocalInfo, LocalKind, Location, Operand, Place,\n+    PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     type_known_to_meet_bound_modulo_regions, Obligation, ObligationCause,\n@@ -302,7 +302,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn describe_field(\n         &self,\n         place: PlaceRef<'tcx>,\n-        field: Field,\n+        field: FieldIdx,\n         including_tuple_field: IncludingTupleField,\n     ) -> Option<String> {\n         let place_ty = match place {\n@@ -331,7 +331,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn describe_field_from_ty(\n         &self,\n         ty: Ty<'_>,\n-        field: Field,\n+        field: FieldIdx,\n         variant_index: Option<VariantIdx>,\n         including_tuple_field: IncludingTupleField,\n     ) -> Option<String> {"}, {"sha": "9d90400965040efecda0a07f5914f72c50002d15", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::{\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, BytePos, Span};\n+use rustc_target::abi::FieldIdx;\n \n use crate::diagnostics::BorrowedContentSource;\n use crate::MirBorrowckCtxt;\n@@ -1275,7 +1276,7 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n fn get_mut_span_in_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n     if let ty::Ref(_, ty, _) = ty.kind()"}, {"sha": "2f64ccee686a870ef3f574a95e64b63392eb5df1", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -33,12 +33,13 @@ use rustc_middle::mir::{\n     Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n-use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n+use rustc_middle::mir::{ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::UNUSED_MUT;\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::FieldIdx;\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -597,7 +598,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     used_mut: FxIndexSet<Local>,\n     /// If the function we're checking is a closure, then we'll need to report back the list of\n     /// mutable upvars that have been used. This field keeps track of them.\n-    used_mut_upvars: SmallVec<[Field; 8]>,\n+    used_mut_upvars: SmallVec<[FieldIdx; 8]>,\n     /// Region inference context. This contains the results from region inference and lets us e.g.\n     /// find out which CFG points are contained in each borrow region.\n     regioncx: Rc<RegionInferenceContext<'tcx>>,\n@@ -2277,7 +2278,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n+    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<FieldIdx> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n "}, {"sha": "ea9f8683ca7bbb24e50c5916a913c0335890b5f9", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -7,8 +7,9 @@ use crate::BorrowIndex;\n use crate::Upvar;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::BorrowKind;\n-use rustc_middle::mir::{BasicBlock, Body, Field, Location, Place, PlaceRef, ProjectionElem};\n+use rustc_middle::mir::{BasicBlock, Body, Location, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::TyCtxt;\n+use rustc_target::abi::FieldIdx;\n \n /// Returns `true` if the borrow represented by `kind` is\n /// allowed to be split into separate Reservation and\n@@ -148,7 +149,7 @@ pub(crate) fn is_upvar_field_projection<'tcx>(\n     upvars: &[Upvar<'tcx>],\n     place_ref: PlaceRef<'tcx>,\n     body: &Body<'tcx>,\n-) -> Option<Field> {\n+) -> Option<FieldIdx> {\n     let mut place_ref = place_ref;\n     let mut by_ref = false;\n "}, {"sha": "04da6d6beff680d675111af3396868b260ec2fb9", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -36,7 +36,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -786,7 +786,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         &mut self,\n         parent: &dyn fmt::Debug,\n         base_ty: PlaceTy<'tcx>,\n-        field: Field,\n+        field: FieldIdx,\n         location: Location,\n     ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();"}, {"sha": "91c085d3d698684b0d2b4cbd13c84ba9d063256b", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -327,7 +327,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n             ArgKind::Spread(params) => {\n                 for (i, param) in params.into_iter().enumerate() {\n                     if let Some(param) = param {\n-                        place.place_field(fx, mir::Field::new(i)).write_cvalue(fx, param);\n+                        place.place_field(fx, FieldIdx::new(i)).write_cvalue(fx, param);\n                     }\n                 }\n             }\n@@ -460,7 +460,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.push(self_arg);\n         for i in 0..tupled_arguments.len() {\n             args.push(CallArgument {\n-                value: pack_arg.value.value_field(fx, mir::Field::new(i)),\n+                value: pack_arg.value.value_field(fx, FieldIdx::new(i)),\n                 is_owned: pack_arg.is_owned,\n             });\n         }"}, {"sha": "615ef58ff582922a740b6e834ba839125719668c", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -797,7 +797,7 @@ fn codegen_stmt<'tcx>(\n                             let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                            variant_dest.place_field(fx, FieldIdx::new(field_index))\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}, {"sha": "f740945a03c31578b8b025a062288d44d9ea6a16", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             tag_encoding: TagEncoding::Direct,\n             variants: _,\n         } => {\n-            let ptr = place.place_field(fx, mir::Field::new(tag_field));\n+            let ptr = place.place_field(fx, FieldIdx::new(tag_field));\n             let to = layout.ty.discriminant_for_variant(fx.tcx, variant_index).unwrap().val;\n             let to = if ptr.layout().abi.is_signed() {\n                 ty::ScalarInt::try_from_int(\n@@ -47,7 +47,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             variants: _,\n         } => {\n             if variant_index != untagged_variant {\n-                let niche = place.place_field(fx, mir::Field::new(tag_field));\n+                let niche = place.place_field(fx, FieldIdx::new(tag_field));\n                 let niche_type = fx.clif_type(niche.layout().ty).unwrap();\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = (niche_value as u128).wrapping_add(niche_start);\n@@ -107,7 +107,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n \n     // Read the tag/niche-encoded discriminant from memory.\n-    let tag = value.value_field(fx, mir::Field::new(tag_field));\n+    let tag = value.value_field(fx, FieldIdx::new(tag_field));\n     let tag = tag.load_scalar(fx);\n \n     // Decode the discriminant (specifically if it's niche-encoded)."}, {"sha": "0f32d1a25ffade75762b0c7b39f5cbbfcb411089", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -179,8 +179,8 @@ fn llvm_add_sub<'tcx>(\n \n     // c + carry -> c + first intermediate carry or borrow respectively\n     let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n-    let c = int0.value_field(fx, mir::Field::new(0));\n-    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+    let c = int0.value_field(fx, FieldIdx::new(0));\n+    let cb0 = int0.value_field(fx, FieldIdx::new(1)).load_scalar(fx);\n \n     // c + carry -> c + second intermediate carry or borrow respectively\n     let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);"}, {"sha": "6f54a8d49c8674d8b320d72b0ae84fa0a5387505", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -253,7 +253,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n \n             ret.write_cvalue(fx, base);\n-            let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n+            let ret_lane = ret.place_field(fx, FieldIdx::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n         }\n "}, {"sha": "8cc7f6c34b021ac8d7c9c06e166693228633f425", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n+    pub(crate) use rustc_target::abi::{Abi, FieldIdx, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "ff0e12410e7031498d13b61e02bc1e3525401055", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -147,8 +147,8 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n             assert_eq!(def_a, def_b);\n \n             for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n-                let src_f = src.value_field(fx, mir::Field::new(i));\n-                let dst_f = dst.place_field(fx, mir::Field::new(i));\n+                let src_f = src.value_field(fx, FieldIdx::new(i));\n+                let dst_f = dst.place_field(fx, FieldIdx::new(i));\n \n                 if dst_f.layout().is_zst() {\n                     continue;"}, {"sha": "ffe3ccb0eca0471099879d1fc9f8880a11320d5c", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -10,7 +10,7 @@ fn codegen_field<'tcx>(\n     base: Pointer,\n     extra: Option<Value>,\n     layout: TyAndLayout<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> (Pointer, TyAndLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n@@ -210,7 +210,7 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn value_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n@@ -687,7 +687,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n "}, {"sha": "b309695c190f8b4b6489a251870fa04116c39957", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n         if let Abi::Scalar(_) = arg.layout().abi {\n             'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n-                    let field = arg.value_field(fx, mir::Field::new(i));\n+                    let field = arg.value_field(fx, FieldIdx::new(i));\n                     if !field.layout().is_zst() {\n                         // we found the one non-zero-sized field that is allowed\n                         // now find *its* non-zero-sized field, or stop if it's a\n@@ -68,9 +68,9 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n             if ty.is_dyn_star() {\n                 let inner_layout = fx.layout_of(arg.layout().ty.builtin_deref(true).unwrap().ty);\n                 let dyn_star = CPlace::for_ptr(Pointer::new(arg.load_scalar(fx)), inner_layout);\n-                let ptr = dyn_star.place_field(fx, mir::Field::new(0)).to_ptr();\n+                let ptr = dyn_star.place_field(fx, FieldIdx::new(0)).to_ptr();\n                 let vtable =\n-                    dyn_star.place_field(fx, mir::Field::new(1)).to_cvalue(fx).load_scalar(fx);\n+                    dyn_star.place_field(fx, FieldIdx::new(1)).to_cvalue(fx).load_scalar(fx);\n                 break 'block (ptr, vtable);\n             }\n         }"}, {"sha": "3e4765fba57d540f64753568c5f8f8eb01721d0a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -6,15 +6,17 @@ use rustc_hir::def::CtorKind;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{\n     bug,\n-    mir::{Field, GeneratorLayout, GeneratorSavedLocal},\n+    mir::{GeneratorLayout, GeneratorSavedLocal},\n     ty::{\n         self,\n         layout::{IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout},\n         AdtDef, GeneratorSubsts, Ty, VariantDef,\n     },\n };\n use rustc_span::Symbol;\n-use rustc_target::abi::{HasDataLayout, Integer, Primitive, TagEncoding, VariantIdx, Variants};\n+use rustc_target::abi::{\n+    FieldIdx, HasDataLayout, Integer, Primitive, TagEncoding, VariantIdx, Variants,\n+};\n use std::borrow::Cow;\n \n use crate::{\n@@ -353,7 +355,7 @@ pub fn build_generator_variant_struct_type_di_node<'ll, 'tcx>(\n             let state_specific_fields: SmallVec<_> = (0..variant_layout.fields.count())\n                 .map(|field_index| {\n                     let generator_saved_local = generator_layout.variant_fields[variant_index]\n-                        [Field::from_usize(field_index)];\n+                        [FieldIdx::from_usize(field_index)];\n                     let field_name_maybe = state_specific_upvar_names[generator_saved_local];\n                     let field_name = field_name_maybe\n                         .as_ref()"}, {"sha": "ff25d1e38236d11f93c09fbce832f524d3555dfa", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::{Abi, Size, VariantIdx};\n+use rustc_target::abi::{Abi, FieldIdx, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -79,7 +79,7 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n trait DebugInfoOffsetLocation<'tcx, Bx> {\n     fn deref(&self, bx: &mut Bx) -> Self;\n     fn layout(&self) -> TyAndLayout<'tcx>;\n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self;\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self;\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n }\n \n@@ -94,7 +94,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         self.layout\n     }\n \n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self {\n         PlaceRef::project_field(*self, bx, field.index())\n     }\n \n@@ -116,7 +116,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         *self\n     }\n \n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self {\n         self.field(bx.cx(), field.index())\n     }\n "}, {"sha": "37356b53c0271e423d8eb51558ffe1ea409c55eb", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::{self, GeneratorKind, ImplicitSelfKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n-use rustc_target::abi::{Size, VariantIdx};\n+use rustc_target::abi::{FieldIdx, Size, VariantIdx};\n \n use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n@@ -1512,7 +1512,7 @@ impl<V, T> ProjectionElem<V, T> {\n     }\n \n     /// Returns `true` if this is a `Field` projection with the given index.\n-    pub fn is_field_to(&self, f: Field) -> bool {\n+    pub fn is_field_to(&self, f: FieldIdx) -> bool {\n         matches!(*self, Self::Field(x, _) if x == f)\n     }\n }\n@@ -1521,22 +1521,6 @@ impl<V, T> ProjectionElem<V, T> {\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`.\n pub type ProjectionKind = ProjectionElem<(), ()>;\n \n-rustc_index::newtype_index! {\n-    /// A [newtype'd][wrapper] index type in the MIR [control-flow graph][CFG]\n-    ///\n-    /// A field (e.g., `f` in `_1.f`) is one variant of [`ProjectionElem`]. Conceptually,\n-    /// rustc can identify that a field projection refers to either two different regions of memory\n-    /// or the same one between the base and the 'projection element'.\n-    /// Read more about projections in the [rustc-dev-guide][mir-datatypes]\n-    ///\n-    /// [wrapper]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#newtype\n-    /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n-    /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n-    #[derive(HashStable)]\n-    #[debug_format = \"field[{}]\"]\n-    pub struct Field {}\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct PlaceRef<'tcx> {\n     pub local: Local,\n@@ -2685,12 +2669,17 @@ impl<'tcx> UserTypeProjections {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.deref())\n     }\n \n-    pub fn leaf(self, field: Field) -> Self {\n+    pub fn leaf(self, field: FieldIdx) -> Self {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.leaf(field))\n     }\n \n-    pub fn variant(self, adt_def: AdtDef<'tcx>, variant_index: VariantIdx, field: Field) -> Self {\n-        self.map_projections(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field))\n+    pub fn variant(\n+        self,\n+        adt_def: AdtDef<'tcx>,\n+        variant_index: VariantIdx,\n+        field_index: FieldIdx,\n+    ) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field_index))\n     }\n }\n \n@@ -2733,7 +2722,7 @@ impl UserTypeProjection {\n         self\n     }\n \n-    pub(crate) fn leaf(mut self, field: Field) -> Self {\n+    pub(crate) fn leaf(mut self, field: FieldIdx) -> Self {\n         self.projs.push(ProjectionElem::Field(field, ()));\n         self\n     }\n@@ -2742,13 +2731,13 @@ impl UserTypeProjection {\n         mut self,\n         adt_def: AdtDef<'_>,\n         variant_index: VariantIdx,\n-        field: Field,\n+        field_index: FieldIdx,\n     ) -> Self {\n         self.projs.push(ProjectionElem::Downcast(\n             Some(adt_def.variant(variant_index).name),\n             variant_index,\n         ));\n-        self.projs.push(ProjectionElem::Field(field, ()));\n+        self.projs.push(ProjectionElem::Field(field_index, ()));\n         self\n     }\n }"}, {"sha": "68561cf6dd775deeee6df16b38bab56356d44616", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -10,12 +10,12 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use smallvec::SmallVec;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n-use super::{Field, SourceInfo};\n+use super::SourceInfo;\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n@@ -152,7 +152,7 @@ pub struct GeneratorLayout<'tcx> {\n \n     /// Which of the above fields are in each variant. Note that one field may\n     /// be stored in multiple variants.\n-    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>>,\n+    pub variant_fields: IndexVec<VariantIdx, IndexVec<FieldIdx, GeneratorSavedLocal>>,\n \n     /// The source that led to each variant being created (usually, a yield or\n     /// await).\n@@ -229,7 +229,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// unerased regions.\n     pub concrete_opaque_types: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n-    pub used_mut_upvars: SmallVec<[Field; 8]>,\n+    pub used_mut_upvars: SmallVec<[FieldIdx; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n@@ -353,7 +353,7 @@ pub enum ConstraintCategory<'tcx> {\n     /// like `Foo { field: my_val }`)\n     Usage,\n     OpaqueType,\n-    ClosureUpvar(Field),\n+    ClosureUpvar(FieldIdx),\n \n     /// A constraint from a user-written predicate\n     /// with the provided span, written on the item\n@@ -375,7 +375,7 @@ pub enum ConstraintCategory<'tcx> {\n #[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {\n     Normal,\n-    ClosureUpvar(Field),\n+    ClosureUpvar(FieldIdx),\n }\n \n /// The subject of a `ClosureOutlivesRequirement` -- that is, the thing"}, {"sha": "8fb693055fa8ae6c06987d411d65318e77b63d95", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -3,7 +3,7 @@\n //! This is in a dedicated file so that changes to this file can be reviewed more carefully.\n //! The intention is that this file only contains datatype declarations, no code.\n \n-use super::{BasicBlock, Constant, Field, Local, SwitchTargets, UserTypeProjection};\n+use super::{BasicBlock, Constant, Local, SwitchTargets, UserTypeProjection};\n \n use crate::mir::coverage::{CodeRegion, CoverageKind};\n use crate::traits::Reveal;\n@@ -16,7 +16,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir};\n use rustc_hir::{self, GeneratorKind};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use rustc_ast::Mutability;\n use rustc_span::def_id::LocalDefId;\n@@ -888,7 +888,15 @@ pub struct Place<'tcx> {\n #[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ProjectionElem<V, T> {\n     Deref,\n-    Field(Field, T),\n+\n+    /// A field (e.g., `f` in `_1.f`) is one variant of [`ProjectionElem`]. Conceptually,\n+    /// rustc can identify that a field projection refers to either two different regions of memory\n+    /// or the same one between the base and the 'projection element'.\n+    /// Read more about projections in the [rustc-dev-guide][mir-datatypes]\n+    ///\n+    /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n+    Field(FieldIdx, T),\n+\n     /// Index into a slice/array.\n     ///\n     /// Note that this does not also dereference, and so it does not exactly correspond to slice"}, {"sha": "4a28aabf8a35873da34675de243bc87b358696cb", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -6,7 +6,7 @@\n use crate::mir::*;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n #[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct PlaceTy<'tcx> {\n@@ -33,7 +33,7 @@ impl<'tcx> PlaceTy<'tcx> {\n     ///\n     /// Note that the resulting type has not been normalized.\n     #[instrument(level = \"debug\", skip(tcx), ret)]\n-    pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: Field) -> Ty<'tcx> {\n+    pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: FieldIdx) -> Ty<'tcx> {\n         match self.ty.kind() {\n             ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n@@ -61,14 +61,14 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n     /// projects `place_ty` onto `elem`, returning the appropriate\n     /// `Ty` or downcast variant corresponding to that projection.\n-    /// The `handle_field` callback must map a `Field` to its `Ty`,\n+    /// The `handle_field` callback must map a `FieldIdx` to its `Ty`,\n     /// (which should be trivial when `T` = `Ty`).\n     pub fn projection_ty_core<V, T>(\n         self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         elem: &ProjectionElem<V, T>,\n-        mut handle_field: impl FnMut(&Self, Field, T) -> Ty<'tcx>,\n+        mut handle_field: impl FnMut(&Self, FieldIdx, T) -> Ty<'tcx>,\n         mut handle_opaque_cast: impl FnMut(&Self, T) -> Ty<'tcx>,\n     ) -> PlaceTy<'tcx>\n     where"}, {"sha": "4a096a2c0e840ca4dedbe1079136b2f55078fa40", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::hir_id::{HirId, OwnerId};\n use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::FieldIdx;\n \n /// Placeholder for `CrateNum`'s \"local\" counterpart\n #[derive(Copy, Clone, Debug)]\n@@ -332,7 +333,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n+impl<'tcx> Key for (ty::Const<'tcx>, FieldIdx) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {"}, {"sha": "29e3055a4b860fdbc4b8c014db126e397bc9a79d", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -17,14 +17,14 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n-use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtDef, FnSig, Ty, UpvarSubsts};\n use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::fmt;\n use std::ops::Index;\n@@ -366,7 +366,7 @@ pub enum ExprKind<'tcx> {\n         /// Variant containing the field.\n         variant_index: VariantIdx,\n         /// This can be a named (`.foo`) or unnamed (`.0`) field.\n-        name: Field,\n+        name: FieldIdx,\n     },\n     /// A *non-overloaded* indexing operation.\n     Index {\n@@ -491,7 +491,7 @@ pub enum ExprKind<'tcx> {\n /// This is used in struct constructors.\n #[derive(Clone, Debug, HashStable)]\n pub struct FieldExpr {\n-    pub name: Field,\n+    pub name: FieldIdx,\n     pub expr: ExprId,\n }\n \n@@ -570,7 +570,7 @@ pub enum BindingMode {\n \n #[derive(Clone, Debug, HashStable)]\n pub struct FieldPat<'tcx> {\n-    pub field: Field,\n+    pub field: FieldIdx,\n     pub pattern: Box<Pat<'tcx>>,\n }\n "}, {"sha": "8d0aa622244cd9e9d8b9582dae53ea9cc5c9c71a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -12,9 +12,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n-use crate::mir::{\n-    Body, BorrowCheckResult, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n-};\n+use crate::mir::{Body, BorrowCheckResult, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::query::LocalCrate;\n use crate::thir::Thir;\n use crate::traits;\n@@ -65,7 +63,7 @@ use rustc_span::def_id::{DefPathHash, StableCrateId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n+use rustc_target::abi::{FieldIdx, Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n use rustc_type_ir::WithCachedTypeInfo;\n@@ -2125,7 +2123,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n+    pub fn mk_place_field(self, place: Place<'tcx>, f: FieldIdx, ty: Ty<'tcx>) -> Place<'tcx> {\n         self.mk_place_elem(place, PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "d4f058440b954ba179a5d63ce331426c9995ce71", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -4,7 +4,7 @@\n //! to help with the tedium.\n \n use crate::mir::interpret;\n-use crate::mir::{Field, ProjectionKind};\n+use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -217,6 +217,7 @@ CloneLiftImpls! {\n // implementation and traversal implementations (the latter only for\n // TyCtxt<'_> interners).\n TrivialTypeTraversalAndLiftImpls! {\n+    ::rustc_target::abi::FieldIdx,\n     ::rustc_target::abi::VariantIdx,\n     crate::middle::region::Scope,\n     crate::ty::FloatTy,\n@@ -268,7 +269,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     ::rustc_span::Span,\n     ::rustc_span::symbol::Ident,\n     ::rustc_errors::ErrorGuaranteed,\n-    Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n     ty::BoundVar,"}, {"sha": "77a5017b3630f9459e07dc771ade54f360009d16", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::ty::cast::mir_cast_kind;\n use rustc_middle::{mir::*, thir::*, ty};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use crate::build::custom::ParseError;\n use crate::build::expr::as_constant::as_constant_inner;\n@@ -223,7 +223,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         let (parent, proj) = parse_by_kind!(self, expr_id, expr, \"place\",\n             @call(\"mir_field\", args) => {\n                 let (parent, ty) = self.parse_place_inner(args[0])?;\n-                let field = Field::from_u32(self.parse_integer_literal(args[1])? as u32);\n+                let field = FieldIdx::from_u32(self.parse_integer_literal(args[1])? as u32);\n                 let field_ty = ty.field_ty(self.tcx, field);\n                 let proj = PlaceElem::Field(field, field_ty);\n                 let place = parent.project_deeper(&[proj], self.tcx);"}, {"sha": "0fc99e57d12297361f8731d631273e66c54f2cf2", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::AdtDef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, Variance};\n use rustc_span::Span;\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n \n use std::assert_matches::assert_matches;\n use std::iter;\n@@ -293,7 +293,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         &self.projection\n     }\n \n-    pub(crate) fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n+    pub(crate) fn field(self, f: FieldIdx, ty: Ty<'tcx>) -> Self {\n         self.project(PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "d1878bf77ef1e8c79273bbd6b0e57ebf0ec6f591", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current\n@@ -553,8 +554,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     result_value,\n                     Rvalue::CheckedBinaryOp(op, Box::new((lhs.to_copy(), rhs.to_copy()))),\n                 );\n-                let val_fld = Field::new(0);\n-                let of_fld = Field::new(1);\n+                let val_fld = FieldIdx::new(0);\n+                let of_fld = FieldIdx::new(1);\n \n                 let tcx = self.tcx;\n                 let val = tcx.mk_place_field(result_value, val_fld, ty);"}, {"sha": "b8260c719c89a3b9ae9bf2ec2b8658269bb5528a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -10,6 +10,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n+use rustc_target::abi::FieldIdx;\n use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -344,7 +345,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .collect();\n \n                 let field_names: Vec<_> =\n-                    (0..adt_def.variant(variant_index).fields.len()).map(Field::new).collect();\n+                    (0..adt_def.variant(variant_index).fields.len()).map(FieldIdx::new).collect();\n \n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n                     let place_builder ="}, {"sha": "e87e38fd04cafa5c4d056c61e2f6e029015f98da", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_span::Symbol;\n+use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi;\n \n use super::lints;\n@@ -793,7 +794,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let mutability = captured_place.mutability;\n \n                 let mut projs = closure_env_projs.clone();\n-                projs.push(ProjectionElem::Field(Field::new(i), ty));\n+                projs.push(ProjectionElem::Field(FieldIdx::new(i), ty));\n                 match capture {\n                     ty::UpvarCapture::ByValue => {}\n                     ty::UpvarCapture::ByRef(..) => {"}, {"sha": "2a0b5d047331362aa3995a7870c85da6984d00b8", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::{self, BinOp, BorrowKind, Field, UnOp};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -20,7 +20,7 @@ use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n use rustc_span::{sym, Span};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n \n impl<'tcx> Cx<'tcx> {\n     pub(crate) fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {\n@@ -379,7 +379,7 @@ impl<'tcx> Cx<'tcx> {\n                             .iter()\n                             .enumerate()\n                             .map(|(idx, e)| FieldExpr {\n-                                name: Field::new(idx),\n+                                name: FieldIdx::new(idx),\n                                 expr: self.mirror_expr(e),\n                             })\n                             .collect();\n@@ -733,7 +733,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n                 variant_index: FIRST_VARIANT,\n-                name: Field::new(self.typeck_results.field_index(expr.hir_id)),\n+                name: FieldIdx::new(self.typeck_results.field_index(expr.hir_id)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -1053,7 +1053,7 @@ impl<'tcx> Cx<'tcx> {\n                 HirProjectionKind::Field(field, variant_index) => ExprKind::Field {\n                     lhs: self.thir.exprs.push(captured_place_expr),\n                     variant_index,\n-                    name: Field::new(field as usize),\n+                    name: FieldIdx::new(field as usize),\n                 },\n                 HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                     // We don't capture these projections, so we can ignore them here\n@@ -1107,7 +1107,7 @@ impl<'tcx> Cx<'tcx> {\n         fields\n             .iter()\n             .map(|field| FieldExpr {\n-                name: Field::new(self.typeck_results.field_index(field.hir_id)),\n+                name: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n                 expr: self.mirror_expr(field.expr),\n             })\n             .collect()"}, {"sha": "2dbef740d1a6e290dd77ea1c8ff25478ad8e3278", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -2,11 +2,12 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::mir::{self, Field};\n+use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n \n@@ -218,7 +219,7 @@ impl<'tcx> ConstToPat<'tcx> {\n     ) -> Result<Vec<FieldPat<'tcx>>, FallbackToConstRef> {\n         vals.enumerate()\n             .map(|(idx, val)| {\n-                let field = Field::new(idx);\n+                let field = FieldIdx::new(idx);\n                 Ok(FieldPat { field, pattern: self.recur(val, false)? })\n             })\n             .collect()"}, {"sha": "e619e095496bc60548a20b87cfc37abe3119cf15", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -53,14 +53,14 @@ use smallvec::{smallvec, SmallVec};\n use rustc_data_structures::captures::Captures;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::{self, Field};\n+use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Ty, TyCtxt, VariantDef};\n use rustc_middle::{middle::stability::EvalResult, mir::interpret::ConstValue};\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::{Integer, Size, VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, Integer, Size, VariantIdx, FIRST_VARIANT};\n \n use self::Constructor::*;\n use self::SliceKind::*;\n@@ -1126,7 +1126,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n /// Note that the number of fields of a constructor may not match the fields declared in the\n /// original struct/variant. This happens if a private or `non_exhaustive` field is uninhabited,\n /// because the code mustn't observe that it is uninhabited. In that case that field is not\n-/// included in `fields`. For that reason, when you have a `mir::Field` you must use\n+/// included in `fields`. For that reason, when you have a `FieldIdx` you must use\n /// `index_with_declared_idx`.\n #[derive(Debug, Clone, Copy)]\n pub(super) struct Fields<'p, 'tcx> {\n@@ -1165,7 +1165,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         cx: &'a MatchCheckCtxt<'p, 'tcx>,\n         ty: Ty<'tcx>,\n         variant: &'a VariantDef,\n-    ) -> impl Iterator<Item = (Field, Ty<'tcx>)> + Captures<'a> + Captures<'p> {\n+    ) -> impl Iterator<Item = (FieldIdx, Ty<'tcx>)> + Captures<'a> + Captures<'p> {\n         let ty::Adt(adt, substs) = ty.kind() else { bug!() };\n         // Whether we must not match the fields of this variant exhaustively.\n         let is_non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did().is_local();\n@@ -1180,7 +1180,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n             if is_uninhabited && (!is_visible || is_non_exhaustive) {\n                 None\n             } else {\n-                Some((Field::new(i), ty))\n+                Some((FieldIdx::new(i), ty))\n             }\n         })\n     }\n@@ -1438,7 +1438,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                 ty::Tuple(..) => PatKind::Leaf {\n                     subpatterns: subpatterns\n                         .enumerate()\n-                        .map(|(i, pattern)| FieldPat { field: Field::new(i), pattern })\n+                        .map(|(i, pattern)| FieldPat { field: FieldIdx::new(i), pattern })\n                         .collect(),\n                 },\n                 ty::Adt(adt_def, _) if adt_def.is_box() => {"}, {"sha": "72b4041aa1b72f17fdbc78166536d0186b6f74ea", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -21,12 +21,13 @@ use rustc_middle::mir::interpret::{\n     ConstValue, ErrorHandled, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc_middle::mir::{self, UserTypeProjection};\n-use rustc_middle::mir::{BorrowKind, Field, Mutability};\n+use rustc_middle::mir::{BorrowKind, Mutability};\n use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, Region, Ty, TyCtxt, UserType};\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::FieldIdx;\n \n use std::cmp::Ordering;\n \n@@ -356,7 +357,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let subpatterns = fields\n                     .iter()\n                     .map(|field| FieldPat {\n-                        field: Field::new(self.typeck_results.field_index(field.hir_id)),\n+                        field: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n                         pattern: self.lower_pattern(&field.pat),\n                     })\n                     .collect();\n@@ -379,7 +380,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         pats.iter()\n             .enumerate_and_adjust(expected_len, gap_pos)\n             .map(|(i, subpattern)| FieldPat {\n-                field: Field::new(i),\n+                field: FieldIdx::new(i),\n                 pattern: self.lower_pattern(subpattern),\n             })\n             .collect()\n@@ -723,7 +724,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, LocalVarId, usize,\n+    Span, FieldIdx, Mutability, Symbol, LocalVarId, usize,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}, {"sha": "37787d99c2d51aeae9a5928b9995c83dc01747fe", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::traits::Reveal;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use std::{fmt, iter};\n \n /// The value of an inserted drop flag.\n@@ -129,7 +129,7 @@ pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n     /// Returns the subpath of a field of `path` (or `None` if there is no dedicated subpath).\n     ///\n     /// If this returns `None`, `field` will not get a dedicated drop flag.\n-    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path>;\n+    fn field_subpath(&self, path: Self::Path, field: FieldIdx) -> Option<Self::Path>;\n \n     /// Returns the subpath of a dereference of `path` (or `None` if there is no dedicated subpath).\n     ///\n@@ -269,7 +269,7 @@ where\n             .iter()\n             .enumerate()\n             .map(|(i, f)| {\n-                let field = Field::new(i);\n+                let field = FieldIdx::new(i);\n                 let subpath = self.elaborator.field_subpath(variant_path, field);\n                 let tcx = self.tcx();\n \n@@ -397,8 +397,8 @@ where\n             .enumerate()\n             .map(|(i, &ty)| {\n                 (\n-                    self.tcx().mk_place_field(self.place, Field::new(i), ty),\n-                    self.elaborator.field_subpath(self.path, Field::new(i)),\n+                    self.tcx().mk_place_field(self.place, FieldIdx::new(i), ty),\n+                    self.elaborator.field_subpath(self.path, FieldIdx::new(i)),\n                 )\n             })\n             .collect();\n@@ -416,9 +416,9 @@ where\n             unique_ty.ty_adt_def().unwrap().non_enum_variant().fields[0].ty(self.tcx(), substs);\n         let ptr_ty = self.tcx().mk_imm_ptr(substs[0].expect_ty());\n \n-        let unique_place = self.tcx().mk_place_field(self.place, Field::new(0), unique_ty);\n-        let nonnull_place = self.tcx().mk_place_field(unique_place, Field::new(0), nonnull_ty);\n-        let ptr_place = self.tcx().mk_place_field(nonnull_place, Field::new(0), ptr_ty);\n+        let unique_place = self.tcx().mk_place_field(self.place, FieldIdx::new(0), unique_ty);\n+        let nonnull_place = self.tcx().mk_place_field(unique_place, FieldIdx::new(0), nonnull_ty);\n+        let ptr_place = self.tcx().mk_place_field(nonnull_place, FieldIdx::new(0), ptr_ty);\n         let interior = self.tcx().mk_place_deref(ptr_place);\n \n         let interior_path = self.elaborator.deref_subpath(self.path);\n@@ -899,7 +899,7 @@ where\n             .iter()\n             .enumerate()\n             .map(|(i, f)| {\n-                let field = Field::new(i);\n+                let field = FieldIdx::new(i);\n                 let field_ty = f.ty(tcx, substs);\n                 Operand::Move(tcx.mk_place_field(self.place, field, field_ty))\n             })"}, {"sha": "63e553bec53291ce464a8b8f3a5da5d917e9ab09", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -40,7 +40,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use crate::lattice::{HasBottom, HasTop};\n use crate::{\n@@ -919,7 +919,7 @@ impl<V: HasTop> ValueOrPlace<V> {\n /// Although only field projections are currently allowed, this could change in the future.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum TrackElem {\n-    Field(Field),\n+    Field(FieldIdx),\n     Variant(VariantIdx),\n     Discriminant,\n }\n@@ -941,7 +941,7 @@ pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),\n+    mut f: impl FnMut(Option<VariantIdx>, FieldIdx, Ty<'tcx>),\n ) {\n     match ty.kind() {\n         ty::Tuple(list) => {"}, {"sha": "15f5df41153b2502b9f0baf9532bd01e6964532a", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -13,8 +13,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n-use rustc_target::abi::Align;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{Align, FieldIdx, VariantIdx};\n \n use crate::MirPass;\n \n@@ -148,7 +147,7 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                         for (field_index, operand) in operands.iter().enumerate() {\n                             if let Some(field) = self.map().apply(\n                                 variant_target_idx,\n-                                TrackElem::Field(Field::from_usize(field_index)),\n+                                TrackElem::Field(FieldIdx::from_usize(field_index)),\n                             ) {\n                                 let result = self.handle_operand(operand, state);\n                                 state.insert_idx(field, result, self.map());"}, {"sha": "58bc083280a306c597fd824ae67af75d370f1e59", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_target::abi::FieldIdx;\n \n /// Constructs the types used when accessing a Box's pointer\n pub fn build_ptr_tys<'tcx>(\n@@ -32,9 +33,9 @@ pub fn build_projection<'tcx>(\n     ptr_ty: Ty<'tcx>,\n ) -> [PlaceElem<'tcx>; 3] {\n     [\n-        PlaceElem::Field(Field::new(0), unique_ty),\n-        PlaceElem::Field(Field::new(0), nonnull_ty),\n-        PlaceElem::Field(Field::new(0), ptr_ty),\n+        PlaceElem::Field(FieldIdx::new(0), unique_ty),\n+        PlaceElem::Field(FieldIdx::new(0), nonnull_ty),\n+        PlaceElem::Field(FieldIdx::new(0), ptr_ty),\n     ]\n }\n "}, {"sha": "a028d6356d50e0f770fbc778cabfbaeea9f2231a", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -15,7 +15,7 @@ use rustc_mir_dataflow::MoveDataParamEnv;\n use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_span::{DesugaringKind, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use std::fmt;\n \n /// During MIR building, Drop terminators are inserted in every place where a drop may occur.\n@@ -252,7 +252,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, '_, 'tcx> {\n         }\n     }\n \n-    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n+    fn field_subpath(&self, path: Self::Path, field: FieldIdx) -> Option<Self::Path> {\n         rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Field(idx, _) => idx == field,\n             _ => false,"}, {"sha": "50538248d91ee5df70ee3bd7c8ec4196ad4979e3", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -73,7 +73,7 @@ use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};\n \n@@ -162,9 +162,10 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: SELF_ARG,\n-                    projection: self\n-                        .tcx()\n-                        .mk_place_elems(&[ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n+                    projection: self.tcx().mk_place_elems(&[ProjectionElem::Field(\n+                        FieldIdx::new(0),\n+                        self.ref_gen_ty,\n+                    )]),\n                 },\n                 self.tcx,\n             );\n@@ -297,7 +298,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         let self_place = Place::from(SELF_ARG);\n         let base = self.tcx.mk_place_downcast_unnamed(self_place, variant_index);\n         let mut projection = base.projection.to_vec();\n-        projection.push(ProjectionElem::Field(Field::new(idx), ty));\n+        projection.push(ProjectionElem::Field(FieldIdx::new(idx), ty));\n \n         Place { local: base.local, projection: self.tcx.mk_place_elems(&projection) }\n     }\n@@ -967,7 +968,7 @@ fn compute_layout<'tcx>(\n \n     // Build the generator variant field list.\n     // Create a map from local indices to generator struct indices.\n-    let mut variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>> =\n+    let mut variant_fields: IndexVec<VariantIdx, IndexVec<FieldIdx, GeneratorSavedLocal>> =\n         iter::repeat(IndexVec::new()).take(RESERVED_VARIANTS).collect();\n     let mut remap = FxHashMap::default();\n     for (suspension_point_idx, live_locals) in live_locals_at_suspension_points.iter().enumerate() {"}, {"sha": "98d2df719786452644b4d5ecf15033cfce0c62b3", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::Abi;\n \n use crate::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -701,7 +701,7 @@ impl<'tcx> Inliner<'tcx> {\n             // The `tmp0`, `tmp1`, and `tmp2` in our example above.\n             let tuple_tmp_args = tuple_tys.iter().enumerate().map(|(i, ty)| {\n                 // This is e.g., `tuple_tmp.0` in our example above.\n-                let tuple_field = Operand::Move(tcx.mk_place_field(tuple, Field::new(i), ty));\n+                let tuple_field = Operand::Move(tcx.mk_place_field(tuple, FieldIdx::new(i), ty));\n \n                 // Spill to a local to make e.g., `tmp0`.\n                 self.create_temp_if_necessary(tuple_field, callsite, caller_body)"}, {"sha": "3d06a0a495f79f328027f8d96c8a2f4d63fa49b0", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -3,14 +3,14 @@\n use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n-    BinOp, Body, CastKind, Constant, ConstantKind, Field, LocalDecls, Operand, Place,\n-    ProjectionElem, Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator,\n-    TerminatorKind, UnOp,\n+    BinOp, Body, CastKind, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem,\n+    Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n };\n use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::FieldIdx;\n \n pub struct InstCombine;\n \n@@ -187,7 +187,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n                     for (i, field) in variant.fields.iter().enumerate() {\n                         let field_ty = field.ty(self.tcx, substs);\n                         if field_ty == *cast_ty {\n-                            let place = place.project_deeper(&[ProjectionElem::Field(Field::from_usize(i), *cast_ty)], self.tcx);\n+                            let place = place.project_deeper(&[ProjectionElem::Field(FieldIdx::from_usize(i), *cast_ty)], self.tcx);\n                             let operand = if operand.is_move() { Operand::Move(place) } else { Operand::Copy(place) };\n                             *rvalue = Rvalue::Use(operand);\n                             return;"}, {"sha": "c136642dff2779a253e322ddeffb68fee318f7cb", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n pub struct LowerIntrinsics;\n \n@@ -211,7 +211,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                                                     Some(sym::Some),\n                                                     VariantIdx::from_u32(1),\n                                                 ),\n-                                                PlaceElem::Field(Field::from_u32(0), *dest_ty),\n+                                                PlaceElem::Field(FieldIdx::from_u32(0), *dest_ty),\n                                             ],\n                                             tcx,\n                                         ),"}, {"sha": "1f9e521d315d8d1315e5542ae41e78b068f270ec", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -1,10 +1,11 @@\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_middle::mir::{Body, Field, TerminatorKind};\n+use rustc_middle::mir::{Body, TerminatorKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, VariantDef};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n use rustc_mir_dataflow::{self, move_path_children_matching, Analysis, MoveDataParamEnv};\n+use rustc_target::abi::FieldIdx;\n \n use crate::MirPass;\n \n@@ -130,15 +131,15 @@ fn is_needs_drop_and_init<'tcx>(\n                     .fields\n                     .iter()\n                     .enumerate()\n-                    .map(|(f, field)| (Field::from_usize(f), field.ty(tcx, substs), mpi))\n+                    .map(|(f, field)| (FieldIdx::from_usize(f), field.ty(tcx, substs), mpi))\n                     .any(field_needs_drop_and_init)\n             })\n         }\n \n         ty::Tuple(fields) => fields\n             .iter()\n             .enumerate()\n-            .map(|(f, f_ty)| (Field::from_usize(f), f_ty, mpi))\n+            .map(|(f, f_ty)| (FieldIdx::from_usize(f), f_ty, mpi))\n             .any(field_needs_drop_and_init),\n \n         _ => true,"}, {"sha": "9e406eba0fcaaca7e9adc3d0918583edf22fc127", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n \n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -309,7 +309,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn clear_drop_flag(&mut self, _location: Location, _path: Self::Path, _mode: DropFlagMode) {}\n \n-    fn field_subpath(&self, _path: Self::Path, _field: Field) -> Option<Self::Path> {\n+    fn field_subpath(&self, _path: Self::Path, _field: FieldIdx) -> Option<Self::Path> {\n         None\n     }\n     fn deref_subpath(&self, _path: Self::Path) -> Option<Self::Path> {\n@@ -530,7 +530,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             // created by block 2*i. We store this block in `unwind` so that the next clone block\n             // will unwind to it if cloning fails.\n \n-            let field = Field::new(i);\n+            let field = FieldIdx::new(i);\n             let src_field = self.tcx.mk_place_field(src, field, ity);\n \n             let dest_field = self.tcx.mk_place_field(dest, field, ity);\n@@ -753,7 +753,7 @@ fn build_call_shim<'tcx>(\n     if let Some(untuple_args) = untuple_args {\n         let tuple_arg = Local::new(1 + (sig.inputs().len() - 1));\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n-            Operand::Move(tcx.mk_place_field(Place::from(tuple_arg), Field::new(i), *ity))\n+            Operand::Move(tcx.mk_place_field(Place::from(tuple_arg), FieldIdx::new(i), *ity))\n         }));\n     }\n "}, {"sha": "c798bd05345e28e9dbe92612281085706e37109f", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c38454c0044d727e68cc123ff93376da62abfc/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=85c38454c0044d727e68cc123ff93376da62abfc", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n+use rustc_target::abi::FieldIdx;\n \n pub struct ScalarReplacementOfAggregates;\n \n@@ -115,7 +116,7 @@ fn escaping_locals(excluded: &BitSet<Local>, body: &Body<'_>) -> BitSet<Local> {\n struct ReplacementMap<'tcx> {\n     /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n     /// and deinit statement and debuginfo.\n-    fragments: IndexVec<Local, Option<IndexVec<Field, Option<(Ty<'tcx>, Local)>>>>,\n+    fragments: IndexVec<Local, Option<IndexVec<FieldIdx, Option<(Ty<'tcx>, Local)>>>>,\n }\n \n impl<'tcx> ReplacementMap<'tcx> {\n@@ -129,7 +130,7 @@ impl<'tcx> ReplacementMap<'tcx> {\n     fn place_fragments(\n         &self,\n         place: Place<'tcx>,\n-    ) -> Option<impl Iterator<Item = (Field, Ty<'tcx>, Local)> + '_> {\n+    ) -> Option<impl Iterator<Item = (FieldIdx, Ty<'tcx>, Local)> + '_> {\n         let local = place.as_local()?;\n         let fields = self.fragments[local].as_ref()?;\n         Some(fields.iter_enumerated().filter_map(|(field, &opt_ty_local)| {"}]}