{"sha": "4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNWZhZDY5NmE3NDA1ZTlhZTMyZmIzZGYzMzhiZDhmMzhkMmYzZTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-21T19:51:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-21T19:51:46Z"}, "message": "rustc: Get rid of boring_ann(); it duplicates plain_ann()", "tree": {"sha": "d532f85325057de3ae1489ab6c903dca387e9174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d532f85325057de3ae1489ab6c903dca387e9174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9", "html_url": "https://github.com/rust-lang/rust/commit/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0fcdd6300e9b5d78d7b86a1bdc2e849f68f935", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0fcdd6300e9b5d78d7b86a1bdc2e849f68f935", "html_url": "https://github.com/rust-lang/rust/commit/ef0fcdd6300e9b5d78d7b86a1bdc2e849f68f935"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "8baab19e96037d6b5610d4aaa03a5cd0bc487fd4", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4d5fad696a7405e9ae32fb3df338bd8f38d2f3e9", "patch": "@@ -7,6 +7,7 @@ import middle.fold;\n import driver.session;\n import util.common;\n import util.common.span;\n+import util.common.plain_ann;\n \n import middle.ty;\n import middle.ty.ann_to_type;\n@@ -70,10 +71,6 @@ type fn_ctxt = rec(@ty.t ret_ty,\n // Used for ast_ty_to_ty() below.\n type ty_getter = fn(ast.def_id) -> ty.ty_param_count_and_ty;\n \n-// Used to fill in the annotation for things that have uninteresting\n-// types\n-fn boring_ann() -> ann { ret triv_ann(ty.mk_nil()); }\n-\n // Substitutes the user's explicit types for the parameters in a path\n // expression.\n fn substitute_ty_params(&@crate_ctxt ccx,\n@@ -1443,13 +1440,13 @@ mod Pushdown {\n                 auto block_ = rec(stmts=bloc.node.stmts,\n                                   expr=some[@ast.expr](e_1),\n                                   index=bloc.node.index,\n-                                  a=boring_ann());\n+                                  a=plain_ann());\n                 ret fold.respan[ast.block_](bloc.span, block_);\n             }\n             case (none[@ast.expr]) {\n                 Demand.simple(fcx, bloc.span, expected, ty.mk_nil());\n                 ret fold.respan[ast.block_](bloc.span,\n-                      rec(a = boring_ann() with bloc.node));\n+                      rec(a = plain_ann() with bloc.node));\n             }\n         }\n     }\n@@ -1813,17 +1810,17 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n         case (ast.expr_fail(_)) {\n             ret @fold.respan[ast.expr_](expr.span,\n-                                        ast.expr_fail(boring_ann()));\n+                                        ast.expr_fail(plain_ann()));\n         }\n \n         case (ast.expr_break(_)) {\n             ret @fold.respan[ast.expr_](expr.span,\n-                                        ast.expr_break(boring_ann()));\n+                                        ast.expr_break(plain_ann()));\n         }\n \n         case (ast.expr_cont(_)) {\n             ret @fold.respan[ast.expr_](expr.span,\n-                                        ast.expr_cont(boring_ann()));\n+                                        ast.expr_cont(plain_ann()));\n         }\n \n         case (ast.expr_ret(?expr_opt, _)) {\n@@ -1837,15 +1834,15 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n                     ret @fold.respan[ast.expr_]\n                         (expr.span,\n-                         ast.expr_ret(none[@ast.expr], boring_ann()));\n+                         ast.expr_ret(none[@ast.expr], plain_ann()));\n                 }\n \n                 case (some[@ast.expr](?e)) {\n                     auto expr_0 = check_expr(fcx, e);\n                     auto expr_1 = Pushdown.pushdown_expr(fcx, fcx.ret_ty,\n                                                          expr_0);\n                     ret @fold.respan[ast.expr_]\n-                        (expr.span, ast.expr_ret(some(expr_1), boring_ann()));\n+                        (expr.span, ast.expr_ret(some(expr_1), plain_ann()));\n                 }\n             }\n         }\n@@ -1861,15 +1858,15 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n                     ret @fold.respan[ast.expr_]\n                         (expr.span, ast.expr_put(none[@ast.expr],\n-                                                 boring_ann()));\n+                                                 plain_ann()));\n                 }\n \n                 case (some[@ast.expr](?e)) {\n                     auto expr_0 = check_expr(fcx, e);\n                     auto expr_1 = Pushdown.pushdown_expr(fcx, fcx.ret_ty,\n                                                          expr_0);\n                     ret @fold.respan[ast.expr_]\n-                        (expr.span, ast.expr_put(some(expr_1), boring_ann()));\n+                        (expr.span, ast.expr_put(some(expr_1), plain_ann()));\n                 }\n             }\n         }\n@@ -1881,20 +1878,20 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             auto expr_1 = Pushdown.pushdown_expr(fcx, fcx.ret_ty, expr_0);\n             ret @fold.respan[ast.expr_](expr.span,\n                                         ast.expr_be(expr_1,\n-                                                    boring_ann()));\n+                                                    plain_ann()));\n         }\n \n         case (ast.expr_log(?l,?e,_)) {\n             auto expr_t = check_expr(fcx, e);\n             ret @fold.respan[ast.expr_]\n-                (expr.span, ast.expr_log(l, expr_t, boring_ann()));\n+                (expr.span, ast.expr_log(l, expr_t, plain_ann()));\n         }\n \n         case (ast.expr_check_expr(?e, _)) {\n             auto expr_t = check_expr(fcx, e);\n             Demand.simple(fcx, expr.span, ty.mk_bool(), expr_ty(expr_t));\n             ret @fold.respan[ast.expr_]\n-                (expr.span, ast.expr_check_expr(expr_t, boring_ann()));\n+                (expr.span, ast.expr_check_expr(expr_t, plain_ann()));\n         }\n \n         case (ast.expr_assign(?lhs, ?rhs, _)) {\n@@ -2596,7 +2593,7 @@ fn check_block(&@fn_ctxt fcx, &ast.block block) -> ast.block {\n     ret fold.respan[ast.block_](block.span,\n                                 rec(stmts=stmts, expr=expr,\n                                     index=block.node.index,\n-                                    a=boring_ann()));\n+                                    a=plain_ann()));\n }\n \n fn check_const(&@crate_ctxt ccx, &span sp, ast.ident ident, @ast.ty t,"}]}