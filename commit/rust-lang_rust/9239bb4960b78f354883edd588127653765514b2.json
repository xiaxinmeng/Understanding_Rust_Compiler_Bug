{"sha": "9239bb4960b78f354883edd588127653765514b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMzliYjQ5NjBiNzhmMzU0ODgzZWRkNTg4MTI3NjUzNzY1NTE0YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-08T11:16:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-08T11:16:53Z"}, "message": "auto merge of #14741 : sfackler/rust/visit-attr, r=alexcrichton\n\nThe lint was missing a *lot* of cases previously.", "tree": {"sha": "9048ff69d7d09d32667e048d16c8ec7307074029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9048ff69d7d09d32667e048d16c8ec7307074029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9239bb4960b78f354883edd588127653765514b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9239bb4960b78f354883edd588127653765514b2", "html_url": "https://github.com/rust-lang/rust/commit/9239bb4960b78f354883edd588127653765514b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9239bb4960b78f354883edd588127653765514b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "010d96ede9168df42c0218c41863a1a013599772", "url": "https://api.github.com/repos/rust-lang/rust/commits/010d96ede9168df42c0218c41863a1a013599772", "html_url": "https://github.com/rust-lang/rust/commit/010d96ede9168df42c0218c41863a1a013599772"}, {"sha": "9452cd24fb2c0fc68a6d4e18ab44c066a56d9301", "url": "https://api.github.com/repos/rust-lang/rust/commits/9452cd24fb2c0fc68a6d4e18ab44c066a56d9301", "html_url": "https://github.com/rust-lang/rust/commit/9452cd24fb2c0fc68a6d4e18ab44c066a56d9301"}], "stats": {"total": 326, "additions": 152, "deletions": 174}, "files": [{"sha": "748c29cd92c42d56ffc1d2dfbcba3a1d9d46f040", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -187,11 +187,11 @@ impl<'a> LanguageItemCollector<'a> {\n \n pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> {\n     for attribute in attrs.iter() {\n-        match attribute.name_str_pair() {\n-            Some((ref key, ref value)) if key.equiv(&(\"lang\")) => {\n-                return Some((*value).clone());\n+        match attribute.value_str() {\n+            Some(ref value) if attribute.check_name(\"lang\") => {\n+                return Some(value.clone());\n             }\n-            Some(..) | None => {}\n+            _ => {}\n         }\n     }\n "}, {"sha": "9500f4d7ceebace551f0e5e87b3900ed2d8f48e0", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 34, "deletions": 114, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -92,7 +92,6 @@ pub enum Lint {\n     TypeOverflow,\n     UnusedUnsafe,\n     UnsafeBlock,\n-    AttributeUsage,\n     UnusedAttribute,\n     UnknownFeatures,\n     UnknownCrateType,\n@@ -294,13 +293,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: Allow\n     }),\n \n-    (\"attribute_usage\",\n-     LintSpec {\n-        lint: AttributeUsage,\n-        desc: \"detects bad use of attributes\",\n-        default: Warn\n-    }),\n-\n     (\"unused_attribute\",\n      LintSpec {\n          lint: UnusedAttribute,\n@@ -1096,94 +1088,7 @@ fn check_raw_ptr_deriving(cx: &mut Context, item: &ast::Item) {\n     }\n }\n \n-static crate_attrs: &'static [&'static str] = &[\n-    \"crate_type\", \"feature\", \"no_start\", \"no_main\", \"no_std\", \"crate_id\",\n-    \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n-    \"no_builtins\",\n-];\n-\n-\n-static obsolete_attrs: &'static [(&'static str, &'static str)] = &[\n-    (\"abi\", \"Use `extern \\\"abi\\\" fn` instead\"),\n-    (\"auto_encode\", \"Use `#[deriving(Encodable)]` instead\"),\n-    (\"auto_decode\", \"Use `#[deriving(Decodable)]` instead\"),\n-    (\"fast_ffi\", \"Remove it\"),\n-    (\"fixed_stack_segment\", \"Remove it\"),\n-    (\"rust_stack\", \"Remove it\"),\n-];\n-\n-static other_attrs: &'static [&'static str] = &[\n-    // item-level\n-    \"address_insignificant\", // can be crate-level too\n-    \"thread_local\", // for statics\n-    \"allow\", \"deny\", \"forbid\", \"warn\", // lint options\n-    \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n-    \"cfg\", \"doc\", \"export_name\", \"link_section\",\n-    \"no_mangle\", \"static_assert\", \"unsafe_no_drop_flag\", \"packed\",\n-    \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\", \"phase\",\n-    \"macro_export\", \"must_use\", \"automatically_derived\",\n-\n-    //mod-level\n-    \"path\", \"link_name\", \"link_args\", \"macro_escape\", \"no_implicit_prelude\",\n-\n-    // fn-level\n-    \"test\", \"bench\", \"should_fail\", \"ignore\", \"inline\", \"lang\", \"main\", \"start\",\n-    \"no_split_stack\", \"cold\", \"macro_registrar\", \"linkage\",\n-\n-    // internal attribute: bypass privacy inside items\n-    \"!resolve_unexported\",\n-];\n-\n-fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n-\n-    for attr in attrs.iter() {\n-        let name = attr.node.value.name();\n-        let mut iter = crate_attrs.iter().chain(other_attrs.iter());\n-        if !iter.any(|other_attr| { name.equiv(other_attr) }) {\n-            cx.span_lint(AttributeUsage, attr.span, \"unknown crate attribute\");\n-        }\n-        if name.equiv(&(\"link\")) {\n-            cx.tcx.sess.span_err(attr.span,\n-                                 \"obsolete crate `link` attribute\");\n-            cx.tcx.sess.note(\"the link attribute has been superceded by the crate_id \\\n-                             attribute, which has the format `#[crate_id = \\\"name#version\\\"]`\");\n-        }\n-    }\n-}\n-\n-fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n-    // check if element has crate-level, obsolete, or any unknown attributes.\n-\n-    for attr in attrs.iter() {\n-        let name = attr.node.value.name();\n-        for crate_attr in crate_attrs.iter() {\n-            if name.equiv(crate_attr) {\n-                let msg = match attr.node.style {\n-                    ast::AttrOuter => \"crate-level attribute should be an inner attribute: \\\n-                                       add an exclamation mark: #![foo]\",\n-                    ast::AttrInner => \"crate-level attribute should be in the root module\",\n-                };\n-                cx.span_lint(AttributeUsage, attr.span, msg);\n-                return;\n-            }\n-        }\n-\n-        for &(obs_attr, obs_alter) in obsolete_attrs.iter() {\n-            if name.equiv(&obs_attr) {\n-                cx.span_lint(AttributeUsage, attr.span,\n-                             format!(\"obsolete attribute: {:s}\",\n-                                     obs_alter).as_slice());\n-                return;\n-            }\n-        }\n-\n-        if !other_attrs.iter().any(|other_attr| { name.equiv(other_attr) }) {\n-            cx.span_lint(AttributeUsage, attr.span, \"unknown attribute\");\n-        }\n-    }\n-}\n-\n-fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n+fn check_unused_attribute(cx: &Context, attr: &ast::Attribute) {\n     static ATTRIBUTE_WHITELIST: &'static [&'static str] = &'static [\n         // FIXME: #14408 whitelist docs since rustdoc looks at them\n         \"doc\",\n@@ -1218,15 +1123,37 @@ fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n         \"stable\",\n         \"unstable\",\n     ];\n-    for attr in attrs.iter() {\n-        for &name in ATTRIBUTE_WHITELIST.iter() {\n-            if attr.check_name(name) {\n-                break;\n-            }\n+\n+    static CRATE_ATTRS: &'static [&'static str] = &'static [\n+        \"crate_type\",\n+        \"feature\",\n+        \"no_start\",\n+        \"no_main\",\n+        \"no_std\",\n+        \"crate_id\",\n+        \"desc\",\n+        \"comment\",\n+        \"license\",\n+        \"copyright\",\n+        \"no_builtins\",\n+    ];\n+\n+    for &name in ATTRIBUTE_WHITELIST.iter() {\n+        if attr.check_name(name) {\n+            break;\n         }\n+    }\n \n-        if !attr::is_used(attr) {\n-            cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");\n+    if !attr::is_used(attr) {\n+        cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");\n+        if CRATE_ATTRS.contains(&attr.name().get()) {\n+            let msg = match attr.node.style {\n+                ast::AttrOuter => \"crate-level attribute should be an inner \\\n+                                  attribute: add an exclamation mark: #![foo]\",\n+                ast::AttrInner => \"crate-level attribute should be in the \\\n+                                   root module\",\n+            };\n+            cx.span_lint(UnusedAttribute, attr.span, msg);\n         }\n     }\n }\n@@ -1835,8 +1762,6 @@ impl<'a> Visitor<()> for Context<'a> {\n             check_item_non_uppercase_statics(cx, it);\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n-            check_attrs_usage(cx, it.attrs.as_slice());\n-            check_unused_attribute(cx, it.attrs.as_slice());\n             check_raw_ptr_deriving(cx, it);\n \n             cx.visit_ids(|v| v.visit_item(it, ()));\n@@ -1847,15 +1772,12 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_foreign_item(&mut self, it: &ast::ForeignItem, _: ()) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {\n-            check_attrs_usage(cx, it.attrs.as_slice());\n             visit::walk_foreign_item(cx, it, ());\n         })\n     }\n \n     fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) {\n         self.with_lint_attrs(i.attrs.as_slice(), |cx| {\n-            check_attrs_usage(cx, i.attrs.as_slice());\n-\n             cx.visit_ids(|v| v.visit_view_item(i, ()));\n \n             visit::walk_view_item(cx, i, ());\n@@ -1937,7 +1859,6 @@ impl<'a> Visitor<()> for Context<'a> {\n             visit::FkMethod(ident, _, m) => {\n                 self.with_lint_attrs(m.attrs.as_slice(), |cx| {\n                     check_missing_doc_method(cx, m);\n-                    check_attrs_usage(cx, m.attrs.as_slice());\n \n                     match method_context(cx, m) {\n                         PlainImpl => check_snake_case(cx, \"method\", ident, span),\n@@ -1962,7 +1883,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) {\n         self.with_lint_attrs(t.attrs.as_slice(), |cx| {\n             check_missing_doc_ty_method(cx, t);\n-            check_attrs_usage(cx, t.attrs.as_slice());\n             check_snake_case(cx, \"trait method\", t.ident, t.span);\n \n             visit::walk_ty_method(cx, t, ());\n@@ -1986,7 +1906,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_struct_field(&mut self, s: &ast::StructField, _: ()) {\n         self.with_lint_attrs(s.node.attrs.as_slice(), |cx| {\n             check_missing_doc_struct_field(cx, s);\n-            check_attrs_usage(cx, s.node.attrs.as_slice());\n \n             visit::walk_struct_field(cx, s, ());\n         })\n@@ -1995,14 +1914,17 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, _: ()) {\n         self.with_lint_attrs(v.node.attrs.as_slice(), |cx| {\n             check_missing_doc_variant(cx, v);\n-            check_attrs_usage(cx, v.node.attrs.as_slice());\n \n             visit::walk_variant(cx, v, g, ());\n         })\n     }\n \n     // FIXME(#10894) should continue recursing\n     fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}\n+\n+    fn visit_attribute(&mut self, attr: &ast::Attribute, _: ()) {\n+        check_unused_attribute(self, attr);\n+    }\n }\n \n impl<'a> IdVisitingOperation for Context<'a> {\n@@ -2051,10 +1973,8 @@ pub fn check_crate(tcx: &ty::ctxt,\n             visit::walk_crate(v, krate, ());\n         });\n \n-        check_crate_attrs_usage(cx, krate.attrs.as_slice());\n         // since the root module isn't visited as an item (because it isn't an item), warn for it\n         // here.\n-        check_unused_attribute(cx, krate.attrs.as_slice());\n         check_missing_doc_attrs(cx,\n                                 None,\n                                 krate.attrs.as_slice(),"}, {"sha": "650cd749af69e1e8d949f0bc2139887f3d3036f1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -429,17 +429,11 @@ impl attr::AttrMetaMethods for Attribute {\n         }\n     }\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [@ast::MetaItem]> { None }\n-    fn name_str_pair(&self) -> Option<(InternedString, InternedString)> {\n-        None\n-    }\n }\n impl<'a> attr::AttrMetaMethods for &'a Attribute {\n     fn name(&self) -> InternedString { (**self).name() }\n     fn value_str(&self) -> Option<InternedString> { (**self).value_str() }\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [@ast::MetaItem]> { None }\n-    fn name_str_pair(&self) -> Option<(InternedString, InternedString)> {\n-        None\n-    }\n }\n \n #[deriving(Clone, Encodable, Decodable)]"}, {"sha": "745e29508d218a3554996d5078513db04f45a51d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -205,7 +205,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool) -> String {\n     if lints {\n         prog.push_str(r\"\n #![deny(warnings)]\n-#![allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)]\n+#![allow(unused_variable, dead_assignment, unused_mut, unused_attribute, dead_code)]\n \");\n     }\n "}, {"sha": "6005513af110df18e5a1f495552207176854cea8", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -53,12 +53,6 @@ pub trait AttrMetaMethods {\n     fn value_str(&self) -> Option<InternedString>;\n     /// Gets a list of inner meta items from a list MetaItem type.\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [@MetaItem]>;\n-\n-    /**\n-     * If the meta item is a name-value type with a string value then returns\n-     * a tuple containing the name and string value, otherwise `None`\n-     */\n-    fn name_str_pair(&self) -> Option<(InternedString,InternedString)>;\n }\n \n impl AttrMetaMethods for Attribute {\n@@ -76,9 +70,6 @@ impl AttrMetaMethods for Attribute {\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [@MetaItem]> {\n         self.node.value.meta_item_list()\n     }\n-    fn name_str_pair(&self) -> Option<(InternedString,InternedString)> {\n-        self.meta().name_str_pair()\n-    }\n }\n \n impl AttrMetaMethods for MetaItem {\n@@ -108,10 +99,6 @@ impl AttrMetaMethods for MetaItem {\n             _ => None\n         }\n     }\n-\n-    fn name_str_pair(&self) -> Option<(InternedString,InternedString)> {\n-        self.value_str().map(|s| (self.name(), s))\n-    }\n }\n \n // Annoying, but required to get test_cfg to work\n@@ -121,9 +108,6 @@ impl AttrMetaMethods for @MetaItem {\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [@MetaItem]> {\n         (**self).meta_item_list()\n     }\n-    fn name_str_pair(&self) -> Option<(InternedString,InternedString)> {\n-        (**self).name_str_pair()\n-    }\n }\n \n "}, {"sha": "906f0c16f396478e0b904bc496962bf048a1c03d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -128,6 +128,7 @@ pub trait Visitor<E: Clone> {\n     fn visit_path(&mut self, path: &Path, _id: ast::NodeId, e: E) {\n         walk_path(self, path, e)\n     }\n+    fn visit_attribute(&mut self, _attr: &Attribute, _e: E) {}\n }\n \n pub fn walk_inlined_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -142,7 +143,10 @@ pub fn walk_inlined_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n \n \n pub fn walk_crate<E: Clone, V: Visitor<E>>(visitor: &mut V, krate: &Crate, env: E) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID, env)\n+    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID, env.clone());\n+    for attr in krate.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_mod<E: Clone, V: Visitor<E>>(visitor: &mut V, module: &Mod, env: E) {\n@@ -158,7 +162,7 @@ pub fn walk_mod<E: Clone, V: Visitor<E>>(visitor: &mut V, module: &Mod, env: E)\n pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, env: E) {\n     match vi.node {\n         ViewItemExternCrate(name, _, _) => {\n-            visitor.visit_ident(vi.span, name, env)\n+            visitor.visit_ident(vi.span, name, env.clone())\n         }\n         ViewItemUse(ref vp) => {\n             match vp.node {\n@@ -178,6 +182,9 @@ pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, e\n             }\n         }\n     }\n+    for attr in vi.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_local<E: Clone, V: Visitor<E>>(visitor: &mut V, local: &Local, env: E) {\n@@ -213,18 +220,18 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n     match item.node {\n         ItemStatic(typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n-            visitor.visit_expr(expr, env);\n+            visitor.visit_expr(expr, env.clone());\n         }\n         ItemFn(declaration, fn_style, abi, ref generics, body) => {\n             visitor.visit_fn(&FkItemFn(item.ident, generics, fn_style, abi),\n                              declaration,\n                              body,\n                              item.span,\n                              item.id,\n-                             env)\n+                             env.clone())\n         }\n         ItemMod(ref module) => {\n-            visitor.visit_mod(module, item.span, item.id, env)\n+            visitor.visit_mod(module, item.span, item.id, env.clone())\n         }\n         ItemForeignMod(ref foreign_module) => {\n             for view_item in foreign_module.view_items.iter() {\n@@ -236,11 +243,11 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n         }\n         ItemTy(typ, ref type_parameters) => {\n             visitor.visit_ty(typ, env.clone());\n-            visitor.visit_generics(type_parameters, env)\n+            visitor.visit_generics(type_parameters, env.clone())\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters, env.clone());\n-            walk_enum_def(visitor, enum_definition, type_parameters, env)\n+            walk_enum_def(visitor, enum_definition, type_parameters, env.clone())\n         }\n         ItemImpl(ref type_parameters,\n                  ref trait_reference,\n@@ -263,7 +270,7 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n                                      item.ident,\n                                      generics,\n                                      item.id,\n-                                     env)\n+                                     env.clone())\n         }\n         ItemTrait(ref generics, _, ref trait_paths, ref methods) => {\n             visitor.visit_generics(generics, env.clone());\n@@ -276,7 +283,10 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n                 visitor.visit_trait_method(method, env.clone())\n             }\n         }\n-        ItemMac(ref macro) => visitor.visit_mac(macro, env),\n+        ItemMac(ref macro) => visitor.visit_mac(macro, env.clone()),\n+    }\n+    for attr in item.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n     }\n }\n \n@@ -310,9 +320,12 @@ pub fn walk_variant<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         }\n     }\n     match variant.node.disr_expr {\n-        Some(expr) => visitor.visit_expr(expr, env),\n+        Some(expr) => visitor.visit_expr(expr, env.clone()),\n         None => ()\n     }\n+    for attr in variant.node.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn skip_ty<E, V: Visitor<E>>(_: &mut V, _: &Ty, _: E) {\n@@ -469,9 +482,13 @@ pub fn walk_foreign_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n     match foreign_item.node {\n         ForeignItemFn(function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration, env.clone());\n-            visitor.visit_generics(generics, env)\n+            visitor.visit_generics(generics, env.clone())\n         }\n-        ForeignItemStatic(typ, _) => visitor.visit_ty(typ, env),\n+        ForeignItemStatic(typ, _) => visitor.visit_ty(typ, env.clone()),\n+    }\n+\n+    for attr in foreign_item.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n     }\n }\n \n@@ -525,7 +542,10 @@ pub fn walk_method_helper<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                      method.body,\n                      method.span,\n                      method.id,\n-                     env)\n+                     env.clone());\n+    for attr in method.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_fn<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -560,7 +580,10 @@ pub fn walk_ty_method<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         visitor.visit_ty(argument_type.ty, env.clone())\n     }\n     visitor.visit_generics(&method_type.generics, env.clone());\n-    visitor.visit_ty(method_type.decl.output, env);\n+    visitor.visit_ty(method_type.decl.output, env.clone());\n+    for attr in method_type.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_trait_method<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -596,7 +619,11 @@ pub fn walk_struct_field<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         _ => {}\n     }\n \n-    visitor.visit_ty(struct_field.node.ty, env)\n+    visitor.visit_ty(struct_field.node.ty, env.clone());\n+\n+    for attr in struct_field.node.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_block<E: Clone, V: Visitor<E>>(visitor: &mut V, block: &Block, env: E) {\n@@ -784,5 +811,8 @@ pub fn walk_arm<E: Clone, V: Visitor<E>>(visitor: &mut V, arm: &Arm, env: E) {\n         visitor.visit_pat(*pattern, env.clone())\n     }\n     walk_expr_opt(visitor, arm.guard, env.clone());\n-    visitor.visit_expr(arm.body, env)\n+    visitor.visit_expr(arm.body, env.clone());\n+    for attr in arm.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }"}, {"sha": "dea712e976b35b8c5bfc48f093a141a63bc08823", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -11,13 +11,12 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n \n mod a {\n-    #![crate_type = \"bin\"] //~ ERROR: crate-level attribute\n-                           //~^ ERROR: unused attribute\n+    #![crate_type = \"bin\"] //~ ERROR unused attribute\n+                           //~^ ERROR should be in the root module\n }\n \n-#[crate_type = \"bin\"] fn main() {} //~ ERROR: crate-level attribute\n-                                   //~^ ERROR: unused attribute\n+#[crate_type = \"bin\"] fn main() {} //~ ERROR unused attribute\n+                                   //~^ ERROR should be an inner"}, {"sha": "6b46a0c19bdddbddd766df080c5249156d9cc6d0", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -11,14 +11,11 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n #![allow(dead_code)]\n \n-#[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n-                           //~^ ERROR: unused attribute\n+#[abi=\"stdcall\"] extern {} //~ ERROR unused attribute\n \n-#[fixed_stack_segment] fn f() {} //~ ERROR: obsolete attribute\n-                                 //~^ ERROR: unused attribute\n+#[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n \n fn main() {}"}, {"sha": "020ed80c0fbbadc00274f9c9025abab650bbcdb2", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -11,14 +11,10 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(attribute_usage)]\n #![deny(unused_attribute)]\n \n-#![mutable_doc] //~ ERROR: unknown crate attribute\n-                //~^ ERROR: unused attribute\n+#![mutable_doc] //~ ERROR unused attribute\n \n-#[dance] mod a {} //~ ERROR: unknown attribute\n-                //~^ ERROR: unused attribute\n+#[dance] mod a {} //~ ERROR unused attribute\n \n-#[dance] fn main() {} //~ ERROR: unknown attribute\n-                //~^ ERROR: unused attribute\n+#[dance] fn main() {} //~ ERROR unused attribute"}, {"sha": "3e1e08c7b58dd5c084e6f3facabca4f692d1bb76", "filename": "src/test/compile-fail/unused-attr.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9239bb4960b78f354883edd588127653765514b2/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=9239bb4960b78f354883edd588127653765514b2", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(unused_attribute)]\n+#![allow(dead_code, unused_imports)]\n+\n+#![foo] //~ ERROR unused attribute\n+\n+#[foo] //~ ERROR unused attribute\n+extern crate std;\n+\n+#[foo] //~ ERROR unused attribute\n+use std::collections;\n+\n+#[foo] //~ ERROR unused attribute\n+extern \"C\" {\n+    #[foo] //~ ERROR unused attribute\n+    fn foo();\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+mod foo {\n+    #[foo] //~ ERROR unused attribute\n+    pub enum Foo {\n+        #[foo] //~ ERROR unused attribute\n+        Bar,\n+    }\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+fn bar(f: foo::Foo) {\n+    match f {\n+        #[foo] //~ ERROR unused attribute\n+        foo::Bar => {}\n+    }\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+struct Foo {\n+    #[foo] //~ ERROR unused attribute\n+    a: int\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+trait Baz {\n+    #[foo] //~ ERROR unused attribute\n+    fn blah();\n+    #[foo] //~ ERROR unused attribute\n+    fn blah2() {}\n+}\n+\n+fn main() {}"}]}