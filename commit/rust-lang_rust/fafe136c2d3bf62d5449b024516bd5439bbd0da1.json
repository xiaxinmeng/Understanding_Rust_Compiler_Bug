{"sha": "fafe136c2d3bf62d5449b024516bd5439bbd0da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZmUxMzZjMmQzYmY2MmQ1NDQ5YjAyNDUxNmJkNTQzOWJiZDBkYTE=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-10-13T14:12:38Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-10-13T14:16:16Z"}, "message": "Emit lifetime end markers for function arguments\n\nFunction arguments are (hopefully!) the last places where allocas don't\nget proper markers for the end of their lifetimes. This means that this\ncode using 64 bytes of stack for the function arguments:\n\n````rust\nstd::io::println(\"1\");\nstd::io::println(\"2\");\nstd::io::println(\"3\");\nstd::io::println(\"4\");\n````\n\nBut with the proper lifetime markers, the slots can be reused, and\nthe arguments only need 16 bytes of stack.", "tree": {"sha": "11ec9e174335a46b7daf030becd1a4116943ecca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ec9e174335a46b7daf030becd1a4116943ecca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafe136c2d3bf62d5449b024516bd5439bbd0da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafe136c2d3bf62d5449b024516bd5439bbd0da1", "html_url": "https://github.com/rust-lang/rust/commit/fafe136c2d3bf62d5449b024516bd5439bbd0da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafe136c2d3bf62d5449b024516bd5439bbd0da1/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d8b8ddc547d51f2aadef3d9e489e998f578970", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d8b8ddc547d51f2aadef3d9e489e998f578970", "html_url": "https://github.com/rust-lang/rust/commit/70d8b8ddc547d51f2aadef3d9e489e998f578970"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "1b23841c913ce625b83c9495943e44a6131a3b79", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fafe136c2d3bf62d5449b024516bd5439bbd0da1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafe136c2d3bf62d5449b024516bd5439bbd0da1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=fafe136c2d3bf62d5449b024516bd5439bbd0da1", "patch": "@@ -788,7 +788,7 @@ pub fn trans_call_inner<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                          llself.is_some(),\n                          abi);\n \n-        fcx.pop_custom_cleanup_scope(arg_cleanup_scope);\n+        fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n \n         // Invoke the actual rust fn and update bcx/llresult.\n         let (llret, b) = base::invoke(bcx,\n@@ -829,12 +829,15 @@ pub fn trans_call_inner<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                          cleanup::CustomScope(arg_cleanup_scope),\n                          false,\n                          abi);\n-        fcx.pop_custom_cleanup_scope(arg_cleanup_scope);\n+        fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n+\n         bcx = foreign::trans_native_call(bcx, callee_ty,\n                                          llfn, opt_llretslot.unwrap(),\n                                          llargs.as_slice(), arg_tys);\n     }\n \n+    fcx.pop_and_trans_custom_cleanup_scope(bcx, arg_cleanup_scope);\n+\n     // If the caller doesn't care about the result of this fn call,\n     // drop the temporary slot we made.\n     match (dest, opt_llretslot) {"}, {"sha": "f3844a956faddece67bfd56cc71390bdc38681b8", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fafe136c2d3bf62d5449b024516bd5439bbd0da1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafe136c2d3bf62d5449b024516bd5439bbd0da1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=fafe136c2d3bf62d5449b024516bd5439bbd0da1", "patch": "@@ -74,6 +74,7 @@ pub struct CachedEarlyExit {\n pub trait Cleanup {\n     fn must_unwind(&self) -> bool;\n     fn clean_on_unwind(&self) -> bool;\n+    fn is_lifetime_end(&self) -> bool;\n     fn trans<'blk, 'tcx>(&self,\n                          bcx: Block<'blk, 'tcx>,\n                          debug_loc: Option<NodeInfo>)\n@@ -875,6 +876,10 @@ impl<'blk, 'tcx> CleanupScope<'blk, 'tcx> {\n             LoopScopeKind(id, _) => format!(\"{}_loop_{}_\", prefix, id),\n         }\n     }\n+\n+    pub fn drop_non_lifetime_clean(&mut self) {\n+        self.cleanups.retain(|c| c.is_lifetime_end());\n+    }\n }\n \n impl<'blk, 'tcx> CleanupScopeKind<'blk, 'tcx> {\n@@ -943,6 +948,10 @@ impl Cleanup for DropValue {\n         self.must_unwind\n     }\n \n+    fn is_lifetime_end(&self) -> bool {\n+        false\n+    }\n+\n     fn trans<'blk, 'tcx>(&self,\n                          bcx: Block<'blk, 'tcx>,\n                          debug_loc: Option<NodeInfo>)\n@@ -978,6 +987,10 @@ impl Cleanup for FreeValue {\n         true\n     }\n \n+    fn is_lifetime_end(&self) -> bool {\n+        false\n+    }\n+\n     fn trans<'blk, 'tcx>(&self,\n                          bcx: Block<'blk, 'tcx>,\n                          debug_loc: Option<NodeInfo>)\n@@ -1008,6 +1021,10 @@ impl Cleanup for FreeSlice {\n         true\n     }\n \n+    fn is_lifetime_end(&self) -> bool {\n+        false\n+    }\n+\n     fn trans<'blk, 'tcx>(&self,\n                          bcx: Block<'blk, 'tcx>,\n                          debug_loc: Option<NodeInfo>)\n@@ -1035,6 +1052,10 @@ impl Cleanup for LifetimeEnd {\n         true\n     }\n \n+    fn is_lifetime_end(&self) -> bool {\n+        true\n+    }\n+\n     fn trans<'blk, 'tcx>(&self,\n                          bcx: Block<'blk, 'tcx>,\n                          debug_loc: Option<NodeInfo>)"}]}