{"sha": "b12de9881418ff9fff8318d0142fa101efd9dc08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmRlOTg4MTQxOGZmOWZmZjgzMThkMDE0MmZhMTAxZWZkOWRjMDg=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-07T13:32:13Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-07T13:44:40Z"}, "message": "rustc: Add support of generating LLVM assembly\n\nrustc generates output files in LLVM bitcode format if \"--emit-llvm\"\noption is given. When used with the \"-S\" option, rustc generates LLVM\nintermediate language assembly files.\n\nFixes Issue #476", "tree": {"sha": "af2d2630f6c8f6d86559548599a74bdde1262253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2d2630f6c8f6d86559548599a74bdde1262253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12de9881418ff9fff8318d0142fa101efd9dc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12de9881418ff9fff8318d0142fa101efd9dc08", "html_url": "https://github.com/rust-lang/rust/commit/b12de9881418ff9fff8318d0142fa101efd9dc08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12de9881418ff9fff8318d0142fa101efd9dc08/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3468d03a23bda76af8e65956719487cb460f16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3468d03a23bda76af8e65956719487cb460f16a", "html_url": "https://github.com/rust-lang/rust/commit/f3468d03a23bda76af8e65956719487cb460f16a"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "05cd3ba6d36ef218f150da7699ad71ee44f6ebd5", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=b12de9881418ff9fff8318d0142fa101efd9dc08", "patch": "@@ -30,6 +30,7 @@ tag output_type {\n     output_type_none;\n     output_type_bitcode;\n     output_type_assembly;\n+    output_type_llvm_assembly;\n     output_type_object;\n     output_type_exe;\n }\n@@ -254,12 +255,19 @@ mod write {\n             if opts.time_llvm_passes { llvm::LLVMRustPrintPassTimings(); }\n             ret;\n         }\n-        // If only a bitcode file is asked for by using the '--emit-llvm'\n-        // flag, then output it here\n \n-        llvm::LLVMRunPassManager(pm.llpm, llmod);\n-        str::as_buf(output,\n-                    {|buf| llvm::LLVMWriteBitcodeToFile(llmod, buf) });\n+        if opts.output_type == output_type_llvm_assembly {\n+            // Given options \"-S --emit-llvm\": output LLVM assembly\n+            str::as_buf(output, {|buf_o|\n+                llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o)});\n+        } else {\n+            // If only a bitcode file is asked for by using the '--emit-llvm'\n+            // flag, then output it here\n+            llvm::LLVMRunPassManager(pm.llpm, llmod);\n+            str::as_buf(output,\n+                        {|buf| llvm::LLVMWriteBitcodeToFile(llmod, buf) });\n+        }\n+\n         llvm::LLVMDisposeModule(llmod);\n         if opts.time_llvm_passes { llvm::LLVMRustPrintPassTimings(); }\n     }"}, {"sha": "3787baffc8253062354cf5544ddc7b23bf77c6cd", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b12de9881418ff9fff8318d0142fa101efd9dc08", "patch": "@@ -344,6 +344,8 @@ fn build_session_options(match: getopts::match)\n     let output_type =\n         if parse_only || no_trans {\n             link::output_type_none\n+        } else if opt_present(match, \"S\") && opt_present(match, \"emit-llvm\") {\n+            link::output_type_llvm_assembly\n         } else if opt_present(match, \"S\") {\n             link::output_type_assembly\n         } else if opt_present(match, \"c\") {\n@@ -475,6 +477,7 @@ fn build_output_filenames(ifile: str, ofile: option::t<str>,\n               link::output_type_none. { \"none\" }\n               link::output_type_bitcode. { \"bc\" }\n               link::output_type_assembly. { \"s\" }\n+              link::output_type_llvm_assembly. { \"s\" }\n               // Object and exe output both use the '.o' extension here\n               link::output_type_object. | link::output_type_exe. {\n                 \"o\""}, {"sha": "ed38682ff7af7359a60a4457763051aa331661d6", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=b12de9881418ff9fff8318d0142fa101efd9dc08", "patch": "@@ -866,6 +866,9 @@ native \"c-stack-cdecl\" mod llvm = \"rustllvm\" {\n     fn LLVMRustConstSmallInt(IntTy: TypeRef, N: uint, SignExtend: Bool) ->\n        ValueRef;\n \n+    fn LLVMRustAddPrintModulePass(PM: PassManagerRef, M: ModuleRef,\n+                                  Output: sbuf);\n+\n     /** Turn on LLVM pass-timing. */\n     fn LLVMRustEnableTimePasses();\n     /** Turn on LLVM segmented stacks. */"}, {"sha": "26d0764934e05d1964cb6855cf8c5b1a3e0bb7f7", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b12de9881418ff9fff8318d0142fa101efd9dc08", "patch": "@@ -15,6 +15,7 @@\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/ADT/Triple.h\"\n+#include \"llvm/Assembly/PrintModulePass.h\"\n #include \"llvm/Support/FormattedStream.h\"\n #include \"llvm/Support/Timer.h\"\n #include \"llvm/Support/raw_ostream.h\"\n@@ -46,6 +47,17 @@ extern \"C\" const char *LLVMRustGetLastError(void) {\n \n extern \"C\" void LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef PM);\n \n+extern \"C\" void LLVMRustAddPrintModulePass(LLVMPassManagerRef PMR,\n+                                           LLVMModuleRef M,\n+                                           const char* path) {\n+  PassManager *PM = unwrap<PassManager>(PMR);\n+  std::string ErrorInfo;\n+  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+  formatted_raw_ostream FOS(OS);\n+  PM->add(createPrintModulePass(&FOS));\n+  PM->run(*unwrap(M));\n+}\n+\n extern \"C\" bool LLVMLinkModules(LLVMModuleRef Dest, LLVMModuleRef Src) {\n   static std::string err;\n "}, {"sha": "b418ba168c8814ef0495db2b079e860e5cb574be", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b12de9881418ff9fff8318d0142fa101efd9dc08/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=b12de9881418ff9fff8318d0142fa101efd9dc08", "patch": "@@ -24,6 +24,7 @@ LLVMAddAlias\n LLVMAddArgumentPromotionPass\n LLVMAddAttribute\n LLVMAddBasicAliasAnalysisPass\n+LLVMRustAddPrintModulePass\n LLVMAddCFGSimplificationPass\n LLVMAddCase\n LLVMAddClause"}]}