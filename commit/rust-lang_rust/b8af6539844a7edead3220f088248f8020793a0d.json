{"sha": "b8af6539844a7edead3220f088248f8020793a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YWY2NTM5ODQ0YTdlZGVhZDMyMjBmMDg4MjQ4ZjgwMjA3OTNhMGQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-02T06:41:59Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T04:56:54Z"}, "message": "path2: Update asserts for new format!() style", "tree": {"sha": "4119a24f36b683ec8ebe968da4e2998ab678ed7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4119a24f36b683ec8ebe968da4e2998ab678ed7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8af6539844a7edead3220f088248f8020793a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8af6539844a7edead3220f088248f8020793a0d", "html_url": "https://github.com/rust-lang/rust/commit/b8af6539844a7edead3220f088248f8020793a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8af6539844a7edead3220f088248f8020793a0d/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d3d00ec437f87ac665b4e4da3bedec8ce4f9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d3d00ec437f87ac665b4e4da3bedec8ce4f9ef", "html_url": "https://github.com/rust-lang/rust/commit/73d3d00ec437f87ac665b4e4da3bedec8ce4f9ef"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "de8e4365f4a8ad1e8042a2237443c8170994b2e5", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b8af6539844a7edead3220f088248f8020793a0d", "patch": "@@ -1089,6 +1089,6 @@ mod tests {\n \n         let input = \"\\\\foo\\\\bar\\\\baz\";\n         let path: WindowsPath = GenericPath::from_c_str(input.to_c_str());\n-        assert_eq!(path.as_str().unwrap(), input);\n+        assert_eq!(path.as_str().unwrap(), input.as_slice());\n     }\n }"}, {"sha": "fb0069bbe01e184424b2f7cd6b919996177d52e9", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b8af6539844a7edead3220f088248f8020793a0d", "patch": "@@ -1311,19 +1311,19 @@ mod tests {\n                     let path = $path;\n                     let filename = $filename;\n                     assert!(path.filename_str() == filename,\n-                            \"`%s`.filename_str(): Expected `%?`, found `%?`\",\n+                            \"{}.filename_str(): Expected `{:?}`, found {:?}\",\n                             path.as_str().unwrap(), filename, path.filename_str());\n                     let dirname = $dirname;\n                     assert!(path.dirname_str() == dirname,\n-                            \"`%s`.dirname_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.dirname_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), dirname, path.dirname_str());\n                     let filestem = $filestem;\n                     assert!(path.filestem_str() == filestem,\n-                            \"`%s`.filestem_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.filestem_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), filestem, path.filestem_str());\n                     let ext = $ext;\n                     assert!(path.extension_str() == ext,\n-                            \"`%s`.extension_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.extension_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), ext, path.extension_str());\n                 }\n             );\n@@ -1547,11 +1547,11 @@ mod tests {\n                     let comps = path.component_iter().to_owned_vec();\n                     let exp: &[&str] = $exp;\n                     let exps = exp.iter().map(|x| x.as_bytes()).to_owned_vec();\n-                    assert!(comps == exps, \"component_iter: Expected %?, found %?\",\n+                    assert!(comps == exps, \"component_iter: Expected {:?}, found {:?}\",\n                             comps, exps);\n                     let comps = path.rev_component_iter().to_owned_vec();\n                     let exps = exps.move_rev_iter().to_owned_vec();\n-                    assert!(comps == exps, \"rev_component_iter: Expected %?, found %?\",\n+                    assert!(comps == exps, \"rev_component_iter: Expected {:?}, found {:?}\",\n                             comps, exps);\n                 }\n             );\n@@ -1560,11 +1560,12 @@ mod tests {\n                     let path = Path::from_vec(b!($($arg),+));\n                     let comps = path.component_iter().to_owned_vec();\n                     let exp: &[&[u8]] = [$(b!($($exp),*)),*];\n-                    assert!(comps.as_slice() == exp, \"component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp, \"component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                     let comps = path.rev_component_iter().to_owned_vec();\n                     let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n-                    assert!(comps.as_slice() == exp, \"rev_component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp,\n+                            \"rev_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                 }\n             )\n@@ -1594,12 +1595,13 @@ mod tests {\n                     let path = Path::from_vec(b!($($arg),+));\n                     let comps = path.str_component_iter().to_owned_vec();\n                     let exp: &[Option<&str>] = $exp;\n-                    assert!(comps.as_slice() == exp, \"str_component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp,\n+                            \"str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                     let comps = path.rev_str_component_iter().to_owned_vec();\n                     let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n                     assert!(comps.as_slice() == exp,\n-                            \"rev_str_component_iter: Expected %?, found %?\",\n+                            \"rev_str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                 }\n             )"}, {"sha": "6dd7954de80d1077b13a5d995c0febeb8e4f9676", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8af6539844a7edead3220f088248f8020793a0d/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b8af6539844a7edead3220f088248f8020793a0d", "patch": "@@ -1263,7 +1263,7 @@ mod tests {\n                     let exp = $exp;\n                     let res = parse_prefix(path);\n                     assert!(res == exp,\n-                            \"parse_prefix(\\\"%s\\\"): expected %?, found %?\", path, exp, res);\n+                            \"parse_prefix(\\\"{}\\\"): expected {:?}, found {:?}\", path, exp, res);\n                 }\n             )\n         )\n@@ -1809,11 +1809,11 @@ mod tests {\n                     let file = p.pop_str();\n                     let left = $left;\n                     assert!(p.as_str() == Some(left),\n-                        \"`%s`.pop() failed; expected remainder `%s`, found `%s`\",\n+                        \"`{}`.pop() failed; expected remainder `{}`, found `{}`\",\n                         pstr, left, p.as_str().unwrap());\n                     let right = $right;\n                     let res = file.map(|s| s.as_slice());\n-                    assert!(res == right, \"`%s`.pop() failed; expected `%?`, found `%?`\",\n+                    assert!(res == right, \"`{}`.pop() failed; expected `{:?}`, found `{:?}`\",\n                             pstr, right, res);\n                 }\n             );\n@@ -1965,7 +1965,7 @@ mod tests {\n                     let res = path.$op(arg);\n                     let exp = $res;\n                     assert!(res.as_str() == Some(exp),\n-                            \"`%s`.%s(\\\"%s\\\"): Expected `%s`, found `%s`\",\n+                            \"`{}`.{}(\\\"{}\\\"): Expected `{}`, found `{}`\",\n                             pstr, stringify!($op), arg, exp, res.as_str().unwrap());\n                 }\n             )\n@@ -2201,19 +2201,19 @@ mod tests {\n                     let path = $path;\n                     let filename = $filename;\n                     assert!(path.filename_str() == filename,\n-                            \"`%s`.filename_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.filename_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), filename, path.filename_str());\n                     let dirname = $dirname;\n                     assert!(path.dirname_str() == dirname,\n-                            \"`%s`.dirname_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.dirname_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), dirname, path.dirname_str());\n                     let filestem = $filestem;\n                     assert!(path.filestem_str() == filestem,\n-                            \"`%s`.filestem_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.filestem_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), filestem, path.filestem_str());\n                     let ext = $ext;\n                     assert!(path.extension_str() == ext,\n-                            \"`%s`.extension_str(): Expected `%?`, found `%?`\",\n+                            \"`{}`.extension_str(): Expected `{:?}`, found `{:?}`\",\n                             path.as_str().unwrap(), ext, path.extension_str());\n                 }\n             );\n@@ -2284,16 +2284,16 @@ mod tests {\n                     let path = Path::from_str($path);\n                     let (abs, vol, cwd, rel) = ($abs, $vol, $cwd, $rel);\n                     let b = path.is_absolute();\n-                    assert!(b == abs, \"Path '%s'.is_absolute(): expected %?, found %?\",\n+                    assert!(b == abs, \"Path '{}'.is_absolute(): expected {:?}, found {:?}\",\n                             path.as_str().unwrap(), abs, b);\n                     let b = path.is_vol_relative();\n-                    assert!(b == vol, \"Path '%s'.is_vol_relative(): expected %?, found %?\",\n+                    assert!(b == vol, \"Path '{}'.is_vol_relative(): expected {:?}, found {:?}\",\n                             path.as_str().unwrap(), vol, b);\n                     let b = path.is_cwd_relative();\n-                    assert!(b == cwd, \"Path '%s'.is_cwd_relative(): expected %?, found %?\",\n+                    assert!(b == cwd, \"Path '{}'.is_cwd_relative(): expected {:?}, found {:?}\",\n                             path.as_str().unwrap(), cwd, b);\n                     let b = path.is_relative();\n-                    assert!(b == rel, \"Path '%s'.is_relativf(): expected %?, found %?\",\n+                    assert!(b == rel, \"Path '{}'.is_relativf(): expected {:?}, found {:?}\",\n                             path.as_str().unwrap(), rel, b);\n                 }\n             )\n@@ -2326,7 +2326,7 @@ mod tests {\n                     let exp = $exp;\n                     let res = path.is_ancestor_of(&dest);\n                     assert!(res == exp,\n-                            \"`%s`.is_ancestor_of(`%s`): Expected %?, found %?\",\n+                            \"`{}`.is_ancestor_of(`{}`): Expected {:?}, found {:?}\",\n                             path.as_str().unwrap(), dest.as_str().unwrap(), exp, res);\n                 }\n             )\n@@ -2461,7 +2461,7 @@ mod tests {\n                     let res = path.path_relative_from(&other);\n                     let exp = $exp;\n                     assert!(res.and_then_ref(|x| x.as_str()) == exp,\n-                            \"`%s`.path_relative_from(`%s`): Expected %?, got %?\",\n+                            \"`{}`.path_relative_from(`{}`): Expected {:?}, got {:?}\",\n                             path.as_str().unwrap(), other.as_str().unwrap(), exp,\n                             res.and_then_ref(|x| x.as_str()));\n                 }\n@@ -2593,12 +2593,13 @@ mod tests {\n                     let path = Path::from_str($path);\n                     let comps = path.str_component_iter().map(|x|x.unwrap()).to_owned_vec();\n                     let exp: &[&str] = $exp;\n-                    assert!(comps.as_slice() == exp, \"str_component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp,\n+                            \"str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                     let comps = path.rev_str_component_iter().map(|x|x.unwrap()).to_owned_vec();\n                     let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n                     assert!(comps.as_slice() == exp,\n-                            \"rev_str_component_iter: Expected %?, found %?\",\n+                            \"rev_str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                 }\n             );\n@@ -2607,12 +2608,13 @@ mod tests {\n                     let path = Path::from_vec(b!($($arg),+));\n                     let comps = path.str_component_iter().map(|x|x.unwrap()).to_owned_vec();\n                     let exp: &[&str] = $exp;\n-                    assert!(comps.as_slice() == exp, \"str_component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp,\n+                            \"str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                     let comps = path.rev_str_component_iter().map(|x|x.unwrap()).to_owned_vec();\n                     let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n                     assert!(comps.as_slice() == exp,\n-                            \"rev_str_component_iter: Expected %?, found %?\",\n+                            \"rev_str_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                 }\n             )\n@@ -2666,11 +2668,12 @@ mod tests {\n                     let path = Path::from_str($path);\n                     let comps = path.component_iter().to_owned_vec();\n                     let exp: &[&[u8]] = $exp;\n-                    assert!(comps.as_slice() == exp, \"component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp, \"component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                     let comps = path.rev_component_iter().to_owned_vec();\n                     let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n-                    assert!(comps.as_slice() == exp, \"rev_component_iter: Expected %?, found %?\",\n+                    assert!(comps.as_slice() == exp,\n+                            \"rev_component_iter: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n                 }\n             )"}]}