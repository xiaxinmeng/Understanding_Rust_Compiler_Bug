{"sha": "1d8619d49a2edd224541a6e243983ab7b4518b2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODYxOWQ0OWEyZWRkMjI0NTQxYTZlMjQzOTgzYWI3YjQ1MThiMmI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-21T00:58:13Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-21T00:58:13Z"}, "message": "Fix wrong indentation on type alias\n\nUse rewrite_assign_rhs() when rewriting type alias.", "tree": {"sha": "c16e140636ff58376b4a9b2810d837f0e9324101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16e140636ff58376b4a9b2810d837f0e9324101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8619d49a2edd224541a6e243983ab7b4518b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8619d49a2edd224541a6e243983ab7b4518b2b", "html_url": "https://github.com/rust-lang/rust/commit/1d8619d49a2edd224541a6e243983ab7b4518b2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8619d49a2edd224541a6e243983ab7b4518b2b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "html_url": "https://github.com/rust-lang/rust/commit/8998c1d5b580bbff99a6d63d0477daeecec4a1ac"}], "stats": {"total": 67, "additions": 24, "deletions": 43}, "files": [{"sha": "6a543f1400473b68f7ad92de1d20c7c4fbef89dd", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d8619d49a2edd224541a6e243983ab7b4518b2b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8619d49a2edd224541a6e243983ab7b4518b2b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1d8619d49a2edd224541a6e243983ab7b4518b2b", "patch": "@@ -2754,11 +2754,13 @@ pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     shape: Shape,\n ) -> Option<String> {\n     let lhs = lhs.into();\n-    let last_line_width = last_line_width(&lhs) - if lhs.contains('\\n') {\n-        shape.indent.width()\n-    } else {\n-        0\n-    };\n+    let last_line_width = last_line_width(&lhs)\n+        .checked_sub(if lhs.contains('\\n') {\n+            shape.indent.width()\n+        } else {\n+            0\n+        })\n+        .unwrap_or(0);\n     // 1 = space between operator and rhs.\n     let orig_shape = shape.offset_left(last_line_width + 1).unwrap_or(Shape {\n         width: 0,"}, {"sha": "66b9d81e163bda52ef8213e1dcd3fe6ffbb84c65", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1d8619d49a2edd224541a6e243983ab7b4518b2b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8619d49a2edd224541a6e243983ab7b4518b2b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1d8619d49a2edd224541a6e243983ab7b4518b2b", "patch": "@@ -1365,9 +1365,11 @@ pub fn rewrite_type_alias(\n     result.push_str(&ident.to_string());\n \n     // 2 = `= `\n-    let shape = Shape::indented(indent + result.len(), context.config).sub_width(2)?;\n+    let g_shape = Shape::indented(indent, context.config)\n+        .offset_left(result.len())?\n+        .sub_width(2)?;\n     let g_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo());\n-    let generics_str = rewrite_generics(context, generics, shape, g_span)?;\n+    let generics_str = rewrite_generics(context, generics, g_shape, g_span)?;\n     result.push_str(&generics_str);\n \n     let where_budget = context.budget(last_line_width(&result));\n@@ -1386,32 +1388,14 @@ pub fn rewrite_type_alias(\n     )?;\n     result.push_str(&where_clause_str);\n     if where_clause_str.is_empty() {\n-        result.push_str(\" = \");\n+        result.push_str(\" =\");\n     } else {\n-        result.push_str(&format!(\"\\n{}= \", indent.to_string(context.config)));\n-    }\n-\n-    let line_width = last_line_width(&result);\n-    // This checked_sub may fail as the extra space after '=' is not taken into account\n-    // In that case the budget is set to 0 which will make ty.rewrite retry on a new line\n-    let budget = context.budget(indent.width() + line_width + \";\".len());\n-    let type_indent = indent + line_width;\n-    // Try to fit the type on the same line\n-    let ty_str = ty.rewrite(context, Shape::legacy(budget, type_indent))\n-        .or_else(|| {\n-            // The line was too short, try to put the type on the next line\n-\n-            // Remove the space after '='\n-            result.pop();\n-            let type_indent = indent.block_indent(context.config);\n-            result.push('\\n');\n-            result.push_str(&type_indent.to_string(context.config));\n-            let budget = context.budget(type_indent.width() + \";\".len());\n-            ty.rewrite(context, Shape::legacy(budget, type_indent))\n-        })?;\n-    result.push_str(&ty_str);\n-    result.push_str(\";\");\n-    Some(result)\n+        result.push_str(&format!(\"\\n{}=\", indent.to_string(context.config)));\n+    }\n+\n+    // 1 = \";\"\n+    let ty_shape = Shape::indented(indent, context.config).sub_width(1)?;\n+    rewrite_assign_rhs(context, result, ty, ty_shape).map(|s| s + \";\")\n }\n \n fn type_annotation_spacing(config: &Config) -> (&str, &str) {"}, {"sha": "862f9ecbeec6178d1c2c0606ba426ebe7c4bce8d", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d8619d49a2edd224541a6e243983ab7b4518b2b/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8619d49a2edd224541a6e243983ab7b4518b2b/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=1d8619d49a2edd224541a6e243983ab7b4518b2b", "patch": "@@ -26,9 +26,8 @@ pub type LongGenericListTest<\n \n pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n \n-pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<\n-    Test,\n->;\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n+    Vec<Test>;\n \n pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n     Vec<i32>;\n@@ -71,11 +70,7 @@ where\n type RegisterPlugin = unsafe fn(pt: *const c_char, plugin: *mut c_void, data: *mut CallbackData);\n \n // #1683\n-pub type Between<Lhs, Rhs> = super::operators::Between<\n-    Lhs,\n-    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n->;\n-pub type NotBetween<Lhs, Rhs> = super::operators::NotBetween<\n-    Lhs,\n-    super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>,\n->;\n+pub type Between<Lhs, Rhs> =\n+    super::operators::Between<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;\n+pub type NotBetween<Lhs, Rhs> =\n+    super::operators::NotBetween<Lhs, super::operators::And<AsExpr<Rhs, Lhs>, AsExpr<Rhs, Lhs>>>;"}]}