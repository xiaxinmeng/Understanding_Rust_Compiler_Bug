{"sha": "4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDRjNTFjODA1N2Q3NjdiMmE4NTFiMTk2YjdhNGMzZTY1ZTJkZDI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-26T09:23:05Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-26T09:23:05Z"}, "message": "Merge pull request #783 from jwazny/issue-588\n\nAdded where_trailing_comma option.", "tree": {"sha": "839c47adee20d8822c0b5fb8c960bc20830abe67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839c47adee20d8822c0b5fb8c960bc20830abe67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "html_url": "https://github.com/rust-lang/rust/commit/4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b24f6f7c456aeb7a2cb47cdc7301737f086ad58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b24f6f7c456aeb7a2cb47cdc7301737f086ad58", "html_url": "https://github.com/rust-lang/rust/commit/3b24f6f7c456aeb7a2cb47cdc7301737f086ad58"}, {"sha": "d23628c91b84b49f2c66e86d4f7fd6670a300064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23628c91b84b49f2c66e86d4f7fd6670a300064", "html_url": "https://github.com/rust-lang/rust/commit/d23628c91b84b49f2c66e86d4f7fd6670a300064"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "48b7a06e538ee4b2490a3932df1177a8454320d8", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "patch": "@@ -316,6 +316,7 @@ create_config! {\n     where_layout: ListTactic, ListTactic::Vertical, \"Element layout inside a where clause\";\n     where_pred_indent: BlockIndentStyle, BlockIndentStyle::Visual,\n         \"Indentation style of a where predicate\";\n+    where_trailing_comma: bool, false, \"Put a trailing comma on where clauses\";\n     generics_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indentation of generics\";\n     struct_trailing_comma: SeparatorTactic, SeparatorTactic::Vertical,\n         \"If there is a trailing comma on structs\";"}, {"sha": "2ff52148f6a5f9116e57038e3d440534f774a0cf", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "patch": "@@ -491,6 +491,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                                              where_budget,\n                                                              context.config.where_density,\n                                                              \"{\",\n+                                                             true,\n                                                              None));\n \n         if try_opt!(is_impl_single_line(context, &items, &result, &where_clause_str, &item)) {\n@@ -737,6 +738,7 @@ fn format_tuple_struct(context: &RewriteContext,\n                                           where_budget,\n                                           Density::Compressed,\n                                           \";\",\n+                                          false,\n                                           None))\n         }\n         None => \"\".to_owned(),\n@@ -818,6 +820,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                                                          where_budget,\n                                                          context.config.where_density,\n                                                          \"=\",\n+                                                         false,\n                                                          Some(span.hi)));\n     result.push_str(&where_clause_str);\n     result.push_str(\" = \");\n@@ -1248,6 +1251,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                                          where_budget,\n                                                          where_density,\n                                                          \"{\",\n+                                                         has_body,\n                                                          Some(span.hi)));\n \n     if last_line_width(&result) + where_clause_str.len() > context.config.max_width &&\n@@ -1487,6 +1491,7 @@ fn rewrite_where_clause(context: &RewriteContext,\n                         width: usize,\n                         density: Density,\n                         terminator: &str,\n+                        allow_trailing_comma: bool,\n                         span_end: Option<BytePos>)\n                         -> Option<String> {\n     if where_clause.predicates.is_empty() {\n@@ -1526,11 +1531,12 @@ fn rewrite_where_clause(context: &RewriteContext,\n     // FIXME: we don't need to collect here if the where_layout isn't\n     // HorizontalVertical.\n     let tactic = definitive_tactic(&item_vec, context.config.where_layout, budget);\n+    let use_trailing_comma = allow_trailing_comma && context.config.where_trailing_comma;\n \n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n+        trailing_separator: SeparatorTactic::from_bool(use_trailing_comma),\n         indent: offset,\n         width: budget,\n         ends_with_newline: true,\n@@ -1592,6 +1598,7 @@ fn format_generics(context: &RewriteContext,\n                                                              budget,\n                                                              Density::Tall,\n                                                              terminator,\n+                                                             true,\n                                                              Some(span.hi)));\n         result.push_str(&where_clause_str);\n         if !force_same_line_brace &&"}, {"sha": "cb4d5da5274878f1f6fb3e45b6d9a4ec48aaba52", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "patch": "@@ -12,6 +12,7 @@ where_density = \"Tall\"\n where_indent = \"Tabbed\"\n where_layout = \"Vertical\"\n where_pred_indent = \"Visual\"\n+where_trailing_comma = false\n generics_indent = \"Visual\"\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\""}, {"sha": "8f951d199e42b447135fb4646c2bbe9a7522a81d", "filename": "tests/source/where-trailing-comma.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Fsource%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Fsource%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwhere-trailing-comma.rs?ref=4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "patch": "@@ -0,0 +1,37 @@\n+// rustfmt-where_trailing_comma: true\n+\n+fn f<S, T>(x: T, y: S) -> T where T: P, S: Q\n+{\n+    x\n+}\n+\n+impl Trait for T where T: P\n+{\n+    fn f(x: T) -> T where T: Q + R\n+    {\n+        x\n+    }\n+}\n+\n+struct Pair<S, T> where T: P, S: P + Q {\n+    a: T,\n+    b: S\n+}\n+\n+struct TupPair<S, T> (S, T) where T: P, S: P + Q;\n+\n+enum E<S, T> where S: P, T: P { \n+    A {a: T},\n+}\n+\n+type Double<T> where T: P, T: Q = Pair<T, T>;\n+\n+extern \"C\" {\n+    fn f<S, T>(x: T, y: S) -> T where T: P, S: Q;\n+}\n+\n+// Note: trait declarations are not fully formatted (issue #78)\n+trait Q<S, T> where T: P, S: R\n+{\n+    fn f<U, V>(self, x: T, y: S, z: U) -> Self where U: P, V: P;\n+}"}, {"sha": "bd7108f992a87a4086eaee4b3a50c080f724871c", "filename": "tests/target/where-trailing-comma.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Ftarget%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4344c51c8057d767b2a851b196b7a4c3e65e2dd2/tests%2Ftarget%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-trailing-comma.rs?ref=4344c51c8057d767b2a851b196b7a4c3e65e2dd2", "patch": "@@ -0,0 +1,57 @@\n+// rustfmt-where_trailing_comma: true\n+\n+fn f<S, T>(x: T, y: S) -> T\n+    where T: P,\n+          S: Q,\n+{\n+    x\n+}\n+\n+impl Trait for T\n+    where T: P,\n+{\n+    fn f(x: T) -> T\n+        where T: Q + R,\n+    {\n+        x\n+    }\n+}\n+\n+struct Pair<S, T>\n+    where T: P,\n+          S: P + Q,\n+{\n+    a: T,\n+    b: S,\n+}\n+\n+struct TupPair<S, T>(S, T)\n+    where T: P,\n+          S: P + Q;\n+\n+enum E<S, T>\n+    where S: P,\n+          T: P,\n+{\n+    A {\n+        a: T,\n+    },\n+}\n+\n+type Double<T>\n+    where T: P,\n+          T: Q = Pair<T, T>;\n+\n+extern \"C\" {\n+    fn f<S, T>(x: T, y: S) -> T\n+        where T: P,\n+              S: Q;\n+}\n+\n+// Note: trait declarations are not fully formatted (issue #78)\n+trait Q<S, T> where T: P, S: R\n+{\n+    fn f<U, V>(self, x: T, y: S, z: U) -> Self\n+        where U: P,\n+              V: P;\n+}"}]}