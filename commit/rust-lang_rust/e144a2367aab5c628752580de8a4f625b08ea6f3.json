{"sha": "e144a2367aab5c628752580de8a4f625b08ea6f3", "node_id": "C_kwDOAAsO6NoAKGUxNDRhMjM2N2FhYjVjNjI4NzUyNTgwZGU4YTRmNjI1YjA4ZWE2ZjM", "commit": {"author": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-17T19:36:57Z"}, "committer": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-21T15:57:21Z"}, "message": "Migrate deprecated_where_clause_location, forbidden_assoc_constraint, keyword_lifetime, invalid_label, invalid_visibility", "tree": {"sha": "f3dc5f9d979a52579c1df5409cd6417e7c4ed19b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3dc5f9d979a52579c1df5409cd6417e7c4ed19b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e144a2367aab5c628752580de8a4f625b08ea6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e144a2367aab5c628752580de8a4f625b08ea6f3", "html_url": "https://github.com/rust-lang/rust/commit/e144a2367aab5c628752580de8a4f625b08ea6f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e144a2367aab5c628752580de8a4f625b08ea6f3/comments", "author": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80451de390dde969057230345e44adfab21de6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80451de390dde969057230345e44adfab21de6b8", "html_url": "https://github.com/rust-lang/rust/commit/80451de390dde969057230345e44adfab21de6b8"}], "stats": {"total": 103, "additions": 77, "deletions": 26}, "files": [{"sha": "fee876489f7ee64e4bf009ad15d3f326e1fd24f2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e144a2367aab5c628752580de8a4f625b08ea6f3", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, pluralize, struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability, Diagnostic};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -27,7 +27,7 @@ use rustc_target::spec::abi;\n use std::mem;\n use std::ops::{Deref, DerefMut};\n \n-use crate::errors::ForbiddenLet;\n+use crate::errors::*;\n \n const MORE_EXTERN: &str =\n     \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";\n@@ -149,7 +149,7 @@ impl<'a> AstValidator<'a> {\n                 DEPRECATED_WHERE_CLAUSE_LOCATION,\n                 id,\n                 where_clauses.0.1,\n-                \"where clause not allowed here\",\n+                fluent::ast_passes::deprecated_where_clause_location,\n                 BuiltinLintDiagnostics::DeprecatedWhereclauseLocation(\n                     where_clauses.1.1.shrink_to_hi(),\n                     suggestion,\n@@ -179,10 +179,7 @@ impl<'a> AstValidator<'a> {\n             AssocConstraintKind::Equality { .. } => {}\n             AssocConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n-                    self.err_handler().span_err(\n-                        constraint.span,\n-                        \"associated type bounds are not allowed within structs, enums, or unions\",\n-                    );\n+                    self.session.emit_err(ForbiddenAssocConstraint { span: constraint.span });\n                 }\n             }\n         }\n@@ -254,31 +251,26 @@ impl<'a> AstValidator<'a> {\n     fn check_lifetime(&self, ident: Ident) {\n         let valid_names = [kw::UnderscoreLifetime, kw::StaticLifetime, kw::Empty];\n         if !valid_names.contains(&ident.name) && ident.without_first_quote().is_reserved() {\n-            self.err_handler().span_err(ident.span, \"lifetimes cannot use keyword names\");\n+            self.session.emit_err(KeywordLifetime { span: ident.span });\n         }\n     }\n \n     fn check_label(&self, ident: Ident) {\n         if ident.without_first_quote().is_reserved() {\n-            self.err_handler()\n-                .span_err(ident.span, &format!(\"invalid label name `{}`\", ident.name));\n+            self.session.emit_err(InvalidLabel { span: ident.span, name: ident.name });\n         }\n     }\n \n-    fn invalid_visibility(&self, vis: &Visibility, note: Option<&str>) {\n+    fn invalid_visibility(&self, vis: &Visibility, note: Option<InvalidVisibilityNote>) {\n         if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n \n-        let mut err =\n-            struct_span_err!(self.session, vis.span, E0449, \"unnecessary visibility qualifier\");\n-        if vis.kind.is_pub() {\n-            err.span_label(vis.span, \"`pub` not permitted here because it's implied\");\n-        }\n-        if let Some(note) = note {\n-            err.note(note);\n-        }\n-        err.emit();\n+        self.session.emit_err(InvalidVisibility {\n+            span: vis.span,\n+            implied: if vis.kind.is_pub() { Some(vis.span) } else { None },\n+            note,\n+        });\n     }\n \n     fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n@@ -1154,7 +1146,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n                 self.invalid_visibility(\n                     &item.vis,\n-                    Some(\"place qualifiers on individual impl items instead\"),\n+                    Some(InvalidVisibilityNote::IndividualImplItems),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n                     error(span, \"unsafe\").code(error_code!(E0197)).emit();\n@@ -1222,7 +1214,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n                 self.invalid_visibility(\n                     &item.vis,\n-                    Some(\"place qualifiers on individual foreign items instead\"),\n+                    Some(InvalidVisibilityNote::IndividualForeignItems),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n                     self.err_handler().span_err(span, \"extern block cannot be declared unsafe\");"}, {"sha": "0d5a41771ea885da0e7908d1001fc192c391b9e5", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=e144a2367aab5c628752580de8a4f625b08ea6f3", "patch": "@@ -2,8 +2,8 @@\n \n use rustc_errors::fluent;\n use rustc_errors::{AddSubdiagnostic, Diagnostic};\n-use rustc_macros::SessionDiagnostic;\n-use rustc_span::Span;\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_span::{Span, Symbol};\n \n use crate::ast_validation::ForbiddenLetReason;\n \n@@ -30,3 +30,44 @@ impl AddSubdiagnostic for ForbiddenLetReason {\n         }\n     }\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::forbidden_assoc_constraint)]\n+pub struct ForbiddenAssocConstraint {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::keyword_lifetime)]\n+pub struct KeywordLifetime {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::invalid_label)]\n+pub struct InvalidLabel {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::invalid_visibility, code = \"E0449\")]\n+pub struct InvalidVisibility {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label(ast_passes::implied)]\n+    pub implied: Option<Span>,\n+    #[subdiagnostic]\n+    pub note: Option<InvalidVisibilityNote>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum InvalidVisibilityNote {\n+    #[note(ast_passes::individual_impl_items)]\n+    IndividualImplItems,\n+    #[note(ast_passes::individual_foreign_items)]\n+    IndividualForeignItems,\n+}"}, {"sha": "153a91cc7e2bb045f7ae6751af738ea259f5eeec", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=e144a2367aab5c628752580de8a4f625b08ea6f3", "patch": "@@ -3,3 +3,21 @@ ast_passes_forbidden_let =\n     .note = only supported directly in conditions of `if` and `while` expressions\n     .not_supported_or = `||` operators are not supported in let chain expressions\n     .not_supported_parentheses = `let`s wrapped in parentheses are not supported in a context with let chains\n+\n+ast_passes_deprecated_where_clause_location =\n+    where clause not allowed here\n+\n+ast_passes_forbidden_assoc_constraint =\n+    associated type bounds are not allowed within structs, enums, or unions\n+\n+ast_passes_keyword_lifetime =\n+    lifetimes cannot use keyword names\n+\n+ast_passes_invalid_label =\n+    invalid label name `{$name}`\n+\n+ast_passes_invalid_visibility =\n+    unnecessary visibility qualifier\n+    .implied = `pub` not permitted here because it's implied\n+    .individual_impl_items = place qualifiers on individual impl items instead\n+    .individual_foreign_items = place qualifiers on individual foreign items instead"}, {"sha": "609a7894d86058b70a7de634eeaa9430ded71fa7", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a2367aab5c628752580de8a4f625b08ea6f3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=e144a2367aab5c628752580de8a4f625b08ea6f3", "patch": "@@ -537,7 +537,7 @@ impl LintBuffer {\n         lint: &'static Lint,\n         id: NodeId,\n         sp: impl Into<MultiSpan>,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n     ) {\n         self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n     }\n@@ -547,7 +547,7 @@ impl LintBuffer {\n         lint: &'static Lint,\n         id: NodeId,\n         sp: impl Into<MultiSpan>,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         self.add_lint(lint, id, sp.into(), msg, diagnostic)"}]}