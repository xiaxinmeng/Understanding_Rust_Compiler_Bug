{"sha": "3023cc49c8ee30d63fc999202ac022ace25be2df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjNjYzQ5YzhlZTMwZDYzZmM5OTkyMDJhYzAyMmFjZTI1YmUyZGY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-12T16:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-12T16:39:49Z"}, "message": "Rollup merge of #42594 - ollie27:rustdoc_assoc_type_links, r=steveklabnik\n\nrustdoc: Link directly to associated types\n\nRather than just linking to the trait.\n\nAlso simplifies the logic used to decide whether to render the full\nQPath.", "tree": {"sha": "18eab1956b21730646dab44a840603fe9ecc366b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18eab1956b21730646dab44a840603fe9ecc366b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3023cc49c8ee30d63fc999202ac022ace25be2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3023cc49c8ee30d63fc999202ac022ace25be2df", "html_url": "https://github.com/rust-lang/rust/commit/3023cc49c8ee30d63fc999202ac022ace25be2df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3023cc49c8ee30d63fc999202ac022ace25be2df/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87426195ec1de27dff0d8dc99095582f3717c946", "url": "https://api.github.com/repos/rust-lang/rust/commits/87426195ec1de27dff0d8dc99095582f3717c946", "html_url": "https://github.com/rust-lang/rust/commit/87426195ec1de27dff0d8dc99095582f3717c946"}, {"sha": "429dc51bfedd21f385dadc9bdf8d2e0163599814", "url": "https://api.github.com/repos/rust-lang/rust/commits/429dc51bfedd21f385dadc9bdf8d2e0163599814", "html_url": "https://github.com/rust-lang/rust/commit/429dc51bfedd21f385dadc9bdf8d2e0163599814"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "635691dd3458db84e4ada7a21222f33c4ce24486", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3023cc49c8ee30d63fc999202ac022ace25be2df/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023cc49c8ee30d63fc999202ac022ace25be2df/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3023cc49c8ee30d63fc999202ac022ace25be2df", "patch": "@@ -459,22 +459,10 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n /// rendering function with the necessary arguments for linking to a local path.\n fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                  print_all: bool, use_absolute: bool) -> fmt::Result {\n-    let empty = clean::PathSegment {\n-                    name: String::new(),\n-                    params: clean::PathParameters::Parenthesized {\n-                        inputs: Vec::new(),\n-                        output: None,\n-                    }\n-                };\n-    let last = path.segments.last()\n-                            .unwrap_or(&empty);\n-    let rel_root = if path.segments.is_empty() {\n-        None\n-    } else {\n-        match &*path.segments[0].name {\n-            \"self\" => Some(\"./\".to_string()),\n-            _ => None,\n-        }\n+    let last = path.segments.last().unwrap();\n+    let rel_root = match &*path.segments[0].name {\n+        \"self\" => Some(\"./\".to_string()),\n+        _ => None,\n     };\n \n     if print_all {\n@@ -508,7 +496,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                 Some((_, _, fqp)) => {\n                     format!(\"{}::{}\",\n                             fqp[..fqp.len() - 1].join(\"::\"),\n-                            HRef::new(did, fqp.last().unwrap_or(&String::new())))\n+                            HRef::new(did, fqp.last().unwrap()))\n                 }\n                 None => format!(\"{}\", HRef::new(did, &last.name)),\n             }\n@@ -740,10 +728,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {\n-                box clean::ResolvedPath { .. } => {\n-                    let path = clean::Path::singleton(name.clone());\n-                    !path.segments.is_empty() && &format!(\"{:#}\", trait_) != \"()\" &&\n-                    &format!(\"{:#}\", self_type) != \"Self\"\n+                box clean::ResolvedPath { ref path, .. } => {\n+                    !path.segments.is_empty() && !self_type.is_self_type()\n                 }\n                 _ => true,\n             };\n@@ -772,8 +758,18 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n                 box clean::ResolvedPath { did, ref typarams, .. } => {\n-                    let path = clean::Path::singleton(name.clone());\n-                    resolved_path(f, did, &path, true, use_absolute)?;\n+                    match href(did) {\n+                        Some((ref url, _, ref path)) if !f.alternate() => {\n+                            write!(f,\n+                                   \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                                   title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                                   url = url,\n+                                   shortty = ItemType::AssociatedType,\n+                                   name = name,\n+                                   path = path.join(\"::\"))?;\n+                        }\n+                        _ => write!(f, \"{}\", name)?,\n+                    }\n \n                     // FIXME: `typarams` are not rendered, and this seems bad?\n                     drop(typarams);"}, {"sha": "d152be33f4c7426e272c19978b31438cbc98ad68", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3023cc49c8ee30d63fc999202ac022ace25be2df/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023cc49c8ee30d63fc999202ac022ace25be2df/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=3023cc49c8ee30d63fc999202ac022ace25be2df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![crate_type=\"lib\"]\n \n // @has assoc_types/trait.Index.html\n@@ -18,11 +20,14 @@ pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"index.v\"]//code' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n+    // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' \\\n+    //      \"Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n }\n \n // @has assoc_types/fn.use_output.html\n // @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -33,10 +38,12 @@ pub trait Feed {\n \n // @has assoc_types/fn.use_input.html\n // @has - '//*[@class=\"rust fn\"]' 'T::Input'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n // @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}]}