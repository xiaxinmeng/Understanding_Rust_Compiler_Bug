{"sha": "c703ff26555bc25739384b2104dfb538ec7435c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDNmZjI2NTU1YmMyNTczOTM4NGIyMTA0ZGZiNTM4ZWM3NDM1Yzc=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-10-22T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-12-01T08:03:35Z"}, "message": "Conditional compilation for sanitizers\n\nConfigure sanitize option when compiling with a sanitizer to make\nit possible to execute different code depending on whether given\nsanitizer is enabled or not.", "tree": {"sha": "7b0f97002a7356faa17d75e45ceb0ada77072ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b0f97002a7356faa17d75e45ceb0ada77072ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c703ff26555bc25739384b2104dfb538ec7435c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c703ff26555bc25739384b2104dfb538ec7435c7", "html_url": "https://github.com/rust-lang/rust/commit/c703ff26555bc25739384b2104dfb538ec7435c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c703ff26555bc25739384b2104dfb538ec7435c7/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "html_url": "https://github.com/rust-lang/rust/commit/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "949f24ab9c11eb5337050c3fadfdc51bcf3bcf91", "filename": "src/doc/unstable-book/src/language-features/cfg-sanitize.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -0,0 +1,36 @@\n+# `cfg_sanitize`\n+\n+The tracking issue for this feature is: [#39699]\n+\n+[#39699]: https://github.com/rust-lang/rust/issues/39699\n+\n+------------------------\n+\n+The `cfg_sanitize` feature makes it possible to execute different code\n+depending on whether a particular sanitizer is enabled or not.\n+\n+## Examples\n+\n+``` rust\n+#![feature(cfg_sanitize)]\n+\n+#[cfg(sanitize = \"thread\")]\n+fn a() {\n+  // ...\n+}\n+\n+#[cfg(not(sanitize = \"thread\"))]\n+fn a() {\n+  // ...\n+}\n+\n+fn b() {\n+  if cfg!(sanitize = \"leak\") {\n+    // ...\n+  } else {\n+    // ...\n+  }\n+}\n+\n+```\n+"}, {"sha": "245a4ac86cd1ef321882caa96803b9bb4bb4bd02", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -47,6 +47,17 @@ pub enum Sanitizer {\n     Thread,\n }\n \n+impl fmt::Display for Sanitizer {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            Sanitizer::Address => \"address\".fmt(f),\n+            Sanitizer::Leak => \"leak\".fmt(f),\n+            Sanitizer::Memory => \"memory\".fmt(f),\n+            Sanitizer::Thread => \"thread\".fmt(f),\n+        }\n+    }\n+}\n+\n impl FromStr for Sanitizer {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Sanitizer, ()> {\n@@ -1582,6 +1593,10 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n             }\n         }\n     }\n+    if let Some(s) = &sess.opts.debugging_opts.sanitizer {\n+        let symbol = Symbol::intern(&s.to_string());\n+        ret.insert((sym::sanitize, Some(symbol)));\n+    }\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }"}, {"sha": "16d8ada9f24c0857f93c2c29f662da0bfbd1d76c", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -524,6 +524,9 @@ declare_features! (\n     /// Allows the use of `if` and `match` in constants.\n     (active, const_if_match, \"1.41.0\", Some(49146), None),\n \n+    /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n+    (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "fa8e3e189edefda0fa2100a7bf364fd225290b0d", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -25,6 +25,7 @@ const GATED_CFGS: &[GatedCfg] = &[\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n+    (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n ];\n \n /// Find a gated cfg determined by the `pred`icate which is given the cfg's name."}, {"sha": "3059b059691067c51966b1646a1bcc35ec6e7892", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -177,6 +177,7 @@ symbols! {\n         cfg_attr,\n         cfg_attr_multi,\n         cfg_doctest,\n+        cfg_sanitize,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n@@ -634,6 +635,7 @@ symbols! {\n         rust_eh_unwind_resume,\n         rust_oom,\n         rvalue_static_promotion,\n+        sanitize,\n         sanitizer_runtime,\n         _Self,\n         self_in_typedefs,"}, {"sha": "c3e7cc9ed8a9bcbe1252abf0cf281aaddcc2ac79", "filename": "src/test/ui/feature-gates/feature-gate-cfg_sanitize.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -0,0 +1,3 @@\n+#[cfg(not(sanitize = \"thread\"))]\n+//~^ `cfg(sanitize)` is experimental\n+fn main() {}"}, {"sha": "f67a0d83bdd3a1fab70eddaa13cf86d91cf6edf2", "filename": "src/test/ui/feature-gates/feature-gate-cfg_sanitize.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `cfg(sanitize)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg_sanitize.rs:1:11\n+   |\n+LL | #[cfg(not(sanitize = \"thread\"))]\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/39699\n+   = help: add `#![feature(cfg_sanitize)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9c198543a86649572cd42aa4fc6105d4231b985b", "filename": "src/test/ui/sanitize-cfg.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Fsanitize-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703ff26555bc25739384b2104dfb538ec7435c7/src%2Ftest%2Fui%2Fsanitize-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize-cfg.rs?ref=c703ff26555bc25739384b2104dfb538ec7435c7", "patch": "@@ -0,0 +1,26 @@\n+// Verifies that when compiling with -Zsanitizer=option,\n+// the `#[cfg(sanitize = \"option\")]` attribute is configured.\n+\n+// needs-sanitizer-support\n+// only-linux\n+// only-x86_64\n+// check-pass\n+// revisions: address leak memory thread\n+//[address]compile-flags: -Zsanitizer=address --cfg address\n+//[leak]compile-flags:    -Zsanitizer=leak    --cfg leak\n+//[memory]compile-flags:  -Zsanitizer=memory  --cfg memory\n+//[thread]compile-flags:  -Zsanitizer=thread  --cfg thread\n+\n+#![feature(cfg_sanitize)]\n+\n+#[cfg(all(sanitize = \"address\", address))]\n+fn main() {}\n+\n+#[cfg(all(sanitize = \"leak\", leak))]\n+fn main() {}\n+\n+#[cfg(all(sanitize = \"memory\", memory))]\n+fn main() {}\n+\n+#[cfg(all(sanitize = \"thread\", thread))]\n+fn main() {}"}]}