{"sha": "96e64ec98708407d2c29347439d9aae597157c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTY0ZWM5ODcwODQwN2QyYzI5MzQ3NDM5ZDlhYWU1OTcxNTdjOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-11T03:10:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-11T03:10:11Z"}, "message": "Auto merge of #26945 - steveklabnik:doc_io_bufreader, r=alexcrichton\n\nMostly just adding basic examples, what's there seems mostly good.\r\n\r\nr? @alexcrichton", "tree": {"sha": "9732007aac337680e42dbdea04e09a78c63f4fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9732007aac337680e42dbdea04e09a78c63f4fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e64ec98708407d2c29347439d9aae597157c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e64ec98708407d2c29347439d9aae597157c8e", "html_url": "https://github.com/rust-lang/rust/commit/96e64ec98708407d2c29347439d9aae597157c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e64ec98708407d2c29347439d9aae597157c8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64db3aac0fe291df506ccbb6568b90fa82969fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/64db3aac0fe291df506ccbb6568b90fa82969fd9", "html_url": "https://github.com/rust-lang/rust/commit/64db3aac0fe291df506ccbb6568b90fa82969fd9"}, {"sha": "18201d7db1be6af9a17050a9ccb28125cd01364b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18201d7db1be6af9a17050a9ccb28125cd01364b", "html_url": "https://github.com/rust-lang/rust/commit/18201d7db1be6af9a17050a9ccb28125cd01364b"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "44541b7875423a235fe010717a37368bb32511ae", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/96e64ec98708407d2c29347439d9aae597157c8e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e64ec98708407d2c29347439d9aae597157c8e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=96e64ec98708407d2c29347439d9aae597157c8e", "patch": "@@ -20,7 +20,7 @@ use fmt;\n use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom};\n use ptr;\n \n-/// Wraps a `Read` and buffers input from it.\n+/// The `BufReader` struct adds buffering to any reader.\n ///\n /// It can be excessively inefficient to work directly with a `Read` instance.\n /// For example, every call to `read` on `TcpStream` results in a system call.\n@@ -29,7 +29,7 @@ use ptr;\n ///\n /// # Examples\n ///\n-/// ```no_run\n+/// ```\n /// use std::io::prelude::*;\n /// use std::io::BufReader;\n /// use std::fs::File;\n@@ -54,12 +54,40 @@ pub struct BufReader<R> {\n \n impl<R: Read> BufReader<R> {\n     /// Creates a new `BufReader` with a default buffer capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::BufReader;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"log.txt\"));\n+    /// let mut reader = BufReader::new(f);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: R) -> BufReader<R> {\n         BufReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n     /// Creates a new `BufReader` with the specified buffer capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Creating a buffer with ten bytes of capacity:\n+    ///\n+    /// ```\n+    /// use std::io::BufReader;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"log.txt\"));\n+    /// let mut reader = BufReader::with_capacity(10, f);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(cap: usize, inner: R) -> BufReader<R> {\n         BufReader {\n@@ -71,20 +99,65 @@ impl<R: Read> BufReader<R> {\n     }\n \n     /// Gets a reference to the underlying reader.\n+    ///\n+    /// It is inadvisable to directly read from the underlying reader.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::BufReader;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut reader = BufReader::new(f1);\n+    ///\n+    /// let f2 = reader.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &R { &self.inner }\n \n     /// Gets a mutable reference to the underlying reader.\n     ///\n-    /// # Warning\n-    ///\n     /// It is inadvisable to directly read from the underlying reader.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::BufReader;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut reader = BufReader::new(f1);\n+    ///\n+    /// let f2 = reader.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut R { &mut self.inner }\n \n     /// Unwraps this `BufReader`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::BufReader;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut reader = BufReader::new(f1);\n+    ///\n+    /// let f2 = reader.into_inner();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> R { self.inner }\n }"}]}