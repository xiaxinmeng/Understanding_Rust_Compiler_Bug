{"sha": "8ff633cc3b85933e76c84b43d2c19250c397e9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjYzM2NjM2I4NTkzM2U3NmM4NGI0M2QyYzE5MjUwYzM5N2U5Y2I=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T15:46:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T15:46:40Z"}, "message": "Implement describe_def query for LOCAL_CRATE", "tree": {"sha": "efca78cd88fca51049674dde7128378a8cfaaabd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efca78cd88fca51049674dde7128378a8cfaaabd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff633cc3b85933e76c84b43d2c19250c397e9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff633cc3b85933e76c84b43d2c19250c397e9cb", "html_url": "https://github.com/rust-lang/rust/commit/8ff633cc3b85933e76c84b43d2c19250c397e9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff633cc3b85933e76c84b43d2c19250c397e9cb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ff0adcde77776e2947d147a756d4289aa42e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ff0adcde77776e2947d147a756d4289aa42e59", "html_url": "https://github.com/rust-lang/rust/commit/15ff0adcde77776e2947d147a756d4289aa42e59"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "3799bdada888e84821e8c4a9a8a163cb8cf4a9a1", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8ff633cc3b85933e76c84b43d2c19250c397e9cb", "patch": "@@ -22,6 +22,7 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n+use syntax::ext::base::MacroKind;\n use syntax_pos::Span;\n \n use hir::*;\n@@ -32,13 +33,15 @@ use util::nodemap::{DefIdMap, FxHashMap};\n use arena::TypedArena;\n use std::cell::RefCell;\n use std::io;\n+use ty::TyCtxt;\n \n pub mod blocks;\n mod collector;\n mod def_collector;\n pub mod definitions;\n mod hir_id_validator;\n \n+\n pub const ITEM_LIKE_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::Low;\n pub const REGULAR_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n \n@@ -373,6 +376,92 @@ impl<'hir> Map<'hir> {\n         self.definitions.as_local_node_id(def_id.to_def_id()).unwrap()\n     }\n \n+    pub fn describe_def(&self, node_id: NodeId) -> Option<Def> {\n+        let node = if let Some(node) = self.find(node_id) {\n+            node\n+        } else {\n+            return None\n+        };\n+\n+        match node {\n+            NodeItem(item) => {\n+                let def_id = || {\n+                    self.local_def_id(item.id)\n+                };\n+\n+                match item.node {\n+                    ItemStatic(_, m, _) => Some(Def::Static(def_id(),\n+                                                            m == MutMutable)),\n+                    ItemConst(..) => Some(Def::Const(def_id())),\n+                    ItemFn(..) => Some(Def::Fn(def_id())),\n+                    ItemMod(..) => Some(Def::Mod(def_id())),\n+                    ItemGlobalAsm(..) => Some(Def::GlobalAsm(def_id())),\n+                    ItemTy(..) => Some(Def::TyAlias(def_id())),\n+                    ItemEnum(..) => Some(Def::Enum(def_id())),\n+                    ItemStruct(..) => Some(Def::Struct(def_id())),\n+                    ItemUnion(..) => Some(Def::Union(def_id())),\n+                    ItemTrait(..) => Some(Def::Trait(def_id())),\n+                    ItemTraitAlias(..) => {\n+                        bug!(\"trait aliases are not yet implemented (see issue #41517)\")\n+                    },\n+                    ItemExternCrate(_) |\n+                    ItemUse(..) |\n+                    ItemForeignMod(..) |\n+                    ItemImpl(..) => None,\n+                }\n+            }\n+            NodeForeignItem(item) => {\n+                let def_id = self.local_def_id(item.id);\n+                match item.node {\n+                    ForeignItemFn(..) => Some(Def::Fn(def_id)),\n+                    ForeignItemStatic(_, m) => Some(Def::Static(def_id, m)),\n+                    ForeignItemType => Some(Def::TyForeign(def_id)),\n+                }\n+            }\n+            NodeTraitItem(item) => {\n+                let def_id = self.local_def_id(item.id);\n+                match item.node {\n+                    TraitItemKind::Const(..) => Some(Def::AssociatedConst(def_id)),\n+                    TraitItemKind::Method(..) => Some(Def::Method(def_id)),\n+                    TraitItemKind::Type(..) => Some(Def::AssociatedTy(def_id)),\n+                }\n+            }\n+            NodeImplItem(item) => {\n+                let def_id = self.local_def_id(item.id);\n+                match item.node {\n+                    ImplItemKind::Const(..) => Some(Def::AssociatedConst(def_id)),\n+                    ImplItemKind::Method(..) => Some(Def::Method(def_id)),\n+                    ImplItemKind::Type(..) => Some(Def::AssociatedTy(def_id)),\n+                }\n+            }\n+            NodeVariant(variant) => {\n+                let def_id = self.local_def_id(variant.node.data.id());\n+                Some(Def::Variant(def_id))\n+            }\n+            NodeField(_) |\n+            NodeExpr(_) |\n+            NodeStmt(_) |\n+            NodeTy(_) |\n+            NodeTraitRef(_) |\n+            NodePat(_) |\n+            NodeBinding(_) |\n+            NodeStructCtor(_) |\n+            NodeLifetime(_) |\n+            NodeVisibility(_) |\n+            NodeBlock(_) => None,\n+            NodeLocal(local) => {\n+                Some(Def::Local(local.id))\n+            }\n+            NodeMacroDef(macro_def) => {\n+                Some(Def::Macro(self.local_def_id(macro_def.id),\n+                                MacroKind::Bang))\n+            }\n+            NodeTyParam(param) => {\n+                Some(Def::TyParam(self.local_def_id(param.id)))\n+            }\n+        }\n+    }\n+\n     fn entry_count(&self) -> usize {\n         self.map.len()\n     }\n@@ -1275,3 +1364,12 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         }\n     }\n }\n+\n+pub fn describe_def(tcx: TyCtxt, def_id: DefId) -> Option<Def> {\n+    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n+        tcx.hir.describe_def(node_id)\n+    } else {\n+        bug!(\"Calling local describe_def query provider for upstream DefId: {:?}\",\n+             def_id)\n+    }\n+}"}, {"sha": "0fa1b95d8e7776955bd1923738ac8a2edf2b1b86", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8ff633cc3b85933e76c84b43d2c19250c397e9cb", "patch": "@@ -43,6 +43,7 @@ use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n use syntax::util::parser::ExprPrecedence;\n use ty::AdtKind;\n+use ty::maps::Providers;\n \n use rustc_data_structures::indexed_vec;\n \n@@ -2204,3 +2205,8 @@ pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n // Map from the NodeId of a glob import to a list of items which are actually\n // imported.\n pub type GlobMap = NodeMap<FxHashSet<Name>>;\n+\n+\n+pub fn provide(providers: &mut Providers) {\n+    providers.describe_def = map::describe_def;\n+}"}, {"sha": "d283e13c95823451f3ca91b70ebea2794fe0c7d6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff633cc3b85933e76c84b43d2c19250c397e9cb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8ff633cc3b85933e76c84b43d2c19250c397e9cb", "patch": "@@ -929,6 +929,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n }\n \n pub fn default_provide(providers: &mut ty::maps::Providers) {\n+    hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n     reachable::provide(providers);"}]}