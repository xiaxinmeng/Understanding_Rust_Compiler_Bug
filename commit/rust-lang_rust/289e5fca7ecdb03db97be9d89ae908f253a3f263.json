{"sha": "289e5fca7ecdb03db97be9d89ae908f253a3f263", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OWU1ZmNhN2VjZGIwM2RiOTdiZTlkODlhZTkwOGYyNTNhM2YyNjM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-28T13:55:42Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-05T16:30:37Z"}, "message": "forbid generic params in complex consts", "tree": {"sha": "f683ecad6f85cc08a61862c088f4719a2c375f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f683ecad6f85cc08a61862c088f4719a2c375f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/289e5fca7ecdb03db97be9d89ae908f253a3f263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/289e5fca7ecdb03db97be9d89ae908f253a3f263", "html_url": "https://github.com/rust-lang/rust/commit/289e5fca7ecdb03db97be9d89ae908f253a3f263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/289e5fca7ecdb03db97be9d89ae908f253a3f263/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375bccb8b3fa2a517e6e19e24da25cad0413987d", "url": "https://api.github.com/repos/rust-lang/rust/commits/375bccb8b3fa2a517e6e19e24da25cad0413987d", "html_url": "https://github.com/rust-lang/rust/commit/375bccb8b3fa2a517e6e19e24da25cad0413987d"}], "stats": {"total": 212, "additions": 194, "deletions": 18}, "files": [{"sha": "594a20e55131017106435e3f5d2a797139f07c85", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -1052,6 +1052,30 @@ impl Expr {\n         }\n     }\n \n+    /// Is this expr either `N`, or `{ N }`.\n+    ///\n+    /// If this is not the case, name resolution does not resolve `N` when using\n+    /// `feature(min_const_generics)` as more complex expressions are not supported.\n+    pub fn is_potential_trivial_const_param(&self) -> bool {\n+        let this = if let ExprKind::Block(ref block, None) = self.kind {\n+            if block.stmts.len() == 1 {\n+                if let StmtKind::Expr(ref expr) = block.stmts[0].kind { expr } else { self }\n+            } else {\n+                self\n+            }\n+        } else {\n+            self\n+        };\n+\n+        if let ExprKind::Path(None, ref path) = this.kind {\n+            if path.segments.len() == 1 && path.segments[0].args.is_none() {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     pub fn to_bound(&self) -> Option<GenericBound> {\n         match &self.kind {\n             ExprKind::Path(None, path) => Some(GenericBound::Trait("}, {"sha": "6fe923b839c16e7cea4eae24d354fccc936a8a1f", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -466,6 +466,23 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInNonTrivialAnonConst(name) => {\n+                let mut err = self.session.struct_span_err(\n+                    span,\n+                    \"generic parameters must not be used inside of non trivial constant values\",\n+                );\n+                err.span_label(\n+                    span,\n+                    &format!(\n+                        \"non-trivial anonymous constants must not depend on the parameter `{}`\",\n+                        name\n+                    ),\n+                );\n+                err.help(\n+                    &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\", name)\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "853085fbc0019230e0946bd39129d74d8925cab3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -111,7 +111,7 @@ crate enum RibKind<'a> {\n     ItemRibKind(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n-    ConstantItemRibKind,\n+    ConstantItemRibKind(bool),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -137,7 +137,7 @@ impl RibKind<'_> {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n             | FnItemRibKind\n-            | ConstantItemRibKind\n+            | ConstantItemRibKind(_)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n@@ -426,7 +426,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         debug!(\"visit_anon_const {:?}\", constant);\n-        self.with_constant_rib(|this| {\n+        self.with_constant_rib(constant.value.is_potential_trivial_const_param(), |this| {\n             visit::walk_anon_const(this, constant);\n         });\n     }\n@@ -628,7 +628,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         if !check_ns(TypeNS) && check_ns(ValueNS) {\n                             // This must be equivalent to `visit_anon_const`, but we cannot call it\n                             // directly due to visitor lifetimes so we have to copy-paste some code.\n-                            self.with_constant_rib(|this| {\n+                            self.with_constant_rib(true, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -829,7 +829,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ClosureOrAsyncRibKind\n                 | FnItemRibKind\n                 | ItemRibKind(..)\n-                | ConstantItemRibKind\n+                | ConstantItemRibKind(_)\n                 | ModuleRibKind(..)\n                 | ForwardTyParamBanRibKind\n                 | ConstParamTyRibKind => {\n@@ -948,7 +948,10 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n                                         if let Some(expr) = default {\n-                                            this.with_constant_rib(|this| this.visit_expr(expr));\n+                                            this.with_constant_rib(\n+                                                expr.is_potential_trivial_const_param(),\n+                                                |this| this.visit_expr(expr),\n+                                            );\n                                         }\n                                     }\n                                     AssocItemKind::Fn(_, _, generics, _) => {\n@@ -989,7 +992,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n-                        this.with_constant_rib(|this| this.visit_expr(expr));\n+                        this.with_constant_rib(expr.is_potential_trivial_const_param(), |this| {\n+                            this.visit_expr(expr)\n+                        });\n                     }\n                 });\n             }\n@@ -1086,11 +1091,11 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n-    fn with_constant_rib(&mut self, f: impl FnOnce(&mut Self)) {\n+    fn with_constant_rib(&mut self, trivial: bool, f: impl FnOnce(&mut Self)) {\n         debug!(\"with_constant_rib\");\n-        self.with_rib(ValueNS, ConstantItemRibKind, |this| {\n-            this.with_rib(TypeNS, ConstantItemRibKind, |this| {\n-                this.with_label_rib(ConstantItemRibKind, f);\n+        self.with_rib(ValueNS, ConstantItemRibKind(trivial), |this| {\n+            this.with_rib(TypeNS, ConstantItemRibKind(trivial), |this| {\n+                this.with_label_rib(ConstantItemRibKind(trivial), f);\n             })\n         });\n     }\n@@ -1220,7 +1225,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 for item in impl_items {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n-                                        AssocItemKind::Const(..) => {\n+                                        AssocItemKind::Const(_default, _ty, expr) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Const\",);\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n@@ -1231,9 +1236,18 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 |n, s| ConstNotMemberOfTrait(n, s),\n                                             );\n \n-                                            this.with_constant_rib(|this| {\n-                                                visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n-                                            });\n+                                            this.with_constant_rib(\n+                                                expr.as_ref().map_or(false, |e| {\n+                                                    e.is_potential_trivial_const_param()\n+                                                }),\n+                                                |this| {\n+                                                    visit::walk_assoc_item(\n+                                                        this,\n+                                                        item,\n+                                                        AssocCtxt::Impl,\n+                                                    )\n+                                                },\n+                                            );\n                                         }\n                                         AssocItemKind::Fn(_, _, generics, _) => {\n                                             // We also need a new scope for the impl item type parameters."}, {"sha": "1425efcb54d1ff6bc255a1ecdec329a16bc3d83f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -218,6 +218,10 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n+    /// generic parameters must not be used inside of non trivial constant values.\n+    ///\n+    /// This error is only emitted when using `min_const_generics`.\n+    ParamInNonTrivialAnonConst(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2507,7 +2511,7 @@ impl<'a> Resolver<'a> {\n                                 res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(_) => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n                                 self.report_error(span, AttemptToUseNonConstantValueInConstant);\n@@ -2546,7 +2550,18 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(trivial) => {\n+                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                            if !trivial && self.session.features_untracked().min_const_generics {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            }\n+\n                             if in_ty_param_default {\n                                 if record_used {\n                                     self.report_error(\n@@ -2612,7 +2627,18 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind(trivial) => {\n+                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n+                            if !trivial && self.session.features_untracked().min_const_generics {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            }\n+\n                             if in_ty_param_default {\n                                 if record_used {\n                                     self.report_error("}, {"sha": "201af9fcef382ac0232dd64b3009b6d2e28160bf", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -0,0 +1,37 @@\n+#![feature(min_const_generics)]\n+\n+fn test<const N: usize>() {}\n+\n+fn ok<const M: usize>() -> [u8; M] {\n+    [0; { M }]\n+}\n+\n+struct Break0<const N: usize>([u8; { N + 1 }]);\n+//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+\n+struct Break1<const N: usize>([u8; { { N } }]);\n+//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+\n+fn break2<const N: usize>() {\n+    let _: [u8; N + 1];\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+fn break3<const N: usize>() {\n+    let _ = [0; N + 1];\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+trait Foo {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: usize> Foo for [u8; N] {\n+    const ASSOC: usize = N + 1;\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    // FIXME(min_const_generics): We probably have to allow this as we can\n+    // already allow referencing type parameters here on stable.\n+}\n+\n+\n+fn main() {}"}, {"sha": "03857aee076b54d1237b433f84816a248687aa24", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -0,0 +1,42 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:9:38\n+   |\n+LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n+   |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:12:40\n+   |\n+LL | struct Break1<const N: usize>([u8; { { N } }]);\n+   |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:16:17\n+   |\n+LL |     let _: [u8; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:21:17\n+   |\n+LL |     let _ = [0; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/complex-expression.rs:30:26\n+   |\n+LL |     const ASSOC: usize = N + 1;\n+   |                          ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "423deae4600836407185614dc3498d1cbef99f30", "filename": "src/test/ui/const-generics/min_const_generics/feature-gate-min_const_generics.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.rs?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -0,0 +1,4 @@\n+fn test<const N: usize>() {}\n+//~^ ERROR const generics are unstable\n+\n+fn main() {}"}, {"sha": "80cfdc2d28c4541fc5ac9f383251a2b41a6b6bc1", "filename": "src/test/ui/const-generics/min_const_generics/feature-gate-min_const_generics.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/289e5fca7ecdb03db97be9d89ae908f253a3f263/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ffeature-gate-min_const_generics.stderr?ref=289e5fca7ecdb03db97be9d89ae908f253a3f263", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: const generics are unstable\n+  --> $DIR/feature-gate-min_const_generics.rs:1:15\n+   |\n+LL | fn test<const N: usize>() {}\n+   |               ^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}