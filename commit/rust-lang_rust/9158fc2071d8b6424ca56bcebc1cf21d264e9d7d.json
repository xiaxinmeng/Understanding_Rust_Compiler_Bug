{"sha": "9158fc2071d8b6424ca56bcebc1cf21d264e9d7d", "node_id": "C_kwDOAAsO6NoAKDkxNThmYzIwNzFkOGI2NDI0Y2E1NmJjZWJjMWNmMjFkMjY0ZTlkN2Q", "commit": {"author": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-10-23T10:47:17Z"}, "committer": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-10-23T10:47:17Z"}, "message": "Fixes incorrect handling of ADT's drop requirements\n\nSee https://github.com/rust-lang/rust/issues/90024#issuecomment-950105433", "tree": {"sha": "076e9fff024dd9d18e39e96b01dcf236f9f6f08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/076e9fff024dd9d18e39e96b01dcf236f9f6f08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d", "html_url": "https://github.com/rust-lang/rust/commit/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01198792a608b05e624b0127e76dd0753057016c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01198792a608b05e624b0127e76dd0753057016c", "html_url": "https://github.com/rust-lang/rust/commit/01198792a608b05e624b0127e76dd0753057016c"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "dca93aff0cdb0d7a5eb7afbc86e2d29c3b6ba342", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9158fc2071d8b6424ca56bcebc1cf21d264e9d7d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=9158fc2071d8b6424ca56bcebc1cf21d264e9d7d", "patch": "@@ -12,14 +12,12 @@ use rustc_span::{sym, DUMMY_SP};\n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let adt_components =\n-        move |adt_def: &ty::AdtDef, _| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n-\n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n     // needs drop.\n-    let res =\n-        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components).next().is_some();\n+    let adt_has_dtor =\n+        |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n+    let res = drop_tys_helper(tcx, query.value, query.param_env, adt_has_dtor).next().is_some();\n \n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n@@ -29,12 +27,10 @@ fn has_significant_drop_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> bool {\n-    let significant_drop_fields = move |adt_def: &ty::AdtDef, _| {\n-        tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter())\n-    };\n-    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields)\n-        .next()\n-        .is_some();\n+    let res =\n+        drop_tys_helper(tcx, query.value, query.param_env, adt_consider_insignificant_dtor(tcx))\n+            .next()\n+            .is_some();\n     debug!(\"has_significant_drop_raw({:?}) = {:?}\", query, res);\n     res\n }\n@@ -140,15 +136,14 @@ where\n                     // `ManuallyDrop`. If it's a struct or enum without a `Drop`\n                     // impl then check whether the field types need `Drop`.\n                     ty::Adt(adt_def, substs) => {\n+                        debug!(\"Got value {:?} with substs {:?}\", adt_def, substs);\n                         let tys = match (self.adt_components)(adt_def, substs) {\n                             Err(e) => return Some(Err(e)),\n                             Ok(tys) => tys,\n                         };\n                         for required_ty in tys {\n-                            let subst_ty = tcx.normalize_erasing_regions(\n-                                self.param_env,\n-                                required_ty.subst(tcx, substs),\n-                            );\n+                            let subst_ty =\n+                                tcx.normalize_erasing_regions(self.param_env, required_ty);\n                             queue_type(self, subst_ty);\n                         }\n                     }\n@@ -187,11 +182,12 @@ enum DtorType {\n // Depending on the implentation of `adt_has_dtor`, it is used to check if the\n // ADT has a destructor or if the ADT only has a significant destructor. For\n // understanding significant destructor look at `adt_significant_drop_tys`.\n-fn adt_drop_tys_helper<'tcx>(\n+fn drop_tys_helper<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    ty: Ty<'tcx>,\n+    param_env: rustc_middle::ty::ParamEnv<'tcx>,\n     adt_has_dtor: impl Fn(&ty::AdtDef) -> Option<DtorType>,\n-) -> Result<&ty::List<Ty<'tcx>>, AlwaysRequiresDrop> {\n+) -> impl Iterator<Item = NeedsDropResult<Ty<'tcx>>> {\n     let adt_components = move |adt_def: &ty::AdtDef, substs: SubstsRef<'tcx>| {\n         if adt_def.is_manually_drop() {\n             debug!(\"adt_drop_tys: `{:?}` is manually drop\", adt_def);\n@@ -215,31 +211,25 @@ fn adt_drop_tys_helper<'tcx>(\n             debug!(\"adt_drop_tys: `{:?}` is a union\", adt_def);\n             return Ok(Vec::new().into_iter());\n         }\n-        Ok(adt_def.all_fields().map(|field| tcx.type_of(field.did)).collect::<Vec<_>>().into_iter())\n+        debug!(\"Path\");\n+        Ok(adt_def\n+            .all_fields()\n+            .map(|field| {\n+                let r = tcx.type_of(field.did).subst(tcx, substs);\n+                debug!(\"Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n+                r\n+            })\n+            .collect::<Vec<_>>()\n+            .into_iter())\n     };\n \n-    let adt_ty = tcx.type_of(def_id);\n-    let param_env = tcx.param_env(def_id);\n-    let res: Result<Vec<_>, _> =\n-        NeedsDropTypes::new(tcx, param_env, adt_ty, adt_components).collect();\n-\n-    debug!(\"adt_drop_tys(`{}`) = `{:?}`\", tcx.def_path_str(def_id), res);\n-    res.map(|components| tcx.intern_type_list(&components))\n+    NeedsDropTypes::new(tcx, param_env, ty, adt_components)\n }\n \n-fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n-    // This is for the \"needs_drop\" query, that considers all `Drop` impls, therefore all dtors are\n-    // significant.\n-    let adt_has_dtor =\n-        |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n-}\n-\n-fn adt_significant_drop_tys(\n-    tcx: TyCtxt<'_>,\n-    def_id: DefId,\n-) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n-    let adt_has_dtor = |adt_def: &ty::AdtDef| {\n+fn adt_consider_insignificant_dtor<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+) -> impl Fn(&ty::AdtDef) -> Option<DtorType> + 'tcx {\n+    move |adt_def: &ty::AdtDef| {\n         let is_marked_insig = tcx.has_attr(adt_def.did, sym::rustc_insignificant_dtor);\n         if is_marked_insig {\n             // In some cases like `std::collections::HashMap` where the struct is a wrapper around\n@@ -256,8 +246,31 @@ fn adt_significant_drop_tys(\n             // treat this as the simple case of Drop impl for type.\n             None\n         }\n-    };\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n+    }\n+}\n+\n+fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+    // This is for the \"adt_drop_tys\" query, that considers all `Drop` impls, therefore all dtors are\n+    // significant.\n+    let adt_has_dtor =\n+        |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n+    drop_tys_helper(tcx, tcx.type_of(def_id), tcx.param_env(def_id), adt_has_dtor)\n+        .collect::<Result<Vec<_>, _>>()\n+        .map(|components| tcx.intern_type_list(&components))\n+}\n+\n+fn adt_significant_drop_tys(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+    drop_tys_helper(\n+        tcx,\n+        tcx.type_of(def_id),\n+        tcx.param_env(def_id),\n+        adt_consider_insignificant_dtor(tcx),\n+    )\n+    .collect::<Result<Vec<_>, _>>()\n+    .map(|components| tcx.intern_type_list(&components))\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {"}]}