{"sha": "2e1d739a8063307facf9ff098c26b02005092e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMWQ3MzlhODA2MzMwN2ZhY2Y5ZmYwOThjMjZiMDIwMDUwOTJlMDU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T14:41:44Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T15:20:01Z"}, "message": "Import glob imports from other crates\n\nThis is the easy part since we don't have to consider the fixpoint algorithm.", "tree": {"sha": "0a31bfcd8cae51b157893c516115acbe454d3ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a31bfcd8cae51b157893c516115acbe454d3ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e1d739a8063307facf9ff098c26b02005092e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1d739a8063307facf9ff098c26b02005092e05", "html_url": "https://github.com/rust-lang/rust/commit/2e1d739a8063307facf9ff098c26b02005092e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e1d739a8063307facf9ff098c26b02005092e05/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e295682ec23b7f9923cda07fc28d99c987f327", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e295682ec23b7f9923cda07fc28d99c987f327", "html_url": "https://github.com/rust-lang/rust/commit/c1e295682ec23b7f9923cda07fc28d99c987f327"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "50d4e824cd797299edc5af3f1637829fe05fff8a", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=2e1d739a8063307facf9ff098c26b02005092e05", "patch": "@@ -5,4 +5,5 @@ test_utils::marks!(\n     type_var_cycles_resolve_as_possible\n     type_var_resolves_to_int_var\n     glob_enum\n+    glob_across_crates\n );"}, {"sha": "2442e754e5a29a5810727316058e5c2c8a40dcb5", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=2e1d739a8063307facf9ff098c26b02005092e05", "patch": "@@ -276,12 +276,25 @@ where\n             log::debug!(\"glob import: {:?}\", import);\n             match def.take_types() {\n                 Some(ModuleDef::Module(m)) => {\n-                    // TODO\n+                    if m.krate != self.krate {\n+                        tested_by!(glob_across_crates);\n+                        // glob import from other crate => we can just import everything once\n+                        let item_map = self.db.item_map(m.krate);\n+                        let scope = &item_map[m.module_id];\n+                        self.update(module_id, |items| {\n+                            // TODO: handle shadowing and visibility\n+                            items.items.extend(\n+                                scope.items.iter().map(|(name, res)| (name.clone(), res.clone())),\n+                            );\n+                        });\n+                    }\n                 }\n                 Some(ModuleDef::Enum(e)) => {\n                     tested_by!(glob_enum);\n+                    // glob import from enum => just import all the variants\n                     let variants = e.variants(self.db);\n-                    let resolutions = variants.into_iter()\n+                    let resolutions = variants\n+                        .into_iter()\n                         .filter_map(|variant| {\n                             let res = Resolution {\n                                 def: PerNs::both(variant.into(), e.into()),"}, {"sha": "9c0e4ef29368473c2afe53cefd38f59e6ee22155", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1d739a8063307facf9ff098c26b02005092e05/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=2e1d739a8063307facf9ff098c26b02005092e05", "patch": "@@ -251,6 +251,7 @@ fn glob_enum() {\n \n #[test]\n fn glob_across_crates() {\n+    covers!(glob_across_crates);\n     let (mut db, sr) = MockDatabase::with_files(\n         \"\n         //- /main.rs"}]}