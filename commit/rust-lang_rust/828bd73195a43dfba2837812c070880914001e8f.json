{"sha": "828bd73195a43dfba2837812c070880914001e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOGJkNzMxOTVhNDNkZmJhMjgzNzgxMmMwNzA4ODA5MTQwMDFlOGY=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-06T16:02:15Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-06T16:02:15Z"}, "message": "Resolve local names first", "tree": {"sha": "0de1dc7603e1a50acc71041d1092e120cb565f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de1dc7603e1a50acc71041d1092e120cb565f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828bd73195a43dfba2837812c070880914001e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828bd73195a43dfba2837812c070880914001e8f", "html_url": "https://github.com/rust-lang/rust/commit/828bd73195a43dfba2837812c070880914001e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828bd73195a43dfba2837812c070880914001e8f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d4c767879913271bf01912f12c7f8f176c7755d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4c767879913271bf01912f12c7f8f176c7755d", "html_url": "https://github.com/rust-lang/rust/commit/1d4c767879913271bf01912f12c7f8f176c7755d"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "517867e86708fbbe8c72bf7ced6abca28f20a941", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=828bd73195a43dfba2837812c070880914001e8f", "patch": "@@ -199,11 +199,11 @@ impl AnalysisImpl {\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n \n             // First try to resolve the symbol locally\n-            if let Some(name) = resolve_local_name(&file, offset, name_ref) {\n-                let vec: Vec<(FileId, FileSymbol)>::new();\n+            if let Some((name, range)) = resolve_local_name(&file, offset, name_ref) {\n+                let mut vec = vec![];\n                 vec.push((file_id, FileSymbol {\n-                    name: name.text(),\n-                    node_range: name.syntax().range(),\n+                    name,\n+                    node_range: range,\n                     kind : NAME\n                 }));\n "}, {"sha": "2a801f7da1ec2ecffdb0ed67f0dfdf3ca3b8857e", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=828bd73195a43dfba2837812c070880914001e8f", "patch": "@@ -19,7 +19,7 @@ mod scope;\n mod test_utils;\n \n use ra_syntax::{\n-    File, TextUnit, TextRange, SyntaxNodeRef,\n+    File, TextUnit, TextRange, SmolStr, SyntaxNodeRef,\n     ast::{self, AstNode, NameOwner},\n     algo::find_leaf_at_offset,\n     SyntaxKind::{self, *},\n@@ -164,12 +164,12 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n         .next()\n }\n \n-pub fn resolve_local_name<'a>(file: &'a File, offset: TextUnit, name_ref: ast::NameRef) -> Option<ast::Name<'a>> {\n+pub fn resolve_local_name(file: &File, offset: TextUnit, name_ref: ast::NameRef) -> Option<(SmolStr, TextRange)> {\n     let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), offset)?;\n     let scopes = scope::FnScopes::new(fn_def);\n-\n-    // TODO: This doesn't work because of scopes lifetime\n-    scope::resolve_local_name(name_ref, &scopes)\n+    let scope_entry = scope::resolve_local_name(name_ref, &scopes)?;\n+    let name = scope_entry.ast().name()?;\n+    Some((scope_entry.name(), name.syntax().range()))\n }\n \n #[cfg(test)]"}, {"sha": "67eb8e2abde41b7d66f75294c728c64f608ed931", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828bd73195a43dfba2837812c070880914001e8f/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=828bd73195a43dfba2837812c070880914001e8f", "patch": "@@ -89,7 +89,7 @@ impl ScopeEntry {\n             .unwrap()\n             .text()\n     }\n-    fn ast(&self) -> ast::BindPat {\n+    pub fn ast(&self) -> ast::BindPat {\n         ast::BindPat::cast(self.syntax.borrowed())\n             .unwrap()\n     }\n@@ -241,16 +241,15 @@ struct ScopeData {\n     entries: Vec<ScopeEntry>\n }\n \n-pub fn resolve_local_name<'a>(name_ref: ast::NameRef, scopes: &'a FnScopes) -> Option<ast::Name<'a>> {\n+pub fn resolve_local_name<'a>(name_ref: ast::NameRef, scopes: &'a FnScopes) -> Option<&'a ScopeEntry> {\n     use std::collections::HashSet;\n \n     let mut shadowed = HashSet::new();\n-    let names = scopes.scope_chain(name_ref.syntax())\n+    scopes.scope_chain(name_ref.syntax())\n         .flat_map(|scope| scopes.entries(scope).iter())\n         .filter(|entry| shadowed.insert(entry.name()))\n         .filter(|entry| entry.name() == name_ref.text())\n-        .nth(0)?;\n-    names.ast().name()\n+        .nth(0)\n }\n \n #[cfg(test)]\n@@ -365,7 +364,7 @@ mod tests {\n \n         let scopes = FnScopes::new(fn_def);\n \n-        let local_name = resolve_local_name(name_ref, &scopes).unwrap();\n+        let local_name = resolve_local_name(name_ref, &scopes).unwrap().ast().name().unwrap();\n \n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into()).unwrap();\n         assert_eq!(local_name.syntax().range(), expected_name.syntax().range());"}]}