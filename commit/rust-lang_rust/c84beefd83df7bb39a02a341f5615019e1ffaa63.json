{"sha": "c84beefd83df7bb39a02a341f5615019e1ffaa63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NGJlZWZkODNkZjdiYjM5YTAyYTM0MWY1NjE1MDE5ZTFmZmFhNjM=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-20T13:49:08Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-08-12T09:11:43Z"}, "message": "Add associated functions that have custom linkage to `reachable_set`", "tree": {"sha": "0b420757c1f88a4fdc8f8c8968d6c87a0412d0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b420757c1f88a4fdc8f8c8968d6c87a0412d0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84beefd83df7bb39a02a341f5615019e1ffaa63", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYRTlzxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhQcgD6AjCzzISjXH8eMqBp3Jscr+dY7PeT\nh1i3OLWS3XSDOgsBAL85Z7bKxUrdoI6oQUsg20/c4tIddIRL0O2g+tgm0RoB\n=xVqU\n-----END PGP SIGNATURE-----", "payload": "tree 0b420757c1f88a4fdc8f8c8968d6c87a0412d0db\nparent eb2226b1f174f3cc644275ef8663be6295a7f704\nauthor hyd-dev <yd-huang@outlook.com> 1624196948 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1628759503 +0800\n\nAdd associated functions that have custom linkage to `reachable_set`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84beefd83df7bb39a02a341f5615019e1ffaa63", "html_url": "https://github.com/rust-lang/rust/commit/c84beefd83df7bb39a02a341f5615019e1ffaa63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84beefd83df7bb39a02a341f5615019e1ffaa63/comments", "author": null, "committer": null, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "963153a01a080e3f785e28b5338077ae89c90ff3", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c84beefd83df7bb39a02a341f5615019e1ffaa63/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84beefd83df7bb39a02a341f5615019e1ffaa63/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c84beefd83df7bb39a02a341f5615019e1ffaa63", "patch": "@@ -211,13 +211,15 @@ impl<'tcx> ReachableContext<'tcx> {\n         if !self.any_library {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n-            if let Node::Item(item) = *node {\n-                let reachable = if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-                    sig.header.abi != Abi::Rust\n-                } else {\n-                    false\n-                };\n-                let codegen_attrs = self.tcx.codegen_fn_attrs(item.def_id);\n+            if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), def_id, .. })\n+            | Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Fn(sig, ..),\n+                def_id,\n+                ..\n+            }) = *node\n+            {\n+                let reachable = sig.header.abi != Abi::Rust;\n+                let codegen_attrs = self.tcx.codegen_fn_attrs(*def_id);\n                 let is_extern = codegen_attrs.contains_extern_indicator();\n                 let std_internal =\n                     codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n@@ -335,17 +337,23 @@ struct CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     worklist: &'a mut Vec<LocalDefId>,\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n+impl CollectPrivateImplItemsVisitor<'_, '_> {\n+    fn push_to_worklist_if_has_custom_linkage(&mut self, def_id: LocalDefId) {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        let codegen_attrs = self.tcx.codegen_fn_attrs(item.def_id);\n+        let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n         if codegen_attrs.contains_extern_indicator()\n             || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n         {\n-            self.worklist.push(item.def_id);\n+            self.worklist.push(def_id);\n         }\n+    }\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n+        self.push_to_worklist_if_has_custom_linkage(item.def_id);\n \n         // We need only trait impls here, not inherent impls, and only non-exported ones\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), ref items, .. }) =\n@@ -375,8 +383,8 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n \n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n-        // processed in visit_item above\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n+        self.push_to_worklist_if_has_custom_linkage(impl_item.def_id);\n     }\n \n     fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {"}, {"sha": "2ef161edf2990f3f4c41a897ce8819244045ac17", "filename": "src/test/ui/auxiliary/no-mangle-associated-fn.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84beefd83df7bb39a02a341f5615019e1ffaa63/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84beefd83df7bb39a02a341f5615019e1ffaa63/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs?ref=c84beefd83df7bb39a02a341f5615019e1ffaa63", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+\n+struct Bar;\n+\n+impl Bar {\n+    #[no_mangle]\n+    fn bar() -> u8 {\n+        2\n+    }\n+}"}, {"sha": "e9c621914b2132f3086ff17e8a057b27e59c3c0d", "filename": "src/test/ui/no-mangle-associated-fn.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c84beefd83df7bb39a02a341f5615019e1ffaa63/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84beefd83df7bb39a02a341f5615019e1ffaa63/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs?ref=c84beefd83df7bb39a02a341f5615019e1ffaa63", "patch": "@@ -0,0 +1,22 @@\n+// aux-build: no-mangle-associated-fn.rs\n+// run-pass\n+\n+extern crate no_mangle_associated_fn;\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    fn foo() -> u8 {\n+        1\n+    }\n+}\n+\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo() -> u8;\n+        fn bar() -> u8;\n+    }\n+    assert_eq!(unsafe { foo() }, 1);\n+    assert_eq!(unsafe { bar() }, 2);\n+}"}]}