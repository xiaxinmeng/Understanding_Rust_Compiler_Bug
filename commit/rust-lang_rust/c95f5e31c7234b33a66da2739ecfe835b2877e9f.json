{"sha": "c95f5e31c7234b33a66da2739ecfe835b2877e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NWY1ZTMxYzcyMzRiMzNhNjZkYTI3MzllY2ZlODM1YjI4NzdlOWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-29T12:40:07Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-29T12:55:29Z"}, "message": "bootstrap: Don't add LLVM's bin directory to the PATH for tool invocations.", "tree": {"sha": "bdf83ab3b522bf96fe68966c89e1a743412f84b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf83ab3b522bf96fe68966c89e1a743412f84b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c95f5e31c7234b33a66da2739ecfe835b2877e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c95f5e31c7234b33a66da2739ecfe835b2877e9f", "html_url": "https://github.com/rust-lang/rust/commit/c95f5e31c7234b33a66da2739ecfe835b2877e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c95f5e31c7234b33a66da2739ecfe835b2877e9f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29cf3f54ab937b56dd1655a384bbf4941f9f1124", "url": "https://api.github.com/repos/rust-lang/rust/commits/29cf3f54ab937b56dd1655a384bbf4941f9f1124", "html_url": "https://github.com/rust-lang/rust/commit/29cf3f54ab937b56dd1655a384bbf4941f9f1124"}], "stats": {"total": 73, "additions": 11, "deletions": 62}, "files": [{"sha": "c23ddbdbc6810fe1321b15072405c6735c0facb1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c95f5e31c7234b33a66da2739ecfe835b2877e9f", "patch": "@@ -9,7 +9,6 @@ use crate::Compiler;\n use crate::builder::{Step, RunConfig, ShouldRun, Builder};\n use crate::util::{exe, add_lib_path};\n use crate::compile;\n-use crate::native;\n use crate::channel::GitInfo;\n use crate::channel;\n use crate::cache::Interned;\n@@ -698,56 +697,6 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        // Add the llvm/bin directory to PATH since it contains lots of\n-        // useful, platform-independent tools\n-        if tool.uses_llvm_tools() && !self.config.dry_run {\n-            let mut additional_paths = vec![];\n-\n-            if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-                additional_paths.push(llvm_bin_path);\n-            }\n-\n-            // If LLD is available, add that too.\n-            if self.config.lld_enabled {\n-                let lld_install_root = self.ensure(native::Lld {\n-                    target: self.config.build,\n-                });\n-\n-                let lld_bin_path = lld_install_root.join(\"bin\");\n-                additional_paths.push(lld_bin_path);\n-            }\n-\n-            if host.contains(\"windows\") {\n-                // On Windows, PATH and the dynamic library path are the same,\n-                // so we just add the LLVM bin path to lib_path\n-                lib_paths.extend(additional_paths);\n-            } else {\n-                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                let new_path = env::join_paths(additional_paths.into_iter()\n-                        .chain(env::split_paths(&old_path)))\n-                    .expect(\"Could not add LLVM bin path to PATH\");\n-                cmd.env(\"PATH\", new_path);\n-            }\n-        }\n-\n         add_lib_path(lib_paths, cmd);\n     }\n-\n-    fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled() {\n-            let llvm_config = self.ensure(native::Llvm {\n-                target: self.config.build,\n-                emscripten: false,\n-            });\n-\n-            // Add the llvm/bin directory to PATH since it contains lots of\n-            // useful, platform-independent tools\n-            let llvm_bin_path = llvm_config.parent()\n-                .expect(\"Expected llvm-config to be contained in directory\");\n-            assert!(llvm_bin_path.is_dir());\n-            Some(llvm_bin_path.to_path_buf())\n-        } else {\n-            None\n-        }\n-    }\n }"}, {"sha": "3ca2a8afad0b129025e5bce15436c39df7c626ad", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=c95f5e31c7234b33a66da2739ecfe835b2877e9f", "patch": "@@ -9,17 +9,17 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Clinker-plugin-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n+\t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n \t# Make sure we don't find a call instruction to the function we expect to\n \t# always be inlined.\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n \t# As a sanity check, make sure we do find a call instruction to a\n \t# non-inlined function\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n \n rust-executable:\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n+\t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}, {"sha": "f70b411d747e71bcc7d35c42b00a455eac70a067", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=c95f5e31c7234b33a66da2739ecfe835b2877e9f", "patch": "@@ -12,7 +12,7 @@ all: staticlib.rs upstream.rs\n \n \t# Check No LTO\n \t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); \"$(LLVM_BIN_DIR)\"/llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n@@ -22,7 +22,7 @@ all: staticlib.rs upstream.rs\n \t# Check ThinLTO\n \t$(RUSTC) upstream.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin\n \t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); \"$(LLVM_BIN_DIR)\"/llvm-ar x ./staticlib.a)\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n else"}, {"sha": "b4394cb5b40797050cecf7a6452f55633a1b5b4b", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=c95f5e31c7234b33a66da2739ecfe835b2877e9f", "patch": "@@ -10,8 +10,8 @@ ifndef IS_WINDOWS\n # -Clinker-plugin-lto.\n \n # this only succeeds for bitcode files\n-ASSERT_IS_BITCODE_OBJ=($(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-bcanalyzer $(1))\n-EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x $(1))\n+ASSERT_IS_BITCODE_OBJ=(\"$(LLVM_BIN_DIR)\"/llvm-bcanalyzer $(1))\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; \"$(LLVM_BIN_DIR)\"/llvm-ar x $(1))\n \n BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1\n BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1 --emit=obj"}, {"sha": "ac61c97dfc504924bb62f3d05af8d8c00be4ea57", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c95f5e31c7234b33a66da2739ecfe835b2877e9f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=c95f5e31c7234b33a66da2739ecfe835b2877e9f", "patch": "@@ -29,7 +29,7 @@ all:\n \t# Run it in order to generate some profiling data\n \t$(call RUN,main some-argument) || exit 1\n \t# Postprocess the profiling data so it can be used by the compiler\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-profdata merge \\\n+\t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n \t\t-o \"$(TMPDIR)\"/merged.profdata \\\n \t\t\"$(TMPDIR)\"/default_*.profraw\n \t# Compile the test program again, making use of the profiling data"}]}