{"sha": "b10beb3233afcb8622246fd0d5ae4b64e2281f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMGJlYjMyMzNhZmNiODYyMjI0NmZkMGQ1YWU0YjY0ZTIyODFmMjA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T15:08:59Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T15:11:33Z"}, "message": "updates to existing ui/borrowck tests.", "tree": {"sha": "fab18d868b46a61046a43ed032236f8f57e89865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab18d868b46a61046a43ed032236f8f57e89865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10beb3233afcb8622246fd0d5ae4b64e2281f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10beb3233afcb8622246fd0d5ae4b64e2281f20", "html_url": "https://github.com/rust-lang/rust/commit/b10beb3233afcb8622246fd0d5ae4b64e2281f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10beb3233afcb8622246fd0d5ae4b64e2281f20/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42297390386a9b3f55fec7299b27ee51f41796e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/42297390386a9b3f55fec7299b27ee51f41796e3", "html_url": "https://github.com/rust-lang/rust/commit/42297390386a9b3f55fec7299b27ee51f41796e3"}], "stats": {"total": 279, "additions": 137, "deletions": 142}, "files": [{"sha": "59af97d9f13db6101307ab788f5a59ffd574b780", "filename": "src/test/ui/borrowck/assign_mutable_fields.nll.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,9 +1,15 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/assign_mutable_fields.rs:29:10\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:19:5\n    |\n-LL |     drop(x); //~ ERROR\n-   |          ^ use of possibly uninitialized `x`\n+LL |     x.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error: aborting due to previous error\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:27:5\n+   |\n+LL |     x.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "81d9e958e28e20710504f549718853ee920515dd", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,12 +1,12 @@\n-error[E0382]: use of moved value: `*x.b`\n+error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:18:10\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n    |          ^^^^ value used here after move\n \n-error[E0382]: use of moved value: `*x.b`\n+error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:24:10\n    |\n LL |     let y = A { a: 3, .. x };\n@@ -104,7 +104,25 @@ LL |     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error: aborting due to 11 previous errors\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:91:5\n+   |\n+LL |     x.a = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:97:5\n+   |\n+LL |     x.a = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:104:5\n+   |\n+LL |     x.b = box 1;\n+   |     ^^^ use of possibly uninitialized `x`\n+\n+error: aborting due to 14 previous errors\n \n-Some errors occurred: E0382, E0499, E0505.\n-For more information about an error, try `rustc --explain E0382`.\n+Some errors occurred: E0381, E0382, E0499, E0505.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "e602597844457ccd1c8a199e6f2e168441a77cf3", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: use of possibly uninitialized variable: `origin.y`\n+error[E0381]: use of possibly uninitialized variable: `origin`\n   --> $DIR/borrowck-init-in-fru.rs:22:5\n    |\n LL |     origin = point {x: 10,.. origin};"}, {"sha": "e602597844457ccd1c8a199e6f2e168441a77cf3", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: use of possibly uninitialized variable: `origin.y`\n+error[E0381]: use of possibly uninitialized variable: `origin`\n   --> $DIR/borrowck-init-in-fru.rs:22:5\n    |\n LL |     origin = point {x: 10,.. origin};"}, {"sha": "97eb83d0f14efedb1c37a26edfa8a6f608ab338a", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: use of possibly uninitialized variable: `a.x`\n+error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-field-access.rs:34:13\n    |\n LL |     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n    |             ^^^ use of possibly uninitialized `a.x`\n \n-error[E0382]: use of moved value: `line1.origin.x`\n+error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:39:13\n    |\n LL |     let _moved = line1.origin;"}, {"sha": "97eb83d0f14efedb1c37a26edfa8a6f608ab338a", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: use of possibly uninitialized variable: `a.x`\n+error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/borrowck-uninit-field-access.rs:34:13\n    |\n LL |     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n    |             ^^^ use of possibly uninitialized `a.x`\n \n-error[E0382]: use of moved value: `line1.origin.x`\n+error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:39:13\n    |\n LL |     let _moved = line1.origin;"}, {"sha": "e9caf7d9e1e7e5f5c3203182215eb00df3619ffc", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.ast.nll.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,33 +1,45 @@\n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:21:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:25:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:29:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `a.y`\n-  --> $DIR/borrowck-uninit-ref-chain.rs:46:14\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:34:5\n    |\n-LL |     let _b = &a.y; //[ast]~ ERROR use of possibly uninitialized variable: `a.y` [E0381]\n-   |              ^^^^ use of possibly uninitialized `a.y`\n+LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^ use of possibly uninitialized `a`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**a.y`\n-  --> $DIR/borrowck-uninit-ref-chain.rs:51:14\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:39:5\n    |\n-LL |     let _b = &**a.y; //[ast]~ ERROR use of possibly uninitialized variable: `**a.y` [E0381]\n-   |              ^^^^^^ use of possibly uninitialized `**a.y`\n+LL |     a.x = &&0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n-error: aborting due to 5 previous errors\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:45:5\n+   |\n+LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^ use of possibly uninitialized `a`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:50:5\n+   |\n+LL |     a.x = &&0;       //[mir]~ assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^^^ use of possibly uninitialized `a`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "e9caf7d9e1e7e5f5c3203182215eb00df3619ffc", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.mir.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,33 +1,45 @@\n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:21:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:25:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-ref-chain.rs:29:14\n    |\n LL |     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n    |              ^^^^ use of possibly uninitialized `**x`\n \n-error[E0381]: borrow of possibly uninitialized variable: `a.y`\n-  --> $DIR/borrowck-uninit-ref-chain.rs:46:14\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:34:5\n    |\n-LL |     let _b = &a.y; //[ast]~ ERROR use of possibly uninitialized variable: `a.y` [E0381]\n-   |              ^^^^ use of possibly uninitialized `a.y`\n+LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^ use of possibly uninitialized `a`\n \n-error[E0381]: borrow of possibly uninitialized variable: `**a.y`\n-  --> $DIR/borrowck-uninit-ref-chain.rs:51:14\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:39:5\n    |\n-LL |     let _b = &**a.y; //[ast]~ ERROR use of possibly uninitialized variable: `**a.y` [E0381]\n-   |              ^^^^^^ use of possibly uninitialized `**a.y`\n+LL |     a.x = &&0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^^^ use of possibly uninitialized `a`\n \n-error: aborting due to 5 previous errors\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:45:5\n+   |\n+LL |     a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^ use of possibly uninitialized `a`\n+\n+error[E0381]: assign to part of possibly uninitialized variable: `a`\n+  --> $DIR/borrowck-uninit-ref-chain.rs:50:5\n+   |\n+LL |     a.x = &&0;       //[mir]~ assign to part of possibly uninitialized variable: `a` [E0381]\n+   |     ^^^^^^^^^ use of possibly uninitialized `a`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "dc9d8405102eea4fba7cdff22b460d301381917d", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.rs?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -31,23 +31,23 @@ fn main() {\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;\n+    a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n     let _b = &a.x; //[ast]~ ERROR use of possibly uninitialized variable: `a.x` [E0381]\n-                   // (deliberately *not* an error under MIR-borrowck)\n+\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;\n+    a.x = &&0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n     let _b = &**a.x; //[ast]~ ERROR use of possibly uninitialized variable: `**a.x` [E0381]\n-                     // (deliberately *not* an error under MIR-borrowck)\n+\n \n \n     let mut a: S<i32, i32>;\n-    a.x = 0;\n+    a.x = 0;       //[mir]~ ERROR assign to part of possibly uninitialized variable: `a` [E0381]\n     let _b = &a.y; //[ast]~ ERROR use of possibly uninitialized variable: `a.y` [E0381]\n-                   //[mir]~^ ERROR [E0381]\n+\n \n     let mut a: S<&&i32, &&i32>;\n-    a.x = &&0;\n+    a.x = &&0;       //[mir]~ assign to part of possibly uninitialized variable: `a` [E0381]\n     let _b = &**a.y; //[ast]~ ERROR use of possibly uninitialized variable: `**a.y` [E0381]\n-                     //[mir]~^ ERROR [E0381]\n+\n }"}, {"sha": "423a44514db81525a229aac04a32ca4f7e08bf8d", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0382]: use of moved value: `u.a`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move-assign.rs:27:21\n    |\n LL |             let a = u.a;\n@@ -8,7 +8,7 @@ LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u.a`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move-assign.rs:33:21\n    |\n LL |             let a = u.a;\n@@ -19,7 +19,7 @@ LL |             let a = u.a; // OK\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u.a`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move-assign.rs:39:21\n    |\n LL |             let a = u.a;"}, {"sha": "8597117dbcc8a0099d72a9268ec49b5599d375a3", "filename": "src/test/ui/borrowck/borrowck-union-move.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0382]: use of moved value: `u.n1`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:36:21\n    |\n LL |             let a = u.n1;\n@@ -18,7 +18,7 @@ LL |             let a = u; //~ ERROR use of partially moved value: `u`\n    |\n    = note: move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u.n2`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:46:21\n    |\n LL |             let a = u.n1;\n@@ -28,7 +28,7 @@ LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n    |\n    = note: move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u.n`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:73:21\n    |\n LL |             let a = u.n;\n@@ -38,7 +38,7 @@ LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n    |\n    = note: move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u.c`\n+error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:78:21\n    |\n LL |             let a = u.n;"}, {"sha": "94a7a4866e6b90f3aa304e1c6130266939a3a1e0", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.nll.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,9 +1,15 @@\n-error[E0381]: use of possibly uninitialized variable: `u.a`\n-  --> $DIR/borrowck-union-uninitialized.rs:26:18\n+error[E0381]: assign to part of possibly uninitialized variable: `s`\n+  --> $DIR/borrowck-union-uninitialized.rs:23:9\n    |\n-LL |         let ua = u.a; //~ ERROR use of possibly uninitialized variable: `u.a`\n-   |                  ^^^ use of possibly uninitialized `u.a`\n+LL |         s.a = 0;\n+   |         ^^^^^^^ use of possibly uninitialized `s`\n \n-error: aborting due to previous error\n+error[E0381]: assign to part of possibly uninitialized variable: `u`\n+  --> $DIR/borrowck-union-uninitialized.rs:24:9\n+   |\n+LL |         u.a = 0;\n+   |         ^^^^^^^ use of possibly uninitialized `u`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "502978f25be9435643614686eb486524055a9736", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: use of possibly uninitialized variable: `*w`\n+error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:16:5\n    |\n LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n    |     ^^^^ use of possibly uninitialized `*w`\n \n-error[E0381]: use of possibly uninitialized variable: `*w`\n+error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:20:5\n    |\n LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]"}, {"sha": "502978f25be9435643614686eb486524055a9736", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,10 +1,10 @@\n-error[E0381]: use of possibly uninitialized variable: `*w`\n+error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:16:5\n    |\n LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n    |     ^^^^ use of possibly uninitialized `*w`\n \n-error[E0381]: use of possibly uninitialized variable: `*w`\n+error[E0381]: use of possibly uninitialized variable: `w`\n   --> $DIR/borrowck-use-in-index-lvalue.rs:20:5\n    |\n LL |     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]"}, {"sha": "22e95ca3ad0e2ee922383395c2fa6b058361126f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: borrow of possibly uninitialized variable: `*x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:22:13\n    |\n LL |     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`"}, {"sha": "22e95ca3ad0e2ee922383395c2fa6b058361126f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: borrow of possibly uninitialized variable: `*x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:22:13\n    |\n LL |     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`"}, {"sha": "11897f50910e17df1c4d6965aa57dca33c1b8519", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.ast.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: borrow of possibly uninitialized variable: `*x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:20:13\n    |\n LL |     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]"}, {"sha": "11897f50910e17df1c4d6965aa57dca33c1b8519", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.mir.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: borrow of possibly uninitialized variable: `*x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:20:13\n    |\n LL |     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]"}, {"sha": "1f0938dd3d27ba168b1fb2421aa0fcd8fe965c22", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.nll.stderr", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,44 +1,15 @@\n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:17:5\n    |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n-   |     ^^^^^^^ cannot assign\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n-  --> $DIR/reassignment_immutable_fields.rs:18:5\n-   |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-LL |     x.1 = 22; //~ ERROR\n-   |     ^^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:25:5\n    |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n-  --> $DIR/reassignment_immutable_fields.rs:26:5\n-   |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n-LL |     x.1 = 22; //~ ERROR\n-   |     ^^^^^^^^ cannot assign\n-\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/reassignment_immutable_fields.rs:27:10\n-   |\n-LL |     drop(x); //~ ERROR\n-   |          ^ use of possibly uninitialized `x`\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0381, E0594.\n-For more information about an error, try `rustc --explain E0381`.\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "7da9dbfc088cb5a0f15ef80b27272f918117cc78", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.nll.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -1,20 +1,9 @@\n-error[E0594]: cannot assign to `x.a`, as `x` is not declared as mutable\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:22:5\n    |\n-LL |     let x: Foo;\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.a = 1;  //~ ERROR\n-   |     ^^^^^^^ cannot assign\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n-  --> $DIR/reassignment_immutable_fields_overlapping.rs:23:5\n-   |\n-LL |     let x: Foo;\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.a = 1;  //~ ERROR\n-LL |     x.b = 22; //~ ERROR\n-   |     ^^^^^^^^ cannot assign\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0594`.\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "96677be724131274f26565b030aa8085b25eea1e", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.nll.stderr", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b10beb3233afcb8622246fd0d5ae4b64e2281f20/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.nll.stderr?ref=b10beb3233afcb8622246fd0d5ae4b64e2281f20", "patch": "@@ -7,32 +7,13 @@ LL |     x = (22, 44);\n LL |     x.0 = 1; //~ ERROR\n    |     ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields_twice.rs:22:5\n    |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/reassignment_immutable_fields_twice.rs:23:5\n-   |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.0 = 1; //~ ERROR\n-LL |     x.0 = 22; //~ ERROR\n-   |     ^^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x.1`, as `x` is not declared as mutable\n-  --> $DIR/reassignment_immutable_fields_twice.rs:24:5\n-   |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n-...\n-LL |     x.1 = 44; //~ ERROR\n-   |     ^^^^^^^^ cannot assign\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0594`.\n+Some errors occurred: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}]}