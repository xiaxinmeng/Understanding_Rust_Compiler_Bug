{"sha": "83530120eabdaf770d5d2f19c7fd656cf59efdbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTMwMTIwZWFiZGFmNzcwZDVkMmYxOWM3ZmQ2NTZjZjU5ZWZkYmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-23T20:20:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-08T14:21:06Z"}, "message": "Prepare everything for distributing miri via rustup", "tree": {"sha": "9d54f114e35582f681bc2f0773eb79ebf9ad389f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d54f114e35582f681bc2f0773eb79ebf9ad389f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83530120eabdaf770d5d2f19c7fd656cf59efdbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83530120eabdaf770d5d2f19c7fd656cf59efdbb", "html_url": "https://github.com/rust-lang/rust/commit/83530120eabdaf770d5d2f19c7fd656cf59efdbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83530120eabdaf770d5d2f19c7fd656cf59efdbb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ede4cb7fee65e2d797a7d02abb0d199f5ab377", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ede4cb7fee65e2d797a7d02abb0d199f5ab377", "html_url": "https://github.com/rust-lang/rust/commit/67ede4cb7fee65e2d797a7d02abb0d199f5ab377"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "9c58f5b179fd8b2afdadd48d4e4c31137b8157e1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=83530120eabdaf770d5d2f19c7fd656cf59efdbb", "patch": "@@ -449,6 +449,7 @@ impl<'a> Builder<'a> {\n                 dist::Rls,\n                 dist::Rustfmt,\n                 dist::Clippy,\n+                dist::Miri,\n                 dist::LlvmTools,\n                 dist::Lldb,\n                 dist::Extended,\n@@ -461,6 +462,7 @@ impl<'a> Builder<'a> {\n                 install::Rls,\n                 install::Rustfmt,\n                 install::Clippy,\n+                install::Miri,\n                 install::Analysis,\n                 install::Src,\n                 install::Rustc"}, {"sha": "edac90b0495f1d29d49a1ad6f41012218dd1c43b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=83530120eabdaf770d5d2f19c7fd656cf59efdbb", "patch": "@@ -1275,6 +1275,90 @@ impl Step for Clippy {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Miri {\n+    pub stage: u32,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Miri {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"miri\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let stage = self.stage;\n+        let target = self.target;\n+        assert!(builder.config.extended);\n+\n+        builder.info(&format!(\"Dist miri stage{} ({})\", stage, target));\n+        let src = builder.src.join(\"src/tools/miri\");\n+        let release_num = builder.release_num(\"miri\");\n+        let name = pkgname(builder, \"miri\");\n+        let version = builder.miri_info.version(builder, &release_num);\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"miri-image\");\n+        drop(fs::remove_dir_all(&image));\n+        builder.create_dir(&image);\n+\n+        // Prepare the image directory\n+        // We expect miri to build, because we've exited this step above if tool\n+        // state for miri isn't testing.\n+        let miri = builder.ensure(tool::Miri {\n+            compiler: builder.compiler(stage, builder.config.build),\n+            target, extra_features: Vec::new()\n+        }).or_else(|| { missing_tool(\"miri\", builder.build.config.missing_tools); None })?;\n+        let cargomiri = builder.ensure(tool::CargoMiri {\n+            compiler: builder.compiler(stage, builder.config.build),\n+            target, extra_features: Vec::new()\n+        }).or_else(|| { missing_tool(\"cargo miri\", builder.build.config.missing_tools); None })?;\n+\n+        builder.install(&miri, &image.join(\"bin\"), 0o755);\n+        builder.install(&cargomiri, &image.join(\"bin\"), 0o755);\n+        let doc = image.join(\"share/doc/miri\");\n+        builder.install(&src.join(\"README.md\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"miri-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        t!(fs::create_dir_all(&overlay));\n+        builder.install(&src.join(\"README.md\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+        builder.create(&overlay.join(\"version\"), &version);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=miri-ready-to-serve.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(\"--non-installed-overlay\").arg(&overlay)\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+           .arg(\"--component-name=miri-preview\");\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustfmt {\n     pub stage: u32,"}, {"sha": "fffb0ba488f6f8fbbd81b451b87ccd42dc211d80", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=83530120eabdaf770d5d2f19c7fd656cf59efdbb", "patch": "@@ -32,6 +32,9 @@ pub fn install_rls(builder: &Builder, stage: u32, host: Interned<String>) {\n pub fn install_clippy(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"clippy\", \"clippy\", stage, Some(host));\n }\n+pub fn install_miri(builder: &Builder, stage: u32, host: Interned<String>) {\n+    install_sh(builder, \"miri\", \"miri\", stage, Some(host));\n+}\n \n pub fn install_rustfmt(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"rustfmt\", \"rustfmt\", stage, Some(host));\n@@ -217,6 +220,14 @@ install!((self, builder, _config),\n             builder.info(&format!(\"skipping Install clippy stage{} ({})\", self.stage, self.target));\n         }\n     };\n+    Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n+        if builder.ensure(dist::Clippy { stage: self.stage, target: self.target }).is_some() ||\n+            Self::should_install(builder) {\n+            install_miri(builder, self.stage, self.target);\n+        } else {\n+            builder.info(&format!(\"skipping Install miri stage{} ({})\", self.stage, self.target));\n+        }\n+    };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n             Self::should_install(builder) {"}, {"sha": "2a91aab7c4ac28668d71011971fe4a4f54149ce9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=83530120eabdaf770d5d2f19c7fd656cf59efdbb", "patch": "@@ -253,6 +253,7 @@ pub struct Build {\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n     clippy_info: channel::GitInfo,\n+    miri_info: channel::GitInfo,\n     rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n@@ -374,6 +375,7 @@ impl Build {\n         let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n         let clippy_info = channel::GitInfo::new(&config, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(&config, &src.join(\"src/tools/miri\"));\n         let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n \n         let mut build = Build {\n@@ -396,6 +398,7 @@ impl Build {\n             cargo_info,\n             rls_info,\n             clippy_info,\n+            miri_info,\n             rustfmt_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),"}, {"sha": "af906930145755aadeaafdc9caf470652216a4f3", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83530120eabdaf770d5d2f19c7fd656cf59efdbb/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=83530120eabdaf770d5d2f19c7fd656cf59efdbb", "patch": "@@ -592,6 +592,14 @@ tool_extended!((self, builder),\n         });\n     };\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n+    CargoMiri, clippy, \"src/tools/miri\", \"cargo-miri\", {\n+        // Miri depends on procedural macros (serde), which requires a full host\n+        // compiler to be available, so we need to depend on that.\n+        builder.ensure(compile::Rustc {\n+            compiler: self.compiler,\n+            target: builder.config.build,\n+        });\n+    };\n     Rls, rls, \"src/tools/rls\", \"rls\", {\n         let clippy = builder.ensure(Clippy {\n             compiler: self.compiler,"}]}