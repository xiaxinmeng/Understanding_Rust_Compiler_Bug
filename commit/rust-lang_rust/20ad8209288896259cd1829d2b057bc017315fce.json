{"sha": "20ad8209288896259cd1829d2b057bc017315fce", "node_id": "C_kwDOAAsO6NoAKDIwYWQ4MjA5Mjg4ODk2MjU5Y2QxODI5ZDJiMDU3YmMwMTczMTVmY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T00:21:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T00:21:29Z"}, "message": "Auto merge of #97667 - matthiaskrgr:rollup-5cfxc85, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97502 (rustdoc: Add more test coverage)\n - #97627 (update explicit impls error msg)\n - #97640 (Fix wrong suggestion for adding where clauses)\n - #97645 (don't use a `span_note` for ignored impls)\n - #97655 (Improve documentation for constructors of pinned `Box`es)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "28d89bb23c6d7d07a025faf7453299e6158d5c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d89bb23c6d7d07a025faf7453299e6158d5c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ad8209288896259cd1829d2b057bc017315fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ad8209288896259cd1829d2b057bc017315fce", "html_url": "https://github.com/rust-lang/rust/commit/20ad8209288896259cd1829d2b057bc017315fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ad8209288896259cd1829d2b057bc017315fce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bcd41d4dfeb44360113ab78bc469e2813af952", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bcd41d4dfeb44360113ab78bc469e2813af952", "html_url": "https://github.com/rust-lang/rust/commit/42bcd41d4dfeb44360113ab78bc469e2813af952"}, {"sha": "5b64aab2b60b391cc7c1d7bc4b777d5a2ced8a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b64aab2b60b391cc7c1d7bc4b777d5a2ced8a11", "html_url": "https://github.com/rust-lang/rust/commit/5b64aab2b60b391cc7c1d7bc4b777d5a2ced8a11"}], "stats": {"total": 177, "additions": 126, "deletions": 51}, "files": [{"sha": "519fb7ea2640a5b19d874609a41343dcf7465558", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -722,11 +722,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         traits_str,\n                         is_are\n                     );\n-                    let multispan = ign_traits\n-                        .iter()\n-                        .map(|(_, impl_id)| self.tcx.def_span(*impl_id))\n-                        .collect::<Vec<_>>();\n-                    err.span_note(multispan, &msg);\n+                    err.note(&msg);\n                 }\n                 err.emit();\n             });"}, {"sha": "d0f20022bfbad6cacd7603e721c16ffe85debd2e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -21,7 +21,9 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n-    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n+    self,\n+    subst::{GenericArgKind, SubstsRef},\n+    suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n     GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, ToPredicate, Ty, TyCtxt,\n     TypeFoldable,\n };\n@@ -458,6 +460,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => (false, None),\n         };\n \n+        let generic_args_have_impl_trait = |args: SubstsRef<'tcx>| -> bool {\n+            args.iter().any(|arg| match arg.unpack() {\n+                GenericArgKind::Type(ty) => match ty.kind() {\n+                    ty::Param(param) => param.name.as_str().starts_with(\"impl\"),\n+                    _ => false,\n+                },\n+                _ => false,\n+            })\n+        };\n+\n         // FIXME: Add check for trait bound that is already present, particularly `?Sized` so we\n         //        don't suggest `T: Sized + ?Sized`.\n         let mut hir_id = body_id;\n@@ -588,7 +600,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         | hir::ItemKind::TraitAlias(generics, _)\n                         | hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }),\n                     ..\n-                }) if !param_ty => {\n+                }) if !param_ty\n+                    && !generic_args_have_impl_trait(trait_pred.skip_binder().trait_ref.substs) =>\n+                {\n                     // Missing generic type parameter bound.\n                     let param_name = self_ty.to_string();\n                     let constraint = trait_pred.print_modifiers_and_trait_path().to_string();"}, {"sha": "3903448a00731b25feaa35ef0e42d2cbba2601b4", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -57,7 +57,7 @@ fn enforce_trait_manually_implementable(\n             E0322,\n             \"explicit impls for the `Pointee` trait are not permitted\"\n         )\n-        .span_label(span, \"impl of 'Pointee' not allowed\")\n+        .span_label(span, \"impl of `Pointee` not allowed\")\n         .emit();\n         return;\n     }\n@@ -70,7 +70,7 @@ fn enforce_trait_manually_implementable(\n             E0322,\n             \"explicit impls for the `DiscriminantKind` trait are not permitted\"\n         )\n-        .span_label(span, \"impl of 'DiscriminantKind' not allowed\")\n+        .span_label(span, \"impl of `DiscriminantKind` not allowed\")\n         .emit();\n         return;\n     }\n@@ -83,7 +83,7 @@ fn enforce_trait_manually_implementable(\n             E0322,\n             \"explicit impls for the `Sized` trait are not permitted\"\n         )\n-        .span_label(span, \"impl of 'Sized' not allowed\")\n+        .span_label(span, \"impl of `Sized` not allowed\")\n         .emit();\n         return;\n     }"}, {"sha": "cc395759b207859abb78254bb611a3f7d49a3bb8", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -284,8 +284,13 @@ impl<T> Box<T> {\n         Self::new_zeroed_in(Global)\n     }\n \n-    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n+    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n     /// `x` will be pinned in memory and unable to be moved.\n+    ///\n+    /// Constructing and pinning of the `Box` can also be done in two steps: `Box::pin(x)`\n+    /// does the same as <code>[Box::into_pin]\\([Box::new]\\(x))</code>. Consider using\n+    /// [`into_pin`](Box::into_pin) if you already have a `Box<T>`, or if you want to\n+    /// construct a (pinned) `Box` in a different way than with [`Box::new`].\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[must_use]\n@@ -573,8 +578,13 @@ impl<T, A: Allocator> Box<T, A> {\n         unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }\n     }\n \n-    /// Constructs a new `Pin<Box<T, A>>`. If `T` does not implement `Unpin`, then\n+    /// Constructs a new `Pin<Box<T, A>>`. If `T` does not implement [`Unpin`], then\n     /// `x` will be pinned in memory and unable to be moved.\n+    ///\n+    /// Constructing and pinning of the `Box` can also be done in two steps: `Box::pin_in(x, alloc)`\n+    /// does the same as <code>[Box::into_pin]\\([Box::new_in]\\(x, alloc))</code>. Consider using\n+    /// [`into_pin`](Box::into_pin) if you already have a `Box<T, A>`, or if you want to\n+    /// construct a (pinned) `Box` in a different way than with [`Box::new_in`].\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n@@ -1190,12 +1200,18 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n         unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }\n     }\n \n-    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n+    /// `*boxed` will be pinned in memory and unable to be moved.\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     ///\n     /// This is also available via [`From`].\n     ///\n+    /// Constructing and pinning a `Box` with <code>Box::into_pin([Box::new]\\(x))</code>\n+    /// can also be written more concisely using <code>[Box::pin]\\(x)</code>.\n+    /// This `into_pin` method is useful if you already have a `Box<T>`, or you are\n+    /// constructing a (pinned) `Box` in a different way than with [`Box::new`].\n+    ///\n     /// # Notes\n     ///\n     /// It's not recommended that crates add an impl like `From<Box<T>> for Pin<T>`,\n@@ -1458,9 +1474,17 @@ impl<T: ?Sized, A: Allocator> const From<Box<T, A>> for Pin<Box<T, A>>\n where\n     A: 'static,\n {\n-    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n+    /// `*boxed` will be pinned in memory and unable to be moved.\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// This is also available via [`Box::into_pin`].\n+    ///\n+    /// Constructing and pinning a `Box` with <code><Pin<Box\\<T>>>::from([Box::new]\\(x))</code>\n+    /// can also be written more concisely using <code>[Box::pin]\\(x)</code>.\n+    /// This `From` implementation is useful if you already have a `Box<T>`, or you are\n+    /// constructing a (pinned) `Box` in a different way than with [`Box::new`].\n     fn from(boxed: Box<T, A>) -> Self {\n         Box::into_pin(boxed)\n     }"}, {"sha": "1596f46740e8f3cede3df6837e3495a3050bbe40", "filename": "src/test/rustdoc/nested-modules.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnested-modules.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -0,0 +1,42 @@\n+#![crate_name = \"aCrate\"]\n+\n+mod a_module {\n+    pub fn private_function() {}\n+\n+    pub use a_module::private_function as other_private_function;\n+\n+    pub mod a_nested_module {\n+        // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.a_nested_public_function.html\"]' 'a_nested_public_function'\n+        // @has aCrate/a_nested_module/fn.a_nested_public_function.html 'pub fn a_nested_public_function()'\n+        pub fn a_nested_public_function() {}\n+\n+        // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.another_nested_public_function.html\"]' 'another_nested_public_function'\n+        // @has aCrate/a_nested_module/fn.another_nested_public_function.html 'pub fn another_nested_public_function()'\n+        pub use a_nested_module::a_nested_public_function as another_nested_public_function;\n+    }\n+\n+    // @!has aCrate/a_nested_module/index.html 'yet_another_nested_public_function'\n+    pub use a_nested_module::a_nested_public_function as yet_another_nested_public_function;\n+\n+    // @!has aCrate/a_nested_module/index.html 'one_last_nested_public_function'\n+    pub use a_nested_module::another_nested_public_function as one_last_nested_public_function;\n+}\n+\n+// @!has aCrate/index.html 'a_module'\n+// @has aCrate/index.html '//a[@href=\"a_nested_module/index.html\"]' 'a_nested_module'\n+pub use a_module::a_nested_module;\n+\n+// @has aCrate/index.html '//a[@href=\"fn.a_nested_public_function.html\"]' 'a_nested_public_function'\n+// @has aCrate/index.html '//a[@href=\"fn.another_nested_public_function.html\"]' 'another_nested_public_function'\n+// @has aCrate/index.html '//a[@href=\"fn.yet_another_nested_public_function.html\"]' 'yet_another_nested_public_function'\n+// @has aCrate/index.html '//a[@href=\"fn.one_last_nested_public_function.html\"]' 'one_last_nested_public_function'\n+pub use a_module::{\n+    a_nested_module::{a_nested_public_function, another_nested_public_function},\n+    one_last_nested_public_function, yet_another_nested_public_function,\n+};\n+\n+// @has aCrate/index.html '//a[@href=\"fn.private_function.html\"]' 'private_function'\n+// @!has aCrate/fn.private_function.html 'a_module'\n+// @has aCrate/index.html '//a[@href=\"fn.other_private_function.html\"]' 'other_private_function'\n+// @!has aCrate/fn.other_private_function.html 'a_module'\n+pub use a_module::{other_private_function, private_function};"}, {"sha": "e1e4acd4cd82dbcced8342cf369ff3ab22fd55ac", "filename": "src/test/ui/coherence/coherence-impls-sized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -35,37 +35,37 @@ error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:14:1\n    |\n LL | impl Sized for TestE {}\n-   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:17:1\n    |\n LL | impl Sized for MyType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:20:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:24:1\n    |\n LL | impl Sized for &'static NotSync {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error[E0322]: explicit impls for the `Sized` trait are not permitted\n   --> $DIR/coherence-impls-sized.rs:31:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Sized` not allowed\n \n error: aborting due to 9 previous errors\n "}, {"sha": "58aaf978dc7d675cad5fdbf6df75ac013e298a60", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -5,12 +5,7 @@ LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n-note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/derive-uninhabited-enum-38885.rs:10:10\n-   |\n-LL | #[derive(Debug)]\n-   |          ^^^^^\n-   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n warning: 1 warning emitted\n "}, {"sha": "031b8ce713eb4c9d3fd5e0b88bc296f032cc3905", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -16,38 +16,23 @@ error: field is never read: `f`\n LL | struct B { f: () }\n    |            ^^^^^\n    |\n-note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:9:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n    |            ^^^^^\n    |\n-note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:13:10\n-   |\n-LL | #[derive(Debug)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n    |            ^^^^^\n    |\n-note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:17:10\n-   |\n-LL | #[derive(Debug,Clone)]\n-   |          ^^^^^ ^^^^^\n-   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:21:12"}, {"sha": "38cfd13b9b88e742a10453c06bb392d5e5c7a225", "filename": "src/test/ui/enum-discriminant/forbidden-discriminant-kind-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -2,7 +2,7 @@ error[E0322]: explicit impls for the `DiscriminantKind` trait are not permitted\n   --> $DIR/forbidden-discriminant-kind-impl.rs:9:1\n    |\n LL | impl DiscriminantKind for NewType {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'DiscriminantKind' not allowed\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `DiscriminantKind` not allowed\n \n error: aborting due to previous error\n "}, {"sha": "57f8ca74f83dd4f81fff6dc02264766c46cb0400", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -9,12 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n-note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n-  --> $DIR/unused-variant.rs:3:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n error: aborting due to previous error\n "}, {"sha": "fdc85e9fa89567597824afc1fd3504360e1276a5", "filename": "src/test/ui/traits/issue-97576.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.rs?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -0,0 +1,13 @@\n+struct Foo {\n+    bar: String,\n+}\n+\n+impl Foo {\n+    pub fn new(bar: impl ToString) -> Self {\n+        Self {\n+            bar: bar.into(), //~ ERROR the trait bound `String: From<impl ToString>` is not satisfied\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bdee073d6e39a06c82e3db282f6108dbaaf954b9", "filename": "src/test/ui/traits/issue-97576.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ad8209288896259cd1829d2b057bc017315fce/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr?ref=20ad8209288896259cd1829d2b057bc017315fce", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `String: From<impl ToString>` is not satisfied\n+  --> $DIR/issue-97576.rs:8:22\n+   |\n+LL |             bar: bar.into(),\n+   |                      ^^^^ the trait `From<impl ToString>` is not implemented for `String`\n+   |\n+   = note: required because of the requirements on the impl of `Into<String>` for `impl ToString`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}