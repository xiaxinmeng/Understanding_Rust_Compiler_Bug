{"sha": "030ea0578fb361b66becc898547cec406f3c53ce", "node_id": "C_kwDOAAsO6NoAKDAzMGVhMDU3OGZiMzYxYjY2YmVjYzg5ODU0N2NlYzQwNmYzYzUzY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T20:15:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T20:15:46Z"}, "message": "Rollup merge of #108912 - clubby789:doc-tool-lints, r=Nilstrieb\n\nDocument tool lints\n\nAdd brief doc comments for the internal tool lints so a summary can be seen without needing to open source code", "tree": {"sha": "c08b4c1fe56c6d4ca10a27d87b8a49512b8ff105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08b4c1fe56c6d4ca10a27d87b8a49512b8ff105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030ea0578fb361b66becc898547cec406f3c53ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC4/yCRBK7hj4Ov3rIwAApgEIAG8rISu+AACSqlQfcbzoN1IR\nupLnTkhSidT5SvqQXSTVjQxMAVbDjKpCC8RGInmsZrmMwvdodcq6UYdVS8UQA0pV\nCHL8AI7K5VutokyfZ6hp6c48vCGpTlA50OYFzuJChJT301tpvtV8Dt3YsvT3l52u\nnk6OmJHcX5Ge3TDyl81Yb2tn7uHlBYs6Hsdu7Nff3KN7uoYUf/XjKAOmnPtfCCgD\nw3dpUXutNwEucCK+LkSM0nVV75WhXTfLgEveQ3Ppgh5syUYZVw/kPo8F5f6tsDan\nZiDwU5iUQMRBVKGNOg1Xlb4EoV0iOVZNBP8sclMqPbXvxmrLprcA2gIOQHPy+/Y=\n=8lDo\n-----END PGP SIGNATURE-----\n", "payload": "tree c08b4c1fe56c6d4ca10a27d87b8a49512b8ff105\nparent 5e449b32b528804e97ceeb7b2b260a8bca3d0295\nparent 3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678479346 +0100\ncommitter GitHub <noreply@github.com> 1678479346 +0100\n\nRollup merge of #108912 - clubby789:doc-tool-lints, r=Nilstrieb\n\nDocument tool lints\n\nAdd brief doc comments for the internal tool lints so a summary can be seen without needing to open source code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030ea0578fb361b66becc898547cec406f3c53ce", "html_url": "https://github.com/rust-lang/rust/commit/030ea0578fb361b66becc898547cec406f3c53ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030ea0578fb361b66becc898547cec406f3c53ce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e449b32b528804e97ceeb7b2b260a8bca3d0295", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b32b528804e97ceeb7b2b260a8bca3d0295", "html_url": "https://github.com/rust-lang/rust/commit/5e449b32b528804e97ceeb7b2b260a8bca3d0295"}, {"sha": "3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173", "html_url": "https://github.com/rust-lang/rust/commit/3abcae2beb1bc8d2ef1d92fd74fdd6ca4aeb1173"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "a14dc20fca369e701337454e4f0b6ca53245ba16", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/030ea0578fb361b66becc898547cec406f3c53ce/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030ea0578fb361b66becc898547cec406f3c53ce/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=030ea0578fb361b66becc898547cec406f3c53ce", "patch": "@@ -17,6 +17,11 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n declare_tool_lint! {\n+    /// The `default_hash_type` lint detects use of [`std::collections::HashMap`]/[`std::collections::HashSet`],\n+    /// suggesting the use of `FxHashMap`/`FxHashSet`.\n+    ///\n+    /// This can help as `FxHasher` can perform better than the default hasher. DOS protection is not\n+    /// required as input is assumed to be trusted.\n     pub rustc::DEFAULT_HASH_TYPES,\n     Allow,\n     \"forbid HashMap and HashSet and suggest the FxHash* variants\",\n@@ -67,6 +72,12 @@ fn typeck_results_of_method_fn<'tcx>(\n }\n \n declare_tool_lint! {\n+    /// The `potential_query_instability` lint detects use of methods which can lead to\n+    /// potential query instability, such as iterating over a `HashMap`.\n+    ///\n+    /// Due to the [incremental compilation](https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation.html) model,\n+    /// queries must return deterministic, stable results. `HashMap` iteration order can change between compilations,\n+    /// and will introduce instability if query results expose the order.\n     pub rustc::POTENTIAL_QUERY_INSTABILITY,\n     Allow,\n     \"require explicit opt-in when using potentially unstable methods or functions\",\n@@ -92,13 +103,17 @@ impl LateLintPass<'_> for QueryStability {\n }\n \n declare_tool_lint! {\n+    /// The `usage_of_ty_tykind` lint detects usages of `ty::TyKind::<kind>`,\n+    /// where `ty::<kind>` would suffice.\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,\n     \"usage of `ty::TyKind` outside of the `ty::sty` module\",\n     report_in_external_macro: true\n }\n \n declare_tool_lint! {\n+    /// The `usage_of_qualified_ty` lint detects usages of `ty::TyKind`,\n+    /// where `Ty` should be used instead.\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n     \"using `ty::{Ty,TyCtxt}` instead of importing it\",\n@@ -254,6 +269,8 @@ fn gen_args(segment: &PathSegment<'_>) -> String {\n }\n \n declare_tool_lint! {\n+    /// The `lint_pass_impl_without_macro` detects manual implementations of a lint\n+    /// pass, without using [`declare_lint_pass`] or [`impl_lint_pass`].\n     pub rustc::LINT_PASS_IMPL_WITHOUT_MACRO,\n     Allow,\n     \"`impl LintPass` without the `declare_lint_pass!` or `impl_lint_pass!` macros\"\n@@ -285,6 +302,8 @@ impl EarlyLintPass for LintPassImpl {\n }\n \n declare_tool_lint! {\n+    /// The `existing_doc_keyword` lint detects use `#[doc()]` keywords\n+    /// that don't exist, e.g. `#[doc(keyword = \"..\")]`.\n     pub rustc::EXISTING_DOC_KEYWORD,\n     Allow,\n     \"Check that documented keywords in std and core actually exist\",\n@@ -325,13 +344,22 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n }\n \n declare_tool_lint! {\n+    /// The `untranslatable_diagnostic` lint detects diagnostics created\n+    /// without using translatable Fluent strings.\n+    ///\n+    /// More details on translatable diagnostics can be found [here](https://rustc-dev-guide.rust-lang.org/diagnostics/translation.html).\n     pub rustc::UNTRANSLATABLE_DIAGNOSTIC,\n     Allow,\n     \"prevent creation of diagnostics which cannot be translated\",\n     report_in_external_macro: true\n }\n \n declare_tool_lint! {\n+    /// The `diagnostic_outside_of_impl` lint detects diagnostics created manually,\n+    /// and inside an `IntoDiagnostic`/`AddToDiagnostic` implementation,\n+    /// or a `#[derive(Diagnostic)]`/`#[derive(Subdiagnostic)]` expansion.\n+    ///\n+    /// More details on diagnostics implementations can be found [here](https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html).\n     pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n     Allow,\n     \"prevent creation of diagnostics outside of `IntoDiagnostic`/`AddToDiagnostic` impls\",\n@@ -396,6 +424,8 @@ impl LateLintPass<'_> for Diagnostics {\n }\n \n declare_tool_lint! {\n+    /// The `bad_opt_access` lint detects accessing options by field instad of\n+    /// the wrapper function.\n     pub rustc::BAD_OPT_ACCESS,\n     Deny,\n     \"prevent using options by field access when there is a wrapper function\","}]}