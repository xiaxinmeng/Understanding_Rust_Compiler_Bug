{"sha": "9fb32dc924653e35950f17c8d91793c9ca983d03", "node_id": "C_kwDOAAsO6NoAKDlmYjMyZGM5MjQ2NTNlMzU5NTBmMTdjOGQ5MTc5M2M5Y2E5ODNkMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T12:16:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T12:16:20Z"}, "message": "Auto merge of #99151 - Dylan-DPC:rollup-40aqkxy, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #98882 (explain doc comments in macros a bit)\n - #98907 (Deny float const params even when `adt_const_params` is enabled)\n - #99091 (Do not mention private types from other crates as impl candidates)\n - #99140 (Implement `SourceMap::is_span_accessible`)\n - #99147 (Mention similarly named associated type even if it's not clearly in supertrait)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0ffdaaeb8d72a455d04db05cf326c8c77386fbb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ffdaaeb8d72a455d04db05cf326c8c77386fbb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb32dc924653e35950f17c8d91793c9ca983d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb32dc924653e35950f17c8d91793c9ca983d03", "html_url": "https://github.com/rust-lang/rust/commit/9fb32dc924653e35950f17c8d91793c9ca983d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb32dc924653e35950f17c8d91793c9ca983d03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d1f57a757af4fe5d47a6f6d3167761ec61b7894", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1f57a757af4fe5d47a6f6d3167761ec61b7894", "html_url": "https://github.com/rust-lang/rust/commit/7d1f57a757af4fe5d47a6f6d3167761ec61b7894"}, {"sha": "21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "html_url": "https://github.com/rust-lang/rust/commit/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d"}], "stats": {"total": 444, "additions": 348, "deletions": 96}, "files": [{"sha": "687ff0fb505802dbd332318feeb20509c67b75ab", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -309,7 +309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if self.infcx.tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if self.infcx.tcx.sess.source_map().is_span_accessible(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n             }"}, {"sha": "9c7671eee38d007c0f14d61a57b507547e0ee914", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -975,14 +975,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if self.fn_self_span_reported.insert(fn_span) {\n                         err.span_note(\n                             // Check whether the source is accessible\n-                            if self\n-                                .infcx\n-                                .tcx\n-                                .sess\n-                                .source_map()\n-                                .span_to_snippet(self_arg.span)\n-                                .is_ok()\n-                            {\n+                            if self.infcx.tcx.sess.source_map().is_span_accessible(self_arg.span) {\n                                 self_arg.span\n                             } else {\n                                 fn_call_span"}, {"sha": "1d083b0bf8268b011cab72d22a78e66227bf6f07", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 err.note(&format!(\"attempting to deref into `{}`\", deref_target_ty));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if tcx.sess.source_map().is_span_accessible(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n "}, {"sha": "0aa7b117b89ba366177f125f5046a920a3750ba2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -226,7 +226,7 @@ impl Qualif for CustomEq {\n         // because that component may be part of an enum variant (e.g.,\n         // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be\n         // structural-match (`Option::None`).\n-        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()\n+        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty, true).is_some()\n     }\n \n     fn in_adt_inherently<'tcx>("}, {"sha": "8d506a3ea8bbc64ee4d9c2cc23cd2a423e1eea8c", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,5 @@\n+expand-explain-doc-comment-outer =\n+    outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n+\n+expand-explain-doc-comment-inner =\n+    inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match"}, {"sha": "d16171cb162d6e45b4e9f189bf6e431ae665434a", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -33,11 +33,12 @@ pub use unic_langid::{langid, LanguageIdentifier};\n fluent_messages! {\n     borrowck => \"../locales/en-US/borrowck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n+    const_eval => \"../locales/en-US/const_eval.ftl\",\n+    expand => \"../locales/en-US/expand.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n-    const_eval => \"../locales/en-US/const_eval.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "e59a74e380ae392f2beacf52fa60a2dfb72b3f49", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -1558,7 +1558,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     insertion_span: Span,\n ) {\n     diag.span_label(path_span, format!(\"expected lifetime parameter{}\", pluralize!(n)));\n-    if source_map.span_to_snippet(insertion_span).is_err() {\n+    if !source_map.is_span_accessible(insertion_span) {\n         // Do not try to suggest anything if generated by a proc-macro.\n         return;\n     }"}, {"sha": "3e9ddd6aec075419e0d220bf6367605e32936585", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n     RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n@@ -25,6 +25,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, MacroRulesNormalizedIdent};\n use rustc_span::Span;\n \n@@ -345,7 +346,7 @@ fn expand_macro<'cx>(\n     if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n         err.span_label(cx.source_map().guess_head_span(def_span), \"when calling this macro\");\n     }\n-\n+    annotate_doc_comment(&mut err, sess.source_map(), span);\n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n         for lhs in lhses {\n@@ -453,7 +454,10 @@ pub fn compile_declarative_macro(\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n-            sess.parse_sess.span_diagnostic.struct_span_err(sp, &s).span_label(sp, msg).emit();\n+            let mut err = sess.parse_sess.span_diagnostic.struct_span_err(sp, &s);\n+            err.span_label(sp, msg);\n+            annotate_doc_comment(&mut err, sess.source_map(), sp);\n+            err.emit();\n             return dummy_syn_ext();\n         }\n         Error(sp, msg) => {\n@@ -590,6 +594,34 @@ pub fn compile_declarative_macro(\n     (mk_syn_ext(expander), rule_spans)\n }\n \n+#[derive(SessionSubdiagnostic)]\n+enum ExplainDocComment {\n+    #[label(expand::explain_doc_comment_inner)]\n+    Inner {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(expand::explain_doc_comment_outer)]\n+    Outer {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+fn annotate_doc_comment(\n+    err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+    sm: &SourceMap,\n+    span: Span,\n+) {\n+    if let Ok(src) = sm.span_to_snippet(span) {\n+        if src.starts_with(\"///\") || src.starts_with(\"/**\") {\n+            err.subdiagnostic(ExplainDocComment::Outer { span });\n+        } else if src.starts_with(\"//!\") || src.starts_with(\"/*!\") {\n+            err.subdiagnostic(ExplainDocComment::Inner { span });\n+        }\n+    }\n+}\n+\n fn check_lhs_nt_follows(sess: &ParseSess, def: &ast::Item, lhs: &mbe::TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens."}, {"sha": "75fd156ebfdf379d5f39998355af4731c9d6171d", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -432,7 +432,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 \"`let` bindings require an \\\"irrefutable pattern\\\", like a `struct` or \\\n                  an `enum` with only one variant\",\n             );\n-            if self.tcx.sess.source_map().span_to_snippet(span).is_ok() {\n+            if self.tcx.sess.source_map().is_span_accessible(span) {\n                 let semi_span = span.shrink_to_hi().with_lo(span.hi() - BytePos(1));\n                 let start_span = span.shrink_to_lo();\n                 let end_span = semi_span.shrink_to_lo();"}, {"sha": "e32e0b11ba49762bdfcdbd6de2faacd28cba63a2", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -120,32 +120,37 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     }\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n-        traits::search_for_structural_match_violation(self.span, self.tcx(), ty).map(|non_sm_ty| {\n-            with_no_trimmed_paths!(match non_sm_ty.kind {\n-                traits::NonStructuralMatchTyKind::Adt(adt) => self.adt_derive_msg(adt),\n-                traits::NonStructuralMatchTyKind::Dynamic => {\n-                    \"trait objects cannot be used in patterns\".to_string()\n-                }\n-                traits::NonStructuralMatchTyKind::Opaque => {\n-                    \"opaque types cannot be used in patterns\".to_string()\n-                }\n-                traits::NonStructuralMatchTyKind::Closure => {\n-                    \"closures cannot be used in patterns\".to_string()\n-                }\n-                traits::NonStructuralMatchTyKind::Generator => {\n-                    \"generators cannot be used in patterns\".to_string()\n-                }\n-                traits::NonStructuralMatchTyKind::Param => {\n-                    bug!(\"use of a constant whose type is a parameter inside a pattern\")\n-                }\n-                traits::NonStructuralMatchTyKind::Projection => {\n-                    bug!(\"use of a constant whose type is a projection inside a pattern\")\n-                }\n-                traits::NonStructuralMatchTyKind::Foreign => {\n-                    bug!(\"use of a value of a foreign type inside a pattern\")\n-                }\n-            })\n-        })\n+        traits::search_for_structural_match_violation(self.span, self.tcx(), ty, true).map(\n+            |non_sm_ty| {\n+                with_no_trimmed_paths!(match non_sm_ty.kind {\n+                    traits::NonStructuralMatchTyKind::Adt(adt) => self.adt_derive_msg(adt),\n+                    traits::NonStructuralMatchTyKind::Dynamic => {\n+                        \"trait objects cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::Opaque => {\n+                        \"opaque types cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::Closure => {\n+                        \"closures cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::Generator => {\n+                        \"generators cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::Float => {\n+                        \"floating-point numbers cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::Param => {\n+                        bug!(\"use of a constant whose type is a parameter inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTyKind::Projection => {\n+                        bug!(\"use of a constant whose type is a projection inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTyKind::Foreign => {\n+                        bug!(\"use of a value of a foreign type inside a pattern\")\n+                    }\n+                })\n+            },\n+        )\n     }\n \n     fn type_marked_structural(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "2851b08cd934ef44aaed7ff3c69aecd2a0c21d6e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -1647,7 +1647,7 @@ impl<'a> Resolver<'a> {\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n         let res = b.res();\n-        if b.span.is_dummy() || self.session.source_map().span_to_snippet(b.span).is_err() {\n+        if b.span.is_dummy() || !self.session.source_map().is_span_accessible(b.span) {\n             // These already contain the \"built-in\" prefix or look bad with it.\n             let add_built_in =\n                 !matches!(b.res(), Res::NonMacroAttr(..) | Res::PrimTy(..) | Res::ToolMod);"}, {"sha": "afbb88e92336049d30357fd4b322988a2d0177e0", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -597,6 +597,13 @@ impl SourceMap {\n         local_begin.sf.src.is_some() && local_end.sf.src.is_some()\n     }\n \n+    pub fn is_span_accessible(&self, sp: Span) -> bool {\n+        self.span_to_source(sp, |src, start_index, end_index| {\n+            Ok(src.get(start_index..end_index).is_some())\n+        })\n+        .map_or(false, |is_accessible| is_accessible)\n+    }\n+\n     /// Returns the source snippet as `String` corresponding to the given `Span`.\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, end_index| {"}, {"sha": "34f4a9f790266939cce46ccd9f726a2bd971f940", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -673,6 +673,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n+                                obligation.cause.body_id,\n                                 &mut err,\n                             ) {\n                                 // This is *almost* equivalent to\n@@ -707,6 +708,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n+                                        obligation.cause.body_id,\n                                         &mut err,\n                                     );\n                                 }\n@@ -1353,6 +1355,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool;\n \n@@ -1735,6 +1738,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n+        body_id: hir::HirId,\n         err: &mut Diagnostic,\n     ) -> bool {\n         let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n@@ -1805,8 +1809,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         || self.tcx.is_builtin_derive(def_id)\n                 })\n                 .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n-                // Avoid mentioning type parameters.\n-                .filter(|trait_ref| !matches!(trait_ref.self_ty().kind(), ty::Param(_)))\n+                .filter(|trait_ref| {\n+                    let self_ty = trait_ref.self_ty();\n+                    // Avoid mentioning type parameters.\n+                    if let ty::Param(_) = self_ty.kind() {\n+                        false\n+                    }\n+                    // Avoid mentioning types that are private to another crate\n+                    else if let ty::Adt(def, _) = self_ty.peel_refs().kind() {\n+                        // FIXME(compiler-errors): This could be generalized, both to\n+                        // be more granular, and probably look past other `#[fundamental]`\n+                        // types, too.\n+                        self.tcx\n+                            .visibility(def.did())\n+                            .is_accessible_from(body_id.owner.to_def_id(), self.tcx)\n+                    } else {\n+                        true\n+                    }\n+                })\n                 .collect();\n             return report(normalized_impl_candidates, err);\n         }"}, {"sha": "6c0b83fbd0304802969bf5d7133f38cab97a8ca4", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -26,6 +26,7 @@ pub enum NonStructuralMatchTyKind<'tcx> {\n     Closure,\n     Generator,\n     Projection,\n+    Float,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -53,12 +54,16 @@ pub enum NonStructuralMatchTyKind<'tcx> {\n /// For more background on why Rust has this requirement, and issues\n /// that arose when the requirement was not enforced completely, see\n /// Rust RFC 1445, rust-lang/rust#61188, and rust-lang/rust#62307.\n+///\n+/// The floats_allowed flag is used to deny constants in floating point\n pub fn search_for_structural_match_violation<'tcx>(\n     span: Span,\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n+    floats_allowed: bool,\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), floats_allowed })\n+        .break_value()\n }\n \n /// This method returns true if and only if `adt_ty` itself has been marked as\n@@ -119,6 +124,8 @@ struct Search<'tcx> {\n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n+\n+    floats_allowed: bool,\n }\n \n impl<'tcx> Search<'tcx> {\n@@ -192,13 +199,24 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                 // for empty array.\n                 return ControlFlow::CONTINUE;\n             }\n-            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n+            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Str | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n                 return ControlFlow::CONTINUE;\n             }\n \n+            ty::Float(_) => {\n+                if self.floats_allowed {\n+                    return ControlFlow::CONTINUE;\n+                } else {\n+                    return ControlFlow::Break(NonStructuralMatchTy {\n+                        ty,\n+                        kind: NonStructuralMatchTyKind::Float,\n+                    });\n+                }\n+            }\n+\n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n                 // First check all contained types and then tell the caller to continue searching.\n                 return ty.super_visit_with(self);"}, {"sha": "c873cf27e42c51cae416f53811b555344b85e679", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -164,10 +164,62 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 suggested_name,\n                 Applicability::MaybeIncorrect,\n             );\n-        } else {\n-            err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n+            return err.emit();\n         }\n \n+        // If we didn't find a good item in the supertraits (or couldn't get\n+        // the supertraits), like in ItemCtxt, then look more generally from\n+        // all visible traits. If there's one clear winner, just suggest that.\n+\n+        let visible_traits: Vec<_> = self\n+            .tcx()\n+            .all_traits()\n+            .filter(|trait_def_id| {\n+                let viz = self.tcx().visibility(*trait_def_id);\n+                if let Some(def_id) = self.item_def_id() {\n+                    viz.is_accessible_from(def_id, self.tcx())\n+                } else {\n+                    viz.is_visible_locally()\n+                }\n+            })\n+            .collect();\n+\n+        let wider_candidate_names: Vec<_> = visible_traits\n+            .iter()\n+            .flat_map(|trait_def_id| {\n+                self.tcx().associated_items(*trait_def_id).in_definition_order()\n+            })\n+            .filter_map(\n+                |item| if item.kind == ty::AssocKind::Type { Some(item.name) } else { None },\n+            )\n+            .collect();\n+\n+        if let (Some(suggested_name), true) = (\n+            find_best_match_for_name(&wider_candidate_names, assoc_name.name, None),\n+            assoc_name.span != DUMMY_SP,\n+        ) {\n+            if let [best_trait] = visible_traits\n+                .iter()\n+                .filter(|trait_def_id| {\n+                    self.tcx()\n+                        .associated_items(*trait_def_id)\n+                        .filter_by_name_unhygienic(suggested_name)\n+                        .any(|item| item.kind == ty::AssocKind::Type)\n+                })\n+                .collect::<Vec<_>>()[..]\n+            {\n+                err.span_label(\n+                    assoc_name.span,\n+                    format!(\n+                        \"there is a similarly named associated type `{suggested_name}` in the trait `{}`\",\n+                        self.tcx().def_path_str(*best_trait)\n+                    ),\n+                );\n+                return err.emit();\n+            }\n+        }\n+\n+        err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n         err.emit()\n     }\n "}, {"sha": "dc553d1441e5356ed3785c02383d5acb4d6afd0d", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if let Some(call_span) =\n                         iter::successors(Some(expr.span), |s| s.parent_callsite())\n                             .find(|&s| sp.contains(s))\n-                        && sm.span_to_snippet(call_span).is_ok()\n+                        && sm.is_span_accessible(call_span)\n                     {\n                         return Some((\n                             sp.with_hi(call_span.lo()),\n@@ -773,7 +773,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return None;\n                 }\n                 if sp.contains(expr.span)\n-                    && sm.span_to_snippet(expr.span).is_ok()\n+                    && sm.is_span_accessible(expr.span)\n                 {\n                     return Some((\n                         sp.with_hi(expr.span.lo()),"}, {"sha": "5621cf2e1a4b5a9fbb3222447ff7fdcde2167d55", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -824,50 +824,62 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                 }\n \n                 if let Some(non_structural_match_ty) =\n-                    traits::search_for_structural_match_violation(param.span, tcx, ty)\n+                    traits::search_for_structural_match_violation(param.span, tcx, ty, false)\n                 {\n                     // We use the same error code in both branches, because this is really the same\n                     // issue: we just special-case the message for type parameters to make it\n                     // clearer.\n-                    if let ty::Param(_) = ty.peel_refs().kind() {\n-                        // Const parameters may not have type parameters as their types,\n-                        // because we cannot be sure that the type parameter derives `PartialEq`\n-                        // and `Eq` (just implementing them is not enough for `structural_match`).\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            hir_ty.span,\n-                            E0741,\n-                            \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n-                            used as the type of a const parameter\",\n-                            ty,\n-                        )\n-                        .span_label(\n-                            hir_ty.span,\n-                            format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n-                        )\n-                        .note(\n-                            \"it is not currently possible to use a type parameter as the type of a \\\n-                            const parameter\",\n-                        )\n-                        .emit();\n-                    } else {\n-                        let mut diag = struct_span_err!(\n-                            tcx.sess,\n-                            hir_ty.span,\n-                            E0741,\n-                            \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n-                            the type of a const parameter\",\n-                            non_structural_match_ty.ty,\n-                        );\n-\n-                        if ty == non_structural_match_ty.ty {\n-                            diag.span_label(\n+                    match ty.peel_refs().kind() {\n+                        ty::Param(_) => {\n+                            // Const parameters may not have type parameters as their types,\n+                            // because we cannot be sure that the type parameter derives `PartialEq`\n+                            // and `Eq` (just implementing them is not enough for `structural_match`).\n+                            struct_span_err!(\n+                                tcx.sess,\n                                 hir_ty.span,\n-                                format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n-                            );\n+                                E0741,\n+                                \"`{ty}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n+                                used as the type of a const parameter\",\n+                            )\n+                            .span_label(\n+                                hir_ty.span,\n+                                format!(\"`{ty}` may not derive both `PartialEq` and `Eq`\"),\n+                            )\n+                            .note(\n+                                \"it is not currently possible to use a type parameter as the type of a \\\n+                                const parameter\",\n+                            )\n+                            .emit();\n+                        }\n+                        ty::Float(_) => {\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                hir_ty.span,\n+                                E0741,\n+                                \"`{ty}` is forbidden as the type of a const generic parameter\",\n+                            )\n+                            .note(\"floats do not derive `Eq` or `Ord`, which are required for const parameters\")\n+                            .emit();\n                         }\n+                        _ => {\n+                            let mut diag = struct_span_err!(\n+                                tcx.sess,\n+                                hir_ty.span,\n+                                E0741,\n+                                \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n+                                the type of a const parameter\",\n+                                non_structural_match_ty.ty,\n+                            );\n \n-                        diag.emit();\n+                            if ty == non_structural_match_ty.ty {\n+                                diag.span_label(\n+                                    hir_ty.span,\n+                                    format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n+                                );\n+                            }\n+\n+                            diag.emit();\n+                        }\n                     }\n                 }\n             } else {"}, {"sha": "469f7d1172ae67ec7b0afd3bbe23a5d99ae49b00", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -812,7 +812,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// Builds the `type defined here` message.\n     fn show_definition(&self, err: &mut Diagnostic) {\n         let mut spans: MultiSpan = if let Some(def_span) = self.tcx.def_ident_span(self.def_id) {\n-            if self.tcx.sess.source_map().span_to_snippet(def_span).is_ok() {\n+            if self.tcx.sess.source_map().is_span_accessible(def_span) {\n                 def_span.into()\n             } else {\n                 return;"}, {"sha": "fef5ef0d1facfe91c83873728a2113aab2a28163", "filename": "src/test/ui/const-generics/float-generic.adt_const_params.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.adt_const_params.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,11 @@\n+error[E0741]: `f32` is forbidden as the type of a const generic parameter\n+  --> $DIR/float-generic.rs:5:17\n+   |\n+LL | fn foo<const F: f32>() {}\n+   |                 ^^^\n+   |\n+   = note: floats do not derive `Eq` or `Ord`, which are required for const parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "b72059b5b1c6a31729819ce14edd95f30336445e", "filename": "src/test/ui/const-generics/float-generic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,12 @@\n+// revisions: simple adt_const_params\n+#![cfg_attr(adt_const_params, feature(adt_const_params))]\n+#![cfg_attr(adt_const_params, allow(incomplete_features))]\n+\n+fn foo<const F: f32>() {}\n+//~^ ERROR `f32` is forbidden as the type of a const generic parameter\n+\n+const C: f32 = 1.0;\n+\n+fn main() {\n+    foo::<C>();\n+}"}, {"sha": "89ca36b0f63147fa32f9d1e084ce290c04b9e6db", "filename": "src/test/ui/const-generics/float-generic.simple.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffloat-generic.simple.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,11 @@\n+error: `f32` is forbidden as the type of a const generic parameter\n+  --> $DIR/float-generic.rs:5:17\n+   |\n+LL | fn foo<const F: f32>() {}\n+   |                 ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0ebf3d52b637252979c8a5a59826901c589365ee", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -5,7 +5,10 @@ LL | macro_rules! outer {\n    | ------------------ when calling this macro\n ...\n LL |     //! Inner\n-   |     ^^^^^^^^^ no rules expected this token in macro call\n+   |     ^^^^^^^^^\n+   |     |\n+   |     no rules expected this token in macro call\n+   |     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n \n error: aborting due to previous error\n "}, {"sha": "346d865868d99078fdd54aecd88ac8b502ce848c", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -5,7 +5,10 @@ LL | macro_rules! inner {\n    | ------------------ when calling this macro\n ...\n LL |     /// Outer\n-   |     ^^^^^^^^^ no rules expected this token in macro call\n+   |     ^^^^^^^^^\n+   |     |\n+   |     no rules expected this token in macro call\n+   |     outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n \n error: aborting due to previous error\n "}, {"sha": "0436bd397424c2ee66d0583b484ec17cf83c462d", "filename": "src/test/ui/resolve/issue-55673.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,12 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+fn foo<T: Foo>()\n+where\n+    T::Baa: std::fmt::Debug,\n+    //~^ ERROR associated type `Baa` not found for `T`\n+{\n+}\n+\n+fn main() {}"}, {"sha": "39318f959056f56fe2eeb81aa9afe63d8bf2aa94", "filename": "src/test/ui/resolve/issue-55673.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,9 @@\n+error[E0220]: associated type `Baa` not found for `T`\n+  --> $DIR/issue-55673.rs:7:8\n+   |\n+LL |     T::Baa: std::fmt::Debug,\n+   |        ^^^ there is a similarly named associated type `Bar` in the trait `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "115df70a690607bcc8dc2f1e0d34f850c6d53c21", "filename": "src/test/ui/suggestions/auxiliary/meow.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,11 @@\n+pub trait Meow {\n+    fn meow(&self) {}\n+}\n+\n+pub struct GlobalMeow;\n+\n+impl Meow for GlobalMeow {}\n+\n+pub(crate) struct PrivateMeow;\n+\n+impl Meow for PrivateMeow {}"}, {"sha": "91f574f35b80bc9242effafdf79c4b05226ffc7b", "filename": "src/test/ui/suggestions/issue-99080.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:meow.rs\n+\n+extern crate meow;\n+\n+use meow::Meow;\n+\n+fn needs_meow<T: Meow>(t: T) {}\n+\n+fn main() {\n+    needs_meow(1usize);\n+    //~^ ERROR the trait bound `usize: Meow` is not satisfied\n+}\n+\n+struct LocalMeow;\n+\n+impl Meow for LocalMeow {}"}, {"sha": "d1908dd9d0d862bec0d92c9cc7893db76bdb7547", "filename": "src/test/ui/suggestions/issue-99080.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `usize: Meow` is not satisfied\n+  --> $DIR/issue-99080.rs:10:16\n+   |\n+LL |     needs_meow(1usize);\n+   |     ---------- ^^^^^^ the trait `Meow` is not implemented for `usize`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following other types implement trait `Meow`:\n+             GlobalMeow\n+             LocalMeow\n+note: required by a bound in `needs_meow`\n+  --> $DIR/issue-99080.rs:7:18\n+   |\n+LL | fn needs_meow<T: Meow>(t: T) {}\n+   |                  ^^^^ required by this bound in `needs_meow`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ce57b6263e4110da94d15405e4dcde2423288e4", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -15,7 +15,6 @@ LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n              &'c &'b str\n              [char; N]\n              char\n-             pattern::MultiCharEqPattern<C>\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `u8`\n \n error: aborting due to previous error"}, {"sha": "203a89285306d3f029411c778763c27c1cccf45f", "filename": "src/test/ui/traits/issue-59029-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -2,13 +2,13 @@ error[E0220]: associated type `Res` not found for `Self`\n   --> $DIR/issue-59029-1.rs:5:52\n    |\n LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n-   |                                                    ^^^ associated type `Res` not found\n+   |                                                    ^^^ there is a similarly named associated type `Res` in the trait `Svc`\n \n error[E0220]: associated type `Res` not found for `Self`\n   --> $DIR/issue-59029-1.rs:5:52\n    |\n LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n-   |                                                    ^^^ associated type `Res` not found\n+   |                                                    ^^^ there is a similarly named associated type `Res` in the trait `Svc`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c36b95f47e837532991bff0f56450ed0165fb463", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fb32dc924653e35950f17c8d91793c9ca983d03/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr?ref=9fb32dc924653e35950f17c8d91793c9ca983d03", "patch": "@@ -2,7 +2,7 @@ error[E0220]: associated type `Assoc` not found for `V`\n   --> $DIR/not_well_formed.rs:9:29\n    |\n LL | type Foo<V> = impl Trait<V::Assoc>;\n-   |                             ^^^^^ associated type `Assoc` not found\n+   |                             ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n \n error: aborting due to previous error\n "}]}