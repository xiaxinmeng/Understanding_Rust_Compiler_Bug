{"sha": "7997ff6612c1beadb74edd54f772c97147e14b96", "node_id": "C_kwDOAAsO6NoAKDc5OTdmZjY2MTJjMWJlYWRiNzRlZGQ1NGY3NzJjOTcxNDdlMTRiOTY", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-08T08:01:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-08T08:01:47Z"}, "message": "Rollup merge of #106546 - aDotInTheVoid:jsondoclint-path-local-item, r=notriddle\n\njsondoclint: Check local items in `paths` are also in `index`.\n\nWould have caught #104064 (if core.json was linted in CI).\n\nCloses #106433.\n\nr? rustdoc", "tree": {"sha": "934e3c1b9be2517672988a00a0514f6f32580199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934e3c1b9be2517672988a00a0514f6f32580199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7997ff6612c1beadb74edd54f772c97147e14b96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjunhrCRBK7hj4Ov3rIwAAYlsIAH8Qv/4atcwEyhKZ6kcdpkzA\nn0B53dXdNnP6zk6tqFj1cAtN+XJvpQNNSJSJxcRCqDiqbyX7PhMWYdhdtQieL4En\ns4TkNvLPDuF1cjez9VaI4xHtVi6pQkAwrTFO8DkeAI3QvFFckGPN4PxYjqNMQvxV\n0S275Rrlj62aRTb8zdKQSIk1S8CveucFltbD8wcMvcP4qwYEi7aNUEnMDRds3vkg\np07McOzea717G/hggm3EnI6fbuSaf/+bfvY3xyIC6vuZWENUZQFYQRJ6r3S6v88P\nepke9NrrLFAXvU3g6x3BLUVuWbj8sg+6myXZRpO4w730LB+OjN5dVT97jzeLewk=\n=jBL1\n-----END PGP SIGNATURE-----\n", "payload": "tree 934e3c1b9be2517672988a00a0514f6f32580199\nparent 3edc7e0414cab18416752f5c6952ee4b67ec9613\nparent d4139b36cf8bdc3c46616112fed42b589dec5395\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673164907 +0900\ncommitter GitHub <noreply@github.com> 1673164907 +0900\n\nRollup merge of #106546 - aDotInTheVoid:jsondoclint-path-local-item, r=notriddle\n\njsondoclint: Check local items in `paths` are also in `index`.\n\nWould have caught #104064 (if core.json was linted in CI).\n\nCloses #106433.\n\nr? rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7997ff6612c1beadb74edd54f772c97147e14b96", "html_url": "https://github.com/rust-lang/rust/commit/7997ff6612c1beadb74edd54f772c97147e14b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7997ff6612c1beadb74edd54f772c97147e14b96/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edc7e0414cab18416752f5c6952ee4b67ec9613", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edc7e0414cab18416752f5c6952ee4b67ec9613", "html_url": "https://github.com/rust-lang/rust/commit/3edc7e0414cab18416752f5c6952ee4b67ec9613"}, {"sha": "d4139b36cf8bdc3c46616112fed42b589dec5395", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4139b36cf8bdc3c46616112fed42b589dec5395", "html_url": "https://github.com/rust-lang/rust/commit/d4139b36cf8bdc3c46616112fed42b589dec5395"}], "stats": {"total": 129, "additions": 125, "deletions": 4}, "files": [{"sha": "c6f55410e44377fb846adc3479fafbc4c4cff61e", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7997ff6612c1beadb74edd54f772c97147e14b96/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7997ff6612c1beadb74edd54f772c97147e14b96/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=7997ff6612c1beadb74edd54f772c97147e14b96", "patch": "@@ -3,14 +3,17 @@ use std::hash::Hash;\n \n use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n-    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Module, OpaqueTy, Path,\n-    Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n+    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, ItemSummary, Module,\n+    OpaqueTy, Path, Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias,\n+    Type, TypeBinding, TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n use serde_json::Value;\n \n use crate::{item_kind::Kind, json_find, Error, ErrorKind};\n \n+// This is a rustc implementation detail that we rely on here\n+const LOCAL_CRATE_ID: u32 = 0;\n+\n /// The Validator walks over the JSON tree, and ensures it is well formed.\n /// It is made of several parts.\n ///\n@@ -53,12 +56,19 @@ impl<'a> Validator<'a> {\n     }\n \n     pub fn check_crate(&mut self) {\n+        // Graph traverse the index\n         let root = &self.krate.root;\n         self.add_mod_id(root);\n         while let Some(id) = set_remove(&mut self.todo) {\n             self.seen_ids.insert(id);\n             self.check_item(id);\n         }\n+\n+        let root_crate_id = self.krate.index[root].crate_id;\n+        assert_eq!(root_crate_id, LOCAL_CRATE_ID, \"LOCAL_CRATE_ID is wrong\");\n+        for (id, item_info) in &self.krate.paths {\n+            self.check_item_info(id, item_info);\n+        }\n     }\n \n     fn check_item(&mut self, id: &'a Id) {\n@@ -364,6 +374,19 @@ impl<'a> Validator<'a> {\n         fp.generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n     }\n \n+    fn check_item_info(&mut self, id: &Id, item_info: &ItemSummary) {\n+        // FIXME: Their should be a better way to determine if an item is local, rather than relying on `LOCAL_CRATE_ID`,\n+        // which encodes rustc implementation details.\n+        if item_info.crate_id == LOCAL_CRATE_ID && !self.krate.index.contains_key(id) {\n+            self.errs.push(Error {\n+                id: id.clone(),\n+                kind: ErrorKind::Custom(\n+                    \"Id for local item in `paths` but not in `index`\".to_owned(),\n+                ),\n+            })\n+        }\n+    }\n+\n     fn add_id_checked(&mut self, id: &'a Id, valid: fn(Kind) -> bool, expected: &str) {\n         if let Some(kind) = self.kind_of(id) {\n             if valid(kind) {"}, {"sha": "1ef41ff123abf68eaad360096c10f2d69f13a4b4", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7997ff6612c1beadb74edd54f772c97147e14b96/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7997ff6612c1beadb74edd54f772c97147e14b96/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=7997ff6612c1beadb74edd54f772c97147e14b96", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n \n-use rustdoc_json_types::{Crate, Item, Visibility};\n+use rustdoc_json_types::{Crate, Item, ItemKind, ItemSummary, Visibility, FORMAT_VERSION};\n \n use crate::json_find::SelectorPart;\n \n@@ -64,3 +64,101 @@ fn errors_on_missing_links() {\n         }],\n     );\n }\n+\n+// Test we would catch\n+// https://github.com/rust-lang/rust/issues/104064#issuecomment-1368589718\n+#[test]\n+fn errors_on_local_in_paths_and_not_index() {\n+    let krate = Crate {\n+        root: id(\"0:0:1572\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([\n+            (\n+                id(\"0:0:1572\"),\n+                Item {\n+                    id: id(\"0:0:1572\"),\n+                    crate_id: 0,\n+                    name: Some(\"microcore\".to_owned()),\n+                    span: None,\n+                    visibility: Visibility::Public,\n+                    docs: None,\n+                    links: HashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n+                    attrs: Vec::new(),\n+                    deprecation: None,\n+                    inner: ItemEnum::Module(Module {\n+                        is_crate: true,\n+                        items: vec![id(\"0:1:717\")],\n+                        is_stripped: false,\n+                    }),\n+                },\n+            ),\n+            (\n+                id(\"0:1:717\"),\n+                Item {\n+                    id: id(\"0:1:717\"),\n+                    crate_id: 0,\n+                    name: Some(\"i32\".to_owned()),\n+                    span: None,\n+                    visibility: Visibility::Public,\n+                    docs: None,\n+                    links: HashMap::default(),\n+                    attrs: Vec::new(),\n+                    deprecation: None,\n+                    inner: ItemEnum::Primitive(Primitive { name: \"i32\".to_owned(), impls: vec![] }),\n+                },\n+            ),\n+        ]),\n+        paths: HashMap::from_iter([(\n+            id(\"0:1:1571\"),\n+            ItemSummary {\n+                crate_id: 0,\n+                path: vec![\"microcore\".to_owned(), \"i32\".to_owned()],\n+                kind: ItemKind::Primitive,\n+            },\n+        )]),\n+        external_crates: HashMap::default(),\n+        format_version: rustdoc_json_types::FORMAT_VERSION,\n+    };\n+\n+    check(\n+        &krate,\n+        &[Error {\n+            id: id(\"0:1:1571\"),\n+            kind: ErrorKind::Custom(\"Id for local item in `paths` but not in `index`\".to_owned()),\n+        }],\n+    );\n+}\n+\n+#[test]\n+#[should_panic = \"LOCAL_CRATE_ID is wrong\"]\n+fn checks_local_crate_id_is_correct() {\n+    let krate = Crate {\n+        root: id(\"root\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([(\n+            id(\"root\"),\n+            Item {\n+                id: id(\"root\"),\n+                crate_id: LOCAL_CRATE_ID.wrapping_add(1),\n+                name: Some(\"irrelavent\".to_owned()),\n+                span: None,\n+                visibility: Visibility::Public,\n+                docs: None,\n+                links: HashMap::default(),\n+                attrs: Vec::new(),\n+                deprecation: None,\n+                inner: ItemEnum::Module(Module {\n+                    is_crate: true,\n+                    items: vec![],\n+                    is_stripped: false,\n+                }),\n+            },\n+        )]),\n+        paths: HashMap::default(),\n+        external_crates: HashMap::default(),\n+        format_version: FORMAT_VERSION,\n+    };\n+    check(&krate, &[]);\n+}"}]}