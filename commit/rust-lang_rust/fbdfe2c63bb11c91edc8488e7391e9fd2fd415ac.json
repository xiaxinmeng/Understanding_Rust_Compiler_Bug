{"sha": "fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZGZlMmM2M2JiMTFjOTFlZGM4NDg4ZTczOTFlOWZkMmZkNDE1YWM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-24T14:39:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-10-15T11:51:53Z"}, "message": "mangling: encode all impl parameters\n\nThis commit modifies v0 symbol mangling to include all generic\nparameters from impl blocks (not just those used in the self type).\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "ba3a4af5b4ef05b47a153d643183878d3dc007f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3a4af5b4ef05b47a153d643183878d3dc007f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl+IN9kACgkQJZLnbIc4\nH9nAUxAAq9/74QEJzFn57fGaC/h+j9Q0On7UPWv8tUgJhrxEBpDMvW4P8CKIf04J\nFMFs1rEeDWHuiW3/jALB4jDzSiAPPh2FSPQ34oMy48ut3odIq0yj7Bu0FG1k86Kl\nEx4pL0OUnS491G70k5LvoZz0cFSrdgGbJ6Y4gC40BHVO/IlKCkeKHQl6l035Krgg\ng6GENFgfwT4dF6tbCm+vlnv51C3aT6QituxcQOc1Gvi0djRFLHooTGF8F4q61bbI\nOk62KB9rSAAT7t9NnVW5JQ5Oww+EpU2dUv+DFOd5TO+fPg87NvNzXmlsc23agK5T\nYzvmu2hG+tBkIBF0tTBAnnGQOoPOfBjbDkltYUaBCGJK31Bhzc8TTMLDHGgJskpj\nBSs7asT+xVdXUIzTuE4cPqJkHXm08B2O8cc5/Mjaur3c6qocaryTtiT23Zyp1+xX\niQX6DD00VY8mkv97h4BnnrieU+GHS7tJd+olp4McqxVw5YNmhRlXCuT1i6++Ccml\nm8gu2T8H17qCAxexbvJS/JgsHAvBzD1rgfxqgn+qCme6Mm0orGW9SPfg1Ze4jugV\nQiEh4nWGF5M3UmIVaduiJ2JOaFfLAwzfMpFPHnK/pUMfx8/jHTfhcv7ngFqLM8Yp\ncSs3pBe/dETsX7P2qzZPFiuqYnGmVgcyEOgpghTsIIbDE270xx0=\n=NuPi\n-----END PGP SIGNATURE-----", "payload": "tree ba3a4af5b4ef05b47a153d643183878d3dc007f5\nparent 9752787dca8f891634c8802ba196d5eca4c80c27\nauthor David Wood <david@davidtw.co> 1598279971 +0100\ncommitter David Wood <david@davidtw.co> 1602762713 +0100\n\nmangling: encode all impl parameters\n\nThis commit modifies v0 symbol mangling to include all generic\nparameters from impl blocks (not just those used in the self type).\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "html_url": "https://github.com/rust-lang/rust/commit/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9752787dca8f891634c8802ba196d5eca4c80c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9752787dca8f891634c8802ba196d5eca4c80c27", "html_url": "https://github.com/rust-lang/rust/commit/9752787dca8f891634c8802ba196d5eca4c80c27"}], "stats": {"total": 163, "additions": 140, "deletions": 23}, "files": [{"sha": "16d0b86903ea889e9ad054f07fc179fc02249ed8", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "patch": "@@ -259,7 +259,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_impl_path(\n-        self,\n+        mut self,\n         impl_def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n         mut self_ty: Ty<'tcx>,\n@@ -284,12 +284,37 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             }\n         }\n \n-        self.path_append_impl(\n-            |cx| cx.print_def_path(parent_def_id, &[]),\n-            &key.disambiguated_data,\n-            self_ty,\n-            impl_trait_ref,\n-        )\n+        self.push(match impl_trait_ref {\n+            Some(_) => \"X\",\n+            None => \"M\",\n+        });\n+\n+        // Encode impl generic params if the substitutions contain parameters (implying\n+        // polymorphization is enabled) and this isn't an inherent impl.\n+        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_param_types_or_consts()) {\n+            self = self.path_generic_args(\n+                |this| {\n+                    this.path_append_ns(\n+                        |cx| cx.print_def_path(parent_def_id, &[]),\n+                        'I',\n+                        key.disambiguated_data.disambiguator as u64,\n+                        \"\",\n+                    )\n+                },\n+                substs,\n+            )?;\n+        } else {\n+            self.push_disambiguator(key.disambiguated_data.disambiguator as u64);\n+            self = self.print_def_path(parent_def_id, &[])?;\n+        }\n+\n+        self = self_ty.print(self)?;\n+\n+        if let Some(trait_ref) = impl_trait_ref {\n+            self = self.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n+        }\n+\n+        Ok(self)\n     }\n \n     fn print_region(mut self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n@@ -538,6 +563,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         self.push_ident(&name);\n         Ok(self)\n     }\n+\n     fn path_qualified(\n         mut self,\n         self_ty: Ty<'tcx>,\n@@ -552,24 +578,16 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn path_append_impl(\n-        mut self,\n-        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-        disambiguated_data: &DisambiguatedDefPathData,\n-        self_ty: Ty<'tcx>,\n-        trait_ref: Option<ty::TraitRef<'tcx>>,\n+        self,\n+        _: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _: &DisambiguatedDefPathData,\n+        _: Ty<'tcx>,\n+        _: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n-        self.push(match trait_ref {\n-            Some(_) => \"X\",\n-            None => \"M\",\n-        });\n-        self.push_disambiguator(disambiguated_data.disambiguator as u64);\n-        self = print_prefix(self)?;\n-        self = self_ty.print(self)?;\n-        if let Some(trait_ref) = trait_ref {\n-            self = self.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n-        }\n-        Ok(self)\n+        // Inlined into `print_impl_path`\n+        unreachable!()\n     }\n+\n     fn path_append(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n@@ -603,6 +621,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             name.as_ref().map_or(\"\", |s| &s[..]),\n         )\n     }\n+\n     fn path_generic_args(\n         mut self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,"}, {"sha": "5f822f6660c092c3b01246ebe5f4f86899999aef", "filename": "src/test/ui/symbol-names/issue-75326.legacy.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr?ref=fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17SYMBOL_HASH)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::SYMBOL_HASH)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ce315164cefd352fa82656c441b418eed0de7a1f", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "patch": "@@ -0,0 +1,58 @@\n+// build-fail\n+// ignore-tidy-linelength\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]normalize-stderr-32bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-64bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n+\n+#![feature(rustc_attrs)]\n+\n+pub(crate) struct Foo<I, E>(I, E);\n+\n+pub trait Iterator2 {\n+    type Item;\n+\n+    fn next(&mut self) -> Option<Self::Item>;\n+\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Iterator2 for Bar {\n+    type Item = (u32, u16);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<I, T, E> Iterator2 for Foo<I, E>\n+where\n+    I: Iterator2<Item = (T, E)>,\n+{\n+    type Item = T;\n+\n+    #[rustc_symbol_name]\n+    //[legacy]~^ ERROR symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next\n+    //[legacy]~| ERROR demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next\n+    //[legacy]~| ERROR demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n+    //[v0]~^^^^  ERROR symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+    //[v0]~|     ERROR demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n+    //[v0]~|     ERROR demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.find(|_| true)\n+    }\n+}\n+\n+fn main() {\n+    let mut a = Foo(Bar, 1u16);\n+    let _ = a.next();\n+}"}, {"sha": "59bdfa8ca36810db6a9438543e12d1b633d88d5f", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}