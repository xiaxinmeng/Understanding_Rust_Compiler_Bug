{"sha": "568f9a60efd05d4f4176b9069d89e93737d4ed10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OGY5YTYwZWZkMDVkNGY0MTc2YjkwNjlkODllOTM3MzdkNGVkMTA=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-09T22:22:23Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-02-10T23:57:26Z"}, "message": "tools: doc comments", "tree": {"sha": "8adc6ad88d7676f5306493dc1393a2d2732c065c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8adc6ad88d7676f5306493dc1393a2d2732c065c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568f9a60efd05d4f4176b9069d89e93737d4ed10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568f9a60efd05d4f4176b9069d89e93737d4ed10", "html_url": "https://github.com/rust-lang/rust/commit/568f9a60efd05d4f4176b9069d89e93737d4ed10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568f9a60efd05d4f4176b9069d89e93737d4ed10/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ed06eb8864e704c4a1871ccda4648273bee4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ed06eb8864e704c4a1871ccda4648273bee4ef", "html_url": "https://github.com/rust-lang/rust/commit/99ed06eb8864e704c4a1871ccda4648273bee4ef"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "6b3117a1f74f473b2fda9b325dc236f13ca00fc2", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -113,31 +113,31 @@ impl CompareMode {\n \n #[derive(Clone)]\n pub struct Config {\n-    /// Whether to overwrite stderr/stdout files instead of complaining about changes in output\n+    /// `true` to to overwrite stderr/stdout files instead of complaining about changes in output.\n     pub bless: bool,\n \n-    /// The library paths required for running the compiler\n+    /// The library paths required for running the compiler.\n     pub compile_lib_path: PathBuf,\n \n-    /// The library paths required for running compiled programs\n+    /// The library paths required for running compiled programs.\n     pub run_lib_path: PathBuf,\n \n-    /// The rustc executable\n+    /// The rustc executable.\n     pub rustc_path: PathBuf,\n \n-    /// The rustdoc executable\n+    /// The rustdoc executable.\n     pub rustdoc_path: Option<PathBuf>,\n \n-    /// The python executable to use for LLDB\n+    /// The Python executable to use for LLDB.\n     pub lldb_python: String,\n \n-    /// The python executable to use for htmldocck\n+    /// The Python executable to use for htmldocck.\n     pub docck_python: String,\n \n-    /// The llvm FileCheck binary path\n+    /// The LLVM `FileCheck` binary path.\n     pub llvm_filecheck: Option<PathBuf>,\n \n-    /// The valgrind path\n+    /// The valgrind path.\n     pub valgrind_path: Option<String>,\n \n     /// Whether to fail if we can't run run-pass-valgrind tests under valgrind\n@@ -305,15 +305,15 @@ pub fn output_testname_unique(\n }\n \n /// Absolute path to the directory where all output for the given\n-/// test/revision should reside.  Example:\n+/// test/revision should reside. Example:\n ///   /path/to/build/host-triple/test/ui/relative/testname.revision.mode/\n pub fn output_base_dir(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> PathBuf {\n     output_relative_path(config, &testpaths.relative_dir)\n         .join(output_testname_unique(config, testpaths, revision))\n }\n \n /// Absolute path to the base filename used as output for the given\n-/// test/revision.  Example:\n+/// test/revision. Example:\n ///   /path/to/build/host-triple/test/ui/relative/testname.revision.mode/testname\n pub fn output_base_name(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> PathBuf {\n     output_base_dir(config, testpaths, revision).join(testpaths.file.file_stem().unwrap())"}, {"sha": "c2c4a6b69cca55599c77f58327953adecb99bb56", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -12,7 +12,7 @@ use crate::extract_gdb_version;\n /// Whether to ignore the test.\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Ignore {\n-    /// Run it.\n+    /// Runs it.\n     Run,\n     /// Ignore it totally.\n     Ignore,\n@@ -389,7 +389,7 @@ impl TestProps {\n         props\n     }\n \n-    /// Load properties from `testfile` into `props`. If a property is\n+    /// Loads properties from `testfile` into `props`. If a property is\n     /// tied to a particular revision `foo` (indicated by writing\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`."}, {"sha": "86cdadade108f794265de5518bd2cb166d4661aa", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -808,7 +808,7 @@ fn make_test_closure(\n     }))\n }\n \n-/// Returns true if the given target is an Android target for the\n+/// Returns `true` if the given target is an Android target for the\n /// purposes of GDB testing.\n fn is_android_gdb_target(target: &String) -> bool {\n     match &target[..] {"}, {"sha": "bac41a7c57904b1a9bb25ac5f5d396742584ceeb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -1379,7 +1379,7 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    /// Returns true if we should report an error about `actual_error`,\n+    /// Returns `true` if we should report an error about `actual_error`,\n     /// which did not match any of the expected error. We always require\n     /// errors/warnings to be explicitly listed, but only require\n     /// helps/notes if there are explicit helps/notes given.\n@@ -1974,14 +1974,14 @@ impl<'test> TestCx<'test> {\n         fs::write(&outfile, out).unwrap();\n     }\n \n-    /// Create a filename for output with the given extension.  Example:\n-    ///   /.../testname.revision.mode/testname.extension\n+    /// Creates a filename for output with the given extension.\n+    /// E.g., `/.../testname.revision.mode/testname.extension`.\n     fn make_out_name(&self, extension: &str) -> PathBuf {\n         self.output_base_name().with_extension(extension)\n     }\n \n-    /// Directory where auxiliary files are written.  Example:\n-    ///   /.../testname.revision.mode/auxiliary/\n+    /// Gets the directory where auxiliary files are written.\n+    /// E.g., `/.../testname.revision.mode/auxiliary/`.\n     fn aux_output_dir_name(&self) -> PathBuf {\n         self.output_base_dir()\n             .join(\"auxiliary\")\n@@ -1993,7 +1993,7 @@ impl<'test> TestCx<'test> {\n         output_testname_unique(self.config, self.testpaths, self.safe_revision())\n     }\n \n-    /// The revision, ignored for Incremental since it wants all revisions in\n+    /// The revision, ignored for incremental compilation since it wants all revisions in\n     /// the same directory.\n     fn safe_revision(&self) -> Option<&str> {\n         if self.config.mode == Incremental {\n@@ -2003,16 +2003,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    /// Absolute path to the directory where all output for the given\n-    /// test/revision should reside.  Example:\n-    ///   /path/to/build/host-triple/test/ui/relative/testname.revision.mode/\n+    /// Gets the absolute path to the directory where all output for the given\n+    /// test/revision should reside.\n+    /// E.g., `/path/to/build/host-triple/test/ui/relative/testname.revision.mode/`.\n     fn output_base_dir(&self) -> PathBuf {\n         output_base_dir(self.config, self.testpaths, self.safe_revision())\n     }\n \n-    /// Absolute path to the base filename used as output for the given\n-    /// test/revision.  Example:\n-    ///   /.../relative/testname.revision.mode/testname\n+    /// Gets the absolute path to the base filename used as output for the given\n+    /// test/revision.\n+    /// E.g., `/.../relative/testname.revision.mode/testname`.\n     fn output_base_name(&self) -> PathBuf {\n         output_base_name(self.config, self.testpaths, self.safe_revision())\n     }"}, {"sha": "faeeea605a2b46a7d89c225a7dd14e9d312c5a9f", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -194,7 +194,7 @@ impl Formatter for MarkdownFormatter {\n     }\n }\n \n-/// Load all the metadata files from `metadata_dir` into an in-memory map.\n+/// Loads all the metadata files from `metadata_dir` into an in-memory map.\n fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n     let mut all_errors = BTreeMap::new();\n "}, {"sha": "a4321cd757129a0ce28caf93bfde38795648aaf8", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -44,7 +44,7 @@ enum LIUState {\n     EXP_END,\n }\n \n-/// Returns whether `line` appears to be a line comment containing an URL,\n+/// Returns `true` if `line` appears to be a line comment containing an URL,\n /// possibly with a Markdown link label in front, and nothing else.\n /// The Markdown link label, if present, may not contain whitespace.\n /// Lines of this form are allowed to be overlength, because Markdown\n@@ -79,7 +79,7 @@ fn line_is_url(line: &str) -> bool {\n     state == EXP_END\n }\n \n-/// Returns whether `line` is allowed to be longer than the normal limit.\n+/// Returns `true` if `line` is allowed to be longer than the normal limit.\n /// Currently there is only one exception, for long URLs, but more\n /// may be added in the future.\n fn long_line_is_ok(line: &str) -> bool {"}, {"sha": "63196eda7cc5fd1be91e049b907a572db17221b8", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568f9a60efd05d4f4176b9069d89e93737d4ed10/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=568f9a60efd05d4f4176b9069d89e93737d4ed10", "patch": "@@ -56,7 +56,7 @@ pub fn collect_unstable_book_section_file_names(dir: &path::Path) -> BTreeSet<St\n         .collect()\n }\n \n-/// Retrieve file names of all library feature sections in the Unstable Book with:\n+/// Retrieves file names of all library feature sections in the Unstable Book with:\n ///\n /// * hyphens replaced by underscores,\n /// * the markdown suffix ('.md') removed."}]}