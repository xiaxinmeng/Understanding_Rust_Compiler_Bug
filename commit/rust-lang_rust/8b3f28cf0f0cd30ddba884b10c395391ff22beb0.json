{"sha": "8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiM2YyOGNmMGYwY2QzMGRkYmE4ODRiMTBjMzk1MzkxZmYyMmJlYjA=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-27T09:45:45Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-07-27T09:45:45Z"}, "message": "Make more informative error on outer attr after inner", "tree": {"sha": "c8de41030f1589d084cd3deeaa1aebddb5a2bf6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8de41030f1589d084cd3deeaa1aebddb5a2bf6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "html_url": "https://github.com/rust-lang/rust/commit/8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f28cf0f0cd30ddba884b10c395391ff22beb0/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e39897587dca70f0b15093d425a682c392349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e39897587dca70f0b15093d425a682c392349c", "html_url": "https://github.com/rust-lang/rust/commit/09e39897587dca70f0b15093d425a682c392349c"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "810af9b924636b4f0f05bb3e1cef3cd41bc4a3dc", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b3f28cf0f0cd30ddba884b10c395391ff22beb0/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3f28cf0f0cd30ddba884b10c395391ff22beb0/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "patch": "@@ -4,14 +4,15 @@ use crate::parse::{SeqSep, PResult};\n use crate::parse::token::{self, Nonterminal, DelimToken};\n use crate::parse::parser::{Parser, TokenType, PathStyle};\n use crate::tokenstream::{TokenStream, TokenTree};\n+use crate::source_map::Span;\n \n use log::debug;\n use smallvec::smallvec;\n \n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n     Permitted,\n-    NotPermitted { reason: &'a str },\n+    NotPermitted { reason: &'a str, prev_attr_sp: Option<Span> },\n }\n \n const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n@@ -42,7 +43,8 @@ impl<'a> Parser<'a> {\n                         DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n                     };\n                     let inner_parse_policy =\n-                        InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason };\n+                        InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason,\n+                            prev_attr_sp: attrs.last().and_then(|a| Some(a.span)) };\n                     let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     attrs.push(attr);\n                     just_parsed_doc_comment = false;\n@@ -77,7 +79,7 @@ impl<'a> Parser<'a> {\n             InnerAttributeParsePolicy::Permitted\n         } else {\n             InnerAttributeParsePolicy::NotPermitted\n-                { reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG }\n+                { reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG, prev_attr_sp: None }\n         };\n         self.parse_attribute_with_inner_parse_policy(inner_parse_policy)\n     }\n@@ -98,19 +100,9 @@ impl<'a> Parser<'a> {\n                 if let InnerAttributeParsePolicy::Permitted = inner_parse_policy {\n                     self.expected_tokens.push(TokenType::Token(token::Not));\n                 }\n+\n                 let style = if self.token == token::Not {\n                     self.bump();\n-                    if let InnerAttributeParsePolicy::NotPermitted { reason } = inner_parse_policy\n-                    {\n-                        let span = self.token.span;\n-                        self.diagnostic()\n-                            .struct_span_err(span, reason)\n-                            .note(\"inner attributes, like `#![no_std]`, annotate the item \\\n-                                   enclosing them, and are usually found at the beginning of \\\n-                                   source files. Outer attributes, like `#[test]`, annotate the \\\n-                                   item following them.\")\n-                            .emit()\n-                    }\n                     ast::AttrStyle::Inner\n                 } else {\n                     ast::AttrStyle::Outer\n@@ -121,7 +113,32 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n                 let hi = self.prev_span;\n \n-                (lo.to(hi), path, tokens, style)\n+                let attr_sp = lo.to(hi);\n+\n+                // Emit error if inner attribute is encountered and not permitted\n+                if style == ast::AttrStyle::Inner {\n+                    if let InnerAttributeParsePolicy::NotPermitted { reason, prev_attr_sp }\n+                            = inner_parse_policy {\n+                        let mut diagnostic = self\n+                            .diagnostic()\n+                            .struct_span_err(attr_sp, reason);\n+\n+                        if let Some(prev_attr_sp) = prev_attr_sp {\n+                            diagnostic\n+                                .span_label(attr_sp, \"not permitted following an outer attibute\")\n+                                .span_label(prev_attr_sp, \"previous outer attribute\");\n+                        }\n+\n+                        diagnostic\n+                            .note(\"inner attributes, like `#![no_std]`, annotate the item \\\n+                                   enclosing them, and are usually found at the beginning of \\\n+                                   source files. Outer attributes, like `#[test]`, annotate the \\\n+                                   item following them.\")\n+                            .emit()\n+                    }\n+                }\n+\n+                (attr_sp, path, tokens, style)\n             }\n             _ => {\n                 let token_str = self.this_token_to_string();"}, {"sha": "070d9f47d96f925e04bcc7abb412ebb1e06d193f", "filename": "src/test/ui/parser/inner-attr.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b3f28cf0f0cd30ddba884b10c395391ff22beb0/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b3f28cf0f0cd30ddba884b10c395391ff22beb0/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr?ref=8b3f28cf0f0cd30ddba884b10c395391ff22beb0", "patch": "@@ -1,8 +1,11 @@\n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/inner-attr.rs:3:3\n+  --> $DIR/inner-attr.rs:3:1\n    |\n+LL | #[feature(lang_items)]\n+   | ---------------------- previous outer attribute\n+LL | \n LL | #![recursion_limit=\"100\"]\n-   |   ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attibute\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n "}]}