{"sha": "23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "node_id": "C_kwDOAAsO6NoAKDIzZWUyYWYyZjc2NjlkNTIxYWQzOWVmOGE1MDZhNGZhM2QzN2VhNWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T20:40:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T20:40:05Z"}, "message": "Auto merge of #109788 - compiler-errors:trait-item-from-non-trait, r=petrochenkov\n\nMore descriptive error when qself path doesnt have a trait on the RHS of `as`\n\n`<Ty as Enum>::Assoc` should report that `Enum` is a trait. Main question is whether to eagerly report the error, or raise it with `return Err(..)` -- i'll note that in an inline comment though.\n\ncc `@GuillaumeGomez` who said this came up at a Paris Rust meetup.\n\nr? `@petrochenkov`", "tree": {"sha": "ab7f04e9497bcabd5cc654a4df0d86bc9afa8265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab7f04e9497bcabd5cc654a4df0d86bc9afa8265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "html_url": "https://github.com/rust-lang/rust/commit/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da636956dd13638a5582f9dcd4699559d85ac2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da636956dd13638a5582f9dcd4699559d85ac2d5", "html_url": "https://github.com/rust-lang/rust/commit/da636956dd13638a5582f9dcd4699559d85ac2d5"}, {"sha": "d5b1ef1c3f5f5fae73baee4b463e264842c8a73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1ef1c3f5f5fae73baee4b463e264842c8a73d", "html_url": "https://github.com/rust-lang/rust/commit/d5b1ef1c3f5f5fae73baee4b463e264842c8a73d"}], "stats": {"total": 325, "additions": 205, "deletions": 120}, "files": [{"sha": "b1a696d093ebb16923d36d14f78265f1c7ed7ec9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -122,6 +122,12 @@ pub(crate) enum ConstantItemKind {\n     Static,\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+enum RecordPartialRes {\n+    Yes,\n+    No,\n+}\n+\n /// The rib kind restricts certain accesses,\n /// e.g. to a `Res::Local` of an outer item.\n #[derive(Copy, Clone, Debug)]\n@@ -2682,6 +2688,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n+                RecordPartialRes::Yes,\n             );\n             self.diagnostic_metadata.currently_processing_impl_trait = None;\n             if let Some(def_id) = res.expect_full_res().opt_def_id() {\n@@ -3420,6 +3427,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             &Segment::from_path(path),\n             source,\n             Finalize::new(id, path.span),\n+            RecordPartialRes::Yes,\n         );\n     }\n \n@@ -3430,6 +3438,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         path: &[Segment],\n         source: PathSource<'ast>,\n         finalize: Finalize,\n+        record_partial_res: RecordPartialRes,\n     ) -> PartialRes {\n         let ns = source.namespace();\n \n@@ -3636,7 +3645,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             _ => report_errors(self, None),\n         };\n \n-        if !matches!(source, PathSource::TraitItem(..)) {\n+        if record_partial_res == RecordPartialRes::Yes {\n             // Avoid recording definition of `A::B` in `<T as A>::B::C`.\n             self.r.record_partial_res(node_id, partial_res);\n             self.resolve_elided_lifetimes_in_path(node_id, partial_res, path, source, path_span);\n@@ -3740,7 +3749,25 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 )));\n             }\n \n-            // Make sure `A::B` in `<T as A::B>::C` is a trait item.\n+            let num_privacy_errors = self.r.privacy_errors.len();\n+            // Make sure that `A` in `<T as A>::B::C` is a trait.\n+            let trait_res = self.smart_resolve_path_fragment(\n+                &None,\n+                &path[..qself.position],\n+                PathSource::Trait(AliasPossibility::No),\n+                Finalize::new(finalize.node_id, qself.path_span),\n+                RecordPartialRes::No,\n+            );\n+\n+            if trait_res.expect_full_res() == Res::Err {\n+                return Ok(Some(trait_res));\n+            }\n+\n+            // Truncate additional privacy errors reported above,\n+            // because they'll be recomputed below.\n+            self.r.privacy_errors.truncate(num_privacy_errors);\n+\n+            // Make sure `A::B` in `<T as A>::B::C` is a trait item.\n             //\n             // Currently, `path` names the full item (`A::B::C`, in\n             // our example). so we extract the prefix of that that is\n@@ -3753,6 +3780,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 &path[..=qself.position],\n                 PathSource::TraitItem(ns),\n                 Finalize::with_root_span(finalize.node_id, finalize.path_span, qself.path_span),\n+                RecordPartialRes::No,\n             );\n \n             // The remaining segments (the `C` in our example) will"}, {"sha": "6341e05327754dc3dff1aa760ffecdd9f05bedf8", "filename": "tests/ui/parser/dyn-trait-compatibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.rs?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -9,6 +9,6 @@ type A2 = dyn<dyn, dyn>;\n type A3 = dyn<<dyn as dyn>::dyn>;\n //~^ ERROR cannot find type `dyn` in this scope\n //~| ERROR cannot find type `dyn` in this scope\n-//~| ERROR use of undeclared crate or module `dyn`\n+//~| ERROR cannot find trait `dyn` in this scope\n \n fn main() {}"}, {"sha": "653be5b3b71756d76b176b7dccfc8b7e04963b80", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -4,12 +4,6 @@ error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n LL | type A1 = dyn::dyn;\n    |           ^^^ use of undeclared crate or module `dyn`\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n-  --> $DIR/dyn-trait-compatibility.rs:9:23\n-   |\n-LL | type A3 = dyn<<dyn as dyn>::dyn>;\n-   |                       ^^^ use of undeclared crate or module `dyn`\n-\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:1:11\n    |\n@@ -40,6 +34,12 @@ error[E0412]: cannot find type `dyn` in this scope\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n    |           ^^^ not found in this scope\n \n+error[E0405]: cannot find trait `dyn` in this scope\n+  --> $DIR/dyn-trait-compatibility.rs:9:23\n+   |\n+LL | type A3 = dyn<<dyn as dyn>::dyn>;\n+   |                       ^^^ not found in this scope\n+\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:9:16\n    |\n@@ -48,5 +48,5 @@ LL | type A3 = dyn<<dyn as dyn>::dyn>;\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0412, E0433.\n-For more information about an error, try `rustc --explain E0412`.\n+Some errors have detailed explanations: E0405, E0412, E0433.\n+For more information about an error, try `rustc --explain E0405`."}, {"sha": "ede0c2e8eaf03ea8a4deba1be98e10e6d56b9733", "filename": "tests/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -18,9 +18,11 @@ mod foo {\n fn main() {\n     let _: <foo::Baz as crate::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR absolute paths must start with\n+    //~| WARN this is accepted in the current edition\n \n     let _: <crate::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "48b091ddb45ed6a9cccfcf7f4679153bed4a97e3", "filename": "tests/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -18,9 +18,11 @@ mod foo {\n fn main() {\n     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR absolute paths must start with\n+    //~| WARN this is accepted in the current edition\n \n     let _: <::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "497ee440dfdb8b21ed5c166eade9b013a54f239f", "filename": "tests/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -13,13 +13,22 @@ LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-fully-qualified-paths.rs:23:13\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:19:25\n+   |\n+LL |     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n+   |                         ^^^^^^^^^^ help: use `crate`: `crate::foo::Foo`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:25:13\n    |\n LL |     let _: <::foo::Baz as foo::Foo>::Bar = ();\n    |             ^^^^^^^^^^ help: use `crate`: `crate::foo::Baz`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "8e43b7249f7c0fb29b5479e556a582489db49514", "filename": "tests/ui/traits/associated_type_bound/assoc_type_bound_with_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -18,6 +18,6 @@ fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String { //~ ERROR expec\n \n fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n //~^ ERROR expected trait, found struct\n-//~| ERROR use of undeclared type `Unresolved`\n+//~| ERROR cannot find trait `Unresolved` in this scope\n \n fn main() {}"}, {"sha": "0020f9e416df24e1c21ea1f53e4822de9f846a1a", "filename": "tests/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `Unresolved`\n-  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n-   |\n-LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n-   |                               ^^^^^^^^^^ use of undeclared type `Unresolved`\n-\n error[E0404]: expected trait, found struct `String`\n   --> $DIR/assoc_type_bound_with_struct.rs:5:46\n    |\n@@ -76,6 +70,12 @@ help: a trait with a similar name exists\n LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: ToString {\n    |                                                         ~~~~~~~~\n \n+error[E0405]: cannot find trait `Unresolved` in this scope\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                               ^^^^^^^^^^ not found in this scope\n+\n error[E0404]: expected trait, found struct `String`\n   --> $DIR/assoc_type_bound_with_struct.rs:19:51\n    |\n@@ -87,5 +87,5 @@ LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0404, E0433.\n+Some errors have detailed explanations: E0404, E0405.\n For more information about an error, try `rustc --explain E0404`."}, {"sha": "712668728c9e72641208937541a793c0b0995828", "filename": "tests/ui/ufcs/ufcs-partially-resolved.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.rs?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -17,37 +17,37 @@ type A = u32;\n \n fn main() {\n     let _: <u8 as Tr>::N; //~ ERROR cannot find associated type `N` in trait `Tr`\n-    let _: <u8 as E>::N; //~ ERROR cannot find associated type `N` in enum `E`\n-    let _: <u8 as A>::N; //~ ERROR cannot find associated type `N` in `A`\n+    let _: <u8 as E>::N; //~ ERROR expected trait, found enum `E`\n+    let _: <u8 as A>::N; //~ ERROR expected trait, found type alias `A`\n     <u8 as Tr>::N; //~ ERROR cannot find method or associated constant `N` in trait `Tr`\n-    <u8 as E>::N; //~ ERROR cannot find method or associated constant `N` in enum `E`\n-    <u8 as A>::N; //~ ERROR cannot find method or associated constant `N` in `A`\n+    <u8 as E>::N; //~ ERROR expected trait, found enum `E`\n+    <u8 as A>::N; //~ ERROR expected trait, found type alias `A`\n     let _: <u8 as Tr>::Y; // OK\n-    let _: <u8 as E>::Y; //~ ERROR expected associated type, found variant `E::Y`\n+    let _: <u8 as E>::Y; //~ ERROR expected trait, found enum `E`\n     <u8 as Tr>::Y; // OK\n-    <u8 as E>::Y; //~ ERROR expected method or associated constant, found unit variant `E::Y`\n+    <u8 as E>::Y; //~ ERROR expected trait, found enum `E`\n \n     let _: <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n-    let _: <u8 as E>::N::NN; //~ ERROR cannot find associated type `N` in enum `E`\n-    let _: <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n+    let _: <u8 as E>::N::NN; //~ ERROR expected trait, found enum `E`\n+    let _: <u8 as A>::N::NN; //~ ERROR expected trait, found type alias `A`\n     <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n-    <u8 as E>::N::NN; //~ ERROR cannot find associated type `N` in enum `E`\n-    <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n+    <u8 as E>::N::NN; //~ ERROR expected trait, found enum `E`\n+    <u8 as A>::N::NN; //~ ERROR expected trait, found type alias `A`\n     let _: <u8 as Tr>::Y::NN; //~ ERROR ambiguous associated type\n-    let _: <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n+    let _: <u8 as E>::Y::NN; //~ ERROR expected trait, found enum `E`\n     <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found for type `u16`\n-    <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n+    <u8 as E>::Y::NN; //~ ERROR expected trait, found enum `E`\n \n-    let _: <u8 as Tr::N>::NN; //~ ERROR cannot find associated type `NN` in `Tr::N`\n-    let _: <u8 as E::N>::NN; //~ ERROR cannot find associated type `NN` in `E::N`\n-    let _: <u8 as A::N>::NN; //~ ERROR cannot find associated type `NN` in `A::N`\n-    <u8 as Tr::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `Tr::N`\n-    <u8 as E::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `E::N`\n-    <u8 as A::N>::NN; //~ ERROR cannot find method or associated constant `NN` in `A::N`\n-    let _: <u8 as Tr::Y>::NN; //~ ERROR cannot find associated type `NN` in `Tr::Y`\n-    let _: <u8 as E::Y>::NN; //~ ERROR failed to resolve: `Y` is a variant, not a module\n-    <u8 as Tr::Y>::NN; //~ ERROR cannot find method or associated constant `NN` in `Tr::Y`\n-    <u8 as E::Y>::NN; //~ ERROR failed to resolve: `Y` is a variant, not a module\n+    let _: <u8 as Tr::N>::NN; //~ ERROR cannot find trait `N` in trait `Tr`\n+    let _: <u8 as E::N>::NN; //~ ERROR cannot find trait `N` in enum `E`\n+    let _: <u8 as A::N>::NN; //~ ERROR cannot find trait `N` in `A`\n+    <u8 as Tr::N>::NN; //~ ERROR cannot find trait `N` in trait `Tr`\n+    <u8 as E::N>::NN; //~ ERROR cannot find trait `N` in enum `E`\n+    <u8 as A::N>::NN; //~ ERROR cannot find trait `N` in `A`\n+    let _: <u8 as Tr::Y>::NN; //~ ERROR expected trait, found associated type `Tr::Y\n+    let _: <u8 as E::Y>::NN; //~ ERROR expected trait, found variant `E::Y`\n+    <u8 as Tr::Y>::NN; //~ ERROR expected trait, found associated type `Tr::Y`\n+    <u8 as E::Y>::NN; //~ ERROR expected trait, found variant `E::Y`\n \n     let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found associated function `Dr::Z`\n     <u8 as Dr>::X; //~ ERROR expected method or associated constant, found associated type `Dr::X`"}, {"sha": "eef55c8dc686f70967a2c6bb2ae9bfdc1d877da4", "filename": "tests/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 117, "deletions": 73, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "patch": "@@ -1,15 +1,3 @@\n-error[E0433]: failed to resolve: `Y` is a variant, not a module\n-  --> $DIR/ufcs-partially-resolved.rs:48:22\n-   |\n-LL |     let _: <u8 as E::Y>::NN;\n-   |                      ^ `Y` is a variant, not a module\n-\n-error[E0433]: failed to resolve: `Y` is a variant, not a module\n-  --> $DIR/ufcs-partially-resolved.rs:50:15\n-   |\n-LL |     <u8 as E::Y>::NN;\n-   |               ^ `Y` is a variant, not a module\n-\n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:19:24\n    |\n@@ -19,17 +7,25 @@ LL |     type Y = u16;\n LL |     let _: <u8 as Tr>::N;\n    |                        ^ help: an associated type with a similar name exists: `Y`\n \n-error[E0576]: cannot find associated type `N` in enum `E`\n-  --> $DIR/ufcs-partially-resolved.rs:20:23\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:20:19\n    |\n LL |     let _: <u8 as E>::N;\n-   |                       ^ not found in `E`\n+   |                   ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0576]: cannot find associated type `N` in `A`\n-  --> $DIR/ufcs-partially-resolved.rs:21:23\n+error[E0404]: expected trait, found type alias `A`\n+  --> $DIR/ufcs-partially-resolved.rs:21:19\n    |\n LL |     let _: <u8 as A>::N;\n-   |                       ^ not found in `A`\n+   |                   ^ type aliases cannot be used as traits\n+   |\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+   |\n+LL | trait A = u32;\n+   |\n \n error[E0576]: cannot find method or associated constant `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:22:17\n@@ -40,29 +36,43 @@ LL |     fn Y() {}\n LL |     <u8 as Tr>::N;\n    |                 ^ help: an associated function with a similar name exists: `Y`\n \n-error[E0576]: cannot find method or associated constant `N` in enum `E`\n-  --> $DIR/ufcs-partially-resolved.rs:23:16\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:23:12\n    |\n LL |     <u8 as E>::N;\n-   |                ^ not found in `E`\n+   |            ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0576]: cannot find method or associated constant `N` in `A`\n-  --> $DIR/ufcs-partially-resolved.rs:24:16\n+error[E0404]: expected trait, found type alias `A`\n+  --> $DIR/ufcs-partially-resolved.rs:24:12\n    |\n LL |     <u8 as A>::N;\n-   |                ^ not found in `A`\n+   |            ^ type aliases cannot be used as traits\n+   |\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+   |\n+LL | trait A = u32;\n+   |\n \n-error[E0575]: expected associated type, found variant `E::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:26:12\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:26:19\n    |\n LL |     let _: <u8 as E>::Y;\n-   |            ^^^^^^^^^^^^ not a associated type\n+   |                   ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0575]: expected method or associated constant, found unit variant `E::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:28:5\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:28:12\n    |\n LL |     <u8 as E>::Y;\n-   |     ^^^^^^^^^^^^ not a method or associated constant\n+   |            ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:30:24\n@@ -73,17 +83,25 @@ LL |     type Y = u16;\n LL |     let _: <u8 as Tr>::N::NN;\n    |                        ^ help: an associated type with a similar name exists: `Y`\n \n-error[E0576]: cannot find associated type `N` in enum `E`\n-  --> $DIR/ufcs-partially-resolved.rs:31:23\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:31:19\n    |\n LL |     let _: <u8 as E>::N::NN;\n-   |                       ^ not found in `E`\n+   |                   ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0576]: cannot find associated type `N` in `A`\n-  --> $DIR/ufcs-partially-resolved.rs:32:23\n+error[E0404]: expected trait, found type alias `A`\n+  --> $DIR/ufcs-partially-resolved.rs:32:19\n    |\n LL |     let _: <u8 as A>::N::NN;\n-   |                       ^ not found in `A`\n+   |                   ^ type aliases cannot be used as traits\n+   |\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+   |\n+LL | trait A = u32;\n+   |\n \n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:33:17\n@@ -94,77 +112,103 @@ LL |     type Y = u16;\n LL |     <u8 as Tr>::N::NN;\n    |                 ^ help: an associated type with a similar name exists: `Y`\n \n-error[E0576]: cannot find associated type `N` in enum `E`\n-  --> $DIR/ufcs-partially-resolved.rs:34:16\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:34:12\n    |\n LL |     <u8 as E>::N::NN;\n-   |                ^ not found in `E`\n+   |            ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0576]: cannot find associated type `N` in `A`\n-  --> $DIR/ufcs-partially-resolved.rs:35:16\n+error[E0404]: expected trait, found type alias `A`\n+  --> $DIR/ufcs-partially-resolved.rs:35:12\n    |\n LL |     <u8 as A>::N::NN;\n-   |                ^ not found in `A`\n+   |            ^ type aliases cannot be used as traits\n+   |\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+   |\n+LL | trait A = u32;\n+   |\n \n-error[E0575]: expected associated type, found variant `E::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:37:12\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:37:19\n    |\n LL |     let _: <u8 as E>::Y::NN;\n-   |            ^^^^^^^^^^^^^^^^ not a associated type\n+   |                   ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0575]: expected associated type, found variant `E::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:39:5\n+error[E0404]: expected trait, found enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:39:12\n    |\n LL |     <u8 as E>::Y::NN;\n-   |     ^^^^^^^^^^^^^^^^ not a associated type\n+   |            ^ help: a trait with a similar name exists: `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+   = note: similarly named trait `Eq` defined here\n \n-error[E0576]: cannot find associated type `NN` in `Tr::N`\n-  --> $DIR/ufcs-partially-resolved.rs:41:27\n+error[E0405]: cannot find trait `N` in trait `Tr`\n+  --> $DIR/ufcs-partially-resolved.rs:41:23\n    |\n LL |     let _: <u8 as Tr::N>::NN;\n-   |                           ^^ not found in `Tr::N`\n+   |                       ^ not found in `Tr`\n \n-error[E0576]: cannot find associated type `NN` in `E::N`\n-  --> $DIR/ufcs-partially-resolved.rs:42:26\n+error[E0405]: cannot find trait `N` in enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:42:22\n    |\n LL |     let _: <u8 as E::N>::NN;\n-   |                          ^^ not found in `E::N`\n+   |                      ^ not found in `E`\n \n-error[E0576]: cannot find associated type `NN` in `A::N`\n-  --> $DIR/ufcs-partially-resolved.rs:43:26\n+error[E0405]: cannot find trait `N` in `A`\n+  --> $DIR/ufcs-partially-resolved.rs:43:22\n    |\n LL |     let _: <u8 as A::N>::NN;\n-   |                          ^^ not found in `A::N`\n+   |                      ^ not found in `A`\n \n-error[E0576]: cannot find method or associated constant `NN` in `Tr::N`\n-  --> $DIR/ufcs-partially-resolved.rs:44:20\n+error[E0405]: cannot find trait `N` in trait `Tr`\n+  --> $DIR/ufcs-partially-resolved.rs:44:16\n    |\n LL |     <u8 as Tr::N>::NN;\n-   |                    ^^ not found in `Tr::N`\n+   |                ^ not found in `Tr`\n \n-error[E0576]: cannot find method or associated constant `NN` in `E::N`\n-  --> $DIR/ufcs-partially-resolved.rs:45:19\n+error[E0405]: cannot find trait `N` in enum `E`\n+  --> $DIR/ufcs-partially-resolved.rs:45:15\n    |\n LL |     <u8 as E::N>::NN;\n-   |                   ^^ not found in `E::N`\n+   |               ^ not found in `E`\n \n-error[E0576]: cannot find method or associated constant `NN` in `A::N`\n-  --> $DIR/ufcs-partially-resolved.rs:46:19\n+error[E0405]: cannot find trait `N` in `A`\n+  --> $DIR/ufcs-partially-resolved.rs:46:15\n    |\n LL |     <u8 as A::N>::NN;\n-   |                   ^^ not found in `A::N`\n+   |               ^ not found in `A`\n \n-error[E0576]: cannot find associated type `NN` in `Tr::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:47:27\n+error[E0404]: expected trait, found associated type `Tr::Y`\n+  --> $DIR/ufcs-partially-resolved.rs:47:19\n    |\n LL |     let _: <u8 as Tr::Y>::NN;\n-   |                           ^^ not found in `Tr::Y`\n+   |                   ^^^^^ not a trait\n+\n+error[E0404]: expected trait, found variant `E::Y`\n+  --> $DIR/ufcs-partially-resolved.rs:48:19\n+   |\n+LL |     let _: <u8 as E::Y>::NN;\n+   |                   ^^^^ not a trait\n \n-error[E0576]: cannot find method or associated constant `NN` in `Tr::Y`\n-  --> $DIR/ufcs-partially-resolved.rs:49:20\n+error[E0404]: expected trait, found associated type `Tr::Y`\n+  --> $DIR/ufcs-partially-resolved.rs:49:12\n    |\n LL |     <u8 as Tr::Y>::NN;\n-   |                    ^^ not found in `Tr::Y`\n+   |            ^^^^^ not a trait\n+\n+error[E0404]: expected trait, found variant `E::Y`\n+  --> $DIR/ufcs-partially-resolved.rs:50:12\n+   |\n+LL |     <u8 as E::Y>::NN;\n+   |            ^^^^ not a trait\n \n error[E0575]: expected associated type, found associated function `Dr::Z`\n   --> $DIR/ufcs-partially-resolved.rs:52:12\n@@ -226,5 +270,5 @@ LL |     <u8 as Dr>::X::N;\n \n error: aborting due to 32 previous errors\n \n-Some errors have detailed explanations: E0223, E0433, E0575, E0576, E0599.\n+Some errors have detailed explanations: E0223, E0404, E0405, E0575, E0576, E0599.\n For more information about an error, try `rustc --explain E0223`."}]}