{"sha": "bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2JlZTViYTNlZWEzZGVjYWYzZDAwYTVkYzA5ZGQ2Y2JjNjMyZjE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-11-16T11:02:45Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-11-16T11:15:50Z"}, "message": "Rename col to col_utf16", "tree": {"sha": "a499262a1aa2ed51a4af0bbbdf4028aa2cc01fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a499262a1aa2ed51a4af0bbbdf4028aa2cc01fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "html_url": "https://github.com/rust-lang/rust/commit/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "136d1864bcb5046e7f334ac347a8a94946d1ba90", "url": "https://api.github.com/repos/rust-lang/rust/commits/136d1864bcb5046e7f334ac347a8a94946d1ba90", "html_url": "https://github.com/rust-lang/rust/commit/136d1864bcb5046e7f334ac347a8a94946d1ba90"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "26b309b781652d25061c190c3af6500a359ef654", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "patch": "@@ -11,7 +11,7 @@ pub struct LineIndex {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct LineCol {\n     pub line: u32,\n-    pub col: u32,\n+    pub col_utf16: u32,\n }\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n@@ -75,13 +75,13 @@ impl LineIndex {\n \n         LineCol {\n             line: line as u32,\n-            col: self.utf8_to_utf16_col(line as u32, col) as u32,\n+            col_utf16: self.utf8_to_utf16_col(line as u32, col) as u32,\n         }\n     }\n \n     pub fn offset(&self, line_col: LineCol) -> TextUnit {\n         //TODO: return Result\n-        let col = self.utf16_to_utf8_col(line_col.line, line_col.col);\n+        let col = self.utf16_to_utf8_col(line_col.line, line_col.col_utf16);\n         self.newlines[line_col.line as usize] + col\n     }\n \n@@ -126,23 +126,23 @@ impl LineIndex {\n fn test_line_index() {\n     let text = \"hello\\nworld\";\n     let index = LineIndex::new(text);\n-    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col: 0 });\n-    assert_eq!(index.line_col(1.into()), LineCol { line: 0, col: 1 });\n-    assert_eq!(index.line_col(5.into()), LineCol { line: 0, col: 5 });\n-    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col: 0 });\n-    assert_eq!(index.line_col(7.into()), LineCol { line: 1, col: 1 });\n-    assert_eq!(index.line_col(8.into()), LineCol { line: 1, col: 2 });\n-    assert_eq!(index.line_col(10.into()), LineCol { line: 1, col: 4 });\n-    assert_eq!(index.line_col(11.into()), LineCol { line: 1, col: 5 });\n-    assert_eq!(index.line_col(12.into()), LineCol { line: 1, col: 6 });\n+    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col_utf16: 0 });\n+    assert_eq!(index.line_col(1.into()), LineCol { line: 0, col_utf16: 1 });\n+    assert_eq!(index.line_col(5.into()), LineCol { line: 0, col_utf16: 5 });\n+    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col_utf16: 0 });\n+    assert_eq!(index.line_col(7.into()), LineCol { line: 1, col_utf16: 1 });\n+    assert_eq!(index.line_col(8.into()), LineCol { line: 1, col_utf16: 2 });\n+    assert_eq!(index.line_col(10.into()), LineCol { line: 1, col_utf16: 4 });\n+    assert_eq!(index.line_col(11.into()), LineCol { line: 1, col_utf16: 5 });\n+    assert_eq!(index.line_col(12.into()), LineCol { line: 1, col_utf16: 6 });\n \n     let text = \"\\nhello\\nworld\";\n     let index = LineIndex::new(text);\n-    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col: 0 });\n-    assert_eq!(index.line_col(1.into()), LineCol { line: 1, col: 0 });\n-    assert_eq!(index.line_col(2.into()), LineCol { line: 1, col: 1 });\n-    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col: 5 });\n-    assert_eq!(index.line_col(7.into()), LineCol { line: 2, col: 0 });\n+    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col_utf16: 0 });\n+    assert_eq!(index.line_col(1.into()), LineCol { line: 1, col_utf16: 0 });\n+    assert_eq!(index.line_col(2.into()), LineCol { line: 1, col_utf16: 1 });\n+    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col_utf16: 5 });\n+    assert_eq!(index.line_col(7.into()), LineCol { line: 2, col_utf16: 0 });\n }\n \n #[cfg(test)]"}, {"sha": "5d5a0c55ee7e24b0ebce792af38bd762e3a05d81", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=bccbee5ba3eea3decaf3d00a5dc09dd6cbc632f1", "patch": "@@ -51,7 +51,7 @@ impl ConvWith for Position {\n     fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n         let line_col = LineCol {\n             line: self.line as u32,\n-            col: (self.character as u32).into(),\n+            col_utf16: self.character as u32,\n         };\n         line_index.offset(line_col)\n     }\n@@ -63,7 +63,10 @@ impl ConvWith for TextUnit {\n \n     fn conv_with(self, line_index: &LineIndex) -> Position {\n         let line_col = line_index.line_col(self);\n-        Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)))\n+        Position::new(\n+            u64::from(line_col.line),\n+            u64::from(u32::from(line_col.col_utf16)),\n+        )\n     }\n }\n \n@@ -201,8 +204,10 @@ impl TryConvWith for SourceChange {\n                     .map(|it| it.edits.as_slice())\n                     .unwrap_or(&[]);\n                 let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n-                let position =\n-                    Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)));\n+                let position = Position::new(\n+                    u64::from(line_col.line),\n+                    u64::from(u32::from(line_col.col_utf16)),\n+                );\n                 Some(TextDocumentPositionParams {\n                     text_document: TextDocumentIdentifier::new(pos.file_id.try_conv_with(world)?),\n                     position,\n@@ -245,12 +250,12 @@ fn translate_offset_with_edit(\n     if in_edit_line_col.line == 0 {\n         LineCol {\n             line: edit_line_col.line,\n-            col: edit_line_col.col + in_edit_line_col.col,\n+            col_utf16: edit_line_col.col_utf16 + in_edit_line_col.col_utf16,\n         }\n     } else {\n         LineCol {\n             line: edit_line_col.line + in_edit_line_col.line,\n-            col: in_edit_line_col.col,\n+            col_utf16: in_edit_line_col.col_utf16,\n         }\n     }\n }"}]}