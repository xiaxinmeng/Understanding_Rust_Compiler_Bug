{"sha": "cfce351ad39ae0f5e35006ad11fabb4ec866d725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2UzNTFhZDM5YWUwZjVlMzUwMDZhZDExZmFiYjRlYzg2NmQ3MjU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-23T05:40:51Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-23T05:50:13Z"}, "message": "first attempt at implementing RFC 1623. This fixes #35897.\n\nThis is a work in progress. In particular, I want to add more tests,\nespecially the compile-fail test is very bare-bones.", "tree": {"sha": "e76badc38a1d9f15870b061dcd77176a1f515a71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76badc38a1d9f15870b061dcd77176a1f515a71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfce351ad39ae0f5e35006ad11fabb4ec866d725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfce351ad39ae0f5e35006ad11fabb4ec866d725", "html_url": "https://github.com/rust-lang/rust/commit/cfce351ad39ae0f5e35006ad11fabb4ec866d725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfce351ad39ae0f5e35006ad11fabb4ec866d725/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd", "html_url": "https://github.com/rust-lang/rust/commit/3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "0f48b7ca67e639c2d4206043bd28d6fee47baaa5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cfce351ad39ae0f5e35006ad11fabb4ec866d725", "patch": "@@ -1554,7 +1554,7 @@ fn type_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             NodeItem(item) => {\n                 match item.node {\n                     ItemStatic(ref t, _, _) | ItemConst(ref t, _) => {\n-                        ccx.icx(&()).to_ty(&ExplicitRscope, &t)\n+                        ccx.icx(&()).to_ty(&ElidableRscope::new(ty::ReStatic), &t)\n                     }\n                     ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n                         let tofd = AstConv::ty_of_bare_fn(&ccx.icx(generics), unsafety, abi, &decl,"}, {"sha": "dfe58f0d94cc007e3368c99eff7cd94d065338b4", "filename": "src/test/compile-fail/rfc1623.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=cfce351ad39ae0f5e35006ad11fabb4ec866d725", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 { a }\n+\n+// the boundaries of elision\n+static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 = non_elidable;\n+//~^ERROR: missing lifetime specifier\n+\n+fn main() {\n+    // nothing to do here\n+}"}, {"sha": "b702a03b481f72f2fd7844bdbaefd8386d7499ca", "filename": "src/test/run-pass/rfc1623.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Ftest%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfce351ad39ae0f5e35006ad11fabb4ec866d725/src%2Ftest%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs?ref=cfce351ad39ae0f5e35006ad11fabb4ec866d725", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+// very simple test for a 'static static with default lifetime\n+static SOME_STATIC_STR : &str = \"&'static str\";\n+const SOME_CONST_STR : &str = \"&'static str\";\n+\n+// this should be the same as without default:\n+static SOME_EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n+const SOME_EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n+\n+// a function that elides to an unbound lifetime for both in- and output\n+fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n+\n+// one with a function, argument elided\n+static SOME_STATIC_SIMPLE_FN : &fn(&[u8]) -> &[u8] = id_u8_slice;\n+const SOME_CONST_SIMPLE_FN : &fn(&[u8]) -> &[u8] = id_u8_slice;\n+\n+// this should be the same as without elision\n+static SOME_STATIC_NON_ELIDED_fN : &fn<'a>(&'a [u8]) -> &'a [u8] = id_u8_slice;\n+const SOME_CONST_NON_ELIDED_fN : &fn<'a>(&'a [u8]) -> &'a [u8] = id_u8_slice;\n+\n+// another function that elides, each to a different unbound lifetime\n+fn multi_args(a: &u8, b: &u8, c: &u8) { }\n+\n+static SOME_STATIC_MULTI_FN : &fn(&u8, &u8, &u8) = multi_args;\n+const SOME_CONST_MULTI_FN : &fn(&u8, &u8, &u8) = multi_args;\n+\n+\n+fn main() {\n+    // make sure that the lifetime is actually elided (and not defaulted)\n+    let x = &[1u8, 2, 3];\n+    SOME_STATIC_SIMPLE_FN(x);\n+    SOME_CONST_SIMPLE_FN(x);\n+    \n+    // make sure this works with different lifetimes\n+    let a = &1;\n+    {\n+        let b = &2;\n+        let c = &3;\n+        SOME_CONST_MULTI_FN(a, b, c);\n+    }\n+}"}]}