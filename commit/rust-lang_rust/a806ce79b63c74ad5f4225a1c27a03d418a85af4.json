{"sha": "a806ce79b63c74ad5f4225a1c27a03d418a85af4", "node_id": "C_kwDOAAsO6NoAKGE4MDZjZTc5YjYzYzc0YWQ1ZjQyMjVhMWMyN2EwM2Q0MThhODVhZjQ", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-08T23:47:33Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T22:36:54Z"}, "message": "author: reorder match arm", "tree": {"sha": "2a1ad49ea761f9276f3a58baf7b3802ebfa7f1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1ad49ea761f9276f3a58baf7b3802ebfa7f1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a806ce79b63c74ad5f4225a1c27a03d418a85af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a806ce79b63c74ad5f4225a1c27a03d418a85af4", "html_url": "https://github.com/rust-lang/rust/commit/a806ce79b63c74ad5f4225a1c27a03d418a85af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a806ce79b63c74ad5f4225a1c27a03d418a85af4/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "html_url": "https://github.com/rust-lang/rust/commit/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "e0e3a3cf6bb4df7248c198ae8dee52343ca8884c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a806ce79b63c74ad5f4225a1c27a03d418a85af4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a806ce79b63c74ad5f4225a1c27a03d418a85af4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a806ce79b63c74ad5f4225a1c27a03d418a85af4", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n     }\n \n     fn print_match_expr(&mut self, expr: &Expr<'_>, arms: &[Arm<'_>], des: MatchSource, current: &str) {\n-        let expr_pat = self.next(\"expr\");\n+        let expr_pat = self.next(\"scrutinee\");\n         let arms_pat = self.next(\"arms\");\n \n         println!(\n@@ -266,8 +266,8 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         println!(\"    if {}.len() == {};\", arms_pat, arms.len());\n \n         for (i, arm) in arms.iter().enumerate() {\n-            self.current = format!(\"{}[{}].body\", arms_pat, i);\n-            self.visit_expr(arm.body);\n+            self.current = format!(\"{}[{}].pat\", arms_pat, i);\n+            self.visit_pat(arm.pat);\n \n             if let Some(ref guard) = arm.guard {\n                 let guard_pat = self.next(\"guard\");\n@@ -300,8 +300,8 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                     },\n                 }\n             }\n-            self.current = format!(\"{}[{}].pat\", arms_pat, i);\n-            self.visit_pat(arm.pat);\n+            self.current = format!(\"{}[{}].body\", arms_pat, i);\n+            self.visit_expr(arm.body);\n         }\n     }\n "}, {"sha": "56a955571ddd6e4a8dcc7e7db906f8c24d6c9fc1", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a806ce79b63c74ad5f4225a1c27a03d418a85af4/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a806ce79b63c74ad5f4225a1c27a03d418a85af4/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=a806ce79b63c74ad5f4225a1c27a03d418a85af4", "patch": "@@ -1,32 +1,32 @@\n if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n-    if let ExprKind::Match(ref expr, ref arms, MatchSource::Normal) = init.kind;\n-    if let ExprKind::Lit(ref lit) = expr.kind;\n+    if let ExprKind::Match(ref scrutinee, ref arms, MatchSource::Normal) = init.kind;\n+    if let ExprKind::Lit(ref lit) = scrutinee.kind;\n     if let LitKind::Int(42, LitIntType::Unsuffixed) = lit.node;\n     if arms.len() == 3;\n-    if let ExprKind::Lit(ref lit1) = arms[0].body.kind;\n-    if let LitKind::Int(5, LitIntType::Unsuffixed) = lit1.node;\n     if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n-    if let ExprKind::Lit(ref lit2) = lit_expr.kind;\n-    if let LitKind::Int(16, LitIntType::Unsuffixed) = lit2.node;\n+    if let ExprKind::Lit(ref lit1) = lit_expr.kind;\n+    if let LitKind::Int(16, LitIntType::Unsuffixed) = lit1.node;\n+    if let ExprKind::Lit(ref lit2) = arms[0].body.kind;\n+    if let LitKind::Int(5, LitIntType::Unsuffixed) = lit2.node;\n+    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind;\n+    if let ExprKind::Lit(ref lit3) = lit_expr1.kind;\n+    if let LitKind::Int(17, LitIntType::Unsuffixed) = lit3.node;\n     if let ExprKind::Block(ref block, ref label) = arms[1].body.kind;\n     if block.stmts.len() == 1;\n     if let StmtKind::Local(ref local1) = block.stmts[0].kind;\n     if let Some(ref init1) = local1.init;\n-    if let ExprKind::Lit(ref lit3) = init1.kind;\n-    if let LitKind::Int(3, LitIntType::Unsuffixed) = lit3.node;\n+    if let ExprKind::Lit(ref lit4) = init1.kind;\n+    if let LitKind::Int(3, LitIntType::Unsuffixed) = lit4.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n     if name.as_str() == \"x\";\n     if let Some(trailing_expr) = &block.expr;\n     if let ExprKind::Path(ref qpath) = trailing_expr.kind;\n     if match_qpath(qpath, &[\"x\"]);\n-    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind;\n-    if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n-    if let LitKind::Int(17, LitIntType::Unsuffixed) = lit4.node;\n+    if let PatKind::Wild = arms[2].pat.kind;\n     if let ExprKind::Lit(ref lit5) = arms[2].body.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit5.node;\n-    if let PatKind::Wild = arms[2].pat.kind;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n     if name1.as_str() == \"a\";\n     then {"}]}