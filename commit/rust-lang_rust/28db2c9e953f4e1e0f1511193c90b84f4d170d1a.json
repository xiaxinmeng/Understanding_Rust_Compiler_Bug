{"sha": "28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGIyYzllOTUzZjRlMWUwZjE1MTExOTNjOTBiODRmNGQxNzBkMWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-12T20:33:38Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-13T12:30:23Z"}, "message": "Make all projection base names be proj_base", "tree": {"sha": "b95a04371c4c81dcad9a3b998e68418e2746245b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95a04371c4c81dcad9a3b998e68418e2746245b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl17i+EACgkQiMlBzaHU\nZDKNrQ/8DHg1Gfl5qOji9UGjUP/0ZY5Hr112M9fMOjcia5wHvER80QvtB28HXAVD\nqZDUP9G81H0LUXgjth5FUQdR8BS0UzjNuPJpy1Fk73hxzzT/kFIB91pwFfhkgNtV\nT6HXSCHTqMPyJGGUT7CGXH98/itHQfz85byysPiEtj/lv3X1aKJ573o9NsBCO/R6\nnExoMMxk6DOdoy1gvNnW3NInqquS/fDb5P4MU43YTaSJ49dbUHPut0GTM/7ZkzHh\nMY2AlA7jHcKMCgsaN8vS2Fi0MG/GhQa0zcJioxGkyYlamYkomP30ZJtz8NO4AeQY\nlCq/wHU6HBBQDkLP362CYYJV+VjTD6TpbUX1ixoe6HWs1ZuSmgaw7gS052ccWZbf\nTktcXAQwvA25jPqC64A6CIn+D3yifqhxK6nlGP9jhb9Et2Mr964mdpoFQuKQ2ueO\nnXmvqBLcMkamA3EpV5+W9kFKF4khFauJGqElbzKQrft58tIwAxuP9Y89nwUsKZI/\ngF2G+L7HRoF2XDa/Jom9Rb+lsh+x3Oyw7fe5hajFK2Sb81niirxbAKElKOD0RiOp\nrrijY7YtYhZakbKkbOgtiL2itlWboee/HH9MTrm6MXpntyzVV7upyC4HU++7pcRg\nRoNJmD8qFHcLYKrcA5tt7eyuE+2jwbgTiKgyj1a15ivB7dlbGBE=\n=u3DQ\n-----END PGP SIGNATURE-----", "payload": "tree b95a04371c4c81dcad9a3b998e68418e2746245b\nparent 6ffc20f6a38ee78b1b496182281e6f5c8ddbaa02\nauthor Santiago Pastorino <spastorino@gmail.com> 1568320418 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1568377823 -0300\n\nMake all projection base names be proj_base\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "html_url": "https://github.com/rust-lang/rust/commit/28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffc20f6a38ee78b1b496182281e6f5c8ddbaa02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffc20f6a38ee78b1b496182281e6f5c8ddbaa02", "html_url": "https://github.com/rust-lang/rust/commit/6ffc20f6a38ee78b1b496182281e6f5c8ddbaa02"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "4b4516d6bf290ea206ab41a1810f5d7c569d8d59", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "patch": "@@ -615,13 +615,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 } = first_borrowed_place;\n \n                 for (i, elem) in projection.iter().enumerate().rev() {\n-                    let base_proj = &projection[..i];\n+                    let proj_base = &projection[..i];\n \n                     match elem {\n-                        ProjectionElem::Field(field, _) if union_ty(base, base_proj).is_some() => {\n+                        ProjectionElem::Field(field, _) if union_ty(base, proj_base).is_some() => {\n                             return Some((PlaceRef {\n                                 base: base,\n-                                projection: base_proj,\n+                                projection: proj_base,\n                             }, field));\n                         },\n                         _ => {},\n@@ -1520,26 +1520,26 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             [] => {\n                 StorageDeadOrDrop::LocalStorageDead\n             }\n-            [base @ .., elem] => {\n+            [proj_base @ .., elem] => {\n                 // FIXME(spastorino) make this iterate\n                 let base_access = self.classify_drop_access_kind(PlaceRef {\n                     base: place.base,\n-                    projection: base,\n+                    projection: proj_base,\n                 });\n                 match elem {\n                     ProjectionElem::Deref => match base_access {\n                         StorageDeadOrDrop::LocalStorageDead\n                         | StorageDeadOrDrop::BoxedStorageDead => {\n                             assert!(\n-                                Place::ty_from(&place.base, base, self.body, tcx).ty.is_box(),\n+                                Place::ty_from(&place.base, proj_base, self.body, tcx).ty.is_box(),\n                                 \"Drop of value behind a reference or raw pointer\"\n                             );\n                             StorageDeadOrDrop::BoxedStorageDead\n                         }\n                         StorageDeadOrDrop::Destructor(_) => base_access,\n                     },\n                     ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n-                        let base_ty = Place::ty_from(&place.base, base, self.body, tcx).ty;\n+                        let base_ty = Place::ty_from(&place.base, proj_base, self.body, tcx).ty;\n                         match base_ty.sty {\n                             ty::Adt(def, _) if def.has_dtor(tcx) => {\n                                 // Report the outermost adt with a destructor"}, {"sha": "14b76d97b3e57f02172ca2e6e0af5c39ff659c90", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "patch": "@@ -82,10 +82,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             PlaceRef {\n                 base: _,\n-                projection: [base @ .., ProjectionElem::Deref],\n+                projection: [proj_base @ .., ProjectionElem::Deref],\n             } => {\n                 if the_place_err.base == &PlaceBase::Local(Local::new(1)) &&\n-                    base.is_empty() &&\n+                    proj_base.is_empty() &&\n                     !self.upvars.is_empty() {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     debug_assert!(self.body.local_decls[Local::new(1)].ty.is_region_ptr());\n@@ -106,7 +106,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             \", as `Fn` closures cannot mutate their captured variables\".to_string()\n                         }\n                 } else if {\n-                    if let (PlaceBase::Local(local), []) = (&the_place_err.base, base) {\n+                    if let (PlaceBase::Local(local), []) = (&the_place_err.base, proj_base) {\n                         self.body.local_decls[*local].is_ref_for_guard()\n                     } else {\n                         false\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 } else {\n                     let source = self.borrowed_content_source(PlaceRef {\n                         base: the_place_err.base,\n-                        projection: base,\n+                        projection: proj_base,\n                     });\n                     let pointer_type = source.describe_for_immutable_place();\n                     opt_source = Some(source);\n@@ -240,7 +240,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // after the field access).\n             PlaceRef {\n                 base,\n-                projection: [base_proj @ ..,\n+                projection: [proj_base @ ..,\n                              ProjectionElem::Deref,\n                              ProjectionElem::Field(field, _),\n                              ProjectionElem::Deref,\n@@ -250,7 +250,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if let Some((span, message)) = annotate_struct_field(\n                     self.infcx.tcx,\n-                    Place::ty_from(base, base_proj, self.body, self.infcx.tcx).ty,\n+                    Place::ty_from(base, proj_base, self.body, self.infcx.tcx).ty,\n                     field,\n                 ) {\n                     err.span_suggestion("}, {"sha": "7dfe98cbebfc27f0e09d07d55de1138eaf344c8d", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28db2c9e953f4e1e0f1511193c90b84f4d170d1a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=28db2c9e953f4e1e0f1511193c90b84f4d170d1a", "patch": "@@ -514,19 +514,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Place {\n                 ref base,\n-                projection: box [ref base_proj @ .., ProjectionElem::Field(upvar_index, _)],\n+                projection: box [ref proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             }\n             | Place {\n                 ref base,\n                 projection: box [\n-                    ref base_proj @ ..,\n+                    ref proj_base @ ..,\n                     ProjectionElem::Field(upvar_index, _),\n                     ProjectionElem::Deref\n                 ],\n             } => {\n                 let place = PlaceRef {\n                     base,\n-                    projection: base_proj,\n+                    projection: proj_base,\n                 };\n \n                 // Not projected from the implicit `self` in a closure."}]}