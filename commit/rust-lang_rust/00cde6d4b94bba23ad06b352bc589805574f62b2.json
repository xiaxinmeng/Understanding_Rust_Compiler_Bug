{"sha": "00cde6d4b94bba23ad06b352bc589805574f62b2", "node_id": "C_kwDOAAsO6NoAKDAwY2RlNmQ0Yjk0YmJhMjNhZDA2YjM1MmJjNTg5ODA1NTc0ZjYyYjI", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-18T21:35:48Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-25T17:08:36Z"}, "message": "Move the `codegen_unit` debug assert from `rustc_query_system` to `query_impl`\n\nThis allows removing a function from the `DepKind` trait.", "tree": {"sha": "fec6f0991ee69c34b16f08f1a9f8755282624bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec6f0991ee69c34b16f08f1a9f8755282624bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00cde6d4b94bba23ad06b352bc589805574f62b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00cde6d4b94bba23ad06b352bc589805574f62b2", "html_url": "https://github.com/rust-lang/rust/commit/00cde6d4b94bba23ad06b352bc589805574f62b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00cde6d4b94bba23ad06b352bc589805574f62b2/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc8d000f2281efc17f9329214116aedada088a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc8d000f2281efc17f9329214116aedada088a5", "html_url": "https://github.com/rust-lang/rust/commit/ccc8d000f2281efc17f9329214116aedada088a5"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "2e62bebc8525b7596cc5428c38bc8ee225001002", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=00cde6d4b94bba23ad06b352bc589805574f62b2", "patch": "@@ -27,10 +27,6 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n     const RED: Self = DepKind::Red;\n \n-    fn is_codegen_unit_query(self) -> bool {\n-        self == DepKind::codegen_unit\n-    }\n-\n     fn debug_node(node: &DepNode, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}(\", node.kind)?;\n "}, {"sha": "ac95c8edf3f12a2af8499e128f2afb864065ab90", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=00cde6d4b94bba23ad06b352bc589805574f62b2", "patch": "@@ -380,6 +380,24 @@ where\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n     Q::Value: Value<TyCtxt<'tcx>>,\n {\n+    // We must avoid ever having to call `force_from_dep_node()` for a\n+    // `DepNode::codegen_unit`:\n+    // Since we cannot reconstruct the query key of a `DepNode::codegen_unit`, we\n+    // would always end up having to evaluate the first caller of the\n+    // `codegen_unit` query that *is* reconstructible. This might very well be\n+    // the `compile_codegen_unit` query, thus re-codegenning the whole CGU just\n+    // to re-trigger calling the `codegen_unit` query with the right key. At\n+    // that point we would already have re-done all the work we are trying to\n+    // avoid doing in the first place.\n+    // The solution is simple: Just explicitly call the `codegen_unit` query for\n+    // each CGU, right after partitioning. This way `try_mark_green` will always\n+    // hit the cache instead of having to go through `force_from_dep_node`.\n+    // This assertion makes sure, we actually keep applying the solution above.\n+    debug_assert!(\n+        dep_node.kind != DepKind::codegen_unit,\n+        \"calling force_from_dep_node() on DepKind::codegen_unit\"\n+    );\n+\n     if let Some(key) = Q::Key::recover(tcx, &dep_node) {\n         #[cfg(debug_assertions)]\n         let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();"}, {"sha": "5003a14b9108314ee0ebe5dbc7d3c55c8892493d", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cde6d4b94bba23ad06b352bc589805574f62b2/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=00cde6d4b94bba23ad06b352bc589805574f62b2", "patch": "@@ -55,24 +55,6 @@ pub trait DepContext: Copy {\n     fn try_force_from_dep_node(self, dep_node: DepNode<Self::DepKind>) -> bool {\n         debug!(\"try_force_from_dep_node({:?}) --- trying to force\", dep_node);\n \n-        // We must avoid ever having to call `force_from_dep_node()` for a\n-        // `DepNode::codegen_unit`:\n-        // Since we cannot reconstruct the query key of a `DepNode::codegen_unit`, we\n-        // would always end up having to evaluate the first caller of the\n-        // `codegen_unit` query that *is* reconstructible. This might very well be\n-        // the `compile_codegen_unit` query, thus re-codegenning the whole CGU just\n-        // to re-trigger calling the `codegen_unit` query with the right key. At\n-        // that point we would already have re-done all the work we are trying to\n-        // avoid doing in the first place.\n-        // The solution is simple: Just explicitly call the `codegen_unit` query for\n-        // each CGU, right after partitioning. This way `try_mark_green` will always\n-        // hit the cache instead of having to go through `force_from_dep_node`.\n-        // This assertion makes sure, we actually keep applying the solution above.\n-        debug_assert!(\n-            !dep_node.kind.is_codegen_unit_query(),\n-            \"calling force_from_dep_node() on DepKind::codegen_unit\"\n-        );\n-\n         let cb = self.dep_kind_info(dep_node.kind);\n         if let Some(f) = cb.force_from_dep_node {\n             f(self, dep_node);\n@@ -136,8 +118,6 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder>\n     /// DepKind to use to create the initial forever-red node.\n     const RED: Self;\n \n-    fn is_codegen_unit_query(self) -> bool;\n-\n     /// Implementation of `std::fmt::Debug` for `DepNode`.\n     fn debug_node(node: &DepNode<Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result;\n "}]}