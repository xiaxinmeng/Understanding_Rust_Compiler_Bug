{"sha": "8cc75b56a67ab33407b43faa0efc0f6483ff5664", "node_id": "C_kwDOAAsO6NoAKDhjYzc1YjU2YTY3YWIzMzQwN2I0M2ZhYTBlZmMwZjY0ODNmZjU2NjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-07T05:20:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-07T05:20:29Z"}, "message": "Auto merge of #111311 - JohnTitor:rollup-vfpjm0d, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105583 (Operand::extract_field: only cast llval if it's a pointer and replace bitcast w/ pointercast.)\n - #110094 (clean up `transmute`s in `core`)\n - #111150 (added TraitAlias to check_item() for missing_docs)\n - #111293 (rustc --explain E0726 - grammar fixing (it's => its + add a `the` where it felt right to do so))\n - #111300 (Emit while_true lint spanning the entire loop condition)\n - #111301 (Remove calls to `mem::forget` and `mem::replace` in `Option::get_or_insert_with`.)\n - #111303 (update Rust Unstable Book docs for `--extern force`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fead80264db3a06644bf70fb262f1a546c7b0c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fead80264db3a06644bf70fb262f1a546c7b0c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cc75b56a67ab33407b43faa0efc0f6483ff5664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc75b56a67ab33407b43faa0efc0f6483ff5664", "html_url": "https://github.com/rust-lang/rust/commit/8cc75b56a67ab33407b43faa0efc0f6483ff5664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cc75b56a67ab33407b43faa0efc0f6483ff5664/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a779cb7d827c0007dde1751d272bfdb58dded5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a779cb7d827c0007dde1751d272bfdb58dded5", "html_url": "https://github.com/rust-lang/rust/commit/70a779cb7d827c0007dde1751d272bfdb58dded5"}, {"sha": "8372eaee0b0f613a008df0102098e925ac0f5830", "url": "https://api.github.com/repos/rust-lang/rust/commits/8372eaee0b0f613a008df0102098e925ac0f5830", "html_url": "https://github.com/rust-lang/rust/commit/8372eaee0b0f613a008df0102098e925ac0f5830"}], "stats": {"total": 187, "additions": 113, "deletions": 74}, "files": [{"sha": "9efbb34b515b6679ba83015e9c3ee01ce4619fa5", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -2,6 +2,7 @@ use super::place::PlaceRef;\n use super::{FunctionCx, LocalRef};\n \n use crate::base;\n+use crate::common::TypeKind;\n use crate::glue;\n use crate::traits::*;\n use crate::MemFlags;\n@@ -236,19 +237,47 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n         };\n \n         match (&mut val, field.abi) {\n-            (OperandValue::Immediate(llval), _) => {\n+            (\n+                OperandValue::Immediate(llval),\n+                Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. },\n+            ) => {\n                 // Bools in union fields needs to be truncated.\n                 *llval = bx.to_immediate(*llval, field);\n                 // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n-                *llval = bx.bitcast(*llval, bx.cx().immediate_backend_type(field));\n+                let ty = bx.cx().immediate_backend_type(field);\n+                if bx.type_kind(ty) == TypeKind::Pointer {\n+                    *llval = bx.pointercast(*llval, ty);\n+                }\n             }\n             (OperandValue::Pair(a, b), Abi::ScalarPair(a_abi, b_abi)) => {\n                 // Bools in union fields needs to be truncated.\n                 *a = bx.to_immediate_scalar(*a, a_abi);\n                 *b = bx.to_immediate_scalar(*b, b_abi);\n                 // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n-                *a = bx.bitcast(*a, bx.cx().scalar_pair_element_backend_type(field, 0, true));\n-                *b = bx.bitcast(*b, bx.cx().scalar_pair_element_backend_type(field, 1, true));\n+                let a_ty = bx.cx().scalar_pair_element_backend_type(field, 0, true);\n+                let b_ty = bx.cx().scalar_pair_element_backend_type(field, 1, true);\n+                if bx.type_kind(a_ty) == TypeKind::Pointer {\n+                    *a = bx.pointercast(*a, a_ty);\n+                }\n+                if bx.type_kind(b_ty) == TypeKind::Pointer {\n+                    *b = bx.pointercast(*b, b_ty);\n+                }\n+            }\n+            // Newtype vector of array, e.g. #[repr(simd)] struct S([i32; 4]);\n+            (OperandValue::Immediate(llval), Abi::Aggregate { sized: true }) => {\n+                assert!(matches!(self.layout.abi, Abi::Vector { .. }));\n+\n+                let llty = bx.cx().backend_type(self.layout);\n+                let llfield_ty = bx.cx().backend_type(field);\n+\n+                // Can't bitcast an aggregate, so round trip through memory.\n+                let lltemp = bx.alloca(llfield_ty, field.align.abi);\n+                let llptr = bx.pointercast(lltemp, bx.cx().type_ptr_to(llty));\n+                bx.store(*llval, llptr, field.align.abi);\n+                *llval = bx.load(llfield_ty, lltemp, field.align.abi);\n+            }\n+            (OperandValue::Immediate(_), Abi::Uninhabited | Abi::Aggregate { sized: false }) => {\n+                bug!()\n             }\n             (OperandValue::Pair(..), _) => bug!(),\n             (OperandValue::Ref(..), _) => bug!(),"}, {"sha": "a721e746ecd70c13b7c293248858bc2b030e4eed", "filename": "compiler/rustc_error_codes/src/error_codes/E0726.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0726.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0726.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0726.md?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -25,8 +25,8 @@ block_on(future);\n \n Specify desired lifetime of parameter `content` or indicate the anonymous\n lifetime like `content: Content<'_>`. The anonymous lifetime tells the Rust\n-compiler that `content` is only needed until create function is done with\n-it's execution.\n+compiler that `content` is only needed until the `create` function is done with\n+its execution.\n \n The `implicit elision` meaning the omission of suggested lifetime that is\n `pub async fn create<'a>(content: Content<'a>) {}` is not allowed here as"}, {"sha": "0b7a704eb57dbbbcb56dc3ac074f425c71695b59", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -117,8 +117,7 @@ impl EarlyLintPass for WhileTrue {\n     #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::While(cond, _, label) = &e.kind\n-            && let cond = pierce_parens(cond)\n-            && let ast::ExprKind::Lit(token_lit) = cond.kind\n+            && let ast::ExprKind::Lit(token_lit) = pierce_parens(cond).kind\n             && let token::Lit { kind: token::Bool, symbol: kw::True, .. } = token_lit\n             && !cond.span.from_expansion()\n         {\n@@ -547,32 +546,13 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n-        match it.kind {\n-            hir::ItemKind::Trait(..) => {\n-                // Issue #11592: traits are always considered exported, even when private.\n-                if cx.tcx.visibility(it.owner_id)\n-                    == ty::Visibility::Restricted(\n-                        cx.tcx.parent_module_from_def_id(it.owner_id.def_id).to_def_id(),\n-                    )\n-                {\n-                    return;\n-                }\n-            }\n-            hir::ItemKind::TyAlias(..)\n-            | hir::ItemKind::Fn(..)\n-            | hir::ItemKind::Macro(..)\n-            | hir::ItemKind::Mod(..)\n-            | hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Const(..)\n-            | hir::ItemKind::Static(..) => {}\n-\n-            _ => return,\n-        };\n+        // Previously the Impl and Use types have been excluded from missing docs,\n+        // so we will continue to exclude them for compatibility\n+        if let hir::ItemKind::Impl(..) | hir::ItemKind::Use(..) = it.kind {\n+            return;\n+        }\n \n         let (article, desc) = cx.tcx.article_and_description(it.owner_id.to_def_id());\n-\n         self.check_missing_docs_attrs(cx, it.owner_id.def_id, article, desc);\n     }\n "}, {"sha": "d09a24b4b1d5be860affd89ff50d62ca38f34046", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -1287,7 +1287,7 @@ impl<T, const N: usize> MaybeUninit<[T; N]> {\n     #[inline]\n     pub const fn transpose(self) -> [MaybeUninit<T>; N] {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n-        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+        unsafe { intrinsics::transmute_unchecked(self) }\n     }\n }\n \n@@ -1307,6 +1307,6 @@ impl<T, const N: usize> [MaybeUninit<T>; N] {\n     #[inline]\n     pub const fn transpose(self) -> MaybeUninit<[T; N]> {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n-        unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n+        unsafe { intrinsics::transmute_unchecked(self) }\n     }\n }"}, {"sha": "ec1ef3cf43d12645113f03f1baff4f7a427d189b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -1641,10 +1641,8 @@ impl<T> Option<T> {\n     where\n         F: FnOnce() -> T,\n     {\n-        if let None = *self {\n-            // the compiler isn't smart enough to know that we are not dropping a `T`\n-            // here and wants us to ensure `T` can be dropped at compile time.\n-            mem::forget(mem::replace(self, Some(f())))\n+        if let None = self {\n+            *self = Some(f());\n         }\n \n         // SAFETY: a `None` variant for `self` would have been replaced by a `Some`"}, {"sha": "172e5fccb61aa60d1b603434f7fbc06c81dafb32", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -1,7 +1,6 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n use crate::cmp::Ordering::{self, *};\n-use crate::mem::transmute;\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -142,16 +141,13 @@ macro_rules! maybe_tuple_doc {\n #[inline]\n const fn ordering_is_some(c: Option<Ordering>, x: Ordering) -> bool {\n     // FIXME: Just use `==` once that's const-stable on `Option`s.\n-    // This isn't using `match` because that optimizes worse due to\n-    // making a two-step check (`Some` *then* the inner value).\n-\n-    // SAFETY: There's no public guarantee for `Option<Ordering>`,\n-    // but we're core so we know that it's definitely a byte.\n-    unsafe {\n-        let c: i8 = transmute(c);\n-        let x: i8 = transmute(Some(x));\n-        c == x\n-    }\n+    // This is mapping `None` to 2 and then doing the comparison afterwards\n+    // because it optimizes better (`None::<Ordering>` is represented as 2).\n+    x as i8\n+        == match c {\n+            Some(c) => c as i8,\n+            None => 2,\n+        }\n }\n \n // Constructs an expression that performs a lexical ordering using method `$rel`."}, {"sha": "087b37dd8def51410317a489486047000acb3000", "filename": "src/doc/unstable-book/src/compiler-flags/extern-options.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-options.md?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -4,6 +4,7 @@\n * Tracking issue for `noprelude`: [#98398](https://github.com/rust-lang/rust/issues/98398)\n * Tracking issue for `priv`: [#98399](https://github.com/rust-lang/rust/issues/98399)\n * Tracking issue for `nounused`: [#98400](https://github.com/rust-lang/rust/issues/98400)\n+* Tracking issue for `force`: [#111302](https://github.com/rust-lang/rust/issues/111302)\n \n The behavior of the `--extern` flag can be modified with `noprelude`, `priv` or `nounused` options.\n \n@@ -25,3 +26,4 @@ To use multiple options, separate them with a comma:\n   This is used by the [build-std project](https://github.com/rust-lang/wg-cargo-std-aware/) to simulate compatibility with sysroot-only crates.\n * `priv`: Mark the crate as a private dependency for the [`exported_private_dependencies`](../../rustc/lints/listing/warn-by-default.html#exported-private-dependencies) lint.\n * `nounused`: Suppress [`unused-crate-dependencies`](../../rustc/lints/listing/allowed-by-default.html#unused-crate-dependencies) warnings for the crate.\n+* `force`: Resolve the crate as if it is used, even if it is not used. This can be used to satisfy compilation session requirements like the presence of an allocator or panic handler."}, {"sha": "e4c9f8f559b18219a14e094284c8e4cb20782ff5", "filename": "tests/ui/lint/lint-missing-doc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Flint%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Flint%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -3,6 +3,7 @@\n #![deny(missing_docs)]\n #![allow(dead_code)]\n #![feature(associated_type_defaults, extern_types)]\n+#![feature(trait_alias)]\n \n //! Some garbage docs for the crate here\n #![doc=\"More garbage\"]\n@@ -202,4 +203,6 @@ extern \"C\" {\n     //~^ ERROR: missing documentation for a foreign type\n }\n \n+pub trait T = Sync; //~ ERROR: missing documentation for a trait alias\n+\n fn main() {}"}, {"sha": "c94bd3b8dfb3fd686bf3d65fbc38bb4f483f1589", "filename": "tests/ui/lint/lint-missing-doc.stderr", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.stderr?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -1,5 +1,5 @@\n error: missing documentation for a type alias\n-  --> $DIR/lint-missing-doc.rs:11:1\n+  --> $DIR/lint-missing-doc.rs:12:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^\n@@ -11,142 +11,148 @@ LL | #![deny(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n error: missing documentation for a struct\n-  --> $DIR/lint-missing-doc.rs:18:1\n+  --> $DIR/lint-missing-doc.rs:19:1\n    |\n LL | pub struct PubFoo {\n    | ^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/lint-missing-doc.rs:19:5\n+  --> $DIR/lint-missing-doc.rs:20:5\n    |\n LL |     pub a: isize,\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/lint-missing-doc.rs:30:1\n+  --> $DIR/lint-missing-doc.rs:31:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:34:1\n+  --> $DIR/lint-missing-doc.rs:35:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^\n \n error: missing documentation for a trait\n-  --> $DIR/lint-missing-doc.rs:52:1\n+  --> $DIR/lint-missing-doc.rs:53:1\n    |\n LL | pub trait C {\n    | ^^^^^^^^^^^\n \n error: missing documentation for a method\n-  --> $DIR/lint-missing-doc.rs:53:5\n+  --> $DIR/lint-missing-doc.rs:54:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n error: missing documentation for a method\n-  --> $DIR/lint-missing-doc.rs:54:5\n+  --> $DIR/lint-missing-doc.rs:55:5\n    |\n LL |     fn foo_with_impl(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:55:5\n+  --> $DIR/lint-missing-doc.rs:56:5\n    |\n LL |     fn foo_no_self();\n    |     ^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:56:5\n+  --> $DIR/lint-missing-doc.rs:57:5\n    |\n LL |     fn foo_no_self_with_impl() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:66:5\n+  --> $DIR/lint-missing-doc.rs:67:5\n    |\n LL |     type AssociatedType;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:67:5\n+  --> $DIR/lint-missing-doc.rs:68:5\n    |\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:83:5\n+  --> $DIR/lint-missing-doc.rs:84:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/lint-missing-doc.rs:120:1\n+  --> $DIR/lint-missing-doc.rs:121:1\n    |\n LL | pub enum PubBaz {\n    | ^^^^^^^^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/lint-missing-doc.rs:121:5\n+  --> $DIR/lint-missing-doc.rs:122:5\n    |\n LL |     PubBazA {\n    |     ^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/lint-missing-doc.rs:122:9\n+  --> $DIR/lint-missing-doc.rs:123:9\n    |\n LL |         a: isize,\n    |         ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/lint-missing-doc.rs:153:1\n+  --> $DIR/lint-missing-doc.rs:154:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:163:1\n+  --> $DIR/lint-missing-doc.rs:164:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:169:5\n+  --> $DIR/lint-missing-doc.rs:170:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:170:5\n+  --> $DIR/lint-missing-doc.rs:171:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:176:9\n+  --> $DIR/lint-missing-doc.rs:177:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:191:5\n+  --> $DIR/lint-missing-doc.rs:192:5\n    |\n LL |     pub fn extern_fn_undocumented(f: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:196:5\n+  --> $DIR/lint-missing-doc.rs:197:5\n    |\n LL |     pub static EXTERN_STATIC_UNDOCUMENTED: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a foreign type\n-  --> $DIR/lint-missing-doc.rs:201:5\n+  --> $DIR/lint-missing-doc.rs:202:5\n    |\n LL |     pub type ExternTyUndocumented;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 24 previous errors\n+error: missing documentation for a trait alias\n+  --> $DIR/lint-missing-doc.rs:206:1\n+   |\n+LL | pub trait T = Sync;\n+   | ^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n "}, {"sha": "35ca76e989b91f14781890c4e92e6f01059fa3ab", "filename": "tests/ui/simd/issue-105439.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Fsimd%2Fissue-105439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc75b56a67ab33407b43faa0efc0f6483ff5664/tests%2Fui%2Fsimd%2Fissue-105439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fissue-105439.rs?ref=8cc75b56a67ab33407b43faa0efc0f6483ff5664", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+// compile-flags: -O -Zverify-llvm-ir\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[allow(non_camel_case_types)]\n+#[derive(Clone, Copy)]\n+#[repr(simd)]\n+struct i32x4([i32; 4]);\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_add<T>(x: T, y: T) -> T;\n+}\n+\n+#[inline(always)]\n+fn to_array(a: i32x4) -> [i32; 4] {\n+    a.0\n+}\n+\n+fn main() {\n+    let a = i32x4([1, 2, 3, 4]);\n+    let b = unsafe { simd_add(a, a) };\n+    assert_eq!(to_array(b), [2, 4, 6, 8]);\n+}"}]}