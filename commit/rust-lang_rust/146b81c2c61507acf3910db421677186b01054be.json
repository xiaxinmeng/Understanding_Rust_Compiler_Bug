{"sha": "146b81c2c61507acf3910db421677186b01054be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmI4MWMyYzYxNTA3YWNmMzkxMGRiNDIxNjc3MTg2YjAxMDU0YmU=", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2018-02-12T13:07:10Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2018-02-12T13:07:10Z"}, "message": "Fix tidy errors", "tree": {"sha": "4e075133137f47aab8bc1a3688eeee63236a048d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e075133137f47aab8bc1a3688eeee63236a048d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146b81c2c61507acf3910db421677186b01054be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146b81c2c61507acf3910db421677186b01054be", "html_url": "https://github.com/rust-lang/rust/commit/146b81c2c61507acf3910db421677186b01054be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146b81c2c61507acf3910db421677186b01054be/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e15de9f9c15d967d5a538b8dc37710354ae893", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e15de9f9c15d967d5a538b8dc37710354ae893", "html_url": "https://github.com/rust-lang/rust/commit/56e15de9f9c15d967d5a538b8dc37710354ae893"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "5f85cbdef80f7f4be9a0cbdfba7cb31fadbb4cfe", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/146b81c2c61507acf3910db421677186b01054be/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146b81c2c61507acf3910db421677186b01054be/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=146b81c2c61507acf3910db421677186b01054be", "patch": "@@ -1126,8 +1126,8 @@ assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\n             concat!(\"Computes the absolute value of `self`.\n \n Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\n-happened. If self is the minimum value (e.g. \", stringify!($SelfT), \"::MIN for values of type \n-\", stringify!($SelfT), \"), then the minimum value will be returned again and true will be returned\n+happened. If self is the minimum value (e.g. \", stringify!($SelfT), \"::MIN for values of type\n+ \", stringify!($SelfT), \"), then the minimum value will be returned again and true will be returned\n for an overflow happening.\n \n # Examples\n@@ -1307,7 +1307,8 @@ impl i64 {\n \n #[lang = \"i128\"]\n impl i128 {\n-    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728, 170141183460469231731687303715884105727 }\n+    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n+        170141183460469231731687303715884105727 }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n@@ -1875,7 +1876,8 @@ Basic usage:\n use std::\", stringify!($SelfT), \";\n \n assert_eq!(100\", stringify!($SelfT), \".saturating_mul(127), 12700);\n-assert_eq!((1\", stringify!($SelfT), \" << 23).saturating_mul(1 << 23), \", stringify!($SelfT), \"::MAX);\n+assert_eq!((1\", stringify!($SelfT), \" << 23).saturating_mul(1 << 23), \", stringify!($SelfT),\n+\"::MAX);\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[inline]\n@@ -2004,9 +2006,11 @@ Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where\n Basic usage:\n \n ```\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_neg(), \", stringify!($SelfT), \"::max_value() - 100 + 1);\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_neg(), \", stringify!($SelfT),\n+\"::max_value() - 100 + 1);\n assert_eq!(0\", stringify!($SelfT), \".wrapping_neg(), 0);\n-assert_eq!(180\", stringify!($SelfT), \".wrapping_neg(), \", stringify!($SelfT), \"::max_value() - 180 + 1);\n+assert_eq!(180\", stringify!($SelfT), \".wrapping_neg(), \", stringify!($SelfT),\n+\"::max_value() - 180 + 1);\n assert_eq!(180\", stringify!($SelfT), \".wrapping_neg(), (\", stringify!($SelfT), \"::max_value() / 2\",\n \"+ 1) - (180\", stringify!($SelfT), \" - (\", stringify!($SelfT), \"::max_value() / 2 + 1)));\n ```\"),"}]}