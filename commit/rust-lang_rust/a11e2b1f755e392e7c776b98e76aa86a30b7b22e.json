{"sha": "a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "node_id": "C_kwDOAAsO6NoAKGExMWUyYjFmNzU1ZTM5MmU3Yzc3NmI5OGU3NmFhODZhMzBiN2IyMmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T15:40:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T15:40:48Z"}, "message": "Rollup merge of #92917 - jackh726:issue-91762-2, r=nikomatsakis\n\nDon't constrain projection predicates with inference vars in GAT substs\n\ncc #91762\n\nNot a fix, but a mitigation to prevent a backwards-compatible hazard where we normalize using a predicate only because it's the only one available, but shouldn't. This would constrain an inference variable which didn't really want. We already do this when selecting a projection candidate, which isn't always correct. But changing that is a problem for a different day.\n\nAlso found out that a suggestion for `await`ing a future was using the wrong substs.\n\nr? ``@nikomatsakis``", "tree": {"sha": "b332e296015c8868de7e32f74c4417dbcee92619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b332e296015c8868de7e32f74c4417dbcee92619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAo8ACRBK7hj4Ov3rIwAAbDIIADe7YdO/1iMkwQXc2NcSzyHw\nUHLuS5xetYVDQVxNMQvQQnArUQvyiW53ZrpDzQAdSDP1WfJ0dWj65Zh1ENYFFP1o\nI58Yb5jjVc9Eps2mDaMKDT4yl8ZRYNKmxr7rFLjt+O/DH5C8Y+ZmAdVwyDny2r6L\n1lb2FJLXP6LNEkbWN9wAdl0CNpeI22xd7lVKjPkFGUMxXSVgTPGhId2qnQ/cNQbF\ntcPVgWT+YcAojyn0W2wZSzN8GLfvKwXPCmKkPbU8wYGI5LVZk3b1n37FgheVOYUv\nxOyiTVm0NGWWHAX/Oi613P6+d2hEwBQyPSg1nk/N7k5hRpdNOUsNBJKEyX0Sf1c=\n=uB8z\n-----END PGP SIGNATURE-----\n", "payload": "tree b332e296015c8868de7e32f74c4417dbcee92619\nparent 8429dcdb79b35182036e8de574287a7acc4b14d8\nparent 7ad48bd4e22aaffa5ac32809b9196fab9c04de2c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644334848 +0100\ncommitter GitHub <noreply@github.com> 1644334848 +0100\n\nRollup merge of #92917 - jackh726:issue-91762-2, r=nikomatsakis\n\nDon't constrain projection predicates with inference vars in GAT substs\n\ncc #91762\n\nNot a fix, but a mitigation to prevent a backwards-compatible hazard where we normalize using a predicate only because it's the only one available, but shouldn't. This would constrain an inference variable which didn't really want. We already do this when selecting a projection candidate, which isn't always correct. But changing that is a problem for a different day.\n\nAlso found out that a suggestion for `await`ing a future was using the wrong substs.\n\nr? ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "html_url": "https://github.com/rust-lang/rust/commit/a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8429dcdb79b35182036e8de574287a7acc4b14d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8429dcdb79b35182036e8de574287a7acc4b14d8", "html_url": "https://github.com/rust-lang/rust/commit/8429dcdb79b35182036e8de574287a7acc4b14d8"}, {"sha": "7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "html_url": "https://github.com/rust-lang/rust/commit/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "65a18897b39157f5150ddfcf286424219b144422", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -2473,7 +2473,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n                         trait_pred.self_ty().skip_binder(),\n-                        self.fresh_substs_for_item(span, item_def_id),\n+                        &self.fresh_substs_for_item(span, item_def_id)[1..],\n                     ),\n                     // `Future::Output`\n                     item_def_id,"}, {"sha": "36cc14610cb4b8d5d7c3a4651f4a619fe9dfeb7b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -1073,6 +1073,16 @@ fn project<'cx, 'tcx>(\n         return Ok(Projected::Progress(Progress::error(selcx.tcx())));\n     }\n \n+    // If the obligation contains any inference types or consts in associated\n+    // type substs, then we don't assemble any candidates.\n+    // This isn't really correct, but otherwise we can end up in a case where\n+    // we constrain inference variables by selecting a single predicate, when\n+    // we need to stay general. See issue #91762.\n+    let (_, predicate_own_substs) = obligation.predicate.trait_ref_and_own_substs(selcx.tcx());\n+    if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n+        return Err(ProjectionError::TooManyCandidates);\n+    }\n+\n     let mut candidates = ProjectionCandidateSet::None;\n \n     // Make sure that the following procedures are kept in order. ParamEnv"}, {"sha": "01f99fa448749fdd3a346d844e678c290dec8e73", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -17,6 +17,7 @@ impl<T> UnsafeCopy for T {}\n fn main() {\n     let b = Box::new(42usize);\n     let copy = <()>::copy(&b);\n+    //~^ type annotations needed\n \n     let raw_b = Box::deref(&b) as *const _;\n     let raw_copy = Box::deref(&copy) as *const _;"}, {"sha": "e7ebf5964ba4125d0e05d8d54a65d90de213b621", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -27,6 +27,13 @@ help: consider restricting type parameter `T`\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n    |                +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-74824.rs:19:16\n+   |\n+LL |     let copy = <()>::copy(&b);\n+   |                ^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `copy`\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0282.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b259a3c6e06bc7248985b19f64f8c4d953cf7ca3", "filename": "src/test/ui/generic-associated-types/issue-91762.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -0,0 +1,30 @@\n+// check-fail\n+\n+// FIXME(generic_associated_types): We almost certaintly want this to pass, but\n+// it's particularly difficult currently, because we need a way of specifying\n+// that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n+// a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)\n+// solution. This might be better to just wait for Chalk.\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Functor {\n+    type With<T>;\n+\n+    fn fmap<T, U>(this: Self::With<T>) -> Self::With<U>;\n+}\n+\n+pub trait FunctorExt<T>: Sized {\n+    type Base: Functor<With<T> = Self>;\n+\n+    fn fmap<U>(self) {\n+        let arg: <Self::Base as Functor>::With<T>;\n+        let ret: <Self::Base as Functor>::With<U>;\n+\n+        arg = self;\n+        ret = <Self::Base as Functor>::fmap(arg);\n+        //~^ type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a9c465cdd7ea2eb999926995e6d1d43ccd7f8701", "filename": "src/test/ui/generic-associated-types/issue-91762.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a11e2b1f755e392e7c776b98e76aa86a30b7b22e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr?ref=a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-91762.rs:25:15\n+   |\n+LL |         ret = <Self::Base as Functor>::fmap(arg);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `fmap`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}