{"sha": "fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzQzMzA0YWY2ZmY1MjJiOWFhM2IxNDNlZjZjZDRiZGRkN2U3YTI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T02:36:03Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:30:48Z"}, "message": "typeck: Index[Mut] traits now have *one* input parameter (not two)", "tree": {"sha": "aee48fc2e7e4350f5e77637b4f841fb4c8a3c697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aee48fc2e7e4350f5e77637b4f841fb4c8a3c697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2", "html_url": "https://github.com/rust-lang/rust/commit/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2/comments", "author": null, "committer": null, "parents": [{"sha": "7d3c5f020e66d01686adf98881b957be9d939021", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3c5f020e66d01686adf98881b957be9d939021", "html_url": "https://github.com/rust-lang/rust/commit/7d3c5f020e66d01686adf98881b957be9d939021"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "beea3fd4ef2c55cecec2d50672f0da753a3ce891", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fc343304af6ff522b9aa3b143ef6cd4bddd7e7a2", "patch": "@@ -2524,7 +2524,6 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n \n     let input_ty = fcx.infcx().next_ty_var();\n-    let return_ty = fcx.infcx().next_ty_var();\n \n     // Try `IndexMut` first, if preferred.\n     let method = match (lvalue_pref, fcx.tcx().lang_items.index_mut_trait()) {\n@@ -2536,7 +2535,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                              trait_did,\n                                              adjustment.clone(),\n                                              adjusted_ty,\n-                                             Some(vec![input_ty, return_ty]))\n+                                             Some(vec![input_ty]))\n         }\n         _ => None,\n     };\n@@ -2551,17 +2550,17 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                              trait_did,\n                                              adjustment,\n                                              adjusted_ty,\n-                                             Some(vec![input_ty, return_ty]))\n+                                             Some(vec![input_ty]))\n         }\n         (method, _) => method,\n     };\n \n     // If some lookup succeeds, write callee into table and extract index/element\n     // type from the method signature.\n     // If some lookup succeeded, install method in table\n-    method.map(|method| {\n-        make_overloaded_lvalue_return_type(fcx, Some(method_call), Some(method));\n-        (input_ty, return_ty)\n+    method.and_then(|method| {\n+        make_overloaded_lvalue_return_type(fcx, Some(method_call), Some(method)).\n+            map(|ret| (input_ty, ret.ty))\n     })\n }\n "}]}