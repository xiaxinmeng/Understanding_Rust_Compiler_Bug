{"sha": "cd1746b2b4275a3437581992e2cb38f104b74b6c", "node_id": "C_kwDOAAsO6NoAKGNkMTc0NmIyYjQyNzVhMzQzNzU4MTk5MmUyY2IzOGYxMDRiNzRiNmM", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-05-06T07:34:41Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-05-06T07:34:41Z"}, "message": "Clarify unreachable_unchecked docs", "tree": {"sha": "ef9968419391f0c7c4de91984a479807a7e87429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef9968419391f0c7c4de91984a479807a7e87429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1746b2b4275a3437581992e2cb38f104b74b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1746b2b4275a3437581992e2cb38f104b74b6c", "html_url": "https://github.com/rust-lang/rust/commit/cd1746b2b4275a3437581992e2cb38f104b74b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1746b2b4275a3437581992e2cb38f104b74b6c/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3615cb476b30d4058f397f45016e9b1823b4c870", "url": "https://api.github.com/repos/rust-lang/rust/commits/3615cb476b30d4058f397f45016e9b1823b4c870", "html_url": "https://github.com/rust-lang/rust/commit/3615cb476b30d4058f397f45016e9b1823b4c870"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "7ae1bfd4f351a1331d8fd14ddadaa2cefcd12ec9", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd1746b2b4275a3437581992e2cb38f104b74b6c/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1746b2b4275a3437581992e2cb38f104b74b6c/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=cd1746b2b4275a3437581992e2cb38f104b74b6c", "patch": "@@ -10,10 +10,11 @@ use crate::intrinsics;\n ///\n /// # Safety\n ///\n-/// Reaching this function is *Undefined Behavior* (UB). In particular, as the\n-/// compiler assumes that all forms of Undefined Behavior can never happen, it\n-/// will eliminate all branches which themselves reach a call to\n-/// `unreachable_unchecked()`.\n+/// Reaching this function is *Undefined Behavior*.\n+///\n+/// As the compiler assumes that all forms of Undefined Behavior can never\n+/// happen, it will eliminate all branches in the surrounding code that it can\n+/// determine will invariably lead to a call to `unreachable_unchecked()`.\n ///\n /// If the assumptions embedded in using this function turn out to be wrong -\n /// that is, if the site which is calling `unreachable_unchecked()` is actually\n@@ -40,15 +41,17 @@ use crate::intrinsics;\n ///     divisors.retain(|divisor| *divisor != 0)\n /// }\n ///\n-/// fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n+/// /// # Safety\n+/// /// All elements of `divisor` must be non-zero.\n+/// unsafe fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n ///     divisors.iter().fold(i, |acc, divisor| {\n ///         // Convince the compiler that a division by zero can't happen here\n ///         // and a check is not needed below.\n ///         if *divisor == 0 {\n-///             // SAFETY: `divisor` can't be zero because of `prepare_inputs`,\n+///             // Safety: `divisor` can't be zero because of `prepare_inputs`,\n ///             // but the compiler does not know about this. We *promise*\n ///             // that we always call `prepare_inputs`.\n-///             unsafe { std::hint::unreachable_unchecked() }\n+///             std::hint::unreachable_unchecked()\n ///         }\n ///         // The compiler would normally introduce a check here that prevents\n ///         // a division by zero. However, if `divisor` was zero, the branch\n@@ -61,11 +64,15 @@ use crate::intrinsics;\n ///\n /// let mut divisors = vec![2, 0, 4];\n /// prepare_inputs(&mut divisors);\n-/// assert_eq!(do_computation(100, &divisors), 12);\n+/// let result = unsafe {\n+///     // Safety: prepare_inputs() guarantees that divisors is non-zero\n+///     do_computation(100, &divisors)\n+/// };\n+/// assert_eq!(result, 12);\n ///\n /// ```\n ///\n-/// While using `unreachable_unchecked()` is perfectly safe in the following\n+/// While using `unreachable_unchecked()` is perfectly sound in the following\n /// example, the compiler is able to prove that a division by zero is not\n /// possible. Benchmarking reveals that `unreachable_unchecked()` provides\n /// no benefit over using [`unreachable!`], while the latter does not introduce"}]}