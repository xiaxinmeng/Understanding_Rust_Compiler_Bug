{"sha": "46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDI3ZTEwYmUzZDIzNjQzYmM0MWZmYThkYzhjN2NmNDAxM2IyMWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-06T17:17:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T17:17:22Z"}, "message": "Merge #3035\n\n3035: Doctest autoimport r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e68818a739d164bcb14580e0b1e6481d0651c361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68818a739d164bcb14580e0b1e6481d0651c361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePEoiCRBK7hj4Ov3rIwAAdHIIADaNf3dSTF+l6Ns7rlJqunrx\nk9PWSO9Tx1ngUwzTz6dSEyQiNEXkA5H62c8/9QnH01pLn8aToDpUFu4h1y8LvLsI\nteBOm7UKigs3FPrEbrgLJS/2ph2mhJ6Irstddy2UIe33avtYdMbcPoGAFrziIaa/\n+2sOTzkmirrp6Cv4wj5Iu9d+jW1Zp67H/WxHCypgKm1/HqLRWMUWCwO5AIMLDDB2\nsVd2qK2dY35TDbqg3hPsqoLbqoAHQuW1fWnIWg7LZtPiGO7UDxrnoYiP12NPDu8i\ntjY9bs6EtMEpF5zNK0eQM2d5Om1Di4mb4neuR+GUJsw/cJWQymVIamkklcYyyqs=\n=ZcLn\n-----END PGP SIGNATURE-----\n", "payload": "tree e68818a739d164bcb14580e0b1e6481d0651c361\nparent 895cdb588314f4e04529d1adf8cd232856497dad\nparent 755077e3720bd97e1e506bf8fbe0a2534389f282\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581009442 +0000\ncommitter GitHub <noreply@github.com> 1581009442 +0000\n\nMerge #3035\n\n3035: Doctest autoimport r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "html_url": "https://github.com/rust-lang/rust/commit/46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895cdb588314f4e04529d1adf8cd232856497dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/895cdb588314f4e04529d1adf8cd232856497dad", "html_url": "https://github.com/rust-lang/rust/commit/895cdb588314f4e04529d1adf8cd232856497dad"}, {"sha": "755077e3720bd97e1e506bf8fbe0a2534389f282", "url": "https://api.github.com/repos/rust-lang/rust/commits/755077e3720bd97e1e506bf8fbe0a2534389f282", "html_url": "https://github.com/rust-lang/rust/commit/755077e3720bd97e1e506bf8fbe0a2534389f282"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "f16b08c43bf6d6cbcc79ddc6df054ea8fcb99c46", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "patch": "@@ -18,14 +18,16 @@ use ra_ide_db::imports_locator::ImportsLocatorIde;\n // fn main() {\n //     let map = HashMap<|>::new();\n // }\n+// # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n // ->\n // ```\n // use std::collections::HashMap;\n //\n // fn main() {\n-//     let map = HashMap<|>::new();\n+//     let map = HashMap::new();\n // }\n+// # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     let path_to_import: ast::Path = ctx.find_node_at_offset()?;"}, {"sha": "56020028cfae658e6c373d4e8c2a81e8e3a6d7d5", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "patch": "@@ -5,18 +5,12 @@\n \n mod generated;\n \n-use ra_db::{fixture::WithFixture, FileRange};\n+use ra_db::FileRange;\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n-use ra_ide_db::RootDatabase;\n-\n fn check(assist_id: &str, before: &str, after: &str) {\n-    // FIXME we cannot get the imports search functionality here yet, but still need to generate a test and a doc for an assist\n-    if assist_id == \"auto_import\" {\n-        return;\n-    }\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = RootDatabase::with_single_file(&before);\n+    let (db, file_id) = crate::helpers::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let assist = crate::assists(&db, frange)"}, {"sha": "0d95b957bab735e555ae9959762204d0c85c6c4a", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "patch": "@@ -222,13 +222,15 @@ fn doctest_auto_import() {\n fn main() {\n     let map = HashMap<|>::new();\n }\n+pub mod std { pub mod collections { pub struct HashMap { } } }\n \"#####,\n         r#####\"\n use std::collections::HashMap;\n \n fn main() {\n-    let map = HashMap<|>::new();\n+    let map = HashMap::new();\n }\n+pub mod std { pub mod collections { pub struct HashMap { } } }\n \"#####,\n     )\n }"}, {"sha": "1e2dd74858e16ae88a45783f4b55c40eb5959c95", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "patch": "@@ -223,7 +223,7 @@ fn main() {\n use std::collections::HashMap;\n \n fn main() {\n-    let map = HashMap\u2503::new();\n+    let map = HashMap::new();\n }\n ```\n "}, {"sha": "697e830df40ef16ef90f29254353f8644710f1c2", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46027e10be3d23643bc41ffa8dc8c7cf4013b21a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=46027e10be3d23643bc41ffa8dc8c7cf4013b21a", "patch": "@@ -20,6 +20,28 @@ struct Assist {\n     after: String,\n }\n \n+fn hide_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}\n+\n+fn reveal_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .map(|it| {\n+            if it.starts_with(\"# \") {\n+                &it[2..]\n+            } else if it == \"#\" {\n+                \"\"\n+            } else {\n+                it\n+            }\n+        })\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}\n+\n fn collect_assists() -> Result<Vec<Assist>> {\n     let mut res = Vec::new();\n     for entry in fs::read_dir(project_root().join(codegen::ASSISTS_DIR))? {\n@@ -91,13 +113,14 @@ fn doctest_{}() {{\n     check(\n         \"{}\",\n r#####\"\n-{}\n-\"#####, r#####\"\n-{}\n-\"#####)\n+{}\"#####, r#####\"\n+{}\"#####)\n }}\n \"######,\n-            assist.id, assist.id, assist.before, assist.after\n+            assist.id,\n+            assist.id,\n+            reveal_hash_comments(&assist.before),\n+            reveal_hash_comments(&assist.after)\n         );\n \n         buf.push_str(&test)\n@@ -123,12 +146,13 @@ fn generate_docs(assists: &[Assist], mode: Mode) -> Result<()> {\n ```rust\n // BEFORE\n {}\n-\n // AFTER\n-{}\n-```\n+{}```\n \",\n-            assist.id, assist.doc, before, after\n+            assist.id,\n+            assist.doc,\n+            hide_hash_comments(&before),\n+            hide_hash_comments(&after)\n         );\n         buf.push_str(&docs);\n     }"}]}