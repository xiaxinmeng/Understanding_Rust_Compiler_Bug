{"sha": "a7ac441760ae034ff7401439b38da821f4e2df3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YWM0NDE3NjBhZTAzNGZmNzQwMTQzOWIzOGRhODIxZjRlMmRmM2E=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-09-19T17:03:14Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Add new lint to detect unnecessarily wrapped value", "tree": {"sha": "9b3bf79c31cb587159e0697f10502fcf37cc7a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3bf79c31cb587159e0697f10502fcf37cc7a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7ac441760ae034ff7401439b38da821f4e2df3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ac441760ae034ff7401439b38da821f4e2df3a", "html_url": "https://github.com/rust-lang/rust/commit/a7ac441760ae034ff7401439b38da821f4e2df3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7ac441760ae034ff7401439b38da821f4e2df3a/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4f82997a94cc91723daae14889f21428e65472", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f82997a94cc91723daae14889f21428e65472", "html_url": "https://github.com/rust-lang/rust/commit/ad4f82997a94cc91723daae14889f21428e65472"}], "stats": {"total": 318, "additions": 318, "deletions": 0}, "files": [{"sha": "02b862d3196596a8f5b580357619d509cb9bc1cb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -2008,6 +2008,7 @@ Released 2018-09-13\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n+[`unnecessary_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wrap\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n [`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unnested_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns"}, {"sha": "2d1f75391bb567818fdee83edf1235409202c5bd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -323,6 +323,7 @@ mod unicode;\n mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n+mod unnecessary_wrap;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n mod unused_io_amount;\n@@ -892,6 +893,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n+        &unnecessary_wrap::UNNECESSARY_WRAP,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n@@ -1064,6 +1066,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_clone::RedundantClone);\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n     store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n+    store.register_late_pass(|| box unnecessary_wrap::UnnecessaryWrap);\n     store.register_late_pass(|| box types::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n@@ -1571,6 +1574,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wrap::UNNECESSARY_WRAP),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n@@ -1775,6 +1779,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wrap::UNNECESSARY_WRAP),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),"}, {"sha": "26a57517258417a1dec4c3e03a8cbda276ef0ef0", "filename": "clippy_lints/src/unnecessary_wrap.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wrap.rs?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -0,0 +1,177 @@\n+use crate::utils::{\n+    is_type_diagnostic_item, match_qpath, multispan_sugg_with_applicability, paths, return_ty, snippet,\n+    span_lint_and_then,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for private functions that only return `Ok` or `Some`.\n+    ///\n+    /// **Why is this bad?** It is not meaningful to wrap values when no `None` or `Err` is returned.\n+    ///\n+    /// **Known problems:** Since this lint changes function type signature, you may need to\n+    /// adjust some codes at callee side.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// pub fn get_cool_number(a: bool, b: bool) -> Option<i32> {\n+    ///     if a && b {\n+    ///         return Some(50);\n+    ///     }\n+    ///     if a {\n+    ///         Some(0)\n+    ///     } else {\n+    ///         Some(10)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// pub fn get_cool_number(a: bool, b: bool) -> i32 {\n+    ///     if a && b {\n+    ///         return 50;\n+    ///     }\n+    ///     if a {\n+    ///         0\n+    ///     } else {\n+    ///         10\n+    ///     }\n+    /// }\n+    /// ```\n+    pub UNNECESSARY_WRAP,\n+    complexity,\n+    \"functions that only return `Ok` or `Some`\"\n+}\n+\n+declare_lint_pass!(UnnecessaryWrap => [UNNECESSARY_WRAP]);\n+\n+impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &FnDecl<'tcx>,\n+        body: &Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if_chain! {\n+            if let FnKind::ItemFn(.., visibility, _) = fn_kind;\n+            if visibility.node.is_pub();\n+            then {\n+                return;\n+            }\n+        }\n+\n+        if let ExprKind::Block(ref block, ..) = body.value.kind {\n+            let path = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+                &paths::OPTION_SOME\n+            } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n+                &paths::RESULT_OK\n+            } else {\n+                return;\n+            };\n+\n+            let mut visitor = UnnecessaryWrapVisitor { result: Vec::new() };\n+            visitor.visit_block(block);\n+            let result = visitor.result;\n+\n+            if result.iter().any(|expr| {\n+                if_chain! {\n+                    if let ExprKind::Call(ref func, ref args) = expr.kind;\n+                    if let ExprKind::Path(ref qpath) = func.kind;\n+                    if match_qpath(qpath, path);\n+                    if args.len() == 1;\n+                    then {\n+                        false\n+                    } else {\n+                        true\n+                    }\n+                }\n+            }) {\n+                return;\n+            }\n+\n+            let suggs = result.iter().filter_map(|expr| {\n+                let snippet = if let ExprKind::Call(_, ref args) = expr.kind {\n+                    Some(snippet(cx, args[0].span, \"..\").to_string())\n+                } else {\n+                    None\n+                };\n+                snippet.map(|snip| (expr.span, snip))\n+            });\n+\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_WRAP,\n+                span,\n+                \"this function returns unnecessarily wrapping data\",\n+                move |diag| {\n+                    multispan_sugg_with_applicability(\n+                        diag,\n+                        \"factor this out to\",\n+                        Applicability::MachineApplicable,\n+                        suggs,\n+                    );\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+struct UnnecessaryWrapVisitor<'tcx> {\n+    result: Vec<&'tcx Expr<'tcx>>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for UnnecessaryWrapVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_block(&mut self, block: &'tcx Block<'tcx>) {\n+        for stmt in block.stmts {\n+            self.visit_stmt(stmt);\n+        }\n+        if let Some(expr) = block.expr {\n+            self.visit_expr(expr)\n+        }\n+    }\n+\n+    fn visit_stmt(&mut self, stmt: &'tcx Stmt<'tcx>) {\n+        match stmt.kind {\n+            StmtKind::Semi(ref expr) => {\n+                if let ExprKind::Ret(Some(value)) = expr.kind {\n+                    self.result.push(value);\n+                }\n+            },\n+            StmtKind::Expr(ref expr) => self.visit_expr(expr),\n+            _ => (),\n+        }\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        match expr.kind {\n+            ExprKind::Ret(Some(value)) => self.result.push(value),\n+            ExprKind::Call(..) | ExprKind::Path(..) => self.result.push(expr),\n+            ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, ..) => {\n+                self.visit_block(block);\n+            },\n+            ExprKind::Match(_, arms, _) => {\n+                for arm in arms {\n+                    self.visit_expr(arm.body);\n+                }\n+            },\n+            _ => intravisit::walk_expr(self, expr),\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "4a0cdc5d82f9b6b3b64e75c2026fe27009a602ed", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -2608,6 +2608,13 @@ vec![\n         deprecation: None,\n         module: \"unwrap\",\n     },\n+    Lint {\n+        name: \"unnecessary_wrap\",\n+        group: \"complexity\",\n+        desc: \"functions that only return `Ok` or `Some`\",\n+        deprecation: None,\n+        module: \"unnecessary_wrap\",\n+    },\n     Lint {\n         name: \"unneeded_field_pattern\",\n         group: \"restriction\","}, {"sha": "1657a3173dbfd5be06e613b7e8b652912bd10f80", "filename": "tests/ui/unnecessary_wrap.fixed", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.fixed?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -0,0 +1,47 @@\n+// run-rustfix\n+#![warn(clippy::unnecessary_wrap)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::if_same_then_else)]\n+\n+// should be linted\n+fn func1(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(42);\n+    }\n+    if a {\n+        Some(-1);\n+        Some(2)\n+    } else {\n+        return Some(1337);\n+    }\n+}\n+\n+// public fns should not be linted\n+pub fn func2(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        Some(1)\n+    }\n+}\n+\n+// should not be linted\n+fn func3(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        None\n+    }\n+}\n+\n+// should be linted\n+fn func4() -> Option<i32> {\n+    1\n+}\n+\n+fn main() {\n+    // method calls are not linted\n+    func1(true, true);\n+    func2(true);\n+}"}, {"sha": "edf41dad790561bdcdb6ea1d53c2eea695b40916", "filename": "tests/ui/unnecessary_wrap.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.rs?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -0,0 +1,47 @@\n+// run-rustfix\n+#![warn(clippy::unnecessary_wrap)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::if_same_then_else)]\n+\n+// should be linted\n+fn func1(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(42);\n+    }\n+    if a {\n+        Some(-1);\n+        Some(2)\n+    } else {\n+        return Some(1337);\n+    }\n+}\n+\n+// public fns should not be linted\n+pub fn func2(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        Some(1)\n+    }\n+}\n+\n+// should not be linted\n+fn func3(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        None\n+    }\n+}\n+\n+// should be linted\n+fn func4() -> Option<i32> {\n+    Some(1)\n+}\n+\n+fn main() {\n+    // method calls are not linted\n+    func1(true, true);\n+    func2(true);\n+}"}, {"sha": "8473bd818396f780789e4662830533dc8d9780e9", "filename": "tests/ui/unnecessary_wrap.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7ac441760ae034ff7401439b38da821f4e2df3a/tests%2Fui%2Funnecessary_wrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.stderr?ref=a7ac441760ae034ff7401439b38da821f4e2df3a", "patch": "@@ -0,0 +1,34 @@\n+error: this function unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:8:1\n+   |\n+LL | / fn func1(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(42);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unnecessary-wrap` implied by `-D warnings`\n+help: factor this out to\n+   |\n+LL |         return 42;\n+LL |     }\n+LL |     if a {\n+LL |         Some(-1);\n+LL |         2\n+LL |     } else {\n+ ...\n+\n+error: this function unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:39:1\n+   |\n+LL | / fn func4() -> Option<i32> {\n+LL | |     Some(1)\n+   | |     ------- help: factor this out to: `1`\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}]}