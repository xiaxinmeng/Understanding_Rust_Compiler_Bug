{"sha": "0a002d79b47340cc518ae4c0879a34c037c8411a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMDAyZDc5YjQ3MzQwY2M1MThhZTRjMDg3OWEzNGMwMzdjODQxMWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-28T18:29:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-28T18:30:01Z"}, "message": "librustc: Remove common fields and nested enums from the language", "tree": {"sha": "5abc7366866fa6f17189bf8ef814f4955c9e776c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abc7366866fa6f17189bf8ef814f4955c9e776c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a002d79b47340cc518ae4c0879a34c037c8411a", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a002d79b47340cc518ae4c0879a34c037c8411a", "html_url": "https://github.com/rust-lang/rust/commit/0a002d79b47340cc518ae4c0879a34c037c8411a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a002d79b47340cc518ae4c0879a34c037c8411a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09dc38eda54537c0c10b8a89852c714e3e14f57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09dc38eda54537c0c10b8a89852c714e3e14f57a", "html_url": "https://github.com/rust-lang/rust/commit/09dc38eda54537c0c10b8a89852c714e3e14f57a"}], "stats": {"total": 195, "additions": 36, "deletions": 159}, "files": [{"sha": "778b915190b6c119d44c23e785eb7c27c557ada6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -286,8 +286,7 @@ fn encode_enum_variant_info(ecx: @EncodeContext, ebml_w: writer::Encoder,\n                     if args.len() > 0 && generics.ty_params.len() == 0 => {\n                 encode_symbol(ecx, ebml_w, variant.node.id);\n             }\n-            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) |\n-            ast::enum_variant_kind(_) => {}\n+            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {}\n         }\n         encode_discriminant(ecx, ebml_w, variant.node.id);\n         if vi[i].disr_val != disr_val {"}, {"sha": "10d3de6b131e103f485d1247b3a0ab88d0ff38f0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -37,7 +37,7 @@ use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field};\n use syntax::ast::{expr_fn_block, expr_index, expr_method_call, expr_path};\n use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n use syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n-use syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n+use syntax::ast::{expr, expr_again, expr_assign_op};\n use syntax::ast::{expr_index, expr_loop};\n use syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n@@ -1383,16 +1383,6 @@ pub impl Resolver {\n                                   variant.span);\n                 self.structs.insert(local_def(variant.node.id));\n             }\n-            enum_variant_kind(ref enum_definition) => {\n-                child.define_type(privacy,\n-                                  def_ty(local_def(variant.node.id)),\n-                                  variant.span);\n-                for (*enum_definition).variants.each |variant| {\n-                    self.build_reduced_graph_for_variant(*variant, item_id,\n-                                                         parent_privacy,\n-                                                         parent, visitor);\n-                }\n-            }\n         }\n     }\n "}, {"sha": "9e83552a6001fe5ccaac06f3e9c11315dd346665", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -2051,14 +2051,6 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: ast::enum_def,\n                 trans_struct_def(ccx, struct_def, path,\n                                  variant.node.id);\n             }\n-            ast::enum_variant_kind(ref enum_definition) => {\n-                trans_enum_def(ccx,\n-                               *enum_definition,\n-                               id,\n-                               path,\n-                               vi,\n-                               &mut *i);\n-            }\n         }\n     }\n }\n@@ -2513,9 +2505,6 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                 ast::struct_variant_kind(_) => {\n                     fail!(~\"struct variant kind unexpected in get_item_val\")\n                 }\n-                ast::enum_variant_kind(_) => {\n-                    fail!(~\"enum variant kind unexpected in get_item_val\")\n-                }\n             }\n             set_inline_hint(llfn);\n             llfn"}, {"sha": "ed07b7e9f7f134220d16db5ab0ee0ee3eb5010db", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -204,8 +204,6 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n             }\n             ast::struct_variant_kind(_) =>\n                 ccx.tcx.sess.bug(~\"can't monomorphize struct variants\"),\n-            ast::enum_variant_kind(_) =>\n-                ccx.tcx.sess.bug(~\"can't monomorphize enum variants\")\n         }\n         d\n       }"}, {"sha": "d7f71bae85b932aba3369273c7f93aed84de1b64", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -3873,9 +3873,6 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                     ast::struct_variant_kind(_) => {\n                         fail!(~\"struct variant kinds unimpl in enum_variants\")\n                     }\n-                    ast::enum_variant_kind(_) => {\n-                        fail!(~\"enum variant kinds unimpl in enum_variants\")\n-                    }\n                 }\n             })\n           }"}, {"sha": "28f8a8f50b4794c05a9696f8c114f36d053b427d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -3066,16 +3066,6 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n                         ccx.tcx, local_def(v.node.id)).map(|cf|\n                             ty::node_id_to_type(ccx.tcx, cf.id.node)));\n                 }\n-                ast::enum_variant_kind(_) => {\n-                    arg_tys = None;\n-                    do_check(ccx,\n-                             sp,\n-                             vs,\n-                             id,\n-                             &mut *disr_vals,\n-                             &mut *disr_val,\n-                             &mut *variants);\n-                }\n             }\n \n             match arg_tys {"}, {"sha": "0f84975c89cf38fb606903d0c18dc23cce768937", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -202,15 +202,6 @@ pub fn get_enum_variant_types(ccx: &CrateCtxt,\n                     |f| ty::node_id_to_type(ccx.tcx, f.node.id));\n                 result_ty = Some(ty::mk_ctor_fn(tcx, input_tys, enum_ty));\n             }\n-\n-            ast::enum_variant_kind(ref enum_definition) => {\n-                get_enum_variant_types(ccx,\n-                                       enum_ty,\n-                                       enum_definition.variants,\n-                                       generics,\n-                                       rp);\n-                result_ty = None;\n-            }\n         };\n \n         match result_ty {"}, {"sha": "7304eb20bca9f102b4b5768f2c45a2acf0addb2f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -1078,15 +1078,13 @@ pub struct variant_arg {\n pub enum variant_kind {\n     tuple_variant_kind(~[variant_arg]),\n     struct_variant_kind(@struct_def),\n-    enum_variant_kind(enum_def)\n }\n \n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]\n pub struct enum_def {\n     variants: ~[variant],\n-    common: Option<@struct_def>,\n }\n \n #[auto_encode]"}, {"sha": "d7e0e9aa550143db69e0c5bc16eafdd19b5a11c5", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -990,8 +990,6 @@ fn mk_enum_ser_body(\n                 ),\n             ast::struct_variant_kind(*) =>\n                 fail!(~\"struct variants unimplemented\"),\n-            ast::enum_variant_kind(*) =>\n-                fail!(~\"enum variants unimplemented\"),\n         }\n     };\n \n@@ -1089,8 +1087,6 @@ fn mk_enum_deser_body(\n             },\n             ast::struct_variant_kind(*) =>\n                 fail!(~\"struct variants unimplemented\"),\n-            ast::enum_variant_kind(*) =>\n-                fail!(~\"enum variants unimplemented\")\n         };\n \n         let pat = @ast::pat {"}, {"sha": "6516bd85270bd894ce210b367ba45b12312401e0", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use ast;\n use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{enum_variant_kind, expr, expr_match, ident, impure_fn, item, item_};\n+use ast::{expr, expr_match, ident, impure_fn, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};"}, {"sha": "a1cb981e3bded56f72926ff40cd872c10bfb8b61", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use ast;\n use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{enum_variant_kind, expr, expr_match, ident, impure_fn, item, item_};\n+use ast::{expr, expr_match, ident, impure_fn, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};"}, {"sha": "3be8bf6efb586a3597e2d38227f37eb4112dde3f", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use ast;\n use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{enum_variant_kind, expr, expr_match, ident, impure_fn, item, item_};\n+use ast::{expr, expr_match, ident, impure_fn, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};"}, {"sha": "1b81380ec9b5708cc38b0fa1aefb0b53ad3c775d", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -15,7 +15,7 @@ use core::prelude::*;\n \n use ast;\n use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{enum_variant_kind, expr, expr_match, ident, impure_fn, item, item_};\n+use ast::{expr, expr_match, ident, impure_fn, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n@@ -283,19 +283,13 @@ pub fn create_enum_variant_pattern(cx: @ext_ctxt,\n \n             build::mk_pat_struct(cx, span, matching_path, field_pats)\n         }\n-        enum_variant_kind(*) => {\n-            cx.span_unimpl(span, ~\"enum variants for `deriving`\");\n-        }\n     }\n }\n \n pub fn variant_arg_count(cx: @ext_ctxt, span: span, variant: &variant) -> uint {\n     match variant.node.kind {\n         tuple_variant_kind(ref args) => args.len(),\n         struct_variant_kind(ref struct_def) => struct_def.fields.len(),\n-        enum_variant_kind(*) => {\n-            cx.span_bug(span, ~\"variant_arg_count: enum variants deprecated\")\n-        }\n     }\n }\n "}, {"sha": "99033b3b3ccec5aabbb36df23de06e8d0cb902c6", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -238,7 +238,7 @@ impl to_type_decls for state {\n             cx.item_enum_poly(\n                 name,\n                 self.span,\n-                ast::enum_def { variants: items_msg, common: None },\n+                ast::enum_def { variants: items_msg },\n                 cx.strip_bounds(&self.generics)\n             )\n         ]"}, {"sha": "f0885afa580789d5490420adb0a7c94c48f2b768", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -257,9 +257,6 @@ pub fn noop_fold_item_underscore(i: &item_, fld: @ast_fold) -> item_ {\n                     variants: do enum_definition.variants.map |x| {\n                         fld.fold_variant(x)\n                     },\n-                    common: do enum_definition.common.map |x| {\n-                        fold_struct_def(*x, fld)\n-                    }\n                 },\n                 fold_generics(generics, fld))\n         }\n@@ -682,17 +679,6 @@ fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n                 ctor_id: struct_def.ctor_id.map(|c| fld.new_id(*c))\n             })\n         }\n-        enum_variant_kind(ref enum_definition) => {\n-            let variants = do (*enum_definition).variants.map |x| {\n-                fld.fold_variant(x)\n-            };\n-            let common = do (*enum_definition).common.map |x| {\n-                fold_struct_def(*x, fld)\n-            };\n-            kind = enum_variant_kind(\n-                ast::enum_def { variants: variants, common: common }\n-            );\n-        }\n     }\n \n     let fold_attribute = |x| fold_attribute_(x, fld);"}, {"sha": "51a7f7fbd1c0a8a5554b9089a7238953d4a7b5b8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 50, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -19,7 +19,7 @@ use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n use ast::{bind_by_copy, bitand, bitor, bitxor, blk};\n use ast::{blk_check_mode, box, by_copy, by_ref};\n use ast::{crate, crate_cfg, decl, decl_item};\n-use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n+use ast::{decl_local, default_blk, deref, div, enum_def};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n@@ -3788,63 +3788,42 @@ pub impl Parser {\n     fn parse_enum_def(&self, generics: &ast::Generics) -> enum_def {\n         let mut variants = ~[];\n         let mut all_nullary = true, have_disr = false;\n-        let mut common_fields = None;\n-\n         while *self.token != token::RBRACE {\n             let variant_attrs = self.parse_outer_attributes();\n             let vlo = self.span.lo;\n \n-            // Is this a common field declaration?\n-            if self.eat_keyword(&~\"struct\") {\n-                if common_fields.is_some() {\n-                    self.fatal(~\"duplicate declaration of shared fields\");\n-                }\n-                self.expect(&token::LBRACE);\n-                common_fields = Some(self.parse_struct_def());\n-                loop;\n-            }\n-\n             let vis = self.parse_visibility();\n \n-            // Is this a nested enum declaration?\n             let ident, needs_comma, kind;\n             let mut args = ~[], disr_expr = None;\n-            if self.eat_keyword(&~\"enum\") {\n-                ident = self.parse_ident();\n-                self.expect(&token::LBRACE);\n-                let nested_enum_def = self.parse_enum_def(generics);\n-                kind = enum_variant_kind(nested_enum_def);\n-                needs_comma = false;\n-            } else {\n-                ident = self.parse_ident();\n-                if self.eat(&token::LBRACE) {\n-                    // Parse a struct variant.\n-                    all_nullary = false;\n-                    kind = struct_variant_kind(self.parse_struct_def());\n-                } else if *self.token == token::LPAREN {\n-                    all_nullary = false;\n-                    let arg_tys = self.parse_unspanned_seq(\n-                        &token::LPAREN,\n-                        &token::RPAREN,\n-                        seq_sep_trailing_disallowed(token::COMMA),\n-                        |p| p.parse_ty(false)\n-                    );\n-                    for arg_tys.each |ty| {\n-                        args.push(ast::variant_arg {\n-                            ty: *ty,\n-                            id: self.get_id(),\n-                        });\n-                    }\n-                    kind = tuple_variant_kind(args);\n-                } else if self.eat(&token::EQ) {\n-                    have_disr = true;\n-                    disr_expr = Some(self.parse_expr());\n-                    kind = tuple_variant_kind(args);\n-                } else {\n-                    kind = tuple_variant_kind(~[]);\n+            ident = self.parse_ident();\n+            if self.eat(&token::LBRACE) {\n+                // Parse a struct variant.\n+                all_nullary = false;\n+                kind = struct_variant_kind(self.parse_struct_def());\n+            } else if *self.token == token::LPAREN {\n+                all_nullary = false;\n+                let arg_tys = self.parse_unspanned_seq(\n+                    &token::LPAREN,\n+                    &token::RPAREN,\n+                    seq_sep_trailing_disallowed(token::COMMA),\n+                    |p| p.parse_ty(false)\n+                );\n+                for arg_tys.each |ty| {\n+                    args.push(ast::variant_arg {\n+                        ty: *ty,\n+                        id: self.get_id(),\n+                    });\n                 }\n-                needs_comma = true;\n+                kind = tuple_variant_kind(args);\n+            } else if self.eat(&token::EQ) {\n+                have_disr = true;\n+                disr_expr = Some(self.parse_expr());\n+                kind = tuple_variant_kind(args);\n+            } else {\n+                kind = tuple_variant_kind(~[]);\n             }\n+            needs_comma = true;\n \n             let vr = ast::variant_ {\n                 name: ident,\n@@ -3864,7 +3843,7 @@ pub impl Parser {\n                         enum\");\n         }\n \n-        ast::enum_def { variants: variants, common: common_fields }\n+        ast::enum_def { variants: variants }\n     }\n \n     fn parse_item_enum(&self) -> item_info {\n@@ -3892,7 +3871,7 @@ pub impl Parser {\n             return (\n                 id,\n                 item_enum(\n-                    ast::enum_def { variants: ~[variant], common: None },\n+                    ast::enum_def { variants: ~[variant] },\n                     generics),\n                 None\n             );"}, {"sha": "58fbba752f56200442f8aed3fca4d24cfb1bd9ec", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -785,9 +785,6 @@ pub fn print_variant(s: @ps, v: ast::variant) {\n             let generics = ast_util::empty_generics();\n             print_struct(s, struct_def, &generics, v.node.name, v.span);\n         }\n-        ast::enum_variant_kind(ref enum_definition) => {\n-            print_variants(s, (*enum_definition).variants, v.span);\n-        }\n     }\n     match v.node.disr_expr {\n       Some(d) => {"}, {"sha": "33b345e2d114bd9d778846a98fc1440cd5e79486", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a002d79b47340cc518ae4c0879a34c037c8411a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0a002d79b47340cc518ae4c0879a34c037c8411a", "patch": "@@ -215,9 +215,6 @@ pub fn visit_enum_def<E>(enum_definition: ast::enum_def,\n                 (v.visit_struct_def)(struct_def, vr.node.name, tps,\n                                    vr.node.id, e, v);\n             }\n-            enum_variant_kind(ref enum_definition) => {\n-                visit_enum_def((*enum_definition), tps, e, v);\n-            }\n         }\n         // Visit the disr expr if it exists\n         for vr.node.disr_expr.each |ex| { (v.visit_expr)(*ex, e, v) }"}, {"sha": "fd5079b8f5458f7e5f51fbcd24b8fd2fb41bc31b", "filename": "src/test/run-pass/common-fields-trivial.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09dc38eda54537c0c10b8a89852c714e3e14f57a/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dc38eda54537c0c10b8a89852c714e3e14f57a/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs?ref=09dc38eda54537c0c10b8a89852c714e3e14f57a", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Foo {\n-    struct {\n-        x: int,\n-        y: int,\n-    }\n-\n-    Bar(int),\n-    Baz(int)\n-}\n-\n-pub fn main() {\n-    let x = Bar(3);\n-}\n-"}]}