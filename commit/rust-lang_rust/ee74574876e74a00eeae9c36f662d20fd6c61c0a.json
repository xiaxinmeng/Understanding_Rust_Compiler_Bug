{"sha": "ee74574876e74a00eeae9c36f662d20fd6c61c0a", "node_id": "C_kwDOAAsO6NoAKGVlNzQ1NzQ4NzZlNzRhMDBlZWFlOWMzNmY2NjJkMjBmZDZjNjFjMGE", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-28T19:23:39Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Emit one report for all fields in the same ADT", "tree": {"sha": "c781be125fffc0c638d992a876d519b0febb1c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c781be125fffc0c638d992a876d519b0febb1c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee74574876e74a00eeae9c36f662d20fd6c61c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee74574876e74a00eeae9c36f662d20fd6c61c0a", "html_url": "https://github.com/rust-lang/rust/commit/ee74574876e74a00eeae9c36f662d20fd6c61c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee74574876e74a00eeae9c36f662d20fd6c61c0a/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a81a5ad1a87b0fd92d9d0310ae44ac582c814387", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81a5ad1a87b0fd92d9d0310ae44ac582c814387", "html_url": "https://github.com/rust-lang/rust/commit/a81a5ad1a87b0fd92d9d0310ae44ac582c814387"}], "stats": {"total": 326, "additions": 203, "deletions": 123}, "files": [{"sha": "0fa994cacb113c422dc83701e0e687a7388fb2b7", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 85, "deletions": 35, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ee74574876e74a00eeae9c36f662d20fd6c61c0a/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee74574876e74a00eeae9c36f662d20fd6c61c0a/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=ee74574876e74a00eeae9c36f662d20fd6c61c0a", "patch": "@@ -1,11 +1,14 @@\n-use clippy_utils::diagnostics::span_lint_hir_and_then;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ImplPolarity;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -64,51 +67,98 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if let self_ty = ty_trait_ref.self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {\n+                let mut non_send_fields = Vec::new();\n+\n+                let hir_map = cx.tcx.hir();\n                 for variant in &adt_def.variants {\n                     for field in &variant.fields {\n-                        let field_ty = field.ty(cx.tcx, impl_trait_substs);\n-\n-                        if raw_pointer_in_ty_def(cx, field_ty)\n-                            || implements_trait(cx, field_ty, send_trait, &[])\n-                            || is_copy(cx, field_ty)\n-                        {\n-                            continue;\n+                        if_chain! {\n+                            if let Some(field_hir_id) = field\n+                                .did\n+                                .as_local()\n+                                .map(|local_def_id| hir_map.local_def_id_to_hir_id(local_def_id));\n+                            if !is_lint_allowed(cx, NON_SEND_FIELD_IN_SEND_TY, field_hir_id);\n+                            if let field_ty = field.ty(cx.tcx, impl_trait_substs);\n+                            if !ty_allowed_in_send(cx, field_ty, send_trait);\n+                            if let Some(field_span) = hir_map.span_if_local(field.did);\n+                            then {\n+                                non_send_fields.push(NonSendField {\n+                                    name: hir_map.name(field_hir_id),\n+                                    span: field_span,\n+                                    ty: field_ty,\n+                                    generic_params: collect_generic_params(cx, field_ty),\n+                                })\n+                            }\n                         }\n+                    }\n+                }\n \n-                        if let Some(field_hir_id) = field\n-                            .did\n-                            .as_local()\n-                            .map(|local_def_id| cx.tcx.hir().local_def_id_to_hir_id(local_def_id))\n-                        {\n-                            if let Some(field_span) = cx.tcx.hir().span_if_local(field.did) {\n-                                span_lint_hir_and_then(\n-                                    cx,\n-                                    NON_SEND_FIELD_IN_SEND_TY,\n-                                    field_hir_id,\n-                                    field_span,\n-                                    \"non-`Send` field found in a `Send` struct\",\n-                                    |diag| {\n-                                        diag.span_note(\n-                                            item.span,\n-                                            &format!(\n-                                                \"type `{}` doesn't implement `Send` when `{}` is `Send`\",\n-                                                field_ty, self_ty\n-                                            ),\n-                                        );\n-                                        if is_ty_param(field_ty) {\n-                                            diag.help(&format!(\"add `{}: Send` bound\", field_ty));\n-                                        }\n-                                    },\n+                if !non_send_fields.is_empty() {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_SEND_FIELD_IN_SEND_TY,\n+                        item.span,\n+                        &format!(\n+                            \"this implementation is unsound, as some fields in `{}` are `!Send`\",\n+                            self_ty\n+                        ),\n+                        |diag| {\n+                            for field in non_send_fields {\n+                                diag.span_note(\n+                                    field.span,\n+                                    &format!(\"the field `{}` has type `{}` which is not `Send`\", field.name, field.ty),\n                                 );\n+\n+                                match field.generic_params.len() {\n+                                    0 => diag.help(\"use a thread-safe type that implements `Send`\"),\n+                                    1 if is_ty_param(field.ty) => diag.help(&format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n+                                    _ => diag.help(&format!(\n+                                        \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n+                                        if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n+                                        field.generic_params_string(),\n+                                        field.ty\n+                                    )),\n+                                };\n                             }\n-                        }\n-                    }\n+                        },\n+                    )\n                 }\n             }\n         }\n     }\n }\n \n+struct NonSendField<'tcx> {\n+    name: Symbol,\n+    span: Span,\n+    ty: Ty<'tcx>,\n+    generic_params: Vec<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> NonSendField<'tcx> {\n+    fn generic_params_string(&self) -> String {\n+        self.generic_params\n+            .iter()\n+            .map(ToString::to_string)\n+            .collect::<Vec<_>>()\n+            .join(\", \")\n+    }\n+}\n+\n+fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    ty.walk(cx.tcx)\n+        .filter_map(|inner| match inner.unpack() {\n+            GenericArgKind::Type(inner_ty) => Some(inner_ty),\n+            _ => None,\n+        })\n+        .filter(|&inner_ty| is_ty_param(inner_ty))\n+        .collect()\n+}\n+\n+fn ty_allowed_in_send<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    raw_pointer_in_ty_def(cx, ty) || implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty)\n+}\n+\n /// Returns `true` if the type itself is a raw pointer or has a raw pointer as a\n /// generic parameter, e.g., `Vec<*const u8>`.\n /// Note that it does not look into enum variants or struct fields."}, {"sha": "cf4fc1fd9b817556b57619b7e0218a922900c2e3", "filename": "tests/ui/non_send_field_in_send_ty.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee74574876e74a00eeae9c36f662d20fd6c61c0a/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee74574876e74a00eeae9c36f662d20fd6c61c0a/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.rs?ref=ee74574876e74a00eeae9c36f662d20fd6c61c0a", "patch": "@@ -3,6 +3,7 @@\n \n use std::cell::UnsafeCell;\n use std::ptr::NonNull;\n+use std::rc::Rc;\n use std::sync::{Arc, Mutex, MutexGuard};\n \n // disrustor / RUSTSEC-2020-0150\n@@ -47,6 +48,12 @@ pub struct DeviceHandle<T: UsbContext> {\n unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n \n // Other basic tests\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n pub struct MultiField<T> {\n     field1: T,\n     field2: T,\n@@ -62,6 +69,13 @@ pub enum MyOption<T> {\n \n unsafe impl<T> Send for MyOption<T> {}\n \n+// Multiple type parameters\n+pub struct MultiParam<A, B> {\n+    vec: Vec<(A, B)>,\n+}\n+\n+unsafe impl<A, B> Send for MultiParam<A, B> {}\n+\n // Raw pointers are allowed\n extern \"C\" {\n     type SomeFfiType;"}, {"sha": "52cc038b6581caba0f0f4ea7232461d5fd2ae62a", "filename": "tests/ui/non_send_field_in_send_ty.stderr", "status": "modified", "additions": 104, "deletions": 88, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/ee74574876e74a00eeae9c36f662d20fd6c61c0a/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee74574876e74a00eeae9c36f662d20fd6c61c0a/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.stderr?ref=ee74574876e74a00eeae9c36f662d20fd6c61c0a", "patch": "@@ -1,142 +1,158 @@\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:10:5\n-   |\n-LL |     data: Vec<UnsafeCell<T>>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n-note: type `std::vec::Vec<std::cell::UnsafeCell<T>>` doesn't implement `Send` when `RingBuffer<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:15:1\n+error: this implementation is unsound, as some fields in `RingBuffer<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:16:1\n    |\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:20:5\n    |\n-LL |     lock: Mutex<Box<T>>,\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n+note: the field `data` has type `std::vec::Vec<std::cell::UnsafeCell<T>>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:11:5\n    |\n-note: type `std::sync::Mutex<std::boxed::Box<T>>` doesn't implement `Send` when `MvccRwLock<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:23:1\n+LL |     data: Vec<UnsafeCell<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `std::vec::Vec<std::cell::UnsafeCell<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:24:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:28:5\n    |\n-LL |     head: Arc<RC>,\n-   |     ^^^^^^^^^^^^^\n+note: the field `lock` has type `std::sync::Mutex<std::boxed::Box<T>>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:21:5\n    |\n-note: type `std::sync::Arc<RC>` doesn't implement `Send` when `ArcGuard<RC, T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:31:1\n+LL |     lock: Mutex<Box<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `std::sync::Mutex<std::boxed::Box<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:32:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:43:5\n    |\n-LL |     context: T,\n-   |     ^^^^^^^^^^\n+note: the field `head` has type `std::sync::Arc<RC>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:29:5\n    |\n-note: type `T` doesn't implement `Send` when `DeviceHandle<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:47:1\n+LL |     head: Arc<RC>,\n+   |     ^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `RC` that satisfy `std::sync::Arc<RC>: Send`\n+\n+error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:48:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n+   |\n+note: the field `context` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:44:5\n+   |\n+LL |     context: T,\n+   |     ^^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n \n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:51:5\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:55:1\n    |\n-LL |     field1: T,\n-   |     ^^^^^^^^^\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `rc_is_not_send` has type `std::rc::Rc<std::string::String>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:52:5\n    |\n-note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:63:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:52:5\n    |\n-LL |     field2: T,\n-   |     ^^^^^^^^^\n+note: the field `field1` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:58:5\n    |\n-note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the field `field2` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:59:5\n    |\n-LL | unsafe impl<T> Send for MultiField<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:53:5\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the field `field3` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:60:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:70:1\n    |\n-note: type `T` doesn't implement `Send` when `MultiField<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:56:1\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | unsafe impl<T> Send for MultiField<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:59:12\n+note: the field `0` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:66:12\n    |\n LL |     MySome(T),\n    |            ^\n-   |\n-note: type `T` doesn't implement `Send` when `MyOption<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:63:1\n-   |\n-LL | unsafe impl<T> Send for MyOption<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n+   = help: add `T: Send` bound in `Send` impl\n \n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:88:11\n+error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:77:1\n    |\n-LL |     Enum2(T),\n-   |           ^\n+LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `vec` has type `std::vec::Vec<(A, B)>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:74:5\n    |\n-note: type `T` doesn't implement `Send` when `AttrTest3<T>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:93:1\n+LL |     vec: Vec<(A, B)>,\n+   |     ^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameters `A, B` that satisfy `std::vec::Vec<(A, B)>: Send`\n+\n+error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:107:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `T: Send` bound\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:97:5\n    |\n-LL |     field1: A,\n-   |     ^^^^^^^^^\n+note: the field `0` has type `T` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:102:11\n    |\n-note: type `P` doesn't implement `Send` when `Complex<P, u32>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:101:1\n+LL |     Enum2(T),\n+   |           ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:115:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add `P: Send` bound\n-\n-error: non-`Send` field found in a `Send` struct\n-  --> $DIR/non_send_field_in_send_ty.rs:98:5\n    |\n-LL |     field2: B,\n-   |     ^^^^^^^^^\n+note: the field `field1` has type `P` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:111:5\n    |\n-note: type `std::sync::MutexGuard<'static, bool>` doesn't implement `Send` when `Complex<Q, std::sync::MutexGuard<'static, bool>>` is `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:104:1\n+LL |     field1: A,\n+   |     ^^^^^^^^^\n+   = help: add `P: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<Q, std::sync::MutexGuard<'static, bool>>` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:118:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `field2` has type `std::sync::MutexGuard<'static, bool>` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:112:5\n+   |\n+LL |     field2: B,\n+   |     ^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n \n error: aborting due to 11 previous errors\n "}]}