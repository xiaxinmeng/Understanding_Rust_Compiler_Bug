{"sha": "0e3a70526952c285a3187b855e2cf3398afe6b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2E3MDUyNjk1MmMyODVhMzE4N2I4NTVlMmNmMzM5OGFmZTZiMzg=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-12T15:34:59Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:31Z"}, "message": "rustc_codegen_llvm: use safe references for TargetMachine.", "tree": {"sha": "06c9a8831557bc301fd80d9a4cb759b1b23f4d7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c9a8831557bc301fd80d9a4cb759b1b23f4d7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3a70526952c285a3187b855e2cf3398afe6b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3a70526952c285a3187b855e2cf3398afe6b38", "html_url": "https://github.com/rust-lang/rust/commit/0e3a70526952c285a3187b855e2cf3398afe6b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3a70526952c285a3187b855e2cf3398afe6b38/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55af02019433f20c53c61d490e651ca968264c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55af02019433f20c53c61d490e651ca968264c7e", "html_url": "https://github.com/rust-lang/rust/commit/55af02019433f20c53c61d490e651ca968264c7e"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "0a8b143ae9235d3e43e3611b8cab3d9c8226f2ef", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=0e3a70526952c285a3187b855e2cf3398afe6b38", "patch": "@@ -14,7 +14,7 @@ use back::write::{ModuleConfig, with_llvm_pmb, CodegenContext};\n use back::write;\n use errors::{FatalError, Handler};\n use llvm::archive_ro::ArchiveRO;\n-use llvm::{TargetMachineRef, True, False};\n+use llvm::{True, False};\n use llvm;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n@@ -452,7 +452,7 @@ fn thin_lto(diag_handler: &Handler,\n }\n \n fn run_pass_manager(cgcx: &CodegenContext,\n-                    tm: TargetMachineRef,\n+                    tm: &llvm::TargetMachine,\n                     llmod: &llvm::Module,\n                     config: &ModuleConfig,\n                     thin: bool) {"}, {"sha": "ebeb0d4bcb463821110d953913624c48a69821dc", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=0e3a70526952c285a3187b855e2cf3398afe6b38", "patch": "@@ -26,7 +26,7 @@ use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n use llvm;\n-use llvm::{TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n+use llvm::{PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n use {CodegenResults, ModuleSource, ModuleCodegen, CompiledModule, ModuleKind};\n use CrateInfo;\n@@ -94,7 +94,7 @@ pub fn llvm_err(handler: &errors::Handler, msg: String) -> FatalError {\n \n pub fn write_output_file(\n         handler: &errors::Handler,\n-        target: llvm::TargetMachineRef,\n+        target: &llvm::TargetMachine,\n         pm: llvm::PassManagerRef,\n         m: &llvm::Module,\n         output: &Path,\n@@ -638,7 +638,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         // pass manager passed to the closure should be ensured to not\n         // escape the closure itself, and the manager should only be\n         // used once.\n-        unsafe fn with_codegen<F, R>(tm: TargetMachineRef,\n+        unsafe fn with_codegen<F, R>(tm: &llvm::TargetMachine,\n                                     llmod: &llvm::Module,\n                                     no_builtins: bool,\n                                     f: F) -> R"}, {"sha": "566bd3c2c187038a24a3e8dd00f800b5da4e0ba4", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3a70526952c285a3187b855e2cf3398afe6b38/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=0e3a70526952c285a3187b855e2cf3398afe6b38", "patch": "@@ -398,7 +398,6 @@ extern { pub type SectionIterator; }\n pub type SectionIteratorRef = *mut SectionIterator;\n extern { pub type Pass; }\n extern { pub type TargetMachine; }\n-pub type TargetMachineRef = *const TargetMachine;\n extern { pub type Archive; }\n pub type ArchiveRef = *mut Archive;\n extern { pub type ArchiveIterator; }\n@@ -1417,10 +1416,10 @@ extern \"C\" {\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n     pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: &'static mut Pass);\n \n-    pub fn LLVMRustHasFeature(T: TargetMachineRef, s: *const c_char) -> bool;\n+    pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n-    pub fn LLVMRustPrintTargetCPUs(T: TargetMachineRef);\n-    pub fn LLVMRustPrintTargetFeatures(T: TargetMachineRef);\n+    pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n+    pub fn LLVMRustPrintTargetFeatures(T: &TargetMachine);\n \n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n@@ -1436,7 +1435,7 @@ extern \"C\" {\n                                        Singlethread: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n-    pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef, PM: PassManagerRef, M: &Module);\n+    pub fn LLVMRustAddAnalysisPasses(T: &TargetMachine, PM: PassManagerRef, M: &Module);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,\n                                          M: &'a Module,\n                                          DisableSimplifyLibCalls: bool);\n@@ -1452,9 +1451,9 @@ extern \"C\" {\n                                   M: &Module,\n                                   DisableSimplifyLibCalls: bool);\n     pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: &Module);\n-    pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,\n+    pub fn LLVMRustWriteOutputFile(T: &'a TargetMachine,\n                                    PM: PassManagerRef,\n-                                   M: &Module,\n+                                   M: &'a Module,\n                                    Output: *const c_char,\n                                    FileType: FileType)\n                                    -> LLVMRustResult;\n@@ -1522,7 +1521,7 @@ extern \"C\" {\n                                     -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n \n-    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: &Module, TM: TargetMachineRef);\n+    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: &'a Module, TM: &'a TargetMachine);\n \n     pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,\n                                          Inputs: *const &Value,"}]}