{"sha": "e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NmUzMjVmODUwNGM1MmU0M2YxZWZkOGM0YjBhMWI2MmM0ZWYxNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T20:00:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T20:00:33Z"}, "message": "Auto merge of #4039 - andrehjr:add-find-map-lints, r=flip1995\n\nAdd lints for find_map\n\nchangelog: adds lints for find_map and filter_map_next. Closes issue #3474\n\nHope I got everything correctly this time! Let me know if I missed something.", "tree": {"sha": "e14ce89a3e2cd7afeaf8344cb77fef6fbbc94508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14ce89a3e2cd7afeaf8344cb77fef6fbbc94508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "html_url": "https://github.com/rust-lang/rust/commit/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f73473c8de4598f8ade982dbb9d44f89777c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f73473c8de4598f8ade982dbb9d44f89777c54", "html_url": "https://github.com/rust-lang/rust/commit/86f73473c8de4598f8ade982dbb9d44f89777c54"}, {"sha": "e428862c955a149ae16d9bb3e56b5087819a122f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e428862c955a149ae16d9bb3e56b5087819a122f", "html_url": "https://github.com/rust-lang/rust/commit/e428862c955a149ae16d9bb3e56b5087819a122f"}], "stats": {"total": 218, "additions": 208, "deletions": 10}, "files": [{"sha": "397916fe409e0f22516d899743c3e2d4feb2bdf1", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -896,7 +896,9 @@ All notable changes to this project will be documented in this file.\n [`extra_unused_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n [`fallible_impl_from`]: https://rust-lang.github.io/rust-clippy/master/index.html#fallible_impl_from\n [`filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map\n+[`filter_map_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next\n [`filter_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_next\n+[`find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#find_map\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const"}, {"sha": "4ed388db1763ae84b3e9034161d717243761fa56", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 299 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 301 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "0f09f678e4bb8ce603d4e6c23d166586199a6986", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -622,6 +622,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::EXPLICIT_ITER_LOOP,\n         matches::SINGLE_MATCH_ELSE,\n         methods::FILTER_MAP,\n+        methods::FILTER_MAP_NEXT,\n+        methods::FIND_MAP,\n         methods::MAP_FLATTEN,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,"}, {"sha": "2904fd4c98dc82603d39476548f8ce80c343428f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -288,6 +288,50 @@ declare_clippy_lint! {\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as a\n+    /// single method call.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    ///  (0..3).filter_map(|x| if x == 2 { Some(x) } else { None }).next();\n+    /// ```\n+    /// Can be written as\n+    ///\n+    /// ```rust\n+    ///  (0..3).find_map(|x| if x == 2 { Some(x) } else { None });\n+    /// ```\n+    pub FILTER_MAP_NEXT,\n+    pedantic,\n+    \"using combination of `filter_map` and `next` which can usually be written as a single method call\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.find(_).map(_)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as a\n+    /// single method call.\n+    ///\n+    /// **Known problems:** Often requires a condition + Option/Iterator creation\n+    /// inside the closure.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    ///  (0..3).find(|x| x == 2).map(|x| x * 2);\n+    /// ```\n+    /// Can be written as\n+    /// ```rust\n+    ///  (0..3).find_map(|x| if x == 2 { Some(x * 2) } else { None });\n+    /// ```\n+    pub FIND_MAP,\n+    pedantic,\n+    \"using a combination of `find` and `map` can usually be written as a single method call\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for an iterator search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n@@ -798,6 +842,8 @@ declare_lint_pass!(Methods => [\n     TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n     FILTER_MAP,\n+    FILTER_MAP_NEXT,\n+    FIND_MAP,\n     MAP_FLATTEN,\n     ITER_NTH,\n     ITER_SKIP_NEXT,\n@@ -833,6 +879,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1]),\n+            [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n@@ -1911,6 +1959,42 @@ fn lint_filter_map<'a, 'tcx>(\n     }\n }\n \n+/// lint use of `filter_map().next()` for `Iterators`\n+fn lint_filter_map_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, filter_args: &'tcx [hir::Expr]) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n+                   `.find_map(p)` instead.\";\n+        let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n+        if filter_snippet.lines().count() <= 1 {\n+            span_note_and_lint(\n+                cx,\n+                FILTER_MAP_NEXT,\n+                expr.span,\n+                msg,\n+                expr.span,\n+                &format!(\"replace `filter_map({0}).next()` with `find_map({0})`\", filter_snippet),\n+            );\n+        } else {\n+            span_lint(cx, FILTER_MAP_NEXT, expr.span, msg);\n+        }\n+    }\n+}\n+\n+/// lint use of `find().map()` for `Iterators`\n+fn lint_find_map<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    _find_args: &'tcx [hir::Expr],\n+    map_args: &'tcx [hir::Expr],\n+) {\n+    // lint if caller of `.filter().map()` is an Iterator\n+    if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n+        let msg = \"called `find(p).map(q)` on an `Iterator`. \\\n+                   This is more succinctly expressed by calling `.find_map(..)` instead.\";\n+        span_lint(cx, FIND_MAP, expr.span, msg);\n+    }\n+}\n+\n /// lint use of `filter().map()` for `Iterators`\n fn lint_filter_map_map<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "63d75be1da204b41e42a500f9cf535371c601b1f", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -186,7 +186,9 @@ fn check_pat<'a, 'tcx>(\n                 if let ExprKind::Struct(_, ref efields, _) = init_struct.node {\n                     for field in pfields {\n                         let name = field.node.ident.name;\n-                        let efield = efields.iter().find(|f| f.ident.name == name).map(|f| &*f.expr);\n+                        let efield = efields\n+                            .iter()\n+                            .find_map(|f| if f.ident.name == name { Some(&*f.expr) } else { None });\n                         check_pat(cx, &field.node.pat, efield, span, bindings);\n                     }\n                 } else {"}, {"sha": "bec8d53714e22be2bbc9db6a291ec147c21178b1", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -58,10 +58,16 @@ pub fn get_attr<'a>(\n     attrs.iter().filter(move |attr| {\n         let attr_segments = &attr.path.segments;\n         if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n-            if let Some(deprecation_status) = BUILTIN_ATTRIBUTES\n-                .iter()\n-                .find(|(builtin_name, _)| *builtin_name == attr_segments[1].ident.to_string())\n-                .map(|(_, deprecation_status)| deprecation_status)\n+            if let Some(deprecation_status) =\n+                BUILTIN_ATTRIBUTES\n+                    .iter()\n+                    .find_map(|(builtin_name, deprecation_status)| {\n+                        if *builtin_name == attr_segments[1].ident.to_string() {\n+                            Some(deprecation_status)\n+                        } else {\n+                            None\n+                        }\n+                    })\n             {\n                 let mut db = sess.struct_span_err(attr_segments[1].ident.span, \"Usage of deprecated attribute\");\n                 match deprecation_status {"}, {"sha": "663e55d8ea2ba8160843c5f5efa1d36c05b49fdf", "filename": "tests/compile-test.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -61,10 +61,13 @@ fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n             let name = path.file_name()?.to_string_lossy();\n             // NOTE: This only handles a single dep\n             // https://github.com/laumann/compiletest-rs/issues/101\n-            needs_disambiguation\n-                .iter()\n-                .find(|dep| name.starts_with(&format!(\"lib{}-\", dep)))\n-                .map(|dep| format!(\"--extern {}={}\", dep, path.display()))\n+            needs_disambiguation.iter().find_map(|dep| {\n+                if name.starts_with(&format!(\"lib{}-\", dep)) {\n+                    Some(format!(\"--extern {}={}\", dep, path.display()))\n+                } else {\n+                    None\n+                }\n+            })\n         })\n         .collect::<Vec<_>>();\n "}, {"sha": "f5d051be198ed3011ed7ae74b06c1ccec983d286", "filename": "tests/ui/filter_map_next.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -0,0 +1,20 @@\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+fn main() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+    assert_eq!(element, Some(1));\n+\n+    #[rustfmt::skip]\n+    let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n+        .into_iter()\n+        .filter_map(|x| {\n+            if x == 2 {\n+                Some(x * 2)\n+            } else {\n+                None\n+            }\n+        })\n+        .next();\n+}"}, {"sha": "d69ae212414f621ea719250b62d10c5ff9fd48cb", "filename": "tests/ui/filter_map_next.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -0,0 +1,24 @@\n+error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n+  --> $DIR/filter_map_next.rs:6:32\n+   |\n+LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n+   = note: replace `filter_map(|s| s.parse().ok()).next()` with `find_map(|s| s.parse().ok())`\n+\n+error: called `filter_map(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(p)` instead.\n+  --> $DIR/filter_map_next.rs:10:26\n+   |\n+LL |       let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n+   |  __________________________^\n+LL | |         .into_iter()\n+LL | |         .filter_map(|x| {\n+LL | |             if x == 2 {\n+...  |\n+LL | |         })\n+LL | |         .next();\n+   | |_______________^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c28cca144ca3f15bb6aa90c0095d7e844d1d7ea9", "filename": "tests/ui/find_map.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffind_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffind_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.rs?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -0,0 +1,32 @@\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+#[derive(Debug, Copy, Clone)]\n+enum Flavor {\n+    Chocolate,\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+enum Dessert {\n+    Banana,\n+    Pudding,\n+    Cake(Flavor),\n+}\n+\n+fn main() {\n+    let desserts_of_the_week = vec![Dessert::Banana, Dessert::Cake(Flavor::Chocolate), Dessert::Pudding];\n+\n+    let a = [\"lol\", \"NaN\", \"2\", \"5\", \"Xunda\"];\n+\n+    let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n+\n+    let _: Option<Flavor> = desserts_of_the_week\n+        .iter()\n+        .find(|dessert| match *dessert {\n+            Dessert::Cake(_) => true,\n+            _ => false,\n+        })\n+        .map(|dessert| match *dessert {\n+            Dessert::Cake(ref flavor) => *flavor,\n+            _ => unreachable!(),\n+        });\n+}"}, {"sha": "0417c7f3dc9a03721920bc756ee45bedae65c567", "filename": "tests/ui/find_map.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e56e325f8504c52e43f1efd8c4b0a1b62c4ef161/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=e56e325f8504c52e43f1efd8c4b0a1b62c4ef161", "patch": "@@ -0,0 +1,23 @@\n+error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+  --> $DIR/find_map.rs:20:26\n+   |\n+LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::find-map` implied by `-D warnings`\n+\n+error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+  --> $DIR/find_map.rs:22:29\n+   |\n+LL |       let _: Option<Flavor> = desserts_of_the_week\n+   |  _____________________________^\n+LL | |         .iter()\n+LL | |         .find(|dessert| match *dessert {\n+LL | |             Dessert::Cake(_) => true,\n+...  |\n+LL | |             _ => unreachable!(),\n+LL | |         });\n+   | |__________^\n+\n+error: aborting due to 2 previous errors\n+"}]}