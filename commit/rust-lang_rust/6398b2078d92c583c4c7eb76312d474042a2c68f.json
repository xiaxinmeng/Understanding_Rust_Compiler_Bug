{"sha": "6398b2078d92c583c4c7eb76312d474042a2c68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOThiMjA3OGQ5MmM1ODNjNGM3ZWI3NjMxMmQ0NzQwNDJhMmM2OGY=", "commit": {"author": {"name": "Yamakaky", "email": "yamakaky@yamaworld.fr", "date": "2017-02-27T15:22:31Z"}, "committer": {"name": "Yamakaky", "email": "yamakaky@yamaworld.fr", "date": "2017-02-27T15:31:36Z"}, "message": "This test is too hard to maintain cross-platform", "tree": {"sha": "34e10822dfd5b1a2964de5144057b170696d15c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e10822dfd5b1a2964de5144057b170696d15c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6398b2078d92c583c4c7eb76312d474042a2c68f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEEt/Y5vtxe1Ue5GFKSH1EgxmwLZPcFAli0RloWHHlhbWFrYWt5\nQHlhbWF3b3JsZC5mcgAKCRAfUSDGbAtk97E/B/9/hHBIWe6ZayJ3AqGjumavqdM1\nwjqUfer581MiykkwjOb7E6vWv+Qa4ekC3ibfKtLZ0aJTQcsj2ONNtct6b/+MJ6Fc\nO74N8SKX9QcZyiXezSlEHSY3u+OigOP3PjM1aljQUpw3sGDC/guFbWH9pD/keb//\n+DgjPTWc9jNavbYJ4uZ4udAeLtCKuqZRJNW5TiLFdabInS3N9EMKedZN3b90Qkve\ncitCfa6ZwRoe5W+kHmocKYIaYZZqUcXBcfiCeVWOTCk1FW6eezmsTexITAAzZqKZ\n2c+ulc1b/7HZIgnD0K5hM5P8hKY9V0fky6xHHYKRM3qdkEZFfgndPiudX1oS\n=SQ6T\n-----END PGP SIGNATURE-----", "payload": "tree 34e10822dfd5b1a2964de5144057b170696d15c7\nparent 52bed53e999c8628ccb47d349283be65b42a6dd2\nauthor Yamakaky <yamakaky@yamaworld.fr> 1488208951 -0500\ncommitter Yamakaky <yamakaky@yamaworld.fr> 1488209496 -0500\n\nThis test is too hard to maintain cross-platform\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6398b2078d92c583c4c7eb76312d474042a2c68f", "html_url": "https://github.com/rust-lang/rust/commit/6398b2078d92c583c4c7eb76312d474042a2c68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6398b2078d92c583c4c7eb76312d474042a2c68f/comments", "author": {"login": "Yamakaky", "id": 1327378, "node_id": "MDQ6VXNlcjEzMjczNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1327378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yamakaky", "html_url": "https://github.com/Yamakaky", "followers_url": "https://api.github.com/users/Yamakaky/followers", "following_url": "https://api.github.com/users/Yamakaky/following{/other_user}", "gists_url": "https://api.github.com/users/Yamakaky/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yamakaky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yamakaky/subscriptions", "organizations_url": "https://api.github.com/users/Yamakaky/orgs", "repos_url": "https://api.github.com/users/Yamakaky/repos", "events_url": "https://api.github.com/users/Yamakaky/events{/privacy}", "received_events_url": "https://api.github.com/users/Yamakaky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Yamakaky", "id": 1327378, "node_id": "MDQ6VXNlcjEzMjczNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1327378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yamakaky", "html_url": "https://github.com/Yamakaky", "followers_url": "https://api.github.com/users/Yamakaky/followers", "following_url": "https://api.github.com/users/Yamakaky/following{/other_user}", "gists_url": "https://api.github.com/users/Yamakaky/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yamakaky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yamakaky/subscriptions", "organizations_url": "https://api.github.com/users/Yamakaky/orgs", "repos_url": "https://api.github.com/users/Yamakaky/repos", "events_url": "https://api.github.com/users/Yamakaky/events{/privacy}", "received_events_url": "https://api.github.com/users/Yamakaky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52bed53e999c8628ccb47d349283be65b42a6dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bed53e999c8628ccb47d349283be65b42a6dd2", "html_url": "https://github.com/rust-lang/rust/commit/52bed53e999c8628ccb47d349283be65b42a6dd2"}], "stats": {"total": 46, "additions": 0, "deletions": 46}, "files": [{"sha": "b3a9e8928be34b1e19645dec6f9461d9d5fc69ae", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6398b2078d92c583c4c7eb76312d474042a2c68f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6398b2078d92c583c4c7eb76312d474042a2c68f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=6398b2078d92c583c4c7eb76312d474042a2c68f", "patch": "@@ -58,54 +58,8 @@ fn runtest(me: &str) {\n     let s = str::from_utf8(&out.stderr).unwrap();\n     assert!(s.contains(\"stack backtrace\") && s.contains(&expected(\"foo\")),\n             \"bad output: {}\", s);\n-\n-    // Make sure than the short version cleans the backtrace.\n-    let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n-    let out = p.wait_with_output().unwrap();\n-    assert!(!out.status.success());\n-    let s = str::from_utf8(&out.stderr).unwrap();\n-    let removed_symbols = &[\n-        \"std::sys::imp::backtrace\",\n-        \"std::sys_common::backtrace\",\n-        \"std::panicking\",\n-        \"core::panicking\",\n-        \"rust_begin_unwind\",\n-        \"code::result::unwrap_failed\",\n-        \"std::panicking::try::do_call\",\n-        \"__rust_maybe_catch_panic\",\n-        \"__libc_start_main\",\n-        \"__rust_try\",\n-        \"_start\",\n-    ];\n-    for symbol in removed_symbols {\n-        assert!(!s.contains(symbol),\n-                \"{} should be removed from the backtrace\\n{}\",\n-                symbol, s);\n-    }\n     assert!(s.contains(\" 0:\"), \"the frame number should start at 0\");\n \n-    // Only on linux for _start and __libc_start_main\n-    #[cfg(target_os=\"linux\")]\n-    {\n-        // Make sure than the short version cleans the backtrace.\n-        let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\", \"full\").spawn().unwrap();\n-        let out = p.wait_with_output().unwrap();\n-        assert!(!out.status.success());\n-        let s = str::from_utf8(&out.stderr).unwrap();\n-        let should_be_present = &[\n-            \"std::panicking\",\n-            \"__rust_maybe_catch_panic\",\n-            \"__libc_start_main\",\n-            \"_start\",\n-        ];\n-        for symbol in should_be_present {\n-            // May give false positive due to inlining.\n-            assert!(s.contains(symbol),\n-            \"the full version of the backtrace should contain {}\",\n-            symbol);\n-        }\n-    }\n-\n     // Make sure the stack trace is *not* printed\n     // (Remove RUST_BACKTRACE from our own environment, in case developer\n     // is running `make check` with it on.)"}]}