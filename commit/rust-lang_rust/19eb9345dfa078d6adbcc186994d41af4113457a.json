{"sha": "19eb9345dfa078d6adbcc186994d41af4113457a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWI5MzQ1ZGZhMDc4ZDZhZGJjYzE4Njk5NGQ0MWFmNDExMzQ1N2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-26T16:14:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-26T16:14:19Z"}, "message": "print pointers more compactly when they are too big", "tree": {"sha": "c473e026df1e64888f63b1f74535eaf73b85cf42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c473e026df1e64888f63b1f74535eaf73b85cf42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19eb9345dfa078d6adbcc186994d41af4113457a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb9345dfa078d6adbcc186994d41af4113457a", "html_url": "https://github.com/rust-lang/rust/commit/19eb9345dfa078d6adbcc186994d41af4113457a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19eb9345dfa078d6adbcc186994d41af4113457a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c427438d24b047a4c9cdbe3ac89642f1460d19ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c427438d24b047a4c9cdbe3ac89642f1460d19ec", "html_url": "https://github.com/rust-lang/rust/commit/c427438d24b047a4c9cdbe3ac89642f1460d19ec"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "3925f6d0f9bd71d7f68215dfb37472dffd3c2cf7", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -168,15 +168,21 @@ pub enum LitToConstError {\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd)]\n pub struct AllocId(pub u64);\n \n-impl fmt::Debug for AllocId {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, fmt)\n+impl fmt::Display for AllocId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if f.alternate() {\n+            write!(f, \"a{}\", self.0)\n+        } else {\n+            write!(f, \"alloc{}\", self.0)\n+        }\n     }\n }\n \n-impl fmt::Display for AllocId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"alloc{}\", self.0)\n+// We also want the `Debug` output to be readable as it is used by `derive(Debug)` for\n+// all the Miri types.\n+impl fmt::Debug for AllocId {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self, fmt)\n     }\n }\n "}, {"sha": "9e2cc666a282b865f95312b0ad5c1f0c9f0f3d6a", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -119,15 +119,31 @@ pub struct Pointer<Tag = (), Id = AllocId> {\n \n static_assert_size!(Pointer, 16);\n \n-impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Display for Pointer<Tag, Id> {\n     default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+        if f.alternate() {\n+            write!(f, \"{:#?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+        } else {\n+            write!(f, \"{:?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+        }\n     }\n }\n // Specialization for no tag\n-impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n+impl<Id: fmt::Debug> fmt::Display for Pointer<(), Id> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n+        if f.alternate() {\n+            write!(f, \"{:#?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n+        } else {\n+            write!(f, \"{:?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n+        }\n+    }\n+}\n+\n+// We also want the `Debug` output to be readable as it is used by `derive(Debug)` for\n+// all the Miri types.\n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self, fmt)\n     }\n }\n "}, {"sha": "932570e522f7922190fddd8ec1defc03367b8cdd", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -726,6 +726,10 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n             let relocation_width = |bytes| bytes * 3;\n             let ptr = Pointer::new_with_tag(target_id, offset, tag);\n             let mut target = format!(\"{:?}\", ptr);\n+            if target.len() > relocation_width(ptr_size.bytes_usize() - 1) {\n+                // This is too long, try to save some space.\n+                target = format!(\"{:#?}\", ptr);\n+            }\n             if ((i - line_start) + ptr_size).bytes_usize() > BYTES_PER_LINE {\n                 // This branch handles the situation where a relocation starts in the current line\n                 // but ends in the next one."}, {"sha": "66df28ea702eadb88c0a7f1e94382363a5c8b4f3", "filename": "src/test/mir-opt/const_allocation/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -30,19 +30,19 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257ealloc17+0x0 (4 ptr bytes)\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500a17+0x0\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc17 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc4+0x0 (4 ptr bytes)\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc8+0x0 (4 ptr bytes)\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc13+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a4+0x0\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a8+0x0\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500a13+0x0\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc4 (size: 0, align: 4) {}\n \n alloc8 (size: 16, align: 4) {\n-    \u257ealloc7+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u257ealloc9+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    \u257e\u2500a7+0x0\u2500\u2500\u257c 03 00 00 00 \u257e\u2500a9+0x0\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n alloc7 (size: 3, align: 1) {\n@@ -54,8 +54,8 @@ alloc9 (size: 3, align: 1) {\n }\n \n alloc13 (size: 24, align: 4) {\n-    0x00 \u2502 \u257ealloc12+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u257ealloc14+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 \u257ealloc15+0x0 (4 ptr bytes)\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    0x00 \u2502 \u257e\u2500a12+0x0\u2500\u257c 03 00 00 00 \u257e\u2500a14+0x0\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 \u257e\u2500a15+0x0\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc12 (size: 3, align: 1) {"}, {"sha": "caced1dc95d39267268ba320d9c48341aaadbaa0", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -30,19 +30,19 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257ealloc21+0x0 (4 ptr bytes)\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500a21+0x0\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc21 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc4+0x0 (4 ptr bytes)\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc9+0x0 (4 ptr bytes)\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc19+0x0 (4 ptr bytes)\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a4+0x0\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a9+0x0\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500a19+0x0\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc4 (size: 0, align: 4) {}\n \n alloc9 (size: 8, align: 4) {\n-    \u257ealloc7+0x0 (4 ptr bytes)\u257c \u257ealloc8+0x0 (4 ptr bytes)\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+    \u257e\u2500a7+0x0\u2500\u2500\u257c \u257e\u2500a8+0x0\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n alloc7 (size: 1, align: 1) {\n@@ -54,7 +54,7 @@ alloc8 (size: 1, align: 1) {\n }\n \n alloc19 (size: 12, align: 4) {\n-    \u257ealloc15+0x3 (4 ptr bytes)\u257c \u257ealloc16+0x0 (4 ptr bytes)\u257c \u257ealloc18+0x2 (4 ptr bytes)\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+    \u257e\u2500a15+0x3\u2500\u257c \u257e\u2500a16+0x0\u2500\u257c \u257e\u2500a18+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n alloc15 (size: 4, align: 1) {"}, {"sha": "a93161a0183cad3b8d41be17c89b3b601a6f1828", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/19eb9345dfa078d6adbcc186994d41af4113457a/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=19eb9345dfa078d6adbcc186994d41af4113457a", "patch": "@@ -30,20 +30,20 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257ealloc9+0x0 (4 ptr bytes)\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500a9+0x0\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n alloc9 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc4+0x0 (4 ptr bytes)\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500a4+0x0\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257ealloc6+0x0 (4 ptr bytes)\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257ealloc7+0x63 (4 ptr bytes)\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500a6+0x0\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257e\u2500a7+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n "}]}