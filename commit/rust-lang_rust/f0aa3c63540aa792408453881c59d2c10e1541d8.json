{"sha": "f0aa3c63540aa792408453881c59d2c10e1541d8", "node_id": "C_kwDOAAsO6NoAKGYwYWEzYzYzNTQwYWE3OTI0MDg0NTM4ODFjNTlkMmMxMGUxNTQxZDg", "commit": {"author": {"name": "Daniel La\u00fcgt", "email": "daniel.laugt@gmail.com", "date": "2023-03-22T10:06:08Z"}, "committer": {"name": "Daniel La\u00fcgt", "email": "daniel.laugt@gmail.com", "date": "2023-03-22T10:06:08Z"}, "message": "Check the presence of linkat() on Solaris (not available in version 10, available in version 11)", "tree": {"sha": "77f2358572a16735e2d76865715dbcbf10f852e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f2358572a16735e2d76865715dbcbf10f852e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0aa3c63540aa792408453881c59d2c10e1541d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0aa3c63540aa792408453881c59d2c10e1541d8", "html_url": "https://github.com/rust-lang/rust/commit/f0aa3c63540aa792408453881c59d2c10e1541d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0aa3c63540aa792408453881c59d2c10e1541d8/comments", "author": {"login": "dlaugt", "id": 8080438, "node_id": "MDQ6VXNlcjgwODA0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/8080438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlaugt", "html_url": "https://github.com/dlaugt", "followers_url": "https://api.github.com/users/dlaugt/followers", "following_url": "https://api.github.com/users/dlaugt/following{/other_user}", "gists_url": "https://api.github.com/users/dlaugt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlaugt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlaugt/subscriptions", "organizations_url": "https://api.github.com/users/dlaugt/orgs", "repos_url": "https://api.github.com/users/dlaugt/repos", "events_url": "https://api.github.com/users/dlaugt/events{/privacy}", "received_events_url": "https://api.github.com/users/dlaugt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlaugt", "id": 8080438, "node_id": "MDQ6VXNlcjgwODA0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/8080438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlaugt", "html_url": "https://github.com/dlaugt", "followers_url": "https://api.github.com/users/dlaugt/followers", "following_url": "https://api.github.com/users/dlaugt/following{/other_user}", "gists_url": "https://api.github.com/users/dlaugt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlaugt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlaugt/subscriptions", "organizations_url": "https://api.github.com/users/dlaugt/orgs", "repos_url": "https://api.github.com/users/dlaugt/repos", "events_url": "https://api.github.com/users/dlaugt/events{/privacy}", "received_events_url": "https://api.github.com/users/dlaugt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e21b417d4d7e60ce61ebe0991f9b8a61df4bdb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e21b417d4d7e60ce61ebe0991f9b8a61df4bdb8", "html_url": "https://github.com/rust-lang/rust/commit/7e21b417d4d7e60ce61ebe0991f9b8a61df4bdb8"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "24f68e6067217f59c16e9dbc925d45ff1574bcf2", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0aa3c63540aa792408453881c59d2c10e1541d8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0aa3c63540aa792408453881c59d2c10e1541d8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=f0aa3c63540aa792408453881c59d2c10e1541d8", "patch": "@@ -33,7 +33,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n     target_os = \"watchos\",\n ))]\n use crate::sys::weak::syscall;\n-#[cfg(any(target_os = \"android\", target_os = \"macos\"))]\n+#[cfg(any(target_os = \"android\", target_os = \"macos\", target_os = \"solaris\"))]\n use crate::sys::weak::weak;\n \n use libc::{c_int, mode_t};\n@@ -42,6 +42,7 @@ use libc::{c_int, mode_t};\n     target_os = \"macos\",\n     target_os = \"ios\",\n     target_os = \"watchos\",\n+    target_os = \"solaris\",\n     all(target_os = \"linux\", target_env = \"gnu\")\n ))]\n use libc::c_char;\n@@ -1423,15 +1424,15 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     run_path_with_cstr(original, |original| {\n         run_path_with_cstr(link, |link| {\n             cfg_if::cfg_if! {\n-                if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\", target_os = \"horizon\", target_os = \"solaris\"))] {\n-                    // VxWorks, Redox, ESP-IDF and Solaris lack `linkat`, so use `link` instead. POSIX leaves\n+                if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\", target_os = \"horizon\"))] {\n+                    // VxWorks, Redox and ESP-IDF lack `linkat`, so use `link` instead. POSIX leaves\n                     // it implementation-defined whether `link` follows symlinks, so rely on the\n                     // `symlink_hard_link` test in library/std/src/fs/tests.rs to check the behavior.\n                     // Android has `linkat` on newer versions, but we happen to know `link`\n                     // always has the correct behavior, so it's here as well.\n                     cvt(unsafe { libc::link(original.as_ptr(), link.as_ptr()) })?;\n-                } else if #[cfg(target_os = \"macos\")] {\n-                    // On MacOS, older versions (<=10.9) lack support for linkat while newer\n+                } else if #[cfg(any(target_os = \"macos\", target_os = \"solaris\"))] {\n+                    // MacOS (<=10.9) and Solaris 10 lack support for linkat while newer\n                     // versions have it. We want to use linkat if it is available, so we use weak!\n                     // to check. `linkat` is preferable to `link` because it gives us a flag to\n                     // specify how symlinks should be handled. We pass 0 as the flags argument,"}]}