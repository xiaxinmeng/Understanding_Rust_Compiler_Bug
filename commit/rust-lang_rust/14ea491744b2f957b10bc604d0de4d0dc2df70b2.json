{"sha": "14ea491744b2f957b10bc604d0de4d0dc2df70b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZWE0OTE3NDRiMmY5NTdiMTBiYzYwNGQwZGU0ZDBkYzJkZjcwYjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-21T03:25:07Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-22T12:45:33Z"}, "message": "Add all the missing option tests.", "tree": {"sha": "6a0ad334715e983ddcafdee49e5be7f1f9adebac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0ad334715e983ddcafdee49e5be7f1f9adebac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ea491744b2f957b10bc604d0de4d0dc2df70b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea491744b2f957b10bc604d0de4d0dc2df70b2", "html_url": "https://github.com/rust-lang/rust/commit/14ea491744b2f957b10bc604d0de4d0dc2df70b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ea491744b2f957b10bc604d0de4d0dc2df70b2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4348f31e3bb0ee20825fd304d1638db53201750f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4348f31e3bb0ee20825fd304d1638db53201750f", "html_url": "https://github.com/rust-lang/rust/commit/4348f31e3bb0ee20825fd304d1638db53201750f"}], "stats": {"total": 288, "additions": 273, "deletions": 15}, "files": [{"sha": "178b79751cc2c5e7f1578a420d00809b50bb3451", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 273, "deletions": 15, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/14ea491744b2f957b10bc604d0de4d0dc2df70b2/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea491744b2f957b10bc604d0de4d0dc2df70b2/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=14ea491744b2f957b10bc604d0de4d0dc2df70b2", "patch": "@@ -5,15 +5,16 @@ use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_middle::middle::cstore;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n-use rustc_session::config::{ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n-use rustc_session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n+use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n+use rustc_session::config::{Externs, OutputType, OutputTypes, Sanitizer, SymbolManglingVersion};\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n-use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n+use rustc_span::SourceFileHashAlgorithm;\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -383,12 +384,17 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.codegen_units = Some(42);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.cg.default_linker_libraries = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.cg.extra_filename = String::from(\"extra-filename\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.incremental = Some(String::from(\"abc\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    // `link_arg` is omitted because it just forwards to `link_args`.\n+\n     opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -398,6 +404,12 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.linker = Some(PathBuf::from(\"linker\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.cg.linker_flavor = Some(LinkerFlavor::Gcc);\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.cg.no_stack_check = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.cg.remark = Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -411,19 +423,19 @@ fn test_codegen_options_tracking_hash() {\n     // This list is in alphabetical order.\n \n     opts = reference.clone();\n-    opts.cg.code_model = Some(String::from(\"code model\"));\n+    opts.cg.bitcode_in_rlib = false;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debug_assertions = Some(true);\n+    opts.cg.code_model = Some(String::from(\"code model\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = 0xdeadbeef;\n+    opts.cg.debug_assertions = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = 0xba5eba11;\n+    opts.cg.debuginfo = 0xdeadbeef;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n@@ -466,6 +478,10 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.no_vectorize_slp = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.cg.opt_level = \"3\".to_string();\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.cg.overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n@@ -505,14 +521,6 @@ fn test_codegen_options_tracking_hash() {\n     opts = reference.clone();\n     opts.cg.target_feature = String::from(\"all the features, all of them\");\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.bitcode_in_rlib = false;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n }\n \n #[test]\n@@ -529,9 +537,24 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.ast_json_noexpand = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.borrowck = String::from(\"other\");\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.borrowck_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.control_flow_guard = CFGuard::Checks;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.deduplicate_diagnostics = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.dep_tasks = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.dont_buffer_diagnostics = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.dump_dep_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -544,27 +567,80 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.dump_mir_dir = String::from(\"abc\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.dump_mir_exclude_pass_number = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.dump_mir_graphviz = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.emit_stack_sizes = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.hir_stats = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.identify_regions = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.incremental_ignore_spans = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.incremental_info = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.incremental_verify_ich = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.input_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.debugging_opts.keep_hygiene_data = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.link_native_libraries = false;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.llvm_time_trace = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.ls = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.macro_backtrace = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.meta_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.nll_facts = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.no_analysis = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.no_interleave_lints = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.no_leak_check = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.no_parallel_llvm = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.parse_only = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.perf_stats = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.polonius = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    // `pre_link_arg` is omitted because it just forwards to `pre_link_args`.\n+\n+    opts.debugging_opts.pre_link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.print_link_args = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -577,12 +653,36 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.print_region_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.print_type_sizes = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.query_dep_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.query_stats = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.save_analysis = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.self_profile = SwitchWithOptPath::Enabled(None);\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.self_profile_events = Some(vec![String::new()]);\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.span_free_formats = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.terminal_width = Some(80);\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.threads = 99;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.time = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.time_llvm_passes = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -592,6 +692,12 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.trace_macros = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+    opts.debugging_opts.ui_testing = true;\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+    opts.debugging_opts.unpretty = Some(\"expanded\".to_string());\n+    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.unstable_options = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n@@ -605,10 +711,42 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.always_encode_mir = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.asm_comments = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.binary_dep_depinfo = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.codegen_backend = Some(\"abc\".to_string());\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.crate_attr = vec![\"abc\".to_string()];\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.debug_macros = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.dep_info_omit_d_target = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.dual_proc_macros = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.embed_bitcode = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.fewer_names = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n@@ -617,22 +755,94 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.force_unstable_if_unmarked = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.fuel = Some((\"abc\".to_string(), 99));\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.human_readable_cgu_names = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.inline_in_all_cgus = Some(true);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.insert_sideeffect = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.instrument_mcount = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.link_only = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.mir_emit_retag = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.mir_opt_level = 3;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.mutable_noalias = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.new_llvm_pass_manager = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.no_codegen = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.no_generate_arange_section = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.no_landing_pads = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.no_link = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.no_profiler_runtime = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.osx_rpath_install_name = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.panic_abort_tests = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.plt = Some(true);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.print_fuel = Some(\"abc\".to_string());\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.profile = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n@@ -641,18 +851,66 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.report_delayed_bugs = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.run_dsymutil = false;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.sanitizer = Some(Sanitizer::Address);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.sanitizer_memory_track_origins = 2;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.sanitizer_recover = vec![Sanitizer::Address];\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.saturating_float_casts = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.share_generics = Some(true);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.show_span = Some(String::from(\"abc\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.src_hash_algorithm = Some(SourceFileHashAlgorithm::Sha1);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.strip_debuginfo_if_disabled = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.teach = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.thinlto = Some(true);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.treat_err_as_bug = Some(1);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+    opts = reference.clone();\n+    opts.debugging_opts.unleash_the_miri_inside_of_you = true;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n     opts = reference.clone();\n     opts.debugging_opts.verify_llvm_ir = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}]}