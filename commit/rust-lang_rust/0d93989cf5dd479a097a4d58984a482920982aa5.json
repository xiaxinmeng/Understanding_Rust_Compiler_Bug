{"sha": "0d93989cf5dd479a097a4d58984a482920982aa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTM5ODljZjVkZDQ3OWEwOTdhNGQ1ODk4NGE0ODI5MjA5ODJhYTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-22T15:52:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:53Z"}, "message": "adjust pretty printer to print scopes / auxiliary", "tree": {"sha": "af05bb23d719cef7846934ccff80e0c75ceae55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af05bb23d719cef7846934ccff80e0c75ceae55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d93989cf5dd479a097a4d58984a482920982aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d93989cf5dd479a097a4d58984a482920982aa5", "html_url": "https://github.com/rust-lang/rust/commit/0d93989cf5dd479a097a4d58984a482920982aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d93989cf5dd479a097a4d58984a482920982aa5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32bde3311a035f2a0d7c26cf3170cf98860d701", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32bde3311a035f2a0d7c26cf3170cf98860d701", "html_url": "https://github.com/rust-lang/rust/commit/d32bde3311a035f2a0d7c26cf3170cf98860d701"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "650f2d5bcb8027f6ec37117ef6b099991398d7f6", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0d93989cf5dd479a097a4d58984a482920982aa5/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d93989cf5dd479a097a4d58984a482920982aa5/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=0d93989cf5dd479a097a4d58984a482920982aa5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::Location;\n+use build::{Location, ScopeAuxiliary};\n use rustc::mir::repr::*;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc_data_structures::fnv::FnvHashMap;\n@@ -25,14 +25,13 @@ pub fn write_mir_pretty<'a, 'tcx, I>(tcx: &TyCtxt<'tcx>,\n                                      -> io::Result<()>\n     where I: Iterator<Item=(&'a NodeId, &'a Mir<'tcx>)>, 'tcx: 'a\n {\n-    let no_annotations = FnvHashMap();\n     for (&node_id, mir) in iter {\n-        write_mir_fn(tcx, node_id, mir, w, &no_annotations)?;\n+        write_mir_fn(tcx, node_id, mir, w, None)?;\n     }\n     Ok(())\n }\n \n-pub enum Annotation {\n+enum Annotation {\n     EnterScope(ScopeId),\n     ExitScope(ScopeId),\n }\n@@ -41,21 +40,39 @@ pub fn write_mir_fn<'tcx>(tcx: &TyCtxt<'tcx>,\n                           node_id: NodeId,\n                           mir: &Mir<'tcx>,\n                           w: &mut Write,\n-                          annotations: &FnvHashMap<Location, Vec<Annotation>>)\n+                          auxiliary: Option<&Vec<ScopeAuxiliary>>)\n                           -> io::Result<()> {\n+    // compute scope/entry exit annotations\n+    let mut annotations = FnvHashMap();\n+    if let Some(auxiliary) = auxiliary {\n+        for (index, auxiliary) in auxiliary.iter().enumerate() {\n+            let scope_id = ScopeId::new(index);\n+\n+            annotations.entry(auxiliary.dom)\n+                       .or_insert(vec![])\n+                       .push(Annotation::EnterScope(scope_id));\n+\n+            for &loc in &auxiliary.postdoms {\n+                annotations.entry(loc)\n+                           .or_insert(vec![])\n+                           .push(Annotation::ExitScope(scope_id));\n+            }\n+        }\n+    }\n+\n     write_mir_intro(tcx, node_id, mir, w)?;\n     for block in mir.all_basic_blocks() {\n-        write_basic_block(tcx, block, mir, w, annotations)?;\n+        write_basic_block(tcx, block, mir, w, &annotations)?;\n     }\n \n-    // construct a scope tree\n+    // construct a scope tree and write it out\n     let mut scope_tree: FnvHashMap<Option<ScopeId>, Vec<ScopeId>> = FnvHashMap();\n     for (index, scope_data) in mir.scopes.vec.iter().enumerate() {\n         scope_tree.entry(scope_data.parent_scope)\n                   .or_insert(vec![])\n                   .push(ScopeId::new(index));\n     }\n-    write_scope_tree(tcx, mir, &scope_tree, w, None, 1)?;\n+    write_scope_tree(tcx, mir, auxiliary, &scope_tree, w, None, 1)?;\n \n     writeln!(w, \"}}\")?;\n     Ok(())\n@@ -115,6 +132,7 @@ fn comment(tcx: &TyCtxt,\n \n fn write_scope_tree(tcx: &TyCtxt,\n                     mir: &Mir,\n+                    auxiliary: Option<&Vec<ScopeAuxiliary>>,\n                     scope_tree: &FnvHashMap<Option<ScopeId>, Vec<ScopeId>>,\n                     w: &mut Write,\n                     parent: Option<ScopeId>,\n@@ -125,14 +143,20 @@ fn write_scope_tree(tcx: &TyCtxt,\n         let data = &mir.scopes[child];\n         assert_eq!(data.parent_scope, parent);\n         writeln!(w, \"{0:1$}Scope({2}) {{\", \"\", indent, child.index())?;\n+\n         let indent = indent + INDENT.len();\n         if let Some(parent) = parent {\n             writeln!(w, \"{0:1$}Parent: Scope({2})\", \"\", indent, parent.index())?;\n         }\n-        writeln!(w, \"{0:1$}Extent: {2:?}\",\n-                 \"\", indent,\n-                 tcx.region_maps.code_extent_data(data.extent))?;\n-        write_scope_tree(tcx, mir, scope_tree, w, Some(child), depth + 1)?;\n+\n+        if let Some(auxiliary) = auxiliary {\n+            let extent = auxiliary[child.index()].extent;\n+            let data = tcx.region_maps.code_extent_data(extent);\n+            writeln!(w, \"{0:1$}Extent: {2:?}\", \"\", indent, data)?;\n+        }\n+\n+        write_scope_tree(tcx, mir, auxiliary, scope_tree, w,\n+                         Some(child), depth + 1)?;\n     }\n     Ok(())\n }"}]}