{"sha": "f98598c6cd34947efa9e3977338e9bce62d1997c", "node_id": "C_kwDOAAsO6NoAKGY5ODU5OGM2Y2QzNDk0N2VmYTllMzk3NzMzOGU5YmNlNjJkMTk5N2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T16:20:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T16:20:37Z"}, "message": "Auto merge of #108089 - Zoxc:windows-tls, r=bjorn3\n\nSupport TLS access into dylibs on Windows\n\nThis allows access to `#[thread_local]`  in upstream dylibs on Windows by introducing a MIR shim to return the address of the thread local. Accesses that go into an upstream dylib will call the MIR shim to get the address of it.\n\n`convert_tls_rvalues` is introduced in `rustc_codegen_ssa` which rewrites MIR TLS accesses to dummy calls which are replaced with calls to the MIR shims when the dummy calls are lowered to backend calls.\n\nA new `dll_tls_export` target option enables this behavior with a `false` value which is set for Windows platforms.\n\nThis fixes https://github.com/rust-lang/rust/issues/84933.", "tree": {"sha": "dbcaccc8c251182adeb2beccb32b687f598e0623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcaccc8c251182adeb2beccb32b687f598e0623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98598c6cd34947efa9e3977338e9bce62d1997c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98598c6cd34947efa9e3977338e9bce62d1997c", "html_url": "https://github.com/rust-lang/rust/commit/f98598c6cd34947efa9e3977338e9bce62d1997c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98598c6cd34947efa9e3977338e9bce62d1997c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86792086646b61342c9417b78b8a535392f1045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86792086646b61342c9417b78b8a535392f1045f", "html_url": "https://github.com/rust-lang/rust/commit/86792086646b61342c9417b78b8a535392f1045f"}, {"sha": "d499bbb99d72c991f1d1691f83ffe96bcfafc80a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d499bbb99d72c991f1d1691f83ffe96bcfafc80a", "html_url": "https://github.com/rust-lang/rust/commit/d499bbb99d72c991f1d1691f83ffe96bcfafc80a"}], "stats": {"total": 357, "additions": 262, "deletions": 95}, "files": [{"sha": "ebb4de33f990a2e118c5dea57f4ad760ed279f63", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -54,12 +54,22 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    if fx.clif_comments.enabled() {\n-        fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n-    }\n-    let tls_ptr = fx.bcx.ins().tls_value(fx.pointer_type, local_data_id);\n+    let tls_ptr = if !def_id.is_local() && fx.tcx.needs_thread_local_shim(def_id) {\n+        let instance = ty::Instance {\n+            def: ty::InstanceDef::ThreadLocalShim(def_id),\n+            substs: ty::InternalSubsts::empty(),\n+        };\n+        let func_ref = fx.get_function_ref(instance);\n+        let call = fx.bcx.ins().call(func_ref, &[]);\n+        fx.bcx.func.dfg.first_result(call)\n+    } else {\n+        let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n+        let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+        if fx.clif_comments.enabled() {\n+            fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n+        }\n+        fx.bcx.ins().tls_value(fx.pointer_type, local_data_id)\n+    };\n     CValue::by_val(tls_ptr, layout)\n }\n "}, {"sha": "d0fd3cd7666744a3eb9f9a679ad25a34820758da", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -177,14 +177,29 @@ fn exported_symbols_provider_local(\n \n     // FIXME: Sorting this is unnecessary since we are sorting later anyway.\n     //        Can we skip the later sorting?\n-    let mut symbols: Vec<_> = tcx.with_stable_hashing_context(|hcx| {\n-        tcx.reachable_non_generics(LOCAL_CRATE)\n-            .to_sorted(&hcx, true)\n-            .into_iter()\n-            .map(|(&def_id, &info)| (ExportedSymbol::NonGeneric(def_id), info))\n-            .collect()\n+    let sorted = tcx.with_stable_hashing_context(|hcx| {\n+        tcx.reachable_non_generics(LOCAL_CRATE).to_sorted(&hcx, true)\n     });\n \n+    let mut symbols: Vec<_> =\n+        sorted.iter().map(|(&def_id, &info)| (ExportedSymbol::NonGeneric(def_id), info)).collect();\n+\n+    // Export TLS shims\n+    if !tcx.sess.target.dll_tls_export {\n+        symbols.extend(sorted.iter().filter_map(|(&def_id, &info)| {\n+            tcx.needs_thread_local_shim(def_id).then(|| {\n+                (\n+                    ExportedSymbol::ThreadLocalShim(def_id),\n+                    SymbolExportInfo {\n+                        level: info.level,\n+                        kind: SymbolExportKind::Text,\n+                        used: info.used,\n+                    },\n+                )\n+            })\n+        }))\n+    }\n+\n     if tcx.entry_fn(()).is_some() {\n         let exported_symbol =\n             ExportedSymbol::NoDefId(SymbolName::new(tcx, tcx.sess.target.entry_name.as_ref()));\n@@ -380,7 +395,9 @@ fn upstream_monomorphizations_provider(\n                         continue;\n                     }\n                 }\n-                ExportedSymbol::NonGeneric(..) | ExportedSymbol::NoDefId(..) => {\n+                ExportedSymbol::NonGeneric(..)\n+                | ExportedSymbol::ThreadLocalShim(..)\n+                | ExportedSymbol::NoDefId(..) => {\n                     // These are no monomorphizations\n                     continue;\n                 }\n@@ -500,6 +517,16 @@ pub fn symbol_name_for_instance_in_crate<'tcx>(\n                 instantiating_crate,\n             )\n         }\n+        ExportedSymbol::ThreadLocalShim(def_id) => {\n+            rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n+                tcx,\n+                ty::Instance {\n+                    def: ty::InstanceDef::ThreadLocalShim(def_id),\n+                    substs: ty::InternalSubsts::empty(),\n+                },\n+                instantiating_crate,\n+            )\n+        }\n         ExportedSymbol::DropGlue(ty) => rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n             tcx,\n             Instance::resolve_drop_in_place(tcx, ty),\n@@ -548,6 +575,8 @@ pub fn linking_symbol_name_for_instance_in_crate<'tcx>(\n         ExportedSymbol::DropGlue(..) => None,\n         // NoDefId always follow the target's default symbol decoration scheme.\n         ExportedSymbol::NoDefId(..) => None,\n+        // ThreadLocalShim always follow the target's default symbol decoration scheme.\n+        ExportedSymbol::ThreadLocalShim(..) => None,\n     };\n \n     let (conv, args) = instance"}, {"sha": "0a59fabdc17fe2b61f5605a24b1aacc51f53c329", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -516,8 +516,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(bx.cx().tcx().is_static(def_id));\n-                let static_ = bx.get_static(def_id);\n                 let layout = bx.layout_of(bx.cx().tcx().static_ptr_ty(def_id));\n+                let static_ = if !def_id.is_local() && bx.cx().tcx().needs_thread_local_shim(def_id)\n+                {\n+                    let instance = ty::Instance {\n+                        def: ty::InstanceDef::ThreadLocalShim(def_id),\n+                        substs: ty::InternalSubsts::empty(),\n+                    };\n+                    let fn_ptr = bx.get_fn_addr(instance);\n+                    let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n+                    let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n+                    bx.call(fn_ty, Some(fn_abi), fn_ptr, &[], None)\n+                } else {\n+                    bx.get_static(def_id)\n+                };\n                 OperandRef { val: OperandValue::Immediate(static_), layout }\n             }\n             mir::Rvalue::Use(ref operand) => self.codegen_operand(bx, operand),"}, {"sha": "2d9fee9852cc68198e1d0406984eb400f7f1decf", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -383,6 +383,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::DropGlue(..)\n             | ty::InstanceDef::CloneShim(..)\n             | ty::InstanceDef::FnPtrAddrShim(..)\n+            | ty::InstanceDef::ThreadLocalShim(..)\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n                 let Some((body, instance)) ="}, {"sha": "c0c0fd07b6e066eee9e7b85b36d55d0c12fe7b80", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -43,6 +43,7 @@ pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),\n     Generic(DefId, SubstsRef<'tcx>),\n     DropGlue(Ty<'tcx>),\n+    ThreadLocalShim(DefId),\n     NoDefId(ty::SymbolName<'tcx>),\n }\n \n@@ -58,6 +59,10 @@ impl<'tcx> ExportedSymbol<'tcx> {\n             ExportedSymbol::DropGlue(ty) => {\n                 tcx.symbol_name(ty::Instance::resolve_drop_in_place(tcx, ty))\n             }\n+            ExportedSymbol::ThreadLocalShim(def_id) => tcx.symbol_name(ty::Instance {\n+                def: ty::InstanceDef::ThreadLocalShim(def_id),\n+                substs: ty::InternalSubsts::empty(),\n+            }),\n             ExportedSymbol::NoDefId(symbol_name) => symbol_name,\n         }\n     }"}, {"sha": "f592f1515c110b18db87c6c142c2cb1650027d71", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -382,6 +382,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             | InstanceDef::ClosureOnceShim { .. }\n                             | InstanceDef::DropGlue(..)\n                             | InstanceDef::CloneShim(..)\n+                            | InstanceDef::ThreadLocalShim(..)\n                             | InstanceDef::FnPtrAddrShim(..) => None,\n                         }\n                     }"}, {"sha": "ee439df8b6b7cf9df3f77deea9b1f0888614a21d", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -164,17 +164,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Repeat(ref operand, count) => {\n                 tcx.mk_array_with_const_len(operand.ty(local_decls, tcx), count)\n             }\n-            Rvalue::ThreadLocalRef(did) => {\n-                let static_ty = tcx.type_of(did).subst_identity();\n-                if tcx.is_mutable_static(did) {\n-                    tcx.mk_mut_ptr(static_ty)\n-                } else if tcx.is_foreign_item(did) {\n-                    tcx.mk_imm_ptr(static_ty)\n-                } else {\n-                    // FIXME: These things don't *really* have 'static lifetime.\n-                    tcx.mk_imm_ref(tcx.lifetimes.re_static, static_ty)\n-                }\n-            }\n+            Rvalue::ThreadLocalRef(did) => tcx.thread_local_ptr_ty(did),\n             Rvalue::Ref(reg, bk, ref place) => {\n                 let place_ty = place.ty(local_decls, tcx).ty;\n                 tcx.mk_ref(reg, ty::TypeAndMut { ty: place_ty, mutbl: bk.to_mutbl_lossy() })"}, {"sha": "b39fc3aaaff8839f13b2b96b1d978ffb7ef20963", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -335,6 +335,7 @@ macro_rules! make_mir_visitor {\n                         ty::InstanceDef::VTableShim(_def_id) |\n                         ty::InstanceDef::ReifyShim(_def_id) |\n                         ty::InstanceDef::Virtual(_def_id, _) |\n+                        ty::InstanceDef::ThreadLocalShim(_def_id) |\n                         ty::InstanceDef::ClosureOnceShim { call_once: _def_id, track_caller: _ } |\n                         ty::InstanceDef::DropGlue(_def_id, None) => {}\n "}, {"sha": "e73225f70ccca42d17d83d434af7df65cd8b118d", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -82,6 +82,11 @@ pub enum InstanceDef<'tcx> {\n     /// The `DefId` is the ID of the `call_once` method in `FnOnce`.\n     ClosureOnceShim { call_once: DefId, track_caller: bool },\n \n+    /// Compiler-generated accessor for thread locals which returns a reference to the thread local\n+    /// the `DefId` defines. This is used to export thread locals from dylibs on platforms lacking\n+    /// native support.\n+    ThreadLocalShim(DefId),\n+\n     /// `core::ptr::drop_in_place::<T>`.\n     ///\n     /// The `DefId` is for `core::ptr::drop_in_place`.\n@@ -156,6 +161,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n             | InstanceDef::Intrinsic(def_id)\n+            | InstanceDef::ThreadLocalShim(def_id)\n             | InstanceDef::ClosureOnceShim { call_once: def_id, track_caller: _ }\n             | InstanceDef::DropGlue(def_id, _)\n             | InstanceDef::CloneShim(def_id, _)\n@@ -167,7 +173,9 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn def_id_if_not_guaranteed_local_codegen(self) -> Option<DefId> {\n         match self {\n             ty::InstanceDef::Item(def) => Some(def.did),\n-            ty::InstanceDef::DropGlue(def_id, Some(_)) => Some(def_id),\n+            ty::InstanceDef::DropGlue(def_id, Some(_)) | InstanceDef::ThreadLocalShim(def_id) => {\n+                Some(def_id)\n+            }\n             InstanceDef::VTableShim(..)\n             | InstanceDef::ReifyShim(..)\n             | InstanceDef::FnPtrShim(..)\n@@ -192,6 +200,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::ClosureOnceShim { call_once: def_id, track_caller: _ }\n             | InstanceDef::DropGlue(def_id, _)\n             | InstanceDef::CloneShim(def_id, _)\n+            | InstanceDef::ThreadLocalShim(def_id)\n             | InstanceDef::FnPtrAddrShim(def_id, _) => ty::WithOptConstParam::unknown(def_id),\n         }\n     }\n@@ -215,6 +224,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         let def_id = match *self {\n             ty::InstanceDef::Item(def) => def.did,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n+            ty::InstanceDef::ThreadLocalShim(_) => return false,\n             _ => return true,\n         };\n         matches!(\n@@ -255,6 +265,9 @@ impl<'tcx> InstanceDef<'tcx> {\n                 )\n             });\n         }\n+        if let ty::InstanceDef::ThreadLocalShim(..) = *self {\n+            return false;\n+        }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }\n \n@@ -278,6 +291,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn has_polymorphic_mir_body(&self) -> bool {\n         match *self {\n             InstanceDef::CloneShim(..)\n+            | InstanceDef::ThreadLocalShim(..)\n             | InstanceDef::FnPtrAddrShim(..)\n             | InstanceDef::FnPtrShim(..)\n             | InstanceDef::DropGlue(_, Some(_)) => false,\n@@ -310,6 +324,7 @@ fn fmt_instance(\n         InstanceDef::Item(_) => Ok(()),\n         InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n         InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n+        InstanceDef::ThreadLocalShim(_) => write!(f, \" - shim(tls)\"),\n         InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n         InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n         InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),"}, {"sha": "7df90fab56f04356812071562f28b7a27a9dce14", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -2386,6 +2386,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             | ty::InstanceDef::ClosureOnceShim { .. }\n             | ty::InstanceDef::DropGlue(..)\n             | ty::InstanceDef::CloneShim(..)\n+            | ty::InstanceDef::ThreadLocalShim(..)\n             | ty::InstanceDef::FnPtrAddrShim(..) => self.mir_shims(instance),\n         }\n     }"}, {"sha": "e9c0552812b079e79c8f7bf973ab331b45657a6f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -597,6 +597,28 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mut)\n     }\n \n+    /// Returns `true` if the item pointed to by `def_id` is a thread local which needs a\n+    /// thread local shim generated.\n+    #[inline]\n+    pub fn needs_thread_local_shim(self, def_id: DefId) -> bool {\n+        !self.sess.target.dll_tls_export\n+            && self.is_thread_local_static(def_id)\n+            && !self.is_foreign_item(def_id)\n+    }\n+\n+    /// Returns the type a reference to the thread local takes in MIR.\n+    pub fn thread_local_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {\n+        let static_ty = self.type_of(def_id).subst_identity();\n+        if self.is_mutable_static(def_id) {\n+            self.mk_mut_ptr(static_ty)\n+        } else if self.is_foreign_item(def_id) {\n+            self.mk_imm_ptr(static_ty)\n+        } else {\n+            // FIXME: These things don't *really* have 'static lifetime.\n+            self.mk_imm_ref(self.lifetimes.re_static, static_ty)\n+        }\n+    }\n+\n     /// Get the type of the pointer to the static that we use in MIR.\n     pub fn static_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {\n         // Make sure that any constants in the static's type are evaluated."}, {"sha": "5c7415192b936547c7915f40de26bf8c05f7ead1", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -271,6 +271,7 @@ impl<'tcx> Inliner<'tcx> {\n             | InstanceDef::ClosureOnceShim { .. }\n             | InstanceDef::DropGlue(..)\n             | InstanceDef::CloneShim(..)\n+            | InstanceDef::ThreadLocalShim(..)\n             | InstanceDef::FnPtrAddrShim(..) => return Ok(()),\n         }\n "}, {"sha": "8aa3c23d019179ae31b7224d29af5f6f02052f5e", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -83,6 +83,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n                 | InstanceDef::ReifyShim(_)\n                 | InstanceDef::FnPtrShim(..)\n                 | InstanceDef::ClosureOnceShim { .. }\n+                | InstanceDef::ThreadLocalShim { .. }\n                 | InstanceDef::CloneShim(..) => {}\n \n                 // This shim does not call any other functions, thus there can be no recursion."}, {"sha": "2ef5c1062fe28cf596b5a11bdfe38d6a660b0b9e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -76,6 +76,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n             build_drop_shim(tcx, def_id, ty)\n         }\n+        ty::InstanceDef::ThreadLocalShim(..) => build_thread_local_shim(tcx, instance),\n         ty::InstanceDef::CloneShim(def_id, ty) => build_clone_shim(tcx, def_id, ty),\n         ty::InstanceDef::FnPtrAddrShim(def_id, ty) => build_fn_ptr_addr_shim(tcx, def_id, ty),\n         ty::InstanceDef::Virtual(..) => {\n@@ -322,6 +323,34 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     }\n }\n \n+fn build_thread_local_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'tcx> {\n+    let def_id = instance.def_id();\n+\n+    let span = tcx.def_span(def_id);\n+    let source_info = SourceInfo::outermost(span);\n+\n+    let mut blocks = IndexVec::with_capacity(1);\n+    blocks.push(BasicBlockData {\n+        statements: vec![Statement {\n+            source_info,\n+            kind: StatementKind::Assign(Box::new((\n+                Place::return_place(),\n+                Rvalue::ThreadLocalRef(def_id),\n+            ))),\n+        }],\n+        terminator: Some(Terminator { source_info, kind: TerminatorKind::Return }),\n+        is_cleanup: false,\n+    });\n+\n+    new_body(\n+        MirSource::from_instance(instance),\n+        blocks,\n+        IndexVec::from_raw(vec![LocalDecl::new(tcx.thread_local_ptr_ty(def_id), span)]),\n+        0,\n+        span,\n+    )\n+}\n+\n /// Builds a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> Body<'tcx> {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);"}, {"sha": "af0222c8172d23d89db9ae96c2c977a804d62926", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -190,7 +190,8 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitableExt, VtblEntry,\n+    self, GenericParamDefKind, Instance, InstanceDef, Ty, TyCtxt, TypeFoldable, TypeVisitableExt,\n+    VtblEntry,\n };\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n@@ -462,6 +463,16 @@ fn collect_items_rec<'tcx>(\n                     collect_miri(tcx, id, &mut neighbors);\n                 }\n             }\n+\n+            if tcx.needs_thread_local_shim(def_id) {\n+                neighbors.push(respan(\n+                    starting_point.span,\n+                    MonoItem::Fn(Instance {\n+                        def: InstanceDef::ThreadLocalShim(def_id),\n+                        substs: InternalSubsts::empty(),\n+                    }),\n+                ));\n+            }\n         }\n         MonoItem::Fn(instance) => {\n             // Sanity check whether this ended up being collected accidentally\n@@ -962,6 +973,9 @@ fn visit_instance_use<'tcx>(\n                 bug!(\"{:?} being reified\", instance);\n             }\n         }\n+        ty::InstanceDef::ThreadLocalShim(..) => {\n+            bug!(\"{:?} being reified\", instance);\n+        }\n         ty::InstanceDef::DropGlue(_, None) => {\n             // Don't need to emit noop drop glue if we are calling directly.\n             if !is_direct_call {\n@@ -1210,11 +1224,9 @@ impl<'v> RootCollector<'_, 'v> {\n                 self.output.push(dummy_spanned(MonoItem::GlobalAsm(id)));\n             }\n             DefKind::Static(..) => {\n-                debug!(\n-                    \"RootCollector: ItemKind::Static({})\",\n-                    self.tcx.def_path_str(id.owner_id.to_def_id())\n-                );\n-                self.output.push(dummy_spanned(MonoItem::Static(id.owner_id.to_def_id())));\n+                let def_id = id.owner_id.to_def_id();\n+                debug!(\"RootCollector: ItemKind::Static({})\", self.tcx.def_path_str(def_id));\n+                self.output.push(dummy_spanned(MonoItem::Static(def_id)));\n             }\n             DefKind::Const => {\n                 // const items only generate mono items if they are"}, {"sha": "50bcc3336d60da9163e8d9a2cede88bcf901fba9", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -279,6 +279,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                 | ty::InstanceDef::DropGlue(..)\n                 | ty::InstanceDef::Virtual(..)\n                 | ty::InstanceDef::CloneShim(..)\n+                | ty::InstanceDef::ThreadLocalShim(..)\n                 | ty::InstanceDef::FnPtrAddrShim(..) => return None,\n             };\n \n@@ -392,6 +393,19 @@ fn mono_item_linkage_and_visibility<'tcx>(\n \n type CguNameCache = FxHashMap<(DefId, bool), Symbol>;\n \n+fn static_visibility<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    can_be_internalized: &mut bool,\n+    def_id: DefId,\n+) -> Visibility {\n+    if tcx.is_reachable_non_generic(def_id) {\n+        *can_be_internalized = false;\n+        default_visibility(tcx, def_id, false)\n+    } else {\n+        Visibility::Hidden\n+    }\n+}\n+\n fn mono_item_visibility<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: &MonoItem<'tcx>,\n@@ -403,28 +417,21 @@ fn mono_item_visibility<'tcx>(\n         MonoItem::Fn(instance) => instance,\n \n         // Misc handling for generics and such, but otherwise:\n-        MonoItem::Static(def_id) => {\n-            return if tcx.is_reachable_non_generic(*def_id) {\n-                *can_be_internalized = false;\n-                default_visibility(tcx, *def_id, false)\n-            } else {\n-                Visibility::Hidden\n-            };\n-        }\n+        MonoItem::Static(def_id) => return static_visibility(tcx, can_be_internalized, *def_id),\n         MonoItem::GlobalAsm(item_id) => {\n-            return if tcx.is_reachable_non_generic(item_id.owner_id) {\n-                *can_be_internalized = false;\n-                default_visibility(tcx, item_id.owner_id.to_def_id(), false)\n-            } else {\n-                Visibility::Hidden\n-            };\n+            return static_visibility(tcx, can_be_internalized, item_id.owner_id.to_def_id());\n         }\n     };\n \n     let def_id = match instance.def {\n         InstanceDef::Item(def) => def.did,\n         InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n+        // We match the visiblity of statics here\n+        InstanceDef::ThreadLocalShim(def_id) => {\n+            return static_visibility(tcx, can_be_internalized, def_id);\n+        }\n+\n         // These are all compiler glue and such, never exported, always hidden.\n         InstanceDef::VTableShim(..)\n         | InstanceDef::ReifyShim(..)"}, {"sha": "5cbca81926b9aab2dbfa806f72b2a5b927ec0fbd", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -65,6 +65,10 @@ pub(super) fn mangle<'tcx>(\n         )\n         .unwrap();\n \n+    if let ty::InstanceDef::ThreadLocalShim(..) = instance.def {\n+        let _ = printer.write_str(\"{{tls-shim}}\");\n+    }\n+\n     if let ty::InstanceDef::VTableShim(..) = instance.def {\n         let _ = printer.write_str(\"{{vtable-shim}}\");\n     }"}, {"sha": "cac7ff72267dbcc359e96e6761639fb63eaf146c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -42,6 +42,7 @@ pub(super) fn mangle<'tcx>(\n \n     // Append `::{shim:...#0}` to shims that can coexist with a non-shim instance.\n     let shim_kind = match instance.def {\n+        ty::InstanceDef::ThreadLocalShim(_) => Some(\"tls\"),\n         ty::InstanceDef::VTableShim(_) => Some(\"vtable\"),\n         ty::InstanceDef::ReifyShim(_) => Some(\"reify\"),\n "}, {"sha": "bb45fb125b240d5e1a24176130b95dc0040b7936", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -1471,6 +1471,8 @@ pub struct TargetOptions {\n     pub features: StaticCow<str>,\n     /// Whether dynamic linking is available on this target. Defaults to false.\n     pub dynamic_linking: bool,\n+    /// Whether dynamic linking can export TLS globals. Defaults to true.\n+    pub dll_tls_export: bool,\n     /// If dynamic linking is available, whether only cdylibs are supported.\n     pub only_cdylib: bool,\n     /// Whether executables are available on this target. Defaults to true.\n@@ -1865,6 +1867,7 @@ impl Default for TargetOptions {\n             cpu: \"generic\".into(),\n             features: \"\".into(),\n             dynamic_linking: false,\n+            dll_tls_export: true,\n             only_cdylib: false,\n             executables: true,\n             relocation_model: RelocModel::Pic,\n@@ -2537,6 +2540,7 @@ impl Target {\n         key!(cpu);\n         key!(features);\n         key!(dynamic_linking, bool);\n+        key!(dll_tls_export, bool);\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n         key!(relocation_model, RelocModel)?;\n@@ -2791,6 +2795,7 @@ impl ToJson for Target {\n         target_option_val!(cpu);\n         target_option_val!(features);\n         target_option_val!(dynamic_linking);\n+        target_option_val!(dll_tls_export);\n         target_option_val!(only_cdylib);\n         target_option_val!(executables);\n         target_option_val!(relocation_model);"}, {"sha": "efe949a4e9074479ddd1e0bfaa3b928d15419aae", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -8,6 +8,7 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         linker_flavor: LinkerFlavor::Msvc(Lld::No),\n+        dll_tls_export: false,\n         is_like_windows: true,\n         is_like_msvc: true,\n         pre_link_args,"}, {"sha": "2231983f071262889399f88cec67c2a6e21ef65c", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -78,6 +78,7 @@ pub fn opts() -> TargetOptions {\n         function_sections: false,\n         linker: Some(\"gcc\".into()),\n         dynamic_linking: true,\n+        dll_tls_export: false,\n         dll_prefix: \"\".into(),\n         dll_suffix: \".dll\".into(),\n         exe_suffix: \".exe\".into(),"}, {"sha": "b1d8e2be5a61fa1f18e0099f7f6d008b6bbc4fd2", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         abi: \"llvm\".into(),\n         linker: Some(\"clang\".into()),\n         dynamic_linking: true,\n+        dll_tls_export: false,\n         dll_prefix: \"\".into(),\n         dll_suffix: \".dll\".into(),\n         exe_suffix: \".exe\".into(),"}, {"sha": "271284b2d81157dba12a96e2329246287147da1c", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::layout::{\n     fn_can_unwind, FnAbiError, HasParamEnv, HasTyCtxt, LayoutCx, LayoutOf, TyAndLayout,\n };\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InstanceDef, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::call::{\n@@ -29,6 +29,16 @@ fn fn_sig_for_fn_abi<'tcx>(\n     instance: ty::Instance<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> ty::PolyFnSig<'tcx> {\n+    if let InstanceDef::ThreadLocalShim(..) = instance.def {\n+        return ty::Binder::dummy(tcx.mk_fn_sig(\n+            [],\n+            tcx.thread_local_ptr_ty(instance.def_id()),\n+            false,\n+            hir::Unsafety::Normal,\n+            rustc_target::spec::abi::Abi::Unadjusted,\n+        ));\n+    }\n+\n     let ty = instance.ty(tcx, param_env);\n     match *ty.kind() {\n         ty::FnDef(..) => {"}, {"sha": "e229eb16aa139a5d9070b88ae16b509f996afece", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -10,7 +10,7 @@\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(bootstrap), inline)]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -77,29 +77,7 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n-            //\n-            // Because of this we never inline on Windows, but we do inline on\n-            // other platforms (where external references to thread locals\n-            // across DLLs are supported). A better fix for this would be to\n-            // inline this function on Windows, but only for \"statically linked\"\n-            // components. For example if two separately compiled rlibs end up\n-            // getting linked into a DLL then it's fine to inline this function\n-            // across that boundary. It's only not fine to inline this function\n-            // across a DLL boundary. Unfortunately rustc doesn't currently\n-            // have this sort of logic available in an attribute, and it's not\n-            // clear that rustc is even equipped to answer this (it's more of a\n-            // Cargo question kinda). This means that, unfortunately, Windows\n-            // gets the pessimistic path for now where it's never inlined.\n-            //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            #[cfg_attr(not(bootstrap), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "ce74ad3486e1029226e2ca39b20d2c44c20729e6", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -10,7 +10,7 @@\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(bootstrap), inline)]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -49,29 +49,7 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n-            //\n-            // Because of this we never inline on Windows, but we do inline on\n-            // other platforms (where external references to thread locals\n-            // across DLLs are supported). A better fix for this would be to\n-            // inline this function on Windows, but only for \"statically linked\"\n-            // components. For example if two separately compiled rlibs end up\n-            // getting linked into a DLL then it's fine to inline this function\n-            // across that boundary. It's only not fine to inline this function\n-            // across a DLL boundary. Unfortunately rustc doesn't currently\n-            // have this sort of logic available in an attribute, and it's not\n-            // clear that rustc is even equipped to answer this (it's more of a\n-            // Cargo question kinda). This means that, unfortunately, Windows\n-            // gets the pessimistic path for now where it's never inlined.\n-            //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            #[cfg_attr(not(bootstrap), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "027213bc033499ace73632086765e4efbf22f597", "filename": "tests/ui/thread-local/auxiliary/tls-export.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-export.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -0,0 +1,17 @@\n+#![crate_type = \"dylib\"]\n+#![feature(thread_local)]\n+#![feature(cfg_target_thread_local)]\n+\n+extern crate tls_rlib;\n+\n+pub use tls_rlib::*;\n+\n+#[cfg(target_thread_local)]\n+#[thread_local]\n+pub static FOO: bool = true;\n+\n+#[cfg(target_thread_local)]\n+#[inline(never)]\n+pub fn foo_addr() -> usize {\n+    &FOO as *const bool as usize\n+}"}, {"sha": "20bc998ec11d89c81ae2d62ec29427a39bc6b920", "filename": "tests/ui/thread-local/auxiliary/tls-rlib.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthread-local%2Fauxiliary%2Ftls-rlib.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -0,0 +1,15 @@\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+#![feature(thread_local)]\n+#![feature(cfg_target_thread_local)]\n+\n+#[cfg(target_thread_local)]\n+#[thread_local]\n+pub static BAR: bool = true;\n+\n+#[cfg(target_thread_local)]\n+#[inline(never)]\n+pub fn bar_addr() -> usize {\n+    &BAR as *const bool as usize\n+}"}, {"sha": "12c46113cead1203c06c0650614aaf7f5e187c18", "filename": "tests/ui/thread-local/tls-dylib-access.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Ftls-dylib-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98598c6cd34947efa9e3977338e9bce62d1997c/tests%2Fui%2Fthread-local%2Ftls-dylib-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthread-local%2Ftls-dylib-access.rs?ref=f98598c6cd34947efa9e3977338e9bce62d1997c", "patch": "@@ -0,0 +1,19 @@\n+// aux-build: tls-rlib.rs\n+// aux-build: tls-export.rs\n+// run-pass\n+\n+#![feature(cfg_target_thread_local)]\n+\n+#[cfg(target_thread_local)]\n+extern crate tls_export;\n+\n+fn main() {\n+    #[cfg(target_thread_local)]\n+    {\n+        // Check that we get the real address of the `FOO` TLS in the dylib\n+        assert_eq!(&tls_export::FOO as *const bool as usize, tls_export::foo_addr());\n+\n+        // Check that we get the real address of the `BAR` TLS in the rlib linked into the dylib\n+        assert_eq!(&tls_export::BAR as *const bool as usize, tls_export::bar_addr());\n+    }\n+}"}]}