{"sha": "9e1bb9841ee885be82fce24752a8e3de17ab485b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMWJiOTg0MWVlODg1YmU4MmZjZTI0NzUyYThlM2RlMTdhYjQ4NWI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T04:26:39Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T04:26:39Z"}, "message": "Fix substs in nested generic function calls.", "tree": {"sha": "f2f1d10a56b50b2761f4be188752383e4fd86b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f1d10a56b50b2761f4be188752383e4fd86b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e1bb9841ee885be82fce24752a8e3de17ab485b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1bb9841ee885be82fce24752a8e3de17ab485b", "html_url": "https://github.com/rust-lang/rust/commit/9e1bb9841ee885be82fce24752a8e3de17ab485b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e1bb9841ee885be82fce24752a8e3de17ab485b/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb9dd260d5bef6d35e5fb5ab927851fbcfdd3c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb9dd260d5bef6d35e5fb5ab927851fbcfdd3c9", "html_url": "https://github.com/rust-lang/rust/commit/fbb9dd260d5bef6d35e5fb5ab927851fbcfdd3c9"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "14e4323a5f195dff1d2581e21299339a119bd072", "filename": "src/interpreter.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e1bb9841ee885be82fce24752a8e3de17ab485b/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1bb9841ee885be82fce24752a8e3de17ab485b/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=9e1bb9841ee885be82fce24752a8e3de17ab485b", "patch": "@@ -225,6 +225,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 match func_ty.sty {\n                     ty::TyFnDef(def_id, substs, _) => {\n                         let mir = self.load_mir(def_id);\n+                        let substs = self.tcx.mk_substs(\n+                            substs.subst(self.tcx, self.current_substs()));\n                         self.substs_stack.push(substs);\n                         try!(self.push_stack_frame(mir, args, return_ptr));\n                         TerminatorTarget::Call\n@@ -436,11 +438,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n     // TODO(tsion): Cache these outputs.\n     fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> Repr {\n-        use syntax::ast::IntTy;\n-        let substs = self.substs_stack.last().map(|&s| s)\n-            .unwrap_or_else(|| self.tcx.mk_substs(Substs::empty()));\n-\n-        match ty.subst(self.tcx, substs).sty {\n+        use syntax::ast::{IntTy, UintTy};\n+        match ty.subst(self.tcx, self.current_substs()).sty {\n             ty::TyBool => Repr::Bool,\n \n             ty::TyInt(IntTy::Is) => unimplemented!(),\n@@ -498,6 +497,10 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         self.stack.last_mut().expect(\"no call frames exist\")\n     }\n \n+    fn current_substs(&self) -> &'tcx Substs<'tcx> {\n+        self.substs_stack.last().cloned().unwrap_or_else(|| self.tcx.mk_substs(Substs::empty()))\n+    }\n+\n     fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n         match self.tcx.map.as_local_node_id(def_id) {\n             Some(node_id) => CachedMir::Ref(self.mir_map.map.get(&node_id).unwrap()),\n@@ -560,6 +563,7 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 if let Some(ret) = return_ptr {\n                     println!(\"Result:\");\n                     print_allocation_tree(&miri.memory, ret.alloc_id);\n+                    println!(\"\");\n                 }\n             }\n         }"}]}