{"sha": "e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "node_id": "C_kwDOAAsO6NoAKGUyZDNhNGY2MzE4N2VkNmIwOTJiNWVjNGE3ZDhiNjZmODk3Y2EzMDg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-16T20:49:37Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-19T19:53:46Z"}, "message": "rustc_metadata: Store a flag telling whether an item may have doc links in its attributes\n\nThis should be cheap on rustc side, but it's significant optimization for rustdoc that won't need to decode and process attributes unnecessarily", "tree": {"sha": "474b8950b5cfe7321db50ce55523fc838d1ca2f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474b8950b5cfe7321db50ce55523fc838d1ca2f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "html_url": "https://github.com/rust-lang/rust/commit/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054", "html_url": "https://github.com/rust-lang/rust/commit/f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "9a6d12faa605d62bcdf7540aeb1adf28a9dbb8b1", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -9,6 +9,7 @@ use crate::token::{self, CommentKind, Token};\n use crate::tokenstream::{AttrAnnotatedTokenStream, AttrAnnotatedTokenTree};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree, TreeAndSpacing};\n use crate::tokenstream::{LazyTokenStream, TokenStream};\n+use crate::util::comments;\n \n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n@@ -262,6 +263,10 @@ impl Attribute {\n         }\n     }\n \n+    pub fn may_have_doc_links(&self) -> bool {\n+        self.doc_str().map_or(false, |s| comments::may_have_doc_links(s.as_str()))\n+    }\n+\n     pub fn get_normal_item(&self) -> &AttrItem {\n         match self.kind {\n             AttrKind::Normal(ref item, _) => item,"}, {"sha": "b4fff0022e29547e2cd17c2994ac09f528258456", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -24,6 +24,14 @@ pub struct Comment {\n     pub pos: BytePos,\n }\n \n+/// A fast conservative estimate on whether the string can contain documentation links.\n+/// A pair of square brackets `[]` must exist in the string, but we only search for the\n+/// opening bracket because brackets always go in pairs in practice.\n+#[inline]\n+pub fn may_have_doc_links(s: &str) -> bool {\n+    s.contains('[')\n+}\n+\n /// Makes a doc string more presentable to users.\n /// Used by rustdoc and perhaps other tools, but not by rustc.\n pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {"}, {"sha": "77afa7b4a5cf0a7f1d94b90c17d47046c37caf97", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -1744,6 +1744,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 adjustments: generator_data.adjustments,\n             })\n     }\n+\n+    fn get_may_have_doc_links(self, index: DefIndex) -> bool {\n+        self.root.tables.may_have_doc_links.get(self, index).is_some()\n+    }\n }\n \n impl CrateMetadata {"}, {"sha": "6b1f7d55026ad7ed9ec4eb5f591dcffdcf288696", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -531,6 +531,10 @@ impl CStore {\n     ) -> impl Iterator<Item = DefId> + '_ {\n         self.get_crate_data(cnum).get_all_incoherent_impls()\n     }\n+\n+    pub fn may_have_doc_links_untracked(&self, def_id: DefId) -> bool {\n+        self.get_crate_data(def_id.krate).get_may_have_doc_links(def_id.index)\n+    }\n }\n \n impl CrateStore for CStore {"}, {"sha": "f485e09913e9d0d054179c1fab53db12167bd4e0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -977,6 +977,14 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n }\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n+    fn encode_attrs(&mut self, def_id: DefId) {\n+        let attrs = self.tcx.get_attrs(def_id);\n+        record!(self.tables.attributes[def_id] <- attrs);\n+        if attrs.iter().any(|attr| attr.may_have_doc_links()) {\n+            self.tables.may_have_doc_links.set(def_id.index, ());\n+        }\n+    }\n+\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n             return;\n@@ -989,7 +997,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let Some(def_kind) = def_kind else { continue };\n             self.tables.opt_def_kind.set(def_id.index, def_kind);\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n-            record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));\n+            self.encode_attrs(def_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n@@ -1651,7 +1659,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             self.tables.opt_def_kind.set(LOCAL_CRATE.as_def_id().index, DefKind::Mod);\n             record!(self.tables.def_span[LOCAL_CRATE.as_def_id()] <- tcx.def_span(LOCAL_CRATE.as_def_id()));\n-            record!(self.tables.attributes[LOCAL_CRATE.as_def_id()] <- tcx.get_attrs(LOCAL_CRATE.as_def_id()));\n+            self.encode_attrs(LOCAL_CRATE.as_def_id());\n             record!(self.tables.visibility[LOCAL_CRATE.as_def_id()] <- tcx.visibility(LOCAL_CRATE.as_def_id()));\n             if let Some(stability) = stability {\n                 record!(self.tables.lookup_stability[LOCAL_CRATE.as_def_id()] <- stability);\n@@ -1692,7 +1700,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let def_id = id.to_def_id();\n                 self.tables.opt_def_kind.set(def_id.index, DefKind::Macro(macro_kind));\n                 record!(self.tables.kind[def_id] <- EntryKind::ProcMacro(macro_kind));\n-                record!(self.tables.attributes[def_id] <- attrs);\n+                self.encode_attrs(def_id);\n                 record!(self.tables.def_keys[def_id] <- def_key);\n                 record!(self.tables.def_ident_span[def_id] <- span);\n                 record!(self.tables.def_span[def_id] <- span);"}, {"sha": "f1498665ff3853bcf92b7dde96f58a46dce7905a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -360,6 +360,7 @@ define_tables! {\n     def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, Lazy<Span>>,\n     generator_diagnostic_data: Table<DefIndex, Lazy<GeneratorDiagnosticData<'tcx>>>,\n+    may_have_doc_links: Table<DefIndex, ()>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "53fc2efe00bb79c230515dd319c9246ddca47c99", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -186,6 +186,20 @@ impl FixedSizeEncoding for Option<RawDefId> {\n     }\n }\n \n+impl FixedSizeEncoding for Option<()> {\n+    type ByteArray = [u8; 1];\n+\n+    #[inline]\n+    fn from_bytes(b: &[u8; 1]) -> Self {\n+        (b[0] != 0).then(|| ())\n+    }\n+\n+    #[inline]\n+    fn write_to_bytes(self, b: &mut [u8; 1]) {\n+        b[0] = self.is_some() as u8\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}, {"sha": "7a5156e81c4c875fbd0a5d58bb216ff0b7074b8e", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs?ref=e2d3a4f63187ed6b092b5ec4a7d8b66f897ca308", "patch": "@@ -1,7 +1,7 @@\n // normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n+// check-pass\n #![deny(warnings)]\n \n //! Email me at <hello@localhost>.\n-//~^ ERROR unknown disambiguator `hello`\n \n //! This should *not* warn: <hello@example.com>."}, {"sha": "1b07828fc6e55e4217022e220646b0d61ef530a9", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=f5ca02c334b2eaa6817c15d6e2c88ab98d2a2054", "patch": "@@ -1,16 +0,0 @@\n-error: unknown disambiguator `hello`\n-  --> $DIR/email-address-localhost.rs:4:18\n-   |\n-LL | //! Email me at <hello@localhost>.\n-   |                  ^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/email-address-localhost.rs:2:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n-\n-error: aborting due to previous error\n-"}]}