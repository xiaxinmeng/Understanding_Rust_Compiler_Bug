{"sha": "29856acffeb87541bb167c33f4fdb13c31ba6de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODU2YWNmZmViODc1NDFiYjE2N2MzM2Y0ZmRiMTNjMzFiYTZkZTA=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-05-05T15:50:44Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-07-09T15:06:53Z"}, "message": "Name the captured upvars for closures/generators in debuginfo\n\nPreviously, debuggers print closures as something like\n```\ny::main::closure-0 (0x7fffffffdd34)\n```\nThe pointer actually references to an upvar. It is not\nvery obvious, especially for beginners.\n\nIt's because upvars don't have names before, as they\nare packed into a tuple. This commit names the upvars,\nso we can expect to see something like\n```\ny::main::closure-0 {_captured_ref__b: 0x[...]}\n```", "tree": {"sha": "2bbb04127b4609350704b956985e38371cc62ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bbb04127b4609350704b956985e38371cc62ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29856acffeb87541bb167c33f4fdb13c31ba6de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29856acffeb87541bb167c33f4fdb13c31ba6de0", "html_url": "https://github.com/rust-lang/rust/commit/29856acffeb87541bb167c33f4fdb13c31ba6de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29856acffeb87541bb167c33f4fdb13c31ba6de0/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "html_url": "https://github.com/rust-lang/rust/commit/95fb1315217976ff4c268bb03c9b4132f0dfa9fd"}], "stats": {"total": 173, "additions": 165, "deletions": 8}, "files": [{"sha": "60c6bd61cd73bdea8f69cfdc3f0b272ba058bbf4", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29856acffeb87541bb167c33f4fdb13c31ba6de0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29856acffeb87541bb167c33f4fdb13c31ba6de0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=29856acffeb87541bb167c33f4fdb13c31ba6de0", "patch": "@@ -1289,14 +1289,36 @@ struct TupleMemberDescriptionFactory<'tcx> {\n \n impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions(&self, cx: &CodegenCx<'ll, 'tcx>) -> Vec<MemberDescription<'ll>> {\n+        // For closures and generators, name the captured upvars\n+        // with the help of `CapturedPlace::to_mangled_name`.\n+        let closure_def_id = match *self.ty.kind() {\n+            ty::Generator(def_id, ..) => def_id.as_local(),\n+            ty::Closure(def_id, ..) => def_id.as_local(),\n+            _ => None,\n+        };\n+        let captures = match closure_def_id {\n+            Some(local_def_id) => {\n+                let typeck_results = cx.tcx.typeck(local_def_id);\n+                let captures = typeck_results\n+                    .closure_min_captures_flattened(local_def_id.to_def_id())\n+                    .collect::<Vec<_>>();\n+                Some(captures)\n+            }\n+            _ => None,\n+        };\n+\n         let layout = cx.layout_of(self.ty);\n         self.component_types\n             .iter()\n             .enumerate()\n             .map(|(i, &component_type)| {\n                 let (size, align) = cx.size_and_align_of(component_type);\n+                let name = captures\n+                    .as_ref()\n+                    .map(|c| c[i].to_mangled_name(cx.tcx))\n+                    .unwrap_or_else(|| format!(\"__{}\", i));\n                 MemberDescription {\n-                    name: format!(\"__{}\", i),\n+                    name,\n                     type_metadata: type_metadata(cx, component_type, self.span),\n                     offset: layout.fields.offset(i),\n                     size,"}, {"sha": "0d4c635050727ce7b31f25787ee91e450b686056", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/29856acffeb87541bb167c33f4fdb13c31ba6de0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29856acffeb87541bb167c33f4fdb13c31ba6de0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=29856acffeb87541bb167c33f4fdb13c31ba6de0", "patch": "@@ -159,6 +159,54 @@ impl CapturedPlace<'tcx> {\n         place_to_string_for_capture(tcx, &self.place)\n     }\n \n+    /// Returns mangled names of captured upvars. Here are some examples:\n+    ///  - `_captured_val__name__field`\n+    ///  - `_captured_ref__name__field`\n+    ///\n+    /// The purpose is to use those names in debuginfo. They should be human-understandable.\n+    /// Without the names, the end users may get confused when the debuggers just print some\n+    /// pointers in closures or generators.\n+    pub fn to_mangled_name(&self, tcx: TyCtxt<'tcx>) -> String {\n+        let prefix = match self.info.capture_kind {\n+            ty::UpvarCapture::ByValue(_) => \"_captured_val__\",\n+            ty::UpvarCapture::ByRef(_) => \"_captured_ref__\",\n+        };\n+\n+        let hir_id = match self.place.base {\n+            HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n+            base => bug!(\"Expected an upvar, found {:?}\", base),\n+        };\n+        let name = tcx.hir().name(hir_id);\n+\n+        let mut ty = self.place.base_ty;\n+        let mut fields = String::new();\n+        for proj in self.place.projections.iter() {\n+            match proj.kind {\n+                HirProjectionKind::Field(idx, variant) => match ty.kind() {\n+                    ty::Tuple(_) => fields = format!(\"{}__{}\", fields, idx),\n+                    ty::Adt(def, ..) => {\n+                        fields = format!(\n+                            \"{}__{}\",\n+                            fields,\n+                            def.variants[variant].fields[idx as usize].ident.name.as_str(),\n+                        );\n+                    }\n+                    ty => {\n+                        bug!(\"Unexpected type {:?} for `Field` projection\", ty)\n+                    }\n+                },\n+\n+                // Ignore derefs for now, as they are likely caused by\n+                // autoderefs that don't appear in the original code.\n+                HirProjectionKind::Deref => {}\n+                proj => bug!(\"Unexpected projection {:?} in captured place\", proj),\n+            }\n+            ty = proj.ty;\n+        }\n+\n+        prefix.to_owned() + &name.to_string() + &fields\n+    }\n+\n     /// Returns the hir-id of the root variable for the captured place.\n     /// e.g., if `a.b.c` was captured, would return the hir-id for `a`.\n     pub fn get_root_variable(&self) -> hir::HirId {"}, {"sha": "5489fa1472060d5eb0bc1d933f1d414ae41401e3", "filename": "src/test/debuginfo/captured-fields.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fcaptured-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fcaptured-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields.rs?ref=29856acffeb87541bb167c33f4fdb13c31ba6de0", "patch": "@@ -0,0 +1,87 @@\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print test\n+// gdbr-check:$1 = captured_fields::main::{closure#0} {_captured_ref__my_ref__my_field1: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$2 = captured_fields::main::{closure#1} {_captured_ref__my_ref__my_field2: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$3 = captured_fields::main::{closure#2} {_captured_ref__my_ref: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$4 = captured_fields::main::{closure#3} {_captured_val__my_ref: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$5 = captured_fields::main::{closure#4} {_captured_val__my_var: captured_fields::MyStruct {my_field1: 11, my_field2: 22}}\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print test\n+// lldbg-check:(captured_fields::main::{closure#0}) $0 = { _captured_ref__my_ref__my_field1 = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields::main::{closure#1}) $1 = { _captured_ref__my_ref__my_field2 = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields::main::{closure#2}) $2 = { _captured_ref__my_ref = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields::main::{closure#3}) $3 = { _captured_val__my_ref = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields::main::{closure#4}) $4 = { _captured_val__my_var = { my_field1 = 11 my_field2 = 22 } }\n+// lldb-command:continue\n+\n+#![feature(capture_disjoint_fields)]\n+#![allow(unused)]\n+\n+struct MyStruct {\n+    my_field1: u32,\n+    my_field2: u32,\n+}\n+\n+fn main() {\n+    let mut my_var = MyStruct {\n+        my_field1: 11,\n+        my_field2: 22,\n+    };\n+    let my_ref = &mut my_var;\n+\n+    let test = || {\n+        let a = &mut my_ref.my_field1;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = &my_ref.my_field2;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = &my_ref;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = my_ref;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = my_var;\n+    };\n+\n+    _zzz(); // #break\n+}\n+\n+fn _zzz() {}"}, {"sha": "46a3d7924a1de60ffd397704ea0b4ec603e0243e", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=29856acffeb87541bb167c33f4fdb13c31ba6de0", "patch": "@@ -11,16 +11,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed(0x[...])\n+// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed{_captured_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, __0: 0x[...]}\n+// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, _captured_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, __0: 0x[...]}\n+// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, _captured_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::{generator#0}::Returned(0x[...])\n+// gdb-check:$4 = generator_objects::main::{generator#0}::Returned{_captured_ref__a: 0x[...]}\n \n // === LLDB TESTS ==================================================================================\n "}, {"sha": "22d55ae989fb180ff19e2c8cc63c4dc85c3e7a37", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29856acffeb87541bb167c33f4fdb13c31ba6de0/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=29856acffeb87541bb167c33f4fdb13c31ba6de0", "patch": "@@ -11,17 +11,17 @@\n // gdb-command:run\n \n // gdb-command:print g\n-// gdb-check:$1 = issue_57822::main::{closure#1} (issue_57822::main::{closure#0} (1))\n+// gdb-check:$1 = issue_57822::main::{closure#1} {_captured_val__f: issue_57822::main::{closure#0} {_captured_val__x: 1}}\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed(issue_57822::main::{generator#2}::Unresumed(2))\n+// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed{_captured_val__a: issue_57822::main::{generator#2}::Unresumed{_captured_val__y: 2}}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::{closure#1}) $0 = { 0 = { 0 = 1 } }\n+// lldbg-check:(issue_57822::main::{closure#1}) $0 = { _captured_val__f = { _captured_val__x = 1 } }\n \n // lldb-command:print b\n // lldbg-check:(issue_57822::main::{generator#3}) $1 ="}]}