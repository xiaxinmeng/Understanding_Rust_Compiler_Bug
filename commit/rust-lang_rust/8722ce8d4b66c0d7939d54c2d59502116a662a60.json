{"sha": "8722ce8d4b66c0d7939d54c2d59502116a662a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjJjZThkNGI2NmMwZDc5MzlkNTRjMmQ1OTUwMjExNmE2NjJhNjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-29T13:40:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T13:40:06Z"}, "message": "Merge pull request #223 from oli-obk/lvalue_read\n\nReinstate `eval_and_read_lvalue` optimizations", "tree": {"sha": "56081d1e1e503962bc1e20654a518a9e94bda08f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56081d1e1e503962bc1e20654a518a9e94bda08f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8722ce8d4b66c0d7939d54c2d59502116a662a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8722ce8d4b66c0d7939d54c2d59502116a662a60", "html_url": "https://github.com/rust-lang/rust/commit/8722ce8d4b66c0d7939d54c2d59502116a662a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8722ce8d4b66c0d7939d54c2d59502116a662a60/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a560834b9ac5f8ed67757c4f9f088968a387e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a560834b9ac5f8ed67757c4f9f088968a387e7d", "html_url": "https://github.com/rust-lang/rust/commit/4a560834b9ac5f8ed67757c4f9f088968a387e7d"}, {"sha": "917c89e6973ec7ea60896cb89ca298d636537ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/917c89e6973ec7ea60896cb89ca298d636537ce9", "html_url": "https://github.com/rust-lang/rust/commit/917c89e6973ec7ea60896cb89ca298d636537ce9"}], "stats": {"total": 109, "additions": 102, "deletions": 7}, "files": [{"sha": "f827784629d0f3d7e1a529ceb1657a68859baa9d", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=8722ce8d4b66c0d7939d54c2d59502116a662a60", "patch": "@@ -65,6 +65,7 @@ pub enum EvalError<'tcx> {\n     Panic,\n     NeedsRfc(String),\n     NotConst(String),\n+    ReadFromReturnPointer,\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n@@ -162,6 +163,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"this feature needs an rfc before being allowed inside constants\",\n             EvalError::NotConst(_) =>\n                 \"this feature is not compatible with constant evaluation\",\n+            EvalError::ReadFromReturnPointer =>\n+                \"tried to read from the return pointer\",\n         }\n     }\n "}, {"sha": "630f878f72328ca97e7e29016bb992ab0ee15b33", "filename": "src/eval_context.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=8722ce8d4b66c0d7939d54c2d59502116a662a60", "patch": "@@ -821,7 +821,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n+    pub(super) fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n             ty::TyRawPtr(ref tam) |\n             ty::TyRef(_, ref tam) => !self.type_is_sized(tam.ty),\n@@ -882,6 +882,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n         match ty.sty {\n             ty::TyAdt(adt_def, _) if adt_def.is_box() => self.get_fat_field(ty.boxed_ty(), field_index),\n+            ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n+                use rustc::ty::layout::Layout::*;\n+                match *self.type_layout(ty)? {\n+                    RawNullablePointer { nndiscr, .. } |\n+                    StructWrappedNullablePointer { nndiscr, .. } => Ok(adt_def.variants[nndiscr as usize].fields[field_index].ty(self.tcx, substs)),\n+                    _ => Err(EvalError::Unimplemented(format!(\"get_field_ty can't handle enum type: {:?}, {:?}\", ty, ty.sty))),\n+                }\n+            }\n             ty::TyAdt(adt_def, substs) => {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n@@ -890,6 +898,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             ty::TyRef(_, ref tam) |\n             ty::TyRawPtr(ref tam) => self.get_fat_field(tam.ty, field_index),\n+\n+            ty::TyArray(ref inner, _) => Ok(inner),\n+\n             _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, {:?}\", ty, ty.sty))),\n         }\n     }\n@@ -916,14 +927,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn get_field_count(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, usize> {\n+    pub fn get_field_count(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, u64> {\n         let layout = self.type_layout(ty)?;\n \n         use rustc::ty::layout::Layout::*;\n         match *layout {\n-            Univariant { ref variant, .. } => Ok(variant.offsets.len()),\n+            Univariant { ref variant, .. } => Ok(variant.offsets.len() as u64),\n             FatPointer { .. } => Ok(2),\n-            StructWrappedNullablePointer { ref nonnull, .. } => Ok(nonnull.offsets.len()),\n+            StructWrappedNullablePointer { ref nonnull, .. } => Ok(nonnull.offsets.len() as u64),\n+            Vector { count , .. } |\n+            Array { count, .. } => Ok(count),\n+            Scalar { .. } => Ok(0),\n             _ => {\n                 let msg = format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout);\n                 Err(EvalError::Unimplemented(msg))"}, {"sha": "d2d54b3d90297bc2fab5f4698af1023ad9d08e8c", "filename": "src/lvalue.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=8722ce8d4b66c0d7939d54c2d59502116a662a60", "patch": "@@ -126,8 +126,63 @@ impl<'tcx> Global<'tcx> {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n+    /// Reads a value from the lvalue without going through the intermediate step of obtaining\n+    /// a `miri::Lvalue`\n+    pub fn try_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n+        use rustc::mir::Lvalue::*;\n+        match *lvalue {\n+            // Might allow this in the future, right now there's no way to do this from Rust code anyway\n+            Local(mir::RETURN_POINTER) => Err(EvalError::ReadFromReturnPointer),\n+            // Directly reading a local will always succeed\n+            Local(local) => self.frame().get_local(local).map(Some),\n+            // Directly reading a static will always succeed\n+            Static(ref static_) => {\n+                let instance = ty::Instance::mono(self.tcx, static_.def_id);\n+                let cid = GlobalId { instance, promoted: None };\n+                Ok(Some(self.globals.get(&cid).expect(\"global not cached\").value))\n+            },\n+            Projection(ref proj) => self.try_read_lvalue_projection(proj),\n+        }\n+    }\n+\n+    fn try_read_lvalue_projection(&mut self, proj: &mir::LvalueProjection<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n+        use rustc::mir::ProjectionElem::*;\n+        let base = match self.try_read_lvalue(&proj.base)? {\n+            Some(base) => base,\n+            None => return Ok(None),\n+        };\n+        let base_ty = self.lvalue_ty(&proj.base);\n+        match proj.elem {\n+            Field(field, _) => match (field.index(), base) {\n+                // the only field of a struct\n+                (0, Value::ByVal(val)) => Ok(Some(Value::ByVal(val))),\n+                // split fat pointers, 2 element tuples, ...\n+                (0...1, Value::ByValPair(a, b)) if self.get_field_count(base_ty)? == 2 => {\n+                    let val = [a, b][field.index()];\n+                    Ok(Some(Value::ByVal(val)))\n+                },\n+                // the only field of a struct is a fat pointer\n+                (0, Value::ByValPair(..)) => Ok(Some(base)),\n+                _ => Ok(None),\n+            },\n+            // The NullablePointer cases should work fine, need to take care for normal enums\n+            Downcast(..) |\n+            Subslice { .. } |\n+            // reading index 0 or index 1 from a ByVal or ByVal pair could be optimized\n+            ConstantIndex { .. } | Index(_) |\n+            // No way to optimize this projection any better than the normal lvalue path\n+            Deref => Ok(None),\n+        }\n+    }\n+\n     pub(super) fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n         let ty = self.lvalue_ty(lvalue);\n+        // Shortcut for things like accessing a fat pointer's field,\n+        // which would otherwise (in the `eval_lvalue` path) require moving a `ByValPair` to memory\n+        // and returning an `Lvalue::Ptr` to it\n+        if let Some(val) = self.try_read_lvalue(lvalue)? {\n+            return Ok(val);\n+        }\n         let lvalue = self.eval_lvalue(lvalue)?;\n \n         if ty.is_never() {\n@@ -233,7 +288,30 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n         };\n \n-        let (base_ptr, base_extra) = self.force_allocation(base)?.to_ptr_and_extra();\n+        // Do not allocate in trivial cases\n+        let (base_ptr, base_extra) = match base {\n+            Lvalue::Ptr { ptr, extra } => (ptr, extra),\n+            Lvalue::Local { frame, local } => match self.stack[frame].get_local(local)? {\n+                // in case the type has a single field, just return the value\n+                Value::ByVal(_) if self.get_field_count(base_ty).map(|c| c == 1).unwrap_or(false) => {\n+                    assert_eq!(offset.bytes(), 0, \"ByVal can only have 1 non zst field with offset 0\");\n+                    return Ok(base);\n+                },\n+                Value::ByRef(_) |\n+                Value::ByValPair(..) |\n+                Value::ByVal(_) => self.force_allocation(base)?.to_ptr_and_extra(),\n+            },\n+            Lvalue::Global(cid) => match self.globals.get(&cid).expect(\"uncached global\").value {\n+                // in case the type has a single field, just return the value\n+                Value::ByVal(_) if self.get_field_count(base_ty).map(|c| c == 1).unwrap_or(false) => {\n+                    assert_eq!(offset.bytes(), 0, \"ByVal can only have 1 non zst field with offset 0\");\n+                    return Ok(base);\n+                },\n+                Value::ByRef(_) |\n+                Value::ByValPair(..) |\n+                Value::ByVal(_) => self.force_allocation(base)?.to_ptr_and_extra(),\n+            },\n+        };\n \n         let offset = match base_extra {\n             LvalueExtra::Vtable(tab) => {"}, {"sha": "638a8d2ff27c807e7f343fcf2a7d029994301d46", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=8722ce8d4b66c0d7939d54c2d59502116a662a60", "patch": "@@ -772,7 +772,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     4 => !0u32 as u128,\n                     8 => !0u64 as u128,\n                     16 => !0,\n-                    _ => bug!(\"unexpected PrimVal::Bytes size\"),\n+                    n => bug!(\"unexpected PrimVal::Bytes size: {}\", n),\n                 };\n                 self.write_uint(dest.to_ptr()?, bytes & mask, size)\n             }"}, {"sha": "90278d63e7f1cd68a7f75b1948aacc06581ee2a9", "filename": "src/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8722ce8d4b66c0d7939d54c2d59502116a662a60/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=8722ce8d4b66c0d7939d54c2d59502116a662a60", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx: 'a> Value {\n                 assert_eq!(len as u64 as u128, len);\n                 Ok((ptr, len as u64))\n             },\n-            _ => unimplemented!(),\n+            ByVal(_) => unimplemented!(),\n         }\n     }\n }"}]}