{"sha": "58b3923ad377e79a0517ec15a672e3f8f90b10b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjM5MjNhZDM3N2U3OWEwNTE3ZWMxNWE2NzJlM2Y4ZjkwYjEwYjQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:23:24Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from rustc_span", "tree": {"sha": "2761dbededaa987f8be3582ec2131e067781610d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2761dbededaa987f8be3582ec2131e067781610d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b3923ad377e79a0517ec15a672e3f8f90b10b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b3923ad377e79a0517ec15a672e3f8f90b10b4", "html_url": "https://github.com/rust-lang/rust/commit/58b3923ad377e79a0517ec15a672e3f8f90b10b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b3923ad377e79a0517ec15a672e3f8f90b10b4/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338fad21621638ed93e4f6cb05c55105b617af71", "url": "https://api.github.com/repos/rust-lang/rust/commits/338fad21621638ed93e4f6cb05c55105b617af71", "html_url": "https://github.com/rust-lang/rust/commit/338fad21621638ed93e4f6cb05c55105b617af71"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "31f3d8e3791098c434c4711a4ed554239d652e0a", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=58b3923ad377e79a0517ec15a672e3f8f90b10b4", "patch": "@@ -619,14 +619,6 @@ impl SyntaxContext {\n         HygieneData::with(|data| data.outer_mark(self))\n     }\n \n-    #[inline]\n-    pub fn outer_mark_with_data(self) -> (ExpnId, Transparency, ExpnData) {\n-        HygieneData::with(|data| {\n-            let (expn_id, transparency) = data.outer_mark(self);\n-            (expn_id, transparency, data.expn_data(expn_id).clone())\n-        })\n-    }\n-\n     pub fn dollar_crate_name(self) -> Symbol {\n         HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)\n     }"}, {"sha": "d036c078049909d978628388589673bf56b28d25", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=58b3923ad377e79a0517ec15a672e3f8f90b10b4", "patch": "@@ -223,12 +223,6 @@ impl FileName {\n         }\n     }\n \n-    pub fn quote_expansion_source_code(src: &str) -> FileName {\n-        let mut hasher = StableHasher::new();\n-        src.hash(&mut hasher);\n-        FileName::QuoteExpansion(hasher.finish())\n-    }\n-\n     pub fn macro_expansion_source_code(src: &str) -> FileName {\n         let mut hasher = StableHasher::new();\n         src.hash(&mut hasher);"}, {"sha": "3b929c4acb902a99fb2c39d91dc728be3a33f2ae", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b3923ad377e79a0517ec15a672e3f8f90b10b4/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=58b3923ad377e79a0517ec15a672e3f8f90b10b4", "patch": "@@ -451,15 +451,6 @@ impl SourceMap {\n         }\n     }\n \n-    /// Returns a new `Span` covering the start and end `BytePos`s of the file containing the given\n-    /// `pos`. This can be used to quickly determine if another `BytePos` or `Span` is from the same\n-    /// file.\n-    pub fn lookup_file_span(&self, pos: BytePos) -> Span {\n-        let idx = self.lookup_source_file_idx(pos);\n-        let SourceFile { start_pos, end_pos, .. } = *(*self.files.borrow().source_files)[idx];\n-        Span::with_root_ctxt(start_pos, end_pos)\n-    }\n-\n     /// Returns `Some(span)`, a union of the LHS and RHS span. The LHS must precede the RHS. If\n     /// there are gaps between LHS and RHS, the resulting union will cross these gaps.\n     /// For this to work,"}]}