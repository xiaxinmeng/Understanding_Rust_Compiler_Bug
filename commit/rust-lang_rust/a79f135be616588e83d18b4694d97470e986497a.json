{"sha": "a79f135be616588e83d18b4694d97470e986497a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWYxMzViZTYxNjU4OGU4M2QxOGI0Njk0ZDk3NDcwZTk4NjQ5N2E=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-25T18:17:38Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:43Z"}, "message": "Update test expectations for new placeholder error messages", "tree": {"sha": "5c680781d4e3b4ee4384025f9f355e82e6c62e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c680781d4e3b4ee4384025f9f355e82e6c62e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79f135be616588e83d18b4694d97470e986497a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79f135be616588e83d18b4694d97470e986497a", "html_url": "https://github.com/rust-lang/rust/commit/a79f135be616588e83d18b4694d97470e986497a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79f135be616588e83d18b4694d97470e986497a/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce61b1b9fac1d175e13a5f21ffe93cd76dd64481", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce61b1b9fac1d175e13a5f21ffe93cd76dd64481", "html_url": "https://github.com/rust-lang/rust/commit/ce61b1b9fac1d175e13a5f21ffe93cd76dd64481"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "0e471a78d9ed8490069cf3407c42b5af314350d9", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -41,8 +41,8 @@ LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_one`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>` for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` only implements `TheTrait<(&'2 isize, &'2 isize)>` for some lifetime `'2`\n+   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n+   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n@@ -51,8 +51,8 @@ LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_two`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>` for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` only implements `TheTrait<(&'2 isize, &'2 isize)>` for some lifetime `'2`\n+   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n+   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:105:5\n@@ -61,8 +61,8 @@ LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_four`,\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>` for any two lifetimes `'0` and `'1`\n-   = note: but `Tuple` only implements `TheTrait<(&'2 isize, &'2 isize)>` for some lifetime `'2`\n+   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n+   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "69fa1ce30aa8f6c03c2871bdbdb8debf25d837cb", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -1,12 +1,12 @@\n-error[E0308]: mismatched types\n+error: implementation of `Mirror` is not general enough\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ one type is more general than the other\n+   |     ^^^\n    |\n-   = note: expected type `Mirror`\n-              found type `Mirror`\n+   = note: Due to a where-clause on `foo`,\n+   = note: `Mirror` would have to be implemented for the type `&'0 ()`, for any lifetime `'0`\n+   = note: but `Mirror` is actually implemented for the type `&'1 ()`, for the specific lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c5c8451a5a9db7453c3092cabc05ce6b68b2c08c", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -3,7 +3,7 @@ error: compilation successful\n    |\n LL | / fn main() { //[good]~ ERROR compilation successful\n LL | |     foo(());\n-LL | |     //[bad]~^ ERROR E0308\n+LL | |     //[bad]~^ ERROR not general enough\n LL | | }\n    | |_^\n "}, {"sha": "680a7bbc50e5eb89e0d7e1d5aa8d59ca6ef17a3a", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -4,17 +4,17 @@ error: implementation of `Foo` is not general enough\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n-   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo` for any lifetime `'0`\n-   = note: but `&'1 OnlyFooIfStaticRef` only implements `Foo` for the lifetime `'1`\n+   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`\n+   = note: but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for the specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:48:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n-   = note: `A<'0, '1>` must implement `Foo` for any two lifetimes `'0` and `'1`\n-   = note: but `A<'_, '2>` only implements `Foo` for the lifetime `'2`\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`\n+   = note: but `Foo` is actually implemented for the type `A<'_, '2>`, for the specific lifetime `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1aa0a7ca32bd1f23e8013ecaadc3c0def109d976", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -4,8 +4,8 @@ error: implementation of `Deserialize` is not general enough\n LL |     assert_deserialize_owned::<&'static str>(); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'static str` must implement `Deserialize<'0>` for any lifetime `'0`\n-   = note: but `&str` only implements `Deserialize<'1>` for some lifetime `'1`\n+   = note: `Deserialize<'0>` would have to be implemented for the type `&'static str`, for any lifetime `'0`\n+   = note: but `Deserialize<'1>` is actually implemented for the type `&str`, for some lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "4c4f797988049082424cb824010067427ba29789", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -5,8 +5,8 @@ LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `want_foo2`,\n-   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>` for any two lifetimes `'0` and `'1`\n-   = note: but `SomeStruct` only implements `Foo<(&'2 isize, &'2 isize)>` for some lifetime `'2`\n+   = note: `Foo<(&'0 isize, &'1 isize)>` would have to be implemented for the type `SomeStruct`, for any two lifetimes `'0` and `'1`\n+   = note: but `Foo<(&'2 isize, &'2 isize)>` is actually implemented for the type `SomeStruct`, for some lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "916a524939b6b51201b0ea9832f184fc5f973ef5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -5,8 +5,8 @@ LL |     foo::<()>(); //~ ERROR not general enough\n    |     ^^^^^^^^^\n    |\n    = note: Due to a where-clause on `foo`,\n-   = note: `()` must implement `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n-   = note: but `()` only implements `Trait<fn(std::cell::Cell<&'0 u32>)>` for some lifetime `'0`\n+   = note: `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` would have to be implemented for the type `()`\n+   = note: but `Trait<fn(std::cell::Cell<&'0 u32>)>` is actually implemented for the type `()`, for some lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "bd6e3dbebd2f5c1cf09305080b0da12a909560a9", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -5,8 +5,8 @@ LL |     want_hrtb::<StaticInt>() //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n-   = note: `StaticInt` must implement `Foo<&'0 isize>` for any lifetime `'0`\n-   = note: but `StaticInt` only implements `Foo<&'1 isize>` for some lifetime `'1`\n+   = note: `Foo<&'0 isize>` would have to be implemented for the type `StaticInt`, for any lifetime `'0`\n+   = note: but `Foo<&'1 isize>` is actually implemented for the type `StaticInt`, for some lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n@@ -15,8 +15,8 @@ LL |     want_hrtb::<&'a u32>() //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n-   = note: `&'a u32` must implement `Foo<&'0 isize>` for any lifetime `'0`\n-   = note: but `&'1 u32` only implements `Foo<&'1 isize>` for the lifetime `'1`\n+   = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`\n+   = note: but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b71a8a800e50d67f8cdeec32318fdc1fb119011", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -1,12 +1,12 @@\n-error[E0308]: mismatched types\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n-LL |     foo_hrtb_bar_not(&mut t); //~ ERROR E0308\n-   |     ^^^^^^^^^^^^^^^^ one type is more general than the other\n+LL |     foo_hrtb_bar_not(&mut t); //~ ERROR not general enough\n+   |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: expected type `Foo<&'a isize>`\n-              found type `Foo<&isize>`\n+   = note: Due to a where-clause on `foo_hrtb_bar_not`,\n+   = note: `Foo<&'0 isize>` would have to be implemented for the type `&mut T`, for any lifetime `'0`\n+   = note: but `Foo<&'1 isize>` is actually implemented for the type `&mut T`, for some lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "377bac3b24524055cae5b3fd13d9242ac5957e5d", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -4,35 +4,35 @@ error: implementation of `Foo` is not general enough\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'0 u32` must implement `Foo<'static, u32>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n+   = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n+   = note: but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'0 i32` must implement `Foo<'static, i32>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n+   = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`\n+   = note: but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for the specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'0 u64` must implement `Foo<'static, u64>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n+   = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`\n+   = note: but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for the specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'0 i64` must implement `Foo<'static, i64>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n+   = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`\n+   = note: but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for the specific lifetime `'1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ddf0414faf63f727826b7b4f9a8af292bdd2b3eb", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -4,8 +4,8 @@ error: implementation of `Deserialize` is not general enough\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `&'static str` must implement `Deserialize<'0>` for any lifetime `'0`\n-   = note: but `&str` only implements `Deserialize<'1>` for some lifetime `'1`\n+   = note: `Deserialize<'0>` would have to be implemented for the type `&'static str`, for any lifetime `'0`\n+   = note: but `Deserialize<'1>` is actually implemented for the type `&str`, for some lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "4d827e6ce4fd65fa5eb77c1f41a239037707392b", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79f135be616588e83d18b4694d97470e986497a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=a79f135be616588e83d18b4694d97470e986497a", "patch": "@@ -5,8 +5,8 @@ LL |     foo(&X); //~ ERROR implementation of `Bar` is not general enough\n    |     ^^^\n    |\n    = note: Due to a where-clause on `foo`,\n-   = note: `&'0 _` must implement `Bar` for any lifetime `'0`\n-   = note: but `&'1 u32` only implements `Bar` for the lifetime `'1`\n+   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n+   = note: but `Bar` is actually implemented for the type `&'1 u32`, for the specific lifetime `'1`\n \n error: aborting due to previous error\n "}]}