{"sha": "a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "node_id": "C_kwDOAAsO6NoAKGE3YmI4Yzc4NTE3MTAyZTM3NWQ0ZDA0ZTViMmNhYzRmMTIxYzU2ZTU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2023-04-21T13:33:04Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2023-04-28T15:47:55Z"}, "message": "handle cfg(bootstrap)", "tree": {"sha": "fc36d3dfa885acdeb87d188dca16143ef538db3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc36d3dfa885acdeb87d188dca16143ef538db3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "html_url": "https://github.com/rust-lang/rust/commit/a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d64f46a553e5a1583680919807884794c93e63e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64f46a553e5a1583680919807884794c93e63e8", "html_url": "https://github.com/rust-lang/rust/commit/d64f46a553e5a1583680919807884794c93e63e8"}], "stats": {"total": 616, "additions": 101, "deletions": 515}, "files": [{"sha": "e193332f155be3ff1e9691ea73ea7ad18e540d7a", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -303,7 +303,6 @@ impl<'a> Arguments<'a> {\n \n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n-    #[cfg(not(bootstrap))]\n     #[inline]\n     pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {\n         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n@@ -312,16 +311,6 @@ impl<'a> Arguments<'a> {\n         Arguments { pieces, fmt: None, args }\n     }\n \n-    #[cfg(bootstrap)]\n-    #[inline]\n-    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n-    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {\n-        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n-            panic!(\"invalid args\");\n-        }\n-        Arguments { pieces, fmt: None, args }\n-    }\n-\n     /// This function is used to specify nonstandard formatting parameters.\n     ///\n     /// An `rt::UnsafeArg` is required because the following invariants must be held"}, {"sha": "7a8d0cacdece5e83de80b9001b463186375b26a5", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -70,7 +70,6 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n-#[cfg_attr(bootstrap, lang = \"identity_future\")]\n pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n     f\n }"}, {"sha": "79bd0bbb0c19dcbe4c2b4b21f7e144a3dc628038", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -1823,14 +1823,12 @@ extern \"rust-intrinsic\" {\n     /// with an even least significant digit.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn roundevenf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n     /// with an even least significant digit.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn roundevenf64(x: f64) -> f64;\n \n@@ -2262,7 +2260,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the argument is a local without\n     /// projections (`read_via_copy(p)`, not `read_via_copy(*p)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(p: *const T) -> T;\n@@ -2470,7 +2467,6 @@ extern \"rust-intrinsic\" {\n     /// This method creates a pointer to any `Some` value. If the argument is\n     /// `None`, an invalid within-bounds pointer (that is still acceptable for\n     /// constructing an empty slice) is returned.\n-    #[cfg(not(bootstrap))]\n     #[rustc_nounwind]\n     pub fn option_payload_ptr<T>(arg: *const Option<T>) -> *const T;\n }"}, {"sha": "40789cb3049de37d375f66531c7e79237817c091", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -929,7 +929,6 @@ mod copy_impls {\n     reason = \"internal trait for implementing various traits for all function pointers\"\n )]\n #[lang = \"fn_ptr_trait\"]\n-#[cfg(not(bootstrap))]\n #[rustc_deny_explicit_impl]\n pub trait FnPtr: Copy + Clone {\n     /// Returns the address of the function pointer."}, {"sha": "73ffc3f36ca75e50116eebca03384cb515e59b5f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -558,7 +558,7 @@ use crate::{\n /// The `Option` type. See [the module level documentation](self) for more.\n #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]\n #[rustc_diagnostic_item = \"Option\"]\n-#[cfg_attr(not(bootstrap), lang = \"Option\")]\n+#[lang = \"Option\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value.\n@@ -765,13 +765,6 @@ impl<T> Option<T> {\n     #[must_use]\n     #[unstable(feature = \"option_as_slice\", issue = \"108545\")]\n     pub fn as_slice(&self) -> &[T] {\n-        #[cfg(bootstrap)]\n-        match self {\n-            Some(value) => slice::from_ref(value),\n-            None => &[],\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n         // to the payload, with a length of 1, so this is equivalent to\n         // `slice::from_ref`, and thus is safe.\n@@ -832,13 +825,6 @@ impl<T> Option<T> {\n     #[must_use]\n     #[unstable(feature = \"option_as_slice\", issue = \"108545\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n-        #[cfg(bootstrap)]\n-        match self {\n-            Some(value) => slice::from_mut(value),\n-            None => &mut [],\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         // SAFETY: When the `Option` is `Some`, we're using the actual pointer\n         // to the payload, with a length of 1, so this is equivalent to\n         // `slice::from_mut`, and thus is safe."}, {"sha": "81be3fb22eec4c642821cecfd1d37f1e11db5b88", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -165,7 +165,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]\n-#[cfg_attr(not(bootstrap), lang = \"panic_misaligned_pointer_dereference\")] // needed by codegen for panic on misaligned pointer deref\n+#[lang = \"panic_misaligned_pointer_dereference\"] // needed by codegen for panic on misaligned pointer deref\n fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()"}, {"sha": "08ffc407eadb1e0e4a6531004ab67592208b2f34", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -1,8 +1,7 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -64,8 +63,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n+#[rustc_doc_primitive = \"never\"]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -276,8 +274,7 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -401,8 +398,7 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -464,8 +460,7 @@ impl Copy for () {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -581,8 +576,7 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n+#[rustc_doc_primitive = \"array\"]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -783,8 +777,7 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -876,8 +869,7 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n+#[rustc_doc_primitive = \"str\"]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -944,8 +936,7 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1088,8 +1079,7 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n+#[rustc_doc_primitive = \"f32\"]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1155,8 +1145,7 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n+#[rustc_doc_primitive = \"f64\"]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1171,78 +1160,67 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n+#[rustc_doc_primitive = \"i8\"]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n+#[rustc_doc_primitive = \"i64\"]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n+#[rustc_doc_primitive = \"i128\"]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n+#[rustc_doc_primitive = \"u16\"]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n+#[rustc_doc_primitive = \"u32\"]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n+#[rustc_doc_primitive = \"u64\"]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n+#[rustc_doc_primitive = \"u128\"]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n+#[rustc_doc_primitive = \"isize\"]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1252,8 +1230,7 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1263,8 +1240,7 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1396,8 +1372,7 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n+#[rustc_doc_primitive = \"fn\"]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "13e546497f27d649a8f1fb749f1e09eda7f931ae", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 36, "deletions": 207, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -374,6 +374,7 @@ use crate::hash;\n use crate::intrinsics::{\n     self, assert_unsafe_precondition, is_aligned_and_not_null, is_nonoverlapping,\n };\n+use crate::marker::FnPtr;\n \n use crate::mem::{self, MaybeUninit};\n \n@@ -1167,26 +1168,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n             \"ptr::read requires that the pointer argument is aligned and non-null\",\n             [T](src: *const T) => is_aligned_and_not_null(src)\n         );\n-\n-        #[cfg(bootstrap)]\n-        {\n-            // We are calling the intrinsics directly to avoid function calls in the\n-            // generated code as `intrinsics::copy_nonoverlapping` is a wrapper function.\n-            extern \"rust-intrinsic\" {\n-                #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n-                fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-            }\n-\n-            // `src` cannot overlap `tmp` because `tmp` was just allocated on\n-            // the stack as a separate allocated object.\n-            let mut tmp = MaybeUninit::<T>::uninit();\n-            copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-            tmp.assume_init()\n-        }\n-        #[cfg(not(bootstrap))]\n-        {\n-            crate::intrinsics::read_via_copy(src)\n-        }\n+        crate::intrinsics::read_via_copy(src)\n     }\n }\n \n@@ -1897,205 +1879,52 @@ pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n     hashee.hash(into);\n }\n \n-#[cfg(bootstrap)]\n-mod old_fn_ptr_impl {\n-    use super::*;\n-    // If this is a unary fn pointer, it adds a doc comment.\n-    // Otherwise, it hides the docs entirely.\n-    macro_rules! maybe_fnptr_doc {\n-        (@ #[$meta:meta] $item:item) => {\n-            #[doc(hidden)]\n-            #[$meta]\n-            $item\n-        };\n-        ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[doc(fake_variadic)]\n-            #[doc = \"This trait is implemented for function pointers with up to twelve arguments.\"]\n-            #[$meta]\n-            $item\n-        };\n-        ($a:ident $($rest_a:ident)+ @ #[$meta:meta] $item:item) => {\n-            #[doc(hidden)]\n-            #[$meta]\n-            $item\n-        };\n-    }\n-\n-    // FIXME(strict_provenance_magic): function pointers have buggy codegen that\n-    // necessitates casting to a usize to get the backend to do the right thing.\n-    // for now I will break AVR to silence *a billion* lints. We should probably\n-    // have a proper \"opaque function pointer type\" to handle this kind of thing.\n-\n-    // Impls for function pointers\n-    macro_rules! fnptr_impls_safety_abi {\n-        ($FnTy: ty, $($Arg: ident),*) => {\n-        fnptr_impls_safety_abi! { #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")] $FnTy, $($Arg),* }\n-    };\n-    (@c_unwind $FnTy: ty, $($Arg: ident),*) => {\n-        fnptr_impls_safety_abi! { #[unstable(feature = \"c_unwind\", issue = \"74990\")] $FnTy, $($Arg),* }\n-    };\n-    (#[$meta:meta] $FnTy: ty, $($Arg: ident),*) => {\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> PartialEq for $FnTy {\n-                    #[inline]\n-                    fn eq(&self, other: &Self) -> bool {\n-                        *self as usize == *other as usize\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> Eq for $FnTy {}\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n-                    #[inline]\n-                    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-                        (*self as usize).partial_cmp(&(*other as usize))\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> Ord for $FnTy {\n-                    #[inline]\n-                    fn cmp(&self, other: &Self) -> Ordering {\n-                        (*self as usize).cmp(&(*other as usize))\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n-                    fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n-                        state.write_usize(*self as usize)\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n-                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        fmt::pointer_fmt_inner(*self as usize, f)\n-                    }\n-                }\n-            }\n-\n-            maybe_fnptr_doc! {\n-                $($Arg)* @\n-                #[$meta]\n-                impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n-                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        fmt::pointer_fmt_inner(*self as usize, f)\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    macro_rules! fnptr_impls_args {\n-        ($($Arg: ident),+) => {\n-            fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        };\n-        () => {\n-            // No variadic functions with 0 parameters\n-            fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n-            fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn() -> Ret, }\n-        };\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> PartialEq for F {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.addr() == other.addr()\n     }\n-\n-    fnptr_impls_args! {}\n-    fnptr_impls_args! { T }\n-    fnptr_impls_args! { A, B }\n-    fnptr_impls_args! { A, B, C }\n-    fnptr_impls_args! { A, B, C, D }\n-    fnptr_impls_args! { A, B, C, D, E }\n-    fnptr_impls_args! { A, B, C, D, E, F }\n-    fnptr_impls_args! { A, B, C, D, E, F, G }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K }\n-    fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> Eq for F {}\n \n-#[cfg(not(bootstrap))]\n-mod new_fn_ptr_impl {\n-    use super::*;\n-    use crate::marker::FnPtr;\n-\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> PartialEq for F {\n-        #[inline]\n-        fn eq(&self, other: &Self) -> bool {\n-            self.addr() == other.addr()\n-        }\n-    }\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> Eq for F {}\n-\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> PartialOrd for F {\n-        #[inline]\n-        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-            self.addr().partial_cmp(&other.addr())\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> PartialOrd for F {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        self.addr().partial_cmp(&other.addr())\n     }\n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> Ord for F {\n-        #[inline]\n-        fn cmp(&self, other: &Self) -> Ordering {\n-            self.addr().cmp(&other.addr())\n-        }\n+}\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> Ord for F {\n+    #[inline]\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.addr().cmp(&other.addr())\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> hash::Hash for F {\n-        fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n-            state.write_usize(self.addr() as _)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> hash::Hash for F {\n+    fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n+        state.write_usize(self.addr() as _)\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> fmt::Pointer for F {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            fmt::pointer_fmt_inner(self.addr() as _, f)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> fmt::Pointer for F {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::pointer_fmt_inner(self.addr() as _, f)\n     }\n+}\n \n-    #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n-    impl<F: FnPtr> fmt::Debug for F {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            fmt::pointer_fmt_inner(self.addr() as _, f)\n-        }\n+#[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+impl<F: FnPtr> fmt::Debug for F {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::pointer_fmt_inner(self.addr() as _, f)\n     }\n }\n+\n /// Create a `const` raw pointer to a place, without creating an intermediate reference.\n ///\n /// Creating a reference with `&`/`&mut` is only allowed if the pointer is properly aligned"}, {"sha": "08ffc407eadb1e0e4a6531004ab67592208b2f34", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -1,8 +1,7 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -64,8 +63,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n+#[rustc_doc_primitive = \"never\"]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -276,8 +274,7 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -401,8 +398,7 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -464,8 +460,7 @@ impl Copy for () {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -581,8 +576,7 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n+#[rustc_doc_primitive = \"array\"]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -783,8 +777,7 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -876,8 +869,7 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n+#[rustc_doc_primitive = \"str\"]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -944,8 +936,7 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1088,8 +1079,7 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n+#[rustc_doc_primitive = \"f32\"]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1155,8 +1145,7 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n+#[rustc_doc_primitive = \"f64\"]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1171,78 +1160,67 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n+#[rustc_doc_primitive = \"i8\"]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n+#[rustc_doc_primitive = \"i64\"]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n+#[rustc_doc_primitive = \"i128\"]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n+#[rustc_doc_primitive = \"u16\"]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n+#[rustc_doc_primitive = \"u32\"]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n+#[rustc_doc_primitive = \"u64\"]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n+#[rustc_doc_primitive = \"u128\"]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n+#[rustc_doc_primitive = \"isize\"]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1252,8 +1230,7 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1263,8 +1240,7 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1396,8 +1372,7 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n-#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n+#[rustc_doc_primitive = \"fn\"]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "447044a798ba61c46f2ed525e86840aa0b5a71d7", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -11,7 +11,7 @@ use crate::{fmt, mem, panic};\n pub macro thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(bootstrap), inline)]\n+        #[inline]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -78,7 +78,7 @@ pub macro thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            #[cfg_attr(not(bootstrap), inline)]\n+            #[inline]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "d004897df281a9e46b42f18b04d0c9c421aa416d", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -11,7 +11,7 @@ use crate::{fmt, marker, panic, ptr};\n pub macro thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(bootstrap), inline)]\n+        #[inline]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,"}, {"sha": "8572d1c20ce7e3c0cc3ddbbb66d076f0daad09dd", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -69,30 +69,14 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n             name,\n             ignore,\n             ignore_message,\n-            #[cfg(not(bootstrap))]\n             source_file,\n-            #[cfg(not(bootstrap))]\n             start_line,\n-            #[cfg(not(bootstrap))]\n             start_col,\n-            #[cfg(not(bootstrap))]\n             end_line,\n-            #[cfg(not(bootstrap))]\n             end_col,\n             ..\n         } = desc;\n \n-        #[cfg(bootstrap)]\n-        let source_file = \"\";\n-        #[cfg(bootstrap)]\n-        let start_line = 0;\n-        #[cfg(bootstrap)]\n-        let start_col = 0;\n-        #[cfg(bootstrap)]\n-        let end_line = 0;\n-        #[cfg(bootstrap)]\n-        let end_col = 0;\n-\n         self.writeln_message(&format!(\n             r#\"{{ \"type\": \"{test_type}\", \"event\": \"discovered\", \"name\": \"{}\", \"ignore\": {ignore}, \"ignore_message\": \"{}\", \"source_path\": \"{}\", \"start_line\": {start_line}, \"start_col\": {start_col}, \"end_line\": {end_line}, \"end_col\": {end_col} }}\"#,\n             EscapedString(name.as_slice()),"}, {"sha": "c34583e69597445cb0f6f3b770797aa8c12489fc", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -63,15 +63,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -85,15 +80,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -115,15 +105,10 @@ pub fn do_not_run_ignored_tests() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -148,15 +133,10 @@ pub fn ignored_tests_result_in_ignored() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -183,15 +163,10 @@ fn test_should_panic() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -218,15 +193,10 @@ fn test_should_panic_good_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             compile_fail: false,\n@@ -258,15 +228,10 @@ fn test_should_panic_bad_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -302,15 +267,10 @@ fn test_should_panic_non_string_message_type() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n@@ -340,15 +300,10 @@ fn test_should_panic_but_succeeds() {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic,\n                 compile_fail: false,\n@@ -378,15 +333,10 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -425,15 +375,10 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n@@ -474,15 +419,10 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -596,15 +536,10 @@ pub fn exclude_should_panic_option() {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n@@ -630,15 +565,10 @@ pub fn exact_filter_match() {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     ignore_message: None,\n-                    #[cfg(not(bootstrap))]\n                     source_file: \"\",\n-                    #[cfg(not(bootstrap))]\n                     start_line: 0,\n-                    #[cfg(not(bootstrap))]\n                     start_col: 0,\n-                    #[cfg(not(bootstrap))]\n                     end_line: 0,\n-                    #[cfg(not(bootstrap))]\n                     end_col: 0,\n                     should_panic: ShouldPanic::No,\n                     compile_fail: false,\n@@ -731,15 +661,10 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n@@ -870,15 +795,10 @@ pub fn test_bench_no_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -903,15 +823,10 @@ pub fn test_bench_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -929,15 +844,10 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -949,15 +859,10 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         ignore_message: None,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n@@ -1006,15 +911,10 @@ fn test_dyn_bench_returning_err_fails_when_run_as_test() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             ignore_message: None,\n-            #[cfg(not(bootstrap))]\n             source_file: \"\",\n-            #[cfg(not(bootstrap))]\n             start_line: 0,\n-            #[cfg(not(bootstrap))]\n             start_col: 0,\n-            #[cfg(not(bootstrap))]\n             end_line: 0,\n-            #[cfg(not(bootstrap))]\n             end_col: 0,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,"}, {"sha": "e79914dbf4b213bebf87bc7f6c1b933e30c6fc42", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -119,15 +119,10 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub ignore_message: Option<&'static str>,\n-    #[cfg(not(bootstrap))]\n     pub source_file: &'static str,\n-    #[cfg(not(bootstrap))]\n     pub start_line: usize,\n-    #[cfg(not(bootstrap))]\n     pub start_col: usize,\n-    #[cfg(not(bootstrap))]\n     pub end_line: usize,\n-    #[cfg(not(bootstrap))]\n     pub end_col: usize,\n     pub should_panic: options::ShouldPanic,\n     pub compile_fail: bool,"}, {"sha": "14e1328171b9a5aa9506dc1455951578aea7839a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -131,8 +131,7 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),\n     // (Some(Mode::Std), \"target_os\", Some(&[])),\n-    // #[cfg(bootstrap)] loongarch64\n-    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\", \"loongarch64\"])),\n+    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\"])),\n     /* Extra names used by dependencies */\n     // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),\n@@ -152,8 +151,6 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     // Needed to avoid the need to copy windows.lib into the sysroot.\n     (Some(Mode::Rustc), \"windows_raw_dylib\", None),\n     (Some(Mode::ToolRustc), \"windows_raw_dylib\", None),\n-    // #[cfg(bootstrap)] ohos\n-    (Some(Mode::Std), \"target_env\", Some(&[\"ohos\"])),\n ];\n \n /// A structure representing a Rust compiler."}, {"sha": "575d8ee65b7ba6e76ae3fd2941013c8b671e182b", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -1063,15 +1063,10 @@ impl Tester for Collector {\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n                 ignore_message: None,\n-                #[cfg(not(bootstrap))]\n                 source_file: \"\",\n-                #[cfg(not(bootstrap))]\n                 start_line: 0,\n-                #[cfg(not(bootstrap))]\n                 start_col: 0,\n-                #[cfg(not(bootstrap))]\n                 end_line: 0,\n-                #[cfg(not(bootstrap))]\n                 end_col: 0,\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,"}, {"sha": "c15afca22611bd466e38604bc9f0858718a564ea", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -14,7 +14,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n-#![cfg_attr(not(bootstrap), feature(impl_trait_in_assoc_type))]\n+#![feature(impl_trait_in_assoc_type)]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "9059a145b43450a02b5c9dfef101af2555d86ca4", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -422,19 +422,11 @@ pub struct TargetCfgs {\n \n impl TargetCfgs {\n     fn new(config: &Config) -> TargetCfgs {\n-        let targets: HashMap<String, TargetCfg> = if config.stage_id.starts_with(\"stage0-\")\n-            || (config.suite == \"ui-fulldeps\" && config.stage_id.starts_with(\"stage1-\"))\n-        {\n-            // #[cfg(bootstrap)]\n-            // Needed only for one cycle, remove during the bootstrap bump.\n-            Self::collect_all_slow(config)\n-        } else {\n-            serde_json::from_str(&rustc_output(\n-                config,\n-                &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n-            ))\n-            .unwrap()\n-        };\n+        let targets: HashMap<String, TargetCfg> = serde_json::from_str(&rustc_output(\n+            config,\n+            &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n+        ))\n+        .unwrap();\n \n         let mut current = None;\n         let mut all_targets = HashSet::new();\n@@ -475,25 +467,6 @@ impl TargetCfgs {\n             all_pointer_widths,\n         }\n     }\n-\n-    // #[cfg(bootstrap)]\n-    // Needed only for one cycle, remove during the bootstrap bump.\n-    fn collect_all_slow(config: &Config) -> HashMap<String, TargetCfg> {\n-        let mut result = HashMap::new();\n-        for target in rustc_output(config, &[\"--print=target-list\"]).trim().lines() {\n-            let json = rustc_output(\n-                config,\n-                &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n-            );\n-            match serde_json::from_str(&json) {\n-                Ok(res) => {\n-                    result.insert(target.into(), res);\n-                }\n-                Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n-            }\n-        }\n-        result\n-    }\n }\n \n #[derive(Clone, Debug, serde::Deserialize)]"}, {"sha": "01da5981015f97bc7499003d9a1ec9b97bed3cd7", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -943,15 +943,10 @@ pub fn make_test_description<R: Read>(\n         name,\n         ignore,\n         ignore_message,\n-        #[cfg(not(bootstrap))]\n         source_file: \"\",\n-        #[cfg(not(bootstrap))]\n         start_line: 0,\n-        #[cfg(not(bootstrap))]\n         start_col: 0,\n-        #[cfg(not(bootstrap))]\n         end_line: 0,\n-        #[cfg(not(bootstrap))]\n         end_col: 0,\n         should_panic,\n         compile_fail: false,"}, {"sha": "93863fca344a6599a84c253c6893b609e3eca900", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:134:18: 134:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "37f1995a53a9d5945e1a01d328533cba3589eb3c", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -15,7 +15,7 @@\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n -         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:140:5: 140:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:139:5: 139:29\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35"}, {"sha": "2b1e67be2a9675096af6949287589a98d997119c", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bb8c78517102e375d4d04e5b2cac4f121c56e5/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=a7bb8c78517102e375d4d04e5b2cac4f121c56e5", "patch": "@@ -127,7 +127,6 @@ pub fn read_via_copy_uninhabited(r: &Never) -> Never {\n pub enum Never {}\n \n // EMIT_MIR lower_intrinsics.option_payload.LowerIntrinsics.diff\n-#[cfg(not(bootstrap))]\n pub fn option_payload(o: &Option<usize>, p: &Option<String>) {\n     unsafe {\n         let _x = core::intrinsics::option_payload_ptr(o);"}]}