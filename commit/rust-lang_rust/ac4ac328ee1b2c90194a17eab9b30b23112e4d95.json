{"sha": "ac4ac328ee1b2c90194a17eab9b30b23112e4d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNGFjMzI4ZWUxYjJjOTAxOTRhMTdlYWI5YjMwYjIzMTEyZTRkOTU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-06-11T15:19:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-13T01:10:18Z"}, "message": "cargo: remove leading underscores", "tree": {"sha": "763b2c51c543e3436d4abcd61ca303e6ece6384f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/763b2c51c543e3436d4abcd61ca303e6ece6384f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4ac328ee1b2c90194a17eab9b30b23112e4d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4ac328ee1b2c90194a17eab9b30b23112e4d95", "html_url": "https://github.com/rust-lang/rust/commit/ac4ac328ee1b2c90194a17eab9b30b23112e4d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4ac328ee1b2c90194a17eab9b30b23112e4d95/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadd74b5b69c36921963c2f1da7685bafcb723d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadd74b5b69c36921963c2f1da7685bafcb723d8", "html_url": "https://github.com/rust-lang/rust/commit/eadd74b5b69c36921963c2f1da7685bafcb723d8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "1c9ae6f866a1b80ba4843847da21cc7463f3257d", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac4ac328ee1b2c90194a17eab9b30b23112e4d95/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4ac328ee1b2c90194a17eab9b30b23112e4d95/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=ac4ac328ee1b2c90194a17eab9b30b23112e4d95", "patch": "@@ -399,26 +399,26 @@ fn parse_source(name: str, j: json::json) -> source {\n     }\n \n     alt j {\n-        json::dict(_j) {\n-            let mut url = alt _j.find(\"url\") {\n+        json::dict(j) {\n+            let mut url = alt j.find(\"url\") {\n                 some(json::string(u)) {\n                     u\n                 }\n                 _ { fail \"needed 'url' field in source\"; }\n             };\n-            let method = alt _j.find(\"method\") {\n+            let method = alt j.find(\"method\") {\n                 some(json::string(u)) {\n                     u\n                 }\n                 _ { assume_source_method(url) }\n             };\n-            let key = alt _j.find(\"key\") {\n+            let key = alt j.find(\"key\") {\n                 some(json::string(u)) {\n                     some(u)\n                 }\n                 _ { none }\n             };\n-            let keyfp = alt _j.find(\"keyfp\") {\n+            let keyfp = alt j.find(\"keyfp\") {\n                 some(json::string(u)) {\n                     some(u)\n                 }\n@@ -456,14 +456,14 @@ fn try_parse_sources(filename: str, sources: map::hashmap<str, source>) {\n \n fn load_one_source_package(src: source, p: map::hashmap<str, json::json>) {\n     let name = alt p.find(\"name\") {\n-        some(json::string(_n)) {\n-            if !valid_pkg_name(_n) {\n-                warn(\"malformed source json: \" + src.name + \", '\" + _n + \"'\"+\n+        some(json::string(n)) {\n+            if !valid_pkg_name(n) {\n+                warn(\"malformed source json: \" + src.name + \", '\" + n + \"'\"+\n                      \" is an invalid name (alphanumeric, underscores and\" +\n                      \" dashes only)\");\n                 ret;\n             }\n-            _n\n+            n\n         }\n         _ {\n             warn(\"malformed source json: \" + src.name + \" (missing name)\");\n@@ -472,13 +472,13 @@ fn load_one_source_package(src: source, p: map::hashmap<str, json::json>) {\n     };\n \n     let uuid = alt p.find(\"uuid\") {\n-        some(json::string(_n)) {\n-            if !is_uuid(_n) {\n-                warn(\"malformed source json: \" + src.name + \", '\" + _n + \"'\"+\n+        some(json::string(n)) {\n+            if !is_uuid(n) {\n+                warn(\"malformed source json: \" + src.name + \", '\" + n + \"'\"+\n                      \" is an invalid uuid\");\n                 ret;\n             }\n-            _n\n+            n\n         }\n         _ {\n             warn(\"malformed source json: \" + src.name + \" (missing uuid)\");\n@@ -487,23 +487,23 @@ fn load_one_source_package(src: source, p: map::hashmap<str, json::json>) {\n     };\n \n     let url = alt p.find(\"url\") {\n-        some(json::string(_n)) { _n }\n+        some(json::string(n)) { n }\n         _ {\n             warn(\"malformed source json: \" + src.name + \" (missing url)\");\n             ret;\n         }\n     };\n \n     let method = alt p.find(\"method\") {\n-        some(json::string(_n)) { _n }\n+        some(json::string(n)) { n }\n         _ {\n             warn(\"malformed source json: \" + src.name + \" (missing method)\");\n             ret;\n         }\n     };\n \n     let ref = alt p.find(\"ref\") {\n-        some(json::string(_n)) { some(_n) }\n+        some(json::string(n)) { some(n) }\n         _ { none }\n     };\n \n@@ -512,7 +512,7 @@ fn load_one_source_package(src: source, p: map::hashmap<str, json::json>) {\n         some(json::list(js)) {\n             for js.each {|j|\n                 alt j {\n-                    json::string(_j) { vec::grow(tags, 1u, _j); }\n+                    json::string(j) { vec::grow(tags, 1u, j); }\n                     _ { }\n                 }\n             }\n@@ -521,7 +521,7 @@ fn load_one_source_package(src: source, p: map::hashmap<str, json::json>) {\n     }\n \n     let description = alt p.find(\"description\") {\n-        some(json::string(_n)) { _n }\n+        some(json::string(n)) { n }\n         _ {\n             warn(\"malformed source json: \" + src.name\n                  + \" (missing description)\");\n@@ -582,10 +582,10 @@ fn load_source_packages(c: cargo, src: source) {\n     let pkgstr = io::read_whole_file_str(pkgfile);\n     alt json::from_str(result::get(pkgstr)) {\n         ok(json::list(js)) {\n-            for js.each {|_j|\n-                alt _j {\n-                    json::dict(_p) {\n-                        load_one_source_package(src, _p);\n+            for js.each {|j|\n+                alt j {\n+                    json::dict(p) {\n+                        load_one_source_package(src, p);\n                     }\n                     _ {\n                         warn(\"malformed source json: \" + src.name +\n@@ -766,8 +766,8 @@ fn install_one_crate(c: cargo, path: str, cf: str) {\n \n fn rustc_sysroot() -> str {\n     alt os::self_exe_path() {\n-        some(_path) {\n-            let path = [_path, \"..\", \"bin\", \"rustc\"];\n+        some(path) {\n+            let path = [path, \"..\", \"bin\", \"rustc\"];\n             check vec::is_not_empty(path);\n             let rustc = path::normalize(path::connect_many(path));\n             #debug(\"  rustc: %s\", rustc);"}]}