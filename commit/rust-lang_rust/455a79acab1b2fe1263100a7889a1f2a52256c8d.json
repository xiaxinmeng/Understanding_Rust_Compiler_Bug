{"sha": "455a79acab1b2fe1263100a7889a1f2a52256c8d", "node_id": "C_kwDOAAsO6NoAKDQ1NWE3OWFjYWIxYjJmZTEyNjMxMDBhNzg4OWExZjJhNTIyNTZjOGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-31T12:20:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-31T12:20:07Z"}, "message": "Rollup merge of #90431 - jkugelman:must-use-std-o-through-z, r=joshtriplett\n\nAdd #[must_use] to remaining std functions (O-Z)\n\nI've run out of compelling reasons to group functions together across crates so I'm just going to go module-by-module. This is half of the remaining items from the `std` crate, from O-Z.\n\n`panicking::take_hook` has a side effect: it unregisters the current panic hook, returning it. I almost ignored it, but the documentation example shows `let _ = panic::take_hook();`, so following suit I went ahead and added a `#[must_use]`.\n\n```rust\nstd::panicking   fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>;\n```\n\nI added these functions that clippy did not flag:\n\n```rust\nstd::path::Path   fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool;\nstd::path::Path   fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool;\nstd::path::Path   fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf;\nstd::path::Path   fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf;\n```\n\nParent issue: #89692\n\nr? `@joshtriplett`", "tree": {"sha": "8361dcb08d27436f72fff5f61b8bd54c975e7ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8361dcb08d27436f72fff5f61b8bd54c975e7ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455a79acab1b2fe1263100a7889a1f2a52256c8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhfon3CRBK7hj4Ov3rIwAAaZcIAIjcdWKZNkuluVpc86GJGK6n\n7uenkUUKhXq5dxp6GeaGSVFdwnA1cFMydYd0Kh19CaBo/9kE/Equl3MvURAt2lpa\ncMFPIjad9VPTtiBgzpWtyPp3XCp9do46nUBpKnBMYtDqIqxvWC941kK4pw80rSAu\npwSncwe90zaRZzB3VRXz+uVY2O1ESVHmktifROA2GiVWickhsXORrgzbmORBNUAl\nuJ5sEjH09i5mKl/VXJGeIsxWJ/e8eZX3ZX8h8Bw44ZKpZJMurwYncixI2pttIb1z\nORxxzcTGWej+BmCIX8BF/21eScqsc/mvDro1jVhoQc8XIB7kwc2Tdav0Gs8/lls=\n=u5BS\n-----END PGP SIGNATURE-----\n", "payload": "tree 8361dcb08d27436f72fff5f61b8bd54c975e7ac7\nparent 26f505c433fc38d0b28b7861a7e194202baa5cc9\nparent a81d4b18ea7ee03733e983974400816684f78ebe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635682807 +0100\ncommitter GitHub <noreply@github.com> 1635682807 +0100\n\nRollup merge of #90431 - jkugelman:must-use-std-o-through-z, r=joshtriplett\n\nAdd #[must_use] to remaining std functions (O-Z)\n\nI've run out of compelling reasons to group functions together across crates so I'm just going to go module-by-module. This is half of the remaining items from the `std` crate, from O-Z.\n\n`panicking::take_hook` has a side effect: it unregisters the current panic hook, returning it. I almost ignored it, but the documentation example shows `let _ = panic::take_hook();`, so following suit I went ahead and added a `#[must_use]`.\n\n```rust\nstd::panicking   fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>;\n```\n\nI added these functions that clippy did not flag:\n\n```rust\nstd::path::Path   fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool;\nstd::path::Path   fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool;\nstd::path::Path   fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf;\nstd::path::Path   fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf;\n```\n\nParent issue: #89692\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455a79acab1b2fe1263100a7889a1f2a52256c8d", "html_url": "https://github.com/rust-lang/rust/commit/455a79acab1b2fe1263100a7889a1f2a52256c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455a79acab1b2fe1263100a7889a1f2a52256c8d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f505c433fc38d0b28b7861a7e194202baa5cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f505c433fc38d0b28b7861a7e194202baa5cc9", "html_url": "https://github.com/rust-lang/rust/commit/26f505c433fc38d0b28b7861a7e194202baa5cc9"}, {"sha": "a81d4b18ea7ee03733e983974400816684f78ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81d4b18ea7ee03733e983974400816684f78ebe", "html_url": "https://github.com/rust-lang/rust/commit/a81d4b18ea7ee03733e983974400816684f78ebe"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "6e6f5212b4651d934290ffbb4f07216b214be378", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -201,6 +201,7 @@ impl SocketCred {\n     }\n \n     /// Get the current PID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_pid(&self) -> libc::pid_t {\n         self.0.pid\n@@ -213,6 +214,7 @@ impl SocketCred {\n     }\n \n     /// Get the current UID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_uid(&self) -> libc::uid_t {\n         self.0.uid\n@@ -225,6 +227,7 @@ impl SocketCred {\n     }\n \n     /// Get the current GID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_gid(&self) -> libc::gid_t {\n         self.0.gid\n@@ -330,6 +333,7 @@ impl<'a> AncillaryData<'a> {\n }\n \n /// This struct is used to iterate through the control messages.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct Messages<'a> {\n     buffer: &'a [u8],\n@@ -425,6 +429,7 @@ impl<'a> SocketAncillary<'a> {\n     }\n \n     /// Returns the capacity of the buffer.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn capacity(&self) -> usize {\n         self.buffer.len()\n@@ -473,6 +478,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn truncated(&self) -> bool {\n         self.truncated"}, {"sha": "b23dd6062f6822fce6576454ee8ec4ca0e33aaf3", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -365,6 +365,7 @@ impl<'a> IntoIterator for &'a UnixListener {\n /// }\n /// ```\n #[derive(Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct Incoming<'a> {\n     listener: &'a UnixListener,"}, {"sha": "286a7c3b386f9d79e4d23c7db159242b91cdaa74", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -436,6 +436,7 @@ impl From<crate::process::ChildStderr> for OwnedFd {\n }\n \n /// Returns the OS-assigned process identifier associated with this process's parent.\n+#[must_use]\n #[stable(feature = \"unix_ppid\", since = \"1.27.0\")]\n pub fn parent_id() -> u32 {\n     crate::sys::os::getppid()"}, {"sha": "6fc6b8daec0a6c76a15100194315271beecfa7ba", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -160,6 +160,7 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[must_use]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     if thread::panicking() {\n@@ -284,11 +285,13 @@ pub mod panic_count {\n     }\n \n     // Disregards ALWAYS_ABORT_FLAG\n+    #[must_use]\n     pub fn get_count() -> usize {\n         LOCAL_PANIC_COUNT.with(|c| c.get())\n     }\n \n     // Disregards ALWAYS_ABORT_FLAG\n+    #[must_use]\n     #[inline]\n     pub fn count_is_zero() -> bool {\n         if GLOBAL_PANIC_COUNT.load(Ordering::Relaxed) & !ALWAYS_ABORT_FLAG == 0 {"}, {"sha": "dc0c735a06c6f5a4cd502ccc03cb228ea8d6be7a", "filename": "library/std/src/path.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -422,6 +422,7 @@ impl<'a> PrefixComponent<'a> {\n     /// See [`Prefix`]'s documentation for more information on the different\n     /// kinds of prefixes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn kind(&self) -> Prefix<'a> {\n         self.parsed\n@@ -583,6 +584,7 @@ impl AsRef<Path> for Component<'_> {\n ///\n /// [`components`]: Path::components\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Components<'a> {\n     // The path left to parse components from\n@@ -609,6 +611,7 @@ pub struct Components<'a> {\n ///\n /// [`iter`]: Path::iter\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a> {\n     inner: Components<'a>,\n@@ -1051,6 +1054,7 @@ fn compare_components(mut left: Components<'_>, mut right: Components<'_>) -> cm\n ///\n /// [`ancestors`]: Path::ancestors\n #[derive(Copy, Clone, Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n pub struct Ancestors<'a> {\n     next: Option<&'a Path>,\n@@ -1459,6 +1463,7 @@ impl PathBuf {\n     ///\n     /// [`capacity`]: OsString::capacity\n     #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()\n@@ -2103,6 +2108,7 @@ impl Path {\n     /// assert_eq!(grand_parent.parent(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn parent(&self) -> Option<&Path> {\n         let mut comps = self.components();\n         let comp = comps.next_back();\n@@ -2169,6 +2175,7 @@ impl Path {\n     /// assert_eq!(None, Path::new(\"/\").file_name());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn file_name(&self) -> Option<&OsStr> {\n         self.components().next_back().and_then(|p| match p {\n             Component::Normal(p) => Some(p),\n@@ -2241,6 +2248,7 @@ impl Path {\n     /// assert!(!Path::new(\"/etc/foo.rs\").starts_with(\"/etc/foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {\n         self._starts_with(base.as_ref())\n     }\n@@ -2268,6 +2276,7 @@ impl Path {\n     /// assert!(!path.ends_with(\"conf\")); // use .extension() instead\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool {\n         self._ends_with(child.as_ref())\n     }\n@@ -2303,6 +2312,7 @@ impl Path {\n     /// [`Path::file_prefix`]: Path::file_prefix\n     ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn file_stem(&self) -> Option<&OsStr> {\n         self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n@@ -2336,6 +2346,7 @@ impl Path {\n     /// [`Path::file_stem`]: Path::file_stem\n     ///\n     #[unstable(feature = \"path_file_prefix\", issue = \"86319\")]\n+    #[must_use]\n     pub fn file_prefix(&self) -> Option<&OsStr> {\n         self.file_name().map(split_file_at_dot).and_then(|(before, _after)| Some(before))\n     }\n@@ -2360,6 +2371,7 @@ impl Path {\n     /// assert_eq!(\"gz\", Path::new(\"foo.tar.gz\").extension().unwrap());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn extension(&self) -> Option<&OsStr> {\n         self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n@@ -2403,6 +2415,7 @@ impl Path {\n     /// assert_eq!(path.with_file_name(\"var\"), PathBuf::from(\"/var\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {\n         self._with_file_name(file_name.as_ref())\n     }\n@@ -2660,6 +2673,7 @@ impl Path {\n     /// This is a convenience function that coerces errors to false. If you want to\n     /// check errors, call [`fs::metadata`].\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn exists(&self) -> bool {\n         fs::metadata(self).is_ok()\n@@ -2786,6 +2800,7 @@ impl Path {\n     /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n         let rw = Box::into_raw(self) as *mut OsStr;\n         let inner = unsafe { Box::from_raw(rw) };"}, {"sha": "9cc7fc2f0352e6e09b2fa7ab9565fc3936bc165a", "filename": "library/std/src/process.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -948,6 +948,7 @@ impl Command {\n     /// let cmd = Command::new(\"echo\");\n     /// assert_eq!(cmd.get_program(), \"echo\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_program(&self) -> &OsStr {\n         self.inner.get_program()\n@@ -1021,6 +1022,7 @@ impl Command {\n     /// cmd.current_dir(\"/bin\");\n     /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_current_dir(&self) -> Option<&Path> {\n         self.inner.get_current_dir()\n@@ -1053,6 +1055,7 @@ impl AsInnerMut<imp::Command> for Command {\n ///\n /// This struct is created by [`Command::get_args`]. See its documentation for\n /// more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandArgs<'a> {\n@@ -1183,6 +1186,7 @@ impl Stdio {\n     /// its entire stdin before writing more than a pipe buffer's worth of output.\n     /// The size of a pipe buffer varies on different targets.\n     ///\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio {\n         Stdio(imp::Stdio::MakePipe)\n@@ -1222,6 +1226,7 @@ impl Stdio {\n     /// print!(\"You piped in the reverse of: \");\n     /// io::stdout().write_all(&output.stdout).unwrap();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn inherit() -> Stdio {\n         Stdio(imp::Stdio::Inherit)\n@@ -1261,6 +1266,7 @@ impl Stdio {\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n     /// // Ignores any piped-in input\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn null() -> Stdio {\n         Stdio(imp::Stdio::Null)\n@@ -1462,6 +1468,7 @@ impl ExitStatus {\n     ///     println!(\"failed to create 'projects/' directory: {}\", status);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn success(&self) -> bool {\n         self.0.exit_ok().is_ok()\n@@ -1493,6 +1500,7 @@ impl ExitStatus {\n     ///     None       => println!(\"Process terminated by signal\")\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn code(&self) -> Option<i32> {\n         self.0.code()\n@@ -1580,6 +1588,7 @@ impl ExitStatusError {\n     /// assert_eq!(bad.code(), Some(1));\n     /// # } // #[cfg(unix)]\n     /// ```\n+    #[must_use]\n     pub fn code(&self) -> Option<i32> {\n         self.code_nonzero().map(Into::into)\n     }\n@@ -1605,11 +1614,13 @@ impl ExitStatusError {\n     /// assert_eq!(bad.code_nonzero().unwrap(), NonZeroI32::try_from(1).unwrap());\n     /// # } // cfg!(unix)\n     /// ```\n+    #[must_use]\n     pub fn code_nonzero(&self) -> Option<NonZeroI32> {\n         self.0.code()\n     }\n \n     /// Converts an `ExitStatusError` (back) to an `ExitStatus`.\n+    #[must_use]\n     pub fn into_status(&self) -> ExitStatus {\n         ExitStatus(self.0.into())\n     }\n@@ -1718,6 +1729,7 @@ impl Child {\n     ///     println!(\"ls command didn't start\");\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process_id\", since = \"1.3.0\")]\n     pub fn id(&self) -> u32 {\n         self.handle.id()\n@@ -1988,6 +2000,7 @@ pub fn abort() -> ! {\n /// ```\n ///\n ///\n+#[must_use]\n #[stable(feature = \"getpid\", since = \"1.26.0\")]\n pub fn id() -> u32 {\n     crate::sys::os::getpid()"}, {"sha": "b41918ec1cffc6c1f7613b70da2b4732026b87dc", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -61,6 +61,7 @@ impl WaitTimeoutResult {\n     ///     }\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn timed_out(&self) -> bool {\n         self.0"}, {"sha": "2cf678ef69b073677b32a32774ba686272a0e4e6", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -707,6 +707,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// // Let's see what that answer was\n /// println!(\"{:?}\", receiver.recv().unwrap());\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(oneshot::Packet::new());\n@@ -755,6 +756,7 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(receiver.recv().unwrap(), 1);\n /// assert_eq!(receiver.recv().unwrap(), 2);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(sync::Packet::new(bound));"}, {"sha": "2cd1e29f6c45ddfcc05bb6b93c272e899fee6fca", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -106,6 +106,7 @@ impl CommandEnv {\n /// This struct is created by\n /// [`Command::get_envs`][crate::process::Command::get_envs]. See its\n /// documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandEnvs<'a> {"}, {"sha": "e7944c715ed6fb7106afc88d8983d99ae7369561", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -650,6 +650,7 @@ where\n ///\n /// handler.join().unwrap();\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn current() -> Thread {\n     thread_info::current_thread().expect(\n@@ -738,6 +739,7 @@ pub fn yield_now() {\n ///\n /// [Mutex]: crate::sync::Mutex\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn panicking() -> bool {\n     panicking::panicking()\n@@ -1132,6 +1134,7 @@ impl Thread {\n     /// assert!(thread::current().id() != other_thread_id);\n     /// ```\n     #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n+    #[must_use]\n     pub fn id(&self) -> ThreadId {\n         self.inner.id\n     }\n@@ -1174,6 +1177,7 @@ impl Thread {\n     ///\n     /// [naming-threads]: ./index.html#naming-threads\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn name(&self) -> Option<&str> {\n         self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) })\n     }\n@@ -1361,6 +1365,7 @@ impl<T> JoinHandle<T> {\n     /// println!(\"thread id: {:?}\", thread.id());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }"}, {"sha": "a5e3bd0c29030731aaba4e6cfe7aa16c0575d664", "filename": "library/std/src/time.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -239,6 +239,7 @@ impl Instant {\n     ///\n     /// let now = Instant::now();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> Instant {\n         let os_now = time::Instant::now();\n@@ -306,6 +307,7 @@ impl Instant {\n     /// let new_now = Instant::now();\n     /// println!(\"{:?}\", new_now.duration_since(now));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: Instant) -> Duration {\n         self.0.checked_sub_instant(&earlier.0).expect(\"supplied instant is later than self\")\n@@ -326,6 +328,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.checked_duration_since(now));\n     /// println!(\"{:?}\", now.checked_duration_since(new_now)); // None\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {\n         self.0.checked_sub_instant(&earlier.0)\n@@ -346,6 +349,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.saturating_duration_since(now));\n     /// println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {\n         self.checked_duration_since(earlier).unwrap_or_default()\n@@ -370,6 +374,7 @@ impl Instant {\n     /// sleep(three_secs);\n     /// assert!(instant.elapsed() >= three_secs);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Duration {\n         Instant::now() - *self\n@@ -476,6 +481,7 @@ impl SystemTime {\n     ///\n     /// let sys_time = SystemTime::now();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> SystemTime {\n         SystemTime(time::SystemTime::now())\n@@ -644,6 +650,7 @@ impl SystemTimeError {\n     ///     Err(e) => println!(\"SystemTimeError difference: {:?}\", e.duration()),\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration(&self) -> Duration {\n         self.0"}, {"sha": "7279925a6d0bef166ad8b044d6b36bad1626afb8", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a79acab1b2fe1263100a7889a1f2a52256c8d/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=455a79acab1b2fe1263100a7889a1f2a52256c8d", "patch": "@@ -48,7 +48,7 @@ fn instant_monotonic_concurrent() -> crate::thread::Result<()> {\n #[test]\n fn instant_elapsed() {\n     let a = Instant::now();\n-    a.elapsed();\n+    let _ = a.elapsed();\n }\n \n #[test]\n@@ -93,7 +93,7 @@ fn instant_math_is_associative() {\n #[should_panic]\n fn instant_duration_since_panic() {\n     let a = Instant::now();\n-    (a - Duration::SECOND).duration_since(a);\n+    let _ = (a - Duration::SECOND).duration_since(a);\n }\n \n #[test]"}]}