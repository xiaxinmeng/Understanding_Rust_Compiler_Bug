{"sha": "764793b2e655b14f1aa98e8e966835e0cc5d3914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDc5M2IyZTY1NWIxNGYxYWE5OGU4ZTk2NjgzNWUwY2M1ZDM5MTQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-11T22:01:53Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-11T22:01:53Z"}, "message": "Merge pull request #307 from marcusklaas/function-arg-ty\n\nRewrite types in function arguments", "tree": {"sha": "f36d7e072a152b944e4ace86a698e917118c0517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36d7e072a152b944e4ace86a698e917118c0517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764793b2e655b14f1aa98e8e966835e0cc5d3914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764793b2e655b14f1aa98e8e966835e0cc5d3914", "html_url": "https://github.com/rust-lang/rust/commit/764793b2e655b14f1aa98e8e966835e0cc5d3914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764793b2e655b14f1aa98e8e966835e0cc5d3914/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fdbb3b97c28f90e3938ab5a8fa6050456290337", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdbb3b97c28f90e3938ab5a8fa6050456290337", "html_url": "https://github.com/rust-lang/rust/commit/3fdbb3b97c28f90e3938ab5a8fa6050456290337"}, {"sha": "623d6c972a3765cf8e297ccd0570011c6807e0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/623d6c972a3765cf8e297ccd0570011c6807e0c0", "html_url": "https://github.com/rust-lang/rust/commit/623d6c972a3765cf8e297ccd0570011c6807e0c0"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "530cf8eda47b137909253d503988ea5ac1993cd4", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764793b2e655b14f1aa98e8e966835e0cc5d3914/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764793b2e655b14f1aa98e8e966835e0cc5d3914/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=764793b2e655b14f1aa98e8e966835e0cc5d3914", "patch": "@@ -21,7 +21,7 @@ use visitor::FmtVisitor;\n use config::MultilineStyle;\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n use types::rewrite_path;\n-use items::{span_lo_for_arg, span_hi_for_arg, rewrite_fn_input};\n+use items::{span_lo_for_arg, span_hi_for_arg};\n use chains::rewrite_chain;\n \n use syntax::{ast, ptr};\n@@ -182,7 +182,15 @@ fn rewrite_closure(capture: ast::CaptureClause,\n                                  \"|\",\n                                  |arg| span_lo_for_arg(arg),\n                                  |arg| span_hi_for_arg(arg),\n-                                 |arg| rewrite_fn_input(arg),\n+                                 |arg| {\n+                                     // FIXME: we should just escalate failure\n+                                     // here, but itemize_list doesn't allow it.\n+                                     arg.rewrite(context, budget, argument_offset)\n+                                        .unwrap_or_else(|| {\n+                                            context.snippet(mk_sp(span_lo_for_arg(arg),\n+                                                                  span_hi_for_arg(arg)))\n+                                        })\n+                                 },\n                                  span_after(span, \"|\", context.codemap),\n                                  body.span.lo);\n "}, {"sha": "842f2699c2a598f46dc874fb507f6da52e131671", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/764793b2e655b14f1aa98e8e966835e0cc5d3914/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764793b2e655b14f1aa98e8e966835e0cc5d3914/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=764793b2e655b14f1aa98e8e966835e0cc5d3914", "patch": "@@ -12,7 +12,7 @@\n \n use {ReturnIndent, BraceStyle, StructLitStyle};\n use utils::{format_mutability, format_visibility, make_indent, contains_skip, span_after,\n-            end_typaram};\n+            end_typaram, wrap_str};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n use expr::rewrite_assign_rhs;\n use comment::FindUncommented;\n@@ -329,7 +329,13 @@ impl<'a> FmtVisitor<'a> {\n                     arg_indent: usize,\n                     span: Span)\n                     -> Option<String> {\n-        let mut arg_item_strs: Vec<_> = args.iter().map(rewrite_fn_input).collect();\n+        let context = self.get_context();\n+        let mut arg_item_strs = try_opt!(args.iter()\n+                                             .map(|arg| {\n+                                                 arg.rewrite(&context, multi_line_budget, indent)\n+                                             })\n+                                             .collect::<Option<Vec<_>>>());\n+\n         // Account for sugary self.\n         // FIXME: the comment for the self argument is dropped. This is blocked\n         // on rust issue #27522.\n@@ -342,7 +348,7 @@ impl<'a> FmtVisitor<'a> {\n                                     })\n                                     .unwrap_or(1);\n \n-        // Comments between args\n+        // Comments between args.\n         let mut arg_items = Vec::new();\n         if min_args == 2 {\n             arg_items.push(ListItem::from_str(\"\"));\n@@ -925,19 +931,22 @@ impl Rewrite for ast::FunctionRetTy {\n     }\n }\n \n-// TODO we farm this out, but this could spill over the column limit, so we\n-// ought to handle it properly.\n-pub fn rewrite_fn_input(arg: &ast::Arg) -> String {\n-    if is_named_arg(arg) {\n-        if let ast::Ty_::TyInfer = arg.ty.node {\n-            pprust::pat_to_string(&arg.pat)\n+impl Rewrite for ast::Arg {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        if is_named_arg(self) {\n+            if let ast::Ty_::TyInfer = self.ty.node {\n+                wrap_str(pprust::pat_to_string(&self.pat), context.config.max_width, width, offset)\n+            } else {\n+                let mut result = pprust::pat_to_string(&self.pat);\n+                result.push_str(\": \");\n+                let max_width = try_opt!(width.checked_sub(result.len()));\n+                let ty_str = try_opt!(self.ty.rewrite(context, max_width, offset + result.len()));\n+                result.push_str(&ty_str);\n+                Some(result)\n+            }\n         } else {\n-            format!(\"{}: {}\",\n-                pprust::pat_to_string(&arg.pat),\n-                pprust::ty_to_string(&arg.ty))\n+            self.ty.rewrite(context, width, offset)\n         }\n-    } else {\n-        pprust::ty_to_string(&arg.ty)\n     }\n }\n "}, {"sha": "30d11dbc71ef67c26155e02714e17b1bbaef8186", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/764793b2e655b14f1aa98e8e966835e0cc5d3914/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764793b2e655b14f1aa98e8e966835e0cc5d3914/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=764793b2e655b14f1aa98e8e966835e0cc5d3914", "patch": "@@ -18,4 +18,7 @@ fn generic<T>(arg: T) -> &SomeType\n     arg(a, b, c, d, e)    \n }\n \n+pub fn http_fetch_async(listener:Box< AsyncCORSResponseListener+Send >,  script_chan:  Box<ScriptChan+Send>) {\n+}\n+\n fn some_func<T:Box<Trait+Bound>>(val:T){}"}, {"sha": "f01e85193f50357f0f954cddb1f35b7c73c9d3e5", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764793b2e655b14f1aa98e8e966835e0cc5d3914/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764793b2e655b14f1aa98e8e966835e0cc5d3914/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=764793b2e655b14f1aa98e8e966835e0cc5d3914", "patch": "@@ -28,5 +28,9 @@ fn generic<T>(arg: T) -> &SomeType\n     arg(a, b, c, d, e)\n }\n \n+pub fn http_fetch_async(listener: Box<AsyncCORSResponseListener + Send>,\n+                        script_chan: Box<ScriptChan + Send>) {\n+}\n+\n fn some_func<T: Box<Trait + Bound>>(val: T) {\n }"}]}