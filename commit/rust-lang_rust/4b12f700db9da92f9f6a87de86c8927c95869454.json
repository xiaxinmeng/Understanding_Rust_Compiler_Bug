{"sha": "4b12f700db9da92f9f6a87de86c8927c95869454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTJmNzAwZGI5ZGE5MmY5ZjZhODdkZTg2Yzg5MjdjOTU4Njk0NTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T21:05:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-27T20:45:46Z"}, "message": "Remove Node* prefix from AnnNode", "tree": {"sha": "a5f0a12b33df628ce417bb133386df3357ec7f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f0a12b33df628ce417bb133386df3357ec7f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b12f700db9da92f9f6a87de86c8927c95869454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b12f700db9da92f9f6a87de86c8927c95869454", "html_url": "https://github.com/rust-lang/rust/commit/4b12f700db9da92f9f6a87de86c8927c95869454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b12f700db9da92f9f6a87de86c8927c95869454/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "befc4b11004068dd5c971676e82ac0a13483d18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/befc4b11004068dd5c971676e82ac0a13483d18b", "html_url": "https://github.com/rust-lang/rust/commit/befc4b11004068dd5c971676e82ac0a13483d18b"}], "stats": {"total": 134, "additions": 65, "deletions": 69}, "files": [{"sha": "8b221f3463ed334d27a2cc39fa7e1b714dc10b18", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4b12f700db9da92f9f6a87de86c8927c95869454", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::AnnNode::*;\n-\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::source_map::{SourceMap, Spanned};\n@@ -33,12 +31,12 @@ use std::iter::Peekable;\n use std::vec;\n \n pub enum AnnNode<'a> {\n-    NodeName(&'a ast::Name),\n-    NodeBlock(&'a hir::Block),\n-    NodeItem(&'a hir::Item),\n-    NodeSubItem(ast::NodeId),\n-    NodeExpr(&'a hir::Expr),\n-    NodePat(&'a hir::Pat),\n+    Name(&'a ast::Name),\n+    Block(&'a hir::Block),\n+    Item(&'a hir::Item),\n+    SubItem(ast::NodeId),\n+    Expr(&'a hir::Expr),\n+    Pat(&'a hir::Pat),\n }\n \n pub enum Nested {\n@@ -529,7 +527,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(item.span.lo())?;\n         self.print_outer_attributes(&item.attrs)?;\n-        self.ann.pre(self, NodeItem(item))?;\n+        self.ann.pre(self, AnnNode::Item(item))?;\n         match item.node {\n             hir::ItemKind::ExternCrate(orig_name) => {\n                 self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n@@ -768,7 +766,7 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n             }\n         }\n-        self.ann.post(self, NodeItem(item))\n+        self.ann.post(self, AnnNode::Item(item))\n     }\n \n     pub fn print_trait_ref(&mut self, t: &hir::TraitRef) -> io::Result<()> {\n@@ -933,7 +931,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_trait_item(&mut self, ti: &hir::TraitItem) -> io::Result<()> {\n-        self.ann.pre(self, NodeSubItem(ti.id))?;\n+        self.ann.pre(self, AnnNode::SubItem(ti.id))?;\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ti.span.lo())?;\n         self.print_outer_attributes(&ti.attrs)?;\n@@ -965,11 +963,11 @@ impl<'a> State<'a> {\n                                            default.as_ref().map(|ty| &**ty))?;\n             }\n         }\n-        self.ann.post(self, NodeSubItem(ti.id))\n+        self.ann.post(self, AnnNode::SubItem(ti.id))\n     }\n \n     pub fn print_impl_item(&mut self, ii: &hir::ImplItem) -> io::Result<()> {\n-        self.ann.pre(self, NodeSubItem(ii.id))?;\n+        self.ann.pre(self, AnnNode::SubItem(ii.id))?;\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ii.span.lo())?;\n         self.print_outer_attributes(&ii.attrs)?;\n@@ -995,7 +993,7 @@ impl<'a> State<'a> {\n                 self.print_associated_type(ii.ident, Some(bounds), None)?;\n             }\n         }\n-        self.ann.post(self, NodeSubItem(ii.id))\n+        self.ann.post(self, AnnNode::SubItem(ii.id))\n     }\n \n     pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> {\n@@ -1055,7 +1053,7 @@ impl<'a> State<'a> {\n             hir::DefaultBlock => (),\n         }\n         self.maybe_print_comment(blk.span.lo())?;\n-        self.ann.pre(self, NodeBlock(blk))?;\n+        self.ann.pre(self, AnnNode::Block(blk))?;\n         self.bopen()?;\n \n         self.print_inner_attributes(attrs)?;\n@@ -1072,7 +1070,7 @@ impl<'a> State<'a> {\n             _ => (),\n         }\n         self.bclose_maybe_open(blk.span, indented, close_box)?;\n-        self.ann.post(self, NodeBlock(blk))\n+        self.ann.post(self, AnnNode::Block(blk))\n     }\n \n     fn print_else(&mut self, els: Option<&hir::Expr>) -> io::Result<()> {\n@@ -1321,7 +1319,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(expr.span.lo())?;\n         self.print_outer_attributes(&expr.attrs)?;\n         self.ibox(indent_unit)?;\n-        self.ann.pre(self, NodeExpr(expr))?;\n+        self.ann.pre(self, AnnNode::Expr(expr))?;\n         match expr.node {\n             hir::ExprKind::Box(ref expr) => {\n                 self.word_space(\"box\")?;\n@@ -1559,7 +1557,7 @@ impl<'a> State<'a> {\n                 self.print_expr_maybe_paren(&expr, parser::PREC_JUMP)?;\n             }\n         }\n-        self.ann.post(self, NodeExpr(expr))?;\n+        self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()\n     }\n \n@@ -1606,7 +1604,7 @@ impl<'a> State<'a> {\n         } else {\n             self.s.word(&ident.as_str())?;\n         }\n-        self.ann.post(self, NodeName(&ident.name))\n+        self.ann.post(self, AnnNode::Name(&ident.name))\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n@@ -1774,7 +1772,7 @@ impl<'a> State<'a> {\n \n     pub fn print_pat(&mut self, pat: &hir::Pat) -> io::Result<()> {\n         self.maybe_print_comment(pat.span.lo())?;\n-        self.ann.pre(self, NodePat(pat))?;\n+        self.ann.pre(self, AnnNode::Pat(pat))?;\n         // Pat isn't normalized, but the beauty of it\n         // is that it doesn't matter\n         match pat.node {\n@@ -1928,7 +1926,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"]\")?;\n             }\n         }\n-        self.ann.post(self, NodePat(pat))\n+        self.ann.post(self, AnnNode::Pat(pat))\n     }\n \n     fn print_arm(&mut self, arm: &hir::Arm) -> io::Result<()> {"}, {"sha": "832b69cb2acc4d53860505a9d9e11028ba1bdb40", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=4b12f700db9da92f9f6a87de86c8927c95869454", "patch": "@@ -117,12 +117,12 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n            ps: &mut pprust::State,\n            node: pprust::AnnNode) -> io::Result<()> {\n         let id = match node {\n-            pprust::NodeName(_) => return Ok(()),\n-            pprust::NodeExpr(expr) => expr.hir_id.local_id,\n-            pprust::NodeBlock(blk) => blk.hir_id.local_id,\n-            pprust::NodeItem(_) |\n-            pprust::NodeSubItem(_) => return Ok(()),\n-            pprust::NodePat(pat) => pat.hir_id.local_id\n+            pprust::AnnNode::Name(_) => return Ok(()),\n+            pprust::AnnNode::Expr(expr) => expr.hir_id.local_id,\n+            pprust::AnnNode::Block(blk) => blk.hir_id.local_id,\n+            pprust::AnnNode::Item(_) |\n+            pprust::AnnNode::SubItem(_) => return Ok(()),\n+            pprust::AnnNode::Pat(pat) => pat.hir_id.local_id\n         };\n \n         if !self.has_bitset_for_local_id(id) {"}, {"sha": "c49631515eab9eb6cd63346d53e8e58a7361359f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4b12f700db9da92f9f6a87de86c8927c95869454", "patch": "@@ -355,33 +355,33 @@ impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n     fn pre(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust::NodeExpr(_) => s.popen(),\n+            pprust::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n     fn post(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust::NodeIdent(_) |\n-            pprust::NodeName(_) => Ok(()),\n+            pprust::AnnNode::Ident(_) |\n+            pprust::AnnNode::Name(_) => Ok(()),\n \n-            pprust::NodeItem(item) => {\n+            pprust::AnnNode::Item(item) => {\n                 s.s.space()?;\n                 s.synth_comment(item.id.to_string())\n             }\n-            pprust::NodeSubItem(id) => {\n+            pprust::AnnNode::SubItem(id) => {\n                 s.s.space()?;\n                 s.synth_comment(id.to_string())\n             }\n-            pprust::NodeBlock(blk) => {\n+            pprust::AnnNode::Block(blk) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"block {}\", blk.id))\n             }\n-            pprust::NodeExpr(expr) => {\n+            pprust::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n                 s.synth_comment(expr.id.to_string())?;\n                 s.pclose()\n             }\n-            pprust::NodePat(pat) => {\n+            pprust::AnnNode::Pat(pat) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"pat {}\", pat.id))\n             }\n@@ -414,34 +414,34 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     }\n     fn pre(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust_hir::NodeExpr(_) => s.popen(),\n+            pprust_hir::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n     fn post(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust_hir::NodeName(_) => Ok(()),\n-            pprust_hir::NodeItem(item) => {\n+            pprust_hir::AnnNode::Name(_) => Ok(()),\n+            pprust_hir::AnnNode::Item(item) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n                                         item.id, item.hir_id.local_id.0))\n             }\n-            pprust_hir::NodeSubItem(id) => {\n+            pprust_hir::AnnNode::SubItem(id) => {\n                 s.s.space()?;\n                 s.synth_comment(id.to_string())\n             }\n-            pprust_hir::NodeBlock(blk) => {\n+            pprust_hir::AnnNode::Block(blk) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"block node_id: {} hir local_id: {}\",\n                                         blk.id, blk.hir_id.local_id.0))\n             }\n-            pprust_hir::NodeExpr(expr) => {\n+            pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n                                         expr.id, expr.hir_id.local_id.0))?;\n                 s.pclose()\n             }\n-            pprust_hir::NodePat(pat) => {\n+            pprust_hir::AnnNode::Pat(pat) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"pat node_id: {} hir local_id: {}\",\n                                         pat.id, pat.hir_id.local_id.0))\n@@ -467,13 +467,13 @@ impl<'a> PrinterSupport for HygieneAnnotation<'a> {\n impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n     fn post(&self, s: &mut pprust::State, node: pprust::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust::NodeIdent(&ast::Ident { name, span }) => {\n+            pprust::AnnNode::Ident(&ast::Ident { name, span }) => {\n                 s.s.space()?;\n                 // FIXME #16420: this doesn't display the connections\n                 // between syntax contexts\n                 s.synth_comment(format!(\"{}{:?}\", name.as_u32(), span.ctxt()))\n             }\n-            pprust::NodeName(&name) => {\n+            pprust::AnnNode::Name(&name) => {\n                 s.s.space()?;\n                 s.synth_comment(name.as_u32().to_string())\n             }\n@@ -519,13 +519,13 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n     }\n     fn pre(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust_hir::NodeExpr(_) => s.popen(),\n+            pprust_hir::AnnNode::Expr(_) => s.popen(),\n             _ => Ok(()),\n         }\n     }\n     fn post(&self, s: &mut pprust_hir::State, node: pprust_hir::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust_hir::NodeExpr(expr) => {\n+            pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n                 s.s.word(\"as\")?;\n                 s.s.space()?;"}, {"sha": "e78e1afe3a4025543dff3f2e856abd82d3edcfae", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b12f700db9da92f9f6a87de86c8927c95869454/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4b12f700db9da92f9f6a87de86c8927c95869454", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::AnnNode::*;\n-\n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, GenericBound, TraitBoundModifier};\n@@ -36,13 +34,13 @@ use std::iter::Peekable;\n use std::vec;\n \n pub enum AnnNode<'a> {\n-    NodeIdent(&'a ast::Ident),\n-    NodeName(&'a ast::Name),\n-    NodeBlock(&'a ast::Block),\n-    NodeItem(&'a ast::Item),\n-    NodeSubItem(ast::NodeId),\n-    NodeExpr(&'a ast::Expr),\n-    NodePat(&'a ast::Pat),\n+    Ident(&'a ast::Ident),\n+    Name(&'a ast::Name),\n+    Block(&'a ast::Block),\n+    Item(&'a ast::Item),\n+    SubItem(ast::NodeId),\n+    Expr(&'a ast::Expr),\n+    Pat(&'a ast::Pat),\n }\n \n pub trait PpAnn {\n@@ -1196,7 +1194,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(item.span.lo())?;\n         self.print_outer_attributes(&item.attrs)?;\n-        self.ann.pre(self, NodeItem(item))?;\n+        self.ann.pre(self, AnnNode::Item(item))?;\n         match item.node {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n@@ -1439,7 +1437,7 @@ impl<'a> State<'a> {\n                 self.end()?;\n             }\n         }\n-        self.ann.post(self, NodeItem(item))\n+        self.ann.post(self, AnnNode::Item(item))\n     }\n \n     fn print_trait_ref(&mut self, t: &ast::TraitRef) -> io::Result<()> {\n@@ -1596,7 +1594,7 @@ impl<'a> State<'a> {\n \n     pub fn print_trait_item(&mut self, ti: &ast::TraitItem)\n                             -> io::Result<()> {\n-        self.ann.pre(self, NodeSubItem(ti.id))?;\n+        self.ann.pre(self, AnnNode::SubItem(ti.id))?;\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ti.span.lo())?;\n         self.print_outer_attributes(&ti.attrs)?;\n@@ -1638,11 +1636,11 @@ impl<'a> State<'a> {\n                 }\n             }\n         }\n-        self.ann.post(self, NodeSubItem(ti.id))\n+        self.ann.post(self, AnnNode::SubItem(ti.id))\n     }\n \n     pub fn print_impl_item(&mut self, ii: &ast::ImplItem) -> io::Result<()> {\n-        self.ann.pre(self, NodeSubItem(ii.id))?;\n+        self.ann.pre(self, AnnNode::SubItem(ii.id))?;\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ii.span.lo())?;\n         self.print_outer_attributes(&ii.attrs)?;\n@@ -1672,7 +1670,7 @@ impl<'a> State<'a> {\n                 }\n             }\n         }\n-        self.ann.post(self, NodeSubItem(ii.id))\n+        self.ann.post(self, AnnNode::SubItem(ii.id))\n     }\n \n     pub fn print_stmt(&mut self, st: &ast::Stmt) -> io::Result<()> {\n@@ -1756,7 +1754,7 @@ impl<'a> State<'a> {\n             BlockCheckMode::Default => ()\n         }\n         self.maybe_print_comment(blk.span.lo())?;\n-        self.ann.pre(self, NodeBlock(blk))?;\n+        self.ann.pre(self, AnnNode::Block(blk))?;\n         self.bopen()?;\n \n         self.print_inner_attributes(attrs)?;\n@@ -1774,7 +1772,7 @@ impl<'a> State<'a> {\n         }\n \n         self.bclose_maybe_open(blk.span, indented, close_box)?;\n-        self.ann.post(self, NodeBlock(blk))\n+        self.ann.post(self, AnnNode::Block(blk))\n     }\n \n     fn print_else(&mut self, els: Option<&ast::Expr>) -> io::Result<()> {\n@@ -2065,7 +2063,7 @@ impl<'a> State<'a> {\n         }\n \n         self.ibox(INDENT_UNIT)?;\n-        self.ann.pre(self, NodeExpr(expr))?;\n+        self.ann.pre(self, AnnNode::Expr(expr))?;\n         match expr.node {\n             ast::ExprKind::Box(ref expr) => {\n                 self.word_space(\"box\")?;\n@@ -2385,7 +2383,7 @@ impl<'a> State<'a> {\n                 self.print_block_with_attrs(blk, attrs)?\n             }\n         }\n-        self.ann.post(self, NodeExpr(expr))?;\n+        self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()\n     }\n \n@@ -2404,7 +2402,7 @@ impl<'a> State<'a> {\n         } else {\n             self.s.word(&ident.as_str())?;\n         }\n-        self.ann.post(self, NodeIdent(&ident))\n+        self.ann.post(self, AnnNode::Ident(&ident))\n     }\n \n     pub fn print_usize(&mut self, i: usize) -> io::Result<()> {\n@@ -2413,7 +2411,7 @@ impl<'a> State<'a> {\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n         self.s.word(&name.as_str())?;\n-        self.ann.post(self, NodeName(&name))\n+        self.ann.post(self, AnnNode::Name(&name))\n     }\n \n     pub fn print_for_decl(&mut self, loc: &ast::Local,\n@@ -2537,7 +2535,7 @@ impl<'a> State<'a> {\n \n     pub fn print_pat(&mut self, pat: &ast::Pat) -> io::Result<()> {\n         self.maybe_print_comment(pat.span.lo())?;\n-        self.ann.pre(self, NodePat(pat))?;\n+        self.ann.pre(self, AnnNode::Pat(pat))?;\n         /* Pat isn't normalized, but the beauty of it\n          is that it doesn't matter */\n         match pat.node {\n@@ -2675,7 +2673,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Mac(ref m) => self.print_mac(m)?,\n         }\n-        self.ann.post(self, NodePat(pat))\n+        self.ann.post(self, AnnNode::Pat(pat))\n     }\n \n     fn print_pats(&mut self, pats: &[P<ast::Pat>]) -> io::Result<()> {"}]}