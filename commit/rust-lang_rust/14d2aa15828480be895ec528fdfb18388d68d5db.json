{"sha": "14d2aa15828480be895ec528fdfb18388d68d5db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDJhYTE1ODI4NDgwYmU4OTVlYzUyOGZkZmIxODM4OGQ2OGQ1ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-09T13:48:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-09T13:48:47Z"}, "message": "Auto merge of #7542 - LeSeulArtichaut:cleanups, r=flip1995\n\nCleanup usage of `span_to_snippet` and `LintContext::sess`\n\n- avoid using `SourceMap::span_to_snippet` directly and use `clippy_utils::source::snippet_opt` instead\n- don't use `LintContext::sess()` on `EarlyContext`s which have a `sess` field directly available, saving the import of `LintContext`\n\nchangelog: none", "tree": {"sha": "69a65a7b59f7dbea96bd0ab6973d3cabe7dd20f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a65a7b59f7dbea96bd0ab6973d3cabe7dd20f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d2aa15828480be895ec528fdfb18388d68d5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d2aa15828480be895ec528fdfb18388d68d5db", "html_url": "https://github.com/rust-lang/rust/commit/14d2aa15828480be895ec528fdfb18388d68d5db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d2aa15828480be895ec528fdfb18388d68d5db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0084195dee22d498291d92603d18f2f79946671f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0084195dee22d498291d92603d18f2f79946671f", "html_url": "https://github.com/rust-lang/rust/commit/0084195dee22d498291d92603d18f2f79946671f"}, {"sha": "ae700b42ed56e735ee813b03b53fcd44d1a662e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae700b42ed56e735ee813b03b53fcd44d1a662e9", "html_url": "https://github.com/rust-lang/rust/commit/ae700b42ed56e735ee813b03b53fcd44d1a662e9"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "0be460d67a75f3e8bbb248782978eed3ba1a79fb", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -47,7 +47,7 @@ declare_lint_pass!(AsConversions => [AS_CONVERSIONS]);\n \n impl EarlyLintPass for AsConversions {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n "}, {"sha": "b64246515f34f79fab343e868120c52060605f1e", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -49,7 +49,7 @@ declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n \n impl EarlyLintPass for ElseIfWithoutElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, mut item: &Expr) {\n-        if in_external_macro(cx.sess(), item.span) {\n+        if in_external_macro(cx.sess, item.span) {\n             return;\n         }\n "}, {"sha": "3ce91d421baca8bc9efe4b9ae760c522c7f288ca", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -3,7 +3,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -48,7 +48,7 @@ declare_lint_pass!(IfNotElse => [IF_NOT_ELSE]);\n \n impl EarlyLintPass for IfNotElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {\n-        if in_external_macro(cx.sess(), item.span) {\n+        if in_external_macro(cx.sess, item.span) {\n             return;\n         }\n         if let ExprKind::If(ref cond, _, Some(ref els)) = item.kind {"}, {"sha": "3736d237642fb61d30b3ddadbb8148fabd2d3ca5", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Block, ItemKind, StmtKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -54,7 +54,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_external_macro(cx.sess(), item.span) {\n+        if in_external_macro(cx.sess, item.span) {\n             return;\n         }\n \n@@ -68,7 +68,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_external_macro(cx.sess(), it.span) {\n+                if in_external_macro(cx.sess, it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.kind {"}, {"sha": "0e5121ca3d73a9d0e5e0107aca96ef4c46f91a10", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -10,7 +10,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use std::iter;\n@@ -222,7 +222,7 @@ impl_lint_pass!(LiteralDigitGrouping => [\n \n impl EarlyLintPass for LiteralDigitGrouping {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n \n@@ -415,7 +415,7 @@ impl_lint_pass!(DecimalLiteralRepresentation => [DECIMAL_LITERAL_REPRESENTATION]\n \n impl EarlyLintPass for DecimalLiteralRepresentation {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n "}, {"sha": "99c03844f49275e02461ca8a02c0195c81e96772", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{is_expr_path_def_path, paths, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LintContext};\n+use rustc_lint::LateContext;\n use rustc_middle::ty::Ty;\n use rustc_span::sym;\n \n@@ -43,7 +44,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -\n \n     let call_site = expr.span.source_callsite();\n     if_chain! {\n-        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n+        if let Some(snippet) = snippet_opt(cx, call_site);\n         let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n         if let Some((_, elements)) = snippet_split.split_last();\n "}, {"sha": "b32feab4ee3e7e5506b23875170ca01d6d4920b6", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -12,7 +12,7 @@ use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -307,7 +307,7 @@ impl EarlyLintPass for MiscEarlyLints {\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n         double_neg::check(cx, expr);"}, {"sha": "fff533167ede2032d935dbc3edbc4228d51bfba4", "filename": "clippy_lints/src/misc_early/unneeded_field_pattern.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Pat, PatKind};\n-use rustc_lint::{EarlyContext, LintContext};\n+use rustc_lint::EarlyContext;\n \n use super::UNNEEDED_FIELD_PATTERN;\n \n@@ -48,7 +49,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                             match field.pat.kind {\n                                 PatKind::Wild => {},\n                                 _ => {\n-                                    if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n+                                    if let Some(n) = snippet_opt(cx, field.span) {\n                                         normal.push(n);\n                                     }\n                                 },"}, {"sha": "7314bce83e03867d83c8e6f7e2300d9485360f60", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor as HirVisitor;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -63,7 +63,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n \n impl EarlyLintPass for RedundantClosureCall {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n         if_chain! {"}, {"sha": "77b6e60d89398e61c55f2377bed0933d1125e20d", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -54,7 +54,8 @@ impl EarlyLintPass for DerefAddrOf {\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {\n-                    if let Ok(macro_source) = cx.sess.source_map().span_to_snippet(e.span) {\n+                    #[allow(clippy::option_if_let_else)]\n+                    if let Some(macro_source) = snippet_opt(cx, e.span) {\n                         // Remove leading whitespace from the given span\n                         // e.g: ` $visitor` turns into `$visitor`\n                         let trim_leading_whitespaces = |span| {"}, {"sha": "1164ac4938fb6a28edce06017a0c0082869eaa83", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2aa15828480be895ec528fdfb18388d68d5db/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=14d2aa15828480be895ec528fdfb18388d68d5db", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::position_before_rarrow;\n+use clippy_utils::source::{position_before_rarrow, snippet_opt};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit::FnKind;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n@@ -125,17 +125,16 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n }\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n-    let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n-            (\n-                #[allow(clippy::cast_possible_truncation)]\n-                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                Applicability::MachineApplicable,\n-            )\n-        })\n-    } else {\n-        (ty.span, Applicability::MaybeIncorrect)\n-    };\n+    let (ret_span, appl) =\n+        snippet_opt(cx, span.with_hi(ty.span.hi())).map_or((ty.span, Applicability::MaybeIncorrect), |fn_source| {\n+            position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+                (\n+                    #[allow(clippy::cast_possible_truncation)]\n+                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                    Applicability::MachineApplicable,\n+                )\n+            })\n+        });\n     span_lint_and_sugg(\n         cx,\n         UNUSED_UNIT,"}]}