{"sha": "bc133650077af5b223795e24c7f0ce67ea7e12ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTMzNjUwMDc3YWY1YjIyMzc5NWUyNGM3ZjBjZTY3ZWE3ZTEyYWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:59:31Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:59:31Z"}, "message": "Move unchanging portions of context over to the Visitor.", "tree": {"sha": "f53016e6e9b8d8cc4ff2145f12b84e8a748d1fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f53016e6e9b8d8cc4ff2145f12b84e8a748d1fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc133650077af5b223795e24c7f0ce67ea7e12ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc133650077af5b223795e24c7f0ce67ea7e12ad", "html_url": "https://github.com/rust-lang/rust/commit/bc133650077af5b223795e24c7f0ce67ea7e12ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc133650077af5b223795e24c7f0ce67ea7e12ad/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d0727736b237daeff2bc416ba0abb5713a35195", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0727736b237daeff2bc416ba0abb5713a35195", "html_url": "https://github.com/rust-lang/rust/commit/9d0727736b237daeff2bc416ba0abb5713a35195"}], "stats": {"total": 69, "additions": 32, "deletions": 37}, "files": [{"sha": "44de6fde05070c38c34b2452b2bcd3b79943c96d", "filename": "src/librustc/middle/stack_check.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bc133650077af5b223795e24c7f0ce67ea7e12ad/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc133650077af5b223795e24c7f0ce67ea7e12ad/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstack_check.rs?ref=bc133650077af5b223795e24c7f0ce67ea7e12ad", "patch": "@@ -28,72 +28,69 @@ use util::ppaux::Repr;\n \n #[deriving(Clone)]\n struct Context {\n-    tcx: ty::ctxt,\n     safe_stack: bool\n }\n \n-struct StackCheckVisitor;\n+struct StackCheckVisitor {\n+    tcx: ty::ctxt,\n+}\n \n impl Visitor<Context> for StackCheckVisitor {\n     fn visit_item(&mut self, i:@ast::item, e:Context) {\n-        stack_check_item(*self, i, e);\n+        stack_check_item(self, i, e);\n     }\n     fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&ast::fn_decl,\n                 b:&ast::Block, s:Span, n:ast::NodeId, e:Context) {\n-        stack_check_fn(*self, fk, fd, b, s, n, e);\n+        stack_check_fn(self, fk, fd, b, s, n, e);\n     }\n     fn visit_expr(&mut self, ex:@ast::Expr, e:Context) {\n-        stack_check_expr(*self, ex, e);\n+        stack_check_expr(self, ex, e);\n     }\n }\n \n pub fn stack_check_crate(tcx: ty::ctxt,\n                          crate: &ast::Crate) {\n-    let new_cx = Context {\n-        tcx: tcx,\n-        safe_stack: false\n-    };\n-    let mut visitor = StackCheckVisitor;\n+    let new_cx = Context { safe_stack: false };\n+    let mut visitor = StackCheckVisitor { tcx: tcx };\n     visit::walk_crate(&mut visitor, crate, new_cx);\n }\n \n-fn stack_check_item(v: StackCheckVisitor,\n+fn stack_check_item(v: &mut StackCheckVisitor,\n                     item: @ast::item,\n                     in_cx: Context) {\n-    let mut v = v;\n     match item.node {\n         ast::item_fn(_, ast::extern_fn, _, _, _) => {\n             // an extern fn is already being called from C code...\n-            let new_cx = Context {safe_stack: true, ..in_cx};\n-            visit::walk_item(&mut v, item, new_cx);\n+            let new_cx = Context {safe_stack: true};\n+            visit::walk_item(v, item, new_cx);\n         }\n         ast::item_fn(*) => {\n             let safe_stack = fixed_stack_segment(item.attrs);\n-            let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-            visit::walk_item(&mut v, item, new_cx);\n+            let new_cx = Context {safe_stack: safe_stack};\n+            visit::walk_item(v, item, new_cx);\n         }\n         ast::item_impl(_, _, _, ref methods) => {\n             // visit_method() would make this nicer\n             for &method in methods.iter() {\n                 let safe_stack = fixed_stack_segment(method.attrs);\n-                let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-                visit::walk_method_helper(&mut v, method, new_cx);\n+                let new_cx = Context {safe_stack: safe_stack};\n+                visit::walk_method_helper(v, method, new_cx);\n             }\n         }\n         ast::item_trait(_, _, ref methods) => {\n             for method in methods.iter() {\n                 match *method {\n                     ast::provided(@ref method) => {\n                         let safe_stack = fixed_stack_segment(method.attrs);\n-                        let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-                        visit::walk_method_helper(&mut v, method, new_cx);\n+                        let new_cx = Context {safe_stack: safe_stack};\n+                        visit::walk_method_helper(v, method, new_cx);\n                     }\n                     ast::required(*) => ()\n                 }\n             }\n         }\n         _ => {\n-            visit::walk_item(&mut v, item, in_cx);\n+            visit::walk_item(v, item, in_cx);\n         }\n     }\n \n@@ -102,7 +99,7 @@ fn stack_check_item(v: StackCheckVisitor,\n     }\n }\n \n-fn stack_check_fn<'a>(v: StackCheckVisitor,\n+fn stack_check_fn<'a>(v: &mut StackCheckVisitor,\n                       fk: &visit::fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n@@ -114,7 +111,7 @@ fn stack_check_fn<'a>(v: StackCheckVisitor,\n             in_cx.safe_stack // see stack_check_item above\n         }\n         visit::fk_anon(*) | visit::fk_fn_block => {\n-            match ty::get(ty::node_id_to_type(in_cx.tcx, id)).sty {\n+            match ty::get(ty::node_id_to_type(v.tcx, id)).sty {\n                 ty::ty_bare_fn(*) |\n                 ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) => {\n                     false\n@@ -125,26 +122,25 @@ fn stack_check_fn<'a>(v: StackCheckVisitor,\n             }\n         }\n     };\n-    let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n+    let new_cx = Context {safe_stack: safe_stack};\n     debug!(\"stack_check_fn(safe_stack=%b, id=%?)\", safe_stack, id);\n-    let mut v = v;\n-    visit::walk_fn(&mut v, fk, decl, body, sp, id, new_cx);\n+    visit::walk_fn(v, fk, decl, body, sp, id, new_cx);\n }\n \n-fn stack_check_expr<'a>(v: StackCheckVisitor,\n+fn stack_check_expr<'a>(v: &mut StackCheckVisitor,\n                         expr: @ast::Expr,\n                         cx: Context) {\n     debug!(\"stack_check_expr(safe_stack=%b, expr=%s)\",\n-           cx.safe_stack, expr.repr(cx.tcx));\n+           cx.safe_stack, expr.repr(v.tcx));\n     if !cx.safe_stack {\n         match expr.node {\n             ast::ExprCall(callee, _, _) => {\n-                let callee_ty = ty::expr_ty(cx.tcx, callee);\n-                debug!(\"callee_ty=%s\", callee_ty.repr(cx.tcx));\n+                let callee_ty = ty::expr_ty(v.tcx, callee);\n+                debug!(\"callee_ty=%s\", callee_ty.repr(v.tcx));\n                 match ty::get(callee_ty).sty {\n                     ty::ty_bare_fn(ref fty) => {\n                         if !fty.abis.is_rust() && !fty.abis.is_intrinsic() {\n-                            call_to_extern_fn(cx, callee);\n+                            call_to_extern_fn(v, callee);\n                         }\n                     }\n                     _ => {}\n@@ -153,18 +149,17 @@ fn stack_check_expr<'a>(v: StackCheckVisitor,\n             _ => {}\n         }\n     }\n-    let mut v = v;\n-    visit::walk_expr(&mut v, expr, cx);\n+    visit::walk_expr(v, expr, cx);\n }\n \n-fn call_to_extern_fn(cx: Context, callee: @ast::Expr) {\n+fn call_to_extern_fn(v: &mut StackCheckVisitor, callee: @ast::Expr) {\n     // Permit direct calls to extern fns that are annotated with\n     // #[rust_stack]. This is naturally a horrible pain to achieve.\n     match callee.node {\n         ast::ExprPath(*) => {\n-            match cx.tcx.def_map.find(&callee.id) {\n+            match v.tcx.def_map.find(&callee.id) {\n                 Some(&ast::DefFn(id, _)) if id.crate == ast::LOCAL_CRATE => {\n-                    match cx.tcx.items.find(&id.node) {\n+                    match v.tcx.items.find(&id.node) {\n                         Some(&ast_map::node_foreign_item(item, _, _, _)) => {\n                             if attr::contains_name(item.attrs, \"rust_stack\") {\n                                 return;\n@@ -179,7 +174,7 @@ fn call_to_extern_fn(cx: Context, callee: @ast::Expr) {\n         _ => {}\n     }\n \n-    cx.tcx.sess.add_lint(lint::cstack,\n+    v.tcx.sess.add_lint(lint::cstack,\n                          callee.id,\n                          callee.span,\n                          fmt!(\"invoking non-Rust fn in fn without \\"}]}