{"sha": "04f1c09f90abebd0c6a7658105dec57099a63caa", "node_id": "C_kwDOAAsO6NoAKDA0ZjFjMDlmOTBhYmViZDBjNmE3NjU4MTA1ZGVjNTcwOTlhNjNjYWE", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T14:19:24Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T15:06:06Z"}, "message": "Avoid UB when short-circuiting try_map_id for Vec", "tree": {"sha": "ef324c84b6fe0764a2a9eb7cb955a6ef495ca615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef324c84b6fe0764a2a9eb7cb955a6ef495ca615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f1c09f90abebd0c6a7658105dec57099a63caa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGiSV4ACgkQB8rDzKfg\nZD9CJQ//UtG6h9zOcfUHqxgRECW93TDtbYI8Lm2HPVgXYbg5nDTQ7/Qr5BhZKadL\niu3z0khjS1Jc7PQIBdXMqUdzB/Oy+m2CdQqnEGKd7NPiyfsX5qe/05zQVL0uwr0o\nYA8atCFbC/5kE+Y0lfO3T2n5Y70pAI8QM2N9gQKu/BX9fsZ2jE7S9RSqrv/lhrq4\nJrMRWKatbQXAO+SmVTwRjvsy8j02rhUADoHBbbXaAEmVdvkWDp/mjt/iO7i1I4HU\nqWZPQNMomOrV53ti9W6feRZQIFJIBa0K7pfvEOGcmeUgELo0sUid/DaTInTvxcAe\nKjL2ZZHXKjPhHlErHJVj1qjtL28KVgitVbpvwGfuF0NvT+sc1w9JkmgLrsg1D5jm\nydfLrO7uWVil9ZLGDxd15xQn+lEu2pudE/bGtAK85LHm/dbOy4K2kJPiSzPp+Nn2\nz+nWaZP+P0I7crQ+nojrWFEo7+8NZE/TgT6517nSZ0KkeXXZ8ExYKmo9JTOEjn0Z\nGkUDo0yP1Uj/CMxFl5qkJv+OSNY4n9Ilfk0ud0VxlccncznZ6XS3iAm+kFftT7Vn\nqFOs1OiB+xuYR/OZncCpHF9JcaInTEF9PcOf5gO0/4H58H5ObGRfMdsI8GDShm5K\nVtWIEtMvBA4jcsBj0Lh3vCkRVcfoJfOGxBEdTwAwuLyFsaQeH90=\n=Flq2\n-----END PGP SIGNATURE-----", "payload": "tree ef324c84b6fe0764a2a9eb7cb955a6ef495ca615\nparent 51e15ac7099c00efb425219cf17c8e412d1e14d7\nauthor Alan Egerton <eggyal@gmail.com> 1638022764 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638025566 +0000\n\nAvoid UB when short-circuiting try_map_id for Vec\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f1c09f90abebd0c6a7658105dec57099a63caa", "html_url": "https://github.com/rust-lang/rust/commit/04f1c09f90abebd0c6a7658105dec57099a63caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f1c09f90abebd0c6a7658105dec57099a63caa/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e15ac7099c00efb425219cf17c8e412d1e14d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e15ac7099c00efb425219cf17c8e412d1e14d7", "html_url": "https://github.com/rust-lang/rust/commit/51e15ac7099c00efb425219cf17c8e412d1e14d7"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "d3715a998cec9d9b686cc9c9041cd5de02b12e74", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/04f1c09f90abebd0c6a7658105dec57099a63caa/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f1c09f90abebd0c6a7658105dec57099a63caa/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=04f1c09f90abebd0c6a7658105dec57099a63caa", "patch": "@@ -87,7 +87,6 @@ impl<T> IdFunctor for Vec<T> {\n         // FIXME: We don't really care about panics here and leak\n         // far more than we should, but that should be fine for now.\n         let len = self.len();\n-        let mut error = Ok(());\n         unsafe {\n             self.set_len(0);\n             let start = self.as_mut_ptr();\n@@ -96,16 +95,24 @@ impl<T> IdFunctor for Vec<T> {\n                 match f(ptr::read(p)) {\n                     Ok(value) => ptr::write(p, value),\n                     Err(err) => {\n-                        error = Err(err);\n-                        break;\n+                        // drop all other elements in self\n+                        // (current element was \"moved\" into the call to f)\n+                        for j in (0..i).chain(i + 1..len) {\n+                            let p = start.add(j);\n+                            ptr::drop_in_place(p);\n+                        }\n+\n+                        // returning will drop self, releasing the allocation\n+                        // (len is 0 so elements will not be re-dropped)\n+                        return Err(err);\n                     }\n                 }\n             }\n             // Even if we encountered an error, set the len back\n             // so we don't leak memory.\n             self.set_len(len);\n         }\n-        error.map(|()| self)\n+        Ok(self)\n     }\n }\n "}]}