{"sha": "9a539ade9fa450bc5653309499a87e71a2fe9286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTM5YWRlOWZhNDUwYmM1NjUzMzA5NDk5YTg3ZTcxYTJmZTkyODY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-28T00:27:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-08T11:15:11Z"}, "message": "resolve: Cleanup two main macro resolution functions, tweak some comments", "tree": {"sha": "1a59a3a8a7d0af579af10c0f0419bfe629e9be22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a59a3a8a7d0af579af10c0f0419bfe629e9be22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a539ade9fa450bc5653309499a87e71a2fe9286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a539ade9fa450bc5653309499a87e71a2fe9286", "html_url": "https://github.com/rust-lang/rust/commit/9a539ade9fa450bc5653309499a87e71a2fe9286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a539ade9fa450bc5653309499a87e71a2fe9286/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34ac26114b9fa91167d135c2788e1e5c3d3140e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34ac26114b9fa91167d135c2788e1e5c3d3140e", "html_url": "https://github.com/rust-lang/rust/commit/f34ac26114b9fa91167d135c2788e1e5c3d3140e"}], "stats": {"total": 114, "additions": 50, "deletions": 64}, "files": [{"sha": "26499551af686cce1b33ec3692629ded05e85355", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 50, "deletions": 64, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/9a539ade9fa450bc5653309499a87e71a2fe9286/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a539ade9fa450bc5653309499a87e71a2fe9286/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9a539ade9fa450bc5653309499a87e71a2fe9286", "patch": "@@ -45,6 +45,7 @@ use std::mem;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::small_vec::ExpectOne;\n \n+#[derive(Clone, Copy)]\n crate struct FromPrelude(bool);\n \n #[derive(Clone)]\n@@ -578,15 +579,18 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         assert!(force || !record_used); // `record_used` implies `force`\n         ident = ident.modern();\n \n-        // Names from inner scope that can't shadow names from outer scopes, e.g.\n-        // mod m { ... }\n+        // This is *the* result, resolution from the scope closest to the resolved identifier.\n+        // However, sometimes this result is \"weak\" because it comes from a glob import or\n+        // a macro expansion, and in this case it cannot shadow names from outer scopes, e.g.\n+        // mod m { ... } // solution in outer scope\n         // {\n-        //     use prefix::*; // if this imports another `m`, then it can't shadow the outer `m`\n-        //                    // and we have and ambiguity error\n+        //     use prefix::*; // imports another `m` - innermost solution\n+        //                    // weak, cannot shadow the outer `m`, need to report ambiguity error\n         //     m::mac!();\n         // }\n-        // This includes names from globs and from macro expansions.\n-        let mut potentially_ambiguous_result: Option<(&NameBinding, FromPrelude)> = None;\n+        // So we have to save the innermost solution and continue searching in outer scopes\n+        // to detect potential ambiguities.\n+        let mut innermost_result: Option<(&NameBinding, FromPrelude)> = None;\n \n         enum WhereToResolve<'a> {\n             Module(Module<'a>),\n@@ -729,32 +733,25 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         return Ok(result);\n                     }\n \n-                    // Found a solution that is ambiguous with a previously found solution.\n-                    // Push an ambiguity error for later reporting and\n-                    // return something for better recovery.\n-                    if let Some(previous_result) = potentially_ambiguous_result {\n-                        if result.0.def() != previous_result.0.def() {\n+                    if let Some(innermost_result) = innermost_result {\n+                        // Found another solution, if the first one was \"weak\", report an error.\n+                        if result.0.def() != innermost_result.0.def() &&\n+                           (innermost_result.0.is_glob_import() ||\n+                            innermost_result.0.expansion != Mark::root()) {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 span: path_span,\n                                 name: ident.name,\n-                                b1: previous_result.0,\n+                                b1: innermost_result.0,\n                                 b2: result.0,\n                             });\n-                            return Ok(previous_result);\n+                            return Ok(innermost_result);\n                         }\n+                    } else {\n+                        // Found the first solution.\n+                        innermost_result = Some(result);\n                     }\n \n-                    // Found a solution that's not an ambiguity yet, but is \"suspicious\" and\n-                    // can participate in ambiguities later on.\n-                    // Remember it and go search for other solutions in outer scopes.\n-                    if result.0.is_glob_import() || result.0.expansion != Mark::root() {\n-                        potentially_ambiguous_result = Some(result);\n-\n-                        continue_search!();\n-                    }\n-\n-                    // Found a solution that can't be ambiguous, great success.\n-                    return Ok(result);\n+                    continue_search!();\n                 },\n                 Err(Determinacy::Determined) => {\n                     continue_search!();\n@@ -763,9 +760,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             }\n         }\n \n-        // Previously found potentially ambiguous result turned out to not be ambiguous after all.\n-        if let Some(previous_result) = potentially_ambiguous_result {\n-            return Ok(previous_result);\n+        // The first found solution was the only one, return it.\n+        if let Some(innermost_result) = innermost_result {\n+            return Ok(innermost_result);\n         }\n \n         let determinacy = Determinacy::determined(force);\n@@ -784,30 +781,31 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     }\n \n     fn resolve_legacy_scope(&mut self,\n-                            scope: &'a Cell<LegacyScope<'a>>,\n+                            invocation_legacy_scope: &'a Cell<LegacyScope<'a>>,\n                             ident: Ident,\n                             record_used: bool)\n                             -> Option<&'a NameBinding<'a>> {\n         let ident = ident.modern();\n \n-        // Names from inner scope that can't shadow names from outer scopes, e.g.\n-        // macro_rules! mac { ... }\n+        // This is *the* result, resolution from the scope closest to the resolved identifier.\n+        // However, sometimes this result is \"weak\" because it comes from a macro expansion,\n+        // and in this case it cannot shadow names from outer scopes, e.g.\n+        // macro_rules! m { ... } // solution in outer scope\n         // {\n-        //     define_mac!(); // if this generates another `macro_rules! mac`, then it can't shadow\n-        //                    // the outer `mac` and we have and ambiguity error\n-        //     mac!();\n+        //     define_m!(); // generates another `macro_rules! m` - innermost solution\n+        //                  // weak, cannot shadow the outer `m`, need to report ambiguity error\n+        //     m!();\n         // }\n-        let mut potentially_ambiguous_result: Option<&NameBinding> = None;\n+        // So we have to save the innermost solution and continue searching in outer scopes\n+        // to detect potential ambiguities.\n+        let mut innermost_result: Option<&NameBinding> = None;\n \n         // Go through all the scopes and try to resolve the name.\n-        let mut where_to_resolve = scope;\n+        let mut where_to_resolve = invocation_legacy_scope;\n         loop {\n             let result = match where_to_resolve.get() {\n-                LegacyScope::Binding(legacy_binding) => if ident == legacy_binding.ident {\n-                    Some(legacy_binding.binding)\n-                } else {\n-                    None\n-                }\n+                LegacyScope::Binding(legacy_binding) if ident == legacy_binding.ident =>\n+                    Some(legacy_binding.binding),\n                 _ => None,\n             };\n \n@@ -836,45 +834,33 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         return Some(result);\n                     }\n \n-                    // Found a solution that is ambiguous with a previously found solution.\n-                    // Push an ambiguity error for later reporting and\n-                    // return something for better recovery.\n-                    if let Some(previous_result) = potentially_ambiguous_result {\n-                        if result.def() != previous_result.def() {\n+                    if let Some(innermost_result) = innermost_result {\n+                        // Found another solution, if the first one was \"weak\", report an error.\n+                        if result.def() != innermost_result.def() &&\n+                           innermost_result.expansion != Mark::root() {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 span: ident.span,\n                                 name: ident.name,\n-                                b1: previous_result,\n+                                b1: innermost_result,\n                                 b2: result,\n                             });\n-                            return Some(previous_result);\n+                            return Some(innermost_result);\n                         }\n+                    } else {\n+                        // Found the first solution.\n+                        innermost_result = Some(result);\n                     }\n \n-                    // Found a solution that's not an ambiguity yet, but is \"suspicious\" and\n-                    // can participate in ambiguities later on.\n-                    // Remember it and go search for other solutions in outer scopes.\n-                    if result.expansion != Mark::root() {\n-                        potentially_ambiguous_result = Some(result);\n-\n-                        continue_search!();\n-                    }\n-\n-                    // Found a solution that can't be ambiguous.\n-                    return Some(result);\n+                    continue_search!();\n                 }\n                 None => {\n                     continue_search!();\n                 }\n             }\n         }\n \n-        // Previously found potentially ambiguous result turned out to not be ambiguous after all.\n-        if let Some(previous_result) = potentially_ambiguous_result {\n-            return Some(previous_result);\n-        }\n-\n-        None\n+        // The first found solution was the only one (or there was no solution at all), return it.\n+        innermost_result\n     }\n \n     pub fn finalize_current_module_macro_resolutions(&mut self) {"}]}