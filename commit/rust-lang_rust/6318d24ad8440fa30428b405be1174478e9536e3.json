{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMThkMjRhZDg0NDBmYTMwNDI4YjQwNWJlMTE3NDQ3OGU5NTM2ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T09:39:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T09:39:53Z"}, "message": "Auto merge of #71751 - oli-obk:const_ice, r=RalfJung\n\nMove recursion check for zsts back to read site instead of access check site\n\nReverts https://github.com/rust-lang/rust/pull/71140#discussion_r413709446\n\nFix #71612\nFix #71709\n\nr? @RalfJung", "tree": {"sha": "b72e4c8076fd4430b8ebef8bf0abf8118cb1367d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72e4c8076fd4430b8ebef8bf0abf8118cb1367d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6318d24ad8440fa30428b405be1174478e9536e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "html_url": "https://github.com/rust-lang/rust/commit/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2"}, {"sha": "c64c7766787e6d9d5b80b95832155a11cadcbe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64c7766787e6d9d5b80b95832155a11cadcbe40", "html_url": "https://github.com/rust-lang/rust/commit/c64c7766787e6d9d5b80b95832155a11cadcbe40"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "39e428cee1d7bee2088cab7227383326f615150b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6318d24ad8440fa30428b405be1174478e9536e3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6318d24ad8440fa30428b405be1174478e9536e3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6318d24ad8440fa30428b405be1174478e9536e3", "patch": "@@ -400,18 +400,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n                 // We can still be zero-sized in this branch, in which case we have to\n                 // return `None`.\n-                if size.bytes() == 0 {\n-                    // We may be reading from a static.\n-                    // In order to ensure that `static FOO: Type = FOO;` causes a cycle error\n-                    // instead of magically pulling *any* ZST value from the ether, we need to\n-                    // actually access the referenced allocation. The caller is likely\n-                    // to short-circuit on `None`, so we trigger the access here to\n-                    // make sure it happens.\n-                    self.get_raw(ptr.alloc_id)?;\n-                    None\n-                } else {\n-                    Some(ptr)\n-                }\n+                if size.bytes() == 0 { None } else { Some(ptr) }\n             }\n         })\n     }"}, {"sha": "cc9fc170f6e79b503f97ed0d824512bde24ef558", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6318d24ad8440fa30428b405be1174478e9536e3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6318d24ad8440fa30428b405be1174478e9536e3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=6318d24ad8440fa30428b405be1174478e9536e3", "patch": "@@ -240,6 +240,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         {\n             Some(ptr) => ptr,\n             None => {\n+                if let Scalar::Ptr(ptr) = mplace.ptr {\n+                    // We may be reading from a static.\n+                    // In order to ensure that `static FOO: Type = FOO;` causes a cycle error\n+                    // instead of magically pulling *any* ZST value from the ether, we need to\n+                    // actually access the referenced allocation.\n+                    self.memory.get_raw(ptr.alloc_id)?;\n+                }\n                 return Ok(Some(ImmTy {\n                     // zero-sized type\n                     imm: Scalar::zst().into(),"}, {"sha": "b68e442a57c717d99abfe54b42dd46ed59ac7dee", "filename": "src/test/ui/consts/ice-zst-static-access.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6318d24ad8440fa30428b405be1174478e9536e3/src%2Ftest%2Fui%2Fconsts%2Fice-zst-static-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6318d24ad8440fa30428b405be1174478e9536e3/src%2Ftest%2Fui%2Fconsts%2Fice-zst-static-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fice-zst-static-access.rs?ref=6318d24ad8440fa30428b405be1174478e9536e3", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+// This is a regression test for ICEs from\n+// https://github.com/rust-lang/rust/issues/71612\n+// and\n+// https://github.com/rust-lang/rust/issues/71709\n+\n+#[derive(Copy, Clone)]\n+pub struct Glfw;\n+\n+static mut GLFW: Option<Glfw> = None;\n+pub fn new() -> Glfw {\n+    unsafe {\n+        if let Some(glfw) = GLFW {\n+            return glfw;\n+        } else {\n+            todo!()\n+        }\n+    };\n+}\n+\n+extern \"C\" {\n+    static _dispatch_queue_attr_concurrent: [u8; 0];\n+}\n+\n+static DISPATCH_QUEUE_CONCURRENT: &'static [u8; 0] =\n+    unsafe { &_dispatch_queue_attr_concurrent };\n+\n+fn main() {\n+    *DISPATCH_QUEUE_CONCURRENT;\n+    new();\n+}"}]}