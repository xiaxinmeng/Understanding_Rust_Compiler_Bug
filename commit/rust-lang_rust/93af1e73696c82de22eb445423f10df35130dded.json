{"sha": "93af1e73696c82de22eb445423f10df35130dded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYWYxZTczNjk2YzgyZGUyMmViNDQ1NDIzZjEwZGYzNTEzMGRkZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:04Z"}, "message": "Rollup merge of #56939 - cramertj:pin-stabilization, r=alexcrichton\n\nPin stabilization\n\nThis implements the changes suggested in https://github.com/rust-lang/rust/issues/55766#issue-378417538 and stabilizes the `pin` feature. @alexcrichton also listed several \"blockers\" in that issue, but then in [this comment](https://github.com/rust-lang/rust/issues/55766#issuecomment-445074980) mentioned that they're more \"TODO items\":\n>  In that vein I think it's fine for a stabilization PR to be posted at any time now with FCP lapsed for a week or so now. The final points about self/pin/pinned can be briefly discussed there (if even necessary, they could be left as the proposal above).\n\nLet's settle these last bits here and get this thing stabilized! :)\n\nr? @alexcrichton\ncc @withoutboats", "tree": {"sha": "deaa2f71918324d93ea6196f7fc4834bff83ec16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deaa2f71918324d93ea6196f7fc4834bff83ec16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93af1e73696c82de22eb445423f10df35130dded", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAeACRBK7hj4Ov3rIwAAdHIIABRhA339FInn7hd2A8R/eiJD\n53NkwuzlvppuX5w2b/CwpTtqbFu7pccGVNPICcScEU/gErCj3/EC4GC3h7/nrlal\nyk+b9ihsK1nuQfwh9lz0mfcqSiNWBII4/sCegf0Pm224/f0G+iQnar3SzuG7EL/g\nqy8BDrQpCXip8PboB3vpgSAMSkyOaq2xTm9WKVdGT0XLovKpNmuh2S02nnQljQNp\nxQ4gF/LmW+LARb0SelAq+zHbylXZ0p/j1SMLNgguJuJRBBWU2xXDu92SncGCJmY1\niS61MoMR854KlVPX0NwvyVYjZS+G+LD+RYnXmiS7CWVyEGR5qmejlOlqitQaI5U=\n=ld4B\n-----END PGP SIGNATURE-----\n", "payload": "tree deaa2f71918324d93ea6196f7fc4834bff83ec16\nparent 6ce5ecbc2a6c7e323f8194229327c179cb7d976d\nparent 861df06e077bb17c2d22ab978e37ee2c5350ff9b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602944 +0100\ncommitter GitHub <noreply@github.com> 1545602944 +0100\n\nRollup merge of #56939 - cramertj:pin-stabilization, r=alexcrichton\n\nPin stabilization\n\nThis implements the changes suggested in https://github.com/rust-lang/rust/issues/55766#issue-378417538 and stabilizes the `pin` feature. @alexcrichton also listed several \"blockers\" in that issue, but then in [this comment](https://github.com/rust-lang/rust/issues/55766#issuecomment-445074980) mentioned that they're more \"TODO items\":\n>  In that vein I think it's fine for a stabilization PR to be posted at any time now with FCP lapsed for a week or so now. The final points about self/pin/pinned can be briefly discussed there (if even necessary, they could be left as the proposal above).\n\nLet's settle these last bits here and get this thing stabilized! :)\n\nr? @alexcrichton\ncc @withoutboats\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93af1e73696c82de22eb445423f10df35130dded", "html_url": "https://github.com/rust-lang/rust/commit/93af1e73696c82de22eb445423f10df35130dded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93af1e73696c82de22eb445423f10df35130dded/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "html_url": "https://github.com/rust-lang/rust/commit/6ce5ecbc2a6c7e323f8194229327c179cb7d976d"}, {"sha": "861df06e077bb17c2d22ab978e37ee2c5350ff9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/861df06e077bb17c2d22ab978e37ee2c5350ff9b", "html_url": "https://github.com/rust-lang/rust/commit/861df06e077bb17c2d22ab978e37ee2c5350ff9b"}], "stats": {"total": 144, "additions": 70, "deletions": 74}, "files": [{"sha": "7438f3e6c9df539ed6fe4aa2349e984a3794bdb1", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -111,9 +111,11 @@ impl<T> Box<T> {\n         box x\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n+    /// `x` will be pinned in memory and unable to be moved.\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn pinned(x: T) -> Pin<Box<T>> {\n+    pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n     }\n }\n@@ -446,7 +448,7 @@ impl<T> From<T> for Box<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T> From<Box<T>> for Pin<Box<T>> {\n     fn from(boxed: Box<T>) -> Self {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n@@ -813,7 +815,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n  *  implementation of `Unpin` (where `T: Unpin`) would be valid/safe, and\n  *  could have a method to project a Pin<T> from it.\n  */\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> { }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]"}, {"sha": "8a66cafc001b72d13be235ff5900f42462a01093", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -102,7 +102,6 @@\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n-#![feature(pin)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]"}, {"sha": "af316b0b61bd1d8635fbe41dd1ff9a1d2195caa3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -325,8 +325,10 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn pinned(value: T) -> Pin<Rc<T>> {\n+    /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n+    /// `value` will be pinned in memory and unable to be moved.\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n \n@@ -1934,5 +1936,5 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Rc<T> { }"}, {"sha": "7b8afb1943c1f3b1ec593141c43d5c796a4ec538", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -303,8 +303,10 @@ impl<T> Arc<T> {\n         Arc { ptr: Box::into_raw_non_null(x), phantom: PhantomData }\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn pinned(data: T) -> Pin<Arc<T>> {\n+    /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n+    /// `data` will be pinned in memory and unable to be moved.\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n \n@@ -2050,5 +2052,5 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Arc<T> { }"}, {"sha": "da3aa8449bafb4f8b3414cc7732c87c5c561afcf", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -120,7 +120,7 @@ impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n \n impl<P> Future for Pin<P>\n where\n-    P: ops::DerefMut,\n+    P: Unpin + ops::DerefMut,\n     P::Target: Future,\n {\n     type Output = <<P as ops::Deref>::Target as Future>::Output;"}, {"sha": "74055a4f8a9b0b65c7a910b4d3588dcaa6e98c44", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -621,7 +621,6 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n /// ```rust\n-/// #![feature(pin)]\n /// use std::mem::replace;\n /// use std::pin::Pin;\n ///\n@@ -637,23 +636,23 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`replace`]: ../../std/mem/fn.replace.html\n /// [`Pin`]: ../pin/struct.Pin.html\n /// [`pin module`]: ../../std/pin/index.html\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n pub auto trait Unpin {}\n \n /// A marker type which does not implement `Unpin`.\n ///\n /// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n pub struct PhantomPinned;\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl !Unpin for PhantomPinned {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a T {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a mut T {}\n \n /// Implementations of `Copy` for primitive types."}, {"sha": "2b01da0de5203da0124144100fe4a9ed740ba06a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -273,7 +273,7 @@ impl<T> Option<T> {\n \n     /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n     #[inline]\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n         unsafe {\n             Pin::get_ref(self).as_ref().map(|x| Pin::new_unchecked(x))\n@@ -282,10 +282,10 @@ impl<T> Option<T> {\n \n     /// Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`\n     #[inline]\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n         unsafe {\n-            Pin::get_mut_unchecked(self).as_mut().map(|x| Pin::new_unchecked(x))\n+            Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x))\n         }\n     }\n "}, {"sha": "d8508631bf9c36a487f004014f4387aa033e138b", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -36,15 +36,13 @@\n //! are always freely movable, even if the data they point to isn't.\n //!\n //! [`Pin`]: struct.Pin.html\n-//! [`Unpin`]: trait.Unpin.html\n+//! [`Unpin`]: ../../std/marker/trait.Unpin.html\n //! [`swap`]: ../../std/mem/fn.swap.html\n //! [`Box`]: ../../std/boxed/struct.Box.html\n //!\n //! # Examples\n //!\n //! ```rust\n-//! #![feature(pin)]\n-//!\n //! use std::pin::Pin;\n //! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n@@ -72,13 +70,13 @@\n //!             slice: NonNull::dangling(),\n //!             _pin: PhantomPinned,\n //!         };\n-//!         let mut boxed = Box::pinned(res);\n+//!         let mut boxed = Box::pin(res);\n //!\n //!         let slice = NonNull::from(&boxed.data);\n //!         // we know this is safe because modifying a field doesn't move the whole struct\n //!         unsafe {\n //!             let mut_ref: Pin<&mut Self> = Pin::as_mut(&mut boxed);\n-//!             Pin::get_mut_unchecked(mut_ref).slice = slice;\n+//!             Pin::get_unchecked_mut(mut_ref).slice = slice;\n //!         }\n //!         boxed\n //!     }\n@@ -97,15 +95,12 @@\n //! // std::mem::swap(&mut *still_unmoved, &mut *new_unmoved);\n //! ```\n \n-#![unstable(feature = \"pin\", issue = \"49150\")]\n+#![stable(feature = \"pin\", since = \"1.33.0\")]\n \n use fmt;\n-use marker::Sized;\n+use marker::{Sized, Unpin};\n use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n-#[doc(inline)]\n-pub use marker::Unpin;\n-\n /// A pinned pointer.\n ///\n /// This is a wrapper around a kind of pointer which makes that pointer \"pin\" its\n@@ -119,8 +114,9 @@ pub use marker::Unpin;\n //\n // Note: the derives below are allowed because they all only use `&P`, so they\n // cannot move the value behind `pointer`.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n #[fundamental]\n+#[repr(transparent)]\n #[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n pub struct Pin<P> {\n     pointer: P,\n@@ -132,7 +128,7 @@ where\n {\n     /// Construct a new `Pin` around a pointer to some data of a type that\n     /// implements `Unpin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn new(pointer: P) -> Pin<P> {\n         // Safety: the value pointed to is `Unpin`, and so has no requirements\n@@ -154,14 +150,14 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// If `pointer` dereferences to an `Unpin` type, `Pin::new` should be used\n     /// instead.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n         Pin { pointer }\n     }\n \n     /// Get a pinned shared reference from this pinned pointer.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n@@ -170,14 +166,14 @@ impl<P: Deref> Pin<P> {\n \n impl<P: DerefMut> Pin<P> {\n     /// Get a pinned mutable reference from this pinned pointer.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_mut(self: &mut Pin<P>) -> Pin<&mut P::Target> {\n         unsafe { Pin::new_unchecked(&mut *self.pointer) }\n     }\n \n     /// Assign a new value to the memory behind the pinned reference.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn set(mut self: Pin<P>, value: P::Target)\n     where\n@@ -199,11 +195,11 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map_unchecked<U, F>(this: Pin<&'a T>, func: F) -> Pin<&'a U> where\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub unsafe fn map_unchecked<U, F>(self: Pin<&'a T>, func: F) -> Pin<&'a U> where\n         F: FnOnce(&T) -> &U,\n     {\n-        let pointer = &*this.pointer;\n+        let pointer = &*self.pointer;\n         let new_pointer = func(pointer);\n         Pin::new_unchecked(new_pointer)\n     }\n@@ -215,19 +211,19 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_ref(this: Pin<&'a T>) -> &'a T {\n-        this.pointer\n+    pub fn get_ref(self: Pin<&'a T>) -> &'a T {\n+        self.pointer\n     }\n }\n \n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n-        Pin { pointer: this.pointer }\n+    pub fn into_ref(self: Pin<&'a mut T>) -> Pin<&'a T> {\n+        Pin { pointer: self.pointer }\n     }\n \n     /// Get a mutable reference to the data inside of this `Pin`.\n@@ -239,12 +235,12 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_mut(this: Pin<&'a mut T>) -> &'a mut T\n+    pub fn get_mut(self: Pin<&'a mut T>) -> &'a mut T\n         where T: Unpin,\n     {\n-        this.pointer\n+        self.pointer\n     }\n \n     /// Get a mutable reference to the data inside of this `Pin`.\n@@ -257,10 +253,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn get_mut_unchecked(this: Pin<&'a mut T>) -> &'a mut T {\n-        this.pointer\n+    pub unsafe fn get_unchecked_mut(self: Pin<&'a mut T>) -> &'a mut T {\n+        self.pointer\n     }\n \n     /// Construct a new pin by mapping the interior value.\n@@ -274,25 +270,25 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map_unchecked_mut<U, F>(this: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub unsafe fn map_unchecked_mut<U, F>(self: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n-        let pointer = Pin::get_mut_unchecked(this);\n+        let pointer = Pin::get_unchecked_mut(self);\n         let new_pointer = func(pointer);\n         Pin::new_unchecked(new_pointer)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: Deref> Deref for Pin<P> {\n     type Target = P::Target;\n     fn deref(&self) -> &P::Target {\n         Pin::get_ref(Pin::as_ref(self))\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: DerefMut> DerefMut for Pin<P>\n where\n     P::Target: Unpin\n@@ -305,21 +301,21 @@ where\n #[unstable(feature = \"receiver_trait\", issue = \"0\")]\n impl<P: Receiver> Receiver for Pin<P> {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Debug> fmt::Debug for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&self.pointer, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Display> fmt::Display for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&self.pointer, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.pointer, f)\n@@ -331,17 +327,14 @@ impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n // `Deref<Target=Unpin>` is unsound. Any such impl would probably be unsound\n // for other reasons, though, so we just need to take care not to allow such\n // impls to land in std.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P, U> CoerceUnsized<Pin<U>> for Pin<P>\n where\n     P: CoerceUnsized<U>,\n {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, P, U> DispatchFromDyn<Pin<U>> for Pin<P>\n where\n     P: DispatchFromDyn<U>,\n {}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<P> Unpin for Pin<P> {}"}, {"sha": "a1e6034b20821740a05503152bb9665517bed6b0", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -19,7 +19,7 @@\n // Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use marker::{Copy, Send, Sized, Sync};\n+pub use marker::{Copy, Send, Sized, Sync, Unpin};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use ops::{Drop, Fn, FnMut, FnOnce};"}, {"sha": "3379be79186efce95209a34a86b0c83497f90ed8", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -43,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {\n-        set_task_waker(lw, || match unsafe { Pin::get_mut_unchecked(self).0.resume() } {\n+        set_task_waker(lw, || match unsafe { Pin::get_unchecked_mut(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}, {"sha": "85c62d0e1e9bd4458a84eadba7bc60577dc0f06a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -282,7 +282,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n-#![feature(pin)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n@@ -434,7 +433,7 @@ pub use alloc_crate::borrow;\n pub use alloc_crate::fmt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::format;\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n pub use core::pin;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::slice;"}, {"sha": "7e446fdaeaf41740b32530035826090189f4d1de", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -1,5 +1,5 @@\n #![deny(unused_must_use)]\n-#![feature(futures_api, pin, arbitrary_self_types)]\n+#![feature(arbitrary_self_types, futures_api)]\n \n use std::iter::Iterator;\n use std::future::Future;"}, {"sha": "e5ee2233b766d2c78bae653a86713321ddb1d21e", "filename": "src/test/run-pass/arbitrary_self_types_stdlib_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(pin)]\n+#![feature(arbitrary_self_types)]\n #![feature(rustc_attrs)]\n \n use std::{"}, {"sha": "d9eb801a2066841bdf1d6d01fab22be015394c6b", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -10,7 +10,7 @@\n \n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n+#![feature(arbitrary_self_types, async_await, await_macro, futures_api)]\n \n use std::pin::Pin;\n use std::future::Future;\n@@ -138,7 +138,7 @@ where\n     F: FnOnce(u8) -> Fut,\n     Fut: Future<Output = u8>,\n {\n-    let mut fut = Box::pinned(f(9));\n+    let mut fut = Box::pin(f(9));\n     let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n     let waker = local_waker_from_nonlocal(counter.clone());\n     assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));"}, {"sha": "ac67488924993c8137132cdad7d24da4687e7330", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93af1e73696c82de22eb445423f10df35130dded/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=93af1e73696c82de22eb445423f10df35130dded", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(arbitrary_self_types, futures_api, pin)]\n+#![feature(arbitrary_self_types, futures_api)]\n #![allow(unused)]\n \n use std::future::Future;"}]}