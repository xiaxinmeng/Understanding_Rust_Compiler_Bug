{"sha": "972d075aa62c87bc9fb660335e7dc1f75fa853c1", "node_id": "C_kwDOAAsO6NoAKDk3MmQwNzVhYTYyYzg3YmM5ZmI2NjAzMzVlN2RjMWY3NWZhODUzYzE", "commit": {"author": {"name": "viandoxdev", "email": "titouangoulois29@gmail.com", "date": "2022-11-02T10:23:42Z"}, "committer": {"name": "viandoxdev", "email": "titouangoulois29@gmail.com", "date": "2022-11-02T10:23:42Z"}, "message": "merge JsonStd and Std steps", "tree": {"sha": "ec87c8b48be3d5eb22a8c649ee515009f985c97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec87c8b48be3d5eb22a8c649ee515009f985c97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972d075aa62c87bc9fb660335e7dc1f75fa853c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEve75zAAXzmYrRtoArxQQxbwQqiUFAmNiRS4ACgkQrxQQxbwQ\nqiWgOgv9HPcrK78Fx3hCdBRCIGgtHcevYYI8jCHkYqX2lriFCeuTqQMx1HSFnMr4\nZ0nIP/b6BtMViha6AIdsXCIghkwPs9pKJ5mMdTu1seBiPdKL77aMsFXbrjB4o77/\n7UT9ToGoFcNCtxS9A8On5T9eTkhW+vGvBGON1CBqYwcyzk5lbyaKRq8J+NNVMJnK\nG9AzwS7BrfIK5mFZLnJlsM2FejVexPvr3UU51oORd2pVgrveyGfYeQkLQL1JD+qy\ntAEOeAnGGVDtc39GjVfAa82NsuLSGRet2g77taDm1OOzaePxIRIvWFP/PNAHDdvx\nd/mtIx+YgxnE+C89FG6TZtcCvjWfa5137+eTYLSTqvpOV0jJ5nZE2tKgRR5WUmcj\nRlQgAqRbf8kOnH2YG7UjHGr2q90/Rc0IRcJtDfvYbPvvAguH2XR+AtPSUyi/A0Ue\nbrU35/i3qemI4NERozOk8XPmPu47QNsvPffBp9RoMVtTTSHsyU7YUlWLMDtJ0fib\nxFBb/6Bd\n=spMb\n-----END PGP SIGNATURE-----", "payload": "tree ec87c8b48be3d5eb22a8c649ee515009f985c97d\nparent ffd4078264c4892b5098d6191e0adfe3564d62ca\nauthor viandoxdev <titouangoulois29@gmail.com> 1667384622 +0100\ncommitter viandoxdev <titouangoulois29@gmail.com> 1667384622 +0100\n\nmerge JsonStd and Std steps\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972d075aa62c87bc9fb660335e7dc1f75fa853c1", "html_url": "https://github.com/rust-lang/rust/commit/972d075aa62c87bc9fb660335e7dc1f75fa853c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972d075aa62c87bc9fb660335e7dc1f75fa853c1/comments", "author": {"login": "viandoxdev", "id": 43315863, "node_id": "MDQ6VXNlcjQzMzE1ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/43315863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viandoxdev", "html_url": "https://github.com/viandoxdev", "followers_url": "https://api.github.com/users/viandoxdev/followers", "following_url": "https://api.github.com/users/viandoxdev/following{/other_user}", "gists_url": "https://api.github.com/users/viandoxdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/viandoxdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viandoxdev/subscriptions", "organizations_url": "https://api.github.com/users/viandoxdev/orgs", "repos_url": "https://api.github.com/users/viandoxdev/repos", "events_url": "https://api.github.com/users/viandoxdev/events{/privacy}", "received_events_url": "https://api.github.com/users/viandoxdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viandoxdev", "id": 43315863, "node_id": "MDQ6VXNlcjQzMzE1ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/43315863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viandoxdev", "html_url": "https://github.com/viandoxdev", "followers_url": "https://api.github.com/users/viandoxdev/followers", "following_url": "https://api.github.com/users/viandoxdev/following{/other_user}", "gists_url": "https://api.github.com/users/viandoxdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/viandoxdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viandoxdev/subscriptions", "organizations_url": "https://api.github.com/users/viandoxdev/orgs", "repos_url": "https://api.github.com/users/viandoxdev/repos", "events_url": "https://api.github.com/users/viandoxdev/events{/privacy}", "received_events_url": "https://api.github.com/users/viandoxdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd4078264c4892b5098d6191e0adfe3564d62ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd4078264c4892b5098d6191e0adfe3564d62ca", "html_url": "https://github.com/rust-lang/rust/commit/ffd4078264c4892b5098d6191e0adfe3564d62ca"}], "stats": {"total": 92, "additions": 34, "deletions": 58}, "files": [{"sha": "c8285c85d03582fcb8425d77eb1bf8b8cd8b313f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=972d075aa62c87bc9fb660335e7dc1f75fa853c1", "patch": "@@ -689,7 +689,6 @@ impl<'a> Builder<'a> {\n                 doc::UnstableBookGen,\n                 doc::TheBook,\n                 doc::Standalone,\n-                doc::JsonStd,\n                 doc::Std,\n                 doc::Rustc,\n                 doc::Rustdoc,"}, {"sha": "110a3ee4918da2d1ee6a1f359533f91ade9b4244", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=972d075aa62c87bc9fb660335e7dc1f75fa853c1", "patch": "@@ -19,6 +19,7 @@ use crate::cache::{Interned, INTERNER};\n use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n+use crate::doc::DocumentationFormat;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, output, t, timeit};\n@@ -97,7 +98,11 @@ impl Step for JsonDocs {\n     /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        builder.ensure(crate::doc::JsonStd { stage: builder.top_stage, target: host });\n+        builder.ensure(crate::doc::Std {\n+            stage: builder.top_stage,\n+            target: host,\n+            format: DocumentationFormat::JSON,\n+        });\n \n         let dest = \"share/doc/rust/json\";\n "}, {"sha": "bbd8830a01c9f825b8ab8a5d15cd76e99842a696", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 22, "deletions": 55, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=972d075aa62c87bc9fb660335e7dc1f75fa853c1", "patch": "@@ -434,6 +434,7 @@ impl Step for SharedAssets {\n pub struct Std {\n     pub stage: u32,\n     pub target: TargetSelection,\n+    pub format: DocumentationFormat,\n }\n \n impl Step for Std {\n@@ -446,7 +447,15 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { stage: run.builder.top_stage, target: run.target });\n+        run.builder.ensure(Std {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+            format: if run.builder.config.cmd.json() {\n+                DocumentationFormat::JSON\n+            } else {\n+                DocumentationFormat::HTML\n+            },\n+        });\n     }\n \n     /// Compile all standard library documentation.\n@@ -462,13 +471,16 @@ impl Step for Std {\n         builder.ensure(SharedAssets { target: self.target });\n \n         let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n-        let mut extra_args = vec![\n-            OsStr::new(\"--markdown-css\"),\n-            OsStr::new(\"rust.css\"),\n-            OsStr::new(\"--markdown-no-toc\"),\n-            OsStr::new(\"--index-page\"),\n-            &index_page,\n-        ];\n+        let mut extra_args = match self.format {\n+            DocumentationFormat::HTML => vec![\n+                OsStr::new(\"--markdown-css\"),\n+                OsStr::new(\"rust.css\"),\n+                OsStr::new(\"--markdown-no-toc\"),\n+                OsStr::new(\"--index-page\"),\n+                &index_page,\n+            ],\n+            DocumentationFormat::JSON => vec![OsStr::new(\"--output-format\"), OsStr::new(\"json\")],\n+        };\n \n         if !builder.config.docs_minification {\n             extra_args.push(OsStr::new(\"--disable-minification\"));\n@@ -492,15 +504,7 @@ impl Step for Std {\n             })\n             .collect::<Vec<_>>();\n \n-        doc_std(\n-            builder,\n-            DocumentationFormat::HTML,\n-            stage,\n-            target,\n-            &out,\n-            &extra_args,\n-            &requested_crates,\n-        );\n+        doc_std(builder, self.format, stage, target, &out, &extra_args, &requested_crates);\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n@@ -513,43 +517,6 @@ impl Step for Std {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct JsonStd {\n-    pub stage: u32,\n-    pub target: TargetSelection,\n-}\n-\n-impl Step for JsonStd {\n-    type Output = ();\n-    const DEFAULT: bool = false;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        if run.builder.config.cmd.json() {\n-            let default = run.builder.config.docs && run.builder.config.cmd.json();\n-            run.all_krates(\"test\").path(\"library\").default_condition(default)\n-        } else {\n-            // Without this JsonStd would take priority on Std and prevent it from running.\n-            run.never()\n-        }\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(JsonStd { stage: run.builder.top_stage, target: run.target });\n-    }\n-\n-    /// Build JSON documentation for the standard library crates.\n-    ///\n-    /// This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let target = self.target;\n-        let out = builder.json_doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-        let extra_args = [OsStr::new(\"--output-format\"), OsStr::new(\"json\")];\n-        doc_std(builder, DocumentationFormat::JSON, stage, target, &out, &extra_args, &[])\n-    }\n-}\n-\n /// Name of the crates that are visible to consumers of the standard library.\n /// Documentation for internal crates is handled by the rustc step, so internal crates will show\n /// up there.\n@@ -562,7 +529,7 @@ impl Step for JsonStd {\n const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-enum DocumentationFormat {\n+pub enum DocumentationFormat {\n     HTML,\n     JSON,\n }"}, {"sha": "a73e0bb7b8c2fd5bf235bed2aea04815c1e440b0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d075aa62c87bc9fb660335e7dc1f75fa853c1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=972d075aa62c87bc9fb660335e7dc1f75fa853c1", "patch": "@@ -16,6 +16,7 @@ use crate::cache::Interned;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n+use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n use crate::native;\n use crate::tool::{self, SourceType, Tool};\n@@ -822,7 +823,11 @@ impl Step for RustdocJSStd {\n                     command.arg(\"--test-file\").arg(path);\n                 }\n             }\n-            builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n+            builder.ensure(crate::doc::Std {\n+                target: self.target,\n+                stage: builder.top_stage,\n+                format: DocumentationFormat::HTML,\n+            });\n             builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-js-std\\\" tests\");"}]}