{"sha": "33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZGNhNWUzYWQzNzZlN2JkMWZkNjE4ZDViYmQwZWQzYTI3ODQwZjg=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T18:11:04Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T18:11:04Z"}, "message": "rustc: Add long diagnostics for E0165", "tree": {"sha": "c40eb9678da49da970a29cc09f5fba188ad2f884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40eb9678da49da970a29cc09f5fba188ad2f884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "html_url": "https://github.com/rust-lang/rust/commit/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "html_url": "https://github.com/rust-lang/rust/commit/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "938a74382e20e6c8c3ee6c26723b19083050087e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "patch": "@@ -131,6 +131,26 @@ let Irrefutable(x) = irr;\n foo(x);\n \"##,\n \n+E0165: r##\"\n+A while-let pattern attempts to match the pattern, and enters the body if the\n+match was succesful. If the match is irrefutable (when it cannot fail to match),\n+use a regular `let`-binding inside a `loop` instead. For instance:\n+\n+struct Irrefutable(i32);\n+let irr = Irrefutable(0);\n+\n+// This fails to compile because the match is irrefutable.\n+while let Irrefutable(x) = irr {\n+    ...\n+}\n+\n+// Try this instead:\n+loop {\n+    let Irrefutable(x) = irr;\n+    ...\n+}\n+\"##,\n+\n E0297: r##\"\n Patterns used to bind names must be irrefutable. That is, they must guarantee\n that a name will be extracted in all cases. Instead of pattern matching the\n@@ -239,7 +259,6 @@ register_diagnostics! {\n     E0152,\n     E0158,\n     E0161,\n-    E0165,\n     E0170,\n     E0261, // use of undeclared lifetime name\n     E0262, // illegal lifetime parameter name"}]}