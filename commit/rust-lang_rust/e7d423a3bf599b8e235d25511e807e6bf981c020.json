{"sha": "e7d423a3bf599b8e235d25511e807e6bf981c020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDQyM2EzYmY1OTliOGUyMzVkMjU1MTFlODA3ZTZiZjk4MWMwMjA=", "commit": {"author": {"name": "Aaron Gallagher", "email": "habnabit@google.com", "date": "2016-05-31T02:10:16Z"}, "committer": {"name": "Aaron Gallagher", "email": "habnabit@google.com", "date": "2016-05-31T02:17:32Z"}, "message": "Retry on EINTR in Bytes and Chars.\n\nSince Bytes and Chars called directly into Read::read, they didn't use\nany of the retrying wrappers. This allows both iterator types to retry.", "tree": {"sha": "151fdd68c5c138c49178786e832c3d2f01145332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/151fdd68c5c138c49178786e832c3d2f01145332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d423a3bf599b8e235d25511e807e6bf981c020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d423a3bf599b8e235d25511e807e6bf981c020", "html_url": "https://github.com/rust-lang/rust/commit/e7d423a3bf599b8e235d25511e807e6bf981c020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d423a3bf599b8e235d25511e807e6bf981c020/comments", "author": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b522b25a41967f7aa6694767dc85745692844259", "url": "https://api.github.com/repos/rust-lang/rust/commits/b522b25a41967f7aa6694767dc85745692844259", "html_url": "https://github.com/rust-lang/rust/commit/b522b25a41967f7aa6694767dc85745692844259"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "d5b255ee57376fb9dac3495ad74a9d453477f9ce", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7d423a3bf599b8e235d25511e807e6bf981c020/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d423a3bf599b8e235d25511e807e6bf981c020/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e7d423a3bf599b8e235d25511e807e6bf981c020", "patch": "@@ -1522,6 +1522,18 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n+fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n+    let mut buf = [0];\n+    loop {\n+        return match reader.read(&mut buf) {\n+            Ok(0) => None,\n+            Ok(..) => Some(Ok(buf[0])),\n+            Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n+            Err(e) => Some(Err(e)),\n+        };\n+    }\n+}\n+\n /// An iterator over `u8` values of a reader.\n ///\n /// This struct is generally created by calling [`bytes()`][bytes] on a reader.\n@@ -1538,12 +1550,7 @@ impl<R: Read> Iterator for Bytes<R> {\n     type Item = Result<u8>;\n \n     fn next(&mut self) -> Option<Result<u8>> {\n-        let mut buf = [0];\n-        match self.inner.read(&mut buf) {\n-            Ok(0) => None,\n-            Ok(..) => Some(Ok(buf[0])),\n-            Err(e) => Some(Err(e)),\n-        }\n+        read_one_byte(&mut self.inner)\n     }\n }\n \n@@ -1579,11 +1586,10 @@ impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n     fn next(&mut self) -> Option<result::Result<char, CharsError>> {\n-        let mut buf = [0];\n-        let first_byte = match self.inner.read(&mut buf) {\n-            Ok(0) => return None,\n-            Ok(..) => buf[0],\n-            Err(e) => return Some(Err(CharsError::Other(e))),\n+        let first_byte = match read_one_byte(&mut self.inner) {\n+            None => return None,\n+            Some(Ok(b)) => b,\n+            Some(Err(e)) => return Some(Err(CharsError::Other(e))),\n         };\n         let width = core_str::utf8_char_width(first_byte);\n         if width == 1 { return Some(Ok(first_byte as char)) }\n@@ -1595,6 +1601,7 @@ impl<R: Read> Iterator for Chars<R> {\n                 match self.inner.read(&mut buf[start..width]) {\n                     Ok(0) => return Some(Err(CharsError::NotUtf8)),\n                     Ok(n) => start += n,\n+                    Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n                     Err(e) => return Some(Err(CharsError::Other(e))),\n                 }\n             }"}]}