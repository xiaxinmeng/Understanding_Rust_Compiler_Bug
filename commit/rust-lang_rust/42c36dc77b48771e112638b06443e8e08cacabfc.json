{"sha": "42c36dc77b48771e112638b06443e8e08cacabfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzM2ZGM3N2I0ODc3MWUxMTI2MzhiMDY0NDNlOGUwOGNhY2FiZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T19:20:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T19:20:10Z"}, "message": "Auto merge of #5365 - mgr-inz-rafal:issue4983_bool_updates, r=yaahc\n\nIssue4983 bool updates\n\nchangelog: Check for bool inequality comparison that might be written more concisely\n\nFixes #4983", "tree": {"sha": "fb63064311db3c9518c73b4ba252ae8656f6520b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb63064311db3c9518c73b4ba252ae8656f6520b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c36dc77b48771e112638b06443e8e08cacabfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c36dc77b48771e112638b06443e8e08cacabfc", "html_url": "https://github.com/rust-lang/rust/commit/42c36dc77b48771e112638b06443e8e08cacabfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c36dc77b48771e112638b06443e8e08cacabfc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1dd20230ef2926677e45dfef209b68a1e89c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1dd20230ef2926677e45dfef209b68a1e89c74", "html_url": "https://github.com/rust-lang/rust/commit/3e1dd20230ef2926677e45dfef209b68a1e89c74"}, {"sha": "c8f32411777f8287cccb8fa9ab69df17496831af", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f32411777f8287cccb8fa9ab69df17496831af", "html_url": "https://github.com/rust-lang/rust/commit/c8f32411777f8287cccb8fa9ab69df17496831af"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "efa77db822dd039215796cfd100dec22baf9160b", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/42c36dc77b48771e112638b06443e8e08cacabfc/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c36dc77b48771e112638b06443e8e08cacabfc/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=42c36dc77b48771e112638b06443e8e08cacabfc", "patch": "@@ -3,13 +3,15 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, parent_node_is_if_expr, span_lint, span_lint_and_sugg};\n+use crate::utils::{higher, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions of the form `if c { true } else {\n@@ -188,6 +190,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     }\n }\n \n+struct ExpressionInfoWithSpan {\n+    one_side_is_unary_not: bool,\n+    left_span: Span,\n+    right_span: Span,\n+}\n+\n+fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n+    if_chain! {\n+        if let ExprKind::Unary(unop, operand) = e.kind;\n+        if let UnOp::UnNot = unop;\n+        then {\n+            return (true, operand.span);\n+        }\n+    };\n+    (false, e.span)\n+}\n+\n+fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> ExpressionInfoWithSpan {\n+    let left = is_unary_not(left_side);\n+    let right = is_unary_not(right_side);\n+\n+    ExpressionInfoWithSpan {\n+        one_side_is_unary_not: left.0 != right.0,\n+        left_span: left.1,\n+        right_span: right.1,\n+    }\n+}\n+\n fn check_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     e: &'tcx Expr<'_>,\n@@ -199,10 +229,30 @@ fn check_comparison<'a, 'tcx>(\n ) {\n     use self::Expression::{Bool, Other};\n \n-    if let ExprKind::Binary(_, ref left_side, ref right_side) = e.kind {\n+    if let ExprKind::Binary(op, ref left_side, ref right_side) = e.kind {\n         let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n         if l_ty.is_bool() && r_ty.is_bool() {\n             let mut applicability = Applicability::MachineApplicable;\n+\n+            if let BinOpKind::Eq = op.node {\n+                let expression_info = one_side_is_unary_not(&left_side, &right_side);\n+                if expression_info.one_side_is_unary_not {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"This comparison might be written more concisely\",\n+                        \"try simplifying it as shown\",\n+                        format!(\n+                            \"{} != {}\",\n+                            snippet_with_applicability(cx, expression_info.left_span, \"..\", &mut applicability),\n+                            snippet_with_applicability(cx, expression_info.right_span, \"..\", &mut applicability)\n+                        ),\n+                        applicability,\n+                    )\n+                }\n+            }\n+\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, right_side, applicability, m, h)"}, {"sha": "9121176475938728696f5cde36e5c52544652d9c", "filename": "tests/ui/bool_comparison.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.fixed?ref=42c36dc77b48771e112638b06443e8e08cacabfc", "patch": "@@ -111,3 +111,19 @@ fn issue3703() {\n     if Foo < false {}\n     if false < Foo {}\n }\n+\n+#[allow(dead_code)]\n+fn issue4983() {\n+    let a = true;\n+    let b = false;\n+\n+    if a != b {};\n+    if a != b {};\n+    if a == b {};\n+    if !a == !b {};\n+\n+    if b != a {};\n+    if b != a {};\n+    if b == a {};\n+    if !b == !a {};\n+}"}, {"sha": "01ee35859f0da64c055a3eb6a9b313b77e597cb7", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=42c36dc77b48771e112638b06443e8e08cacabfc", "patch": "@@ -111,3 +111,19 @@ fn issue3703() {\n     if Foo < false {}\n     if false < Foo {}\n }\n+\n+#[allow(dead_code)]\n+fn issue4983() {\n+    let a = true;\n+    let b = false;\n+\n+    if a == !b {};\n+    if !a == b {};\n+    if a == b {};\n+    if !a == !b {};\n+\n+    if b == !a {};\n+    if !b == a {};\n+    if b == a {};\n+    if !b == !a {};\n+}"}, {"sha": "eeb1f20ee894d89b0d267ff67bb4098054f6ab04", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42c36dc77b48771e112638b06443e8e08cacabfc/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=42c36dc77b48771e112638b06443e8e08cacabfc", "patch": "@@ -84,5 +84,29 @@ error: order comparisons between booleans can be simplified\n LL |     if x > y {\n    |        ^^^^^ help: try simplifying it as shown: `x & !y`\n \n-error: aborting due to 14 previous errors\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:120:8\n+   |\n+LL |     if a == !b {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:121:8\n+   |\n+LL |     if !a == b {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:125:8\n+   |\n+LL |     if b == !a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:126:8\n+   |\n+LL |     if !b == a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: aborting due to 18 previous errors\n "}]}