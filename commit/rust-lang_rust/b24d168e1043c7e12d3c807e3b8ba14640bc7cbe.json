{"sha": "b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNGQxNjhlMTA0M2M3ZTEyZDNjODA3ZTNiOGJhMTQ2NDBiYzdjYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T04:33:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T04:33:24Z"}, "message": "Rollup merge of #70165 - matthewjasper:erase-more, r=nikomatsakis\n\nRemove the erase regions MIR transform\n\nWe now ensure that MIR never contains unerased regions in the first place.", "tree": {"sha": "d92c2c2dc685c313f4aaecf0cb216dfa5167fc30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92c2c2dc685c313f4aaecf0cb216dfa5167fc30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedZkUCRBK7hj4Ov3rIwAAdHIIABfDMRQ0rx+htvIWT/alk5WX\ngwaHHb1HbFhzhsgxuai8XhwfiARZ6aqkoI+fyF1ZlhFyjUOx7z06Pfk5yQ4W7BOH\nlBO5evJd4v8J3tLG/aCopSoLbfO1ogoMZ+OzO6AKfOaAYQkUEvYtA46rH0vVg9VC\nBX7Q6xVSQdC3O8sBXaUMwSW7yEirTW91r1AeNMlmmtdftq/0PbVa7uKzmOz2A9jT\nLYNQEecNljgVCNx2fSgyDO+0xPX4JHMg4v5XHWOes3t3vpgsuC3JP1joGkdU71Gj\nIKF0T5t/gbZJhDIrgLXH6c49GlRXHHwKaBPSGJZ3Q3Ow0UDFNcgu9iV0/auRyiI=\n=7CUZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d92c2c2dc685c313f4aaecf0cb216dfa5167fc30\nparent c4a5cc16716ed3500409f8af57cc332a88d787a5\nparent 0f0f254a9c90c4fe47897554948f82e44033f37a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584765204 +0100\ncommitter GitHub <noreply@github.com> 1584765204 +0100\n\nRollup merge of #70165 - matthewjasper:erase-more, r=nikomatsakis\n\nRemove the erase regions MIR transform\n\nWe now ensure that MIR never contains unerased regions in the first place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "html_url": "https://github.com/rust-lang/rust/commit/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a5cc16716ed3500409f8af57cc332a88d787a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a5cc16716ed3500409f8af57cc332a88d787a5", "html_url": "https://github.com/rust-lang/rust/commit/c4a5cc16716ed3500409f8af57cc332a88d787a5"}, {"sha": "0f0f254a9c90c4fe47897554948f82e44033f37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f254a9c90c4fe47897554948f82e44033f37a", "html_url": "https://github.com/rust-lang/rust/commit/0f0f254a9c90c4fe47897554948f82e44033f37a"}], "stats": {"total": 173, "additions": 63, "deletions": 110}, "files": [{"sha": "dc2b0e1b983dc452f20defc3983065829dc2b404", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -39,7 +39,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let loc_ty = self\n             .tcx\n             .type_of(self.tcx.require_lang_item(PanicLocationLangItem, None))\n-            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_static.into()].iter()));\n+            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation);\n "}, {"sha": "3d219ac2c01ec940ce659d408ef78ea1ffe8a69f", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -32,6 +32,7 @@ impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements { tcx };\n         delete.visit_body(body);\n+        body.user_type_annotations.raw.clear();\n     }\n }\n "}, {"sha": "996b97c03b14e773538d692807f0f781c0665e41", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c4a5cc16716ed3500409f8af57cc332a88d787a5/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a5cc16716ed3500409f8af57cc332a88d787a5/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=c4a5cc16716ed3500409f8af57cc332a88d787a5", "patch": "@@ -1,63 +0,0 @@\n-//! This pass erases all early-bound regions from the types occurring in the MIR.\n-//! We want to do this once just before codegen, so codegen does not have to take\n-//! care erasing regions all over the place.\n-//! N.B., we do _not_ erase regions of statements that are relevant for\n-//! \"types-as-contracts\"-validation, namely, `AcquireValid` and `ReleaseValid`.\n-\n-use crate::transform::{MirPass, MirSource};\n-use rustc::mir::visit::{MutVisitor, TyContext};\n-use rustc::mir::*;\n-use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, Ty, TyCtxt};\n-\n-struct EraseRegionsVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl EraseRegionsVisitor<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n-        EraseRegionsVisitor { tcx }\n-    }\n-}\n-\n-impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n-        *ty = self.tcx.erase_regions(ty);\n-    }\n-\n-    fn visit_region(&mut self, region: &mut ty::Region<'tcx>, _: Location) {\n-        *region = self.tcx.lifetimes.re_erased;\n-    }\n-\n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _: Location) {\n-        *constant = self.tcx.erase_regions(constant);\n-    }\n-\n-    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n-        *substs = self.tcx.erase_regions(substs);\n-    }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Field(field, ty) = elem {\n-            let new_ty = self.tcx.erase_regions(ty);\n-\n-            if new_ty != *ty {\n-                return Some(PlaceElem::Field(*field, new_ty));\n-            }\n-        }\n-\n-        None\n-    }\n-}\n-\n-pub struct EraseRegions;\n-\n-impl<'tcx> MirPass<'tcx> for EraseRegions {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n-        EraseRegionsVisitor::new(tcx).visit_body(body);\n-    }\n-}"}, {"sha": "82c5ac689b56838eb22bd839b264d2894c7e2660", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -357,18 +357,11 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n     }\n }\n \n-fn make_generator_state_argument_indirect<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-    body: &mut BodyAndCache<'tcx>,\n-) {\n+fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n     let gen_ty = body.local_decls.raw[1].ty;\n \n-    let region = ty::ReFree(ty::FreeRegion { scope: def_id, bound_region: ty::BoundRegion::BrEnv });\n-\n-    let region = tcx.mk_region(region);\n-\n-    let ref_gen_ty = tcx.mk_ref(region, ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut });\n+    let ref_gen_ty =\n+        tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut { ty: gen_ty, mutbl: Mutability::Mut });\n \n     // Replace the by value generator argument\n     body.local_decls.raw[1].ty = ref_gen_ty;\n@@ -874,7 +867,6 @@ fn elaborate_generator_drops<'tcx>(\n fn create_generator_drop_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: &TransformVisitor<'tcx>,\n-    def_id: DefId,\n     source: MirSource<'tcx>,\n     gen_ty: Ty<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n@@ -912,7 +904,7 @@ fn create_generator_drop_shim<'tcx>(\n         local_info: LocalInfo::Other,\n     };\n \n-    make_generator_state_argument_indirect(tcx, def_id, &mut body);\n+    make_generator_state_argument_indirect(tcx, &mut body);\n \n     // Change the generator argument from &mut to *mut\n     body.local_decls[SELF_ARG] = LocalDecl {\n@@ -1047,7 +1039,6 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n fn create_generator_resume_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: TransformVisitor<'tcx>,\n-    def_id: DefId,\n     source: MirSource<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n     can_return: bool,\n@@ -1112,7 +1103,7 @@ fn create_generator_resume_function<'tcx>(\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);\n \n-    make_generator_state_argument_indirect(tcx, def_id, body);\n+    make_generator_state_argument_indirect(tcx, body);\n     make_generator_state_argument_pinned(tcx, body);\n \n     no_landing_pads(tcx, body);\n@@ -1332,11 +1323,11 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // Create a copy of our MIR and use it to create the drop shim for the generator\n         let drop_shim =\n-            create_generator_drop_shim(tcx, &transform, def_id, source, gen_ty, body, drop_clean);\n+            create_generator_drop_shim(tcx, &transform, source, gen_ty, body, drop_clean);\n \n         body.generator_drop = Some(box drop_shim);\n \n         // Create the Generator::resume function\n-        create_generator_resume_function(tcx, transform, def_id, source, body, can_return);\n+        create_generator_resume_function(tcx, transform, source, body, can_return);\n     }\n }"}, {"sha": "50868434baa32779344da04d08abb826bf2e890e", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -22,7 +22,6 @@ pub mod copy_prop;\n pub mod deaggregator;\n pub mod dump_mir;\n pub mod elaborate_drops;\n-pub mod erase_regions;\n pub mod generator;\n pub mod inline;\n pub mod instcombine;\n@@ -296,8 +295,6 @@ fn run_optimization_passes<'tcx>(\n             &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n             // No lifetime analysis based on borrowing can be done from here on out.\n \n-            // From here on out, regions are gone.\n-            &erase_regions::EraseRegions,\n             // Optimizations begin.\n             &unreachable_prop::UnreachablePropagation,\n             &uninhabited_enum_branching::UninhabitedEnumBranching,\n@@ -341,6 +338,9 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyAndCache<'_> {\n     let mut body = body.steal();\n     run_optimization_passes(tcx, &mut body, def_id, None);\n     body.ensure_predecessors();\n+\n+    debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n+\n     tcx.arena.alloc(body)\n }\n \n@@ -358,5 +358,7 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, BodyAndCa\n         body.ensure_predecessors();\n     }\n \n+    debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");\n+\n     tcx.intern_promoted(promoted)\n }"}, {"sha": "a27c80d91cfd0c39cc0b2e331c9964e97299052a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -913,7 +913,13 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         ty,\n                         val: ty::ConstKind::Unevaluated(\n                             def_id,\n-                            InternalSubsts::identity_for_item(tcx, def_id),\n+                            InternalSubsts::for_item(tcx, def_id, |param, _| {\n+                                if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                                    tcx.lifetimes.re_erased.into()\n+                                } else {\n+                                    tcx.mk_param_from_def(param)\n+                                }\n+                            }),\n                             Some(promoted_id),\n                         ),\n                     }),"}, {"sha": "ac613adbcc6ca96a4388a75dad1e5ac7a8c7135e", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -6,7 +6,7 @@ use rustc::middle::lang_items;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::subst::Subst;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -43,8 +43,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             ..\n         })\n         | Node::TraitItem(hir::TraitItem {\n-            kind:\n-                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n+            kind: hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })\n@@ -128,12 +127,8 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n                 let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n                     let va_list_did =\n                         tcx.require_lang_item(lang_items::VaListTypeLangItem, Some(arg.span));\n-                    let region = tcx.mk_region(ty::ReScope(region::Scope {\n-                        id: body.value.hir_id.local_id,\n-                        data: region::ScopeData::CallSite,\n-                    }));\n \n-                    tcx.type_of(va_list_did).subst(tcx, &[region.into()])\n+                    tcx.type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n                 } else {\n                     fn_sig.inputs()[index]\n                 };\n@@ -189,6 +184,20 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n \n         let mut body = BodyAndCache::new(body);\n         body.ensure_predecessors();\n+\n+        // The borrow checker will replace all the regions here with its own\n+        // inference variables. There's no point having non-erased regions here.\n+        // The exception is `body.user_type_annotations`, which is used unmodified\n+        // by borrow checking.\n+        debug_assert!(\n+            !(body.local_decls.has_free_regions()\n+                || body.basic_blocks().has_free_regions()\n+                || body.var_debug_info.has_free_regions()\n+                || body.yield_ty.has_free_regions()),\n+            \"Unexpected free regions in MIR: {:?}\",\n+            body,\n+        );\n+\n         body\n     })\n }\n@@ -209,7 +218,7 @@ fn liberated_closure_env_ty(\n     };\n \n     let closure_env_ty = tcx.closure_env_ty(closure_def_id, closure_substs).unwrap();\n-    tcx.liberate_late_bound_regions(closure_def_id, &closure_env_ty)\n+    tcx.erase_late_bound_regions(&closure_env_ty)\n }\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "57f30acb3a643bc35ab4934e638e20e7a35510fa", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -15,7 +15,7 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.main.EraseRegions.after.mir\n+// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n //     bb0: {\n //         ...\n //         _4 = &mut _2;\n@@ -38,4 +38,4 @@ fn main() {\n //         ...\n //         return;\n //     }\n-// END rustc.main.EraseRegions.after.mir\n+// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "0fb685c3c4e6d2bff2b9fa8c02c4903d1999008c", "filename": "src/test/mir-opt/byte_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -6,10 +6,10 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.main.EraseRegions.after.mir\n+// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n // ...\n // _1 = const b\"foo\";\n // ...\n // _2 = [const 5u8, const 120u8];\n // ...\n-// END rustc.main.EraseRegions.after.mir\n+// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "39b9006017958c5d59c301a14fcf50c261737c3a", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -15,7 +15,7 @@ impl Drop for Droppy {\n }\n \n // END RUST SOURCE\n-// START rustc.main.EraseRegions.before.mir\n+// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n // fn main() -> () {\n //     let mut _0: ();\n //     let mut _1: Packed;\n@@ -56,4 +56,4 @@ impl Drop for Droppy {\n //         drop(_1) -> [return: bb2, unwind: bb1];\n //     }\n // }\n-// END rustc.main.EraseRegions.before.mir\n+// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "e917441200b8a3d103b77cabc949dd9659885175", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24d168e1043c7e12d3c807e3b8ba14640bc7cbe/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=b24d168e1043c7e12d3c807e3b8ba14640bc7cbe", "patch": "@@ -8,8 +8,12 @@ struct Test(i32);\n \n impl Test {\n     // Make sure we run the pass on a method, not just on bare functions.\n-    fn foo<'x>(&self, x: &'x mut i32) -> &'x mut i32 { x }\n-    fn foo_shr<'x>(&self, x: &'x i32) -> &'x i32 { x }\n+    fn foo<'x>(&self, x: &'x mut i32) -> &'x mut i32 {\n+        x\n+    }\n+    fn foo_shr<'x>(&self, x: &'x i32) -> &'x i32 {\n+        x\n+    }\n }\n \n impl Drop for Test {\n@@ -27,7 +31,10 @@ fn main() {\n     }\n \n     // Also test closures\n-    let c: fn(&i32) -> &i32 = |x: &i32| -> &i32 { let _y = x; x };\n+    let c: fn(&i32) -> &i32 = |x: &i32| -> &i32 {\n+        let _y = x;\n+        x\n+    };\n     let _w = c(&x);\n \n     // need to call `foo_shr` or it doesn't even get generated\n@@ -38,7 +45,7 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.{{impl}}-foo.EraseRegions.after.mir\n+// START rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n //     bb0: {\n //         Retag([fn entry] _1);\n //         Retag([fn entry] _2);\n@@ -48,8 +55,8 @@ fn main() {\n //         ...\n //         return;\n //     }\n-// END rustc.{{impl}}-foo.EraseRegions.after.mir\n-// START rustc.{{impl}}-foo_shr.EraseRegions.after.mir\n+// END rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n+// START rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n //     bb0: {\n //         Retag([fn entry] _1);\n //         Retag([fn entry] _2);\n@@ -59,8 +66,8 @@ fn main() {\n //         ...\n //         return;\n //     }\n-// END rustc.{{impl}}-foo_shr.EraseRegions.after.mir\n-// START rustc.main.EraseRegions.after.mir\n+// END rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n+// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n // fn main() -> () {\n //     ...\n //     bb0: {\n@@ -96,8 +103,8 @@ fn main() {\n //\n //     ...\n // }\n-// END rustc.main.EraseRegions.after.mir\n-// START rustc.main-{{closure}}.EraseRegions.after.mir\n+// END rustc.main.SimplifyCfg-elaborate-drops.after.mir\n+// START rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n // fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n@@ -112,7 +119,7 @@ fn main() {\n //         return;\n //     }\n // }\n-// END rustc.main-{{closure}}.EraseRegions.after.mir\n+// END rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n // START rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir\n // fn  std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n //     ..."}]}