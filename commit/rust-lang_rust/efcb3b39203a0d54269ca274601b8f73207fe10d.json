{"sha": "efcb3b39203a0d54269ca274601b8f73207fe10d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2IzYjM5MjAzYTBkNTQyNjljYTI3NDYwMWI4ZjczMjA3ZmUxMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T09:19:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T09:19:55Z"}, "message": "Auto merge of #79128 - m-ou-se:rollup-lzz1dym, r=m-ou-se\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #77939 (Ensure that the source code display is working with DOS backline)\n - #78138 (Upgrade dlmalloc to version 0.2)\n - #78967 (Make codegen tests compatible with extra inlining)\n - #79027 (Limit storage duration of inlined always live locals)\n - #79077 (document that __rust_alloc is also magic to our LLVM fork)\n - #79088 (clarify `span_label` documentation)\n - #79097 (Code block invalid html tag lint)\n - #79105 (std: Fix test `symlink_hard_link` on Windows)\n - #79107 (build-manifest: strip newline from rustc version)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "22535819e0a1e5ca7ef6aba831622a54dbbf1371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22535819e0a1e5ca7ef6aba831622a54dbbf1371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcb3b39203a0d54269ca274601b8f73207fe10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcb3b39203a0d54269ca274601b8f73207fe10d", "html_url": "https://github.com/rust-lang/rust/commit/efcb3b39203a0d54269ca274601b8f73207fe10d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcb3b39203a0d54269ca274601b8f73207fe10d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54508a26eb0595eb8417a4643f2ee572d6ca33d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/54508a26eb0595eb8417a4643f2ee572d6ca33d3", "html_url": "https://github.com/rust-lang/rust/commit/54508a26eb0595eb8417a4643f2ee572d6ca33d3"}, {"sha": "d6c5c5217f907d6361a07380ddf7c6a49b46c815", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c5c5217f907d6361a07380ddf7c6a49b46c815", "html_url": "https://github.com/rust-lang/rust/commit/d6c5c5217f907d6361a07380ddf7c6a49b46c815"}], "stats": {"total": 268, "additions": 223, "deletions": 45}, "files": [{"sha": "51332001d536e286013df1398992262ebf08f204", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -987,9 +987,9 @@ dependencies = [\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.1.4\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35055b1021724f4eb5262eb49130eebff23fc59fc5a14160e05faad8eeb36673\"\n+checksum = \"332570860c2edf2d57914987bf9e24835425f75825086b6ba7d1e6a3e4f1f254\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "c9259a1502c8d8c518eb586ba91e1702669d1ddb", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -184,16 +184,18 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.cancel();\n     }\n \n-    /// Adds a span/label to be included in the resulting snippet.\n+    /// Appends a labeled span to the diagnostic.\n     ///\n-    /// This is pushed onto the [`MultiSpan`] that was created when the diagnostic\n-    /// was first built. That means it will be shown together with the original\n-    /// span/label, *not* a span added by one of the `span_{note,warn,help,suggestions}` methods.\n+    /// Labels are used to convey additional context for the diagnostic's primary span. They will\n+    /// be shown together with the original diagnostic's span, *not* with spans added by\n+    /// `span_note`, `span_help`, etc. Therefore, if the primary span is not displayable (because\n+    /// the span is `DUMMY_SP` or the source code isn't found), labels will not be displayed\n+    /// either.\n     ///\n-    /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n-    /// the `Span` supplied when creating the diagnostic is primary.\n-    ///\n-    /// [`MultiSpan`]: ../rustc_span/struct.MultiSpan.html\n+    /// Implementation-wise, the label span is pushed onto the [`MultiSpan`] that was created when\n+    /// the diagnostic was constructed. However, the label span is *not* considered a\n+    /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n+    /// primary.\n     pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self {\n         self.0.diagnostic.span_label(span, label);\n         self"}, {"sha": "f30b23591d2ab289f1d0afb6e7d6ab7a3e63a273", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -420,7 +420,9 @@ impl<'tcx> Body<'tcx> {\n     /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all\n     /// locals that are neither arguments nor the return place).\n     #[inline]\n-    pub fn vars_and_temps_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {\n+    pub fn vars_and_temps_iter(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = Local> + ExactSizeIterator {\n         let arg_count = self.arg_count;\n         let local_count = self.local_decls.len();\n         (arg_count + 1..local_count).map(Local::new)"}, {"sha": "094c1513118679bf3e16a327f14dd698f9ee754b", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -459,6 +459,7 @@ impl Inliner<'tcx> {\n                     tcx: self.tcx,\n                     callsite_span: callsite.source_info.span,\n                     body_span: callee_body.span,\n+                    always_live_locals: BitSet::new_filled(callee_body.local_decls.len()),\n                 };\n \n                 // Map all `Local`s, `SourceScope`s and `BasicBlock`s to new ones\n@@ -490,6 +491,34 @@ impl Inliner<'tcx> {\n                     }\n                 }\n \n+                // If there are any locals without storage markers, give them storage only for the\n+                // duration of the call.\n+                for local in callee_body.vars_and_temps_iter() {\n+                    if integrator.always_live_locals.contains(local) {\n+                        let new_local = integrator.map_local(local);\n+                        caller_body[callsite.block].statements.push(Statement {\n+                            source_info: callsite.source_info,\n+                            kind: StatementKind::StorageLive(new_local),\n+                        });\n+                    }\n+                }\n+                if let Some(block) = callsite.target {\n+                    // To avoid repeated O(n) insert, push any new statements to the end and rotate\n+                    // the slice once.\n+                    let mut n = 0;\n+                    for local in callee_body.vars_and_temps_iter().rev() {\n+                        if integrator.always_live_locals.contains(local) {\n+                            let new_local = integrator.map_local(local);\n+                            caller_body[block].statements.push(Statement {\n+                                source_info: callsite.source_info,\n+                                kind: StatementKind::StorageDead(new_local),\n+                            });\n+                            n += 1;\n+                        }\n+                    }\n+                    caller_body[block].statements.rotate_right(n);\n+                }\n+\n                 // Insert all of the (mapped) parts of the callee body into the caller.\n                 caller_body.local_decls.extend(\n                     // FIXME(eddyb) make `Range<Local>` iterable so that we can use\n@@ -670,6 +699,7 @@ struct Integrator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     callsite_span: Span,\n     body_span: Span,\n+    always_live_locals: BitSet<Local>,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -759,6 +789,15 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n+        if let StatementKind::StorageLive(local) | StatementKind::StorageDead(local) =\n+            statement.kind\n+        {\n+            self.always_live_locals.remove(local);\n+        }\n+        self.super_statement(statement, location);\n+    }\n+\n     fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, loc: Location) {\n         // Don't try to modify the implicit `_0` access on return (`return` terminators are\n         // replaced down below anyways)."}, {"sha": "3427c83a18f2a36afc440b2f6c036d901e39765c", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -23,6 +23,8 @@ extern \"Rust\" {\n     // (the code expanding that attribute macro generates those functions), or to call\n     // the default implementations in libstd (`__rdl_alloc` etc. in `library/std/src/alloc.rs`)\n     // otherwise.\n+    // The rustc fork of LLVM also special-cases these function names to be able to optimize them\n+    // like `malloc`, `realloc`, and `free`, respectively.\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;"}, {"sha": "ad9d1238370ec1d93fbe82fb3fab3be6d8c24859", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -36,7 +36,7 @@ features = ['read_core', 'elf', 'macho', 'pe']\n rand = \"0.7\"\n \n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n-dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n+dlmalloc = { version = \"0.2.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }"}, {"sha": "5c969741592e62179b267247b9a2609e0c7cf772", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1341,6 +1341,9 @@ fn metadata_access_times() {\n #[test]\n fn symlink_hard_link() {\n     let tmpdir = tmpdir();\n+    if !got_symlink_permission(&tmpdir) {\n+        return;\n+    };\n \n     // Create \"file\", a file.\n     check!(fs::File::create(tmpdir.join(\"file\")));"}, {"sha": "da899773dbb0d463233bfcb4492fcbdcaf81bc04", "filename": "library/std/src/sys/sgx/abi/mem.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -12,6 +12,18 @@ pub(crate) unsafe fn rel_ptr_mut<T>(offset: u64) -> *mut T {\n \n extern \"C\" {\n     static ENCLAVE_SIZE: usize;\n+    static HEAP_BASE: u64;\n+    static HEAP_SIZE: usize;\n+}\n+\n+/// Returns the base memory address of the heap\n+pub(crate) fn heap_base() -> *const u8 {\n+    unsafe { rel_ptr_mut(HEAP_BASE) }\n+}\n+\n+/// Returns the size of the heap\n+pub(crate) fn heap_size() -> usize {\n+    unsafe { HEAP_SIZE }\n }\n \n // Do not remove inline: will result in relocation failure"}, {"sha": "4aea28cb83e231eb646772f2b66632a69864602b", "filename": "library/std/src/sys/sgx/alloc.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,4 +1,7 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr;\n+use crate::sys::sgx::abi::mem as sgx_mem;\n+use core::sync::atomic::{AtomicBool, Ordering};\n \n use super::waitqueue::SpinMutex;\n \n@@ -10,7 +13,48 @@ use super::waitqueue::SpinMutex;\n // dlmalloc.c from C to Rust.\n #[cfg_attr(test, linkage = \"available_externally\")]\n #[export_name = \"_ZN16__rust_internals3std3sys3sgx5alloc8DLMALLOCE\"]\n-static DLMALLOC: SpinMutex<dlmalloc::Dlmalloc> = SpinMutex::new(dlmalloc::DLMALLOC_INIT);\n+static DLMALLOC: SpinMutex<dlmalloc::Dlmalloc<Sgx>> =\n+    SpinMutex::new(dlmalloc::Dlmalloc::new_with_allocator(Sgx {}));\n+\n+struct Sgx;\n+\n+unsafe impl dlmalloc::Allocator for Sgx {\n+    /// Allocs system resources\n+    fn alloc(&self, _size: usize) -> (*mut u8, usize, u32) {\n+        static INIT: AtomicBool = AtomicBool::new(false);\n+\n+        // No ordering requirement since this function is protected by the global lock.\n+        if !INIT.swap(true, Ordering::Relaxed) {\n+            (sgx_mem::heap_base() as _, sgx_mem::heap_size(), 0)\n+        } else {\n+            (ptr::null_mut(), 0, 0)\n+        }\n+    }\n+\n+    fn remap(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize, _can_move: bool) -> *mut u8 {\n+        ptr::null_mut()\n+    }\n+\n+    fn free_part(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize) -> bool {\n+        false\n+    }\n+\n+    fn free(&self, _ptr: *mut u8, _size: usize) -> bool {\n+        return false;\n+    }\n+\n+    fn can_release_part(&self, _flags: u32) -> bool {\n+        false\n+    }\n+\n+    fn allocates_zeros(&self) -> bool {\n+        false\n+    }\n+\n+    fn page_size(&self) -> usize {\n+        0x1000\n+    }\n+}\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "ef0ca3dd478cc5249653f550876a23794c628c3c", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -18,7 +18,7 @@\n \n use crate::alloc::{GlobalAlloc, Layout, System};\n \n-static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n+static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "48518ef0dd8cf33cefcf6182f5047778d1a76dfb", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -46,7 +46,9 @@ fn write_header(out: &mut String, class: Option<&str>) {\n }\n \n fn write_code(out: &mut String, src: &str) {\n-    Classifier::new(src).highlight(&mut |highlight| {\n+    // This replace allows to fix how the code source with DOS backline characters is displayed.\n+    let src = src.replace(\"\\r\\n\", \"\\n\");\n+    Classifier::new(&src).highlight(&mut |highlight| {\n         match highlight {\n             Highlight::Token { text, class } => string(out, Escape(text), class),\n             Highlight::EnterSpan { class } => enter_span(out, class),"}, {"sha": "4400f85681d8a7d5110da6bbd205c0277223eb08", "filename": "src/librustdoc/html/highlight/fixtures/dos_line.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -0,0 +1,3 @@\n+<span class=\"kw\">pub</span> <span class=\"kw\">fn</span> <span class=\"ident\">foo</span>() {\n+<span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n+}"}, {"sha": "f57f52d6f087554ae57537cb98be73daa4f67663", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,17 +1,6 @@\n use super::write_code;\n use expect_test::expect_file;\n \n-#[test]\n-fn test_html_highlighting() {\n-    let src = include_str!(\"fixtures/sample.rs\");\n-    let html = {\n-        let mut out = String::new();\n-        write_code(&mut out, src);\n-        format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out)\n-    };\n-    expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n-}\n-\n const STYLE: &str = r#\"\n <style>\n .kw { color: #8959A8; }\n@@ -23,3 +12,24 @@ const STYLE: &str = r#\"\n .question-mark { color: #ff9011; }\n </style>\n \"#;\n+\n+#[test]\n+fn test_html_highlighting() {\n+    let src = include_str!(\"fixtures/sample.rs\");\n+    let html = {\n+        let mut out = String::new();\n+        write_code(&mut out, src);\n+        format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out)\n+    };\n+    expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n+}\n+\n+#[test]\n+fn test_dos_backline() {\n+    let src = \"pub fn foo() {\\r\\n\\\n+    println!(\\\"foo\\\");\\r\\n\\\n+}\\r\\n\";\n+    let mut html = String::new();\n+    write_code(&mut html, src);\n+    expect_file![\"fixtures/dos_line.html\"].assert_eq(&html);\n+}"}, {"sha": "70748633117fb27e2bf0185b0dcb27f2920712e5", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -4,7 +4,7 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n use core::ops::Range;\n-use pulldown_cmark::{Event, Parser};\n+use pulldown_cmark::{Event, Parser, Tag};\n use rustc_session::lint;\n use std::iter::Peekable;\n use std::str::CharIndices;\n@@ -196,14 +196,17 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n \n             let mut tags = Vec::new();\n             let mut is_in_comment = None;\n+            let mut in_code_block = false;\n \n             let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n \n             for (event, range) in p {\n                 match event {\n-                    Event::Html(text) | Event::Text(text) => {\n+                    Event::Start(Tag::CodeBlock(_)) => in_code_block = true,\n+                    Event::Html(text) | Event::Text(text) if !in_code_block => {\n                         extract_tags(&mut tags, &text, range, &mut is_in_comment, &report_diag)\n                     }\n+                    Event::End(Tag::CodeBlock(_)) => in_code_block = false,\n                     _ => {}\n                 }\n             }"}, {"sha": "ab3dc3fba5ef6eb78b2205ca1d893d20cabbbbb2", "filename": "src/test/codegen/internalize-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Finternalize-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Finternalize-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finternalize-closures.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n \n pub fn main() {\n "}, {"sha": "a91e8e817e4037b881ade59c3ca7a3f4b81687d8", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,26 +1,34 @@\n-// compile-flags: -O\n+// compile-flags: -O -Zmerge-functions=disabled\n // ignore-x86\n // ignore-arm\n // ignore-emscripten\n // ignore-gnux32\n // ignore 32-bit platforms (LLVM has a bug with them)\n \n-// See issue #37945.\n+// Check that LLVM understands that `Iter` pointer is not null. Issue #37945.\n \n #![crate_type = \"lib\"]\n \n use std::slice::Iter;\n \n-// CHECK-LABEL: @is_empty_1\n #[no_mangle]\n pub fn is_empty_1(xs: Iter<f32>) -> bool {\n-// CHECK-NOT: icmp eq float* {{.*}}, null\n+// CHECK-LABEL: @is_empty_1(\n+// CHECK-NEXT:  start:\n+// CHECK-NEXT:    [[A:%.*]] = icmp ne i32* %xs.1, null\n+// CHECK-NEXT:    tail call void @llvm.assume(i1 [[A]])\n+// CHECK-NEXT:    [[B:%.*]] = icmp eq i32* %xs.0, %xs.1\n+// CHECK-NEXT:    ret i1 [[B:%.*]]\n     {xs}.next().is_none()\n }\n \n-// CHECK-LABEL: @is_empty_2\n #[no_mangle]\n pub fn is_empty_2(xs: Iter<f32>) -> bool {\n-// CHECK-NOT: icmp eq float* {{.*}}, null\n+// CHECK-LABEL: @is_empty_2\n+// CHECK-NEXT:  start:\n+// CHECK-NEXT:    [[C:%.*]] = icmp ne i32* %xs.1, null\n+// CHECK-NEXT:    tail call void @llvm.assume(i1 [[C]])\n+// CHECK-NEXT:    [[D:%.*]] = icmp eq i32* %xs.0, %xs.1\n+// CHECK-NEXT:    ret i1 [[D:%.*]]\n     xs.map(|&x| x).next().is_none()\n }"}, {"sha": "cee4128c650401efcdef96d140938552b44a1e76", "filename": "src/test/codegen/vec-shrink-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-shrink-panic.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -15,9 +15,9 @@ pub fn shrink_to_fit(vec: &mut Vec<u32>) {\n \n // CHECK-LABEL: @issue71861\n #[no_mangle]\n-pub fn issue71861(n: usize) -> Box<[u32]> {\n+pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n     // CHECK-NOT: panic\n-    vec![0; n].into_boxed_slice()\n+    vec.into_boxed_slice()\n }\n \n // CHECK-LABEL: @issue75636"}, {"sha": "07994eb3c16613170e83220a715df13a0c14d475", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -40,6 +40,7 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22"}, {"sha": "99497a6fc791c18525b8f148e2a40769ee21cfb2", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -65,12 +65,16 @@\n -                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _9 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n       }\n   \n -     bb3: {\n +     bb1: {\n++         StorageDead(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n           StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n           StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47"}, {"sha": "092ff42c3b66da9c156ed8c1421fe806f155ff30", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -36,11 +36,15 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n -                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::intrinsics::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n++         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n +         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n       }\n   \n       bb2: {\n++         StorageDead(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n++         StorageDead(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n           StorageDead(_5);                 // scope 2 at $DIR/inline-shims.rs:12:39: 12:40\n           return;                          // scope 0 at $DIR/inline-shims.rs:13:2: 13:2\n +     }"}, {"sha": "9c2fc4beb5eb1fff379e6bb1e5bf6a2a67a92d18", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -87,3 +87,24 @@ pub fn h() {}\n /// <!--\n //~^ ERROR Unclosed HTML comment\n pub fn i() {}\n+\n+/// hello\n+///\n+/// ```\n+/// uiapp.run(&env::args().collect::<Vec<_>>());\n+/// ```\n+pub fn j() {}\n+\n+// Check that nested codeblocks are working as well\n+/// hello\n+///\n+/// ``````markdown\n+/// normal markdown\n+///\n+/// ```\n+/// uiapp.run(&env::args().collect::<Vec<_>>());\n+/// ```\n+///\n+/// <Vec<_> shouldn't warn!\n+/// ``````\n+pub fn k() {}"}, {"sha": "72f32ecf7ea22602d1e54cf18e3c5712ea897fd8", "filename": "src/test/ui/mir/auxiliary/issue_76375_aux.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,8 +1,8 @@\n // edition:2018\n-// compile-flags: -Z mir-opt-level=2 -Z unsound-mir-opts\n+// compile-flags: -Z mir-opt-level=2\n \n #[inline(always)]\n-pub fn f(s: bool) -> String {\n+pub fn copy_prop(s: bool) -> String {\n     let a = \"Hello world!\".to_string();\n     let b = a;\n     let c = b;\n@@ -12,3 +12,9 @@ pub fn f(s: bool) -> String {\n         String::new()\n     }\n }\n+\n+#[inline(always)]\n+pub fn dest_prop(x: &[u8]) -> &[u8] {\n+    let y = &x[..x.len()];\n+    y\n+}"}, {"sha": "a7772cb1fe68dba6d78b4efcc7488374bcca5373", "filename": "src/test/ui/mir/issue-76375.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -1,15 +1,27 @@\n+// Regression test for issue #76375.\n+//\n // edition:2018\n // build-pass\n-// compile-flags: -Z mir-opt-level=2 -L.\n+// compile-flags: -Z mir-opt-level=2\n // aux-build:issue_76375_aux.rs\n \n #![crate_type = \"lib\"]\n \n extern crate issue_76375_aux;\n \n pub async fn g() {\n-    issue_76375_aux::f(true);\n+    issue_76375_aux::copy_prop(true);\n     h().await;\n }\n \n+pub async fn u() {\n+    let b = [0u8; 32];\n+    let mut i = 0;\n+    while i != 10 {\n+        issue_76375_aux::dest_prop(&b);\n+        h().await;\n+        i += 1;\n+    }\n+}\n+\n pub async fn h() {}"}, {"sha": "11575139adcf6656b069e3e14ffa45e6d771afc4", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcb3b39203a0d54269ca274601b8f73207fe10d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=efcb3b39203a0d54269ca274601b8f73207fe10d", "patch": "@@ -7,7 +7,6 @@ use std::path::{Path, PathBuf};\n use tar::Archive;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n-const RUSTC_VERSION: &str = include_str!(\"../../../version\");\n \n #[derive(Debug, Hash, Eq, PartialEq, Clone)]\n pub(crate) enum PkgType {\n@@ -177,10 +176,10 @@ impl Versions {\n     ) -> Result<String, Error> {\n         let component_name = package.tarball_component_name();\n         let version = match self.channel.as_str() {\n-            \"stable\" => RUSTC_VERSION.into(),\n+            \"stable\" => self.rustc_version().into(),\n             \"beta\" => \"beta\".into(),\n             \"nightly\" => \"nightly\".into(),\n-            _ => format!(\"{}-dev\", RUSTC_VERSION),\n+            _ => format!(\"{}-dev\", self.rustc_version()),\n         };\n \n         if package.target_independent() {\n@@ -199,6 +198,7 @@ impl Versions {\n     }\n \n     pub(crate) fn rustc_version(&self) -> &str {\n-        RUSTC_VERSION\n+        const RUSTC_VERSION: &str = include_str!(\"../../../version\");\n+        RUSTC_VERSION.trim()\n     }\n }"}]}