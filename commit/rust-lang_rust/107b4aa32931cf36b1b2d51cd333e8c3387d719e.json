{"sha": "107b4aa32931cf36b1b2d51cd333e8c3387d719e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwN2I0YWEzMjkzMWNmMzZiMWIyZDUxY2QzMzNlOGMzMzg3ZDcxOWU=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-21T16:20:46Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-23T22:35:44Z"}, "message": "Remove bare semicolons", "tree": {"sha": "c95309e94579f77e0d0f964764724c60f0d9e049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c95309e94579f77e0d0f964764724c60f0d9e049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107b4aa32931cf36b1b2d51cd333e8c3387d719e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107b4aa32931cf36b1b2d51cd333e8c3387d719e", "html_url": "https://github.com/rust-lang/rust/commit/107b4aa32931cf36b1b2d51cd333e8c3387d719e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107b4aa32931cf36b1b2d51cd333e8c3387d719e/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d782d777eccf1c7e441a930c54df3de6f91ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d782d777eccf1c7e441a930c54df3de6f91ca2", "html_url": "https://github.com/rust-lang/rust/commit/58d782d777eccf1c7e441a930c54df3de6f91ca2"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "873c22c35d855016fc3068ee2e2f3fa7c0bd52cb", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -207,7 +207,7 @@ impl CStore {\n                 visit(cstore, dep, ordering);\n             }\n             ordering.push(cnum);\n-        };\n+        }\n         for (&num, _) in self.metas.borrow().iter() {\n             visit(self, num, &mut ordering);\n         }"}, {"sha": "53fd857ffc1177aebb5d6b58e1f2c924ad5ba69e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -58,7 +58,7 @@ macro_rules! down_cast_data {\n             data\n         } else {\n             $this.sess.span_bug($sp, &format!(\"unexpected data kind: {:?}\", $id));\n-        };\n+        }\n     };\n }\n "}, {"sha": "62befb3b992a7c4e2a4bb6c395394e1fd6cadcd5", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -480,7 +480,7 @@ macro_rules! return_if_metadata_created_in_meantime {\n                                 .find_metadata_for_unique_id($unique_type_id) {\n             Some(metadata) => return MetadataCreationResult::new(metadata, true),\n             None => { /* proceed normally */ }\n-        };\n+        }\n     )\n }\n "}, {"sha": "1957f1efa4774ebecd524423814108a3a326b941", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -28,7 +28,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n     let krate = {\n         struct Stripper<'a> {\n             stripped: &'a mut DefIdSet\n-        };\n+        }\n         impl<'a> fold::DocFolder for Stripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 if i.is_hidden_from_doc() {\n@@ -60,7 +60,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n     let krate = {\n         struct ImplStripper<'a> {\n             stripped: &'a mut DefIdSet\n-        };\n+        }\n         impl<'a> fold::DocFolder for ImplStripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 if let clean::ImplItem(clean::Impl{"}, {"sha": "271aba680a2d66ee1979816cd556b84b4a555596", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -1019,7 +1019,7 @@ mod tests {\n     fn wtf8buf_from_iterator() {\n         fn f(values: &[u32]) -> Wtf8Buf {\n             values.iter().map(|&c| CodePoint::from_u32(c).unwrap()).collect::<Wtf8Buf>()\n-        };\n+        }\n         assert_eq!(f(&[0x61, 0xE9, 0x20, 0x1F4A9]).bytes, b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");\n \n         assert_eq!(f(&[0xD83D, 0xDCA9]).bytes, b\"\\xF0\\x9F\\x92\\xA9\");  // Magic!\n@@ -1038,7 +1038,7 @@ mod tests {\n             let mut string = initial.iter().map(c).collect::<Wtf8Buf>();\n             string.extend(extended.iter().map(c));\n             string\n-        };\n+        }\n \n         assert_eq!(e(&[0x61, 0xE9], &[0x20, 0x1F4A9]).bytes,\n                    b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");"}, {"sha": "0e05ac53bc8780536cfec774d30d74a3269ef963", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -102,7 +102,7 @@ fn test_get_dbpath_for_term() {\n     fn x(t: &str) -> String {\n         let p = get_dbpath_for_term(t).expect(\"no terminfo entry found\");\n         p.to_str().unwrap().to_string()\n-    };\n+    }\n     assert!(x(\"screen\") == \"/usr/share/terminfo/s/screen\");\n     assert!(get_dbpath_for_term(\"\") == None);\n     env::set_var(\"TERMINFO_DIRS\", \":\");"}, {"sha": "cfe75779536a293cd890cdfc8458f616134a5d67", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107b4aa32931cf36b1b2d51cd333e8c3387d719e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=107b4aa32931cf36b1b2d51cd333e8c3387d719e", "patch": "@@ -924,7 +924,7 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n             } else {\n                 None\n             }\n-        };\n+        }\n         filtered.into_iter().filter_map(filter).collect()\n     };\n "}]}