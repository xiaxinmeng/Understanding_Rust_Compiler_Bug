{"sha": "dab3bd6cda23064e6726bd046c903096ef03cbd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjNiZDZjZGEyMzA2NGU2NzI2YmQwNDZjOTAzMDk2ZWYwM2NiZDA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-09T13:53:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:41:21Z"}, "message": "Create lint store during plugin registration\n\nRemove lint store from Session", "tree": {"sha": "21753fa2cf259aedc75118222b04e2e507aa4b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21753fa2cf259aedc75118222b04e2e507aa4b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab3bd6cda23064e6726bd046c903096ef03cbd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab3bd6cda23064e6726bd046c903096ef03cbd0", "html_url": "https://github.com/rust-lang/rust/commit/dab3bd6cda23064e6726bd046c903096ef03cbd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab3bd6cda23064e6726bd046c903096ef03cbd0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da56d1d20113355047f5e6e3d5686ea1c7589d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/da56d1d20113355047f5e6e3d5686ea1c7589d99", "html_url": "https://github.com/rust-lang/rust/commit/da56d1d20113355047f5e6e3d5686ea1c7589d99"}], "stats": {"total": 186, "additions": 83, "deletions": 103}, "files": [{"sha": "04181e197258d4667297e82d3cda6012ec6b2d93", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -3483,6 +3483,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_interface\",\n+ \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_mir\",\n  \"rustc_plugin\","}, {"sha": "8208cc26ed30cc084f18f521b916170b0446ce0c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -35,7 +35,7 @@ use crate::util::common::time;\n use errors::DiagnosticBuilder;\n use std::slice;\n use std::default::Default as StdDefault;\n-use rustc_data_structures::sync::{ReadGuard, ParallelIterator, join, par_iter};\n+use rustc_data_structures::sync::{ParallelIterator, join, par_iter};\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -452,7 +452,7 @@ pub struct LateContext<'a, 'tcx> {\n     pub access_levels: &'a AccessLevels,\n \n     /// The store of registered lints and the lint levels.\n-    lint_store: ReadGuard<'a, LintStore>,\n+    lint_store: &'tcx LintStore,\n \n     last_node_with_lint_attrs: hir::HirId,\n \n@@ -1320,7 +1320,7 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: tcx.sess.lint_store.borrow(),\n+        lint_store: &tcx.lint_store,\n         last_node_with_lint_attrs: tcx.hir().as_local_hir_id(module_def_id).unwrap(),\n         generics: None,\n         only_module: true,\n@@ -1352,7 +1352,7 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n \n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n-    let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n+    let mut passes: Vec<_> = tcx.lint_store.late_module_passes\n                                 .iter().map(|pass| (pass)()).collect();\n \n     if !passes.is_empty() {\n@@ -1370,7 +1370,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: tcx.sess.lint_store.borrow(),\n+        lint_store: &tcx.lint_store,\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n@@ -1394,7 +1394,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n }\n \n fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n-    let mut passes = tcx.sess.lint_store.borrow()\n+    let mut passes = tcx.lint_store\n         .late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();\n \n     if !tcx.sess.opts.debugging_opts.no_interleave_lints {\n@@ -1410,7 +1410,7 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, b\n             });\n         }\n \n-        let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n+        let mut passes: Vec<_> = tcx.lint_store.late_module_passes\n                                     .iter().map(|pass| (pass)()).collect();\n \n         for pass in &mut passes {\n@@ -1571,7 +1571,7 @@ impl Decodable for LintId {\n     fn decode<D: Decoder>(d: &mut D) -> Result<LintId, D::Error> {\n         let s = d.read_str()?;\n         ty::tls::with(|tcx| {\n-            match tcx.sess.lint_store.borrow().find_lints(&s) {\n+            match tcx.lint_store.find_lints(&s) {\n                 Ok(ids) => {\n                     if ids.len() != 0 {\n                         panic!(\"invalid lint-id `{}`\", s);"}, {"sha": "3c35bdae66e9d5ab2f9721d53f50104be82459bc", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -777,11 +777,11 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n \n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n-    let store = tcx.sess.lint_store.borrow();\n+    let store = &tcx.lint_store;\n     let mut builder = LintLevelMapBuilder {\n         levels: LintLevelSets::builder(tcx.sess, &store),\n         tcx: tcx,\n-        store: &*store,\n+        store: store,\n     };\n     let krate = tcx.hir().krate();\n "}, {"sha": "bd2460cfab116ed3b17de3c7c591ce2f78495aae", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -14,7 +14,7 @@ use crate::util::common::{duration_to_secs_str, ErrorReported};\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n-    self, Lrc, Lock, OneThread, Once, RwLock, AtomicU64, AtomicUsize, Ordering,\n+    self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n \n@@ -77,9 +77,11 @@ pub struct Session {\n     /// if the value stored here has been affected by path remapping.\n     pub working_dir: (PathBuf, bool),\n \n-    // FIXME: `lint_store` and `buffered_lints` are not thread-safe,\n-    // but are only used in a single thread.\n-    pub lint_store: RwLock<lint::LintStore>,\n+    /// This is intended to be used from a single thread.\n+    ///\n+    /// FIXME: there was a previous comment about this not being thread safe,\n+    /// but it's not clear how or why that's the case. The LintBuffer itself is certainly thread\n+    /// safe at least from a \"Rust safety\" standpoint.\n     pub buffered_lints: Lock<Option<lint::LintBuffer>>,\n \n     /// Set of `(DiagnosticId, Option<Span>, message)` tuples tracking\n@@ -1213,7 +1215,6 @@ fn build_session_(\n         sysroot,\n         local_crate_source_file,\n         working_dir,\n-        lint_store: RwLock::new(lint::LintStore::new()),\n         buffered_lints: Lock::new(Some(Default::default())),\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),"}, {"sha": "a70ff37b7a04cf7c18aae523c15d62a363d5b1b0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -1035,6 +1035,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n+    pub lint_store: Lrc<lint::LintStore>,\n+\n     pub dep_graph: DepGraph,\n \n     pub prof: SelfProfilerRef,\n@@ -1199,6 +1201,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n+        lint_store: Lrc<lint::LintStore>,\n         cstore: &'tcx CrateStoreDyn,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n@@ -1268,6 +1271,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         GlobalCtxt {\n             sess: s,\n+            lint_store,\n             cstore,\n             arena: WorkerLocal::new(|_| Arena::default()),\n             interners,"}, {"sha": "a9e4e6db1c75f1d238c3b7f951d1492cc6c2cdce", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -16,6 +16,7 @@ log = \"0.4\"\n env_logger = { version = \"0.7\", default-features = false }\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "8793b7f5130a006a266328277188f0d5d9bef95f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -202,9 +202,13 @@ pub fn run_compiler(\n                     interface::run_compiler(config, |compiler| {\n                         let sopts = &compiler.session().opts;\n                         if sopts.describe_lints {\n+                            let lint_store = rustc_lint::new_lint_store(\n+                                sopts.debugging_opts.no_interleave_lints,\n+                                compiler.session().unstable_options(),\n+                            );\n                             describe_lints(\n                                 compiler.session(),\n-                                &*compiler.session().lint_store.borrow(),\n+                                &lint_store,\n                                 false\n                             );\n                             return;\n@@ -321,12 +325,14 @@ pub fn run_compiler(\n             return sess.compile_status();\n         }\n \n-        compiler.register_plugins()?;\n+        {\n+            let (_, _, lint_store) = &*compiler.register_plugins()?.peek();\n \n-        // Lint plugins are registered; now we can process command line flags.\n-        if sess.opts.describe_lints {\n-            describe_lints(&sess, &sess.lint_store.borrow(), true);\n-            return sess.compile_status();\n+            // Lint plugins are registered; now we can process command line flags.\n+            if sess.opts.describe_lints {\n+                describe_lints(&sess, &lint_store, true);\n+                return sess.compile_status();\n+            }\n         }\n \n         compiler.expansion()?;"}, {"sha": "f9efd00f6983ca9b3c7dac7f9769039df1f10dc9", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -117,6 +117,7 @@ declare_box_region_type!(\n /// Returns `None` if we're aborting after handling -W help.\n pub fn configure_and_expand(\n     sess: Lrc<Session>,\n+    lint_store: Lrc<lint::LintStore>,\n     cstore: Lrc<CStore>,\n     krate: ast::Crate,\n     crate_name: &str,\n@@ -134,6 +135,7 @@ pub fn configure_and_expand(\n         let resolver_arenas = Resolver::arenas();\n         let res = configure_and_expand_inner(\n             sess,\n+            &lint_store,\n             &*cstore,\n             krate,\n             &crate_name,\n@@ -227,7 +229,7 @@ pub fn register_plugins<'a>(\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n-) -> Result<(ast::Crate, PluginInfo)> {\n+) -> Result<(ast::Crate, PluginInfo, Lrc<lint::LintStore>)> {\n     krate = time(sess, \"attributes injection\", || {\n         syntax_ext::cmdline_attrs::inject(\n             krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr\n@@ -278,7 +280,12 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let mut registry = Registry::new(sess, krate.span);\n+    let mut lint_store = rustc_lint::new_lint_store(\n+        sess.opts.debugging_opts.no_interleave_lints,\n+        sess.unstable_options(),\n+    );\n+\n+    let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n \n     time(sess, \"plugin registration\", || {\n         for registrar in registrars {\n@@ -289,36 +296,20 @@ pub fn register_plugins<'a>(\n \n     let Registry {\n         syntax_exts,\n-        early_lint_passes,\n-        late_lint_passes,\n-        lints,\n-        lint_groups,\n         llvm_passes,\n         attributes,\n         ..\n     } = registry;\n \n-    let mut ls = sess.lint_store.borrow_mut();\n-    ls.register_lints(&lints);\n-    for pass in early_lint_passes {\n-        ls.register_early_pass(pass);\n-    }\n-    for pass in late_lint_passes {\n-        ls.register_late_pass(pass);\n-    }\n-\n-    for (name, (to, deprecated_name)) in lint_groups {\n-        ls.register_group(true, name, deprecated_name, to);\n-    }\n-\n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n     *sess.plugin_attributes.borrow_mut() = attributes;\n \n-    Ok((krate, PluginInfo { syntax_exts }))\n+    Ok((krate, PluginInfo { syntax_exts }, Lrc::new(lint_store)))\n }\n \n fn configure_and_expand_inner<'a>(\n     sess: &'a Session,\n+    lint_store: &'a lint::LintStore,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n@@ -329,7 +320,7 @@ fn configure_and_expand_inner<'a>(\n     time(sess, \"pre-AST-expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n-            &*sess.lint_store.borrow(),\n+            lint_store,\n             &krate,\n             true,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new());\n@@ -539,6 +530,7 @@ fn configure_and_expand_inner<'a>(\n \n pub fn lower_to_hir(\n     sess: &Session,\n+    lint_store: &lint::LintStore,\n     cstore: &CStore,\n     resolver: &mut Resolver<'_>,\n     dep_graph: &DepGraph,\n@@ -559,7 +551,7 @@ pub fn lower_to_hir(\n     time(sess, \"early lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n-            &*sess.lint_store.borrow(),\n+            lint_store,\n             &krate,\n             false,\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n@@ -826,6 +818,7 @@ impl BoxedGlobalCtxt {\n \n pub fn create_global_ctxt(\n     compiler: &Compiler,\n+    lint_store: Lrc<lint::LintStore>,\n     mut hir_forest: hir::map::Forest,\n     defs: hir::map::Definitions,\n     resolutions: Resolutions,\n@@ -863,6 +856,7 @@ pub fn create_global_ctxt(\n \n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n+            lint_store,\n             cstore,\n             local_providers,\n             extern_providers,"}, {"sha": "bb1221ead98bc55709c32f173343aaefc9b162d8", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -2,9 +2,11 @@ use crate::interface::{Compiler, Result};\n use crate::passes::{self, BoxedResolver, ExpansionResult, BoxedGlobalCtxt, PluginInfo};\n \n use rustc_incremental::DepGraphFuture;\n+use rustc_data_structures::sync::Lrc;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::util::common::{time, ErrorReported};\n use rustc::hir;\n+use rustc::lint::LintStore;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n@@ -74,8 +76,8 @@ pub(crate) struct Queries {\n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n-    register_plugins: Query<(ast::Crate, PluginInfo)>,\n-    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>,\n+    register_plugins: Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>,\n+    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n@@ -106,7 +108,7 @@ impl Compiler {\n         })\n     }\n \n-    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, PluginInfo)>> {\n+    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>> {\n         self.queries.register_plugins.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let krate = self.parse()?.take();\n@@ -148,17 +150,20 @@ impl Compiler {\n \n     pub fn expansion(\n         &self\n-    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>)>> {\n+    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>> {\n         self.queries.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n-            let (krate, plugin_info) = self.register_plugins()?.take();\n+            let (krate, plugin_info, lint_store) = self.register_plugins()?.take();\n             passes::configure_and_expand(\n                 self.sess.clone(),\n+                lint_store.clone(),\n                 self.cstore().clone(),\n                 krate,\n                 &crate_name,\n                 plugin_info,\n-            ).map(|(krate, resolver)| (krate, Steal::new(Rc::new(RefCell::new(resolver)))))\n+            ).map(|(krate, resolver)| {\n+                (krate, Steal::new(Rc::new(RefCell::new(resolver))), lint_store)\n+            })\n         })\n     }\n \n@@ -185,9 +190,11 @@ impl Compiler {\n             let peeked = expansion_result.peek();\n             let krate = &peeked.0;\n             let resolver = peeked.1.steal();\n+            let lint_store = &peeked.2;\n             let hir = Steal::new(resolver.borrow_mut().access(|resolver| {\n                 passes::lower_to_hir(\n                     self.session(),\n+                    lint_store,\n                     self.cstore(),\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n@@ -212,11 +219,13 @@ impl Compiler {\n         self.queries.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n+            let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?;\n             let hir = hir.peek();\n             let (ref hir_forest, ref expansion) = *hir;\n             Ok(passes::create_global_ctxt(\n                 self,\n+                lint_store,\n                 hir_forest.steal(),\n                 expansion.defs.steal(),\n                 expansion.resolutions.steal(),"}, {"sha": "8f11dc93727280c2345cbffca81cab15c0f4ff9d", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_errors::registry::Registry;\n-use rustc_lint;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_mir;\n use rustc_passes;\n@@ -108,12 +107,6 @@ pub fn create_session(\n \n     let codegen_backend = get_codegen_backend(&sess);\n \n-    rustc_lint::register_builtins(&mut sess.lint_store.get_mut(),\n-        sess.opts.debugging_opts.no_interleave_lints);\n-    if sess.unstable_options() {\n-        rustc_lint::register_internals(&mut sess.lint_store.get_mut());\n-    }\n-\n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &sess, &*codegen_backend);\n     sess.parse_sess.config = cfg;"}, {"sha": "3c2396f6cdb071d5f707c2cd0c8ae4881c233528", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -189,10 +189,21 @@ late_lint_passes!(declare_combined_late_pass, [pub BuiltinCombinedLateLintPass])\n \n late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLintPass]);\n \n+pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> lint::LintStore {\n+    let mut lint_store = lint::LintStore::new();\n+\n+    register_builtins(&mut lint_store, no_interleave_lints);\n+    if internal_lints {\n+        register_internals(&mut lint_store);\n+    }\n+\n+    lint_store\n+}\n+\n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n /// `rustc::lint::builtin`).\n-pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n+fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n     macro_rules! add_lint_group {\n         ($name:expr, $($lint:ident),*) => (\n             store.register_group(false, $name, None, vec![$(LintId::of($lint)),*]);\n@@ -327,7 +338,7 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n }\n \n-pub fn register_internals(store: &mut lint::LintStore) {\n+fn register_internals(store: &mut lint::LintStore) {\n     store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_early_pass(|| box DefaultHashTypes::new());\n     store.register_lints(&LintPassImpl::get_lints());"}, {"sha": "223956a4f5e3f922069e0d353f979ee298f11808", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3bd6cda23064e6726bd046c903096ef03cbd0/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=dab3bd6cda23064e6726bd046c903096ef03cbd0", "patch": "@@ -1,8 +1,7 @@\n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n-use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n+use rustc::lint::LintStore;\n use rustc::session::Session;\n-use rustc::util::nodemap::FxHashMap;\n \n use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n use syntax_expand::base::MacroExpanderFn;\n@@ -26,6 +25,8 @@ pub struct Registry<'a> {\n     /// from the plugin registrar.\n     pub sess: &'a Session,\n \n+    pub lint_store: &'a mut LintStore,\n+\n     #[doc(hidden)]\n     pub args_hidden: Option<Vec<ast::NestedMetaItem>>,\n \n@@ -35,18 +36,6 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub syntax_exts: Vec<NamedSyntaxExtension>,\n \n-    #[doc(hidden)]\n-    pub early_lint_passes: Vec<fn() -> EarlyLintPassObject>,\n-\n-    #[doc(hidden)]\n-    pub late_lint_passes: Vec<fn() -> LateLintPassObject>,\n-\n-    #[doc(hidden)]\n-    pub lints: Vec<&'static Lint>,\n-\n-    #[doc(hidden)]\n-    pub lint_groups: FxHashMap<&'static str, (Vec<LintId>, Option<&'static str>)>,\n-\n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n \n@@ -56,16 +45,13 @@ pub struct Registry<'a> {\n \n impl<'a> Registry<'a> {\n     #[doc(hidden)]\n-    pub fn new(sess: &'a Session, krate_span: Span) -> Registry<'a> {\n+    pub fn new(sess: &'a Session, lint_store: &'a mut LintStore, krate_span: Span) -> Registry<'a> {\n         Registry {\n             sess,\n+            lint_store,\n             args_hidden: None,\n             krate_span,\n             syntax_exts: vec![],\n-            lints: vec![],\n-            early_lint_passes: vec![],\n-            late_lint_passes: vec![],\n-            lint_groups: FxHashMap::default(),\n             llvm_passes: vec![],\n             attributes: vec![],\n         }\n@@ -103,32 +89,6 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), ext);\n     }\n \n-    /// Register a compiler lint pass.\n-    pub fn register_lints(&mut self, lints: &[&'static Lint]) {\n-        self.lints.extend(lints);\n-    }\n-\n-    /// Register a compiler lint pass.\n-    pub fn register_early_lint_pass(&mut self, lint_pass: fn() -> EarlyLintPassObject) {\n-        self.early_lint_passes.push(lint_pass);\n-    }\n-\n-    /// Register a compiler lint pass.\n-    pub fn register_late_lint_pass(&mut self, lint_pass: fn() -> LateLintPassObject) {\n-        self.late_lint_passes.push(lint_pass);\n-    }\n-    /// Register a lint group.\n-    pub fn register_lint_group(\n-        &mut self,\n-        name: &'static str,\n-        deprecated_name: Option<&'static str>,\n-        to: Vec<&'static Lint>\n-    ) {\n-        self.lint_groups.insert(name,\n-                                (to.into_iter().map(|x| LintId::of(x)).collect(),\n-                                 deprecated_name));\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}]}