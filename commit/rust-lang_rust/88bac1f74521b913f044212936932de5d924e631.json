{"sha": "88bac1f74521b913f044212936932de5d924e631", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YmFjMWY3NDUyMWI5MTNmMDQ0MjEyOTM2OTMyZGU1ZDkyNGU2MzE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-10T23:28:25Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-16T15:45:08Z"}, "message": "remove procsrv module", "tree": {"sha": "76dc0db69dd6930286abaaf96a54073669f18156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76dc0db69dd6930286abaaf96a54073669f18156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88bac1f74521b913f044212936932de5d924e631", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJ9c9OhXB85uXPmbOeLE+KEl68t8FAlmUaIQACgkQeLE+KEl6\n8t8ytg/+N1znuKB/H5G6LxwUus1PrcBDsXByrmnr/7UXj2RZ+n5W2KDlACvTVlrC\nCJ7XLJr2Hcg2mWXXH4Msx8MOBpkaVflVCMCcJxPVLEBKB5ra/9sSPrhomqeeZvAn\n72YU44bZFMTMEyU7UH5T6mj3v3p6FZZKOicX//ml6QmhnEAx9gxLicIEx11B4Yts\nSbbE4aqWVW1JZNkKPb4ONdBEODh3bRcQAlLZ7Pd4CTlqQdyD8hM5aJI5Ky2FJZ7Y\nEE8WyrFItaoZBZJ0ot9uTllT+EaOT/tUPau8YmD5sQ2jQX1IWwYPCohZAfhJGsqY\nub6LmUczJToB1MFPjkAA+Z1TppvXkXoQOSZtU8JwnsZk9claztG1Esy98/Yuvpw4\n5qT77BV3G5F4n15AvEmDesyJXfVnneYvoiE2nWw1if3v0Zn+AjIgwpO7vgvd2YhG\n/T8hreuvqtyEP28ZFNvBP84Z2lnfUpODySFIVqTJrAwFKGQ8af+OF++LGJhvPLjc\nDiNNPXPT5BPbWM1cpdV84apNLcN1KH4uWwBnXNPp02ueR5xb+TGS63UusUZXRFvo\nySgJ0qtO5JVRCamF+nCbtmfYNrj7y4ROHUuFOBLWKdHOUXN2dREoCzUPxi4SjzNm\nWev/x/hlc3GlTltJFgECDRKUx8Tr5wUNNmZJXnYuFxGEi/xLcUE=\n=lr7H\n-----END PGP SIGNATURE-----", "payload": "tree 76dc0db69dd6930286abaaf96a54073669f18156\nparent 6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4\nauthor Andy Russell <arussell123@gmail.com> 1502407705 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1502898308 -0400\n\nremove procsrv module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88bac1f74521b913f044212936932de5d924e631", "html_url": "https://github.com/rust-lang/rust/commit/88bac1f74521b913f044212936932de5d924e631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88bac1f74521b913f044212936932de5d924e631/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "html_url": "https://github.com/rust-lang/rust/commit/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4"}], "stats": {"total": 79, "additions": 28, "deletions": 51}, "files": [{"sha": "20239e974788bfac32b6fa34aa4ca9ab8e0ab219", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88bac1f74521b913f044212936932de5d924e631/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bac1f74521b913f044212936932de5d924e631/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=88bac1f74521b913f044212936932de5d924e631", "patch": "@@ -39,7 +39,6 @@ use util::logv;\n \n use self::header::EarlyProps;\n \n-pub mod procsrv;\n pub mod util;\n mod json;\n pub mod header;"}, {"sha": "ab9eb5b9a5dab6c01f0f838a33128add7bfa6993", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::env;\n-use std::ffi::OsString;\n-use std::path::PathBuf;\n-use std::process::Command;\n-\n-/// Get the name of the environment variable that holds dynamic library\n-/// locations\n-pub fn dylib_env_var() -> &'static str {\n-    if cfg!(windows) {\n-        \"PATH\"\n-    } else if cfg!(target_os = \"macos\") {\n-        \"DYLD_LIBRARY_PATH\"\n-    } else if cfg!(target_os = \"haiku\") {\n-        \"LIBRARY_PATH\"\n-    } else {\n-        \"LD_LIBRARY_PATH\"\n-    }\n-}\n-\n-/// Add `lib_path` and `aux_path` (if it is `Some`) to the dynamic library\n-/// env var\n-pub fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n-    // Need to be sure to put both the lib_path and the aux path in the dylib\n-    // search path for the child.\n-    let var = dylib_env_var();\n-    let mut path = env::split_paths(&env::var_os(var).unwrap_or(OsString::new()))\n-        .collect::<Vec<_>>();\n-    if let Some(p) = aux_path {\n-        path.insert(0, PathBuf::from(p))\n-    }\n-    path.insert(0, PathBuf::from(lib_path));\n-\n-    // Add the new dylib search path var\n-    let newpath = env::join_paths(&path).unwrap();\n-    cmd.env(var, newpath);\n-}"}, {"sha": "af6b4c279318a9622814af02ec07151dfe973347", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88bac1f74521b913f044212936932de5d924e631/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bac1f74521b913f044212936932de5d924e631/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=88bac1f74521b913f044212936932de5d924e631", "patch": "@@ -17,22 +17,35 @@ use errors::{self, ErrorKind, Error};\n use filetime::FileTime;\n use json;\n use header::TestProps;\n-use procsrv;\n use test::TestPaths;\n use util::logv;\n \n+use std::collections::HashMap;\n use std::collections::HashSet;\n use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, File, create_dir_all};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus, Stdio};\n use std::str;\n-use std::collections::HashMap;\n \n use extract_gdb_version;\n \n+/// The name of the environment variable that holds dynamic library locations.\n+pub fn dylib_env_var() -> &'static str {\n+    if cfg!(windows) {\n+        \"PATH\"\n+    } else if cfg!(target_os = \"macos\") {\n+        \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n+    } else {\n+        \"LD_LIBRARY_PATH\"\n+    }\n+}\n+\n pub fn run(config: Config, testpaths: &TestPaths) {\n     match &*config.target {\n \n@@ -1318,7 +1331,18 @@ actual:\\n\\\n             .stderr(Stdio::piped())\n             .stdin(Stdio::piped());\n \n-        procsrv::add_target_env(&mut command, lib_path, aux_path);\n+        // Need to be sure to put both the lib_path and the aux path in the dylib\n+        // search path for the child.\n+        let mut path = env::split_paths(&env::var_os(dylib_env_var()).unwrap_or(OsString::new()))\n+            .collect::<Vec<_>>();\n+        if let Some(p) = aux_path {\n+            path.insert(0, PathBuf::from(p))\n+        }\n+        path.insert(0, PathBuf::from(lib_path));\n+\n+        // Add the new dylib search path var\n+        let newpath = env::join_paths(&path).unwrap();\n+        command.env(dylib_env_var(), newpath);\n \n         let mut child = command.spawn().expect(&format!(\"failed to exec `{:?}`\", &command));\n         if let Some(input) = input {\n@@ -2077,7 +2101,7 @@ actual:\\n\\\n            .env(\"RUSTDOC\",\n                cwd.join(&self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path passed\")))\n            .env(\"TMPDIR\", &tmpdir)\n-           .env(\"LD_LIB_PATH_ENVVAR\", procsrv::dylib_env_var())\n+           .env(\"LD_LIB_PATH_ENVVAR\", dylib_env_var())\n            .env(\"HOST_RPATH_DIR\", cwd.join(&self.config.compile_lib_path))\n            .env(\"TARGET_RPATH_DIR\", cwd.join(&self.config.run_lib_path))\n            .env(\"LLVM_COMPONENTS\", &self.config.llvm_components)"}]}