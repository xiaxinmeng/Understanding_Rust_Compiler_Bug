{"sha": "d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "node_id": "C_kwDOAAsO6NoAKGQ1YzA1ZmNjOGFiN2VhZTQ5OWQ3YmQ5YmQ0NGQ1ZDAwNWZkYzFmYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-09T22:14:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-09T22:14:11Z"}, "message": "Rollup merge of #93057 - frengor:iter_collect_into, r=m-ou-se\n\nAdd Iterator::collect_into\n\nThis PR adds `Iterator::collect_into` as proposed by ``@cormacrelf`` in #48597 (see https://github.com/rust-lang/rust/pull/48597#issuecomment-842083688).\nFollowup of #92982.\n\nThis adds the following method to the Iterator trait:\n\n```rust\nfn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n```", "tree": {"sha": "d8ab9d2f934625188ed11b075326350e58f30b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ab9d2f934625188ed11b075326350e58f30b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKSazCRBK7hj4Ov3rIwAA9SIIAAd3m7KE5cx5v+v3wl+miOfV\nvxWMjL7yS1QqBkbacDZWkBXQvXgcWzhEBycTpZj7N+8xakPRJLn2uYoVkoDPHoU2\nAmHaEDcQFsnHWHzobeD86h4BQXrd6mBXRqI2o2iBf+SiU8g7Q3fkgWtb5S332wub\nlwFmCBeYe9lceozqogsr5nlqNfA2zXEtraqzNnliYXpu+tKig/6k6vjB8RgR/Kjf\n27RaPnEJYkMcHxrNkOnRU0hoI3IuptbJFpG6YIBXfa5F5mch7S2nKY+kmRfoao1w\n7rbcj9Uh/I5FyCSPAeLpJpiyJyX9s/NG6N/rXLiHPbNj8tk0kHe3szzOzR1S7Q8=\n=ctGi\n-----END PGP SIGNATURE-----\n", "payload": "tree d8ab9d2f934625188ed11b075326350e58f30b7d\nparent 2567d0f8837d351beba9c30545833fdf4bdc7054\nparent 63eddb3e68355c3c6739b6fa3c3d37f106408922\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646864051 +0100\ncommitter GitHub <noreply@github.com> 1646864051 +0100\n\nRollup merge of #93057 - frengor:iter_collect_into, r=m-ou-se\n\nAdd Iterator::collect_into\n\nThis PR adds `Iterator::collect_into` as proposed by ``@cormacrelf`` in #48597 (see https://github.com/rust-lang/rust/pull/48597#issuecomment-842083688).\nFollowup of #92982.\n\nThis adds the following method to the Iterator trait:\n\n```rust\nfn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "html_url": "https://github.com/rust-lang/rust/commit/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2567d0f8837d351beba9c30545833fdf4bdc7054", "url": "https://api.github.com/repos/rust-lang/rust/commits/2567d0f8837d351beba9c30545833fdf4bdc7054", "html_url": "https://github.com/rust-lang/rust/commit/2567d0f8837d351beba9c30545833fdf4bdc7054"}, {"sha": "63eddb3e68355c3c6739b6fa3c3d37f106408922", "url": "https://api.github.com/repos/rust-lang/rust/commits/63eddb3e68355c3c6739b6fa3c3d37f106408922", "html_url": "https://github.com/rust-lang/rust/commit/63eddb3e68355c3c6739b6fa3c3d37f106408922"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "b38df1c2d022816355738ac142932b3fac8ad0de", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "patch": "@@ -1859,6 +1859,77 @@ pub trait Iterator {\n         try_process(self, |i| i.collect())\n     }\n \n+    /// Collects all the items from an iterator into a collection.\n+    ///\n+    /// This method consumes the iterator and adds all its items to the\n+    /// passed collection. The collection is then returned, so the call chain\n+    /// can be continued.\n+    ///\n+    /// This is useful when you already have a collection and wants to add\n+    /// the iterator items to it.\n+    ///\n+    /// This method is a convenience method to call [Extend::extend](trait.Extend.html),\n+    /// but instead of being called on a collection, it's called on an iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = vec![0, 1];\n+    ///\n+    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n+    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n+    ///\n+    /// assert_eq!(vec![0, 1, 2, 4, 6, 10, 20, 30], vec);\n+    /// ```\n+    ///\n+    /// `Vec` can have a manual set capacity to avoid reallocating it:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n+    ///\n+    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n+    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n+    ///\n+    /// assert_eq!(6, vec.capacity());\n+    /// println!(\"{:?}\", vec);\n+    /// ```\n+    ///\n+    /// The returned mutable reference can be used to continue the call chain:\n+    ///\n+    /// ```\n+    /// #![feature(iter_collect_into)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n+    ///\n+    /// let count = a.iter().collect_into(&mut vec).iter().count();\n+    ///\n+    /// assert_eq!(count, vec.len());\n+    /// println!(\"Vec len is {}\", count);\n+    ///\n+    /// let count = a.iter().collect_into(&mut vec).iter().count();\n+    ///\n+    /// assert_eq!(count, vec.len());\n+    /// println!(\"Vec len now is {}\", count);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue = \"94780\")]\n+    fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n+    where\n+        Self: Sized,\n+    {\n+        collection.extend(self);\n+        collection\n+    }\n+\n     /// Consumes an iterator, creating two collections from it.\n     ///\n     /// The predicate passed to `partition()` can return `true`, or `false`."}, {"sha": "32bd68e3d2554a2c717d428c8635cff70ac1eaf8", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "patch": "@@ -543,6 +543,14 @@ fn test_try_collect() {\n     assert_eq!(v, Continue(vec![4, 5]));\n }\n \n+#[test]\n+fn test_collect_into() {\n+    let a = vec![1, 2, 3, 4, 5];\n+    let mut b = Vec::new();\n+    a.iter().cloned().collect_into(&mut b);\n+    assert!(a == b);\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}, {"sha": "dc3740228274bcbfc7525e86e13cad8b65f75c91", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d5c05fcc8ab7eae499d7bd9bd44d5d005fdc1fc3", "patch": "@@ -62,6 +62,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_log)]\n #![feature(iter_advance_by)]\n+#![feature(iter_collect_into)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]"}]}