{"sha": "c72c6e01c8020c7a285b76a9b61934e3501b80f3", "node_id": "C_kwDOAAsO6NoAKGM3MmM2ZTAxYzgwMjBjN2EyODViNzZhOWI2MTkzNGUzNTAxYjgwZjM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-04T08:59:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-04T08:59:20Z"}, "message": "Merge the `~const` and `impl const` checks and add some explanatory notes", "tree": {"sha": "01541dd2c18f1f923a430c9511de92da304c5abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01541dd2c18f1f923a430c9511de92da304c5abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72c6e01c8020c7a285b76a9b61934e3501b80f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72c6e01c8020c7a285b76a9b61934e3501b80f3", "html_url": "https://github.com/rust-lang/rust/commit/c72c6e01c8020c7a285b76a9b61934e3501b80f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72c6e01c8020c7a285b76a9b61934e3501b80f3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33bcea8f614f5019012f16b49dc3cd934326ca87", "url": "https://api.github.com/repos/rust-lang/rust/commits/33bcea8f614f5019012f16b49dc3cd934326ca87", "html_url": "https://github.com/rust-lang/rust/commit/33bcea8f614f5019012f16b49dc3cd934326ca87"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "e502b9b54e3021ab926d96706f2d7b1d6fc81acf", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c72c6e01c8020c7a285b76a9b61934e3501b80f3/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c6e01c8020c7a285b76a9b61934e3501b80f3/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=c72c6e01c8020c7a285b76a9b61934e3501b80f3", "patch": "@@ -191,32 +191,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let tcx = self.tcx;\n-        if let hir::ItemKind::Impl(hir::Impl {\n-            constness: hir::Constness::Const,\n-            of_trait: Some(trait_ref),\n-            ..\n-        }) = item.kind\n-            && let Some(def_id) = trait_ref.trait_def_id()\n-        {\n-            let source_map = tcx.sess.source_map();\n-            if !tcx.has_attr(def_id, sym::const_trait) {\n-                tcx.sess\n-                    .struct_span_err(\n-                        source_map.guess_head_span(item.span),\n-                        \"const `impl`s must be for traits marked with `#[const_trait]`\",\n-                    )\n-                    .span_note(\n-                        source_map.guess_head_span(tcx.def_span(def_id)),\n-                        \"this trait must be annotated with `#[const_trait]`\",\n-                    )\n-                    .emit();\n-            }\n-        }\n-        intravisit::walk_item(self, item);\n-    }\n-\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "5f901d6995e4bd929fa766d5b2e73d43faf87494", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c72c6e01c8020c7a285b76a9b61934e3501b80f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c6e01c8020c7a285b76a9b61934e3501b80f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c72c6e01c8020c7a285b76a9b61934e3501b80f3", "patch": "@@ -309,8 +309,30 @@ impl<'tcx> WfPredicates<'tcx> {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n         } else {\n             if !tcx.has_attr(trait_ref.def_id, rustc_span::sym::const_trait) {\n-                tcx.sess\n-                    .span_err(self.span, \"~const can only be applied to `#[const_trait]` traits\");\n+                if let Some(item) = self.item &&\n+                   let hir::ItemKind::Impl(impl_) = item.kind &&\n+                   let Some(trait_) = &impl_.of_trait &&\n+                   let Some(def_id) = trait_.trait_def_id() &&\n+                   def_id == trait_ref.def_id\n+                {\n+                    let trait_name = tcx.item_name(def_id);\n+                    let mut err = tcx.sess.struct_span_err(\n+                        self.span,\n+                        &format!(\"const `impl` for trait `{trait_name}` which is not marked with `#[const_trait]`\"),\n+                    );\n+                    if def_id.is_local() {\n+                        let sp = tcx.def_span(def_id).shrink_to_lo();\n+                        err.span_suggestion(sp, &format!(\"mark `{trait_name}` as const\"), \"#[const_trait]\", rustc_errors::Applicability::MachineApplicable);\n+                    }\n+                    err.note(\"marking a trait with `#[const_trait]` ensures all default method bodies are `const`\");\n+                    err.note(\"adding a non-const method body in the future would be a breaking change\");\n+                    err.emit();\n+                } else {\n+                    tcx.sess.span_err(\n+                        self.span,\n+                        \"~const can only be applied to `#[const_trait]` traits\",\n+                    );\n+                }\n             }\n             self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n         };"}, {"sha": "2b4963991dbefacd4a08c3e1f9baba36831cca35", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c72c6e01c8020c7a285b76a9b61934e3501b80f3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c6e01c8020c7a285b76a9b61934e3501b80f3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs?ref=c72c6e01c8020c7a285b76a9b61934e3501b80f3", "patch": "@@ -1,10 +1,9 @@\n #![feature(const_trait_impl)]\n \n pub trait A {}\n-//~^ NOTE: this trait must be annotated with `#[const_trait]`\n+//~^ HELP: mark `A` as const\n \n impl const A for () {}\n-//~^ ERROR: const `impl`s must be for traits marked with `#[const_trait]`\n-//~| ERROR: ~const can only be applied to `#[const_trait]` traits\n+//~^ ERROR: const `impl` for trait `A` which is not marked with `#[const_trait]`\n \n fn main() {}"}, {"sha": "478adcf3e9e898d28cfd48addc6ad15f79c612f3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c72c6e01c8020c7a285b76a9b61934e3501b80f3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72c6e01c8020c7a285b76a9b61934e3501b80f3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr?ref=c72c6e01c8020c7a285b76a9b61934e3501b80f3", "patch": "@@ -1,20 +1,14 @@\n-error: const `impl`s must be for traits marked with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:6:1\n-   |\n-LL | impl const A for () {}\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: this trait must be annotated with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:3:1\n-   |\n-LL | pub trait A {}\n-   | ^^^^^^^^^^^\n-\n-error: ~const can only be applied to `#[const_trait]` traits\n+error: const `impl` for trait `A` which is not marked with `#[const_trait]`\n   --> $DIR/const-impl-requires-const-trait.rs:6:12\n    |\n+LL | pub trait A {}\n+   | - help: mark `A` as const: `#[const_trait]`\n+...\n LL | impl const A for () {}\n    |            ^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}