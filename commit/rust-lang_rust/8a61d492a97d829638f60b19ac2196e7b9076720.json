{"sha": "8a61d492a97d829638f60b19ac2196e7b9076720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNjFkNDkyYTk3ZDgyOTYzOGY2MGIxOWFjMjE5NmU3YjkwNzY3MjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-24T11:47:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T08:16:25Z"}, "message": "make inliner remove the fn_entry flag on Retag statements", "tree": {"sha": "9bf6c96d7fc97a7545cb629958def02a540e4aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf6c96d7fc97a7545cb629958def02a540e4aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a61d492a97d829638f60b19ac2196e7b9076720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a61d492a97d829638f60b19ac2196e7b9076720", "html_url": "https://github.com/rust-lang/rust/commit/8a61d492a97d829638f60b19ac2196e7b9076720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a61d492a97d829638f60b19ac2196e7b9076720/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ba4af258aa60a64a9e08b12a48ddab070e3efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ba4af258aa60a64a9e08b12a48ddab070e3efc", "html_url": "https://github.com/rust-lang/rust/commit/96ba4af258aa60a64a9e08b12a48ddab070e3efc"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "aa4004cf07bfc5df15b4ff182dde354a817ff7aa", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=8a61d492a97d829638f60b19ac2196e7b9076720", "patch": "@@ -152,6 +152,13 @@ macro_rules! make_mir_visitor {\n                 self.super_ascribe_user_ty(place, variance, user_ty, location);\n             }\n \n+            fn visit_retag(&mut self,\n+                           fn_entry: & $($mutability)* bool,\n+                           place: & $($mutability)* Place<'tcx>,\n+                           location: Location) {\n+                self.super_retag(fn_entry, place, location);\n+            }\n+\n             fn visit_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,\n@@ -371,13 +378,6 @@ macro_rules! make_mir_visitor {\n                         );\n                     }\n                     StatementKind::EndRegion(_) => {}\n-                    StatementKind::Retag { fn_entry: _, ref $($mutability)* place } => {\n-                        self.visit_place(\n-                            place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Retag),\n-                            location,\n-                        );\n-                    }\n                     StatementKind::SetDiscriminant{ ref $($mutability)* place, .. } => {\n                         self.visit_place(\n                             place,\n@@ -413,6 +413,9 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n+                    StatementKind::Retag { ref $($mutability)* fn_entry, ref $($mutability)* place } => {\n+                        self.visit_retag(fn_entry, place, location);\n+                    }\n                     StatementKind::AscribeUserType(\n                         ref $($mutability)* place,\n                         ref $($mutability)* variance,\n@@ -715,6 +718,17 @@ macro_rules! make_mir_visitor {\n                 self.visit_user_type_projection(user_ty);\n             }\n \n+            fn super_retag(&mut self,\n+                           _fn_entry: & $($mutability)* bool,\n+                           place: & $($mutability)* Place<'tcx>,\n+                           location: Location) {\n+                self.visit_place(\n+                    place,\n+                    PlaceContext::MutatingUse(MutatingUseContext::Retag),\n+                    location,\n+                );\n+            }\n+\n             fn super_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,"}, {"sha": "199cf5650fda8c2f6f5f82d2f239e26d56a1f560", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8a61d492a97d829638f60b19ac2196e7b9076720", "patch": "@@ -691,6 +691,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         self.in_cleanup_block = false;\n     }\n \n+    fn visit_retag(&mut self, fn_entry: &mut bool, place: &mut Place<'tcx>, loc: Location) {\n+        self.super_retag(fn_entry, place, loc);\n+\n+        // We have to patch all inlined retags to be aware that they are no longer\n+        // happening on function entry.\n+        *fn_entry = false;\n+    }\n+\n     fn visit_terminator_kind(&mut self, block: BasicBlock,\n                              kind: &mut TerminatorKind<'tcx>, loc: Location) {\n         self.super_terminator_kind(block, kind, loc);"}, {"sha": "4b3280ee5615177563158217234f2013b925571d", "filename": "src/test/mir-opt/inline-retag.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Ftest%2Fmir-opt%2Finline-retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a61d492a97d829638f60b19ac2196e7b9076720/src%2Ftest%2Fmir-opt%2Finline-retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-retag.rs?ref=8a61d492a97d829638f60b19ac2196e7b9076720", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z span_free_formats -Z mir-emit-retag\n+\n+// Tests that MIR inliner fixes up `Retag`'s `fn_entry` flag\n+\n+fn main() {\n+    println!(\"{}\", bar());\n+}\n+\n+#[inline(always)]\n+fn foo(x: &i32, y: &i32) -> bool {\n+    *x == *y\n+}\n+\n+fn bar() -> bool {\n+    let f = foo;\n+    f(&1, &-1)\n+}\n+\n+// END RUST SOURCE\n+// START rustc.bar.Inline.after.mir\n+// ...\n+//     bb0: {\n+//         ...\n+//         Retag(_3);\n+//         Retag(_6);\n+//         StorageLive(_9);\n+//         _9 = (*_3);\n+//         StorageLive(_10);\n+//         _10 = (*_6);\n+//         _0 = Eq(move _9, move _10);\n+//         ...\n+//         return;\n+//     }\n+// ...\n+// END rustc.bar.Inline.after.mir"}]}