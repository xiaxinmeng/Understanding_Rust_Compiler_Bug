{"sha": "0987b841987fb7ffc09848c185d671ff3bea7d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODdiODQxOTg3ZmI3ZmZjMDk4NDhjMTg1ZDY3MWZmM2JlYTdkMzU=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-09-21T00:40:48Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-04T02:36:34Z"}, "message": "rustc_span: refactor byte_pos_to_line_and_col", "tree": {"sha": "33f6ee3829ea66d3997062af13ae57afb980e831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f6ee3829ea66d3997062af13ae57afb980e831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0987b841987fb7ffc09848c185d671ff3bea7d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0987b841987fb7ffc09848c185d671ff3bea7d35", "html_url": "https://github.com/rust-lang/rust/commit/0987b841987fb7ffc09848c185d671ff3bea7d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0987b841987fb7ffc09848c185d671ff3bea7d35/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da2a5a27c9890100e3b56ec85879e312312b111", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da2a5a27c9890100e3b56ec85879e312312b111", "html_url": "https://github.com/rust-lang/rust/commit/8da2a5a27c9890100e3b56ec85879e312312b111"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "b57da5448ab36891d8f8bc9f6e735b0db87ed516", "filename": "compiler/rustc_span/src/caching_source_map_view.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0987b841987fb7ffc09848c185d671ff3bea7d35/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0987b841987fb7ffc09848c185d671ff3bea7d35/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcaching_source_map_view.rs?ref=0987b841987fb7ffc09848c185d671ff3bea7d35", "patch": "@@ -70,38 +70,16 @@ impl<'sm> CachingSourceMapView<'sm> {\n         }\n \n         // No cache hit ...\n-        let mut oldest = 0;\n-        for index in 1..self.line_cache.len() {\n-            if self.line_cache[index].time_stamp < self.line_cache[oldest].time_stamp {\n-                oldest = index;\n-            }\n-        }\n-\n-        let cache_entry = &mut self.line_cache[oldest];\n+        let oldest = self.oldest_cache_entry_index();\n \n         // If the entry doesn't point to the correct file, fix it up\n-        if !file_contains(&cache_entry.file, pos) {\n-            let file_valid;\n-            if self.source_map.files().len() > 0 {\n-                let file_index = self.source_map.lookup_source_file_idx(pos);\n-                let file = &self.source_map.files()[file_index];\n-\n-                if file_contains(&file, pos) {\n-                    cache_entry.file = file.clone();\n-                    cache_entry.file_index = file_index;\n-                    file_valid = true;\n-                } else {\n-                    file_valid = false;\n-                }\n-            } else {\n-                file_valid = false;\n-            }\n-\n-            if !file_valid {\n-                return None;\n-            }\n+        if !file_contains(&self.line_cache[oldest].file, pos) {\n+            let (file, file_index) = self.file_for_position(pos)?;\n+            self.line_cache[oldest].file = file;\n+            self.line_cache[oldest].file_index = file_index;\n         }\n \n+        let cache_entry = &mut self.line_cache[oldest];\n         let line_index = cache_entry.file.lookup_line(pos).unwrap();\n         let line_bounds = cache_entry.file.line_bounds(line_index);\n \n@@ -111,6 +89,31 @@ impl<'sm> CachingSourceMapView<'sm> {\n \n         Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))\n     }\n+\n+    fn oldest_cache_entry_index(&self) -> usize {\n+        let mut oldest = 0;\n+\n+        for idx in 1..self.line_cache.len() {\n+            if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {\n+                oldest = idx;\n+            }\n+        }\n+\n+        oldest\n+    }\n+\n+    fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {\n+        if !self.source_map.files().is_empty() {\n+            let file_idx = self.source_map.lookup_source_file_idx(pos);\n+            let file = &self.source_map.files()[file_idx];\n+\n+            if file_contains(file, pos) {\n+                return Some((file.clone(), file_idx));\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n #[inline]"}]}