{"sha": "b41b38cb7f16e1a622738aff591268083dca2e39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWIzOGNiN2YxNmUxYTYyMjczOGFmZjU5MTI2ODA4M2RjYTJlMzk=", "commit": {"author": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-13T21:01:57Z"}, "committer": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-26T21:34:42Z"}, "message": "clippy_lint: Refactor 'ref_option_ref'", "tree": {"sha": "60c0b884db3ebdfaa12371f871e80d33fef63a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c0b884db3ebdfaa12371f871e80d33fef63a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41b38cb7f16e1a622738aff591268083dca2e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41b38cb7f16e1a622738aff591268083dca2e39", "html_url": "https://github.com/rust-lang/rust/commit/b41b38cb7f16e1a622738aff591268083dca2e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41b38cb7f16e1a622738aff591268083dca2e39/comments", "author": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd76a9d1c4140624d758e5b8727869db3f9207c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd76a9d1c4140624d758e5b8727869db3f9207c", "html_url": "https://github.com/rust-lang/rust/commit/bdd76a9d1c4140624d758e5b8727869db3f9207c"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "d4b09848ab6089e362f383c8526895b1bb03bb32", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b41b38cb7f16e1a622738aff591268083dca2e39/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41b38cb7f16e1a622738aff591268083dca2e39/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=b41b38cb7f16e1a622738aff591268083dca2e39", "patch": "@@ -34,12 +34,6 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n \n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n-        self.check_ref_option_ref(cx, ty);\n-    }\n-}\n-\n-impl RefOptionRef {\n-    fn check_ref_option_ref(&self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n             if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;"}]}