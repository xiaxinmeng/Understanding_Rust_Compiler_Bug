{"sha": "9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "node_id": "C_kwDOAAsO6NoAKDliNTExNWY5MmI4NGNlOTVhZWQzZThmNmZhYTNmNTQ2ZjZjZjRiZGQ", "commit": {"author": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-02-28T18:13:21Z"}, "committer": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-03-30T12:55:03Z"}, "message": "rustdoc: run more HIR validation to mirror rustc", "tree": {"sha": "8bd5f955a4d849fba93170caa873c6b57603e8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd5f955a4d849fba93170caa873c6b57603e8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgh2d+T/QMoKuxUQmn1LuLfU+BwZ\nEuSNYGnaFxqueP1i8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFcVizPySAwFQyowO609GbiTr7r7/mwZpUR/ffIIoqtICa05ypoaymdoozCOPftlLz\n+gTlF++k5M96Gpa0pBUw0=\n-----END SSH SIGNATURE-----", "payload": "tree 8bd5f955a4d849fba93170caa873c6b57603e8c6\nparent 8a7ca936e61d04399198911ee2b07ac110bf17b0\nauthor Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1677608001 +0100\ncommitter Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1680180903 +0200\n\nrustdoc: run more HIR validation to mirror rustc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "html_url": "https://github.com/rust-lang/rust/commit/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/comments", "author": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7ca936e61d04399198911ee2b07ac110bf17b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "html_url": "https://github.com/rust-lang/rust/commit/8a7ca936e61d04399198911ee2b07ac110bf17b0"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "b392ba058360d7c8d5a2a5f522512a108229965a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -303,6 +303,9 @@ pub(crate) fn run_global_ctxt(\n \n     // HACK(jynelson) this calls an _extremely_ limited subset of `typeck`\n     // and might break if queries change their assumptions in the future.\n+    tcx.sess.time(\"type_collecting\", || {\n+        tcx.hir().for_each_module(|module| tcx.ensure().collect_mod_item_types(module))\n+    });\n \n     // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n     tcx.sess.time(\"item_types_checking\", || {"}, {"sha": "4969e8d195fb314bbd73556cd103374f6be643fe", "filename": "tests/rustdoc-ui/const_arg_in_type_position.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,6 @@\n+type Array<T, const N: usize> = [T; N];\n+\n+fn foo<const N: usize>() -> Array<N, ()> {\n+    //~^ ERROR constant provided when a type was expected\n+    unimplemented!()\n+}"}, {"sha": "ea05920dea79b99ff891a5b6e6ac1c06b2635ce4", "filename": "tests/rustdoc-ui/const_arg_in_type_position.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/const_arg_in_type_position.rs:3:35\n+   |\n+LL | fn foo<const N: usize>() -> Array<N, ()> {\n+   |                                   ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "227be0cfc9ad998da2a4a0b7606e0f0a308e3a6e", "filename": "tests/rustdoc-ui/invalid-toplevel-const.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid-toplevel-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid-toplevel-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid-toplevel-const.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,2 @@\n+static CONST: Option<dyn Fn(& _)> = None;\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for static items [E0121]"}, {"sha": "953e332a32c5511f6a8b1caf3afe6dd089330c7d", "filename": "tests/rustdoc-ui/invalid-toplevel-const.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/invalid-toplevel-const.rs:2:31\n+   |\n+LL | static CONST: Option<dyn Fn(& _)> = None;\n+   |                               ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "6ab8c36f74041e4193dd236a1141de878c31525f", "filename": "tests/rustdoc-ui/invalid_associated_const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_associated_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_associated_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_associated_const.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,10 @@\n+#![feature(associated_const_equality)]\n+\n+trait T {\n+    type A: S<C<X = 0i32> = 34>;\n+    //~^ ERROR associated type bindings are not allowed here\n+}\n+\n+trait S {\n+    const C: i32;\n+}"}, {"sha": "1a8863fb18f5d73006227fb2e90abb78ea128e35", "filename": "tests/rustdoc-ui/invalid_associated_const.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,9 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/invalid_associated_const.rs:4:17\n+   |\n+LL |     type A: S<C<X = 0i32> = 34>;\n+   |                 ^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "c3f4fd63bac70bc43aa5d3b8368bf5d0eff78567", "filename": "tests/rustdoc-ui/invalid_const_in_lifetime_position.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,6 @@\n+trait X {\n+    type Y<'a>;\n+}\n+fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+//~^ ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n+//~| ERROR associated type takes 0 generic arguments but 1 generic argument"}, {"sha": "527729a8228626056a5acd4872ec1289dc784388", "filename": "tests/rustdoc-ui/invalid_const_in_lifetime_position.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,33 @@\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/invalid_const_in_lifetime_position.rs:4:26\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/invalid_const_in_lifetime_position.rs:2:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n+   |                            +++\n+\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/invalid_const_in_lifetime_position.rs:4:26\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                          ^--- help: remove these generics\n+   |                          |\n+   |                          expected 0 generic arguments\n+   |\n+note: associated type defined here, with 0 generic parameters\n+  --> $DIR/invalid_const_in_lifetime_position.rs:2:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "b8ddd80d5cb06a7a48c807a482f3893c80faf175", "filename": "tests/rustdoc-ui/invalid_const_in_type_position.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,4 @@\n+use std::ops::Generator;\n+\n+fn gen() -> impl Generator<{}> {}\n+//~^ERROR constant provided when a type was expected"}, {"sha": "27c9a730fb4aeef706d19f6001e6d7cc02e4b96f", "filename": "tests/rustdoc-ui/invalid_const_in_type_position.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_type_position.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/invalid_const_in_type_position.rs:3:28\n+   |\n+LL | fn gen() -> impl Generator<{}> {}\n+   |                            ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "3f8e68dc02002ca2ace7c32f7fba606208fe9bb1", "filename": "tests/rustdoc-ui/invalid_infered_static_and_const.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,2 @@\n+const FOO: dyn Fn() -> _ = \"\"; //~ ERROR E0121\n+static BOO: dyn Fn() -> _ = \"\"; //~ ERROR E0121"}, {"sha": "401020224d6a5f19f58adb3e3345bd4f585ff69b", "filename": "tests/rustdoc-ui/invalid_infered_static_and_const.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,15 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n+  --> $DIR/invalid_infered_static_and_const.rs:1:24\n+   |\n+LL | const FOO: dyn Fn() -> _ = \"\";\n+   |                        ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/invalid_infered_static_and_const.rs:2:25\n+   |\n+LL | static BOO: dyn Fn() -> _ = \"\";\n+   |                         ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "792563fd82b35e67790e66d44caa381948c77877", "filename": "tests/rustdoc-ui/mismatched_arg_count.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,12 @@\n+// ensures that we don't ICE when there are too many args supplied to the alias.\n+\n+trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+\n+fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+//~^ error: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+\n+fn main() {}"}, {"sha": "de58a014ee8fa6bff949e17e38ea989f4206423d", "filename": "tests/rustdoc-ui/mismatched_arg_count.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr?ref=9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/mismatched_arg_count.rs:9:29\n+   |\n+LL | fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+   |                             ^^^^^     -- help: remove this lifetime argument\n+   |                             |\n+   |                             expected 1 lifetime argument\n+   |\n+note: type alias defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/mismatched_arg_count.rs:7:6\n+   |\n+LL | type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+   |      ^^^^^ --\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}