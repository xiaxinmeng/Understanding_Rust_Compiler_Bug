{"sha": "0c55c069447b64dd9df020422c22c11aa4d3e99b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNTVjMDY5NDQ3YjY0ZGQ5ZGYwMjA0MjJjMjJjMTFhYTRkM2U5OWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T11:18:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T11:18:59Z"}, "message": "Merge nested use trees", "tree": {"sha": "bcaf536bb39e29dfaeb655977438f9654344ecfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcaf536bb39e29dfaeb655977438f9654344ecfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c55c069447b64dd9df020422c22c11aa4d3e99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c55c069447b64dd9df020422c22c11aa4d3e99b", "html_url": "https://github.com/rust-lang/rust/commit/0c55c069447b64dd9df020422c22c11aa4d3e99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c55c069447b64dd9df020422c22c11aa4d3e99b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3bf906c477048076faa8e18b50fc34175f6c14", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3bf906c477048076faa8e18b50fc34175f6c14", "html_url": "https://github.com/rust-lang/rust/commit/ef3bf906c477048076faa8e18b50fc34175f6c14"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "89bc975bd0534ccd9bb0db211bb65d74844c75f8", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0c55c069447b64dd9df020422c22c11aa4d3e99b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c55c069447b64dd9df020422c22c11aa4d3e99b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=0c55c069447b64dd9df020422c22c11aa4d3e99b", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use ra_syntax::{\n     algo::neighbor,\n     ast::{self, edit::AstNodeEdit, make},\n-    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T,\n+    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, TextRange, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -22,18 +22,15 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n     let tree: ast::UseTree = ctx.find_node_at_offset()?;\n-    let use_item = tree.syntax().parent().and_then(ast::UseItem::cast)?;\n-    let (merged, to_delete) = [Direction::Prev, Direction::Next]\n-        .iter()\n-        .copied()\n-        .filter_map(|dir| neighbor(&use_item, dir))\n-        .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n-        .find_map(|(use_item, use_tree)| {\n-            Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n-        })?;\n-    let mut offset = ctx.frange.range.start();\n-    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n-        edit.replace_ast(tree, merged);\n+    let (new_tree, to_delete) = if let Some(use_item) =\n+        tree.syntax().parent().and_then(ast::UseItem::cast)\n+    {\n+        let (merged, to_delete) = next_prev()\n+            .filter_map(|dir| neighbor(&use_item, dir))\n+            .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n+            .find_map(|(use_item, use_tree)| {\n+                Some((try_merge_trees(&tree, &use_tree)?, use_item.clone()))\n+            })?;\n \n         let mut range = to_delete.syntax().text_range();\n         let next_ws = to_delete\n@@ -44,14 +41,41 @@ pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n         if let Some(ws) = next_ws {\n             range = range.extend_to(&ws.syntax().text_range())\n         }\n-        edit.delete(range);\n-        if range.end() <= offset {\n-            offset -= range.len();\n+        (merged, range)\n+    } else {\n+        let (merged, to_delete) = next_prev()\n+            .filter_map(|dir| neighbor(&tree, dir))\n+            .find_map(|use_tree| Some((try_merge_trees(&tree, &use_tree)?, use_tree.clone())))?;\n+\n+        let mut range = to_delete.syntax().text_range();\n+        if let Some((dir, nb)) = next_prev().find_map(|dir| Some((dir, neighbor(&to_delete, dir)?)))\n+        {\n+            let nb_range = nb.syntax().text_range();\n+            if dir == Direction::Prev {\n+                range = TextRange::from_to(nb_range.end(), range.end());\n+            } else {\n+                range = TextRange::from_to(range.start(), nb_range.start());\n+            }\n+        }\n+        (merged, range)\n+    };\n+\n+    let mut offset = ctx.frange.range.start();\n+    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n+        edit.replace_ast(tree, new_tree);\n+        edit.delete(to_delete);\n+\n+        if to_delete.end() <= offset {\n+            offset -= to_delete.len();\n         }\n         edit.set_cursor(offset);\n     })\n }\n \n+fn next_prev() -> impl Iterator<Item = Direction> {\n+    [Direction::Next, Direction::Prev].iter().copied()\n+}\n+\n fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n     let lhs_path = old.path()?;\n     let rhs_path = new.path()?;\n@@ -134,20 +158,28 @@ use std::fmt<|>::Display;\n             r\"\n use std::fmt<|>::{Display, Debug};\n \",\n-        )\n+        );\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_merge_nested() {\n         check_assist(\n             merge_imports,\n             r\"\n use std::{fmt<|>::Debug, fmt::Display};\n \",\n             r\"\n-use std::{fmt::{Debug, Display}};\n+use std::{fmt<|>::{Debug, Display}};\n \",\n-        )\n+        );\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::{fmt::Debug, fmt<|>::Display};\n+\",\n+            r\"\n+use std::{fmt<|>::{Display, Debug}};\n+\",\n+        );\n     }\n }"}]}