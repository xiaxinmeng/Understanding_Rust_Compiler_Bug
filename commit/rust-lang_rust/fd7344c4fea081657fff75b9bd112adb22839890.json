{"sha": "fd7344c4fea081657fff75b9bd112adb22839890", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzM0NGM0ZmVhMDgxNjU3ZmZmNzViOWJkMTEyYWRiMjI4Mzk4OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T01:10:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T01:10:55Z"}, "message": "Auto merge of #27945 - Eljay:upgrade-hoedown, r=alexcrichton\n\nSome hoedown FFI changes:\r\n- `HOEDOWN_EXT_NO_INTRA_EMPHASIS` constant changed.\r\n- Updated/tidied up all callback function signatures.\r\n- All opaque data access has an additional layer of indirection for some reason (`hoedown_renderer_data`).\r\n\r\nThis also fixes #27862.", "tree": {"sha": "10157aa30e712387d35115b26bfbfa0a77e647fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10157aa30e712387d35115b26bfbfa0a77e647fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7344c4fea081657fff75b9bd112adb22839890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7344c4fea081657fff75b9bd112adb22839890", "html_url": "https://github.com/rust-lang/rust/commit/fd7344c4fea081657fff75b9bd112adb22839890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7344c4fea081657fff75b9bd112adb22839890/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc3573470f009fa078fe063700b8df2854e8499e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3573470f009fa078fe063700b8df2854e8499e", "html_url": "https://github.com/rust-lang/rust/commit/bc3573470f009fa078fe063700b8df2854e8499e"}, {"sha": "efc98fab26b54ce24e329dff85ca4cbfe3ad8bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc98fab26b54ce24e329dff85ca4cbfe3ad8bea", "html_url": "https://github.com/rust-lang/rust/commit/efc98fab26b54ce24e329dff85ca4cbfe3ad8bea"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "c98a54e451475f1da6280182f0288270a7b55dd0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 46, "deletions": 36, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fd7344c4fea081657fff75b9bd112adb22839890/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7344c4fea081657fff75b9bd112adb22839890/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=fd7344c4fea081657fff75b9bd112adb22839890", "patch": "@@ -24,7 +24,6 @@\n //! // ... something using html\n //! ```\n \n-#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n use libc;\n@@ -51,7 +50,7 @@ pub struct Markdown<'a>(pub &'a str);\n pub struct MarkdownWithToc<'a>(pub &'a str);\n \n const DEF_OUNIT: libc::size_t = 64;\n-const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 10;\n+const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 11;\n const HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n const HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n@@ -65,52 +64,63 @@ const HOEDOWN_EXTENSIONS: libc::c_uint =\n     HOEDOWN_EXT_STRIKETHROUGH | HOEDOWN_EXT_SUPERSCRIPT |\n     HOEDOWN_EXT_FOOTNOTES;\n \n-type hoedown_document = libc::c_void;  // this is opaque to us\n+enum hoedown_document {}\n \n type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *const hoedown_buffer, *mut libc::c_void);\n+                                 *const hoedown_buffer, *const hoedown_renderer_data);\n+\n+type blockquotefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                  *const hoedown_renderer_data);\n \n type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                              libc::c_int, *mut libc::c_void);\n+                              libc::c_int, *const hoedown_renderer_data);\n+\n+type blockhtmlfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                 *const hoedown_renderer_data);\n \n type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                *mut libc::c_void) -> libc::c_int;\n+                                *const hoedown_renderer_data) -> libc::c_int;\n \n type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n                              *const hoedown_buffer, *const hoedown_buffer,\n-                             *mut libc::c_void) -> libc::c_int;\n+                             *const hoedown_renderer_data) -> libc::c_int;\n+\n+type entityfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n+                               *const hoedown_renderer_data);\n \n type normaltextfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                  *mut libc::c_void);\n+                                  *const hoedown_renderer_data);\n+\n+#[repr(C)]\n+struct hoedown_renderer_data {\n+    opaque: *mut libc::c_void,\n+}\n \n #[repr(C)]\n struct hoedown_renderer {\n     opaque: *mut libc::c_void,\n \n     blockcode: Option<blockcodefn>,\n-    blockquote: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                     *mut libc::c_void)>,\n-    blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                    *mut libc::c_void)>,\n+    blockquote: Option<blockquotefn>,\n     header: Option<headerfn>,\n-    other_block_level_callbacks: [libc::size_t; 9],\n+\n+    other_block_level_callbacks: [libc::size_t; 11],\n+\n+    blockhtml: Option<blockhtmlfn>,\n \n     /* span level callbacks - NULL or return 0 prints the span verbatim */\n     autolink: libc::size_t, // unused\n     codespan: Option<codespanfn>,\n     other_span_level_callbacks_1: [libc::size_t; 7],\n     link: Option<linkfn>,\n-    other_span_level_callbacks_2: [libc::size_t; 5],\n-    // hoedown will add `math` callback here, but we use an old version of it.\n+    other_span_level_callbacks_2: [libc::size_t; 6],\n \n     /* low level callbacks - NULL copies input directly into the output */\n-    entity: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *mut libc::c_void)>,\n+    entity: Option<entityfn>,\n     normal_text: Option<normaltextfn>,\n \n     /* header and footer */\n-    doc_header: Option<extern \"C\" fn(*mut hoedown_buffer, *mut libc::c_void)>,\n-    doc_footer: Option<extern \"C\" fn(*mut hoedown_buffer, *mut libc::c_void)>,\n+    other_callbacks: [libc::size_t; 2],\n }\n \n #[repr(C)]\n@@ -120,7 +130,7 @@ struct hoedown_html_renderer_state {\n     flags: libc::c_uint,\n     link_attributes: Option<extern \"C\" fn(*mut hoedown_buffer,\n                                           *const hoedown_buffer,\n-                                          *mut libc::c_void)>,\n+                                          *const hoedown_renderer_data)>,\n }\n \n #[repr(C)]\n@@ -133,7 +143,7 @@ struct html_toc_data {\n \n struct MyOpaque {\n     dfltblk: extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                           *const hoedown_buffer, *mut libc::c_void),\n+                           *const hoedown_buffer, *const hoedown_renderer_data),\n     toc_builder: Option<TocBuilder>,\n }\n \n@@ -153,7 +163,7 @@ extern {\n         -> *mut hoedown_renderer;\n     fn hoedown_html_renderer_free(renderer: *mut hoedown_renderer);\n \n-    fn hoedown_document_new(rndr: *mut hoedown_renderer,\n+    fn hoedown_document_new(rndr: *const hoedown_renderer,\n                             extensions: libc::c_uint,\n                             max_nesting: libc::size_t) -> *mut hoedown_document;\n     fn hoedown_document_render(doc: *mut hoedown_document,\n@@ -212,11 +222,11 @@ thread_local!(pub static PLAYGROUND_KRATE: RefCell<Option<Option<String>>> = {\n \n pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n     extern fn block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n-                    lang: *const hoedown_buffer, opaque: *mut libc::c_void) {\n+                    lang: *const hoedown_buffer, data: *const hoedown_renderer_data) {\n         unsafe {\n             if orig_text.is_null() { return }\n \n-            let opaque = opaque as *mut hoedown_html_renderer_state;\n+            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let my_opaque: &MyOpaque = &*((*opaque).opaque as *const MyOpaque);\n             let text = (*orig_text).as_bytes();\n             let origtext = str::from_utf8(text).unwrap();\n@@ -228,7 +238,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 let rlang = str::from_utf8(rlang).unwrap();\n                 if !LangString::parse(rlang).rust {\n                     (my_opaque.dfltblk)(ob, orig_text, lang,\n-                                        opaque as *mut libc::c_void);\n+                                        opaque as *const hoedown_renderer_data);\n                     true\n                 } else {\n                     false\n@@ -261,7 +271,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n     }\n \n     extern fn header(ob: *mut hoedown_buffer, text: *const hoedown_buffer,\n-                     level: libc::c_int, opaque: *mut libc::c_void) {\n+                     level: libc::c_int, data: *const hoedown_renderer_data) {\n         // hoedown does this, we may as well too\n         unsafe { hoedown_buffer_puts(ob, \"\\n\\0\".as_ptr() as *const _); }\n \n@@ -280,7 +290,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         // This is a terrible hack working around how hoedown gives us rendered\n         // html for text rather than the raw text.\n \n-        let opaque = opaque as *mut hoedown_html_renderer_state;\n+        let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n         let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n \n         // Make sure our hyphenated ID is unique for this page\n@@ -320,7 +330,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n     extern fn codespan(\n         ob: *mut hoedown_buffer,\n         text: *const hoedown_buffer,\n-        _: *mut libc::c_void,\n+        _: *const hoedown_renderer_data,\n     ) -> libc::c_int {\n         let content = if text.is_null() {\n             \"\".to_string()\n@@ -375,7 +385,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n-                    opaque: *mut libc::c_void) {\n+                    data: *const hoedown_renderer_data) {\n         unsafe {\n             if text.is_null() { return }\n             let block_info = if lang.is_null() {\n@@ -387,7 +397,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             };\n             if !block_info.rust { return }\n             let text = (*text).as_bytes();\n-            let opaque = opaque as *mut hoedown_html_renderer_state;\n+            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n             let text = str::from_utf8(text).unwrap();\n             let lines = text.lines().map(|l| {\n@@ -402,9 +412,9 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n \n     extern fn header(_ob: *mut hoedown_buffer,\n                      text: *const hoedown_buffer,\n-                     level: libc::c_int, opaque: *mut libc::c_void) {\n+                     level: libc::c_int, data: *const hoedown_renderer_data) {\n         unsafe {\n-            let opaque = opaque as *mut hoedown_html_renderer_state;\n+            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n             if text.is_null() {\n                 tests.register_header(\"\", level as u32);\n@@ -514,11 +524,11 @@ pub fn plain_summary_line(md: &str) -> String {\n                        _link: *const hoedown_buffer,\n                        _title: *const hoedown_buffer,\n                        content: *const hoedown_buffer,\n-                       opaque: *mut libc::c_void) -> libc::c_int\n+                       data: *const hoedown_renderer_data) -> libc::c_int\n     {\n         unsafe {\n             if !content.is_null() && (*content).size > 0 {\n-                let ob = opaque as *mut hoedown_buffer;\n+                let ob = (*data).opaque as *mut hoedown_buffer;\n                 hoedown_buffer_put(ob, (*content).data as *const libc::c_char,\n                                    (*content).size);\n             }\n@@ -528,10 +538,10 @@ pub fn plain_summary_line(md: &str) -> String {\n \n     extern fn normal_text(_ob: *mut hoedown_buffer,\n                               text: *const hoedown_buffer,\n-                              opaque: *mut libc::c_void)\n+                              data: *const hoedown_renderer_data)\n     {\n         unsafe {\n-            let ob = opaque as *mut hoedown_buffer;\n+            let ob = (*data).opaque as *mut hoedown_buffer;\n             hoedown_buffer_put(ob, (*text).data as *const libc::c_char,\n                                (*text).size);\n         }"}, {"sha": "8ff3d82f2dde2cead36402a59c62d3e266c2f6ec", "filename": "src/rt/hoedown", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=fd7344c4fea081657fff75b9bd112adb22839890", "patch": "@@ -1 +1 @@\n-Subproject commit 238c4d57cce10d33b05cf52a91fc62a09f31ffbb\n+Subproject commit 8ff3d82f2dde2cead36402a59c62d3e266c2f6ec"}, {"sha": "6b56585ae8aba86ef5d7139495f4d48b9529de0f", "filename": "src/test/rustdoc/issue-27862.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd7344c4fea081657fff75b9bd112adb22839890/src%2Ftest%2Frustdoc%2Fissue-27862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7344c4fea081657fff75b9bd112adb22839890/src%2Ftest%2Frustdoc%2Fissue-27862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27862.rs?ref=fd7344c4fea081657fff75b9bd112adb22839890", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+/// Test  | Table\n+/// ------|-------------\n+/// t = b | id = \\|x\\| x\n+pub struct Foo; // @has issue_27862/struct.Foo.html //td 'id = |x| x'"}]}