{"sha": "50731df24e584e8ebc0097497169b431c005bf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzMxZGYyNGU1ODRlOGViYzAwOTc0OTcxNjliNDMxYzAwNWJmODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T02:16:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T02:16:35Z"}, "message": "Auto merge of #88217 - jackh726:rollup-3k74o2m, r=jackh726\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #87604 (CI: Verify commits in beta & stable are in upstream branches.)\n - #88057 (Update RELEASES to clarify attribute macro values.)\n - #88072 (Allow the iOS toolchain to be built on Linux)\n - #88170 (Update release note for 1.55.0.)\n - #88172 (Test that type alias impl trait happens in a submodule)\n - #88179 (Mailmap entry for myself)\n - #88182 (We meant to use a trait instead of lifetime here)\n - #88183 (test TAIT in different positions)\n - #88189 (Add TAIT struct test)\n - #88192 (Use of impl trait in an impl as the value for an associated type in a dyn)\n - #88194 (Test use of impl Trait in an impl as the value for an associated type in an impl trait)\n - #88197 (Test tait use in a fn type)\n - #88201 (Test that incomplete inference for TAITs fail)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "22dfdecbe76be21532ddb48d4da6b6a7554a1c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22dfdecbe76be21532ddb48d4da6b6a7554a1c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50731df24e584e8ebc0097497169b431c005bf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50731df24e584e8ebc0097497169b431c005bf86", "html_url": "https://github.com/rust-lang/rust/commit/50731df24e584e8ebc0097497169b431c005bf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50731df24e584e8ebc0097497169b431c005bf86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "html_url": "https://github.com/rust-lang/rust/commit/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c"}, {"sha": "b9b53c8ed45d273341a35b4158413a621d9e521c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b53c8ed45d273341a35b4158413a621d9e521c", "html_url": "https://github.com/rust-lang/rust/commit/b9b53c8ed45d273341a35b4158413a621d9e521c"}], "stats": {"total": 411, "additions": 345, "deletions": 66}, "files": [{"sha": "ff4fa1527e93ad09beb3f137c458c5c79bc18600", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -128,6 +128,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -499,6 +502,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -609,6 +615,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "2fbb480b85edf42195c1f0c74c6fc5aeb4f20a15", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -101,6 +101,7 @@ Falco Hirschenberger <falco.hirschenberger@gmail.com> <hirschen@itwm.fhg.de>\n Felix S. Klock II <pnkfelix@pnkfx.org> Felix S Klock II <pnkfelix@pnkfx.org>\n Flaper Fesp <flaper87@gmail.com>\n Florian Wilkens <mrfloya_github@outlook.com> Florian Wilkens <floya@live.de>\n+Frank Steffahn <fdsteffahn@gmail.com> <frank.steffahn@stu.uni-kiel.de>\n Gareth Daniel Smith <garethdanielsmith@gmail.com> gareth <gareth@gareth-N56VM.(none)>\n Gareth Daniel Smith <garethdanielsmith@gmail.com> Gareth Smith <garethdanielsmith@gmail.com>\n Georges Dubus <georges.dubus@gmail.com> <georges.dubus@compiletoi.net>"}, {"sha": "2e7077ed2065e845f5b6ef70529ef6f30977a0e3", "filename": "RELEASES.md", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -70,6 +70,7 @@ Cargo\n - [The package definition in `cargo metadata` now includes the `\"default_run\"`\n   field from the manifest.][cargo/9550]\n - [Added `cargo d` as an alias for `cargo doc`.][cargo/9680]\n+- [Added `{lib}` as formatting option for `cargo tree` to print the \"lib_name\" of packages.][cargo/9663]\n \n Rustdoc\n -------\n@@ -146,18 +147,13 @@ Version 1.54.0 (2021-07-29)\n Language\n -----------------------\n \n-- [You can now use macros for values in built-in attribute macros.][83366]\n-  While a seemingly minor addition on its own, this enables a lot of\n-  powerful functionality when combined correctly. Most notably you can\n-  now include external documentation in your crate by writing the following.\n+- [You can now use macros for values in some built-in attributes.][83366]\n+  This primarily allows you to call macros within the `#[doc]` attribute. For\n+  example, to include external documentation in your crate, you can now write\n+  the following:\n   ```rust\n   #![doc = include_str!(\"README.md\")]\n   ```\n-  You can also use this to include auto-generated modules:\n-  ```rust\n-  #[path = concat!(env!(\"OUT_DIR\"), \"/generated.rs\")]\n-  mod generated;\n-  ```\n \n - [You can now cast between unsized slice types (and types which contain\n   unsized slices) in `const fn`.][85078]"}, {"sha": "74e50c606107fec6be26387e99acd6f5356d931a", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -166,11 +166,6 @@ pub fn check(build: &mut Build) {\n     }\n \n     for target in &build.targets {\n-        // Can't compile for iOS unless we're on macOS\n-        if target.contains(\"apple-ios\") && !build.build.contains(\"apple-darwin\") {\n-            panic!(\"the iOS target is only supported on macOS\");\n-        }\n-\n         build\n             .config\n             .target_config"}, {"sha": "6417f5a984ad55070e00731831ef815bd472998c", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -206,6 +206,10 @@ x--expand-yaml-anchors--remove:\n         run: src/ci/scripts/verify-line-endings.sh\n         <<: *step\n \n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        <<: *step\n+\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "1023e4b0e2837d2ef4b2a7b4f07fb01cff29a2fc", "filename": "src/ci/scripts/verify-backported-commits.sh", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fverify-backported-commits.sh?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,150 @@\n+#!/bin/bash\n+# Ensure commits in beta are in master & commits in stable are in beta + master.\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# We don't care about commits that predate this automation check, so we pass a\n+# `<limit>` argument to `git cherry`.\n+BETA_LIMIT=\"53fd98ca776cb875bc9e5514f56b52eb74f9e7a9\"\n+STABLE_LIMIT=\"a178d0322ce20e33eac124758e837cbd80a6f633\"\n+\n+verify_backported_commits_main() {\n+  ci_base_branch=$(ciBaseBranch)\n+\n+  if [[ \"$ci_base_branch\" != \"beta\" && \"$ci_base_branch\" != \"stable\" ]]; then\n+    echo 'Skipping. This is only run when merging to the beta or stable branches.'\n+    exit 0\n+  fi\n+\n+  echo 'git: unshallowing the repository so we can check commits'\n+  git fetch \\\n+    --no-tags \\\n+    --no-recurse-submodules \\\n+    --progress \\\n+    --prune \\\n+    --unshallow\n+\n+  if [[ $ci_base_branch == \"beta\" ]]; then\n+    verify_cherries master \"$BETA_LIMIT\" \\\n+      || exit 1\n+\n+  elif [[ $ci_base_branch == \"stable\" ]]; then\n+    (verify_cherries master \"$STABLE_LIMIT\" \\\n+      & verify_cherries beta \"$STABLE_LIMIT\") \\\n+      || exit 1\n+\n+  fi\n+}\n+\n+# Verify all commits in `HEAD` are backports of a commit in <upstream>. See\n+# https://git-scm.com/docs/git-cherry for an explanation of the arguments.\n+#\n+# $1 = <upstream>\n+# $2 = <limit>\n+verify_cherries() {\n+  # commits that lack a `backport-of` comment.\n+  local no_backports=()\n+  # commits with an incorrect `backport-of` comment.\n+  local bad_backports=()\n+\n+  commits=$(git cherry \"origin/$1\" HEAD \"$2\")\n+\n+  if [[ -z \"$commits\" ]]; then\n+    echo \"All commits in \\`HEAD\\` are present in \\`$1\\`\"\n+    return 0\n+  fi\n+\n+  commits=$(echo \"$commits\" | grep '^\\+' | cut -c 3-)\n+\n+  while read sha; do\n+    # Check each commit in <current>..<upstream>\n+    backport_sha=$(get_backport \"$sha\")\n+\n+    if [[ \"$backport_sha\" == \"nothing\" ]]; then\n+      echo \"\u2713 \\`$sha\\` backports nothing\"\n+      continue\n+    fi\n+\n+    if [[ -z \"$backport_sha\" ]]; then\n+      no_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    if ! is_in_master \"$backport_sha\"; then\n+      bad_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    echo \"\u2713 \\`$sha\\` backports \\`$backport_sha\\`\"\n+  done <<< \"$commits\"\n+\n+  failure=0\n+\n+  if [ ${#no_backports[@]} -ne 0 ]; then\n+        echo 'Error: Could not find backports for all commits.'\n+        echo\n+        echo 'All commits in \\`HEAD\\` are required to have a corresponding upstream commit.'\n+        echo 'It looks like the following commits:'\n+        echo\n+        for commit in \"${no_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo \"do not match any commits in \\`$1\\`. If this was intended, add the text\"\n+        echo '\\`backport-of: <SHA of a commit already in master>\\`'\n+        echo 'somewhere in the message of each of these commits.'\n+        echo\n+        failure=1\n+  fi\n+\n+  if [ ${#bad_backports[@]} -ne 0 ]; then\n+        echo 'Error: Found incorrectly marked commits.'\n+        echo\n+        echo 'The following commits:'\n+        echo\n+        for commit in \"${bad_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo 'have commit messages marked \\`backport-of: <SHA>\\`, but the SHA is not in'\n+        echo '\\`master\\`.'\n+        echo\n+        failure=1\n+  fi\n+\n+  return $failure\n+}\n+\n+# Get the backport of a commit. It echoes one of:\n+#\n+# 1. A SHA of the backported commit\n+# 2. The string \"nothing\"\n+# 3. An empty string\n+#\n+# $1 = <sha>\n+get_backport() {\n+  # This regex is:\n+  #\n+  # ^.* - throw away any extra starting characters\n+  # backport-of: - prefix\n+  # \\s\\? - optional space\n+  # \\(\\) - capture group\n+  # [a-f0-9]\\+\\|nothing - a SHA or the text 'nothing'\n+  # .* - throw away any extra ending characters\n+  # \\1 - replace it with the first match\n+  # {s//\\1/p;q} - print the first occurrence and quit\n+  #\n+  git show -s --format=%B \"$1\" \\\n+    | sed -n '/^.*backport-of:\\s\\?\\([a-f0-9]\\+\\|nothing\\).*/{s//\\1/p;q}'\n+}\n+\n+# Check if a commit is in master.\n+#\n+# $1 = <sha>\n+is_in_master() {\n+  git merge-base --is-ancestor \"$1\" origin/master 2> /dev/null\n+}\n+\n+verify_backported_commits_main"}, {"sha": "8b51f55715e9195d4abae69a3e4582791b441f4c", "filename": "src/test/ui/type-alias-impl-trait/defining-use-submodule.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// test that the type alias impl trait defining use is in a submodule\n+\n+fn main() {}\n+\n+type Foo = impl std::fmt::Display;\n+type Bar = impl std::fmt::Display;\n+\n+mod foo {\n+    pub fn foo() -> super::Foo {\n+        \"foo\"\n+    }\n+\n+    pub mod bar {\n+        pub fn bar() -> crate::Bar {\n+            1\n+        }\n+    }\n+}"}, {"sha": "d87a25aad58304635b882760409251b82000553e", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -3,8 +3,7 @@\n fn main() {}\n \n trait Trait {}\n-type Underconstrained<T: Trait> = impl 'static;\n-//~^ ERROR: at least one trait must be specified\n+type Underconstrained<T: Trait> = impl Send;\n \n // no `Trait` bound\n fn underconstrain<T>(_: T) -> Underconstrained<T> {"}, {"sha": "c73288329b013f24145c652d2c2a65c045a859ed", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -1,25 +1,19 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:6:35\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                   ^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:10:31\n+  --> $DIR/generic_underconstrained.rs:9:31\n    |\n LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n    |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n note: required by a bound in `Underconstrained`\n   --> $DIR/generic_underconstrained.rs:6:26\n    |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n+LL | type Underconstrained<T: Trait> = impl Send;\n    |                          ^^^^^ required by this bound in `Underconstrained`\n help: consider restricting type parameter `T`\n    |\n LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n    |                    +++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8adc0bf32a6aab6845c36fed4f643f43bf53a7c5", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -2,17 +2,15 @@\n \n fn main() {}\n \n-type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-//~^ ERROR: at least one trait must be specified\n+type Underconstrained<T: std::fmt::Debug> = impl Send;\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained<U>(_: U) -> Underconstrained<U> {\n     //~^ ERROR `U` doesn't implement `Debug`\n     5u32\n }\n \n-type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-//~^ ERROR: at least one trait must be specified\n+type Underconstrained2<T: std::fmt::Debug> = impl Send;\n \n // not a defining use, because it doesn't define *all* possible generics\n fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {"}, {"sha": "d77d978aa444900ea3c8646bb5e69ae8bfb45215", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -1,47 +1,35 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:5:45\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                             ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:14:46\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                              ^^^^^^^^^^^^\n-\n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:9:33\n+  --> $DIR/generic_underconstrained2.rs:8:33\n    |\n LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n note: required by a bound in `Underconstrained`\n   --> $DIR/generic_underconstrained2.rs:5:26\n    |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+LL | type Underconstrained<T: std::fmt::Debug> = impl Send;\n    |                          ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained`\n help: consider restricting type parameter `U`\n    |\n LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n    |                      +++++++++++++++++\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:18:43\n+  --> $DIR/generic_underconstrained2.rs:16:43\n    |\n LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n note: required by a bound in `Underconstrained2`\n-  --> $DIR/generic_underconstrained2.rs:14:27\n+  --> $DIR/generic_underconstrained2.rs:13:27\n    |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl Send;\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained2`\n help: consider restricting type parameter `V`\n    |\n LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n    |                          +++++++++++++++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "955d1288a457d718689c5b5a44e209c701ee66d0", "filename": "src/test/ui/type-alias-impl-trait/incomplete-inference.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl Sized;\n+\n+fn bar() -> Foo {\n+    None\n+    //~^ ERROR: type annotations needed [E0282]\n+}\n+\n+fn baz() -> Foo {\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n+    Some(())\n+}\n+\n+fn main() {}"}, {"sha": "53cdf9e5b385fc82f2209e64a6fc7dc007da30ab", "filename": "src/test/ui/type-alias-impl-trait/incomplete-inference.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincomplete-inference.stderr?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,21 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/incomplete-inference.rs:6:5\n+   |\n+LL |     None\n+   |     ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/incomplete-inference.rs:10:1\n+   |\n+LL | fn baz() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `[type error]`, got `Option<()>`\n+   |\n+note: previous use here\n+  --> $DIR/incomplete-inference.rs:5:1\n+   |\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f6a8302967060028e53e17fdfff5cd9dd0268550", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-assoc-dyn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-dyn.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+type Foo = Box<dyn Iterator<Item = impl Send>>;\n+\n+fn make_foo() -> Foo {\n+    Box::new(vec![1, 2, 3].into_iter())\n+}\n+\n+fn main() {}"}, {"sha": "fddecfcacf68087a44f39e38c7c2e6d34597f132", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-assoc-impl-trait.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-assoc-impl-trait.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+type Foo = impl Iterator<Item = impl Send>;\n+\n+fn make_foo() -> Foo {\n+    vec![1, 2].into_iter()\n+}\n+\n+type Bar = impl Send;\n+type Baz = impl Iterator<Item = Bar>;\n+\n+fn make_baz() -> Baz {\n+    vec![\"1\", \"2\"].into_iter()\n+}\n+\n+fn main() {}"}, {"sha": "299bdf562dc41e372cbeaff0c5ff823f6d2b8f7f", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// FIXME: this is ruled out for now but should work\n+\n+type Foo = fn() -> impl Send;\n+//~^ ERROR: `impl Trait` not allowed outside of function and method return types\n+\n+fn make_foo() -> Foo {\n+    || 15\n+}\n+\n+fn main() {}"}, {"sha": "1c5d57d4af76154532d16604da7cbc82f2aa76d7", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` not allowed outside of function and method return types\n+  --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n+   |\n+LL | type Foo = fn() -> impl Send;\n+   |                    ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "1a4064055db6532fcfa253354e4b152fc3fd4e8d", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-struct.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-struct.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+type Foo = Vec<impl Send>;\n+\n+fn make_foo() -> Foo {\n+    vec![true, false]\n+}\n+\n+fn main() {}"}, {"sha": "1f2d0e47ea3b2405b6918c2c34dc6d841b6aee10", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-tuple.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-tuple.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -7,27 +7,24 @@ pub trait MyTrait {}\n \n impl MyTrait for bool {}\n \n+type Foo = impl MyTrait;\n+\n struct Blah {\n     my_foo: Foo,\n-    my_u8: u8\n+    my_u8: u8,\n }\n \n impl Blah {\n     fn new() -> Blah {\n-        Blah {\n-            my_foo: make_foo(),\n-            my_u8: 12\n-        }\n+        Blah { my_foo: make_foo(), my_u8: 12 }\n     }\n-    fn into_inner(self) -> (Foo, u8) {\n-        (self.my_foo, self.my_u8)\n+    fn into_inner(self) -> (Foo, u8, Foo) {\n+        (self.my_foo, self.my_u8, make_foo())\n     }\n }\n \n fn make_foo() -> Foo {\n     true\n }\n \n-type Foo = impl MyTrait;\n-\n fn main() {}"}, {"sha": "d2c8c1f63df1c89062bb97f42006bfd7fec3f0b3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -11,7 +11,6 @@ fn main() {\n     assert_eq!(bar2().to_string(), \"bar2\");\n     let mut x = bar1();\n     x = bar2();\n-    assert_eq!(boo::boo().to_string(), \"boo\");\n     assert_eq!(my_iter(42u8).collect::<Vec<u8>>(), vec![42u8]);\n }\n \n@@ -33,15 +32,6 @@ fn bar2() -> Bar {\n     \"bar2\"\n }\n \n-// definition in submodule\n-type Boo = impl std::fmt::Display;\n-\n-mod boo {\n-    pub fn boo() -> super::Boo {\n-        \"boo\"\n-    }\n-}\n-\n type MyIter<T> = impl Iterator<Item = T>;\n \n fn my_iter<T>(t: T) -> MyIter<T> {"}, {"sha": "90539a96389b05f71de34e07370a09af0295a7db", "filename": "src/tools/cherry-pick.sh", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftools%2Fcherry-pick.sh", "raw_url": "https://github.com/rust-lang/rust/raw/50731df24e584e8ebc0097497169b431c005bf86/src%2Ftools%2Fcherry-pick.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcherry-pick.sh?ref=50731df24e584e8ebc0097497169b431c005bf86", "patch": "@@ -0,0 +1,34 @@\n+#!/bin/bash\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+print_error() {\n+  echo \"Error: \\`$1\\` is not a valid commit. To debug, run:\"\n+  echo\n+  echo \"    git rev-parse --verify $1\"\n+  echo\n+}\n+\n+full_sha() {\n+  git rev-parse \\\n+    --verify \\\n+    --quiet \\\n+    \"$1^{object}\" || print_error $1\n+}\n+\n+commit_message_with_backport_note() {\n+  message=$(git log --format=%B -n 1 $1)\n+  echo $message | awk \"NR==1{print; print \\\"\\n(backport-of: $1)\\\"} NR!=1\"\n+}\n+\n+cherry_pick_commit() {\n+  sha=$(full_sha $1)\n+  git cherry-pick $sha > /dev/null\n+  git commit \\\n+    --amend \\\n+    --file <(commit_message_with_backport_note $sha)\n+}\n+\n+for arg ; do\n+  cherry_pick_commit $arg\n+done"}]}