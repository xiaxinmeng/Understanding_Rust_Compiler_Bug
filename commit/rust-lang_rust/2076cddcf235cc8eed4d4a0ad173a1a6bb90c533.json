{"sha": "2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzZjZGRjZjIzNWNjOGVlZDRkNGEwYWQxNzNhMWE2YmI5MGM1MzM=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-08-26T10:00:14Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-08-26T10:02:58Z"}, "message": "Rename FnKind variants and stop re-exporting them from the visit module.\n\nThere is no longer a need for that pattern, since enums are now qualified.", "tree": {"sha": "367b7973136fa7d994e43c7e805a58a06b228579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367b7973136fa7d994e43c7e805a58a06b228579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "html_url": "https://github.com/rust-lang/rust/commit/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b7591ee578042da43f6a9968034f4998cf291c", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b7591ee578042da43f6a9968034f4998cf291c", "html_url": "https://github.com/rust-lang/rust/commit/14b7591ee578042da43f6a9968034f4998cf291c"}], "stats": {"total": 170, "additions": 84, "deletions": 86}, "files": [{"sha": "8f24d20ebbf47a2b4e87fa4efa3e3079cb3eb7e0", "filename": "src/librustc/ast_map/blocks.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fblocks.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -28,7 +28,7 @@ use syntax::abi;\n use syntax::ast::{Block, FnDecl, NodeId};\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::visit;\n+use syntax::visit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc).\n@@ -50,7 +50,7 @@ pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n pub struct FnParts<'a> {\n     pub decl: &'a FnDecl,\n     pub body: &'a Block,\n-    pub kind: visit::FnKind<'a>,\n+    pub kind: FnKind<'a>,\n     pub span: Span,\n     pub id:   NodeId,\n }\n@@ -186,15 +186,15 @@ impl<'a> FnLikeNode<'a> {\n                     |c: ClosureParts|    c.id)\n     }\n \n-    pub fn kind(self) -> visit::FnKind<'a> {\n-        let item = |p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n+    pub fn kind(self) -> FnKind<'a> {\n+        let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n+            FnKind::ItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n-            visit::FkClosure\n+            FnKind::Closure\n         };\n         let method = |_, ident, sig: &'a ast::MethodSig, vis, _, _| {\n-            visit::FkMethod(ident, sig, vis)\n+            FnKind::Method(ident, sig, vis)\n         };\n         self.handle(item, method, closure)\n     }"}, {"sha": "8abb00dde16ccc137073285231794d593ffef8c0", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -38,7 +38,7 @@ use util::nodemap::NodeMap;\n \n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::visit::{self, Visitor};\n+use syntax::visit::{self, FnKind, Visitor};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn fn_like(&mut self,\n-               fk: visit::FnKind,\n+               fk: FnKind,\n                fd: &ast::FnDecl,\n                b: &ast::Block,\n                s: Span,\n@@ -157,10 +157,10 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         }\n \n         let mode = match fk {\n-            visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+            FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {\n                 Mode::ConstFn\n             }\n-            visit::FkMethod(_, m, _) => {\n+            FnKind::Method(_, m, _) => {\n                 if m.constness == ast::Constness::Const {\n                     Mode::ConstFn\n                 } else {\n@@ -352,7 +352,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self,\n-                fk: visit::FnKind<'v>,\n+                fk: FnKind<'v>,\n                 fd: &'v ast::FnDecl,\n                 b: &'v ast::Block,\n                 s: Span,"}, {"sha": "332ccb03729fe961ffe52adb01cfd1b76ff185b0", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -1007,7 +1007,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span,\n             fn_id: NodeId) {\n     match kind {\n-        visit::FkClosure => {}\n+        FnKind::Closure => {}\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n "}, {"sha": "35057037fbac93fa179e0241abfc62d00e852e1c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_camel_case_types)]\n+//#![allow(non_camel_case_types)]\n \n use self::ConstVal::*;\n use self::ErrKind::*;\n@@ -26,10 +26,10 @@ use middle::astconv_util::ast_ty_to_prim_ty;\n use util::num::ToPrimitive;\n \n use syntax::ast::{self, Expr};\n-use syntax::codemap::Span;\n+use syntax::codemap::{self, Span};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::{codemap, visit};\n+use syntax::visit::FnKind;\n \n use std::borrow::{Cow, IntoCow};\n use std::num::wrapping::OverflowingOps;\n@@ -246,10 +246,10 @@ pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId)\n     };\n \n     match fn_like.kind() {\n-        visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+        FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {\n             Some(fn_like)\n         }\n-        visit::FkMethod(_, m, _) => {\n+        FnKind::Method(_, m, _) => {\n             if m.constness == ast::Constness::Const {\n                 Some(fn_like)\n             } else {"}, {"sha": "f78ec28c7f051ef5d87638bf6be831e512d4eefa", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -19,7 +19,7 @@ use middle::ty::MethodCall;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{FnKind, Visitor};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -75,13 +75,13 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n-    fn visit_fn(&mut self, fn_kind: visit::FnKind<'v>, fn_decl: &'v ast::FnDecl,\n+    fn visit_fn(&mut self, fn_kind: FnKind<'v>, fn_decl: &'v ast::FnDecl,\n                 block: &'v ast::Block, span: Span, _: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            visit::FkItemFn(_, _, unsafety, _, _, _) =>\n+            FnKind::ItemFn(_, _, unsafety, _, _, _) =>\n                 (true, unsafety == ast::Unsafety::Unsafe),\n-            visit::FkMethod(_, sig, _) =>\n+            FnKind::Method(_, sig, _) =>\n                 (true, sig.unsafety == ast::Unsafety::Unsafe),\n             _ => (false, false),\n         };"}, {"sha": "f88e5a69f8a4e43ddc4f399c52809fd968287b56", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n use syntax::abi::RustIntrinsic;\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::visit::Visitor;\n+use syntax::visit::{FnKind, Visitor};\n use syntax::visit;\n \n pub fn check_crate(tcx: &ctxt) {\n@@ -216,16 +216,16 @@ impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, s: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(..) | visit::FkMethod(..) => {\n+            FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 let param_env = ty::ParameterEnvironment::for_item(self.tcx, id);\n                 self.param_envs.push(param_env);\n                 visit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            visit::FkClosure(..) => {\n+            FnKind::Closure(..) => {\n                 visit::walk_fn(self, fk, fd, b, s);\n             }\n         }"}, {"sha": "f8d7ed9d1b11f04f8e76afcfa6f76d042814d326", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -30,7 +30,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::lifetime_to_string;\n use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{FnKind, Visitor};\n use util::nodemap::NodeMap;\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n@@ -173,20 +173,20 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         replace(&mut self.labels_in_fn, saved);\n     }\n \n-    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, s: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_early_late(subst::FnSpace, generics, |this| {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            visit::FkMethod(_, sig, _) => {\n+            FnKind::Method(_, sig, _) => {\n                 self.visit_early_late(subst::FnSpace, &sig.generics, |this| {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            visit::FkClosure(..) => {\n+            FnKind::Closure(..) => {\n                 self.walk_fn(fk, fd, b, s)\n             }\n         }\n@@ -470,21 +470,21 @@ impl<'a> LifetimeContext<'a> {\n     // labels of the function body and swaps them in before visiting\n     // the function body itself.\n     fn walk_fn<'b>(&mut self,\n-                   fk: visit::FnKind,\n+                   fk: FnKind,\n                    fd: &ast::FnDecl,\n                    fb: &'b ast::Block,\n                    _span: Span) {\n         match fk {\n-            visit::FkItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 visit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }\n-            visit::FkMethod(_, sig, _) => {\n+            FnKind::Method(_, sig, _) => {\n                 visit::walk_fn_decl(self, fd);\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            visit::FkClosure(..) => {\n+            FnKind::Closure(..) => {\n                 visit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "fe341ca44755f1a1f77e936cd81d67c9e7a0fd7e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -59,16 +59,16 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n                 b: &'v Block, s: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(..) |\n-            visit::FkMethod(..) => {\n+            FnKind::ItemFn(..) |\n+            FnKind::Method(..) => {\n                 let new_free_region_map = self.tcx.free_region_map(id);\n                 let old_free_region_map =\n                     mem::replace(&mut self.free_region_map, new_free_region_map);\n                 borrowck_fn(self, fk, fd, b, s, id);\n                 self.free_region_map = old_free_region_map;\n             }\n \n-            visit::FkClosure => {\n+            FnKind::Closure => {\n                 borrowck_fn(self, fk, fd, b, s, id);\n             }\n         }"}, {"sha": "c4eabc60b126a441c1229ff36c2c74e8927891d9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -51,7 +51,7 @@ use syntax::codemap::{self, Span};\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ptr::P;\n-use syntax::visit::{self, Visitor};\n+use syntax::visit::{self, FnKind, Visitor};\n \n // hardwired lints from librustc\n pub use lint::builtin::*;\n@@ -1240,10 +1240,10 @@ impl LintPass for NonSnakeCase {\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n-                fk: visit::FnKind, _: &ast::FnDecl,\n+                fk: FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkMethod(ident, _, _) => match method_context(cx, id, span) {\n+            FnKind::Method(ident, _, _) => match method_context(cx, id, span) {\n                 MethodContext::PlainImpl => {\n                     self.check_snake_case(cx, \"method\", &ident.name.as_str(), Some(span))\n                 },\n@@ -1252,7 +1252,7 @@ impl LintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            visit::FkItemFn(ident, _, _, _, _, _) => {\n+            FnKind::ItemFn(ident, _, _, _, _, _) => {\n                 self.check_snake_case(cx, \"function\", &ident.name.as_str(), Some(span))\n             },\n             _ => (),\n@@ -1598,13 +1598,13 @@ impl LintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_fn(&mut self, cx: &Context, fk: visit::FnKind, _: &ast::FnDecl,\n+    fn check_fn(&mut self, cx: &Context, fk: FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            visit::FkItemFn(_, _, ast::Unsafety::Unsafe, _, _, _) =>\n+            FnKind::ItemFn(_, _, ast::Unsafety::Unsafe, _, _, _) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n-            visit::FkMethod(_, sig, _) => {\n+            FnKind::Method(_, sig, _) => {\n                 if sig.unsafety == ast::Unsafety::Unsafe {\n                     cx.span_lint(UNSAFE_CODE, span, \"implementation of an `unsafe` method\")\n                 }\n@@ -1685,7 +1685,7 @@ impl LintPass for UnusedMut {\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n-                _: visit::FnKind, decl: &ast::FnDecl,\n+                _: FnKind, decl: &ast::FnDecl,\n                 _: &ast::Block, _: Span, _: ast::NodeId) {\n         for a in &decl.inputs {\n             self.check_unused_mut_pat(cx, slice::ref_slice(&a.pat));\n@@ -2126,18 +2126,18 @@ impl LintPass for UnconditionalRecursion {\n         lint_array![UNCONDITIONAL_RECURSION]\n     }\n \n-    fn check_fn(&mut self, cx: &Context, fn_kind: visit::FnKind, _: &ast::FnDecl,\n+    fn check_fn(&mut self, cx: &Context, fn_kind: FnKind, _: &ast::FnDecl,\n                 blk: &ast::Block, sp: Span, id: ast::NodeId) {\n         type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n \n         let method = match fn_kind {\n-            visit::FkItemFn(..) => None,\n-            visit::FkMethod(..) => {\n+            FnKind::ItemFn(..) => None,\n+            FnKind::Method(..) => {\n                 cx.tcx.impl_or_trait_item(DefId::local(id)).as_opt_method()\n             }\n             // closures can't recur, so they don't matter.\n-            visit::FkClosure => return\n+            FnKind::Closure => return\n         };\n \n         // Walk through this function (say `f`) looking to see if"}, {"sha": "c79fdf1bca47ed6fd3033c24bfa1f3ae0d98ce65", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -88,7 +88,7 @@ use syntax::ext::mtwt;\n use syntax::parse::token::{self, special_names, special_idents};\n use syntax::ptr::P;\n use syntax::codemap::{self, Span, Pos};\n-use syntax::visit::{self, Visitor};\n+use syntax::visit::{self, FnKind, Visitor};\n \n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -527,22 +527,22 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         });\n     }\n     fn visit_fn(&mut self,\n-                function_kind: visit::FnKind<'v>,\n+                function_kind: FnKind<'v>,\n                 declaration: &'v FnDecl,\n                 block: &'v Block,\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            visit::FkItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n-            visit::FkMethod(_, sig, _) => {\n+            FnKind::Method(_, sig, _) => {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            visit::FkClosure(..) => ClosureRibKind(node_id)\n+            FnKind::Closure(..) => ClosureRibKind(node_id)\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}, {"sha": "c235e4b5c38996b11d5df7d67ef70d81c3c064a3", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -25,7 +25,7 @@ use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::{special_idents};\n use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{FnKind, Visitor};\n \n pub struct CheckTypeWellFormedVisitor<'ccx, 'tcx:'ccx> {\n     ccx: &'ccx CrateCtxt<'ccx, 'tcx>,\n@@ -425,11 +425,11 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     }\n \n     fn visit_fn(&mut self,\n-                fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                fk: FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkClosure | visit::FkItemFn(..) => {}\n-            visit::FkMethod(..) => {\n+            FnKind::Closure | FnKind::ItemFn(..) => {}\n+            FnKind::Method(..) => {\n                 match self.tcx().impl_or_trait_item(DefId::local(id)) {\n                     ty::ImplOrTraitItem::MethodTraitItem(ty_method) => {\n                         reject_shadowing_type_parameters(self.tcx(), span, &ty_method.generics)"}, {"sha": "43476df3a8e777d6384a78b6c2964bc2018db77b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -17,7 +17,7 @@ use owned_slice::OwnedSlice;\n use parse::token;\n use print::pprust;\n use ptr::P;\n-use visit::Visitor;\n+use visit::{FnKind, Visitor};\n use visit;\n \n use std::cmp;\n@@ -423,22 +423,22 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                 node_id: NodeId) {\n         if !self.pass_through_items {\n             match function_kind {\n-                visit::FkMethod(..) if self.visited_outermost => return,\n-                visit::FkMethod(..) => self.visited_outermost = true,\n+                FnKind::Method(..) if self.visited_outermost => return,\n+                FnKind::Method(..) => self.visited_outermost = true,\n                 _ => {}\n             }\n         }\n \n         self.operation.visit_id(node_id);\n \n         match function_kind {\n-            visit::FkItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n-            visit::FkMethod(_, sig, _) => {\n+            FnKind::Method(_, sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n-            visit::FkClosure => {}\n+            FnKind::Closure => {}\n         }\n \n         for argument in &function_declaration.inputs {\n@@ -452,7 +452,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                        span);\n \n         if !self.pass_through_items {\n-            if let visit::FkMethod(..) = function_kind {\n+            if let FnKind::Method(..) = function_kind {\n                 self.visited_outermost = false;\n             }\n         }\n@@ -518,7 +518,7 @@ impl IdVisitingOperation for IdRangeComputingVisitor {\n }\n \n /// Computes the id range for a single fn body, ignoring nested items.\n-pub fn compute_id_range_for_fn_body(fk: visit::FnKind,\n+pub fn compute_id_range_for_fn_body(fk: FnKind,\n                                     decl: &FnDecl,\n                                     body: &Block,\n                                     sp: Span,"}, {"sha": "e9a99bfde6584d6752f8556220179a53d8215e5a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -33,7 +33,7 @@ use attr::AttrMetaMethods;\n use codemap::{CodeMap, Span};\n use diagnostic::SpanHandler;\n use visit;\n-use visit::Visitor;\n+use visit::{FnKind, Visitor};\n use parse::token::{self, InternedString};\n \n use std::ascii::AsciiExt;\n@@ -825,14 +825,14 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_fn(&mut self,\n-                fn_kind: visit::FnKind<'v>,\n+                fn_kind: FnKind<'v>,\n                 fn_decl: &'v ast::FnDecl,\n                 block: &'v ast::Block,\n                 span: Span,\n                 _node_id: NodeId) {\n         // check for const fn declarations\n         match fn_kind {\n-            visit::FkItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+            FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {\n                 self.gate_feature(\"const_fn\", span, \"const fn is unstable\");\n             }\n             _ => {\n@@ -844,13 +844,13 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         }\n \n         match fn_kind {\n-            visit::FkItemFn(_, _, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n+            FnKind::ItemFn(_, _, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n                                   span,\n                                   \"intrinsics are subject to change\")\n             }\n-            visit::FkItemFn(_, _, _, _, abi, _) |\n-            visit::FkMethod(_, &ast::MethodSig { abi, .. }, _) if abi == Abi::RustCall => {\n+            FnKind::ItemFn(_, _, _, _, abi, _) |\n+            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) if abi == Abi::RustCall => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   span,\n                                   \"rust-call ABI is subject to change\")"}, {"sha": "8365a7375c68dbed3911b4d036db1f2665a52dd7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2076cddcf235cc8eed4d4a0ad173a1a6bb90c533/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2076cddcf235cc8eed4d4a0ad173a1a6bb90c533", "patch": "@@ -23,8 +23,6 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-pub use self::FnKind::*;\n-\n use abi::Abi;\n use ast::*;\n use ast;\n@@ -35,13 +33,13 @@ use owned_slice::OwnedSlice;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n \n     /// fn foo(&self)\n-    FkMethod(Ident, &'a MethodSig, Option<Visibility>),\n+    Method(Ident, &'a MethodSig, Option<Visibility>),\n \n     /// |x, y| {}\n-    FkClosure,\n+    Closure,\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -247,8 +245,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_expr(&**expr);\n         }\n         ItemFn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n-            visitor.visit_fn(FkItemFn(item.ident, generics, unsafety,\n-                                      constness, abi, item.vis),\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n+                                            constness, abi, item.vis),\n                              &**declaration,\n                              &**body,\n                              item.span,\n@@ -608,14 +606,14 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n     walk_fn_decl(visitor, function_declaration);\n \n     match function_kind {\n-        FkItemFn(_, generics, _, _, _, _) => {\n+        FnKind::ItemFn(_, generics, _, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n-        FkMethod(_, sig, _) => {\n+        FnKind::Method(_, sig, _) => {\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n-        FkClosure(..) => {}\n+        FnKind::Closure(..) => {}\n     }\n \n     visitor.visit_block(function_body)\n@@ -639,7 +637,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FkMethod(trait_item.ident, sig, None), &sig.decl,\n+            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None), &sig.decl,\n                              body, trait_item.span, trait_item.id);\n         }\n         TypeTraitItem(ref bounds, ref default) => {\n@@ -660,7 +658,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_expr(expr);\n         }\n         MethodImplItem(ref sig, ref body) => {\n-            visitor.visit_fn(FkMethod(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n+            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n         TypeImplItem(ref ty) => {\n@@ -816,7 +814,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             }\n         }\n         ExprClosure(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(FkClosure,\n+            visitor.visit_fn(FnKind::Closure,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,"}]}