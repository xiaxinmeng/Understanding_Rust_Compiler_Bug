{"sha": "aceb9d7fb0809ccf364514d9177342edea144c59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZWI5ZDdmYjA4MDljY2YzNjQ1MTRkOTE3NzM0MmVkZWExNDRjNTk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-12T13:47:54Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T03:20:22Z"}, "message": "Add token ids for all tt::Leaf", "tree": {"sha": "138ee608477eb951072eeac6ace239647e3d01a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138ee608477eb951072eeac6ace239647e3d01a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aceb9d7fb0809ccf364514d9177342edea144c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aceb9d7fb0809ccf364514d9177342edea144c59", "html_url": "https://github.com/rust-lang/rust/commit/aceb9d7fb0809ccf364514d9177342edea144c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aceb9d7fb0809ccf364514d9177342edea144c59/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ca40ccfced6945e05a25979a2703ad967d2fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ca40ccfced6945e05a25979a2703ad967d2fe0", "html_url": "https://github.com/rust-lang/rust/commit/46ca40ccfced6945e05a25979a2703ad967d2fe0"}], "stats": {"total": 105, "additions": 72, "deletions": 33}, "files": [{"sha": "62c60e336cec21c58fcda496b1cb0cfe9a630a8e", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -97,11 +97,24 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n \n fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n     let mut result = Vec::<tt::TokenTree>::new();\n-    result.push(tt::Leaf::Punct(tt::Punct { char: '<', spacing: tt::Spacing::Alone }).into());\n+    result.push(\n+        tt::Leaf::Punct(tt::Punct {\n+            char: '<',\n+            spacing: tt::Spacing::Alone,\n+            id: tt::TokenId::unspecified(),\n+        })\n+        .into(),\n+    );\n     for i in 0..n {\n         if i > 0 {\n-            result\n-                .push(tt::Leaf::Punct(tt::Punct { char: ',', spacing: tt::Spacing::Alone }).into());\n+            result.push(\n+                tt::Leaf::Punct(tt::Punct {\n+                    char: ',',\n+                    spacing: tt::Spacing::Alone,\n+                    id: tt::TokenId::unspecified(),\n+                })\n+                .into(),\n+            );\n         }\n         result.push(\n             tt::Leaf::Ident(tt::Ident {\n@@ -112,7 +125,14 @@ fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n         );\n         result.extend(bound.iter().cloned());\n     }\n-    result.push(tt::Leaf::Punct(tt::Punct { char: '>', spacing: tt::Spacing::Alone }).into());\n+    result.push(\n+        tt::Leaf::Punct(tt::Punct {\n+            char: '>',\n+            spacing: tt::Spacing::Alone,\n+            id: tt::TokenId::unspecified(),\n+        })\n+        .into(),\n+    );\n     result\n }\n "}, {"sha": "bce38cc679b5ee429ef54af54acacdadecd7d841", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -29,6 +29,7 @@ macro_rules! __quote {\n                 tt::Leaf::Punct(tt::Punct {\n                     char: $first,\n                     spacing: tt::Spacing::Alone,\n+                    id: tt::TokenId::unspecified(),\n                 }).into()\n             ]\n         }\n@@ -40,10 +41,12 @@ macro_rules! __quote {\n                 tt::Leaf::Punct(tt::Punct {\n                     char: $first,\n                     spacing: tt::Spacing::Joint,\n+                    id: tt::TokenId::unspecified(),\n                 }).into(),\n                 tt::Leaf::Punct(tt::Punct {\n                     char: $sec,\n                     spacing: tt::Spacing::Alone,\n+                    id: tt::TokenId::unspecified(),\n                 }).into()\n             ]\n         }\n@@ -179,15 +182,15 @@ macro_rules! impl_to_to_tokentrees {\n }\n \n impl_to_to_tokentrees! {\n-    u32 => self { tt::Literal{text: self.to_string().into()} };\n-    usize => self { tt::Literal{text: self.to_string().into()}};\n-    i32 => self { tt::Literal{text: self.to_string().into()}};\n+    u32 => self { tt::Literal{text: self.to_string().into(), id: tt::TokenId::unspecified()} };\n+    usize => self { tt::Literal{text: self.to_string().into(), id: tt::TokenId::unspecified()}};\n+    i32 => self { tt::Literal{text: self.to_string().into(), id: tt::TokenId::unspecified()}};\n     tt::Leaf => self { self };\n     tt::Literal => self { self };\n     tt::Ident => self { self };\n     tt::Punct => self { self };\n-    &str => self { tt::Literal{text: format!(\"{:?}\", self.escape_default().to_string()).into()}};\n-    String => self { tt::Literal{text: format!(\"{:?}\", self.escape_default().to_string()).into()}}\n+    &str => self { tt::Literal{text: format!(\"{:?}\", self.escape_default().to_string()).into(), id: tt::TokenId::unspecified()}};\n+    String => self { tt::Literal{text: format!(\"{:?}\", self.escape_default().to_string()).into(), id: tt::TokenId::unspecified()}}\n }\n \n #[cfg(test)]"}, {"sha": "eda66cd506ebe2f6928011ee20877e10e339f900", "filename": "crates/ra_mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -108,7 +108,12 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> Result<Fragment, ExpandError>\n         let tt = tt::Subtree {\n             delimiter: None,\n             token_trees: vec![\n-                tt::Leaf::from(tt::Punct { char: '$', spacing: tt::Spacing::Alone }).into(),\n+                tt::Leaf::from(tt::Punct {\n+                    char: '$',\n+                    spacing: tt::Spacing::Alone,\n+                    id: tt::TokenId::unspecified(),\n+                })\n+                .into(),\n                 tt::Leaf::from(tt::Ident { text: v.clone(), id: tt::TokenId::unspecified() })\n                     .into(),\n             ],"}, {"sha": "8f65ff125ef30b565efd6ebeb9de344a5879ddbe", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -136,11 +136,15 @@ fn convert_doc_comment(token: &ra_syntax::SyntaxToken) -> Option<Vec<tt::TokenTr\n     }\n \n     fn mk_punct(c: char) -> tt::TokenTree {\n-        tt::TokenTree::from(tt::Leaf::from(tt::Punct { char: c, spacing: tt::Spacing::Alone }))\n+        tt::TokenTree::from(tt::Leaf::from(tt::Punct {\n+            char: c,\n+            spacing: tt::Spacing::Alone,\n+            id: tt::TokenId::unspecified(),\n+        }))\n     }\n \n     fn mk_doc_literal(comment: &ast::Comment) -> tt::TokenTree {\n-        let lit = tt::Literal { text: doc_comment_text(comment) };\n+        let lit = tt::Literal { text: doc_comment_text(comment), id: tt::TokenId::unspecified() };\n \n         tt::TokenTree::from(tt::Leaf::from(lit))\n     }\n@@ -223,24 +227,29 @@ impl Convertor {\n                             .take(token.text().len() - 1)\n                             .chain(std::iter::once(last_spacing));\n                         for (char, spacing) in token.text().chars().zip(spacing_iter) {\n-                            token_trees.push(tt::Leaf::from(tt::Punct { char, spacing }).into());\n+                            let id = self.alloc(token.text_range());\n+                            token_trees\n+                                .push(tt::Leaf::from(tt::Punct { char, spacing, id }).into());\n                         }\n                     } else {\n-                        let child: tt::TokenTree =\n-                            if token.kind() == T![true] || token.kind() == T![false] {\n-                                tt::Leaf::from(tt::Literal { text: token.text().clone() }).into()\n-                            } else if token.kind().is_keyword()\n-                                || token.kind() == IDENT\n-                                || token.kind() == LIFETIME\n-                            {\n-                                let id = self.alloc(token.text_range());\n-                                let text = token.text().clone();\n-                                tt::Leaf::from(tt::Ident { text, id }).into()\n-                            } else if token.kind().is_literal() {\n-                                tt::Leaf::from(tt::Literal { text: token.text().clone() }).into()\n-                            } else {\n-                                return None;\n-                            };\n+                        let child: tt::TokenTree = if token.kind() == T![true]\n+                            || token.kind() == T![false]\n+                        {\n+                            let id = self.alloc(token.text_range());\n+                            tt::Leaf::from(tt::Literal { text: token.text().clone(), id }).into()\n+                        } else if token.kind().is_keyword()\n+                            || token.kind() == IDENT\n+                            || token.kind() == LIFETIME\n+                        {\n+                            let id = self.alloc(token.text_range());\n+                            let text = token.text().clone();\n+                            tt::Leaf::from(tt::Ident { text, id }).into()\n+                        } else if token.kind().is_literal() {\n+                            let id = self.alloc(token.text_range());\n+                            tt::Leaf::from(tt::Literal { text: token.text().clone(), id }).into()\n+                        } else {\n+                            return None;\n+                        };\n                         token_trees.push(child);\n                     }\n                 }"}, {"sha": "70e65bc74c4ddb208a9369fa3b1c14bedcf595a0", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -78,12 +78,12 @@ macro_rules! foobar {\n \n     assert_eq!(expansion.token_trees.len(), 3);\n     // ($e:ident) => { foo bar $e }\n-    //   0 1            2   3   4\n-    assert_eq!(get_id(&expansion.token_trees[0]), Some(2));\n-    assert_eq!(get_id(&expansion.token_trees[1]), Some(3));\n+    //  0123      45    6   7  89\n+    assert_eq!(get_id(&expansion.token_trees[0]), Some(6));\n+    assert_eq!(get_id(&expansion.token_trees[1]), Some(7));\n \n-    // So baz should be 5\n-    assert_eq!(get_id(&expansion.token_trees[2]), Some(5));\n+    // So baz should be 10\n+    assert_eq!(get_id(&expansion.token_trees[2]), Some(10));\n }\n \n #[test]"}, {"sha": "209ca4048441198ffb15c005416c9494eae5d143", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb9d7fb0809ccf364514d9177342edea144c59/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=aceb9d7fb0809ccf364514d9177342edea144c59", "patch": "@@ -64,12 +64,14 @@ pub enum Delimiter {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Literal {\n     pub text: SmolStr,\n+    pub id: TokenId,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Punct {\n     pub char: char,\n     pub spacing: Spacing,\n+    pub id: TokenId,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}