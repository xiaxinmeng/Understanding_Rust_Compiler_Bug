{"sha": "3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNGQyNzNhYzI1MDZmZTVhYjJmZjI4NjFlNWFlNzAyYWI0NGVhZmU=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T12:46:28Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T12:46:28Z"}, "message": "handle generic enums", "tree": {"sha": "f8c0544a335fcd6a2e6d44c4a8e765d91889f18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c0544a335fcd6a2e6d44c4a8e765d91889f18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe", "html_url": "https://github.com/rust-lang/rust/commit/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63116c74f79a7909998b27615a308268f9093d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63116c74f79a7909998b27615a308268f9093d6", "html_url": "https://github.com/rust-lang/rust/commit/e63116c74f79a7909998b27615a308268f9093d6"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "8e68ebc7a336eeb9059f954da0326a24789d3b2b", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=3a4d273ac2506fe5ab2ff2861e5ae702ab44eafe", "patch": "@@ -1,6 +1,9 @@\n+use ast::GenericParamsOwner;\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n-use syntax::ast::{self, AstNode, NameOwner};\n+use itertools::Itertools;\n+use stdx::format_to;\n+use syntax::{SmolStr, ast::{self, AstNode, NameOwner}};\n use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -26,6 +29,7 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let enum_name = variant.parent_enum().name()?;\n+    let enum_type_params = variant.parent_enum().generic_param_list();\n     let field_list = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => field_list,\n         _ => return None,\n@@ -47,17 +51,33 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n         target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n-            let buf = format!(\n-                r#\"\n+            let mut buf = String::from(\"\\n\\nimpl\");\n+            if let Some(type_params) = &enum_type_params {\n+                format_to!(buf, \"{}\", type_params.syntax());\n+            }\n+            format_to!(buf, \" From<{}> for {}\", field_type.syntax(), enum_name);\n+            if let Some(type_params) = enum_type_params {\n+                let lifetime_params = type_params\n+                    .lifetime_params()\n+                    .filter_map(|it| it.lifetime())\n+                    .map(|it| SmolStr::from(it.text()));\n+                let type_params = type_params\n+                    .type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| SmolStr::from(it.text()));\n \n-impl From<{0}> for {1} {{\n-    fn from(v: {0}) -> Self {{\n-        Self::{2}(v)\n+                let generic_params = lifetime_params.chain(type_params).format(\", \");\n+                format_to!(buf, \"<{}>\", generic_params)\n+            }\n+            format_to!(\n+                buf,\n+                r#\" {{\n+    fn from(v: {}) -> Self {{\n+        Self::{}(v)\n     }}\n }}\"#,\n                 field_type.syntax(),\n-                enum_name,\n-                variant_name\n+                variant_name,\n             );\n             edit.insert(start_offset, buf);\n         },\n@@ -206,6 +226,36 @@ impl From<&'static str> for A {\n     fn from(v: &'static str) -> Self {\n         Self::One(v)\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_generic_enum() {\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum Generic<T, U: Clone> { $0One(T), Two(U) }\",\n+            r#\"enum Generic<T, U: Clone> { One(T), Two(U) }\n+\n+impl<T, U: Clone> From<T> for Generic<T, U> {\n+    fn from(v: T) -> Self {\n+        Self::One(v)\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_with_lifetime() {\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum Generic<'a> { $0One(&'a i32) }\",\n+            r#\"enum Generic<'a> { One(&'a i32) }\n+\n+impl<'a> From<&'a i32> for Generic<'a> {\n+    fn from(v: &'a i32) -> Self {\n+        Self::One(v)\n+    }\n }\"#,\n         );\n     }"}]}