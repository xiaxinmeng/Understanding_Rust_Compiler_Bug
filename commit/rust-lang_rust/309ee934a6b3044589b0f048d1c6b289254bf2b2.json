{"sha": "309ee934a6b3044589b0f048d1c6b289254bf2b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOWVlOTM0YTZiMzA0NDU4OWIwZjA0OGQxYzZiMjg5MjU0YmYyYjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-05T03:46:45Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-11T08:41:09Z"}, "message": "manual fixups", "tree": {"sha": "339cb9f967246987ce1777b358ae21741e153383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339cb9f967246987ce1777b358ae21741e153383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309ee934a6b3044589b0f048d1c6b289254bf2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309ee934a6b3044589b0f048d1c6b289254bf2b2", "html_url": "https://github.com/rust-lang/rust/commit/309ee934a6b3044589b0f048d1c6b289254bf2b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309ee934a6b3044589b0f048d1c6b289254bf2b2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1831bf8fb565d57b95d1ba6c8694abcaa9e889ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/1831bf8fb565d57b95d1ba6c8694abcaa9e889ea", "html_url": "https://github.com/rust-lang/rust/commit/1831bf8fb565d57b95d1ba6c8694abcaa9e889ea"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "7fafe97efc9ee34c156c108607d8fd28fff5dfa3", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/309ee934a6b3044589b0f048d1c6b289254bf2b2/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309ee934a6b3044589b0f048d1c6b289254bf2b2/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=309ee934a6b3044589b0f048d1c6b289254bf2b2", "patch": "@@ -413,8 +413,7 @@ impl<'a> Id<'a> {\n         {\n             let mut chars = name.chars();\n             match chars.next() {\n-                Some(c) if is_letter_or_underscore(c) => { ;\n-                }\n+                Some(c) if is_letter_or_underscore(c) => {}\n                 _ => return Err(()),\n             }\n             if !chars.all(is_constituent) {\n@@ -781,8 +780,7 @@ mod tests {\n         fn to_opt_strs(self) -> Vec<Option<&'static str>> {\n             match self {\n                 UnlabelledNodes(len) => vec![None; len],\n-                AllNodesLabelled(lbls) => lbls.into_iter().map(\n-                        |l|Some(l)).collect(),\n+                AllNodesLabelled(lbls) => lbls.into_iter().map(|l| Some(l)).collect(),\n                 SomeNodesLabelled(lbls) => lbls.into_iter().collect(),\n             }\n         }\n@@ -1015,8 +1013,10 @@ r#\"digraph single_cyclic_node {\n         let labels = AllNodesLabelled(vec!(\"{x,y}\", \"{x}\", \"{y}\", \"{}\"));\n         let r = test_input(LabelledGraph::new(\"hasse_diagram\",\n                                               labels,\n-                                              vec![edge(0, 1, \"\", Style::None), edge(0, 2, \"\", Style::None),\n-                 edge(1, 3, \"\", Style::None), edge(2, 3, \"\", Style::None)],\n+                                              vec![edge(0, 1, \"\", Style::None),\n+                                                   edge(0, 2, \"\", Style::None),\n+                                                   edge(1, 3, \"\", Style::None),\n+                                                   edge(2, 3, \"\", Style::None)],\n                                               None));\n         assert_eq!(r.unwrap(),\n r#\"digraph hasse_diagram {\n@@ -1050,8 +1050,10 @@ r#\"digraph hasse_diagram {\n \n         let g = LabelledGraphWithEscStrs::new(\"syntax_tree\",\n                                               labels,\n-                                              vec![edge(0, 1, \"then\", Style::None), edge(0, 2, \"else\", Style::None),\n-                 edge(1, 3, \";\", Style::None),    edge(2, 3, \";\", Style::None)]);\n+                                              vec![edge(0, 1, \"then\", Style::None),\n+                                                   edge(0, 2, \"else\", Style::None),\n+                                                   edge(1, 3, \";\", Style::None),\n+                                                   edge(2, 3, \";\", Style::None)]);\n \n         render(&g, &mut writer).unwrap();\n         let mut r = String::new();\n@@ -1075,8 +1077,7 @@ r#\"digraph syntax_tree {\n     fn simple_id_construction() {\n         let id1 = Id::new(\"hello\");\n         match id1 {\n-            Ok(_) => {;\n-            }\n+            Ok(_) => {}\n             Err(..) => panic!(\"'hello' is not a valid value for id anymore\"),\n         }\n     }\n@@ -1086,8 +1087,7 @@ r#\"digraph syntax_tree {\n         let id2 = Id::new(\"Weird { struct : ure } !!!\");\n         match id2 {\n             Ok(_) => panic!(\"graphviz id suddenly allows spaces, brackets and stuff\"),\n-            Err(..) => {;\n-            }\n+            Err(..) => {}\n         }\n     }\n }"}]}