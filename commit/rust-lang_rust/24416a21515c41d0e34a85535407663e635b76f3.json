{"sha": "24416a21515c41d0e34a85535407663e635b76f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDE2YTIxNTE1YzQxZDBlMzRhODU1MzU0MDc2NjNlNjM1Yjc2ZjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T05:43:38Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T22:36:17Z"}, "message": "Autogenerate most x86 platform intrinsics.", "tree": {"sha": "79028f1384e6b272a4cab5bac9d13d71321856cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79028f1384e6b272a4cab5bac9d13d71321856cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24416a21515c41d0e34a85535407663e635b76f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24416a21515c41d0e34a85535407663e635b76f3", "html_url": "https://github.com/rust-lang/rust/commit/24416a21515c41d0e34a85535407663e635b76f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24416a21515c41d0e34a85535407663e635b76f3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a167bdb4c47c867c07160f635c3b8e867ea8baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a167bdb4c47c867c07160f635c3b8e867ea8baa", "html_url": "https://github.com/rust-lang/rust/commit/5a167bdb4c47c867c07160f635c3b8e867ea8baa"}], "stats": {"total": 1767, "additions": 1593, "deletions": 174}, "files": [{"sha": "7d6a07f7550fd131aaa5c55b269a50822e7b13e6", "filename": "src/etc/platform-intrinsics/x86/avx.json", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,152 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.avx.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"256_addsub_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"addsub.{0.data_type}.256\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_dp_ps\",\n+            \"width\": [256],\n+            \"llvm\": \"dp.ps.256\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\", \"0\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hadd_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"hadd.{0.data_type}.256\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hsub_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"hsub.{0.data_type}.256\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_max_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"max.{0.data_type}.256\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_min_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"min.{0.data_type}.256\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_movemask_ps\",\n+            \"width\": [256],\n+            \"llvm\": \"movmsk.ps.256\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_movemask_pd\",\n+            \"width\": [256],\n+            \"llvm\": \"movmsk.pd.256\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_permutevar_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vpermilvar.{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0s\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_rcp_ps\",\n+            \"width\": [256],\n+            \"llvm\": \"rcp.ps.256\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_rsqrt_ps\",\n+            \"width\": [256],\n+            \"llvm\": \"rsqrt.ps.256\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_sqrt_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"!llvm.sqrt.{0.llvm_name}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testc_ps\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestc.ps{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f32\", \"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testc_pd\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestc.pd{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f64\", \"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_testc_si256\",\n+            \"width\": [256],\n+            \"llvm\": \"ptestc.256\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testnzc_ps\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestnzc.ps{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f32\", \"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testnzc_pd\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestnzc.pd{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f64\", \"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_testnzc_si256\",\n+            \"width\": [256],\n+            \"llvm\": \"ptestnzc.256\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testz_ps\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestz.ps{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f32\", \"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"{1.width_mm}_testz_pd\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vtestz.pd{1.width_suffix}\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f64\", \"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_testz_si256\",\n+            \"width\": [256],\n+            \"llvm\": \"ptestz.256\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        }\n+    ]\n+}"}, {"sha": "8b0e53e48cf9e6afc0fd5bb766a9b48db60fc480", "filename": "src/etc/platform-intrinsics/x86/avx2.json", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,145 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.avx2.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"256_abs_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"avx2.pabs.{0.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_adds_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"avx2.padd{0.kind_short}s.{0.data_type_short}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_avg_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"avx2.pavg.{0.data_type_short}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hadd_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"phadd.{0.data_type_short}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hadds_epi16\",\n+            \"width\": [256],\n+            \"llvm\": \"phadd.sw\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hsub_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"phsub.{0.data_type_short}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_hsubs_epi16\",\n+            \"width\": [256],\n+            \"llvm\": \"phsub.sw\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_madd_epi16\",\n+            \"width\": [256],\n+            \"llvm\": \"pmadd.wd\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_maddubs_epi16\",\n+            \"width\": [256],\n+            \"llvm\": \"pmadd.ub.sw\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"s8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_max_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"pmax{0.kind}.{0.data_type_short}\",\n+            \"ret\": \"i(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_min_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"pmin{0.kind}.{0.data_type_short}\",\n+            \"ret\": \"i(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_mul_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"pmul{0.data_type_short}.dq\",\n+            \"ret\": \"i64\",\n+            \"args\": [\"0dn\", \"0dn\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_mulhi_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"pmulh{0.data_type_short}.w\",\n+            \"ret\": \"i16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_mulhrs_epi16\",\n+            \"width\": [256],\n+            \"llvm\": \"pmul.hr.sw\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_pack{0.kind_short}s_{1.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"pack{0.kind}s{1.data_type_short}{0.data_type_short}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_permutevar8x32_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"perm{0.data_type_short}\",\n+            \"ret\": [\"s32\", \"f32\"],\n+            \"args\": [\"0\", \"0s\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_sad_epu8\",\n+            \"width\": [256],\n+            \"llvm\": \"psad.bw\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_shuffle_epi8\",\n+            \"width\": [256],\n+            \"llvm\": \"pshuf.b\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_sign_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"psign.{0.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_subs_{0.data_type}\",\n+            \"width\": [256],\n+            \"llvm\": \"psub{0.kind_short}s.{0.data_type_short}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "d48bcd268a0048fd87ee5635ea5f137fcd09dde9", "filename": "src/etc/platform-intrinsics/x86/info.json", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Finfo.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,28 @@\n+{\n+    \"platform\": \"x86\",\n+    \"intrinsic_prefix\": \"x86_mm\",\n+    \"number_info\": {\n+        \"signed\": {\n+            \"kind\": \"s\",\n+            \"kind_short\": \"\",\n+            \"data_type\": { \"pattern\": \"epi{bitwidth}\" },\n+            \"data_type_short\": { \"8\": \"b\", \"16\": \"w\", \"32\": \"d\", \"64\": \"q\" }\n+        },\n+        \"unsigned\": {\n+            \"kind\": \"u\",\n+            \"kind_short\": \"u\",\n+            \"data_type\": { \"pattern\": \"epu{bitwidth}\" },\n+            \"data_type_short\": { \"8\": \"b\", \"16\": \"w\", \"32\": \"d\", \"64\": \"q\" }\n+        },\n+        \"float\": {\n+            \"kind\": \"f\",\n+            \"data_type\": { \"32\": \"ps\", \"64\": \"pd\" },\n+            \"data_type_short\": { \"32\": \"ps\", \"64\": \"pd\" }\n+        }\n+    },\n+    \"width_info\": {\n+        \"128\": { \"width_mm\": \"\", \"width_suffix\": \"\" },\n+        \"256\": { \"width_mm\": \"256\", \"width_suffix\": \".256\" },\n+        \"512\": { \"width_mm\": \"512\", \"width_suffix\": \".512\" }\n+    }\n+}"}, {"sha": "144d326ffd0cb5f6dc4ed73c8ccb589ce6350a4b", "filename": "src/etc/platform-intrinsics/x86/sse.json", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,40 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.sse.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_movemask_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"movmsk.ps\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_max_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"max.ps\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_min_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"min.ps\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_rsqrt_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"rsqrt.ps\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_rcp_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"rcp.ps\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\"]\n+        }\n+    ]\n+}"}, {"sha": "2a3db561097933f454552339230f030028160299", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,110 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.sse2.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_adds_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"padd{0.kind_short}s.{0.data_type_short}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_avg_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pavg.{0.data_type_short}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_madd_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"pmadd.wd\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_max_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pmax{0.kind}.{0.data_type_short}\",\n+            \"ret\": [\"s16\", \"u8\"],\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_max_pd\",\n+            \"width\": [128],\n+            \"llvm\": \"max.pd\",\n+            \"ret\": \"f64\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_min_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pmin{0.kind}.{0.data_type_short}\",\n+            \"ret\": [\"s16\", \"u8\"],\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_min_pd\",\n+            \"width\": [128],\n+            \"llvm\": \"min.pd\",\n+            \"ret\": \"f64\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_movemask_pd\",\n+            \"width\": [128],\n+            \"llvm\": \"movmsk.pd\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"f64\"]\n+        },\n+        {\n+            \"intrinsic\": \"_movemask_epi8\",\n+            \"width\": [128],\n+            \"llvm\": \"pmovmskb.128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"_mul_epu32\",\n+            \"width\": [128],\n+            \"llvm\": \"pmulu.dq\",\n+            \"ret\": \"s64\",\n+            \"args\": [\"0dn\", \"0dn\"]\n+        },\n+        {\n+            \"intrinsic\": \"_mulhi_ep{0.kind}16\",\n+            \"width\": [128],\n+            \"llvm\": \"pmulh{0.kind_short}.w\",\n+            \"ret\": \"i16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_packs_{1.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"packss{1.data_type_short}{0.data_type_short}.128\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"_packus_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"packuswb.128\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"_sad_epu8\",\n+            \"width\": [128],\n+            \"llvm\": \"psad.bw\",\n+            \"ret\": \"u64\",\n+            \"args\": [\"u8\", \"u8\"]\n+        },\n+        {\n+            \"intrinsic\": \"_subs_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"psub{0.kind_short}s.{0.data_type_short}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "376e32fa9156835eb6ce6e166ed59695c88654e8", "filename": "src/etc/platform-intrinsics/x86/sse3.json", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse3.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.sse3.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_addsub_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"addsub.{0.data_type}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hadd_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"hadd.{0.data_type}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hsub_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"hsub.{0.data_type}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "8610dc83bd68d81430d61a6171e8e6731001e382", "filename": "src/etc/platform-intrinsics/x86/sse41.json", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,75 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.sse41.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_dp_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"dp{0.data_type}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_max_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pmax{0.kind}{0.data_type_short}\",\n+            \"ret\": [\"s8\", \"u16\", \"i32\"],\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_min_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pmin{0.kind}{0.data_type_short}\",\n+            \"ret\": [\"s8\", \"u16\", \"i32\"],\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_minpos_epu16\",\n+            \"width\": [128],\n+            \"llvm\": \"phminposuw\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_mpsadbw_epu8\",\n+            \"width\": [128],\n+            \"llvm\": \"mpsadbw\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"u8\", \"u8\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_mul_epi32\",\n+            \"width\": [128],\n+            \"llvm\": \"muldq\",\n+            \"ret\": \"s64\",\n+            \"args\": [\"s32\", \"s32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_packus_epi32\",\n+            \"width\": [128],\n+            \"llvm\": \"packusdw\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"s32\", \"s32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_testc_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"ptestc\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        },\n+        {\n+            \"intrinsic\": \"_testncz_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"ptest.nzc\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        },\n+        {\n+            \"intrinsic\": \"_testz_si128\",\n+            \"width\": [128],\n+            \"llvm\": \"ptestz\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"u64\", \"u64\"]\n+        }\n+    ]\n+}"}, {"sha": "2961405a05512ae19c33aab2656587490b1d5249", "filename": "src/etc/platform-intrinsics/x86/sse42.json", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,103 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.sse42.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_cmpestra\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestria128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestrc\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestric128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestri\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestri128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestrm\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestrim128\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestro\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestrio128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestrs\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestris128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpestrz\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpestriz128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistra\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistria128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistrc\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistric128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistri\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistrii128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistrm\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistrim128\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistro\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistrio128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistrs\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistris128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"_cmpistrz\",\n+            \"width\": [128],\n+            \"llvm\": \"pcmpistriz128\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+        }\n+    ]\n+}"}, {"sha": "bbe11380ff87045a109be36ac1c93a841e7ba2cb", "filename": "src/etc/platform-intrinsics/x86/ssse3.json", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -0,0 +1,68 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.ssse3.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"_abs_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"pabs.{0.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hadd_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"phadd.{0.data_type_short}.128\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hadds_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"phadd.sw.128\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hsub_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"phsub.{0.data_type_short}.128\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_hsubs_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"phsub.sw.128\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_maddubs_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"pmadd.ub.sw.128\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"s8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"_mulhrs_epi16\",\n+            \"width\": [128],\n+            \"llvm\": \"pmul.hr.sw.128\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"_shuffle_epi8\",\n+            \"width\": [128],\n+            \"llvm\": \"pshuf.b.128\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"s8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"_sign_{0.data_type}\",\n+            \"width\": [128],\n+            \"llvm\": \"psign.{0.data_type_short}.128\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "f805f480ece1ac18defa002e13e6771b943992c4", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 846, "deletions": 174, "changes": 1020, "blob_url": "https://github.com/rust-lang/rust/blob/24416a21515c41d0e34a85535407663e635b76f3/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24416a21515c41d0e34a85535407663e635b76f3/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=24416a21515c41d0e34a85535407663e635b76f3", "patch": "@@ -8,181 +8,853 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {Intrinsic, i, f, v};\n-use rustc::middle::ty;\n-\n-macro_rules! p {\n-    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n-        plain!(concat!(\"llvm.x86.\", $name), ($($inputs),*) -> $output)\n-    }\n-}\n-\n-pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    if name.starts_with(\"x86_mm_\") {\n-        Some(match &name[\"x86_mm_\".len()..] {\n-            \"sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n-            \"sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n-\n-            \"movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n-            \"max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n-            \"min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n-            \"rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n-            \"rcp_ps\" => p!(\"sse.rcp.ps\", (f32x4) -> f32x4),\n-\n-            \"adds_epi16\" => p!(\"sse2.padds.w\", (i16x8, i16x8) -> i16x8),\n-            \"adds_epi8\" => p!(\"sse2.padds.b\", (i8x16, i8x16) -> i8x16),\n-            \"adds_epu16\" => p!(\"sse2.paddus.w\", (i16x8, i16x8) -> i16x8),\n-            \"adds_epu8\" => p!(\"sse2.paddus.b\", (i8x16, i8x16) -> i8x16),\n-            \"avg_epu16\" => p!(\"sse2.pavg.w\", (i16x8, i16x8) -> i16x8),\n-            \"avg_epu8\" => p!(\"sse2.pavg.b\", (i8x16, i8x16) -> i8x16),\n-            \"madd_epi16\" => p!(\"sse2.pmadd.wd\", (i16x8, i16x8) -> i32x4),\n-            \"max_epi16\" => p!(\"sse2.pmaxs.w\", (i16x8, i16x8) -> i16x8),\n-            \"max_epu8\" => p!(\"sse2.pmaxu.b\", (i8x16, i8x16) -> i8x16),\n-            \"max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n-            \"min_epi16\" => p!(\"sse2.pmins.w\", (i16x8, i16x8) -> i16x8),\n-            \"min_epu8\" => p!(\"sse2.pminu.b\", (i8x16, i8x16) -> i8x16),\n-            \"min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n-            \"movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n-            \"movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n-            \"mul_epu32\" => p!(\"sse2.pmulu.dq\", (i32x4, i32x4) -> i64x2),\n-            \"mulhi_epi16\" => p!(\"sse2.pmulh.w\", (i8x16, i8x16) -> i8x16),\n-            \"mulhi_epu16\" => p!(\"sse2.pmulhu.w\", (i8x16, i8x16) -> i8x16),\n-            \"packs_epi16\" => p!(\"sse2.packsswb.128\", (i16x8, i16x8) -> i8x16),\n-            \"packs_epi32\" => p!(\"sse2.packssdw.128\", (i32x4, i32x4) -> i16x8),\n-            \"packus_epi16\" => p!(\"sse2.packuswb.128\", (i16x8, i16x8) -> i8x16),\n-            \"sad_epu8\" => p!(\"sse2.psad.bw\", (i8x16, i8x16) -> i64x2),\n-            \"subs_epi16\" => p!(\"sse2.psubs.w\", (i16x8, i16x8) -> i16x8),\n-            \"subs_epi8\" => p!(\"sse2.psubs.b\", (i8x16, i8x16) -> i8x16),\n-            \"subs_epu16\" => p!(\"sse2.psubus.w\", (i16x8, i16x8) -> i16x8),\n-            \"subs_epu8\" => p!(\"sse2.psubus.b\", (i8x16, i8x16) -> i8x16),\n+// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n+// ignore-tidy-linelength\n \n-            \"addsub_pd\" => p!(\"sse3.addsub.pd\", (f64x2, f64x2) -> f64x2),\n-            \"addsub_ps\" => p!(\"sse3.addsub.ps\", (f32x4, f32x4) -> f32x4),\n-            \"hadd_pd\" => p!(\"sse3.hadd.pd\", (f64x2, f64x2) -> f64x2),\n-            \"hadd_ps\" => p!(\"sse3.hadd.ps\", (f32x4, f32x4) -> f32x4),\n-            \"hsub_pd\" => p!(\"sse3.hsub.pd\", (f64x2, f64x2) -> f64x2),\n-            \"hsub_ps\" => p!(\"sse3.hsub.ps\", (f32x4, f32x4) -> f32x4),\n+#![allow(unused_imports)]\n \n-            \"abs_epi16\" => p!(\"ssse3.pabs.w.128\", (i16x8) -> i16x8),\n-            \"abs_epi32\" => p!(\"ssse3.pabs.d.128\", (i32x4) -> i32x4),\n-            \"abs_epi8\" => p!(\"ssse3.pabs.b.128\", (i8x16) -> i8x16),\n-            \"hadd_epi16\" => p!(\"ssse3.phadd.w.128\", (i16x8, i16x8) -> i16x8),\n-            \"hadd_epi32\" => p!(\"ssse3.phadd.d.128\", (i32x4, i32x4) -> i32x4),\n-            \"hadds_epi16\" => p!(\"ssse3.phadd.sw.128\", (i16x8, i16x8) -> i16x8),\n-            \"hsub_epi16\" => p!(\"ssse3.phsub.w.128\", (i16x8, i16x8) -> i16x8),\n-            \"hsub_epi32\" => p!(\"ssse3.phsub.d.128\", (i32x4, i32x4) -> i32x4),\n-            \"hsubs_epi16\" => p!(\"ssse3.phsub.sw.128\", (i16x8, i16x8) -> i16x8),\n-            \"maddubs_epi16\" => p!(\"ssse3.pmadd.ub.sw.128\", (i8x16, i8x16) -> i16x8),\n-            \"mulhrs_epi16\" => p!(\"ssse3.pmul.hr.sw.128\", (i16x8, i16x8) -> i16x8),\n-            \"shuffle_epi8\" => p!(\"ssse3.pshuf.b.128\", (i8x16, i8x16) -> i8x16),\n-            \"sign_epi16\" => p!(\"ssse3.psign.w.128\", (i16x8, i16x8) -> i16x8),\n-            \"sign_epi32\" => p!(\"ssse3.psign.d.128\", (i32x4, i32x4) -> i32x4),\n-            \"sign_epi8\" => p!(\"ssse3.psign.b.128\", (i8x16, i8x16) -> i8x16),\n-\n-            \"max_epi32\" => p!(\"sse41.pmaxsd\", (i32x4, i32x4) -> i32x4),\n-            \"max_epi8\" => p!(\"sse41.pmaxsb\", (i8x16, i8x16) -> i8x16),\n-            \"max_epu16\" => p!(\"sse41.pmaxuw\", (i16x8, i16x8) -> i16x8),\n-            \"max_epu32\" => p!(\"sse41.pmaxud\", (i32x4, i32x4) -> i32x4),\n-            \"min_epi32\" => p!(\"sse41.pminsd\", (i32x4, i32x4) -> i32x4),\n-            \"min_epi8\" => p!(\"sse41.pminsb\", (i8x16, i8x16) -> i8x16),\n-            \"min_epu16\" => p!(\"sse41.pminuw\", (i16x8, i16x8) -> i16x8),\n-            \"min_epu32\" => p!(\"sse41.pminud\", (i32x4, i32x4) -> i32x4),\n-            \"minpos_epu16\" => p!(\"sse41.phminposuw\", (i16x8) -> i16x8),\n-            \"mul_epi32\" => p!(\"sse41.muldq\", (i32x4, i32x4) -> i64x2),\n-            \"packus_epi32\" => p!(\"sse41.packusdw\", (i32x4, i32x4) -> i16x8),\n-            \"testc_si128\" => p!(\"sse41.ptestc\", (i64x2, i64x2) -> i32),\n-            \"testnzc_si128\" => p!(\"sse41.ptestnzc\", (i64x2, i64x2) -> i32),\n-            \"testz_si128\" => p!(\"sse41.ptestz\", (i64x2, i64x2) -> i32),\n-\n-            \"permutevar_pd\" => p!(\"avx.vpermilvar.pd\", (f64x2, i64x2) -> f64x2),\n-            \"permutevar_ps\" => p!(\"avx.vpermilvar.ps\", (f32x4, i32x4) -> f32x4),\n-            \"testc_pd\" => p!(\"avx.vtestc.pd\", (f64x2, f64x2) -> i32),\n-            \"testc_ps\" => p!(\"avx.vtestc.ps\", (f32x4, f32x4) -> i32),\n-            \"testnzc_pd\" => p!(\"avx.vtestnzc.pd\", (f64x2, f64x2) -> i32),\n-            \"testnzc_ps\" => p!(\"avx.vtestnzc.ps\", (f32x4, f32x4) -> i32),\n-            \"testz_pd\" => p!(\"avx.vtestz.pd\", (f64x2, f64x2) -> i32),\n-            \"testz_ps\" => p!(\"avx.vtestz.ps\", (f32x4, f32x4) -> i32),\n-\n-            _ => return None\n-        })\n-    } else if name.starts_with(\"x86_mm256_\") {\n-        Some(match &name[\"x86_mm256_\".len()..] {\n-            \"addsub_pd\" => p!(\"avx.addsub.pd.256\", (f64x4, f64x4) -> f64x4),\n-            \"addsub_ps\" => p!(\"avx.addsub.ps.256\", (f32x8, f32x8) -> f32x8),\n-            \"hadd_pd\" => p!(\"avx.hadd.pd.256\", (f64x4, f64x4) -> f64x4),\n-            \"hadd_ps\" => p!(\"avx.hadd.ps.256\", (f32x8, f32x8) -> f32x8),\n-            \"hsub_pd\" => p!(\"avx.hsub.pd.256\", (f64x4, f64x4) -> f64x4),\n-            \"hsub_ps\" => p!(\"avx.hsub.ps.256\", (f32x8, f32x8) -> f32x8),\n-            \"max_pd\" => p!(\"avx.max.pd.256\", (f64x4, f64x4) -> f64x4),\n-            \"max_ps\" => p!(\"avx.max.ps.256\", (f32x8, f32x8) -> f32x8),\n-            \"min_pd\" => p!(\"avx.min.pd.256\", (f64x4, f64x4) -> f64x4),\n-            \"min_ps\" => p!(\"avx.min.ps.256\", (f32x8, f32x8) -> f32x8),\n-            \"permutevar_pd\" => p!(\"avx.vpermilvar.pd.256\", (f64x4, i64x4) -> f64x4),\n-            \"permutevar_ps\" => p!(\"avx.vpermilvar.ps.256\", (f32x8, i32x8) -> f32x8),\n-            \"rcp_ps\" => p!(\"avx.rcp.ps.256\", (f32x8) -> f32x8),\n-            \"rsqrt_ps\" => p!(\"avx.rsqrt.ps.256\", (f32x8) -> f32x8),\n-            \"sqrt_pd\" => p!(\"llvm.sqrt.v4f64\", (f64x4) -> f64x4),\n-            \"sqrt_ps\" => p!(\"llvm.sqrt.v8f32\", (f32x8) -> f32x8),\n-            \"testc_pd\" => p!(\"avx.vtestc.pd.256\", (f64x4, f64x4) -> i32),\n-            \"testc_ps\" => p!(\"avx.vtestc.ps.256\", (f32x8, f32x8) -> i32),\n-            \"testnzc_pd\" => p!(\"avx.vtestnzc.pd.256\", (f64x4, f64x4) -> i32),\n-            \"testnzc_ps\" => p!(\"avx.vtestnzc.ps.256\", (f32x8, f32x8) -> i32),\n-            \"testz_pd\" => p!(\"avx.vtestz.pd.256\", (f64x4, f64x4) -> i32),\n-            \"testz_ps\" => p!(\"avx.vtestz.ps.256\", (f32x8, f32x8) -> i32),\n-\n-            \"abs_epi16\" => p!(\"avx2.pabs.w\", (i16x16) -> i16x16),\n-            \"abs_epi32\" => p!(\"avx2.pabs.d\", (i32x8) -> i32x8),\n-            \"abs_epi8\" => p!(\"avx2.pabs.b\", (i8x32) -> i8x32),\n-            \"adds_epi16\" => p!(\"avx2.padds.w\", (i16x16, i16x16) -> i16x16),\n-            \"adds_epi8\" => p!(\"avx2.padds.b\", (i8x32, i8x32) -> i8x32),\n-            \"adds_epu16\" => p!(\"avx2.paddus.w\", (i16x16, i16x16) -> i16x16),\n-            \"adds_epu8\" => p!(\"avx2.paddus.b\", (i8x32, i8x32) -> i8x32),\n-            \"avg_epu16\" => p!(\"avx2.pavg.w\", (i16x16, i16x16) -> i16x16),\n-            \"avg_epu8\" => p!(\"avx2.pavg.b\", (i8x32, i8x32) -> i8x32),\n-            \"hadd_epi16\" => p!(\"avx2.phadd.w\", (i16x16, i16x16) -> i16x16),\n-            \"hadd_epi32\" => p!(\"avx2.phadd.d\", (i32x8, i32x8) -> i32x8),\n-            \"hadds_epi16\" => p!(\"avx2.phadd.sw\", (i16x16, i16x16) -> i16x16),\n-            \"hsub_epi16\" => p!(\"avx2.phsub.w\", (i16x16, i16x16) -> i16x16),\n-            \"hsub_epi32\" => p!(\"avx2.phsub.d\", (i32x8, i32x8) -> i32x8),\n-            \"hsubs_epi16\" => p!(\"avx2.phsub.sw\", (i16x16, i16x16) -> i16x16),\n-            \"madd_epi16\" => p!(\"avx2.pmadd.wd\", (i16x16, i16x16) -> i32x8),\n-            \"maddubs_epi16\" => p!(\"avx2.pmadd.ub.sw\", (i8x32, i8x32) -> i16x16),\n-            \"max_epi16\" => p!(\"avx2.pmaxs.w\", (i16x16, i16x16) -> i16x16),\n-            \"max_epi32\" => p!(\"avx2.pmaxs.d\", (i32x8, i32x8) -> i32x8),\n-            \"max_epi8\" => p!(\"avx2.pmaxs.b\", (i8x32, i8x32) -> i8x32),\n-            \"max_epu16\" => p!(\"avx2.pmaxu.w\", (i16x16, i16x16) -> i16x16),\n-            \"max_epu32\" => p!(\"avx2.pmaxu.d\", (i32x8, i32x8) -> i32x8),\n-            \"max_epu8\" => p!(\"avx2.pmaxu.b\", (i8x32, i8x32) -> i8x32),\n-            \"min_epi16\" => p!(\"avx2.pmins.w\", (i16x16, i16x16) -> i16x16),\n-            \"min_epi32\" => p!(\"avx2.pmins.d\", (i32x8, i32x8) -> i32x8),\n-            \"min_epi8\" => p!(\"avx2.pmins.b\", (i8x32, i8x32) -> i8x32),\n-            \"min_epu16\" => p!(\"avx2.pminu.w\", (i16x16, i16x16) -> i16x16),\n-            \"min_epu32\" => p!(\"avx2.pminu.d\", (i32x8, i32x8) -> i32x8),\n-            \"min_epu8\" => p!(\"avx2.pminu.b\", (i8x32, i8x32) -> i8x32),\n-            \"mul_epi32\" => p!(\"avx2.mul.dq\", (i32x8, i32x8) -> i64x4),\n-            \"mul_epu32\" => p!(\"avx2.mulu.dq\", (i32x8, i32x8) -> i64x4),\n-            \"mulhi_epi16\" => p!(\"avx2.pmulh.w\", (i8x32, i8x32) -> i8x32),\n-            \"mulhi_epu16\" => p!(\"avx2.pmulhu.w\", (i8x32, i8x32) -> i8x32),\n-            \"mulhrs_epi16\" => p!(\"avx2.pmul.hr.sw\", (i16x16, i16x16) -> i16x16),\n-            \"packs_epi16\" => p!(\"avx2.packsswb\", (i16x16, i16x16) -> i8x32),\n-            \"packs_epi32\" => p!(\"avx2.packssdw\", (i32x8, i32x8) -> i16x16),\n-            \"packus_epi16\" => p!(\"avx2.packuswb\", (i16x16, i16x16) -> i8x32),\n-            \"packus_epi32\" => p!(\"avx2.packusdw\", (i32x8, i32x8) -> i16x16),\n-            \"permutevar8x32_epi32\" => p!(\"avx2.permd\", (i32x8, i32x8) -> i32x8),\n-            \"permutevar8x32_ps\" => p!(\"avx2.permps\", (f32x8, i32x8) -> i32x8),\n-            \"sad_epu8\" => p!(\"avx2.psad.bw\", (i8x32, i8x32) -> i64x4),\n-            \"shuffle_epi8\" => p!(\"avx2.pshuf.b\", (i8x32, i8x32) -> i8x32),\n-            \"sign_epi16\" => p!(\"avx2.psign.w\", (i16x16, i16x16) -> i16x16),\n-            \"sign_epi32\" => p!(\"avx2.psign.d\", (i32x8, i32x8) -> i32x8),\n-            \"sign_epi8\" => p!(\"avx2.psign.b\", (i8x32, i8x32) -> i8x32),\n-            \"subs_epi16\" => p!(\"avx2.psubs.w\", (i16x16, i16x16) -> i16x16),\n-            \"subs_epi8\" => p!(\"avx2.psubs.b\", (i8x32, i8x32) -> i8x32),\n-            \"subs_epu16\" => p!(\"avx2.psubus.w\", (i16x16, i16x16) -> i16x16),\n-            \"subs_epu8\" => p!(\"avx2.psubus.b\", (i8x32, i8x32) -> i8x32),\n+use {Intrinsic, i, u, f, v, agg};\n+use IntrinsicDef::Named;\n+use rustc::middle::ty;\n \n-            _ => return None,\n-        })\n-    } else {\n-        None\n-    }\n+pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    if !name.starts_with(\"x86_mm\") { return None }\n+    Some(match &name[\"x86_mm\".len()..] {\n+        \"_movemask_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse.movmsk.ps\")\n+        },\n+        \"_max_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse.max.ps\")\n+        },\n+        \"_min_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse.min.ps\")\n+        },\n+        \"_rsqrt_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse.rsqrt.ps\")\n+        },\n+        \"_rcp_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse.rcp.ps\")\n+        },\n+        \"_adds_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse2.padds.b\")\n+        },\n+        \"_adds_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.paddus.b\")\n+        },\n+        \"_adds_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.padds.w\")\n+        },\n+        \"_adds_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse2.paddus.w\")\n+        },\n+        \"_avg_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.pavg.b\")\n+        },\n+        \"_avg_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pavg.w\")\n+        },\n+        \"_madd_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pmadd.wd\")\n+        },\n+        \"_max_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pmaxs.w\")\n+        },\n+        \"_max_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.pmaxu.b\")\n+        },\n+        \"_max_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse2.max.pd\")\n+        },\n+        \"_min_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pmins.w\")\n+        },\n+        \"_min_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.pminu.b\")\n+        },\n+        \"_min_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse2.min.pd\")\n+        },\n+        \"_movemask_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse2.movmsk.pd\")\n+        },\n+        \"_movemask_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse2.pmovmskb.128\")\n+        },\n+        \"_mul_epu32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(64), 2),\n+            definition: Named(\"llvm.x86.sse2.pmulu.dq\")\n+        },\n+        \"_mulhi_eps16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pmulh.w\")\n+        },\n+        \"_mulhi_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse2.pmulhu.w\")\n+        },\n+        \"_packs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse2.packsswb.128\")\n+        },\n+        \"_packs_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.packssdw.128\")\n+        },\n+        \"_packus_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.packuswb.128\")\n+        },\n+        \"_sad_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(64), 2),\n+            definition: Named(\"llvm.x86.sse2.psad.bw\")\n+        },\n+        \"_subs_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse2.psubs.b\")\n+        },\n+        \"_subs_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16)],\n+            output: v(u(8), 16),\n+            definition: Named(\"llvm.x86.sse2.psubus.b\")\n+        },\n+        \"_subs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.sse2.psubs.w\")\n+        },\n+        \"_subs_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse2.psubus.w\")\n+        },\n+        \"_addsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse3.addsub.ps\")\n+        },\n+        \"_addsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse3.addsub.pd\")\n+        },\n+        \"_hadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse3.hadd.ps\")\n+        },\n+        \"_hadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse3.hadd.pd\")\n+        },\n+        \"_hsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse3.hsub.ps\")\n+        },\n+        \"_hsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse3.hsub.pd\")\n+        },\n+        \"_abs_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.ssse3.pabs.b\")\n+        },\n+        \"_abs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.pabs.w\")\n+        },\n+        \"_abs_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.ssse3.pabs.d\")\n+        },\n+        \"_hadd_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.phadd.w.128\")\n+        },\n+        \"_hadd_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.ssse3.phadd.d.128\")\n+        },\n+        \"_hadds_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.phadd.sw.128\")\n+        },\n+        \"_hsub_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.phsub.w.128\")\n+        },\n+        \"_hsub_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.ssse3.phsub.d.128\")\n+        },\n+        \"_hsubs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.phsub.sw.128\")\n+        },\n+        \"_maddubs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.pmadd.ub.sw.128\")\n+        },\n+        \"_mulhrs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.pmul.hr.sw.128\")\n+        },\n+        \"_shuffle_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.ssse3.pshuf.b.128\")\n+        },\n+        \"_sign_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.ssse3.psign.b.128\")\n+        },\n+        \"_sign_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 8), v(i(16), 8)],\n+            output: v(i(16), 8),\n+            definition: Named(\"llvm.x86.ssse3.psign.w.128\")\n+        },\n+        \"_dp_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), i(32)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.sse41.dpps\")\n+        },\n+        \"_dp_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), i(32)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.sse41.dppd\")\n+        },\n+        \"_max_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse41.pmaxsb\")\n+        },\n+        \"_max_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse41.pmaxuw\")\n+        },\n+        \"_max_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.sse41.pmaxsd\")\n+        },\n+        \"_max_epu32\" => Intrinsic {\n+            inputs: vec![v(u(32), 4), v(u(32), 4)],\n+            output: v(u(32), 4),\n+            definition: Named(\"llvm.x86.sse41.pmaxud\")\n+        },\n+        \"_min_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse41.pminsb\")\n+        },\n+        \"_min_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8), v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse41.pminuw\")\n+        },\n+        \"_min_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.sse41.pminsd\")\n+        },\n+        \"_min_epu32\" => Intrinsic {\n+            inputs: vec![v(u(32), 4), v(u(32), 4)],\n+            output: v(u(32), 4),\n+            definition: Named(\"llvm.x86.sse41.pminud\")\n+        },\n+        \"_minpos_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 8)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse41.phminposuw\")\n+        },\n+        \"_mpsadbw_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 16), v(u(8), 16), i(32)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse41.mpsadbw\")\n+        },\n+        \"_mul_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(64), 2),\n+            definition: Named(\"llvm.x86.sse41.muldq\")\n+        },\n+        \"_packus_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(u(16), 8),\n+            definition: Named(\"llvm.x86.sse41.packusdw\")\n+        },\n+        \"_testc_si128\" => Intrinsic {\n+            inputs: vec![v(u(64), 2), v(u(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse41.ptestc\")\n+        },\n+        \"_testncz_si128\" => Intrinsic {\n+            inputs: vec![v(u(64), 2), v(u(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse41.ptest.nzc\")\n+        },\n+        \"_testz_si128\" => Intrinsic {\n+            inputs: vec![v(u(64), 2), v(u(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse41.ptestz\")\n+        },\n+        \"_cmpestra\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestria128\")\n+        },\n+        \"_cmpestrc\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestric128\")\n+        },\n+        \"_cmpestri\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestri128\")\n+        },\n+        \"_cmpestrm\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse42.pcmpestrim128\")\n+        },\n+        \"_cmpestro\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestrio128\")\n+        },\n+        \"_cmpestrs\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestris128\")\n+        },\n+        \"_cmpestrz\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpestriz128\")\n+        },\n+        \"_cmpistra\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistria128\")\n+        },\n+        \"_cmpistrc\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistric128\")\n+        },\n+        \"_cmpistri\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistrii128\")\n+        },\n+        \"_cmpistrm\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: v(i(8), 16),\n+            definition: Named(\"llvm.x86.sse42.pcmpistrim128\")\n+        },\n+        \"_cmpistro\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistrio128\")\n+        },\n+        \"_cmpistrs\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistris128\")\n+        },\n+        \"_cmpistrz\" => Intrinsic {\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.sse42.pcmpistriz128\")\n+        },\n+        \"256_addsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.addsub.ps.256\")\n+        },\n+        \"256_addsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.addsub.pd.256\")\n+        },\n+        \"256_dp_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), i(32)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.dp.ps.256\")\n+        },\n+        \"256_hadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.hadd.ps.256\")\n+        },\n+        \"256_hadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.hadd.pd.256\")\n+        },\n+        \"256_hsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.hsub.ps.256\")\n+        },\n+        \"256_hsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.hsub.pd.256\")\n+        },\n+        \"256_max_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.max.ps.256\")\n+        },\n+        \"256_max_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.max.pd.256\")\n+        },\n+        \"256_min_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.min.ps.256\")\n+        },\n+        \"256_min_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.min.pd.256\")\n+        },\n+        \"256_movemask_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.movmsk.ps.256\")\n+        },\n+        \"256_movemask_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.movmsk.pd.256\")\n+        },\n+        \"_permutevar_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(i(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.avx.vpermilvar.ps\")\n+        },\n+        \"_permutevar_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(i(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.avx.vpermilvar.pd\")\n+        },\n+        \"256_permutevar_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(i(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.vpermilvar.ps.256\")\n+        },\n+        \"256_permutevar_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(i(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.avx.vpermilvar.pd.256\")\n+        },\n+        \"256_rcp_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.rcp.ps.256\")\n+        },\n+        \"256_rsqrt_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx.rsqrt.ps.256\")\n+        },\n+        \"256_sqrt_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.sqrt.v8f32\")\n+        },\n+        \"256_sqrt_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.sqrt.v4f64\")\n+        },\n+        \"_testc_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestc.ps\")\n+        },\n+        \"256_testc_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestc.ps.256\")\n+        },\n+        \"_testc_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestc.pd\")\n+        },\n+        \"256_testc_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestc.pd.256\")\n+        },\n+        \"256_testc_si256\" => Intrinsic {\n+            inputs: vec![v(u(64), 4), v(u(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.ptestc.256\")\n+        },\n+        \"_testnzc_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestnzc.ps\")\n+        },\n+        \"256_testnzc_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestnzc.ps.256\")\n+        },\n+        \"_testnzc_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestnzc.pd\")\n+        },\n+        \"256_testnzc_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestnzc.pd.256\")\n+        },\n+        \"256_testnzc_si256\" => Intrinsic {\n+            inputs: vec![v(u(64), 4), v(u(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.ptestnzc.256\")\n+        },\n+        \"_testz_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestz.ps\")\n+        },\n+        \"256_testz_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestz.ps.256\")\n+        },\n+        \"_testz_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestz.pd\")\n+        },\n+        \"256_testz_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.vtestz.pd.256\")\n+        },\n+        \"256_testz_si256\" => Intrinsic {\n+            inputs: vec![v(u(64), 4), v(u(64), 4)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx.ptestz.256\")\n+        },\n+        \"256_abs_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.avx2.pabs.b\")\n+        },\n+        \"256_abs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.avx2.pabs.w\")\n+        },\n+        \"256_abs_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.avx2.pabs.d\")\n+        },\n+        \"256_adds_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.avx2.padds.b\")\n+        },\n+        \"256_adds_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.avx2.paddus.b\")\n+        },\n+        \"256_adds_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.avx2.padds.w\")\n+        },\n+        \"256_adds_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.avx2.paddus.w\")\n+        },\n+        \"256_avg_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.avx2.pavg.b\")\n+        },\n+        \"256_avg_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.avx2.pavg.w\")\n+        },\n+        \"256_hadd_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.phadd.w\")\n+        },\n+        \"256_hadd_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.phadd.d\")\n+        },\n+        \"256_hadds_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.phadd.sw\")\n+        },\n+        \"256_hsub_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.phsub.w\")\n+        },\n+        \"256_hsub_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.phsub.d\")\n+        },\n+        \"256_hsubs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.phsub.sw\")\n+        },\n+        \"256_madd_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.pmadd.wd\")\n+        },\n+        \"256_maddubs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmadd.ub.sw\")\n+        },\n+        \"256_max_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.pmaxs.b\")\n+        },\n+        \"256_max_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.pmaxu.b\")\n+        },\n+        \"256_max_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmaxs.w\")\n+        },\n+        \"256_max_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmaxu.w\")\n+        },\n+        \"256_max_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.pmaxs.d\")\n+        },\n+        \"256_max_epu32\" => Intrinsic {\n+            inputs: vec![v(u(32), 8), v(u(32), 8)],\n+            output: v(u(32), 8),\n+            definition: Named(\"llvm.x86.avx2.pmaxu.d\")\n+        },\n+        \"256_min_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.pmins.b\")\n+        },\n+        \"256_min_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.pminu.b\")\n+        },\n+        \"256_min_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmins.w\")\n+        },\n+        \"256_min_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pminu.w\")\n+        },\n+        \"256_min_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.pmins.d\")\n+        },\n+        \"256_min_epu32\" => Intrinsic {\n+            inputs: vec![v(u(32), 8), v(u(32), 8)],\n+            output: v(u(32), 8),\n+            definition: Named(\"llvm.x86.avx2.pminu.d\")\n+        },\n+        \"256_mul_epi64\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(64), 4),\n+            definition: Named(\"llvm.x86.avx2.pmulq.dq\")\n+        },\n+        \"256_mul_epu64\" => Intrinsic {\n+            inputs: vec![v(u(32), 8), v(u(32), 8)],\n+            output: v(u(64), 4),\n+            definition: Named(\"llvm.x86.avx2.pmulq.dq\")\n+        },\n+        \"256_mulhi_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmulhw.w\")\n+        },\n+        \"256_mulhi_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmulhw.w\")\n+        },\n+        \"256_mulhrs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.pmul.hr.sw\")\n+        },\n+        \"256_packs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.packsswb\")\n+        },\n+        \"256_packus_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.packuswb\")\n+        },\n+        \"256_packs_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.packssdw\")\n+        },\n+        \"256_packus_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.packusdw\")\n+        },\n+        \"256_permutevar8x32_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.permd\")\n+        },\n+        \"256_permutevar8x32_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(i(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.avx2.permps\")\n+        },\n+        \"256_sad_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.psad.bw\")\n+        },\n+        \"256_shuffle_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.pshuf.b\")\n+        },\n+        \"256_sign_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.psign.b\")\n+        },\n+        \"256_sign_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.psign.w\")\n+        },\n+        \"256_sign_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 8), v(i(32), 8)],\n+            output: v(i(32), 8),\n+            definition: Named(\"llvm.x86.avx2.psign.d\")\n+        },\n+        \"256_subs_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32), v(i(8), 32)],\n+            output: v(i(8), 32),\n+            definition: Named(\"llvm.x86.avx2.psubs.b\")\n+        },\n+        \"256_subs_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32)],\n+            output: v(u(8), 32),\n+            definition: Named(\"llvm.x86.avx2.psubus.b\")\n+        },\n+        \"256_subs_epi16\" => Intrinsic {\n+            inputs: vec![v(i(16), 16), v(i(16), 16)],\n+            output: v(i(16), 16),\n+            definition: Named(\"llvm.x86.avx2.psubs.w\")\n+        },\n+        \"256_subs_epu16\" => Intrinsic {\n+            inputs: vec![v(u(16), 16), v(u(16), 16)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.psubus.w\")\n+        },\n+        _ => return None,\n+    })\n }"}]}