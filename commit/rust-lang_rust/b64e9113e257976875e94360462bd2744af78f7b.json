{"sha": "b64e9113e257976875e94360462bd2744af78f7b", "node_id": "C_kwDOAAsO6NoAKGI2NGU5MTEzZTI1Nzk3Njg3NWU5NDM2MDQ2MmJkMjc0NGFmNzhmN2I", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T16:06:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T17:21:35Z"}, "message": "Add test.", "tree": {"sha": "1d3e996d235fab8e466f4ac7f004dda0cfbdf85c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3e996d235fab8e466f4ac7f004dda0cfbdf85c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b64e9113e257976875e94360462bd2744af78f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b64e9113e257976875e94360462bd2744af78f7b", "html_url": "https://github.com/rust-lang/rust/commit/b64e9113e257976875e94360462bd2744af78f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b64e9113e257976875e94360462bd2744af78f7b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba14074bb4cc12bfe918eabd0d52a3999b2a461", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba14074bb4cc12bfe918eabd0d52a3999b2a461", "html_url": "https://github.com/rust-lang/rust/commit/cba14074bb4cc12bfe918eabd0d52a3999b2a461"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "c137705a39a935200b08a356564addfebff1da2e", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=b64e9113e257976875e94360462bd2744af78f7b", "patch": "@@ -0,0 +1,75 @@\n+- // MIR for `mut_raw_then_mut_shr` before ReferencePropagation\n++ // MIR for `mut_raw_then_mut_shr` after ReferencePropagation\n+  \n+  fn mut_raw_then_mut_shr() -> (i32, i32) {\n+      let mut _0: (i32, i32);              // return place in scope 0 at $DIR/reference_prop.rs:+0:30: +0:40\n+      let mut _1: i32;                     // in scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n+      let mut _4: *mut i32;                // in scope 0 at $DIR/reference_prop.rs:+3:16: +3:36\n+      let mut _5: &mut i32;                // in scope 0 at $DIR/reference_prop.rs:+3:16: +3:26\n+      let _8: ();                          // in scope 0 at $DIR/reference_prop.rs:+7:5: +7:26\n+      let mut _9: i32;                     // in scope 0 at $DIR/reference_prop.rs:+8:6: +8:7\n+      let mut _10: i32;                    // in scope 0 at $DIR/reference_prop.rs:+8:9: +8:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:14\n+          let _2: &mut i32;                // in scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n+          scope 2 {\n+              debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n+              let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+              scope 3 {\n+                  debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n+                  let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+                  scope 4 {\n+                      debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n+                      let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n+                      scope 5 {\n+                          debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n+                          scope 6 {\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n+          _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n+-         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n+          _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n+          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+          StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+-         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+-         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n++         _5 = &mut _1;                    // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n++         _4 = &raw mut (*_2);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+          _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n+          StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n+          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+-         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n++         _6 = &_1;                        // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n+          StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n+-         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26\n+-         (*_3) = const 4_i32;             // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n+-         _8 = const ();                   // scope 6 at $DIR/reference_prop.rs:+7:5: +7:26\n+-         StorageDead(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:25: +7:26\n++         _7 = (*_2);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n++         (*_5) = const 4_i32;             // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n+          StorageLive(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n+          _9 = _7;                         // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n+          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+8:9: +8:10\n+          _10 = _1;                        // scope 5 at $DIR/reference_prop.rs:+8:9: +8:10\n+          _0 = (move _9, move _10);        // scope 5 at $DIR/reference_prop.rs:+8:5: +8:11\n+          StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n+          StorageDead(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n+          StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "93f8d1df8e85ad1ccd1eb63e1910c20ce52cfd78", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=b64e9113e257976875e94360462bd2744af78f7b", "patch": "@@ -433,6 +433,29 @@ fn maybe_dead(m: bool) {\n     )\n }\n \n+fn mut_raw_then_mut_shr() -> (i32, i32) {\n+    let mut x = 2;\n+    let xref = &mut x;\n+    let xraw = &mut *xref as *mut _;\n+    let xshr = &*xref;\n+    // Verify that we completely replace with `x` in both cases.\n+    let a = *xshr;\n+    unsafe { *xraw = 4; }\n+    (a, x)\n+}\n+\n+fn unique_with_copies() {\n+    let y = {\n+        let mut a = 0;\n+        let x = &raw mut a;\n+        // `*y` is not replacable below, so we must not replace `*x`.\n+        unsafe { opaque(*x) };\n+        x\n+    };\n+    // But rewriting as `*x` is ok.\n+    unsafe { opaque(*y) };\n+}\n+\n fn main() {\n     let mut x = 5_usize;\n     let mut y = 7_usize;\n@@ -444,6 +467,8 @@ fn main() {\n     multiple_storage();\n     dominate_storage();\n     maybe_dead(true);\n+    mut_raw_then_mut_shr();\n+    unique_with_copies();\n }\n \n // EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n@@ -454,3 +479,5 @@ fn main() {\n // EMIT_MIR reference_prop.multiple_storage.ReferencePropagation.diff\n // EMIT_MIR reference_prop.dominate_storage.ReferencePropagation.diff\n // EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.unique_with_copies.ReferencePropagation.diff"}, {"sha": "89aa6c7b7928ad0b3f1fb097443714a5a176a154", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b64e9113e257976875e94360462bd2744af78f7b/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=b64e9113e257976875e94360462bd2744af78f7b", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `unique_with_copies` before ReferencePropagation\n++ // MIR for `unique_with_copies` after ReferencePropagation\n+  \n+  fn unique_with_copies() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:25: +0:25\n+      let _1: *mut i32;                    // in scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n+      let _4: ();                          // in scope 0 at $DIR/reference_prop.rs:+5:18: +5:28\n+      let mut _5: i32;                     // in scope 0 at $DIR/reference_prop.rs:+5:25: +5:27\n+      let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:14: +9:24\n+      let mut _7: i32;                     // in scope 0 at $DIR/reference_prop.rs:+9:21: +9:23\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n+          scope 5 {\n+          }\n+      }\n+      scope 2 {\n+          debug a => _2;                   // in scope 2 at $DIR/reference_prop.rs:+2:13: +2:18\n+          let _3: *mut i32;                // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n+          scope 3 {\n+              debug x => _3;               // in scope 3 at $DIR/reference_prop.rs:+3:13: +3:14\n+              scope 4 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n+          _2 = const 0_i32;                // scope 0 at $DIR/reference_prop.rs:+2:21: +2:22\n+          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n+          _3 = &raw mut _2;                // scope 2 at $DIR/reference_prop.rs:+3:17: +3:27\n+          StorageLive(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:9: +5:30\n+          StorageLive(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n+-         _5 = (*_3);                      // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n++         _5 = _2;                         // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n+          _4 = opaque::<i32>(move _5) -> bb1; // scope 4 at $DIR/reference_prop.rs:+5:18: +5:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:452:18: 452:24\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:27: +5:28\n+          StorageDead(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:30: +5:31\n+          _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n+          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageLive(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:5: +9:26\n+          StorageLive(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n+          _7 = (*_1);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n+          _6 = opaque::<i32>(move _7) -> bb2; // scope 5 at $DIR/reference_prop.rs:+9:14: +9:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:456:14: 456:20\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:23: +9:24\n+          StorageDead(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:26: +9:27\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:25: +10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+10:2: +10:2\n+      }\n+  }\n+  "}]}