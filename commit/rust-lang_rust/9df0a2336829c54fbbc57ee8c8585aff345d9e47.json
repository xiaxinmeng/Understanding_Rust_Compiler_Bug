{"sha": "9df0a2336829c54fbbc57ee8c8585aff345d9e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZjBhMjMzNjgyOWM1NGZiYmM1N2VlOGM4NTg1YWZmMzQ1ZDllNDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-16T12:14:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-16T12:14:57Z"}, "message": "internal: use standard test style", "tree": {"sha": "c3d84a9e3535cb65026a9c6230a27d12c05afebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d84a9e3535cb65026a9c6230a27d12c05afebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9df0a2336829c54fbbc57ee8c8585aff345d9e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9df0a2336829c54fbbc57ee8c8585aff345d9e47", "html_url": "https://github.com/rust-lang/rust/commit/9df0a2336829c54fbbc57ee8c8585aff345d9e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9df0a2336829c54fbbc57ee8c8585aff345d9e47/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a7b44e554e183fc66474bcbd8f7ace541c5536", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a7b44e554e183fc66474bcbd8f7ace541c5536", "html_url": "https://github.com/rust-lang/rust/commit/e4a7b44e554e183fc66474bcbd8f7ace541c5536"}], "stats": {"total": 609, "additions": 305, "deletions": 304}, "files": [{"sha": "58b001050570268649bbe2b54f301dc02ab497db", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 305, "deletions": 304, "changes": 609, "blob_url": "https://github.com/rust-lang/rust/blob/9df0a2336829c54fbbc57ee8c8585aff345d9e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df0a2336829c54fbbc57ee8c8585aff345d9e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=9df0a2336829c54fbbc57ee8c8585aff345d9e47", "patch": "@@ -275,18 +275,18 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs{x:i32, y:Option<i32>},\n-                Cs(i32, Option<i32>),\n-            }\n-            fn main() {\n-                match A::As$0 {\n-                    A::As,\n-                    A::Bs{x,y:Some(_)} => {}\n-                    A::Cs(_, Some(_)) => {}\n-                }\n-            }\n+enum A {\n+    As,\n+    Bs{x:i32, y:Option<i32>},\n+    Cs(i32, Option<i32>),\n+}\n+fn main() {\n+    match A::As$0 {\n+        A::As,\n+        A::Bs{x,y:Some(_)} => {}\n+        A::Cs(_, Some(_)) => {}\n+    }\n+}\n             \"#,\n         );\n     }\n@@ -296,13 +296,13 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match a$0 {\n-                    true => {}\n-                    false => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match a$0 {\n+        true => {}\n+        false => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -313,11 +313,11 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            fn main() {\n-                match (0, false)$0 {\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match (0, false)$0 {\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -326,19 +326,19 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match a$0 {\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match a$0 {\n+    }\n+}\n+\"#,\n             r#\"\n-            fn foo(a: bool) {\n-                match a {\n-                    $0true => {}\n-                    false => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match a {\n+        $0true => {}\n+        false => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -347,20 +347,20 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match a$0 {\n-                    true => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match a$0 {\n+        true => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            fn foo(a: bool) {\n-                match a {\n-                    true => {}\n-                    $0false => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match a {\n+        true => {}\n+        $0false => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -369,15 +369,15 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match (a, a)$0 {\n-                    (true, true) => {}\n-                    (true, false) => {}\n-                    (false, true) => {}\n-                    (false, false) => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match (a, a)$0 {\n+        (true, true) => {}\n+        (true, false) => {}\n+        (false, true) => {}\n+        (false, false) => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -386,21 +386,21 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match (a, a)$0 {\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match (a, a)$0 {\n+    }\n+}\n+\"#,\n             r#\"\n-            fn foo(a: bool) {\n-                match (a, a) {\n-                    $0(true, true) => {}\n-                    (true, false) => {}\n-                    (false, true) => {}\n-                    (false, false) => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match (a, a) {\n+        $0(true, true) => {}\n+        (true, false) => {}\n+        (false, true) => {}\n+        (false, false) => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -409,22 +409,22 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            fn foo(a: bool) {\n-                match (a, a)$0 {\n-                    (false, true) => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match (a, a)$0 {\n+        (false, true) => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            fn foo(a: bool) {\n-                match (a, a) {\n-                    (false, true) => {}\n-                    $0(true, true) => {}\n-                    (true, false) => {}\n-                    (false, false) => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: bool) {\n+    match (a, a) {\n+        (false, true) => {}\n+        $0(true, true) => {}\n+        (true, false) => {}\n+        (false, false) => {}\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -433,32 +433,32 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs { x: i32, y: Option<i32> },\n-                Cs(i32, Option<i32>),\n-            }\n-            fn main() {\n-                match A::As$0 {\n-                    A::Bs { x, y: Some(_) } => {}\n-                    A::Cs(_, Some(_)) => {}\n-                }\n-            }\n-            \"#,\n+enum A {\n+    As,\n+    Bs { x: i32, y: Option<i32> },\n+    Cs(i32, Option<i32>),\n+}\n+fn main() {\n+    match A::As$0 {\n+        A::Bs { x, y: Some(_) } => {}\n+        A::Cs(_, Some(_)) => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                As,\n-                Bs { x: i32, y: Option<i32> },\n-                Cs(i32, Option<i32>),\n-            }\n-            fn main() {\n-                match A::As {\n-                    A::Bs { x, y: Some(_) } => {}\n-                    A::Cs(_, Some(_)) => {}\n-                    $0A::As => {}\n-                }\n-            }\n-            \"#,\n+enum A {\n+    As,\n+    Bs { x: i32, y: Option<i32> },\n+    Cs(i32, Option<i32>),\n+}\n+fn main() {\n+    match A::As {\n+        A::Bs { x, y: Some(_) } => {}\n+        A::Cs(_, Some(_)) => {}\n+        $0A::As => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -605,30 +605,30 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n-            enum B { One, Two }\n+enum A { One, Two }\n+enum B { One, Two }\n \n-            fn main() {\n-                let a = A::One;\n-                let b = B::One;\n-                match (a$0, b) {}\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (a$0, b) {}\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two }\n-            enum B { One, Two }\n-\n-            fn main() {\n-                let a = A::One;\n-                let b = B::One;\n-                match (a, b) {\n-                    $0(A::One, B::One) => {}\n-                    (A::One, B::Two) => {}\n-                    (A::Two, B::One) => {}\n-                    (A::Two, B::Two) => {}\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+enum B { One, Two }\n+\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (a, b) {\n+        $0(A::One, B::One) => {}\n+        (A::One, B::Two) => {}\n+        (A::Two, B::One) => {}\n+        (A::Two, B::Two) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -637,30 +637,30 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n-            enum B { One, Two }\n+enum A { One, Two }\n+enum B { One, Two }\n \n-            fn main() {\n-                let a = A::One;\n-                let b = B::One;\n-                match (&a$0, &b) {}\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (&a$0, &b) {}\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two }\n-            enum B { One, Two }\n-\n-            fn main() {\n-                let a = A::One;\n-                let b = B::One;\n-                match (&a, &b) {\n-                    $0(A::One, B::One) => {}\n-                    (A::One, B::Two) => {}\n-                    (A::Two, B::One) => {}\n-                    (A::Two, B::Two) => {}\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+enum B { One, Two }\n+\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (&a, &b) {\n+        $0(A::One, B::One) => {}\n+        (A::One, B::Two) => {}\n+        (A::Two, B::One) => {}\n+        (A::Two, B::Two) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -749,20 +749,20 @@ fn main() {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n-            enum B { One, Two }\n-\n-            fn main() {\n-                let a = A::One;\n-                let b = B::One;\n-                match (a$0, b) {\n-                    (A::Two, B::One) => {}\n-                    (A::One, B::One) => {}\n-                    (A::One, B::Two) => {}\n-                    (A::Two, B::Two) => {}\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+enum B { One, Two }\n+\n+fn main() {\n+    let a = A::One;\n+    let b = B::One;\n+    match (a$0, b) {\n+        (A::Two, B::One) => {}\n+        (A::One, B::One) => {}\n+        (A::One, B::Two) => {}\n+        (A::Two, B::Two) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -771,25 +771,25 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n+enum A { One, Two }\n \n-            fn main() {\n-                let a = A::One;\n-                match (a$0, ) {\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::One;\n+    match (a$0, ) {\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two }\n+enum A { One, Two }\n \n-            fn main() {\n-                let a = A::One;\n-                match (a, ) {\n-                    $0(A::One,) => {}\n-                    (A::Two,) => {}\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::One;\n+    match (a, ) {\n+        $0(A::One,) => {}\n+        (A::Two,) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -798,47 +798,47 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { As }\n+enum A { As }\n \n-            fn foo(a: &A) {\n-                match a$0 {\n-                }\n-            }\n-            \"#,\n+fn foo(a: &A) {\n+    match a$0 {\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A { As }\n+enum A { As }\n \n-            fn foo(a: &A) {\n-                match a {\n-                    $0A::As => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: &A) {\n+    match a {\n+        $0A::As => {}\n+    }\n+}\n+\"#,\n         );\n \n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                Es { x: usize, y: usize }\n-            }\n+enum A {\n+    Es { x: usize, y: usize }\n+}\n \n-            fn foo(a: &mut A) {\n-                match a$0 {\n-                }\n-            }\n-            \"#,\n+fn foo(a: &mut A) {\n+    match a$0 {\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                Es { x: usize, y: usize }\n-            }\n+enum A {\n+    Es { x: usize, y: usize }\n+}\n \n-            fn foo(a: &mut A) {\n-                match a {\n-                    $0A::Es { x, y } => {}\n-                }\n-            }\n-            \"#,\n+fn foo(a: &mut A) {\n+    match a {\n+        $0A::Es { x, y } => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -847,12 +847,12 @@ fn main() {\n         check_assist_target(\n             fill_match_arms,\n             r#\"\n-            enum E { X, Y }\n+enum E { X, Y }\n \n-            fn main() {\n-                match E::X$0 {}\n-            }\n-            \"#,\n+fn main() {\n+    match E::X$0 {}\n+}\n+\"#,\n             \"match E::X {}\",\n         );\n     }\n@@ -862,24 +862,24 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum E { X, Y }\n+enum E { X, Y }\n \n-            fn main() {\n-                match E::X {\n-                    $0_ => {}\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match E::X {\n+        $0_ => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            enum E { X, Y }\n+enum E { X, Y }\n \n-            fn main() {\n-                match E::X {\n-                    $0E::X => {}\n-                    E::Y => {}\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match E::X {\n+        $0E::X => {}\n+        E::Y => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -888,26 +888,26 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            mod foo { pub enum E { X, Y } }\n-            use foo::E::X;\n+mod foo { pub enum E { X, Y } }\n+use foo::E::X;\n \n-            fn main() {\n-                match X {\n-                    $0\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match X {\n+        $0\n+    }\n+}\n+\"#,\n             r#\"\n-            mod foo { pub enum E { X, Y } }\n-            use foo::E::X;\n+mod foo { pub enum E { X, Y } }\n+use foo::E::X;\n \n-            fn main() {\n-                match X {\n-                    $0X => {}\n-                    foo::E::Y => {}\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match X {\n+        $0X => {}\n+        foo::E::Y => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -916,26 +916,26 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n-            fn foo(a: A) {\n-                match a {\n-                    // foo bar baz$0\n-                    A::One => {}\n-                    // This is where the rest should be\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+fn foo(a: A) {\n+    match a {\n+        // foo bar baz$0\n+        A::One => {}\n+        // This is where the rest should be\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two }\n-            fn foo(a: A) {\n-                match a {\n-                    // foo bar baz\n-                    A::One => {}\n-                    $0A::Two => {}\n-                    // This is where the rest should be\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+fn foo(a: A) {\n+    match a {\n+        // foo bar baz\n+        A::One => {}\n+        $0A::Two => {}\n+        // This is where the rest should be\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -944,23 +944,23 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two }\n-            fn foo(a: A) {\n-                match a {\n-                    // foo bar baz$0\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+fn foo(a: A) {\n+    match a {\n+        // foo bar baz$0\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two }\n-            fn foo(a: A) {\n-                match a {\n-                    $0A::One => {}\n-                    A::Two => {}\n-                    // foo bar baz\n-                }\n-            }\n-            \"#,\n+enum A { One, Two }\n+fn foo(a: A) {\n+    match a {\n+        $0A::One => {}\n+        A::Two => {}\n+        // foo bar baz\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -969,22 +969,22 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A { One, Two, }\n-            fn foo(a: A) {\n-                match a$0 {\n-                    _ => (),\n-                }\n-            }\n-            \"#,\n+enum A { One, Two, }\n+fn foo(a: A) {\n+    match a$0 {\n+        _ => (),\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A { One, Two, }\n-            fn foo(a: A) {\n-                match a {\n-                    $0A::One => {}\n-                    A::Two => {}\n-                }\n-            }\n-            \"#,\n+enum A { One, Two, }\n+fn foo(a: A) {\n+    match a {\n+        $0A::One => {}\n+        A::Two => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -1028,7 +1028,8 @@ enum Test {\n fn foo(t: Test) {\n     m!(match t$0 {});\n }\"#,\n-            r#\"macro_rules! m { ($expr:expr) => {$expr}}\n+            r#\"\n+macro_rules! m { ($expr:expr) => {$expr}}\n enum Test {\n     A,\n     B,"}]}