{"sha": "e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "node_id": "C_kwDOAAsO6NoAKGUwOGFiMDhhMmU4YzQ3MGQ2MmFhN2Q0MWIxYzFkYzQyNjk2ZjlkYTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-30T22:26:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-30T22:26:29Z"}, "message": "Rollup merge of #94869 - jackh726:gats_extended, r=compiler-errors\n\nAdd the generic_associated_types_extended feature\n\nRight now, this only ignore obligations that reference new placeholders in `poly_project_and_unify_type`. In the future, this might do other things, like allowing object-safe GATs.\n\n**This feature is *incomplete* and quite likely unsound. This is mostly just for testing out potential future APIs using a \"relaxed\" set of rules until we figure out *proper* rules.**\n\nAlso drive by cleanup of adding a `ProjectAndUnifyResult` enum instead of using a `Result<Result<Option>>`.\n\nr? `@nikomatsakis`", "tree": {"sha": "ae5f6e3db678d207b15afd9eabfa967f3bdb5df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae5f6e3db678d207b15afd9eabfa967f3bdb5df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRNkWCRBK7hj4Ov3rIwAATNMIAKzJadqRrGlA6mfi3+l7JsXo\nLyayX8i678SZC3I23tV2pyfp76d/z2B2fWVEO8o2ZUEansarEa7psvs8L6Ld7gnU\nihIC/8RX9rQjf748e5LMwtJh31xEMcxl/nbKswHjK+5blKpbeNCrJ0exEOo9u3Oj\n66xl9ejVt+4eoMDdYKSqZgLjFxqViSA4O4OYJFF9sGZCQmJlByPHHH4YPHZFdzIE\n9xE/84re8If2QMdZpxmRj4JTfZRUW14PGmye6eESO4pdb1xB1ixHfsSzQ2cNtmoX\nqHcyFwAXHy9J6Fealgfmzu/3OtAAErSobKySP9NmqlMoxZ5ON9c60VlX1xWxs9o=\n=HXFS\n-----END PGP SIGNATURE-----\n", "payload": "tree ae5f6e3db678d207b15afd9eabfa967f3bdb5df9\nparent 943ea7fae53ac71cd8ddf5c215a750c9ab616eee\nparent 4e570a68a158b6592fc00f3c6e21efda84992079\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648679189 +0200\ncommitter GitHub <noreply@github.com> 1648679189 +0200\n\nRollup merge of #94869 - jackh726:gats_extended, r=compiler-errors\n\nAdd the generic_associated_types_extended feature\n\nRight now, this only ignore obligations that reference new placeholders in `poly_project_and_unify_type`. In the future, this might do other things, like allowing object-safe GATs.\n\n**This feature is *incomplete* and quite likely unsound. This is mostly just for testing out potential future APIs using a \"relaxed\" set of rules until we figure out *proper* rules.**\n\nAlso drive by cleanup of adding a `ProjectAndUnifyResult` enum instead of using a `Result<Result<Option>>`.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "html_url": "https://github.com/rust-lang/rust/commit/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943ea7fae53ac71cd8ddf5c215a750c9ab616eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/943ea7fae53ac71cd8ddf5c215a750c9ab616eee", "html_url": "https://github.com/rust-lang/rust/commit/943ea7fae53ac71cd8ddf5c215a750c9ab616eee"}, {"sha": "4e570a68a158b6592fc00f3c6e21efda84992079", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e570a68a158b6592fc00f3c6e21efda84992079", "html_url": "https://github.com/rust-lang/rust/commit/4e570a68a158b6592fc00f3c6e21efda84992079"}], "stats": {"total": 294, "additions": 261, "deletions": 33}, "files": [{"sha": "28466315c8687e37c6bb93644600423fcf9f0503", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -400,6 +400,8 @@ declare_features! (\n     (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n+    /// An extension to the `generic_associated_types` feature, allowing incomplete features.\n+    (incomplete, generic_associated_types_extended, \"1.61.0\", Some(95451), None),\n     /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n     (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n     /// Allows using `..X`, `..=X`, `...X`, and `X..` as a pattern."}, {"sha": "075928c889d8320d2cef60e8f999517ca4940c64", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -1379,3 +1379,50 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         ControlFlow::CONTINUE\n     }\n }\n+\n+/// Finds the max universe present\n+pub struct MaxUniverse {\n+    max_universe: ty::UniverseIndex,\n+}\n+\n+impl MaxUniverse {\n+    pub fn new() -> Self {\n+        MaxUniverse { max_universe: ty::UniverseIndex::ROOT }\n+    }\n+\n+    pub fn max_universe(self) -> ty::UniverseIndex {\n+        self.max_universe\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::Placeholder(placeholder) = t.kind() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: ty::consts::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::ConstKind::Placeholder(placeholder) = c.val() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::RePlaceholder(placeholder) = *r {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        ControlFlow::CONTINUE\n+    }\n+}"}, {"sha": "ee29a1e96eb28e920a6f37bcf84fa71f1d6bef98", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -722,6 +722,7 @@ symbols! {\n         generators,\n         generic_arg_infer,\n         generic_associated_types,\n+        generic_associated_types_extended,\n         generic_const_exprs,\n         generic_param_attrs,\n         get_context,"}, {"sha": "d95512bb88f36973e64f458fd41d0f2555aacdc8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -5,6 +5,7 @@ use super::*;\n \n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n+use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{Region, RegionVid, Term};\n \n@@ -751,19 +752,19 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     debug!(\"Projecting and unifying projection predicate {:?}\", predicate);\n \n                     match project::poly_project_and_unify_type(select, &obligation.with(p)) {\n-                        Err(e) => {\n+                        ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                             debug!(\n                                 \"evaluate_nested_obligations: Unable to unify predicate \\\n                                  '{:?}' '{:?}', bailing out\",\n                                 ty, e\n                             );\n                             return false;\n                         }\n-                        Ok(Err(project::InProgress)) => {\n+                        ProjectAndUnifyResult::Recursive => {\n                             debug!(\"evaluate_nested_obligations: recursive projection predicate\");\n                             return false;\n                         }\n-                        Ok(Ok(Some(v))) => {\n+                        ProjectAndUnifyResult::Holds(v) => {\n                             // We only care about sub-obligations\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n@@ -782,7 +783,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 }\n                             }\n                         }\n-                        Ok(Ok(None)) => {\n+                        ProjectAndUnifyResult::FailedNormalization => {\n                             // It's ok not to make progress when have no inference variables -\n                             // in that case, we were only performing unification to check if an\n                             // error occurred (which would indicate that it's impossible for our"}, {"sha": "d0b8b0281c5bf65fd5fdc807179869c3c53c39b8", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;\n-use super::project;\n+use super::project::{self, ProjectAndUnifyResult};\n use super::select::SelectionContext;\n use super::wf;\n use super::CodeAmbiguity;\n@@ -753,8 +753,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         }\n \n         match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n-            Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),\n-            Ok(Ok(None)) => {\n+            ProjectAndUnifyResult::Holds(os) => ProcessResult::Changed(mk_pending(os)),\n+            ProjectAndUnifyResult::FailedNormalization => {\n                 stalled_on.clear();\n                 stalled_on.extend(substs_infer_vars(\n                     self.selcx,\n@@ -763,10 +763,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ProcessResult::Unchanged\n             }\n             // Let the caller handle the recursion\n-            Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![\n+            ProjectAndUnifyResult::Recursive => ProcessResult::Changed(mk_pending(vec![\n                 project_obligation.with(project_obligation.predicate.to_predicate(tcx)),\n             ])),\n-            Err(e) => ProcessResult::Error(CodeProjectionError(e)),\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n+                ProcessResult::Error(CodeProjectionError(e))\n+            }\n         }\n     }\n }"}, {"sha": "2251f992e4dc6c38581f5eec74bcf2d5e20cf7c4", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -144,6 +144,18 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n     }\n }\n \n+/// Takes the place of a\n+/// Result<\n+///     Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n+///     MismatchedProjectionTypes<'tcx>,\n+/// >\n+pub(super) enum ProjectAndUnifyResult<'tcx> {\n+    Holds(Vec<PredicateObligation<'tcx>>),\n+    FailedNormalization,\n+    Recursive,\n+    MismatchedProjectionTypes(MismatchedProjectionTypes<'tcx>),\n+}\n+\n /// Evaluates constraints of the form:\n ///\n ///     for<...> <T as Trait>::U == V\n@@ -167,19 +179,47 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &PolyProjectionObligation<'tcx>,\n-) -> Result<\n-    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n-    MismatchedProjectionTypes<'tcx>,\n-> {\n+) -> ProjectAndUnifyResult<'tcx> {\n     let infcx = selcx.infcx();\n-    infcx.commit_if_ok(|_snapshot| {\n+    let r = infcx.commit_if_ok(|_snapshot| {\n+        let old_universe = infcx.universe();\n         let placeholder_predicate =\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+        let new_universe = infcx.universe();\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);\n-        let result = project_and_unify_type(selcx, &placeholder_obligation)?;\n-        Ok(result)\n-    })\n+        match project_and_unify_type(selcx, &placeholder_obligation) {\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(e) => Err(e),\n+            ProjectAndUnifyResult::Holds(obligations)\n+                if old_universe != new_universe\n+                    && selcx.tcx().features().generic_associated_types_extended =>\n+            {\n+                // If the `generic_associated_types_extended` feature is active, then we ignore any\n+                // obligations references lifetimes from any universe greater than or equal to the\n+                // universe just created. Otherwise, we can end up with something like `for<'a> I: 'a`,\n+                // which isn't quite what we want. Ideally, we want either an implied\n+                // `for<'a where I: 'a> I: 'a` or we want to \"lazily\" check these hold when we\n+                // substitute concrete regions. There is design work to be done here; until then,\n+                // however, this allows experimenting potential GAT features without running into\n+                // well-formedness issues.\n+                let new_obligations = obligations\n+                    .into_iter()\n+                    .filter(|obligation| {\n+                        let mut visitor = MaxUniverse::new();\n+                        obligation.predicate.visit_with(&mut visitor);\n+                        visitor.max_universe() < new_universe\n+                    })\n+                    .collect();\n+                Ok(ProjectAndUnifyResult::Holds(new_obligations))\n+            }\n+            other => Ok(other),\n+        }\n+    });\n+\n+    match r {\n+        Ok(inner) => inner,\n+        Err(err) => ProjectAndUnifyResult::MismatchedProjectionTypes(err),\n+    }\n }\n \n /// Evaluates constraints of the form:\n@@ -189,15 +229,11 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n /// If successful, this may result in additional obligations.\n ///\n /// See [poly_project_and_unify_type] for an explanation of the return value.\n+#[tracing::instrument(level = \"debug\", skip(selcx))]\n fn project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionObligation<'tcx>,\n-) -> Result<\n-    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n-    MismatchedProjectionTypes<'tcx>,\n-> {\n-    debug!(?obligation, \"project_and_unify_type\");\n-\n+) -> ProjectAndUnifyResult<'tcx> {\n     let mut obligations = vec![];\n \n     let infcx = selcx.infcx();\n@@ -210,8 +246,8 @@ fn project_and_unify_type<'cx, 'tcx>(\n         &mut obligations,\n     ) {\n         Ok(Some(n)) => n,\n-        Ok(None) => return Ok(Ok(None)),\n-        Err(InProgress) => return Ok(Err(InProgress)),\n+        Ok(None) => return ProjectAndUnifyResult::FailedNormalization,\n+        Err(InProgress) => return ProjectAndUnifyResult::Recursive,\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n     let actual = obligation.predicate.term;\n@@ -231,11 +267,11 @@ fn project_and_unify_type<'cx, 'tcx>(\n     match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n-            Ok(Ok(Some(obligations)))\n+            ProjectAndUnifyResult::Holds(obligations)\n         }\n         Err(err) => {\n-            debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n-            Err(MismatchedProjectionTypes { err })\n+            debug!(\"equating types encountered error {:?}\", err);\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(MismatchedProjectionTypes { err })\n         }\n     }\n }"}, {"sha": "4f033d45c1f32b64492eda7298f96574d2199bb4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -21,6 +21,7 @@ use super::{\n \n use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n use crate::traits::error_reporting::InferCtxtExt;\n+use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -525,7 +526,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let data = bound_predicate.rebind(data);\n                     let project_obligation = obligation.with(data);\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n-                        Ok(Ok(Some(mut subobligations))) => {\n+                        ProjectAndUnifyResult::Holds(mut subobligations) => {\n                             'compute_res: {\n                                 // If we've previously marked this projection as 'complete', then\n                                 // use the final cached result (either `EvaluatedToOk` or\n@@ -573,9 +574,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 res\n                             }\n                         }\n-                        Ok(Ok(None)) => Ok(EvaluatedToAmbig),\n-                        Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),\n-                        Err(_) => Ok(EvaluatedToErr),\n+                        ProjectAndUnifyResult::FailedNormalization => Ok(EvaluatedToAmbig),\n+                        ProjectAndUnifyResult::Recursive => Ok(EvaluatedToRecur),\n+                        ProjectAndUnifyResult::MismatchedProjectionTypes(_) => Ok(EvaluatedToErr),\n                     }\n                 }\n "}, {"sha": "258b8cd35c777056a75af3eb6bbb73d4b69df7ae", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,6 @@\n+#![feature(generic_associated_types)]\n+\n+// This feature doesn't *currently* fire on any specific code; it's just a\n+// behavior change. Future changes might.\n+#[rustc_error] //~ the\n+fn main() {}"}, {"sha": "6a5eba38cacc6e8d2442f1c7593b286c2d8e0b42", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+  --> $DIR/feature-gate-generic_associated_types_extended.rs:5:1\n+   |\n+LL | #[rustc_error]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3da7794b3d2c0352f504612541e6dd3f52270351", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,12 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "c5588b0912ba80bc988249f6bb8249fc2a88e2b9", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,26 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error[E0311]: the parameter type `Self` may not live long enough\n+  --> $DIR/lending_iterator.rs:35:9\n+   |\n+LL |         <B as FromLendingIterator<A>>::from_iter(self)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/lending_iterator.rs:10:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |                                             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "df11ab21249860222c780471d4654dd57420c210", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,40 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n+#![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n+\n+pub trait FromLendingIterator<A>: Sized {\n+    fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+}\n+\n+impl<A> FromLendingIterator<A> for Vec<A> {\n+    fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+        //[base]~^ impl has stricter\n+        let mut v = vec![];\n+        while let Some(item) = iter.next() {\n+            v.push(item);\n+        }\n+        v\n+    }\n+}\n+\n+pub trait LendingIterator {\n+    type Item<'z>\n+    where\n+        Self: 'z;\n+    fn next(&mut self) -> Option<Self::Item<'_>>;\n+\n+    fn collect<A, B: FromLendingIterator<A>>(self) -> B\n+    where\n+        Self: Sized,\n+        Self: for<'q> LendingIterator<Item<'q> = A>,\n+    {\n+        <B as FromLendingIterator<A>>::from_iter(self)\n+        //[base]~^ the parameter type\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6c2a624ca11d5daec669c15c95ec9eed3dcbb550", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.base.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,12 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator_2.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "3c4a2184db90c7624a63f08f54ecae47608a54b0", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs?ref=e08ab08a2e8c470d62aa7d41b1c1dc42696f9da8", "patch": "@@ -0,0 +1,31 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n+#![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n+\n+pub trait FromLendingIterator<A>: Sized {\n+    fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+}\n+\n+impl<A> FromLendingIterator<A> for Vec<A> {\n+    fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+        //[base]~^ impl has stricter\n+        let mut v = vec![];\n+        while let Some(item) = iter.next() {\n+            v.push(item);\n+        }\n+        v\n+    }\n+}\n+\n+pub trait LendingIterator {\n+    type Item<'a>\n+    where\n+        Self: 'a;\n+    fn next(&mut self) -> Option<Self::Item<'_>>;\n+}\n+\n+fn main() {}"}]}