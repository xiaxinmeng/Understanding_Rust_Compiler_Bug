{"sha": "c489af8e1a4e1caf35dd7be616ef4a848a477317", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODlhZjhlMWE0ZTFjYWYzNWRkN2JlNjE2ZWY0YTg0OGE0NzczMTc=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-29T00:31:41Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-29T00:31:41Z"}, "message": "Test the deque some more.", "tree": {"sha": "f1e942e8ac08cc5f73a7888efad6ee9dbe8a0865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e942e8ac08cc5f73a7888efad6ee9dbe8a0865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c489af8e1a4e1caf35dd7be616ef4a848a477317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c489af8e1a4e1caf35dd7be616ef4a848a477317", "html_url": "https://github.com/rust-lang/rust/commit/c489af8e1a4e1caf35dd7be616ef4a848a477317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c489af8e1a4e1caf35dd7be616ef4a848a477317/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237b9d4a64a2583a4b86f1f0e2ac0f5ba945323f", "url": "https://api.github.com/repos/rust-lang/rust/commits/237b9d4a64a2583a4b86f1f0e2ac0f5ba945323f", "html_url": "https://github.com/rust-lang/rust/commit/237b9d4a64a2583a4b86f1f0e2ac0f5ba945323f"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "188b5ec5f9a1e1333088aaa3fb45dade9c1e8ebd", "filename": "src/test/run-pass/lib-deque.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/c489af8e1a4e1caf35dd7be616ef4a848a477317/src%2Ftest%2Frun-pass%2Flib-deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c489af8e1a4e1caf35dd7be616ef4a848a477317/src%2Ftest%2Frun-pass%2Flib-deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-deque.rs?ref=c489af8e1a4e1caf35dd7be616ef4a848a477317", "patch": "@@ -39,6 +39,158 @@ fn test_simple() {\n    * segfault. */\n }\n \n+fn test_boxes(@int a, @int b, @int c, @int d) {\n+  let deque.t[@int] deq = deque.create[@int]();\n+  check (deq.size() == 0u);\n+  deq.add_front(a);\n+  deq.add_front(b);\n+  deq.add_back(c);\n+  check (deq.size() == 3u);\n+  deq.add_back(d);\n+  check (deq.size() == 4u);\n+\n+  check (deq.peek_front() == b);\n+  check (deq.peek_back() == d);\n+\n+  check (deq.pop_front() == b);\n+  check (deq.pop_back() == d);\n+  check (deq.pop_back() == c);\n+  check (deq.pop_back() == a);\n+\n+  /* FIXME (issue #138):  Test d.get() once it no longer causes\n+   * segfault. */\n+}\n+\n+type eqfn[T] = fn(&T a, &T b) -> bool;\n+\n+fn test_parameterized[T](eqfn[T] e, &T a, &T b, &T c, &T d) {\n+  let deque.t[T] deq = deque.create[T]();\n+  check (deq.size() == 0u);\n+  deq.add_front(a);\n+  deq.add_front(b);\n+  deq.add_back(c);\n+  check (deq.size() == 3u);\n+  deq.add_back(d);\n+  check (deq.size() == 4u);\n+\n+  check (e(deq.peek_front(), b));\n+  check (e(deq.peek_back(), d));\n+\n+  check (e(deq.pop_front(), b));\n+  check (e(deq.pop_back(), d));\n+  check (e(deq.pop_back(), c));\n+  check (e(deq.pop_back(), a));\n+\n+  /* FIXME (issue #138):  Test d.get() once it no longer causes\n+   * segfault. */\n+}\n+\n+type taggy = tag(one(int), two(int, int), three(int, int, int));\n+\n+type taggypar[T] = tag(onepar(int),\n+                       twopar(int, int),\n+                       threepar(int, int, int));\n+\n fn main() {\n+  fn inteq(&int a, &int b) -> bool {\n+    ret a == b;\n+  }\n+\n+  fn intboxeq(&@int a, &@int b) -> bool {\n+    ret a == b;\n+  }\n+\n+  fn taggyeq(&taggy a, &taggy b) -> bool {\n+    alt (a) {\n+      case (one(a1)) {\n+        alt (b) {\n+          case (one(b1)) { ret a1 == b1; }\n+          case (_) { ret false; }\n+        }\n+      }\n+      case (two(a1, a2)) {\n+        alt (b) {\n+          case (two(b1, b2)) { ret (a1 == b1 && a2 == b2); }\n+          case (_) { ret false; }\n+        }\n+      }\n+      case (three(a1, a2, a3)) {\n+        alt (b) {\n+          case (three(b1, b2, b3)) { ret (a1 == b1 && a2 == b2 && a3 == b3); }\n+          case (_) { ret false; }\n+        }\n+      }\n+    }\n+  }\n+\n+  fn taggypareq[T](&taggypar[T] a, &taggypar[T] b) -> bool {\n+    alt (a) {\n+      case (onepar[T](a1)) {\n+        alt (b) {\n+          case (onepar[T](b1)) { ret a1 == b1; }\n+          case (_) { ret false; }\n+        }\n+      }\n+      case (twopar[T](a1, a2)) {\n+        alt (b) {\n+          case (twopar[T](b1, b2)) { ret (a1 == b1 && a2 == b2); }\n+          case (_) { ret false; }\n+        }\n+      }\n+      case (threepar[T](a1, a2, a3)) {\n+        alt (b) {\n+          case (threepar[T](b1, b2, b3)) {\n+            ret (a1 == b1 && a2 == b2 && a3 == b3);\n+          }\n+          case (_) { ret false; }\n+        }\n+      }\n+    }\n+  }\n+\n+\n+  log \"test simple\";\n   test_simple();\n+\n+  /*\n+   * FIXME: Causes \"Invalid read of size 4\" under valgrind.\n+\n+  log \"test boxes\";\n+  test_boxes(@5, @72, @64, @175);\n+\n+   */\n+\n+  log \"test parameterized: int\";\n+  let eqfn[int] eq1 = bind inteq(_, _);\n+  test_parameterized[int](eq1, 5, 72, 64, 175);\n+\n+  /*\n+   * FIXME: Appears to segfault after an upcall_grow_task\n+\n+  log \"test parameterized: @int\";\n+  let eqfn[@int] eq2 = bind intboxeq(_, _);\n+  test_parameterized[@int](eq2, @5, @72, @64, @175);\n+\n+   */\n+  \n+\n+  log \"test parameterized: taggy\";\n+  let eqfn[taggy] eq3 = bind taggyeq(_, _);\n+  test_parameterized[taggy](eq3,\n+                            one(1), two(1, 2), three(1, 2, 3), two(17, 42));\n+\n+  /*\n+   * FIXME: Segfault.\n+\n+  log \"test parameterized: taggypar[int]\";\n+  let eqfn[taggypar[int]] eq4 = bind taggypareq[int](_, _);\n+  test_parameterized[taggypar[int]](eq4,\n+                                    onepar[int](1),\n+                                    twopar[int](1, 2),\n+                                    threepar[int](1, 2, 3),\n+                                    twopar[int](17, 42));\n+\n+   */\n+\n+  log \"done\";\n }"}]}