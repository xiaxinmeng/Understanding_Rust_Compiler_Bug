{"sha": "7abcc7d8624bb82ecf1292362726ea2c011fe554", "node_id": "C_kwDOAAsO6NoAKDdhYmNjN2Q4NjI0YmI4MmVjZjEyOTIzNjI3MjZlYTJjMDExZmU1NTQ", "commit": {"author": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-27T06:11:35Z"}, "committer": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-27T17:08:20Z"}, "message": "Add const to doctest runnable definition\n\nRefactor method to get type parameters to add const parameters\r\nRemove unused methods", "tree": {"sha": "14091161902a0f6b90fd91513ae0ec0520ba1b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14091161902a0f6b90fd91513ae0ec0520ba1b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abcc7d8624bb82ecf1292362726ea2c011fe554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abcc7d8624bb82ecf1292362726ea2c011fe554", "html_url": "https://github.com/rust-lang/rust/commit/7abcc7d8624bb82ecf1292362726ea2c011fe554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abcc7d8624bb82ecf1292362726ea2c011fe554/comments", "author": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee2e469a211e55741239f1830d41a72ec18f409", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee2e469a211e55741239f1830d41a72ec18f409", "html_url": "https://github.com/rust-lang/rust/commit/4ee2e469a211e55741239f1830d41a72ec18f409"}], "stats": {"total": 147, "additions": 115, "deletions": 32}, "files": [{"sha": "82718b2f82cf30c66db173dfa42de80c3581bb23", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 61, "deletions": 32, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7abcc7d8624bb82ecf1292362726ea2c011fe554/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abcc7d8624bb82ecf1292362726ea2c011fe554/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7abcc7d8624bb82ecf1292362726ea2c011fe554", "patch": "@@ -42,7 +42,7 @@ use hir_def::{\n     adt::VariantData,\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, ExprOrPatId, LabelId, Pat, PatId},\n-    generics::{ConstParamData, LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n+    generics::{LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n@@ -1189,31 +1189,6 @@ impl Adt {\n             .map(|arena| arena.1.clone())\n     }\n \n-    /// Returns an iterator of all `const` generic paramaters\n-    ///\n-    /// This method is not well optimized, I could not statisfy the borrow\n-    /// checker. I'm sure there are smarter ways to return the consts names\n-    pub fn consts(&self, db: &dyn HirDatabase) -> impl Iterator<Item = ConstParamData> {\n-        let resolver = match self {\n-            Adt::Struct(s) => s.id.resolver(db.upcast()),\n-            Adt::Union(u) => u.id.resolver(db.upcast()),\n-            Adt::Enum(e) => e.id.resolver(db.upcast()),\n-        };\n-        resolver\n-            .generic_params()\n-            .map_or(vec![], |gp| {\n-                gp.as_ref()\n-                    .type_or_consts\n-                    .iter()\n-                    .filter_map(|arena| match arena.1 {\n-                        TypeOrConstParamData::ConstParamData(consts) => Some(consts.clone()),\n-                        _ => None,\n-                    })\n-                    .collect::<Vec<ConstParamData>>()\n-            })\n-            .into_iter()\n-    }\n-\n     pub fn as_enum(&self) -> Option<Enum> {\n         if let Self::Enum(v) = self {\n             Some(*v)\n@@ -3373,6 +3348,24 @@ impl Type {\n         }\n     }\n \n+    /// Iterates its type arguments\n+    ///\n+    /// It iterates the actual type arguments when concrete types are used\n+    /// and otherwise the generic names.\n+    /// It does not include `const` arguments.\n+    ///\n+    /// For code, such as:\n+    /// ```text\n+    /// struct Foo<T, U>\n+    ///\n+    /// impl<U> Foo<String, U>\n+    /// ```\n+    ///\n+    /// It iterates:\n+    /// ```text\n+    /// - \"String\"\n+    /// - \"U\"\n+    /// ```\n     pub fn type_arguments(&self) -> impl Iterator<Item = Type> + '_ {\n         self.ty\n             .strip_references()\n@@ -3383,6 +3376,46 @@ impl Type {\n             .map(move |ty| self.derived(ty))\n     }\n \n+    /// Iterates its type and const arguments\n+    ///\n+    /// It iterates the actual type and const arguments when concrete types\n+    /// are used and otherwise the generic names.\n+    ///\n+    /// For code, such as:\n+    /// ```text\n+    /// struct Foo<T, const U: usize, const X: usize>\n+    ///\n+    /// impl<U> Foo<String, U, 12>\n+    /// ```\n+    ///\n+    /// It iterates:\n+    /// ```text\n+    /// - \"String\"\n+    /// - \"U\"\n+    /// - \"12\"\n+    /// ```\n+    pub fn type_and_const_arguments<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+    ) -> impl Iterator<Item = SmolStr> + 'a {\n+        self.ty\n+            .strip_references()\n+            .as_adt()\n+            .into_iter()\n+            .flat_map(|(_, substs)| substs.iter(Interner))\n+            .filter_map(|arg| {\n+                // arg can be either a `Ty` or `constant`\n+                if let Some(ty) = arg.ty(Interner) {\n+                    Some(SmolStr::new(ty.display(db).to_string()))\n+                    // Some(ty)\n+                } else if let Some(const_) = arg.constant(Interner) {\n+                    Some(SmolStr::new_inline(&const_.display(db).to_string()))\n+                } else {\n+                    None\n+                }\n+            })\n+    }\n+\n     /// Combines lifetime indicators, type and constant parameters into a single `Iterator`\n     pub fn lifetime_type_const_paramaters<'a>(\n         &'a self,\n@@ -3392,12 +3425,8 @@ impl Type {\n         self.as_adt()\n             .and_then(|a| a.lifetime(db).and_then(|lt| Some((&lt.name).to_smol_str())))\n             .into_iter()\n-            // add the type paramaters\n-            .chain(self.type_arguments().map(|ty| SmolStr::new(ty.display(db).to_string())))\n-            // add const paramameters\n-            .chain(self.as_adt().map_or(vec![], |a| {\n-                a.consts(db).map(|cs| cs.name.to_smol_str()).collect::<Vec<SmolStr>>()\n-            }))\n+            // add the type and const paramaters\n+            .chain(self.type_and_const_arguments(db))\n     }\n \n     pub fn iterate_method_candidates_with_traits<T>("}, {"sha": "b4fa2f9b9f0af26f73e03c95ada5d2725311b72a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7abcc7d8624bb82ecf1292362726ea2c011fe554/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abcc7d8624bb82ecf1292362726ea2c011fe554/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=7abcc7d8624bb82ecf1292362726ea2c011fe554", "patch": "@@ -2272,6 +2272,60 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test_in_impl_with_lifetime_type_const_value() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+fn main() {}\n+\n+struct Data<'a, A, const B: usize, C, const D: u32>;\n+impl<A, C, const D: u32> Data<'a, A, 12, C, D> {\n+    /// ```\n+    /// ```\n+    fn foo() {}\n+}\n+\"#,\n+            &[Bin, DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..13,\n+                            focus_range: 4..8,\n+                            name: \"main\",\n+                            kind: Function,\n+                        },\n+                        kind: Bin,\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 121..156,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Data<'a,A,12,C,D>::foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+\n     #[test]\n     fn doc_test_type_params() {\n         check("}]}