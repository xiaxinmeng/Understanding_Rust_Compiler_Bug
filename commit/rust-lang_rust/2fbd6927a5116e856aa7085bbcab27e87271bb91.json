{"sha": "2fbd6927a5116e856aa7085bbcab27e87271bb91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmQ2OTI3YTUxMTZlODU2YWE3MDg1YmJjYWIyN2U4NzI3MWJiOTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-16T22:54:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-19T19:10:23Z"}, "message": "When possible, suggest fn call", "tree": {"sha": "8c651719a7b7ac196e4b2731424b41311d84297a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c651719a7b7ac196e4b2731424b41311d84297a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbd6927a5116e856aa7085bbcab27e87271bb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbd6927a5116e856aa7085bbcab27e87271bb91", "html_url": "https://github.com/rust-lang/rust/commit/2fbd6927a5116e856aa7085bbcab27e87271bb91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbd6927a5116e856aa7085bbcab27e87271bb91/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "html_url": "https://github.com/rust-lang/rust/commit/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "a7e1f2a6a73a75047a758834aedb040c22c56f0b", "filename": "src/librustc/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -81,6 +81,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 .map(|obligation| FulfillmentError {\n                     obligation: obligation.goal.clone(),\n                     code: FulfillmentErrorCode::CodeAmbiguity,\n+                    points_at_arg_span: false,\n                 })\n                 .collect();\n             Err(errors)\n@@ -129,6 +130,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented\n                                     ),\n+                                    points_at_arg_span: false,\n                                 }),\n                             }\n                         } else {\n@@ -142,6 +144,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented\n                         ),\n+                        points_at_arg_span: false,\n                     })\n                 }\n             }"}, {"sha": "e52451b2fdc4d4dc3a910956e34041ba683973ee", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -119,11 +119,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     // returns if `cond` not occurring implies that `error` does not occur - i.e., that\n     // `error` occurring implies that `cond` occurs.\n-    fn error_implies(&self,\n-                     cond: &ty::Predicate<'tcx>,\n-                     error: &ty::Predicate<'tcx>)\n-                     -> bool\n-    {\n+    fn error_implies(\n+        &self,\n+        cond: &ty::Predicate<'tcx>,\n+        error: &ty::Predicate<'tcx>,\n+    ) -> bool {\n         if cond == error {\n             return true\n         }\n@@ -155,13 +155,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>,\n-                                body_id: Option<hir::BodyId>,\n-                                fallback_has_occurred: bool) {\n+    fn report_fulfillment_error(\n+        &self,\n+        error: &FulfillmentError<'tcx>,\n+        body_id: Option<hir::BodyId>,\n+        fallback_has_occurred: bool,\n+    ) {\n         debug!(\"report_fulfillment_errors({:?})\", error);\n         match error.code {\n-            FulfillmentErrorCode::CodeSelectionError(ref e) => {\n-                self.report_selection_error(&error.obligation, e, fallback_has_occurred);\n+            FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n+                self.report_selection_error(\n+                    &error.obligation,\n+                    selection_error,\n+                    fallback_has_occurred,\n+                    error.points_at_arg_span,\n+                );\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n                 self.report_projection_error(&error.obligation, e);\n@@ -170,19 +178,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.maybe_report_ambiguity(&error.obligation, body_id);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n-                self.report_mismatched_types(&error.obligation.cause,\n-                                             expected_found.expected,\n-                                             expected_found.found,\n-                                             err.clone())\n-                    .emit();\n+                self.report_mismatched_types(\n+                    &error.obligation.cause,\n+                    expected_found.expected,\n+                    expected_found.found,\n+                    err.clone(),\n+                ).emit();\n             }\n         }\n     }\n \n-    fn report_projection_error(&self,\n-                               obligation: &PredicateObligation<'tcx>,\n-                               error: &MismatchedProjectionTypes<'tcx>)\n-    {\n+    fn report_projection_error(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        error: &MismatchedProjectionTypes<'tcx>,\n+    ) {\n         let predicate =\n             self.resolve_vars_if_possible(&obligation.predicate);\n \n@@ -603,6 +613,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n+        points_at_arg: bool,\n     ) {\n         let span = obligation.cause.span;\n \n@@ -690,7 +701,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n-                        self.suggest_fn_call(&obligation, &mut err, &trait_ref);\n+                        self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n@@ -963,6 +974,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        points_at_arg: bool,\n     ) {\n         let self_ty = trait_ref.self_ty();\n         match self_ty.sty {\n@@ -991,15 +1003,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             ..\n                         })) = self.tcx.hir().get_if_local(def_id) {\n                             let body = self.tcx.hir().body(*body_id);\n-                            err.help(&format!(\n-                                \"use parentheses to call the function: `{}({})`\",\n+                            let msg = \"use parentheses to call the function\";\n+                            let snippet = format!(\n+                                \"{}({})\",\n                                 ident,\n                                 body.params.iter()\n                                     .map(|arg| match &arg.pat.node {\n                                         hir::PatKind::Binding(_, _, ident, None)\n                                         if ident.name != kw::SelfLower => ident.to_string(),\n                                         _ => \"_\".to_string(),\n-                                    }).collect::<Vec<_>>().join(\", \")));\n+                                    }).collect::<Vec<_>>().join(\", \"),\n+                            );\n+                            if points_at_arg {\n+                                err.span_suggestion(\n+                                    obligation.cause.span,\n+                                    msg,\n+                                    snippet,\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                            } else {\n+                                err.help(&format!(\"{}: `{}`\", msg, snippet));\n+                            }\n                         }\n                     }\n                     _ => {}"}, {"sha": "b7db7c25206626c561677ed53ced5d770587ba29", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -484,7 +484,8 @@ EnumTypeFoldableImpl! {\n \n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n-    pub code: FulfillmentErrorCode<'tcx>\n+    pub code: FulfillmentErrorCode<'tcx>,\n+    pub points_at_arg_span: bool,\n }\n \n #[derive(Clone)]\n@@ -1183,7 +1184,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n            code: FulfillmentErrorCode<'tcx>)\n            -> FulfillmentError<'tcx>\n     {\n-        FulfillmentError { obligation: obligation, code: code }\n+        FulfillmentError { obligation: obligation, code: code, points_at_arg_span: false }\n     }\n }\n "}, {"sha": "6a764b19c4ddf7dfdb07f10a8446ad0d971323e7", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -1999,6 +1999,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             ),\n                             &traits::SelectionError::Unimplemented,\n                             false,\n+                            false,\n                         );\n                     }\n                 }"}, {"sha": "ee4f0a868c10a4b60764badd8bc11886c49e83c1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -617,7 +617,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(&obligation, &err, false);\n+                    self.report_selection_error(&obligation, &err, false, false);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "df9955d6ba0153e8b1166ef40ed29190b3340c52", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -3396,6 +3396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     if referenced_in.len() == 1 {\n                         error.obligation.cause.span = args[referenced_in[0]].span;\n+                        error.points_at_arg_span = true;\n                     }\n                 }\n             }"}, {"sha": "6bb653389966960e4bd35a6df55b7cd671801331", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -5,9 +5,10 @@ LL | fn bar(f: impl Future<Output=()>) {}\n    | --------------------------------- required by `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n-   |\n-   = help: use parentheses to call the function: `foo()`\n+   |         ^^^\n+   |         |\n+   |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |         help: use parentheses to call the function: `foo()`\n \n error: aborting due to previous error\n "}, {"sha": "59726c82c2377b12fc676ab39fbebaaa1175d649", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbd6927a5116e856aa7085bbcab27e87271bb91/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=2fbd6927a5116e856aa7085bbcab27e87271bb91", "patch": "@@ -5,9 +5,10 @@ LL | fn bar(f: impl T<O=()>) {}\n    | ----------------------- required by `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n-   |\n-   = help: use parentheses to call the function: `foo()`\n+   |         ^^^\n+   |         |\n+   |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |         help: use parentheses to call the function: `foo()`\n \n error: aborting due to previous error\n "}]}