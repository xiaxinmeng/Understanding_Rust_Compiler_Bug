{"sha": "5bbdcb67340679d4f8da31af091d97e7f8ec487f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYmRjYjY3MzQwNjc5ZDRmOGRhMzFhZjA5MWQ5N2U3ZjhlYzQ4N2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-09T03:31:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-09T03:31:36Z"}, "message": "Rollup merge of #65166 - csmoe:async-move, r=estebank\n\nSuggest to add `move` keyword for generator capture\n\n Closes #64382\nr? @estebank", "tree": {"sha": "95a7d59219fafa20cdd4a775865c8206d4f671c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a7d59219fafa20cdd4a775865c8206d4f671c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bbdcb67340679d4f8da31af091d97e7f8ec487f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnVSYCRBK7hj4Ov3rIwAAdHIIAErfBQawgehkVjHUeE6oVZ4+\nAQHmv9cD5/oWR8NZx3Dch5Pvdk+UEHej0THS1+ixMj2V6Mae7STp64btFbvvzEfV\nBh+DnDfkubNYWKjLHDaUyIO7RfKiubdOlS+kVN01v26f7Sglfm+rT1dIIA3UgBIo\na6JqTcPXk5JpkR3B7f6a4GUEBLOmD2OXhcZeHUtiqRrcdeQhZcKRQhp+cmYAk/Ny\nStzL5Yr00nFvh94aID+aXyC6YD2fyIgxMm+2GP963Qk0XyGfsLD2wWpyUvjgBW7p\nzGMyPl2YUkLZknbCyvGb2r9Z3nkDgcBwMxIY3ddkar/eay1p4eO0Iz0iJ3Z5NEA=\n=k+nw\n-----END PGP SIGNATURE-----\n", "payload": "tree 95a7d59219fafa20cdd4a775865c8206d4f671c5\nparent ae5bb7e289b41a9266e6e560d6415caf905ecfeb\nparent d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570591896 +0200\ncommitter GitHub <noreply@github.com> 1570591896 +0200\n\nRollup merge of #65166 - csmoe:async-move, r=estebank\n\nSuggest to add `move` keyword for generator capture\n\n Closes #64382\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbdcb67340679d4f8da31af091d97e7f8ec487f", "html_url": "https://github.com/rust-lang/rust/commit/5bbdcb67340679d4f8da31af091d97e7f8ec487f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bbdcb67340679d4f8da31af091d97e7f8ec487f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5bb7e289b41a9266e6e560d6415caf905ecfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5bb7e289b41a9266e6e560d6415caf905ecfeb", "html_url": "https://github.com/rust-lang/rust/commit/ae5bb7e289b41a9266e6e560d6415caf905ecfeb"}, {"sha": "d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7", "html_url": "https://github.com/rust-lang/rust/commit/d1d256592bcd3f05d00fe7ad80d1a1ed22c9e7d7"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "2f9df7bd77e847bd99e0e5850f613ca2a35dc015", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=5bbdcb67340679d4f8da31af091d97e7f8ec487f", "patch": "@@ -750,6 +750,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n \n+        debug!(\n+            \"report_borrowed_value_does_not_live_long_enough(place_desc: {:?}, explanation: {:?})\",\n+            place_desc,\n+            explanation\n+        );\n         let err = match (place_desc, explanation) {\n             (Some(_), _) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n@@ -790,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 span,\n                 &format!(\"`{}`\", name),\n             ),\n+            (\n+                Some(ref name),\n+                BorrowExplanation::MustBeValidFor {\n+                    category: category @ ConstraintCategory::OpaqueType,\n+                    from_closure: false,\n+                    ref region_name,\n+                    span,\n+                    ..\n+                },\n+\n+            ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n+                borrow_spans.args_or_use(),\n+                borrow_span,\n+                region_name,\n+                category,\n+                span,\n+                &format!(\"`{}`\", name),\n+            ),\n             (\n                 ref name,\n                 BorrowExplanation::MustBeValidFor {\n@@ -1214,6 +1237,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ConstraintCategory::Return => {\n                 err.span_note(constraint_span, \"closure is returned here\");\n             }\n+            ConstraintCategory::OpaqueType => {\n+                err.span_note(constraint_span, \"generator is returned here\");\n+            }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n                 err.span_note("}, {"sha": "5354b45f92d0a236dfd90f1cfa5f0d69db94ed34", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=5bbdcb67340679d4f8da31af091d97e7f8ec487f", "patch": "@@ -17,6 +17,7 @@ use syntax_pos::Span;\n \n mod find_use;\n \n+#[derive(Debug)]\n pub(in crate::borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n@@ -35,7 +36,7 @@ pub(in crate::borrow_check) enum BorrowExplanation {\n     Unexplained,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub(in crate::borrow_check) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,"}, {"sha": "f004b4180ddc9c30fd424f4bfe8b21f66cb76434", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed?ref=5bbdcb67340679d4f8da31af091d97e7f8ec487f", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-rustfix\n+\n+fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new(async move { x } )\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "4f35fd52ca39beed26bfb01c5becd7ef41c7e593", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs?ref=5bbdcb67340679d4f8da31af091d97e7f8ec487f", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-rustfix\n+\n+fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new(async { x } )\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "af17ecc86fbf9b1d52d8b942e91a07189019daaa", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bbdcb67340679d4f8da31af091d97e7f8ec487f/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=5bbdcb67340679d4f8da31af091d97e7f8ec487f", "patch": "@@ -0,0 +1,22 @@\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/async-borrowck-escaping-block-error.rs:6:20\n+   |\n+LL |     Box::new(async { x } )\n+   |                    ^^-^^\n+   |                    | |\n+   |                    | `x` is borrowed here\n+   |                    may outlive borrowed value `x`\n+   |\n+note: generator is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:4:13\n+   |\n+LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(async move { x } )\n+   |                    ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0373`."}]}