{"sha": "cbf748993f59682f60dfe620eafea24124f737fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjc0ODk5M2Y1OTY4MmY2MGRmZTYyMGVhZmVhMjQxMjRmNzM3ZmI=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-29T22:05:23Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-11-29T23:52:16Z"}, "message": "Enable -mergefunc-use-aliases\n\nIf the Rust LLVM fork is used, enable the -mergefunc-use-aliases\nflag, which will create aliases for merged functions, rather than\ninserting a call from one to the other.\n\nA number of codegen tests needed to be adjusted, because functions\nthat previously fell below the thunk limit are now being merged.\nMerging is prevented either using -C no-prepopulate-passes, or by\nmaking the functions non-identical.\n\nI expect that this is going to break something, somewhere, because\nit isn't able to deal with aliases properly, but we won't find out\nuntil we try :)\n\nThis fixes #52651.", "tree": {"sha": "14feb4e1666894a16c5c35c59942a5111bdf941c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14feb4e1666894a16c5c35c59942a5111bdf941c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf748993f59682f60dfe620eafea24124f737fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf748993f59682f60dfe620eafea24124f737fb", "html_url": "https://github.com/rust-lang/rust/commit/cbf748993f59682f60dfe620eafea24124f737fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf748993f59682f60dfe620eafea24124f737fb/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "html_url": "https://github.com/rust-lang/rust/commit/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "9eefeca70cf7a92fd483ab9dfa3bc79690a3bfcf", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -1358,6 +1358,7 @@ extern \"C\" {\n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;\n     pub fn LLVMRustVersionMinor() -> u32;\n+    pub fn LLVMRustIsRustLLVM() -> bool;\n \n     pub fn LLVMRustAddModuleFlag(M: &Module, name: *const c_char, value: u32);\n "}, {"sha": "fdb6373bea1fed056e89eff3d0bad0412a97c3f4", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -70,6 +70,9 @@ unsafe fn configure_llvm(sess: &Session) {\n         if sess.opts.debugging_opts.disable_instrumentation_preinliner {\n             add(\"-disable-preinline\");\n         }\n+        if llvm::LLVMRustIsRustLLVM() {\n+            add(\"-mergefunc-use-aliases\");\n+        }\n \n         for arg in &sess.opts.cg.llvm_args {\n             add(&(*arg));"}, {"sha": "aa420bf6100c789a9ac31201b78ac896d1c44911", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -284,7 +284,7 @@ static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n   report_fatal_error(\"Bad RelocModel.\");\n }\n \n-#if LLVM_RUSTLLVM\n+#ifdef LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n ///\n static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {"}, {"sha": "6dcd32fe4d7193b5dec76d42e43f1aa401ae219b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -533,6 +533,14 @@ extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }\n \n+extern \"C\" bool LLVMRustIsRustLLVM() {\n+#ifdef LLVM_RUSTLLVM\n+  return 1;\n+#else\n+  return 0;\n+#endif\n+}\n+\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n                                       uint32_t Value) {\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);"}, {"sha": "95587d9d84cf01f1ad9af4df7a6751214b47de76", "filename": "src/test/codegen/export-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -C no-prepopulate-passes\n+\n #![crate_type = \"lib\"]\n \n mod private {"}, {"sha": "58232852596021081d8b7d1048eb8f3217f006e8", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -O\n+// compile-flags: -C no-prepopulate-passes\n // `#[no_mangle]`d functions always have external linkage, i.e. no `internal` in their `define`s\n \n #![crate_type = \"lib\"]\n@@ -43,7 +43,7 @@ const HIDDEN: () = {\n };\n \n // The surrounding item should not accidentally become external\n-// CHECK: define internal {{.*}} void @_ZN22external_no_mangle_fns1x\n+// CHECK: define internal{{.*}} void @_ZN22external_no_mangle_fns1x\n #[inline(never)]\n fn x() {\n     // CHECK: define void @g()"}, {"sha": "3544786e2e60a651990a5bd66e1659dd62b11506", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -69,6 +69,6 @@ fn foo3r(n: u64) -> u64 {\n // CHECK-LABEL: @check_foo3r\n #[no_mangle]\n pub fn check_foo3r() -> u64 {\n-    // CHECK: ret i64 500005000000000\n-    foo3r(100000)\n+    // CHECK: ret i64 500050000000\n+    foo3r(10000)\n }"}, {"sha": "2136b176eac9ba64ab00f296c102bf7b2e2a828b", "filename": "src/test/codegen/match-optimizes-away.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf748993f59682f60dfe620eafea24124f737fb/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs?ref=cbf748993f59682f60dfe620eafea24124f737fb", "patch": "@@ -14,6 +14,7 @@\n \n pub enum Three { A, B, C }\n \n+#[repr(u16)]\n pub enum Four { A, B, C, D }\n \n #[no_mangle]\n@@ -32,7 +33,7 @@ pub fn three_valued(x: Three) -> Three {\n pub fn four_valued(x: Four) -> Four {\n     // CHECK-LABEL: @four_valued\n     // CHECK-NEXT: {{^.*:$}}\n-    // CHECK-NEXT: ret i8 %0\n+    // CHECK-NEXT: ret i16 %0\n     match x {\n         Four::A => Four::A,\n         Four::B => Four::B,"}]}