{"sha": "8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTU2ZmE2ZDBlOGEwM2Q2YWQ3NTkxOWQ2YmU5NTNmNWZjMjcwODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T13:35:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T13:35:17Z"}, "message": "Stupid goto definition", "tree": {"sha": "d93a4f3e1d279a27cc851546796bb488edfe2c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93a4f3e1d279a27cc851546796bb488edfe2c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "html_url": "https://github.com/rust-lang/rust/commit/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "html_url": "https://github.com/rust-lang/rust/commit/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53"}], "stats": {"total": 123, "additions": 109, "deletions": 14}, "files": [{"sha": "97b6dfca6896e600a10d90e3d9b0b1a6fe9efeb9", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -18,10 +18,14 @@ use std::{\n     path::{PathBuf, Path},\n };\n \n-use libsyntax2::ast;\n+use libsyntax2::{\n+    TextUnit,\n+    ast::{self, AstNode},\n+    algo::{find_leaf_at_offset, ancestors},\n+};\n use libeditor::{LineIndex, FileSymbol};\n \n-use self::symbol_index::{FileSymbols};\n+use self::symbol_index::FileSymbols;\n pub use self::symbol_index::Query;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n@@ -90,8 +94,7 @@ impl World {\n         Ok(index.clone())\n     }\n \n-    pub fn world_symbols<'a>(&'a self, query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a\n-    {\n+    pub fn world_symbols<'a>(&'a self, query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a {\n         self.data.file_map.iter()\n             .flat_map(move |(path, data)| {\n                 let path: &'a Path = path.as_path();\n@@ -100,6 +103,31 @@ impl World {\n             })\n     }\n \n+    pub fn approximately_resolve_symbol<'a>(\n+        &'a self,\n+        path: &Path,\n+        offset: TextUnit,\n+    ) -> Result<Vec<(&'a Path, &'a FileSymbol)>> {\n+        let file = self.file_syntax(path)?;\n+        let syntax = file.syntax();\n+        let syntax = syntax.as_ref();\n+        let name_ref =\n+            find_leaf_at_offset(syntax, offset)\n+                .left_biased()\n+                .into_iter()\n+                .flat_map(|node| ancestors(node))\n+                .flat_map(ast::NameRef::cast)\n+                .next();\n+        let name = match name_ref {\n+            None => return Ok(vec![]),\n+            Some(name_ref) => name_ref.text(),\n+        };\n+\n+        let mut query = Query::new(name.to_string());\n+        query.exact();\n+        Ok(self.world_symbols(query).take(4).collect())\n+    }\n+\n     fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n         match self.data.file_map.get(path) {\n             Some(data) => Ok(data.clone()),"}, {"sha": "b1fd0a8adf4b31c884100ca57dfc6a2e5ff86773", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -123,6 +123,24 @@ impl<R: TreeRoot> AstNode<R> for Name<R> {\n \n impl<R: TreeRoot> Name<R> {}\n \n+// NameRef\n+#[derive(Debug, Clone, Copy)]\n+pub struct NameRef<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for NameRef<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            NAME_REF => Some(NameRef { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> NameRef<R> {}\n+\n // StaticItem\n #[derive(Debug, Clone, Copy)]\n pub struct StaticItem<R: TreeRoot = Arc<SyntaxRoot>> {"}, {"sha": "2e1fb2d1c1b12638960ee6923d52667daf2e83ff", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -73,3 +73,11 @@ impl<R: TreeRoot> Name<R> {\n         ident.leaf_text().unwrap()\n     }\n }\n+\n+impl<R: TreeRoot> NameRef<R> {\n+    pub fn text(&self) -> SmolStr {\n+        let ident = self.syntax().first_child()\n+            .unwrap();\n+        ident.leaf_text().unwrap()\n+    }\n+}"}, {"sha": "ee231931e1e0350ee0e6d5e8a126c9b98d1b519e", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -228,5 +228,6 @@ Grammar(\n         \"StaticItem\": ( traits: [\"NameOwner\"] ),\n         \"TypeItem\": ( traits: [\"NameOwner\"] ),\n         \"Name\": (),\n+        \"NameRef\": (),\n     },\n )"}, {"sha": "ffebd9b47dfb6d20a38994e926e40abeba30248c", "filename": "crates/server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fcaps.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -20,7 +20,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         hover_provider: None,\n         completion_provider: None,\n         signature_help_provider: None,\n-        definition_provider: None,\n+        definition_provider: Some(true),\n         type_definition_provider: None,\n         implementation_provider: None,\n         references_provider: None,"}, {"sha": "1c31d32fefc053e31337d4e82f2864694aa5610c", "filename": "crates/server/src/conv.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -1,7 +1,11 @@\n-use languageserver_types::{Range, SymbolKind, Position, TextEdit};\n+use std::path::Path;\n+\n+use languageserver_types::{Range, SymbolKind, Position, TextEdit, Location, Url};\n use libeditor::{LineIndex, LineCol, Edit, AtomEdit};\n use libsyntax2::{SyntaxKind, TextUnit, TextRange};\n \n+use Result;\n+\n pub trait Conv {\n     type Output;\n     fn conv(self) -> Self::Output;\n@@ -13,6 +17,12 @@ pub trait ConvWith {\n     fn conv_with(self, ctx: &Self::Ctx) -> Self::Output;\n }\n \n+pub trait TryConvWith {\n+    type Ctx;\n+    type Output;\n+    fn try_conv_with(self, ctx: &Self::Ctx) -> Result<Self::Output>;\n+}\n+\n impl Conv for SyntaxKind {\n     type Output = SymbolKind;\n \n@@ -104,6 +114,20 @@ impl ConvWith for AtomEdit {\n     }\n }\n \n+impl<'a> TryConvWith for (&'a Path, TextRange) {\n+    type Ctx = LineIndex;\n+    type Output = Location;\n+\n+    fn try_conv_with(self, line_index: &LineIndex) -> Result<Location> {\n+        let loc = Location::new(\n+            Url::from_file_path(self.0)\n+                .map_err(|()| format_err!(\"can't convert path to url: {}\", self.0.display()))?,\n+            self.1.conv_with(line_index),\n+        );\n+        Ok(loc)\n+    }\n+}\n+\n \n pub trait MapConvWith<'a>: Sized {\n     type Ctx;"}, {"sha": "e9dc7842052e6159a88123cbbe6639f432bd0b37", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -3,7 +3,7 @@ use std::collections::HashMap;\n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n-    SymbolInformation, Location,\n+    SymbolInformation,\n };\n use libanalysis::{World, Query};\n use libeditor;\n@@ -13,7 +13,7 @@ use serde_json::{to_value, from_value};\n use ::{\n     req::{self, Decoration}, Result,\n     util::FilePath,\n-    conv::{Conv, ConvWith, MapConvWith},\n+    conv::{Conv, ConvWith, TryConvWith, MapConvWith},\n };\n \n pub fn handle_syntax_tree(\n@@ -115,15 +115,10 @@ pub fn handle_workspace_symbol(\n \n     for (path, symbol) in world.world_symbols(query).take(128) {\n         let line_index = world.file_line_index(path)?;\n-\n         let info = SymbolInformation {\n             name: symbol.name.to_string(),\n             kind: symbol.kind.conv(),\n-            location: Location::new(\n-                Url::from_file_path(path)\n-                    .map_err(|()| format_err!(\"invalid url\"))?,\n-                symbol.node_range.conv_with(&line_index),\n-            ),\n+            location: (path, symbol.node_range).try_conv_with(&line_index)?,\n             container_name: None,\n         };\n         acc.push(info);\n@@ -132,6 +127,22 @@ pub fn handle_workspace_symbol(\n     Ok(Some(acc))\n }\n \n+pub fn handle_goto_definition(\n+    world: World,\n+    params: req::TextDocumentPositionParams,\n+) -> Result<Option<req::GotoDefinitionResponse>> {\n+    let path = params.text_document.file_path()?;\n+    let line_index = world.file_line_index(&path)?;\n+    let offset = params.position.conv_with(&line_index);\n+    let mut res = Vec::new();\n+    for (path, symbol) in world.approximately_resolve_symbol(&path, offset)? {\n+        let line_index = world.file_line_index(path)?;\n+        let location = (path, symbol.node_range).try_conv_with(&line_index)?;\n+        res.push(location)\n+    }\n+    Ok(Some(req::GotoDefinitionResponse::Array(res)))\n+}\n+\n pub fn handle_execute_command(\n     world: World,\n     mut params: req::ExecuteCommandParams,"}, {"sha": "bc898c17bd464a6c57a9bfbd3b11499b9fa72ab8", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -26,6 +26,7 @@ use {\n         handle_code_action,\n         handle_execute_command,\n         handle_workspace_symbol,\n+        handle_goto_definition,\n     },\n };\n \n@@ -152,6 +153,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::WorkspaceSymbol>(\n         &mut req, pool, world, sender, handle_workspace_symbol,\n     )?;\n+    handle_request_on_threadpool::<req::GotoDefinition>(\n+        &mut req, pool, world, sender, handle_goto_definition,\n+    )?;\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n "}, {"sha": "17ef10e439743a4a3c8a31c907d70ccac5192256", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae56fa6d0e8a03d6ad75919d6be953f5fc27083/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=8ae56fa6d0e8a03d6ad75919d6be953f5fc27083", "patch": "@@ -9,6 +9,7 @@ pub use languageserver_types::{\n     CodeActionParams, ApplyWorkspaceEditParams,\n     ExecuteCommandParams,\n     WorkspaceSymbolParams,\n+    TextDocumentPositionParams,\n };\n \n "}]}