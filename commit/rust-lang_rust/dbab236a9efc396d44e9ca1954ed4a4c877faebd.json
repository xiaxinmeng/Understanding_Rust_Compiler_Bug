{"sha": "dbab236a9efc396d44e9ca1954ed4a4c877faebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWIyMzZhOWVmYzM5NmQ0NGU5Y2ExOTU0ZWQ0YTRjODc3ZmFlYmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-21T16:58:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:29Z"}, "message": "typeck: Remove Coerce::unpack_actual_value.", "tree": {"sha": "c762994ee92470e5acc18c4e28473a145a282c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c762994ee92470e5acc18c4e28473a145a282c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbab236a9efc396d44e9ca1954ed4a4c877faebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbab236a9efc396d44e9ca1954ed4a4c877faebd", "html_url": "https://github.com/rust-lang/rust/commit/dbab236a9efc396d44e9ca1954ed4a4c877faebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbab236a9efc396d44e9ca1954ed4a4c877faebd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc37664c94d2c53d68e9cbb7175ccb8551d237e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc37664c94d2c53d68e9cbb7175ccb8551d237e3", "html_url": "https://github.com/rust-lang/rust/commit/dc37664c94d2c53d68e9cbb7175ccb8551d237e3"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "880d50eddd6798448effd75a482a95d27c5c9563", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbab236a9efc396d44e9ca1954ed4a4c877faebd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab236a9efc396d44e9ca1954ed4a4c877faebd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=dbab236a9efc396d44e9ca1954ed4a4c877faebd", "patch": "@@ -96,12 +96,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         Ok(None) // No coercion required.\n     }\n \n-    fn unpack_actual_value<T, F>(&self, a: Ty<'tcx>, f: F) -> T where\n-        F: FnOnce(Ty<'tcx>) -> T,\n-    {\n-        f(self.fcx.infcx().shallow_resolve(a))\n-    }\n-\n     fn coerce(&self,\n               expr_a: &hir::Expr,\n               a: Ty<'tcx>,\n@@ -353,22 +347,20 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n          * into a closure or a `proc`.\n          */\n \n-        self.unpack_actual_value(b, |b| {\n-            debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\",\n-                   a, b);\n+        let b = self.fcx.infcx().shallow_resolve(b);\n+        debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\", a, b);\n \n-            if let ty::TyFnPtr(fn_ty_b) = b.sty {\n-                match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n-                    (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n-                        let unsafe_a = self.tcx().safe_to_unsafe_fn_ty(fn_ty_a);\n-                        try!(self.subtype(unsafe_a, b));\n-                        return Ok(Some(AdjustUnsafeFnPointer));\n-                    }\n-                    _ => {}\n+        if let ty::TyFnPtr(fn_ty_b) = b.sty {\n+            match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n+                (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n+                    let unsafe_a = self.tcx().safe_to_unsafe_fn_ty(fn_ty_a);\n+                    try!(self.subtype(unsafe_a, b));\n+                    return Ok(Some(AdjustUnsafeFnPointer));\n                 }\n+                _ => {}\n             }\n-            self.subtype(a, b)\n-        })\n+        }\n+        self.subtype(a, b)\n     }\n \n     fn coerce_from_fn_item(&self,\n@@ -381,19 +373,17 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n          * into a closure or a `proc`.\n          */\n \n-        self.unpack_actual_value(b, |b| {\n-            debug!(\"coerce_from_fn_item(a={:?}, b={:?})\",\n-                   a, b);\n+        let b = self.fcx.infcx().shallow_resolve(b);\n+        debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n-            match b.sty {\n-                ty::TyFnPtr(_) => {\n-                    let a_fn_pointer = self.tcx().mk_ty(ty::TyFnPtr(fn_ty_a));\n-                    try!(self.subtype(a_fn_pointer, b));\n-                    Ok(Some(AdjustReifyFnPointer))\n-                }\n-                _ => self.subtype(a, b)\n+        match b.sty {\n+            ty::TyFnPtr(_) => {\n+                let a_fn_pointer = self.tcx().mk_ty(ty::TyFnPtr(fn_ty_a));\n+                try!(self.subtype(a_fn_pointer, b));\n+                Ok(Some(AdjustReifyFnPointer))\n             }\n-        })\n+            _ => self.subtype(a, b)\n+        }\n     }\n \n     fn coerce_unsafe_ptr(&self,"}]}