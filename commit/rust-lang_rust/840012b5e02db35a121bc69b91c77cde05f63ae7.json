{"sha": "840012b5e02db35a121bc69b91c77cde05f63ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDAxMmI1ZTAyZGIzNWExMjFiYzY5YjkxYzc3Y2RlMDVmNjNhZTc=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-11-22T15:07:38Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-11-22T15:07:38Z"}, "message": "Format bare function types\n\nFix https://github.com/rust-lang-nursery/rustfmt/issues/616.\nFix https://github.com/rust-lang-nursery/rustfmt/issues/276.\nClose https://github.com/rust-lang-nursery/rustfmt/issues/350.", "tree": {"sha": "563e1b039e5c25902b90646fc209a841399094b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563e1b039e5c25902b90646fc209a841399094b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/840012b5e02db35a121bc69b91c77cde05f63ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/840012b5e02db35a121bc69b91c77cde05f63ae7", "html_url": "https://github.com/rust-lang/rust/commit/840012b5e02db35a121bc69b91c77cde05f63ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/840012b5e02db35a121bc69b91c77cde05f63ae7/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "559f00ba9951b29c73339d94bcaeb5efa94b332a", "url": "https://api.github.com/repos/rust-lang/rust/commits/559f00ba9951b29c73339d94bcaeb5efa94b332a", "html_url": "https://github.com/rust-lang/rust/commit/559f00ba9951b29c73339d94bcaeb5efa94b332a"}], "stats": {"total": 191, "additions": 134, "deletions": 57}, "files": [{"sha": "bbe51c73c400ad4e48e8ff2cec249913c3e3242b", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -80,11 +80,7 @@ impl Rewrite for ast::Local {\n \n impl<'a> FmtVisitor<'a> {\n     pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n-        self.buffer.push_str(\"extern \");\n-\n-        if fm.abi != abi::Abi::C {\n-            self.buffer.push_str(&format!(\"{} \", fm.abi));\n-        }\n+        self.buffer.push_str(&::utils::format_abi(fm.abi));\n \n         let snippet = self.snippet(span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap() as u32;\n@@ -856,17 +852,14 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let mut result = String::with_capacity(1024);\n     // Vis unsafety abi.\n     result.push_str(format_visibility(vis));\n+    result.push_str(::utils::format_unsafety(unsafety));\n \n-    if let ast::Unsafety::Unsafe = unsafety {\n-        result.push_str(\"unsafe \");\n-    }\n     if let ast::Constness::Const = constness {\n         result.push_str(\"const \");\n     }\n+\n     if abi != abi::Rust {\n-        result.push_str(\"extern \");\n-        result.push_str(&abi.to_string());\n-        result.push(' ');\n+        result.push_str(&::utils::format_abi(abi));\n     }\n \n     // fn foo"}, {"sha": "807f0f17a43bbe1fcdf0b2cd93ad87bcfa2f7c22", "filename": "src/types.rs", "status": "modified", "additions": 88, "deletions": 42, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast::{self, Mutability};\n+use syntax::ast::{self, Mutability, FunctionRetTy};\n use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos};\n+use syntax::abi;\n \n use Indent;\n use lists::{format_item_list, itemize_list, format_fn_args};\n@@ -214,50 +215,62 @@ fn rewrite_segment(expr_context: bool,\n             format!(\"{}<{}>\", separator, list_str)\n         }\n         ast::PathParameters::ParenthesizedParameters(ref data) => {\n-            // 2 for ()\n-            let budget = try_opt!(width.checked_sub(2));\n-            // 1 for (\n-            let offset = offset + 1;\n-            let list_lo = span_after(data.span, \"(\", context.codemap);\n-            let items = itemize_list(context.codemap,\n-                                     data.inputs.iter(),\n-                                     \")\",\n-                                     |ty| ty.span.lo,\n-                                     |ty| ty.span.hi,\n-                                     |ty| ty.rewrite(context, budget, offset),\n-                                     list_lo,\n-                                     span_hi);\n-            println!(\"got here\");\n-\n-            let list_str = try_opt!(format_fn_args(items, budget, offset, context.config));\n-\n-            println!(\"got here 2\");\n-            let output = match data.output {\n-                Some(ref ty) => {\n-                    let budget = try_opt!(width.checked_sub(4));\n-                    let type_str = try_opt!(ty.rewrite(context, budget, offset + 4));\n-                    format!(\" -> {}\", type_str)\n-                }\n-                None => String::new(),\n-            };\n-\n-            println!(\"got here 3\");\n-\n-            let infix = if output.len() + list_str.len() > width {\n-                format!(\"\\n{}\", (offset - 1).to_string(context.config))\n-            } else {\n-                String::new()\n-            };\n-            println!(\"({}){}{}\", &list_str, &infix, &output);\n-\n-            format!(\"({}){}{}\", list_str, infix, output)\n+            try_opt!(format_function_type(data.inputs.iter().map(|x| &**x),\n+                                          data.output.as_ref().map(|x| &**x),\n+                                          data.span,\n+                                          context,\n+                                          width,\n+                                          offset))\n         }\n         _ => String::new(),\n     };\n \n     Some(format!(\"{}{}\", segment.identifier, params))\n }\n \n+fn format_function_type<'a, I>(inputs: I,\n+                               output: Option<&ast::Ty>,\n+                               span: Span,\n+                               context: &RewriteContext,\n+                               width: usize,\n+                               offset: Indent)\n+                               -> Option<String>\n+    where I: Iterator<Item = &'a ast::Ty>\n+{\n+    // 2 for ()\n+    let budget = try_opt!(width.checked_sub(2));\n+    // 1 for (\n+    let offset = offset + 1;\n+    let list_lo = span_after(span, \"(\", context.codemap);\n+    let items = itemize_list(context.codemap,\n+                             inputs,\n+                             \")\",\n+                             |ty| ty.span.lo,\n+                             |ty| ty.span.hi,\n+                             |ty| ty.rewrite(context, budget, offset),\n+                             list_lo,\n+                             span.hi);\n+\n+    let list_str = try_opt!(format_fn_args(items, budget, offset, context.config));\n+\n+    let output = match output {\n+        Some(ref ty) => {\n+            let budget = try_opt!(width.checked_sub(4));\n+            let type_str = try_opt!(ty.rewrite(context, budget, offset + 4));\n+            format!(\" -> {}\", type_str)\n+        }\n+        None => String::new(),\n+    };\n+\n+    let infix = if output.len() + list_str.len() > width {\n+        format!(\"\\n{}\", (offset - 1).to_string(context.config))\n+    } else {\n+        String::new()\n+    };\n+\n+    Some(format!(\"({}){}{}\", list_str, infix, output))\n+}\n+\n impl Rewrite for ast::WherePredicate {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         // TODO: dead spans?\n@@ -501,14 +514,47 @@ impl Rewrite for ast::Ty {\n                     None\n                 }\n             }\n-            ast::TyBareFn(ref bare_fn) => bare_fn.rewrite(context, width, offset),\n+            ast::TyBareFn(ref bare_fn) => {\n+                rewrite_bare_fn(bare_fn, self.span, context, width, offset)\n+            }\n             ast::TyMac(..) | ast::TyTypeof(..) => unreachable!(),\n         }\n     }\n }\n \n-impl Rewrite for ast::BareFnTy {\n-    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n-        None\n+fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n+                   span: Span,\n+                   context: &RewriteContext,\n+                   width: usize,\n+                   offset: Indent)\n+                   -> Option<String> {\n+    let mut result = String::with_capacity(128);\n+\n+    result.push_str(&::utils::format_unsafety(bare_fn.unsafety));\n+\n+    if bare_fn.abi != abi::Rust {\n+        result.push_str(&::utils::format_abi(bare_fn.abi));\n     }\n+\n+    result.push_str(\"fn\");\n+\n+    let output = match bare_fn.decl.output {\n+        FunctionRetTy::Return(ref ty) => Some(&**ty),\n+        FunctionRetTy::NoReturn(..) => None,\n+        FunctionRetTy::DefaultReturn(..) => unreachable!(),\n+    };\n+\n+    let budget = try_opt!(width.checked_sub(result.len()));\n+    let indent = offset + result.len();\n+\n+    let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter().map(|x| &*(x.ty)),\n+                                                output,\n+                                                span,\n+                                                context,\n+                                                budget,\n+                                                indent));\n+\n+    result.push_str(&rewrite);\n+\n+    Some(result)\n }"}, {"sha": "6170b0c5ee0fcd389c774167dbb6f603d191d2b3", "filename": "src/utils.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -12,6 +12,7 @@ use std::cmp::Ordering;\n \n use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItem_};\n use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::abi;\n \n use Indent;\n use comment::FindUncommented;\n@@ -45,6 +46,14 @@ pub fn format_visibility(vis: Visibility) -> &'static str {\n     }\n }\n \n+#[inline]\n+pub fn format_unsafety(unsafety: ast::Unsafety) -> &'static str {\n+    match unsafety {\n+        ast::Unsafety::Unsafe => \"unsafe \",\n+        ast::Unsafety::Normal => \"\",\n+    }\n+}\n+\n #[inline]\n pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n     match mutability {\n@@ -53,6 +62,12 @@ pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n     }\n }\n \n+#[inline]\n+// FIXME(#451): include \"C\"?\n+pub fn format_abi(abi: abi::Abi) -> String {\n+    format!(\"extern {} \", abi)\n+}\n+\n // The width of the first line in s.\n #[inline]\n pub fn first_line_width(s: &str) -> usize {"}, {"sha": "93c4322441706ab83c13a187d9604554add1cdef", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -32,3 +32,12 @@ fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>\n                        (selff: Type, mut handle: node::Handle<IdRef<'id, Node<K, V>>, Type, NodeType>)\n                         -> SearchStack<'a, K, V, Type, NodeType>{\n }\n+\n+unsafe fn generic_call(cx: *mut JSContext, argc: libc::c_uint, vp: *mut JSVal,\n+    is_lenient: bool,\n+                       call: unsafe extern fn(*const JSJitInfo, *mut JSContext,\n+                                              HandleObject, *mut libc::c_void, u32,\n+                                              *mut JSVal)\n+                                              -> u8) {\n+    let f:  fn  ( _ , _  ) ->  _   =  panic!()  ;\n+}"}, {"sha": "ca8c43d8b2c69de3811f5c25a7c60b05a23cf89e", "filename": "tests/target/extern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -1,5 +1,5 @@\n \n-extern {\n+extern \"C\" {\n     fn c_func(x: *mut *mut libc::c_void);\n \n     fn c_func(x: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,\n@@ -11,7 +11,7 @@ extern {\n     pub fn bar();\n }\n \n-extern {\n+extern \"C\" {\n     fn DMR_GetDevice(pHDev: *mut HDEV,\n                      searchMode: DeviceSearchMode,\n                      pSearchString: *const c_char,\n@@ -28,7 +28,7 @@ extern \"Rust\" {\n     pub static mut var: SomeType;\n }\n \n-extern {\n+extern \"C\" {\n     fn syscall(number: libc::c_long, // comment 1\n                // comm 2\n                ... /* sup? */)\n@@ -37,7 +37,7 @@ extern {\n     fn foo(x: *const c_char, ...) -> libc::c_long;\n }\n \n-extern {\n+extern \"C\" {\n     pub fn freopen(filename: *const c_char,\n                    mode: *const c_char,\n                    mode2: *const c_char,"}, {"sha": "e5de6b0f00d1f582cdc8714caf4158caf179aab0", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840012b5e02db35a121bc69b91c77cde05f63ae7/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=840012b5e02db35a121bc69b91c77cde05f63ae7", "patch": "@@ -50,3 +50,17 @@ fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>(selff: Type,\n                                                                  NodeType>)\n                                         -> SearchStack<'a, K, V, Type, NodeType> {\n }\n+\n+unsafe fn generic_call(cx: *mut JSContext,\n+                       argc: libc::c_uint,\n+                       vp: *mut JSVal,\n+                       is_lenient: bool,\n+                       call: unsafe extern \"C\" fn(*const JSJitInfo,\n+                                                  *mut JSContext,\n+                                                  HandleObject,\n+                                                  *mut libc::c_void,\n+                                                  u32,\n+                                                  *mut JSVal)\n+                                                  -> u8) {\n+    let f: fn(_, _) -> _ = panic!();\n+}"}]}