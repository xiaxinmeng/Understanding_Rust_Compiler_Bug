{"sha": "46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YjAxNjQ3YmExNGYxZDY2ZDVhZjJjZDcwYmVhNDAwZDNjYTRkZjM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T16:15:53Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T23:48:47Z"}, "message": "[std::path] Rename .container_as_str_opt() to .container_as_str(), drop the old .container_as_str() behavior", "tree": {"sha": "4f8be1e9263c737ea2e19c5c918f93178ff4b094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f8be1e9263c737ea2e19c5c918f93178ff4b094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "html_url": "https://github.com/rust-lang/rust/commit/46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b01647ba14f1d66d5af2cd70bea400d3ca4df3/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "html_url": "https://github.com/rust-lang/rust/commit/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607"}], "stats": {"total": 51, "additions": 11, "deletions": 40}, "files": [{"sha": "b2de3cd9178c440a487777a788c0805c16f07b6a", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46b01647ba14f1d66d5af2cd70bea400d3ca4df3/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01647ba14f1d66d5af2cd70bea400d3ca4df3/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "patch": "@@ -426,7 +426,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n         let t: Option<T> = None;\n         if BytesContainer::is_str(t) {\n             for p in paths.iter() {\n-                self.push(p.container_as_str())\n+                self.push(p.container_as_str().unwrap())\n             }\n         } else {\n             for p in paths.iter() {\n@@ -499,18 +499,9 @@ pub trait BytesContainer {\n     fn container_into_owned_bytes(self) -> ~[u8] {\n         self.container_as_bytes().to_owned()\n     }\n-    /// Returns the receiver interpreted as a utf-8 string\n-    ///\n-    /// # Failure\n-    ///\n-    /// Raises `str::null_byte` if not utf-8\n-    #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        str::from_utf8(self.container_as_bytes())\n-    }\n     /// Returns the receiver interpreted as a utf-8 string, if possible\n     #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         str::from_utf8_opt(self.container_as_bytes())\n     }\n     /// Returns whether .container_as_str() is guaranteed to not fail\n@@ -589,11 +580,7 @@ impl<'a> BytesContainer for &'a str {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        *self\n-    }\n-    #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         Some(*self)\n     }\n     #[inline]\n@@ -610,11 +597,7 @@ impl BytesContainer for ~str {\n         self.into_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        self.as_slice()\n-    }\n-    #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         Some(self.as_slice())\n     }\n     #[inline]\n@@ -627,11 +610,7 @@ impl BytesContainer for @str {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        self.as_slice()\n-    }\n-    #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         Some(self.as_slice())\n     }\n     #[inline]"}, {"sha": "33fa84c7c49189573e651f64826bdf6c0c6daa1d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46b01647ba14f1d66d5af2cd70bea400d3ca4df3/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01647ba14f1d66d5af2cd70bea400d3ca4df3/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "patch": "@@ -129,11 +129,7 @@ impl BytesContainer for Path {\n         self.into_vec()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        self.as_str().unwrap()\n-    }\n-    #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         self.as_str()\n     }\n     #[inline]\n@@ -146,11 +142,7 @@ impl<'a> BytesContainer for &'a Path {\n         self.as_vec()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> &'a str {\n-        self.as_str().unwrap()\n-    }\n-    #[inline]\n-    fn container_as_str_opt<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n         self.as_str()\n     }\n     #[inline]\n@@ -165,7 +157,7 @@ impl GenericPathUnsafe for Path {\n     /// Raises the `str::not_utf8` condition if not valid UTF-8.\n     #[inline]\n     unsafe fn new_unchecked<T: BytesContainer>(path: T) -> Path {\n-        let (prefix, path) = Path::normalize_(path.container_as_str());\n+        let (prefix, path) = Path::normalize_(path.container_as_str().unwrap());\n         assert!(!path.is_empty());\n         let mut ret = Path{ repr: path, prefix: prefix, sepidx: None };\n         ret.update_sepidx();\n@@ -178,7 +170,7 @@ impl GenericPathUnsafe for Path {\n     ///\n     /// Raises the `str::not_utf8` condition if not valid UTF-8.\n     unsafe fn set_filename_unchecked<T: BytesContainer>(&mut self, filename: T) {\n-        let filename = filename.container_as_str();\n+        let filename = filename.container_as_str().unwrap();\n         match self.sepidx_or_prefix_len() {\n             None if \"..\" == self.repr => {\n                 let mut s = str::with_capacity(3 + filename.len());\n@@ -224,7 +216,7 @@ impl GenericPathUnsafe for Path {\n     /// the new path is relative to. Otherwise, the new path will be treated\n     /// as if it were absolute and will replace the receiver outright.\n     unsafe fn push_unchecked<T: BytesContainer>(&mut self, path: T) {\n-        let path = path.container_as_str();\n+        let path = path.container_as_str().unwrap();\n         fn is_vol_abs(path: &str, prefix: Option<PathPrefix>) -> bool {\n             // assume prefix is Some(DiskPrefix)\n             let rest = path.slice_from(prefix_len(prefix));\n@@ -311,7 +303,7 @@ impl GenericPathUnsafe for Path {\n impl GenericPath for Path {\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Path> {\n-        let s = path.container_as_str_opt();\n+        let s = path.container_as_str();\n         match s {\n             None => None,\n             Some(s) => {"}]}