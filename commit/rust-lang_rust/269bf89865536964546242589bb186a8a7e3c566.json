{"sha": "269bf89865536964546242589bb186a8a7e3c566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OWJmODk4NjU1MzY5NjQ1NDYyNDI1ODliYjE4NmE4YTdlM2M1NjY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-09T00:32:30Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-09T01:19:09Z"}, "message": "Make integer power methods const", "tree": {"sha": "f0401761214228f9a11d653a445b989c3317c7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0401761214228f9a11d653a445b989c3317c7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269bf89865536964546242589bb186a8a7e3c566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269bf89865536964546242589bb186a8a7e3c566", "html_url": "https://github.com/rust-lang/rust/commit/269bf89865536964546242589bb186a8a7e3c566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269bf89865536964546242589bb186a8a7e3c566/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afa99379d9623e50efd290e609447bdc5059af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afa99379d9623e50efd290e609447bdc5059af8", "html_url": "https://github.com/rust-lang/rust/commit/2afa99379d9623e50efd290e609447bdc5059af8"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "56117a54062848c6ca16a6f6bae5f5906e0e51f9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/269bf89865536964546242589bb186a8a7e3c566/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269bf89865536964546242589bb186a8a7e3c566/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=269bf89865536964546242589bb186a8a7e3c566", "patch": "@@ -72,11 +72,14 @@\n #![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n+#![feature(const_loop)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_int_pow)]\n+#![feature(constctlz)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]"}, {"sha": "a8c71fc208a80a90477ffdc356ea4b2d6e1ac30d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/269bf89865536964546242589bb186a8a7e3c566/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269bf89865536964546242589bb186a8a7e3c566/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=269bf89865536964546242589bb186a8a7e3c566", "patch": "@@ -1001,10 +1001,11 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+            pub const fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -1188,10 +1189,11 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_pow(self, exp: u32) -> Self {\n+            pub const fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n                     Some(x) => x,\n                     None if self < 0 && exp % 2 == 1 => Self::min_value(),\n@@ -1531,10 +1533,11 @@ assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+            pub const fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -1908,10 +1911,11 @@ assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+            pub const fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n                 let mut overflown = false;\n@@ -1957,11 +1961,12 @@ assert_eq!(x.pow(5), 32);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn pow(self, mut exp: u32) -> Self {\n+            pub const fn pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc = 1;\n \n@@ -3127,10 +3132,11 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+            pub const fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -3242,10 +3248,11 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_pow(self, exp: u32) -> Self {\n+            pub const fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n                     Some(x) => x,\n                     None => Self::max_value(),\n@@ -3535,10 +3542,11 @@ Basic usage:\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+            pub const fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -3861,10 +3869,11 @@ Basic usage:\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+            pub const fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n                 let mut overflown = false;\n@@ -3907,11 +3916,12 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".pow(5), 32);\", $EndFeature, \"\n ```\"),\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub fn pow(self, mut exp: u32) -> Self {\n+        pub const fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = 1;\n \n@@ -4022,7 +4032,8 @@ assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n         #[inline]\n-        fn one_less_than_next_power_of_two(self) -> Self {\n+        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+        const fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n             let p = self - 1;\n@@ -4050,9 +4061,10 @@ Basic usage:\n assert_eq!(3\", stringify!($SelfT), \".next_power_of_two(), 4);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn next_power_of_two(self) -> Self {\n+            pub const fn next_power_of_two(self) -> Self {\n                 self.one_less_than_next_power_of_two() + 1\n             }\n         }\n@@ -4075,7 +4087,8 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            pub fn checked_next_power_of_two(self) -> Option<Self> {\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            pub const fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n         }\n@@ -4099,7 +4112,8 @@ $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n-            pub fn wrapping_next_power_of_two(self) -> Self {\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            pub const fn wrapping_next_power_of_two(self) -> Self {\n                 self.one_less_than_next_power_of_two().wrapping_add(1)\n             }\n         }"}]}