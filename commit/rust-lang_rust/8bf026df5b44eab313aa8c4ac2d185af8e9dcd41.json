{"sha": "8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZjAyNmRmNWI0NGVhYjMxM2FhOGM0YWMyZDE4NWFmOGU5ZGNkNDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:20Z"}, "message": "Rollup merge of #48328 - frewsxcv:frewsxcv-clarify-error-zero-duration, r=sfackler\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "d1fdfbd75b8766a517f7f46255fb7c081f35f6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1fdfbd75b8766a517f7f46255fb7c081f35f6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqaOjAACgkQO79NPi73\nn5ixaQ//cR4onww7F7HOdYcHtzUyIs86rhRE+3Blol0zxbXEj08GxqylKlTIZIjz\n5XG9b63eND1EB/YHjf3F27Z1uZL+qWJq/IoDvU5dspG0NQcj09plTRfawm8+DB1O\nKoFh8ERBCF/7GWoScC4jG178A+GhxVSckwxeVpoTbh8vypyfb3xRsiO+2ijXBmyU\nxU0t+LRkjo2PpZQWnAkzGX/RZRDPoK9jaTzaIsFUbjc1ogsqyxwSo5IqhXxeTa4p\naDfVrETjYunlgxQv26cF04jzBCjLJbk1Nw4t1K5fQe9MnWGSAO6VYQn8GQ1bClRH\nmvBibU72iMAnRFe2GPYk130NiB0g87XhwYn1R3rL2U2SpNALQjpkXtp+yLpObC2M\nqDBr46J8vTKj4pY3IYk7V8aAFYdFWlTcusjfdW43ODoiU2mWlivWrtLoij9lD9YF\n9fHIB6M33YIDNJwFAowKny6RSiBMeFhR0rzArBuo51qlLJ9j7iwNcbuxXm3vpIaP\nRznc8j+YesfNSl6CuNhrsePQLNZZxy4CJo2exzf08/2wvg7C39xQE3UAojECsiKJ\nZeaD+j2Qr2ehaC4bg+Qb1HPyFa+ySz5iSBj2wOXAMy8S6HfQm426iaR9+wlh5/oD\nIbd2FpzMXJBxF14579YgYhdCEGeZo6gckjlIpTQfwrVQZPN0TT4=\n=ebzz\n-----END PGP SIGNATURE-----", "payload": "tree d1fdfbd75b8766a517f7f46255fb7c081f35f6e5\nparent 65253fd2eb118bfa28bd3a36b53a783546366e13\nparent 0700bd12d0279db22da40748d86c42b92804888a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520056880 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1520056880 -0800\n\nRollup merge of #48328 - frewsxcv:frewsxcv-clarify-error-zero-duration, r=sfackler\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "html_url": "https://github.com/rust-lang/rust/commit/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65253fd2eb118bfa28bd3a36b53a783546366e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/65253fd2eb118bfa28bd3a36b53a783546366e13", "html_url": "https://github.com/rust-lang/rust/commit/65253fd2eb118bfa28bd3a36b53a783546366e13"}, {"sha": "0700bd12d0279db22da40748d86c42b92804888a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0700bd12d0279db22da40748d86c42b92804888a", "html_url": "https://github.com/rust-lang/rust/commit/0700bd12d0279db22da40748d86c42b92804888a"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "e28ccdb766ae5d634666a4f031e553cbdbfb99b8", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "patch": "@@ -259,8 +259,8 @@ impl TcpStream {\n     /// Sets the read timeout to the timeout specified.\n     ///\n     /// If the value specified is [`None`], then [`read`] calls will block\n-    /// indefinitely. It is an error to pass the zero `Duration` to this\n-    /// method.\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n+    /// passed to this method.\n     ///\n     /// # Platform-specific behavior\n     ///\n@@ -269,9 +269,11 @@ impl TcpStream {\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n     /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n+    /// [`Duration`]: ../../std/time/struct.Duration.html\n     ///\n     /// # Examples\n     ///\n@@ -282,6 +284,20 @@ impl TcpStream {\n     ///                        .expect(\"Couldn't connect to the server...\");\n     /// stream.set_read_timeout(None).expect(\"set_read_timeout call failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::net::TcpStream;\n+    /// use std::time::Duration;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\n+    /// let result = stream.set_read_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n@@ -290,8 +306,8 @@ impl TcpStream {\n     /// Sets the write timeout to the timeout specified.\n     ///\n     /// If the value specified is [`None`], then [`write`] calls will block\n-    /// indefinitely. It is an error to pass the zero [`Duration`] to this\n-    /// method.\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n+    /// passed to this method.\n     ///\n     /// # Platform-specific behavior\n     ///\n@@ -300,6 +316,7 @@ impl TcpStream {\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n@@ -314,6 +331,20 @@ impl TcpStream {\n     ///                        .expect(\"Couldn't connect to the server...\");\n     /// stream.set_write_timeout(None).expect(\"set_write_timeout call failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::net::TcpStream;\n+    /// use std::time::Duration;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\n+    /// let result = stream.set_write_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)"}, {"sha": "8e56954bea439f3950935cb657769486ddfdeaa7", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "patch": "@@ -228,8 +228,8 @@ impl UdpSocket {\n     /// Sets the read timeout to the timeout specified.\n     ///\n     /// If the value specified is [`None`], then [`read`] calls will block\n-    /// indefinitely. It is an error to pass the zero [`Duration`] to this\n-    /// method.\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n+    /// passed to this method.\n     ///\n     /// # Platform-specific behavior\n     ///\n@@ -238,6 +238,7 @@ impl UdpSocket {\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n@@ -251,6 +252,20 @@ impl UdpSocket {\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// socket.set_read_timeout(None).expect(\"set_read_timeout call failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::net::UdpSocket;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").unwrap();\n+    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n@@ -259,8 +274,8 @@ impl UdpSocket {\n     /// Sets the write timeout to the timeout specified.\n     ///\n     /// If the value specified is [`None`], then [`write`] calls will block\n-    /// indefinitely. It is an error to pass the zero [`Duration`] to this\n-    /// method.\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n+    /// passed to this method.\n     ///\n     /// # Platform-specific behavior\n     ///\n@@ -269,6 +284,7 @@ impl UdpSocket {\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n@@ -282,6 +298,20 @@ impl UdpSocket {\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// socket.set_write_timeout(None).expect(\"set_write_timeout call failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::net::UdpSocket;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").unwrap();\n+    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)"}, {"sha": "ad437658d144a53ef35bb95af6acba7a88d31879", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "patch": "@@ -387,10 +387,11 @@ impl UnixStream {\n     /// Sets the read timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`read`] calls will block\n-    /// indefinitely. It is an error to pass the zero [`Duration`] to this\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n     /// [`read`]: ../../../../std/io/trait.Read.html#tymethod.read\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n@@ -403,6 +404,20 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::os::unix::net::UnixStream;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n+    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n         self.0.set_timeout(timeout, libc::SO_RCVTIMEO)\n@@ -411,10 +426,11 @@ impl UnixStream {\n     /// Sets the write timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`write`] calls will block\n-    /// indefinitely. It is an error to pass the zero [`Duration`] to this\n-    /// method.\n+    /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n+    /// passed to this method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n     /// [`write`]: ../../../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n@@ -427,6 +443,20 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::net::UdpSocket;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").unwrap();\n+    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n         self.0.set_timeout(timeout, libc::SO_SNDTIMEO)\n@@ -1250,10 +1280,11 @@ impl UnixDatagram {\n     /// Sets the read timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`recv`] and [`recv_from`] calls will\n-    /// block indefinitely. It is an error to pass the zero [`Duration`] to this\n-    /// method.\n+    /// block indefinitely. An [`Err`] is returned if the zero [`Duration`]\n+    /// is passed to this method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n+    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n     /// [`recv`]: #method.recv\n     /// [`recv_from`]: #method.recv_from\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n@@ -1267,6 +1298,20 @@ impl UnixDatagram {\n     /// let sock = UnixDatagram::unbound().unwrap();\n     /// sock.set_read_timeout(Some(Duration::new(1, 0))).expect(\"set_read_timeout function failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::os::unix::net::UnixDatagram;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UnixDatagram::unbound().unwrap();\n+    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n         self.0.set_timeout(timeout, libc::SO_RCVTIMEO)\n@@ -1275,7 +1320,7 @@ impl UnixDatagram {\n     /// Sets the write timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`send`] and [`send_to`] calls will\n-    /// block indefinitely. It is an error to pass the zero [`Duration`] to this\n+    /// block indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n@@ -1293,6 +1338,20 @@ impl UnixDatagram {\n     /// sock.set_write_timeout(Some(Duration::new(1, 0)))\n     ///     .expect(\"set_write_timeout function failed\");\n     /// ```\n+    ///\n+    /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n+    /// method:\n+    ///\n+    /// ```no_run\n+    /// use std::io;\n+    /// use std::os::unix::net::UnixDatagram;\n+    /// use std::time::Duration;\n+    ///\n+    /// let socket = UnixDatagram::unbound().unwrap();\n+    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    /// let err = result.unwrap_err();\n+    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n         self.0.set_timeout(timeout, libc::SO_SNDTIMEO)"}]}