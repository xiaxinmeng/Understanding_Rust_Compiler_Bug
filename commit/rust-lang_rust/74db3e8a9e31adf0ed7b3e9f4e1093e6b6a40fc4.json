{"sha": "74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGIzZThhOWUzMWFkZjBlZDdiM2U5ZjRlMTA5M2U2YjZhNDBmYzQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-18T18:22:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-22T10:42:11Z"}, "message": "rustc_metadata: use a table for super_predicates.", "tree": {"sha": "13cdd88ae01987655e01f264c9175e449dd00b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13cdd88ae01987655e01f264c9175e449dd00b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "html_url": "https://github.com/rust-lang/rust/commit/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ffa79589600f515ff2710830c23cd2dce7cb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ffa79589600f515ff2710830c23cd2dce7cb76", "html_url": "https://github.com/rust-lang/rust/commit/50ffa79589600f515ff2710830c23cd2dce7cb76"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "1ec7702af79d79b9734658f77b44fb99e7bae1fd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "patch": "@@ -448,7 +448,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Mod(_) => DefKind::Mod,\n             EntryKind::Variant(_) => DefKind::Variant,\n             EntryKind::Trait(_) => DefKind::Trait,\n-            EntryKind::TraitAlias(_) => DefKind::TraitAlias,\n+            EntryKind::TraitAlias => DefKind::TraitAlias,\n             EntryKind::Enum(..) => DefKind::Enum,\n             EntryKind::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n             EntryKind::ForeignType => DefKind::ForeignTy,\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                   data.is_marker,\n                                   self.def_path_table.def_path_hash(item_id))\n             },\n-            EntryKind::TraitAlias(_) => {\n+            EntryKind::TraitAlias => {\n                 ty::TraitDef::new(self.local_def_id(item_id),\n                                   hir::Unsafety::Normal,\n                                   false,\n@@ -680,13 +680,7 @@ impl<'a, 'tcx> CrateMetadata {\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n     ) -> ty::GenericPredicates<'tcx> {\n-        let super_predicates = match self.kind(item_id) {\n-            EntryKind::Trait(data) => data.decode(self).super_predicates,\n-            EntryKind::TraitAlias(data) => data.decode(self).super_predicates,\n-            _ => bug!(\"def-index does not refer to trait or trait alias\"),\n-        };\n-\n-        super_predicates.decode((self, tcx))\n+        self.root.per_def.super_predicates.get(self, item_id).unwrap().decode((self, tcx))\n     }\n \n     crate fn get_generics(&self, item_id: DefIndex, sess: &Session) -> ty::Generics {\n@@ -1118,7 +1112,7 @@ impl<'a, 'tcx> CrateMetadata {\n         def_key.parent.and_then(|parent_index| {\n             match self.kind(parent_index) {\n                 EntryKind::Trait(_) |\n-                EntryKind::TraitAlias(_) => Some(self.local_def_id(parent_index)),\n+                EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),\n                 _ => None,\n             }\n         })"}, {"sha": "79a7caa292b089f337dab4123da88b876783c69a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "patch": "@@ -76,6 +76,7 @@ struct PerDefTables<'tcx> {\n     generics: PerDefTable<Lazy<ty::Generics>>,\n     predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n     predicates_defined_on: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n+    super_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     mir: PerDefTable<Lazy<mir::Body<'tcx>>>,\n     promoted_mir: PerDefTable<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n@@ -513,6 +514,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             generics: self.per_def.generics.encode(&mut self.opaque),\n             predicates: self.per_def.predicates.encode(&mut self.opaque),\n             predicates_defined_on: self.per_def.predicates_defined_on.encode(&mut self.opaque),\n+            super_predicates: self.per_def.super_predicates.encode(&mut self.opaque),\n \n             mir: self.per_def.mir.encode(&mut self.opaque),\n             promoted_mir: self.per_def.promoted_mir.encode(&mut self.opaque),\n@@ -835,6 +837,11 @@ impl EncodeContext<'tcx> {\n             self.tcx.predicates_defined_on(def_id))\n     }\n \n+    fn encode_super_predicates(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_super_predicates({:?})\", def_id);\n+        record!(self.per_def.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));\n+    }\n+\n     fn encode_info_for_trait_item(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -1166,18 +1173,11 @@ impl EncodeContext<'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n-                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n                 };\n \n                 EntryKind::Trait(self.lazy(data))\n             }\n-            hir::ItemKind::TraitAlias(..) => {\n-                let data = TraitAliasData {\n-                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n-                };\n-\n-                EntryKind::TraitAlias(self.lazy(data))\n-            }\n+            hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,\n             hir::ItemKind::ExternCrate(_) |\n             hir::ItemKind::Use(..) => bug!(\"cannot encode info for item {:?}\", item),\n         });\n@@ -1269,6 +1269,13 @@ impl EncodeContext<'tcx> {\n             }\n             _ => {} // not *wrong* for other kinds of items, but not needed\n         }\n+        match item.kind {\n+            hir::ItemKind::Trait(..) |\n+            hir::ItemKind::TraitAlias(..) => {\n+                self.encode_super_predicates(def_id);\n+            }\n+            _ => {}\n+        }\n \n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,"}, {"sha": "b681078ee0d5d434e247f3665deb48b382c3e5cc", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=74db3e8a9e31adf0ed7b3e9f4e1093e6b6a40fc4", "patch": "@@ -243,6 +243,7 @@ crate struct LazyPerDefTables<'tcx> {\n     pub generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n     pub predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n     pub predicates_defined_on: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+    pub super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n \n     pub mir: Lazy!(PerDefTable<Lazy!(mir::Body<'tcx>)>),\n     pub promoted_mir: Lazy!(PerDefTable<Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>),\n@@ -273,13 +274,13 @@ crate enum EntryKind<'tcx> {\n     MacroDef(Lazy<MacroDef>),\n     Closure(Lazy!(ClosureData<'tcx>)),\n     Generator(Lazy!(GeneratorData<'tcx>)),\n-    Trait(Lazy!(TraitData<'tcx>)),\n+    Trait(Lazy<TraitData>),\n     Impl(Lazy!(ImplData<'tcx>)),\n     Method(Lazy!(MethodData<'tcx>)),\n     AssocType(AssocContainer),\n     AssocOpaqueTy(AssocContainer),\n     AssocConst(AssocContainer, ConstQualif, Lazy<RenderedConst>),\n-    TraitAlias(Lazy!(TraitAliasData<'tcx>)),\n+    TraitAlias,\n }\n \n /// Additional data for EntryKind::Const and EntryKind::AssocConst\n@@ -324,17 +325,11 @@ crate struct VariantData<'tcx> {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct TraitData<'tcx> {\n+crate struct TraitData {\n     pub unsafety: hir::Unsafety,\n     pub paren_sugar: bool,\n     pub has_auto_impl: bool,\n     pub is_marker: bool,\n-    pub super_predicates: Lazy!(ty::GenericPredicates<'tcx>),\n-}\n-\n-#[derive(RustcEncodable, RustcDecodable)]\n-crate struct TraitAliasData<'tcx> {\n-    pub super_predicates: Lazy!(ty::GenericPredicates<'tcx>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}]}