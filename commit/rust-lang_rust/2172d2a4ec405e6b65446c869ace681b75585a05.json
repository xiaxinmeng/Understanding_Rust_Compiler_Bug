{"sha": "2172d2a4ec405e6b65446c869ace681b75585a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNzJkMmE0ZWM0MDVlNmI2NTQ0NmM4NjlhY2U2ODFiNzU1ODVhMDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-15T08:11:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-15T08:11:32Z"}, "message": "Rollup merge of #29058 - tshepang:rename, r=steveklabnik\n\nShoud have been part of commit 0b13ee0ced39", "tree": {"sha": "1e48d4fd360a2b6b144c3012382e0e846ac527cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e48d4fd360a2b6b144c3012382e0e846ac527cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2172d2a4ec405e6b65446c869ace681b75585a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2172d2a4ec405e6b65446c869ace681b75585a05", "html_url": "https://github.com/rust-lang/rust/commit/2172d2a4ec405e6b65446c869ace681b75585a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2172d2a4ec405e6b65446c869ace681b75585a05/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d478f49f254663f7aabace5e13b736b2e0f7a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d478f49f254663f7aabace5e13b736b2e0f7a3f", "html_url": "https://github.com/rust-lang/rust/commit/7d478f49f254663f7aabace5e13b736b2e0f7a3f"}, {"sha": "ea37fadebb7a70421e1d922ed52f5219d4e9ddc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea37fadebb7a70421e1d922ed52f5219d4e9ddc1", "html_url": "https://github.com/rust-lang/rust/commit/ea37fadebb7a70421e1d922ed52f5219d4e9ddc1"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "a9e12833906db57caaf8d9bd3cfe902e001eed9a", "filename": "src/doc/reference.md", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2172d2a4ec405e6b65446c869ace681b75585a05/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/2172d2a4ec405e6b65446c869ace681b75585a05/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=2172d2a4ec405e6b65446c869ace681b75585a05", "patch": "@@ -1076,7 +1076,7 @@ let p: Point = (41, 68);\n \n ### Structs\n \n-A _structure_ is a nominal [structure type](#structure-types) defined with the\n+A _struct_ is a nominal [struct type](#struct-types) defined with the\n keyword `struct`.\n \n An example of a `struct` item and its use:\n@@ -1087,7 +1087,7 @@ let p = Point {x: 10, y: 11};\n let px: i32 = p.x;\n ```\n \n-A _tuple structure_ is a nominal [tuple type](#tuple-types), also defined with\n+A _tuple struct_ is a nominal [tuple type](#tuple-types), also defined with\n the keyword `struct`. For example:\n \n ```\n@@ -1096,8 +1096,8 @@ let p = Point(10, 11);\n let px: i32 = match p { Point(x, _) => x };\n ```\n \n-A _unit-like struct_ is a structure without any fields, defined by leaving off\n-the list of fields entirely. Such a structure implicitly defines a constant of\n+A _unit-like struct_ is a struct without any fields, defined by leaving off\n+the list of fields entirely. Such a struct implicitly defines a constant of\n its type with the same name. For example:\n \n ```\n@@ -1115,7 +1115,7 @@ const Cookie: Cookie = Cookie {};\n let c = [Cookie, Cookie {}, Cookie, Cookie {}];\n ```\n \n-The precise memory layout of a structure is not specified. One can specify a\n+The precise memory layout of a struct is not specified. One can specify a\n particular layout using the [`repr` attribute](#ffi-attributes).\n \n ### Enumerations\n@@ -2404,7 +2404,7 @@ items.\n \n An _item declaration statement_ has a syntactic form identical to an\n [item](#items) declaration within a module. Declaring an item &mdash; a\n-function, enumeration, structure, type, static, trait, implementation or module\n+function, enumeration, struct, type, static, trait, implementation or module\n &mdash; locally within a statement block is simply a way of restricting its\n scope to a narrow region containing all of its uses; it is otherwise identical\n in meaning to declaring the item outside the statement block.\n@@ -2549,26 +2549,26 @@ comma:\n (0); // zero in parentheses\n ```\n \n-### Structure expressions\n+### Struct expressions\n \n-There are several forms of structure expressions. A _structure expression_\n-consists of the [path](#paths) of a [structure item](#structs), followed by\n+There are several forms of struct expressions. A _struct expression_\n+consists of the [path](#paths) of a [struct item](#structs), followed by\n a brace-enclosed list of one or more comma-separated name-value pairs,\n-providing the field values of a new instance of the structure. A field name\n+providing the field values of a new instance of the struct. A field name\n can be any identifier, and is separated from its value expression by a colon.\n-The location denoted by a structure field is mutable if and only if the\n-enclosing structure is mutable.\n+The location denoted by a struct field is mutable if and only if the\n+enclosing struct is mutable.\n \n-A _tuple structure expression_ consists of the [path](#paths) of a [structure\n+A _tuple struct expression_ consists of the [path](#paths) of a [struct\n item](#structs), followed by a parenthesized list of one or more\n-comma-separated expressions (in other words, the path of a structure item\n-followed by a tuple expression). The structure item must be a tuple structure\n+comma-separated expressions (in other words, the path of a struct item\n+followed by a tuple expression). The struct item must be a tuple struct\n item.\n \n-A _unit-like structure expression_ consists only of the [path](#paths) of a\n-[structure item](#structs).\n+A _unit-like struct expression_ consists only of the [path](#paths) of a\n+[struct item](#structs).\n \n-The following are examples of structure expressions:\n+The following are examples of struct expressions:\n \n ```\n # struct Point { x: f64, y: f64 }\n@@ -2581,14 +2581,14 @@ let u = game::User {name: \"Joe\", age: 35, score: 100_000};\n some_fn::<Cookie>(Cookie);\n ```\n \n-A structure expression forms a new value of the named structure type. Note\n-that for a given *unit-like* structure type, this will always be the same\n+A struct expression forms a new value of the named struct type. Note\n+that for a given *unit-like* struct type, this will always be the same\n value.\n \n-A structure expression can terminate with the syntax `..` followed by an\n+A struct expression can terminate with the syntax `..` followed by an\n expression to denote a functional update. The expression following `..` (the\n-base) must have the same structure type as the new structure type being formed.\n-The entire expression denotes the result of constructing a new structure (with\n+base) must have the same struct type as the new struct type being formed.\n+The entire expression denotes the result of constructing a new struct (with\n the same type as the base expression) with the given values for the fields that\n were explicitly specified and the values in the base expression for all other\n fields.\n@@ -2634,7 +2634,7 @@ the left-hand-side expression is an indirect [trait object](#trait-objects).\n A _field expression_ consists of an expression followed by a single dot and an\n identifier, when not immediately followed by a parenthesized expression-list\n (the latter is a [method call expression](#method-call-expressions)). A field\n-expression denotes a field of a [structure](#structure-types).\n+expression denotes a field of a [struct](#struct-types).\n \n ```{.ignore .field}\n mystruct.myfield;\n@@ -3353,17 +3353,17 @@ As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The\n All in-bounds elements of arrays and slices are always initialized, and access\n to an array or slice is always bounds-checked.\n \n-### Structure types\n+### Struct types\n \n A `struct` *type* is a heterogeneous product of other types, called the\n *fields* of the type.[^structtype]\n \n [^structtype]: `struct` types are analogous to `struct` types in C,\n     the *record* types of the ML family,\n-    or the *structure* types of the Lisp family.\n+    or the *struct* types of the Lisp family.\n \n New instances of a `struct` can be constructed with a [struct\n-expression](#structure-expressions).\n+expression](#struct-expressions).\n \n The memory layout of a `struct` is undefined by default to allow for compiler\n optimizations like field reordering, but it can be fixed with the\n@@ -3373,14 +3373,14 @@ have the same memory layout.\n \n The fields of a `struct` may be qualified by [visibility\n modifiers](#visibility-and-privacy), to allow access to data in a\n-structure outside a module.\n+struct outside a module.\n \n-A _tuple struct_ type is just like a structure type, except that the fields are\n+A _tuple struct_ type is just like a struct type, except that the fields are\n anonymous.\n \n-A _unit-like struct_ type is like a structure type, except that it has no\n-fields. The one value constructed by the associated [structure\n-expression](#structure-expressions) is the only value that inhabits such a\n+A _unit-like struct_ type is like a struct type, except that it has no\n+fields. The one value constructed by the associated [struct\n+expression](#struct-expressions) is the only value that inhabits such a\n type.\n \n ### Enumerated types\n@@ -3407,7 +3407,7 @@ named reference to an [`enum` item](#enumerations).\n ### Recursive types\n \n Nominal types &mdash; [enumerations](#enumerated-types) and\n-[structs](#structure-types) &mdash; may be recursive. That is, each `enum`\n+[structs](#struct-types) &mdash; may be recursive. That is, each `enum`\n constructor or `struct` field may refer, directly or indirectly, to the\n enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n "}]}