{"sha": "b0897ff2ee8346def3414c588fb7ae140efe0208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODk3ZmYyZWU4MzQ2ZGVmMzQxNGM1ODhmYjdhZTE0MGVmZTAyMDg=", "commit": {"author": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-06-28T18:53:23Z"}, "committer": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-06-28T18:53:23Z"}, "message": "Update RELEASES.md for 1.54.0", "tree": {"sha": "0acb2a263f71c9c1c33e1b9836998ac0cc31a865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0acb2a263f71c9c1c33e1b9836998ac0cc31a865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0897ff2ee8346def3414c588fb7ae140efe0208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0897ff2ee8346def3414c588fb7ae140efe0208", "html_url": "https://github.com/rust-lang/rust/commit/b0897ff2ee8346def3414c588fb7ae140efe0208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0897ff2ee8346def3414c588fb7ae140efe0208/comments", "author": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ea490310ba7c836c93fe1b7002555b3bea5eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ea490310ba7c836c93fe1b7002555b3bea5eb1", "html_url": "https://github.com/rust-lang/rust/commit/17ea490310ba7c836c93fe1b7002555b3bea5eb1"}], "stats": {"total": 129, "additions": 128, "deletions": 1}, "files": [{"sha": "bb2809cdfe944c0ff2b6afce0ffcdf414c84350d", "filename": "RELEASES.md", "status": "modified", "additions": 128, "deletions": 1, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/b0897ff2ee8346def3414c588fb7ae140efe0208/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0897ff2ee8346def3414c588fb7ae140efe0208/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b0897ff2ee8346def3414c588fb7ae140efe0208", "patch": "@@ -1,3 +1,130 @@\n+Version 1.54.0 (2021-06-29)\n+============================\n+\n+Language\n+-----------------------\n+\n+- [You can now use macros for values in key-value attributes.][83366]\n+  While a seemingly minor addition on its own, this enables a lot of\n+  powerful functionality when combined correctly. Most notably you can\n+  now include external documentation in your crate by writing the following.\n+  ```rust\n+  #![doc = include_str!(\"README.md\")]\n+  ```\n+\n+- [You can now cast between unsized slice types (and types which contain\n+  unsized slices) in `const fn`.][85078]\n+- [TODO: stabilize member constraints][84701]\n+\n+Compiler\n+-----------------------\n+\n+- [Rustc will now search for custom JSON targets in\n+  `/lib/rustlib/<target-triple>/target.json` where `/` is the \"sysroot\"\n+  directory.][83800] You can find your sysroot directory by running\n+  `rustc --print sysroot`.\n+- [Added `wasm` as a `target_family` for WebAssembly platforms.][84072]\n+- [You can now use `#[target_feature]` on safe functions when targeting\n+  WebAssembly platforms.][84988]\n+- [Improved debugger output for enums on Windows MSVC platorms.][85292]\n+- [Added tier 3\\* support for `bpfel-unknown-none`\n+   and `bpfeb-unknown-none`.][79608]\n+- [Added tier 3 support for `powerpc64le-unknown-freebsd`.][83572]\n+\n+Libraries\n+-----------------------\n+\n+- [You can now explicitly import the prelude of different editions\n+  through `std::prelude`. (e.g. `use std::prelude::rust_2021::*;`)][86294]\n+- [`panic::panic_any` will now `#[track_caller]`.][85745]\n+- [Added `OutOfMemory` as a variant of `io::ErrorKind`.][84744]\n+- [ `proc_macro::Literal` now implements `FromStr`.][84717]\n+- [TODO: Bump stdarch submodule][83278]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`BTreeMap::into_keys`]\n+- [`BTreeMap::into_values`]\n+- [`HashMap::into_keys`]\n+- [`HashMap::into_values`]\n+- [`MaybeUninit::assume_init_mut`]\n+- [`MaybeUninit::assume_init_ref`]\n+- [`arch::wasm32`]\n+- [`arch::x86::_bittest`]\n+- [`arch::x86::_bittestandcomplement`]\n+- [`arch::x86::_bittestandset`]\n+- [`arch::x86_64::_bittest`]\n+- [`arch::x86_64::_bittestandcomplement64`]\n+- [`arch::x86_64::_bittestandcomplement`]\n+- [`arch::x86_64::_bittestandreset64`]\n+- [`arch::x86_64::_bittestandset64`]\n+- [`arch::x86_64::_bittestandset`]\n+- [`ops::ControlFlow`]\n+- [`VecDeque::binary_search`]\n+- [`VecDeque::binary_search_by`]\n+- [`VecDeque::binary_search_by_key`]\n+- [`VecDeque::partition_point`]\n+\n+Cargo\n+-----------------------\n+\n+- [Added the `--prune <spec>` option to `cargo-tree` to remove a package from\n+  the dependency graph.][cargo/9520]\n+- [Added the `--depth` option to `cargo-tree` to print only to a certain depth\n+  in the tree ][cargo/9499]\n+- [Added the `no-proc-macro` value to `cargo-tree --edges` to hide procedural\n+  macro dependencies.][cargo/9488]\n+- [A new environment variable named `CARGO_TARGET_TMPDIR` is available.][cargo/9375]\n+  This variable points to a directory that integration tests and benches\n+  can use as a \"scratchpad\" for testing filesystem operations.\n+- [Configure hosts separately from targets when --target is specified.][cargo/9322]\n+- [Respect Cargo.toml `[package.exclude]` even not in a git repo.][cargo/9186]\n+\n+[79608]: https://github.com/rust-lang/rust/pull/79608\n+[84988]: https://github.com/rust-lang/rust/pull/84988\n+[84701]: https://github.com/rust-lang/rust/pull/84701\n+[84072]: https://github.com/rust-lang/rust/pull/84072\n+[86294]: https://github.com/rust-lang/rust/pull/86294\n+[85745]: https://github.com/rust-lang/rust/pull/85745\n+[84744]: https://github.com/rust-lang/rust/pull/84744\n+[85078]: https://github.com/rust-lang/rust/pull/85078\n+[84717]: https://github.com/rust-lang/rust/pull/84717\n+[83800]: https://github.com/rust-lang/rust/pull/83800\n+[83366]: https://github.com/rust-lang/rust/pull/83366\n+[83278]: https://github.com/rust-lang/rust/pull/83278\n+[85292]: https://github.com/rust-lang/rust/pull/85292\n+[83572]: https://github.com/rust-lang/rust/pull/83572\n+[cargo/9520]: https://github.com/rust-lang/cargo/pull/9520\n+[cargo/9499]: https://github.com/rust-lang/cargo/pull/9499\n+[cargo/9488]: https://github.com/rust-lang/cargo/pull/9488\n+[cargo/9375]: https://github.com/rust-lang/cargo/pull/9375\n+[cargo/9322]: https://github.com/rust-lang/cargo/pull/9322\n+[cargo/9186]: https://github.com/rust-lang/cargo/pull/9186\n+[`arch::x86::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittest.html\n+[`arch::x86::_bittestandcomplement`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandcomplement.html\n+[`arch::x86::_bittestandset`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandset.html\n+[`arch::x86_64::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittest.html\n+[`arch::x86_64::_bittestandcomplement64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandcomplement64.html\n+[`arch::x86_64::_bittestandcomplement`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandcomplement.html\n+[`arch::x86_64::_bittestandreset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandreset64.html\n+[`arch::x86_64::_bittestandset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandset64.html\n+[`arch::x86_64::_bittestandset`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandset.html\n+[`BTreeMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_keys\n+[`BTreeMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_values\n+[`HashMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_keys\n+[`HashMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_values\n+[`MaybeUninit::assume_init_ref`]: https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#method.assume_init_ref\n+[`MaybeUninit::assume_init_mut`]: https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#method.assume_init_mut\n+[`arch::wasm32`]: https://doc.rust-lang.org/core/arch/wasm32/index.html\n+[`ops::ControlFlow`]: https://doc.rust-lang.org/std/ops/enum.ControlFlow.html\n+[`VecDeque::binary_search`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search\n+[`VecDeque::binary_search_by`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by\n+\n+[`VecDeque::binary_search_by_key`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by_key\n+\n+[`VecDeque::partition_point`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.partition_point\n+\n Version 1.53.0 (2021-06-17)\n ============================\n \n@@ -1749,7 +1876,7 @@ Language\n - [You can now use `#[repr(transparent)]` on univariant `enum`s.][68122] Meaning\n   that you can create an enum that has the exact layout and ABI of the type\n   it contains.\n-- [You can now use outer attribute procedural macros on inline modules.][64273]  \n+- [You can now use outer attribute procedural macros on inline modules.][64273]\n - [There are some *syntax-only* changes:][67131]\n    - `default` is syntactically allowed before items in `trait` definitions.\n    - Items in `impl`s (i.e. `const`s, `type`s, and `fn`s) may syntactically"}]}