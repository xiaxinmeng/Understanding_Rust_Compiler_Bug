{"sha": "7da9a5e178e28b2e387e6296aa1b0289acdf5781", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYTlhNWUxNzhlMjhiMmUzODdlNjI5NmFhMWIwMjg5YWNkZjU3ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T09:42:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T09:42:38Z"}, "message": "Auto merge of #45589 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\n- Successful merges: #45421, #45449, #45505, #45535, #45549, #45574, #45585\n- Failed merges:", "tree": {"sha": "5af983a3ac9c36e9597311604c6376c975f21b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af983a3ac9c36e9597311604c6376c975f21b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7da9a5e178e28b2e387e6296aa1b0289acdf5781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7da9a5e178e28b2e387e6296aa1b0289acdf5781", "html_url": "https://github.com/rust-lang/rust/commit/7da9a5e178e28b2e387e6296aa1b0289acdf5781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7da9a5e178e28b2e387e6296aa1b0289acdf5781/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75277c72c0c6f603bb258383ad74d3082dc4a720", "url": "https://api.github.com/repos/rust-lang/rust/commits/75277c72c0c6f603bb258383ad74d3082dc4a720", "html_url": "https://github.com/rust-lang/rust/commit/75277c72c0c6f603bb258383ad74d3082dc4a720"}, {"sha": "0b0237761458d634b9082d4f863bbe18c64349e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0237761458d634b9082d4f863bbe18c64349e7", "html_url": "https://github.com/rust-lang/rust/commit/0b0237761458d634b9082d4f863bbe18c64349e7"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "d762b96d05cf786a86f558e1d23dc4ba5400323e", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -109,11 +109,6 @@ name = \"bitflags\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"bitflags\"\n-version = \"0.8.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"bitflags\"\n version = \"0.9.1\"\n@@ -1318,14 +1313,6 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"pulldown-cmark\"\n-version = \"0.0.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.15\"\n@@ -1945,7 +1932,7 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"html-diff 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2624,7 +2611,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n-\"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5cde24d1b2e2216a726368b2363a273739c91f4e3eb4e0dd12d672d396ad989\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n@@ -2729,7 +2715,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \"checksum procedural-masquerade 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ae21842e88415394f6b6fccf1f4af4c98a5bfb3eab92188f2e83409cda0c995\"\n \"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n-\"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n \"checksum pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a656fdb8b6848f896df5e478a0eb9083681663e37dcb77dd16981ff65329fe8b\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\""}, {"sha": "b5d51598fab882009004091425de1e8fe7c5472e", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -136,9 +136,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         let subcommand = match subcommand {\n             Some(s) => s,\n             None => {\n-                // No subcommand -- show the general usage and subcommand help\n+                // No or an invalid subcommand -- show the general usage and subcommand help\n+                // An exit code will be 0 when no subcommand is given, and 1 in case of an invalid\n+                // subcommand.\n                 println!(\"{}\\n\", subcommand_help);\n-                process::exit(1);\n+                let exit_code = if args.is_empty() { 0 } else { 1 };\n+                process::exit(exit_code);\n             }\n         };\n "}, {"sha": "70c7c110b786a9569effe2e359764357b228e527", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -15,8 +15,8 @@ For example:\n ```rust,compile_fail\n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an \\\n-                          iterator over elements of type `{A}`\"]\n+#[rustc_on_unimplemented=\"an iterator over elements of type `{A}` \\\n+    cannot be built from a collection of type `{Self}`\"]\n trait MyIterator<A> {\n     fn next(&mut self) -> A;\n }\n@@ -37,9 +37,9 @@ error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n   --> <anon>:14:5\n    |\n 14 |     iterate_chars(&[1, 2, 3][..]);\n-   |     ^^^^^^^^^^^^^ the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   |     ^^^^^^^^^^^^^ an iterator over elements of type `char` cannot be built from a collection of type `&[{integer}]`\n    |\n-   = note: a collection of type `&[{integer}]` cannot be built from an iterator over elements of type `char`\n+   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n    = note: required by `iterate_chars`\n \n error: aborting due to previous error"}, {"sha": "2b6e1d855680d36e4689414f728db3ed0ad5be6f", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -401,16 +401,6 @@ fn bar(x: &str, y: &str) -> &str { }\n fn baz<'a>(x: &'a str, y: &str) -> &str { }\n ```\n \n-Here's an example that is currently an error, but may work in a future version\n-of Rust:\n-\n-```compile_fail,E0106\n-struct Foo<'a>(&'a str);\n-\n-trait Quux { }\n-impl Quux for Foo { }\n-```\n-\n Lifetime elision in implementation headers was part of the lifetime elision\n RFC. It is, however, [currently unimplemented][iss15872].\n \n@@ -1875,7 +1865,7 @@ fn main() {\n \"##,\n \n E0601: r##\"\n-No `main` function was found in a binary crate. To fix this error, just add a\n+No `main` function was found in a binary crate. To fix this error, add a\n `main` function. For example:\n \n ```"}, {"sha": "c87881341daa240a436abc2e844f03417bb052e2", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -776,7 +776,12 @@ pub fn build_session_(sopts: config::Options,\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = Cell::new(0);\n \n-    let working_dir = env::current_dir().unwrap().to_string_lossy().into_owned();\n+    let working_dir = match env::current_dir() {\n+        Ok(dir) => dir.to_string_lossy().into_owned(),\n+        Err(e) => {\n+            panic!(p_s.span_diagnostic.fatal(&format!(\"Current directory is invalid: {}\", e)))\n+        }\n+    };\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n \n     let sess = Session {"}, {"sha": "988cc0843358895b1ca23a01feaec46f1c2da017", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n-pulldown-cmark = { version = \"0.0.14\", default-features = false }\n+pulldown-cmark = { version = \"0.1.0\", default-features = false }\n html-diff = \"0.0.4\"\n \n [build-dependencies]"}, {"sha": "001e773098eb36b91c4761ec60ec5a957d94583e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -371,7 +371,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n             match self.inner.next() {\n                 Some(Event::FootnoteReference(ref reference)) => {\n                     let entry = self.get_entry(&reference);\n-                    let reference = format!(\"<sup id=\\\"supref{0}\\\"><a href=\\\"#ref{0}\\\">{0}\\\n+                    let reference = format!(\"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}\\\n                                              </a></sup>\",\n                                             (*entry).1);\n                     return Some(Event::Html(reference.into()));\n@@ -394,15 +394,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n                         v.sort_by(|a, b| a.1.cmp(&b.1));\n                         let mut ret = String::from(\"<div class=\\\"footnotes\\\"><hr><ol>\");\n                         for (mut content, id) in v {\n-                            write!(ret, \"<li id=\\\"ref{}\\\">\", id).unwrap();\n+                            write!(ret, \"<li id=\\\"fn{}\\\">\", id).unwrap();\n                             let mut is_paragraph = false;\n                             if let Some(&Event::End(Tag::Paragraph)) = content.last() {\n                                 content.pop();\n                                 is_paragraph = true;\n                             }\n                             html::push_html(&mut ret, content.into_iter());\n                             write!(ret,\n-                                   \"&nbsp;<a href=\\\"#supref{}\\\" rev=\\\"footnote\\\">\u21a9</a>\",\n+                                   \"&nbsp;<a href=\\\"#fnref{}\\\" rev=\\\"footnote\\\">\u21a9</a>\",\n                                    id).unwrap();\n                             if is_paragraph {\n                                 ret.push_str(\"</p>\");"}, {"sha": "84ceaa659510f0790bed3217c0c95dc4806d94e8", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da9a5e178e28b2e387e6296aa1b0289acdf5781/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=7da9a5e178e28b2e387e6296aa1b0289acdf5781", "patch": "@@ -721,16 +721,45 @@ impl UdpSocket {\n \n     /// Moves this UDP socket into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in `recv`, `recv_from`, `send`, and `send_to`\n+    /// operations becoming nonblocking, i.e. immediately returning from their\n+    /// calls. If the IO operation is successful, `Ok` is returned and no\n+    /// further action is required. If the IO operation could not be completed\n+    /// and needs to be retried, an error with kind\n+    /// [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     ///\n     /// # Examples\n     ///\n+    /// Create a UDP socket bound to `127.0.0.1:7878` and read bytes in\n+    /// nonblocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io;\n     /// use std::net::UdpSocket;\n     ///\n-    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n-    /// socket.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:7878\").unwrap();\n+    /// socket.set_nonblocking(true).unwrap();\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// let mut buf = [0; 10];\n+    /// let (num_bytes_read, _) = loop {\n+    ///     match socket.recv_from(&mut buf) {\n+    ///         Ok(n) => break n,\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     }\n+    /// };\n+    /// println!(\"bytes: {:?}\", &buf[..num_bytes_read]);\n     /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {"}]}