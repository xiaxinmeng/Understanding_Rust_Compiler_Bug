{"sha": "68d5fddeef34a8b045da4f009da55364ba05f444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDVmZGRlZWYzNGE4YjA0NWRhNGYwMDlkYTU1MzY0YmEwNWY0NDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T10:24:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-26T10:24:54Z"}, "message": "Rollup merge of #54816 - oli-obk:double_promotion, r=alexreg\n\nDon't try to promote already promoted out temporaries\n\nfixes #53201\n\nr? @eddyb", "tree": {"sha": "3a334b22f03983fe615b77160e28710429d48ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a334b22f03983fe615b77160e28710429d48ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d5fddeef34a8b045da4f009da55364ba05f444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0ut2CRBK7hj4Ov3rIwAAdHIIAIM7m759MxVNNTU3mYZxMoBY\nYspp5iTYVLA1EhW193Zbfpk/TCJexEKty5qVyxm2ZCmLoDdAkuDpbHiGeyra9ONi\nVzLdv2lk1DK2AbOgNhqY3UlFeAI5+Vn3y/aQRZo3mrYMS1FMGisatyaWwPF2R4jK\nUCs9n5oGDjNECqMHShQErdBVjkXk850ia87BgYDY400qPcapKD2AMFQzH5ZYJ6ZB\nCZr19QHqIGlhtaiP10g1BXoUTx56V1mitVqo7kSH59Q8gcnc2ZBW+KgzS0z0mBPW\nWFkkxj809EY4h2caWFbRSadNFfVsUQS67GfPrAzYqQSckEcaWdthDXwq3ooL7Vc=\n=rvBV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a334b22f03983fe615b77160e28710429d48ec5\nparent 82239b04dc9cea1d54422c2fb223ff5321ccafdd\nparent fd77500ed1d12dfdffff95e65530c2806a324f22\nauthor kennytm <kennytm@gmail.com> 1540549494 +0800\ncommitter GitHub <noreply@github.com> 1540549494 +0800\n\nRollup merge of #54816 - oli-obk:double_promotion, r=alexreg\n\nDon't try to promote already promoted out temporaries\n\nfixes #53201\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d5fddeef34a8b045da4f009da55364ba05f444", "html_url": "https://github.com/rust-lang/rust/commit/68d5fddeef34a8b045da4f009da55364ba05f444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d5fddeef34a8b045da4f009da55364ba05f444/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82239b04dc9cea1d54422c2fb223ff5321ccafdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/82239b04dc9cea1d54422c2fb223ff5321ccafdd", "html_url": "https://github.com/rust-lang/rust/commit/82239b04dc9cea1d54422c2fb223ff5321ccafdd"}, {"sha": "fd77500ed1d12dfdffff95e65530c2806a324f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd77500ed1d12dfdffff95e65530c2806a324f22", "html_url": "https://github.com/rust-lang/rust/commit/fd77500ed1d12dfdffff95e65530c2806a324f22"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "5114fa879746b0a0f64369310abc772d452cd882", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=68d5fddeef34a8b045da4f009da55364ba05f444", "patch": "@@ -333,6 +333,14 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let operand = Operand::Copy(promoted_place(ty, span));\n                             mem::replace(&mut args[index], operand)\n                         }\n+                        // We expected a `TerminatorKind::Call` for which we'd like to promote an\n+                        // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but\n+                        // we are seeing a `Goto`. That means that the `promote_temps` method\n+                        // already promoted this call away entirely. This case occurs when calling\n+                        // a function requiring a constant argument and as that constant value\n+                        // providing a value whose computation contains another call to a function\n+                        // requiring a constant argument.\n+                        TerminatorKind::Goto { .. } => return,\n                         _ => bug!()\n                     }\n                 }"}, {"sha": "c4d8ec35868835d50892a5d3a422e5a537878bfd", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=68d5fddeef34a8b045da4f009da55364ba05f444", "patch": "@@ -820,7 +820,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n             let mut callee_def_id = None;\n-            let (mut is_shuffle, mut is_const_fn) = (false, false);\n+            let mut is_shuffle = false;\n+            let mut is_const_fn = false;\n+            let mut is_promotable_const_fn = false;\n             if let ty::FnDef(def_id, _) = fn_ty.sty {\n                 callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n@@ -881,6 +883,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             // functions without #[rustc_promotable]\n                             if self.tcx.is_promotable_const_fn(def_id) {\n                                 is_const_fn = true;\n+                                is_promotable_const_fn = true;\n+                            } else if self.tcx.is_const_fn(def_id) {\n+                                is_const_fn = true;\n                             }\n                         } else {\n                             // stable const fn or unstable const fns with their feature gate\n@@ -982,7 +987,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if !constant_arguments.contains(&i) {\n                         return\n                     }\n-                    if this.qualif.is_empty() {\n+                    // Since the argument is required to be constant,\n+                    // we care about constness, not promotability.\n+                    // If we checked for promotability, we'd miss out on\n+                    // the results of function calls (which are never promoted\n+                    // in runtime code)\n+                    // This is not a problem, because the argument explicitly\n+                    // requests constness, in contrast to regular promotion\n+                    // which happens even without the user requesting it.\n+                    // We can error out with a hard error if the argument is not\n+                    // constant here.\n+                    if (this.qualif - Qualif::NOT_PROMOTABLE).is_empty() {\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,\n@@ -1011,7 +1026,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // Be conservative about the returned value of a const fn.\n                     let tcx = self.tcx;\n                     let ty = dest.ty(self.mir, tcx).to_ty(tcx);\n-                    self.qualif = Qualif::empty();\n+                    if is_const_fn && !is_promotable_const_fn && self.mode == Mode::Fn {\n+                        self.qualif = Qualif::NOT_PROMOTABLE;\n+                    } else {\n+                        self.qualif = Qualif::empty();\n+                    }\n                     self.add_type(ty);\n                 }\n                 self.assign(dest, location);"}, {"sha": "0e75ea8e66b3cd409024c154cae295f041a60bae", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d5fddeef34a8b045da4f009da55364ba05f444/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=68d5fddeef34a8b045da4f009da55364ba05f444", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![feature(const_fn, rustc_attrs)]\n+\n+#[rustc_args_required_const(0)]\n+pub const fn a(value: u8) -> u8 {\n+    value\n+}\n+\n+#[rustc_args_required_const(0)]\n+pub fn b(_: u8) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let _ = b(a(0));\n+}"}]}