{"sha": "f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2N2MzZTRiMmE5Mzg5MmI5Mzg0ZjEzY2NiZjdlYmQyOWU0ZTdlMjk=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-06-01T09:25:51Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-06-01T09:25:51Z"}, "message": "Make use of new `outer_expn_info()` function", "tree": {"sha": "d908422b12c9c9ca698e208913dd4422342ba63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d908422b12c9c9ca698e208913dd4422342ba63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "html_url": "https://github.com/rust-lang/rust/commit/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3087c37bf5d8491b72ce007b65a47c2d3c2e733", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3087c37bf5d8491b72ce007b65a47c2d3c2e733", "html_url": "https://github.com/rust-lang/rust/commit/f3087c37bf5d8491b72ce007b65a47c2d3c2e733"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "57751a03f5f0c7ec8e1ea83a1a0c6ebf439310fd", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -594,8 +594,7 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n fn in_attributes_expansion(expr: &Expr) -> bool {\n     expr.span\n         .ctxt()\n-        .outer()\n-        .expn_info()\n+        .outer_expn_info()\n         .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n }\n "}, {"sha": "bee1ec46f553e42b1c32019255cb4c0b6dc8ff91", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -69,8 +69,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n \n fn get_outer_span(expr: &Expr) -> Span {\n     if_chain! {\n-        if let Some(first) = expr.span.ctxt().outer().expn_info();\n-        if let Some(second) = first.call_site.ctxt().outer().expn_info();\n+        if let Some(first) = expr.span.ctxt().outer_expn_info();\n+        if let Some(second) = first.call_site.ctxt().outer_expn_info();\n         then {\n             second.call_site\n         } else {"}, {"sha": "af2342634a11ea35d7b0f4b16f7a6f184f0575cf", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -148,8 +148,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n             then {\n                 let span = expr.span\n                     .ctxt()\n-                    .outer()\n-                    .expn_info()\n+                    .outer_expn_info()\n                     .map_or(expr.span, |info| info.call_site);\n                 span_lint_and_then(\n                     cx,"}, {"sha": "41cf012ac879fa85217fa0ff24d2532bcdf385e1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -272,7 +272,7 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer().expn_info().and_then(|info| info.def_site)\n+    span.ctxt().outer_expn_info().and_then(|info| info.def_site)\n }\n \n // is this expr a `()` unit?"}, {"sha": "e8b2743bcf47e6cfa52631aec1846633c00a306b", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -156,8 +156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             // actual span that invoked `declare_tool_lint!`:\n             let lint_span = lint_span\n                 .ctxt()\n-                .outer()\n-                .expn_info()\n+                .outer_expn_info()\n                 .map(|ei| ei.call_site)\n                 .expect(\"unable to get call_site\");\n "}, {"sha": "5fa5eeaae768da5ae531cf902fb5b0f89be9cb70", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -94,12 +94,12 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n \n /// Returns `true` if this `expn_info` was expanded by any macro or desugaring\n pub fn in_macro_or_desugar(span: Span) -> bool {\n-    span.ctxt().outer().expn_info().is_some()\n+    span.ctxt().outer_expn_info().is_some()\n }\n \n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n-    if let Some(info) = span.ctxt().outer().expn_info() {\n+    if let Some(info) = span.ctxt().outer_expn_info() {\n         if let ExpnFormat::CompilerDesugaring(..) = info.format {\n             false\n         } else {\n@@ -691,11 +691,7 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span\n-            .ctxt()\n-            .outer()\n-            .expn_info()\n-            .map(|ei| (ei.format.name(), ei.call_site));\n+        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n@@ -715,11 +711,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span\n-        .ctxt()\n-        .outer()\n-        .expn_info()\n-        .map(|ei| (ei.format.name(), ei.call_site));\n+    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),"}, {"sha": "c9a2eecd509cf086a02285929eccdf42578add4e", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=f67c3e4b2a93892b9384f13ccbf7ebd29e4e7e29", "patch": "@@ -49,13 +49,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n                 // report the error around the `vec!` not inside `<std macros>:`\n                 let span = arg.span\n                     .ctxt()\n-                    .outer()\n-                    .expn_info()\n+                    .outer_expn_info()\n                     .map(|info| info.call_site)\n                     .expect(\"unable to get call_site\")\n                     .ctxt()\n-                    .outer()\n-                    .expn_info()\n+                    .outer_expn_info()\n                     .map(|info| info.call_site)\n                     .expect(\"unable to get call_site\");\n                 check_vec_macro(cx, &vec_args, span);"}]}