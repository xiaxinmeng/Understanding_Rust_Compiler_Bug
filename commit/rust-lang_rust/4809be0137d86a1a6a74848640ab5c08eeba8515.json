{"sha": "4809be0137d86a1a6a74848640ab5c08eeba8515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDliZTAxMzdkODZhMWE2YTc0ODQ4NjQwYWI1YzA4ZWViYTg1MTU=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-03-05T15:31:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T06:26:27Z"}, "message": "rustc_errors: Use ensure_source_file_source_present where necessary.", "tree": {"sha": "098bf6eeeb0452decfb46ad2f24cbcb7e702ac65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098bf6eeeb0452decfb46ad2f24cbcb7e702ac65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4809be0137d86a1a6a74848640ab5c08eeba8515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4809be0137d86a1a6a74848640ab5c08eeba8515", "html_url": "https://github.com/rust-lang/rust/commit/4809be0137d86a1a6a74848640ab5c08eeba8515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4809be0137d86a1a6a74848640ab5c08eeba8515/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2d4236eb311b80407678b0527b810ecdd335b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2d4236eb311b80407678b0527b810ecdd335b7", "html_url": "https://github.com/rust-lang/rust/commit/cf2d4236eb311b80407678b0527b810ecdd335b7"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "03f83e616365b19c1c5e433d864d12f51bfceab9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -422,9 +422,11 @@ pub trait Emitter {\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n-        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+        debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n+        for span in iter::once(&mut *span).chain(children.iter_mut().map(|child| &mut child.span)) {\n             self.fix_multispan_in_extern_macros(source_map, span);\n         }\n+        debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n     // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n@@ -472,6 +474,7 @@ impl Emitter for EmitterWriter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n+        debug!(\"emit_diagnostic: suggestions={:?}\", suggestions);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.sm,\n@@ -1533,6 +1536,7 @@ impl EmitterWriter {\n \n         // Render the replacements for each suggestion\n         let suggestions = suggestion.splice_lines(&**sm);\n+        debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n \n         if suggestions.is_empty() {\n             // Suggestions coming from macros can have malformed spans. This is a heavy handed"}, {"sha": "1382825922b0edff9bc5526337fc70d5c5ec4bfd", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -394,6 +394,11 @@ impl DiagnosticSpanLine {\n         je.sm\n             .span_to_lines(span)\n             .map(|lines| {\n+                // We can't get any lines if the source is unavailable.\n+                if !je.sm.ensure_source_file_source_present(lines.file.clone()) {\n+                    return vec![];\n+                }\n+\n                 let sf = &*lines.file;\n                 lines\n                     .lines"}, {"sha": "bed26c3736b83978dd485f1796f26a9bccef00d2", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -196,6 +196,11 @@ impl CodeSuggestion {\n                 let lines = sm.span_to_lines(bounding_span).ok()?;\n                 assert!(!lines.lines.is_empty());\n \n+                // We can't splice anything if the source is unavailable.\n+                if !sm.ensure_source_file_source_present(lines.file.clone()) {\n+                    return None;\n+                }\n+\n                 // To build up the result, we do this for each span:\n                 // - push the line segment trailing the previous span\n                 //   (at the beginning a \"phantom\" span pointing at the start of the line)"}, {"sha": "dda9ddf1f487f3faf715b326f96b50d0a0712f9f", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:355:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:360:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}, {"sha": "88a1f5dc6736d96efb6bebf20eb43fdd57fcd467", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | r#async\n-   |\n+LL |     () => (pub fn r#async() {})\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5eaa1d03a4a5f491dfe2d5bd3b5f8089f61d1d34", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4809be0137d86a1a6a74848640ab5c08eeba8515/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=4809be0137d86a1a6a74848640ab5c08eeba8515", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | r#async\n-   |\n+LL |     () => (pub fn r#async() {})\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}]}