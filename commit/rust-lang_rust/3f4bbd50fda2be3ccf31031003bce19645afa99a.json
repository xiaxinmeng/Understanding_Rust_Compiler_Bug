{"sha": "3f4bbd50fda2be3ccf31031003bce19645afa99a", "node_id": "C_kwDOAAsO6NoAKDNmNGJiZDUwZmRhMmJlM2NjZjMxMDMxMDAzYmNlMTk2NDVhZmE5OWE", "commit": {"author": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2022-04-11T16:16:10Z"}, "committer": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2022-04-11T16:16:51Z"}, "message": "Fix documentation for wasm32-unknown-unknown", "tree": {"sha": "9875a6310982822c4dbbb80ecfeb3dbf1873d22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9875a6310982822c4dbbb80ecfeb3dbf1873d22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4bbd50fda2be3ccf31031003bce19645afa99a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQR8+ZhVLwvMOLbIPmiFzB9Jb4YXQAUCYlRUcwAKCRCFzB9Jb4YX\nQJxhAQCAL1OYlLV6yTA6sd5cSIv9eTF6sl0niQ+Yn7y79ddDEwD+Iwajlq9AO6Rw\nJnSdWgEgKZY5ctYmPLBBi6dRc+4xp08=\n=hJxv\n-----END PGP SIGNATURE-----", "payload": "tree 9875a6310982822c4dbbb80ecfeb3dbf1873d22f\nparent 43998d544108b613c4631ed60249880167e8aafc\nauthor O01eg <o01eg@yandex.ru> 1649693770 +0300\ncommitter O01eg <o01eg@yandex.ru> 1649693811 +0300\n\nFix documentation for wasm32-unknown-unknown\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4bbd50fda2be3ccf31031003bce19645afa99a", "html_url": "https://github.com/rust-lang/rust/commit/3f4bbd50fda2be3ccf31031003bce19645afa99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4bbd50fda2be3ccf31031003bce19645afa99a/comments", "author": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43998d544108b613c4631ed60249880167e8aafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/43998d544108b613c4631ed60249880167e8aafc", "html_url": "https://github.com/rust-lang/rust/commit/43998d544108b613c4631ed60249880167e8aafc"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e6013c7c051e5a4b985c505170d1f29ddea99d9c", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f4bbd50fda2be3ccf31031003bce19645afa99a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4bbd50fda2be3ccf31031003bce19645afa99a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=3f4bbd50fda2be3ccf31031003bce19645afa99a", "patch": "@@ -8,7 +8,7 @@ use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-#[cfg(not(any(target_os = \"wasi\", target_env = \"sgx\")))]\n+#[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\")))]\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -76,7 +76,7 @@ impl BorrowedFd<'_> {\n impl OwnedFd {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file handle\n     /// as the existing `OwnedFd` instance.\n-    #[cfg(not(target_os = \"wasi\"))]\n+    #[cfg(not(target_arch = \"wasm32\"))]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         // We want to atomically duplicate this file descriptor and set the\n         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n@@ -95,7 +95,7 @@ impl OwnedFd {\n         Ok(unsafe { Self::from_raw_fd(fd) })\n     }\n \n-    #[cfg(target_os = \"wasi\")]\n+    #[cfg(target_arch = \"wasm32\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         Err(crate::io::const_io_error!(\n             crate::io::ErrorKind::Unsupported,"}, {"sha": "47ee88d97fb9349fba80eb4ab47cfbc5e6895720", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4bbd50fda2be3ccf31031003bce19645afa99a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4bbd50fda2be3ccf31031003bce19645afa99a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=3f4bbd50fda2be3ccf31031003bce19645afa99a", "patch": "@@ -5,7 +5,7 @@\n use crate::fs;\n use crate::io;\n use crate::os::raw;\n-#[cfg(doc)]\n+#[cfg(all(doc, not(target_arch = \"wasm32\")))]\n use crate::os::unix::io::AsFd;\n #[cfg(unix)]\n use crate::os::unix::io::OwnedFd;"}]}