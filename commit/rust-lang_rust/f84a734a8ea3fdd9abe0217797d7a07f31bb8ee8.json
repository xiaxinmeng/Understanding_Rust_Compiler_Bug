{"sha": "f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "node_id": "C_kwDOAAsO6NoAKGY4NGE3MzRhOGVhM2ZkZDlhYmUwMjE3Nzk3ZDdhMDdmMzFiYjhlZTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-07T10:04:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-07T10:04:56Z"}, "message": "Rollup merge of #87614 - notriddle:notriddle-count2len, r=Mark-Simulacrum\n\nRecommend fix `count()` -> `len()` on slices\n\nFixes #87302", "tree": {"sha": "33ba9bdc1652a7539b5161de2b4c66b1389e4465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ba9bdc1652a7539b5161de2b4c66b1389e4465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrzHICRBK7hj4Ov3rIwAA0aEIAIjamhw5nlu4Z9NMLkgcs/mU\nJ7tbSha3M2J0Qb/ZQXBIkyLCg9r2UXER/ikZQ3xwDTVUcSWwDwThLUvoLBM2j21F\nzhPzjkBOShw4TY5pLFTbLoh2+d++9P+NJzug49TevCptdQ0sDBpioeZdz/5nZSB3\na1syP3aBm9o5wJsMvqswHMxi7S00NMUL63KBrDk1Atx+cmQ+rhOMpNcyKtVv3HZx\nIhNGRSdur0Dtt6FeLahBm1uvTZR3D/I0hHt/eRb05/priN+M7wm9cwuFP/ugA5ZD\nOoGdcOmQsy7a6482rd2cz5lemxVvNRSmIoKSN9BcsxMMyVDhOyI39tih0oOf41w=\n=O6RI\n-----END PGP SIGNATURE-----\n", "payload": "tree 33ba9bdc1652a7539b5161de2b4c66b1389e4465\nparent 2af5c6562deed1878000e791f2cb21b981a53959\nparent 6a17ee6d4125c0c35147b16ebcf54e34f0cdc87a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638871496 +0100\ncommitter GitHub <noreply@github.com> 1638871496 +0100\n\nRollup merge of #87614 - notriddle:notriddle-count2len, r=Mark-Simulacrum\n\nRecommend fix `count()` -> `len()` on slices\n\nFixes #87302\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "html_url": "https://github.com/rust-lang/rust/commit/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af5c6562deed1878000e791f2cb21b981a53959", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af5c6562deed1878000e791f2cb21b981a53959", "html_url": "https://github.com/rust-lang/rust/commit/2af5c6562deed1878000e791f2cb21b981a53959"}, {"sha": "6a17ee6d4125c0c35147b16ebcf54e34f0cdc87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a17ee6d4125c0c35147b16ebcf54e34f0cdc87a", "html_url": "https://github.com/rust-lang/rust/commit/6a17ee6d4125c0c35147b16ebcf54e34f0cdc87a"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "49947cc1fa45493d37ba405d77a9ad4196463589", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "patch": "@@ -499,6 +499,7 @@ symbols! {\n         core_panic_macro,\n         cosf32,\n         cosf64,\n+        count,\n         cr,\n         crate_id,\n         crate_in_paths,"}, {"sha": "ad38885dbd8bdf86c917b28e814faf8872a36b0e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "patch": "@@ -67,6 +67,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn is_slice_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n+        self.autoderef(span, ty).any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n+    }\n+\n     pub fn report_method_error(\n         &self,\n         mut span: Span,\n@@ -691,7 +695,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let mut restrict_type_params = false;\n                 let mut unsatisfied_bounds = false;\n-                if !unsatisfied_predicates.is_empty() {\n+                if item_name.name == sym::count && self.is_slice_ty(actual, span) {\n+                    let msg = \"consider using `len` instead\";\n+                    if let SelfSource::MethodCall(_expr) = source {\n+                        err.span_suggestion_short(\n+                            span,\n+                            msg,\n+                            String::from(\"len\"),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_label(span, msg);\n+                    }\n+                    if let Some(iterator_trait) = self.tcx.get_diagnostic_item(sym::Iterator) {\n+                        let iterator_trait = self.tcx.def_path_str(iterator_trait);\n+                        err.note(&format!(\"`count` is defined on `{iterator_trait}`, which `{actual}` does not implement\"));\n+                    }\n+                } else if !unsatisfied_predicates.is_empty() {\n                     let def_span = |def_id| {\n                         self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id))\n                     };\n@@ -990,9 +1010,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let mut fallback_span = true;\n-                let msg = \"remove this method call\";\n                 if item_name.name == sym::as_str && actual.peel_refs().is_str() {\n+                    let msg = \"remove this method call\";\n+                    let mut fallback_span = true;\n                     if let SelfSource::MethodCall(expr) = source {\n                         let call_expr =\n                             self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));"}, {"sha": "f11a789efbc5b16aa6d52d7d44b16f93395fdf6b", "filename": "src/test/ui/suggestions/count2len.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.rs?ref=f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let slice = [1,2,3,4];\n+    let vec = vec![1,2,3,4];\n+\n+    slice.count(); //~ERROR: E0599\n+    vec.count(); //~ERROR: E0599\n+    vec.as_slice().count(); //~ERROR: E0599\n+}"}, {"sha": "6394a84dd47e17a62fe5e24cc98e34d6f11ca4a3", "filename": "src/test/ui/suggestions/count2len.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcount2len.stderr?ref=f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "patch": "@@ -0,0 +1,36 @@\n+error[E0599]: no method named `count` found for array `[{integer}; 4]` in the current scope\n+  --> $DIR/count2len.rs:5:11\n+   |\n+LL |     slice.count();\n+   |           ^^^^^\n+   |           |\n+   |           method cannot be called on `[{integer}; 4]` due to unsatisfied trait bounds\n+   |           help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `[{integer}; 4]` does not implement\n+\n+error[E0599]: no method named `count` found for struct `Vec<{integer}>` in the current scope\n+  --> $DIR/count2len.rs:6:9\n+   |\n+LL |     vec.count();\n+   |         ^^^^^\n+   |         |\n+   |         method cannot be called on `Vec<{integer}>` due to unsatisfied trait bounds\n+   |         help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `Vec<{integer}>` does not implement\n+\n+error[E0599]: no method named `count` found for reference `&[{integer}]` in the current scope\n+  --> $DIR/count2len.rs:7:20\n+   |\n+LL |     vec.as_slice().count();\n+   |                    ^^^^^\n+   |                    |\n+   |                    method cannot be called on `&[{integer}]` due to unsatisfied trait bounds\n+   |                    help: consider using `len` instead\n+   |\n+   = note: `count` is defined on `Iterator`, which `&[{integer}]` does not implement\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}