{"sha": "fb72c4767fa423649feeb197b50385c1fa0a6fd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNzJjNDc2N2ZhNDIzNjQ5ZmVlYjE5N2I1MDM4NWMxZmEwYTZmZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T21:41:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T21:41:14Z"}, "message": "auto merge of #15611 : brson/rust/pushpop, r=alexcrichton\n\nThis fixes naming conventions for `push`/`pop` from either end of a structure by partially implementing @erickt's suggestion from https://github.com/rust-lang/rust/issues/10852#issuecomment-30823343, namely:\r\n\r\n* push/pop from the 'back' are called `push` and `pop`.\r\n* push/pop from the 'front' are called `push_front` and `pop_front`.\r\n* `push`/`pop` are declared on the `MutableSeq` trait.\r\n* Implement `MutableSeq` for `Vec`, `DList`, and `RingBuf`.\r\n* Add `MutableSeq` to the prelude.\r\n\r\nI did not make any further refactorings because there is some more extensive thought that needs to be put into the collections traits. This is an easy first step that should close https://github.com/rust-lang/rust/issues/10852.\r\n\r\nI left the `push_back` and `pop_back` methods on `DList` and `RingBuf` deprecated. Because `MutableSeq` is in the prelude it shouldn't break many, but it is a breaking change.", "tree": {"sha": "85beee9373b61bc02cc53b94d11fe128e9ab2f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85beee9373b61bc02cc53b94d11fe128e9ab2f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb72c4767fa423649feeb197b50385c1fa0a6fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb72c4767fa423649feeb197b50385c1fa0a6fd5", "html_url": "https://github.com/rust-lang/rust/commit/fb72c4767fa423649feeb197b50385c1fa0a6fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb72c4767fa423649feeb197b50385c1fa0a6fd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a732a3eab60862068b1006973de5924bcda9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a732a3eab60862068b1006973de5924bcda9e2", "html_url": "https://github.com/rust-lang/rust/commit/b3a732a3eab60862068b1006973de5924bcda9e2"}, {"sha": "71a75cc2ce6d6eed2557e6c585e81abcdad86827", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a75cc2ce6d6eed2557e6c585e81abcdad86827", "html_url": "https://github.com/rust-lang/rust/commit/71a75cc2ce6d6eed2557e6c585e81abcdad86827"}], "stats": {"total": 449, "additions": 212, "deletions": 237}, "files": [{"sha": "6720b9a530f230c509df0c17ba6d09fa4d30e336", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -1178,7 +1178,7 @@ fn make_run_args(config: &Config, props: &TestProps, testfile: &Path) ->\n     // Add the arguments in the run_flags directive\n     args.push_all_move(split_maybe_args(&props.run_flags));\n \n-    let prog = args.shift().unwrap();\n+    let prog = args.remove(0).unwrap();\n     return ProcArgs {\n         prog: prog,\n         args: args,"}, {"sha": "0204d42a726ffa8e2aa464ea8f8422f7dee2e0cb", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -100,7 +100,7 @@ syn keyword rustTrait Clone\n syn keyword rustTrait PartialEq PartialOrd Eq Ord Equiv\n syn keyword rustEnum Ordering\n syn keyword rustEnumVariant Less Equal Greater\n-syn keyword rustTrait Collection Mutable Map MutableMap\n+syn keyword rustTrait Collection Mutable Map MutableMap MutableSeq\n syn keyword rustTrait Set MutableSet\n syn keyword rustTrait FromIterator Extendable ExactSize\n syn keyword rustTrait Iterator DoubleEndedIterator"}, {"sha": "27174de8e7416ae7c277ad99fdd3388492241655", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -268,6 +268,7 @@ impl<T: Share + Send> Drop for Weak<T> {\n #[allow(experimental)]\n mod tests {\n     use std::clone::Clone;\n+    use std::collections::MutableSeq;\n     use std::comm::channel;\n     use std::mem::drop;\n     use std::ops::Drop;"}, {"sha": "44af3d52db982393c6e66d7fd2a00311eab24dde", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -72,7 +72,7 @@ use core::slice;\n use core::uint;\n use std::hash;\n \n-use {Collection, Mutable, Set, MutableSet};\n+use {Collection, Mutable, Set, MutableSet, MutableSeq};\n use vec::Vec;\n \n \n@@ -1574,7 +1574,7 @@ mod tests {\n     use std::rand::Rng;\n     use test::Bencher;\n \n-    use {Set, Mutable, MutableSet};\n+    use {Set, Mutable, MutableSet, MutableSeq};\n     use bitv::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n     use vec::Vec;"}, {"sha": "947c87daa846021dcd9d896984ba6d0c15ccea63", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -24,7 +24,7 @@ use alloc::boxed::Box;\n use core::fmt;\n use core::fmt::Show;\n \n-use Collection;\n+use {Collection, MutableSeq};\n use vec::Vec;\n \n #[allow(missing_doc)]\n@@ -782,6 +782,8 @@ mod test_btree {\n \n     use super::{BTree, Node, LeafElt};\n \n+    use MutableSeq;\n+\n     //Tests the functionality of the insert methods (which are unfinished).\n     #[test]\n     fn insert_test_one() {"}, {"sha": "68b6416b69bf5c16142775cd1cbfd81b8f2d2634", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -30,7 +30,7 @@ use core::iter;\n use core::mem;\n use core::ptr;\n \n-use {Collection, Mutable, Deque};\n+use {Collection, Mutable, Deque, MutableSeq};\n \n /// A doubly-linked list.\n pub struct DList<T> {\n@@ -249,18 +249,13 @@ impl<T> Deque<T> for DList<T> {\n     fn pop_front(&mut self) -> Option<T> {\n         self.pop_front_node().map(|box Node{value, ..}| value)\n     }\n+}\n \n-    /// Add an element last in the list\n-    ///\n-    /// O(1)\n-    fn push_back(&mut self, elt: T) {\n+impl<T> MutableSeq<T> for DList<T> {\n+    fn push(&mut self, elt: T) {\n         self.push_back_node(box Node::new(elt))\n     }\n-\n-    /// Remove the last element and return it, or None if the list is empty\n-    ///\n-    /// O(1)\n-    fn pop_back(&mut self) -> Option<T> {\n+    fn pop(&mut self) -> Option<T> {\n         self.pop_back_node().map(|box Node{value, ..}| value)\n     }\n }\n@@ -284,12 +279,12 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut dl = DList::new();\n-    /// dl.push_back(1i);\n-    /// dl.push_back(2);\n-    /// dl.push_back(3);\n+    /// dl.push(1i);\n+    /// dl.push(2);\n+    /// dl.push(3);\n     ///\n     /// dl.rotate_forward();\n     ///\n@@ -311,12 +306,12 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut dl = DList::new();\n-    /// dl.push_back(1i);\n-    /// dl.push_back(2);\n-    /// dl.push_back(3);\n+    /// dl.push(1i);\n+    /// dl.push(2);\n+    /// dl.push(3);\n     ///\n     /// dl.rotate_backward();\n     ///\n@@ -338,14 +333,14 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a = DList::new();\n     /// let mut b = DList::new();\n-    /// a.push_back(1i);\n-    /// a.push_back(2);\n-    /// b.push_back(3i);\n-    /// b.push_back(4);\n+    /// a.push(1i);\n+    /// a.push(2);\n+    /// b.push(3i);\n+    /// b.push(4);\n     ///\n     /// a.append(b);\n     ///\n@@ -379,14 +374,14 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a = DList::new();\n     /// let mut b = DList::new();\n-    /// a.push_back(1i);\n-    /// a.push_back(2);\n-    /// b.push_back(3i);\n-    /// b.push_back(4);\n+    /// a.push(1i);\n+    /// a.push(2);\n+    /// b.push(3i);\n+    /// b.push(4);\n     ///\n     /// a.prepend(b);\n     ///\n@@ -408,13 +403,13 @@ impl<T> DList<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::collections::{DList, Deque};\n+    /// use std::collections::DList;\n     ///\n     /// let mut a: DList<int> = DList::new();\n-    /// a.push_back(2i);\n-    /// a.push_back(4);\n-    /// a.push_back(7);\n-    /// a.push_back(8);\n+    /// a.push(2i);\n+    /// a.push(4);\n+    /// a.push(7);\n+    /// a.push(8);\n     ///\n     /// // insert 11 before the first odd number in the list\n     /// a.insert_when(11, |&e, _| e % 2 == 1);\n@@ -719,7 +714,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use Deque;\n+    use {Deque, MutableSeq};\n     use super::{DList, Node, ListInsertion};\n     use vec::Vec;\n "}, {"sha": "ca3f6a746f3354dd5ed2328f235840ad0e18e51a", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -141,6 +141,8 @@ mod test {\n \n     use enum_set::{EnumSet, CLike};\n \n+    use MutableSeq;\n+\n     #[deriving(PartialEq, Show)]\n     #[repr(uint)]\n     enum Foo {"}, {"sha": "485dc8c5959b74f3d5dae4650bd8451e8398fbcb", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -281,6 +281,8 @@ mod tests {\n     use super::super::{Hash, Writer};\n     use super::{SipState, hash, hash_with_keys};\n \n+    use MutableSeq;\n+\n     // Hash just the bytes of the slice, without length prefix\n     struct Bytes<'a>(&'a [u8]);\n "}, {"sha": "d2d8ad696d7c5e4f77ecaab8c1a94fc19a8cc2ce", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -325,6 +325,30 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n     fn remove(&mut self, value: &T) -> bool;\n }\n \n+pub trait MutableSeq<T>: Mutable {\n+    /// Append an element to the back of a collection.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2);\n+    /// vec.push(3);\n+    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// ```\n+    fn push(&mut self, t: T);\n+    /// Remove the last element from a collection and return it, or `None` if it is\n+    /// empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2, 3);\n+    /// assert_eq!(vec.pop(), Some(3));\n+    /// assert_eq!(vec, vec!(1, 2));\n+    /// ```\n+    fn pop(&mut self) -> Option<T>;\n+}\n+\n /// A double-ended sequence that allows querying, insertion and deletion at both\n /// ends.\n ///\n@@ -336,9 +360,9 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n /// use std::collections::{RingBuf, Deque};\n ///\n /// let mut queue = RingBuf::new();\n-/// queue.push_back(1i);\n-/// queue.push_back(2i);\n-/// queue.push_back(3i);\n+/// queue.push(1i);\n+/// queue.push(2i);\n+/// queue.push(3i);\n ///\n /// // Will print 1, 2, 3\n /// while !queue.is_empty() {\n@@ -374,17 +398,17 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n /// // Init deque with 1, 2, 3, 4\n /// deque.push_front(2i);\n /// deque.push_front(1i);\n-/// deque.push_back(3i);\n-/// deque.push_back(4i);\n+/// deque.push(3i);\n+/// deque.push(4i);\n ///\n /// // Will print (1, 4) and (2, 3)\n /// while !deque.is_empty() {\n ///     let f = deque.pop_front().unwrap();\n-///     let b = deque.pop_back().unwrap();\n+///     let b = deque.pop().unwrap();\n ///     println!(\"{}\", (f, b));\n /// }\n /// ```\n-pub trait Deque<T> : Mutable {\n+pub trait Deque<T> : MutableSeq<T> {\n     /// Provide a reference to the front element, or `None` if the sequence is\n     /// empty.\n     ///\n@@ -396,8 +420,8 @@ pub trait Deque<T> : Mutable {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// assert_eq!(d.front(), Some(&1i));\n     /// ```\n     fn front<'a>(&'a self) -> Option<&'a T>;\n@@ -413,8 +437,8 @@ pub trait Deque<T> : Mutable {\n     /// let mut d = RingBuf::new();\n     /// assert_eq!(d.front_mut(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// match d.front_mut() {\n     ///     Some(x) => *x = 9i,\n     ///     None => (),\n@@ -434,8 +458,8 @@ pub trait Deque<T> : Mutable {\n     /// let mut d = DList::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// assert_eq!(d.back(), Some(&2i));\n     /// ```\n     fn back<'a>(&'a self) -> Option<&'a T>;\n@@ -451,8 +475,8 @@ pub trait Deque<T> : Mutable {\n     /// let mut d = DList::new();\n     /// assert_eq!(d.back(), None);\n     ///\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     /// match d.back_mut() {\n     ///     Some(x) => *x = 9i,\n     ///     None => (),\n@@ -479,21 +503,22 @@ pub trait Deque<T> : Mutable {\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// use std::collections::{DList, Deque};\n     ///\n     /// let mut d = DList::new();\n     /// d.push_back(1i);\n     /// d.push_back(2i);\n     /// assert_eq!(d.front(), Some(&1i));\n     /// ```\n-    fn push_back(&mut self, elt: T);\n+    #[deprecated = \"use the `push` method\"]\n+    fn push_back(&mut self, elt: T) { self.push(elt) }\n \n     /// Remove the last element and return it, or `None` if the sequence is empty.\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// use std::collections::{RingBuf, Deque};\n     ///\n     /// let mut d = RingBuf::new();\n@@ -504,7 +529,8 @@ pub trait Deque<T> : Mutable {\n     /// assert_eq!(d.pop_back(), Some(1i));\n     /// assert_eq!(d.pop_back(), None);\n     /// ```\n-    fn pop_back(&mut self) -> Option<T>;\n+    #[deprecated = \"use the `pop` method\"]\n+    fn pop_back(&mut self) -> Option<T> { self.pop() }\n \n     /// Remove the first element and return it, or `None` if the sequence is empty.\n     ///\n@@ -514,8 +540,8 @@ pub trait Deque<T> : Mutable {\n     /// use std::collections::{RingBuf, Deque};\n     ///\n     /// let mut d = RingBuf::new();\n-    /// d.push_back(1i);\n-    /// d.push_back(2i);\n+    /// d.push(1i);\n+    /// d.push(2i);\n     ///\n     /// assert_eq!(d.pop_front(), Some(1i));\n     /// assert_eq!(d.pop_front(), Some(2i));\n@@ -535,4 +561,8 @@ mod std {\n     pub use core::clone;    // deriving(Clone)\n     pub use core::cmp;      // deriving(Eq, Ord, etc.)\n     pub use hash;           // deriving(Hash)\n+\n+    pub mod collections {\n+        pub use MutableSeq;\n+    }\n }"}, {"sha": "6e1a3ec1cb6c81d68ff4b7465fe0070fbed29f03", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -154,7 +154,7 @@ use core::default::Default;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use slice;\n use vec::Vec;\n \n@@ -388,6 +388,7 @@ mod tests {\n \n     use priority_queue::PriorityQueue;\n     use vec::Vec;\n+    use MutableSeq;\n \n     #[test]\n     fn test_iterator() {"}, {"sha": "3a4e66b38ae3f17cc033478cb7c7cc244f18b911", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -20,7 +20,7 @@ use core::default::Default;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n \n-use {Deque, Collection, Mutable};\n+use {Deque, Collection, Mutable, MutableSeq};\n use vec::Vec;\n \n static INITIAL_CAPACITY: uint = 8u; // 2^3\n@@ -80,17 +80,6 @@ impl<T> Deque<T> for RingBuf<T> {\n         result\n     }\n \n-    /// Remove and return the last element in the RingBuf, or None if it is empty\n-    fn pop_back(&mut self) -> Option<T> {\n-        if self.nelts > 0 {\n-            self.nelts -= 1;\n-            let hi = self.raw_index(self.nelts);\n-            self.elts.get_mut(hi).take()\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Prepend an element to the RingBuf\n     fn push_front(&mut self, t: T) {\n         if self.nelts == self.elts.len() {\n@@ -102,16 +91,26 @@ impl<T> Deque<T> for RingBuf<T> {\n         *self.elts.get_mut(self.lo) = Some(t);\n         self.nelts += 1u;\n     }\n+}\n \n-    /// Append an element to the RingBuf\n-    fn push_back(&mut self, t: T) {\n+impl<T> MutableSeq<T> for RingBuf<T> {\n+    fn push(&mut self, t: T) {\n         if self.nelts == self.elts.len() {\n             grow(self.nelts, &mut self.lo, &mut self.elts);\n         }\n         let hi = self.raw_index(self.nelts);\n         *self.elts.get_mut(hi) = Some(t);\n         self.nelts += 1u;\n     }\n+    fn pop(&mut self) -> Option<T> {\n+        if self.nelts > 0 {\n+            self.nelts -= 1;\n+            let hi = self.raw_index(self.nelts);\n+            self.elts.get_mut(hi).take()\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl<T> Default for RingBuf<T> {\n@@ -423,7 +422,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use {Deque, Mutable};\n+    use {Deque, Mutable, MutableSeq};\n     use super::RingBuf;\n     use vec::Vec;\n "}, {"sha": "64062dc0ccbf8abc2e4f62adbaf5c7ca923727ab", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -107,7 +107,7 @@ use core::mem;\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};\n \n-use Collection;\n+use {Collection, MutableSeq};\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n@@ -731,7 +731,7 @@ mod tests {\n     use std::rt;\n     use slice::*;\n \n-    use Mutable;\n+    use {Mutable, MutableSeq};\n     use vec::Vec;\n \n     fn square(n: uint) -> uint { n * n }\n@@ -2133,6 +2133,7 @@ mod bench {\n     use test::Bencher;\n \n     use vec::Vec;\n+    use MutableSeq;\n \n     #[bench]\n     fn iterator(b: &mut Bencher) {"}, {"sha": "eb97215c721bc2b38f3345ed05fabfdd04ab4223", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -22,7 +22,7 @@ use core::fmt;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n-use {Collection, Mutable, Map, MutableMap};\n+use {Collection, Mutable, Map, MutableMap, MutableSeq};\n use {vec, slice};\n use vec::Vec;\n "}, {"sha": "c0e903677de354a2155fc23e1d82105e52910c09", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -77,7 +77,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n \n-use Collection;\n+use {Collection, MutableSeq};\n use hash;\n use string::String;\n use unicode;\n@@ -562,6 +562,8 @@ pub mod raw {\n     use string::String;\n     use vec::Vec;\n \n+    use MutableSeq;\n+\n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};\n     pub use core::str::raw::{slice_unchecked};\n \n@@ -818,7 +820,7 @@ mod tests {\n     use std::option::{Some, None};\n     use std::ptr::RawPtr;\n     use std::iter::{Iterator, DoubleEndedIterator};\n-    use Collection;\n+    use {Collection, MutableSeq};\n \n     use super::*;\n     use std::slice::{Vector, ImmutableVector};"}, {"sha": "d58dfdd10d131202ed7f200d1321e8167003daea", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -20,7 +20,7 @@ use core::mem;\n use core::ptr;\n use core::raw::Slice;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use hash;\n use str;\n use str::{CharRange, StrAllocating, MaybeOwned, Owned, Slice};\n@@ -575,7 +575,7 @@ mod tests {\n     use std::prelude::*;\n     use test::Bencher;\n \n-    use Mutable;\n+    use {Mutable, MutableSeq};\n     use str;\n     use str::{Str, StrSlice, Owned, Slice};\n     use super::String;"}, {"sha": "5658d07a1d175dc3daee504a2033d36ecb6e79c7", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -40,7 +40,7 @@ use core::mem::{replace, swap};\n use core::ptr;\n use std::hash::{Writer, Hash};\n \n-use {Collection, Mutable, Set, MutableSet, MutableMap, Map};\n+use {Collection, Mutable, Set, MutableSet, MutableMap, Map, MutableSeq};\n use vec::Vec;\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -1127,7 +1127,7 @@ mod test_treemap {\n     use std::rand::Rng;\n     use std::rand;\n \n-    use {Map, MutableMap, Mutable};\n+    use {Map, MutableMap, Mutable, MutableSeq};\n     use super::{TreeMap, TreeNode};\n \n     #[test]\n@@ -1659,7 +1659,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::hash;\n \n-    use {Set, MutableSet, Mutable, MutableMap};\n+    use {Set, MutableSet, Mutable, MutableMap, MutableSeq};\n     use super::{TreeMap, TreeSet};\n \n     #[test]"}, {"sha": "5a00c4b85daface8f1407c5f6c846d0fabeb9d2a", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -682,7 +682,7 @@ mod test_map {\n     use std::uint;\n     use std::hash;\n \n-    use {MutableMap, Map};\n+    use {MutableMap, Map, MutableSeq};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n \n     fn check_integrity<T>(trie: &TrieNode<T>) {\n@@ -1105,7 +1105,7 @@ mod test_set {\n     use std::prelude::*;\n     use std::uint;\n \n-    use {MutableSet, Set};\n+    use {MutableSet, Set, MutableSeq};\n     use super::TrieSet;\n \n     #[test]"}, {"sha": "dcee92f6dbced22f29859845f33cd66932ca5cc4", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 60, "deletions": 63, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -23,7 +23,7 @@ use core::num;\n use core::ptr;\n use core::uint;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use slice::{MutableOrdVector, MutableVectorAllocating, CloneableVector};\n use slice::{Items, MutItems};\n \n@@ -666,67 +666,6 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it, or `None` if it is\n-    /// empty.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1i, 2, 3];\n-    /// assert_eq!(vec.pop(), Some(3));\n-    /// assert_eq!(vec, vec![1, 2]);\n-    /// ```\n-    #[inline]\n-    pub fn pop(&mut self) -> Option<T> {\n-        if self.len == 0 {\n-            None\n-        } else {\n-            unsafe {\n-                self.len -= 1;\n-                Some(ptr::read(self.as_slice().unsafe_ref(self.len())))\n-            }\n-        }\n-    }\n-\n-    /// Append an element to a vector.\n-    ///\n-    /// # Failure\n-    ///\n-    /// Fails if the number of elements in the vector overflows a `uint`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1i, 2];\n-    /// vec.push(3);\n-    /// assert_eq!(vec, vec![1, 2, 3]);\n-    /// ```\n-    #[inline]\n-    pub fn push(&mut self, value: T) {\n-        if mem::size_of::<T>() == 0 {\n-            // zero-size types consume no memory, so we can't rely on the address space running out\n-            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n-            unsafe { mem::forget(value); }\n-            return\n-        }\n-        if self.len == self.cap {\n-            let old_size = self.cap * mem::size_of::<T>();\n-            let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n-            if old_size > size { fail!(\"capacity overflow\") }\n-            unsafe {\n-                self.ptr = alloc_or_realloc(self.ptr, size,\n-                                            self.cap * mem::size_of::<T>());\n-            }\n-            self.cap = max(self.cap, 2) * 2;\n-        }\n-\n-        unsafe {\n-            let end = (self.ptr as *const T).offset(self.len as int) as *mut T;\n-            ptr::write(&mut *end, value);\n-            self.len += 1;\n-        }\n-    }\n-\n     /// Appends one element to the vector provided. The vector itself is then\n     /// returned for use again.\n     ///\n@@ -1042,12 +981,13 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```\n+    /// ```ignore\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.unshift(4);\n     /// assert_eq!(vec, vec![4, 1, 2, 3]);\n     /// ```\n     #[inline]\n+    #[deprecated = \"use insert(0, ...)\"]\n     pub fn unshift(&mut self, element: T) {\n         self.insert(0, element)\n     }\n@@ -1068,6 +1008,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![2, 3]);\n     /// ```\n     #[inline]\n+    #[deprecated = \"use remove(0)\"]\n     pub fn shift(&mut self) -> Option<T> {\n         self.remove(0)\n     }\n@@ -1615,6 +1556,60 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n     }\n }\n \n+impl<T> MutableSeq<T> for Vec<T> {\n+    /// Append an element to the back of a collection.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the number of elements in the vector overflows a `uint`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2);\n+    /// vec.push(3);\n+    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// ```\n+    #[inline]\n+    fn push(&mut self, value: T) {\n+        if mem::size_of::<T>() == 0 {\n+            // zero-size types consume no memory, so we can't rely on the address space running out\n+            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n+            unsafe { mem::forget(value); }\n+            return\n+        }\n+        if self.len == self.cap {\n+            let old_size = self.cap * mem::size_of::<T>();\n+            let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n+            if old_size > size { fail!(\"capacity overflow\") }\n+            unsafe {\n+                self.ptr = alloc_or_realloc(self.ptr, size,\n+                                            self.cap * mem::size_of::<T>());\n+            }\n+            self.cap = max(self.cap, 2) * 2;\n+        }\n+\n+        unsafe {\n+            let end = (self.ptr as *const T).offset(self.len as int) as *mut T;\n+            ptr::write(&mut *end, value);\n+            self.len += 1;\n+        }\n+    }\n+\n+    #[inline]\n+    fn pop(&mut self) -> Option<T> {\n+        if self.len == 0 {\n+            None\n+        } else {\n+            unsafe {\n+                self.len -= 1;\n+                Some(ptr::read(self.as_slice().unsafe_ref(self.len())))\n+            }\n+        }\n+    }\n+\n+}\n+\n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n     allocation: *mut T, // the block of memory allocated for the vector\n@@ -1704,6 +1699,8 @@ mod tests {\n     use test::Bencher;\n     use super::{unzip, raw, Vec};\n \n+    use MutableSeq;\n+\n     #[test]\n     fn test_small_vec_struct() {\n         assert!(size_of::<Vec<u8>>() == size_of::<uint>() * 3);"}, {"sha": "a1fd62cecbed973514e937e57b57c5e863d8ef26", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -998,7 +998,7 @@ fn concat_flatten(x: Ast, y: Ast) -> Ast {\n     match (x, y) {\n         (Cat(mut xs), Cat(ys)) => { xs.push_all_move(ys); Cat(xs) }\n         (Cat(mut xs), ast) => { xs.push(ast); Cat(xs) }\n-        (ast, Cat(mut xs)) => { xs.unshift(ast); Cat(xs) }\n+        (ast, Cat(mut xs)) => { xs.insert(0, ast); Cat(xs) }\n         (ast1, ast2) => Cat(vec!(ast1, ast2)),\n     }\n }"}, {"sha": "05e5e585a63aba0305792e23421a41f78daf50e5", "filename": "src/librustc/lib/llvmdeps.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b3a732a3eab60862068b1006973de5924bcda9e2/src%2Flibrustc%2Flib%2Fllvmdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a732a3eab60862068b1006973de5924bcda9e2/src%2Flibrustc%2Flib%2Fllvmdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvmdeps.rs?ref=b3a732a3eab60862068b1006973de5924bcda9e2", "patch": "@@ -1,64 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// WARNING: THIS IS A GENERATED FILE, DO NOT MODIFY\n-//          take a look at src/etc/mklldeps.py if you're interested\n-\n-#[cfg(target_arch = \"x86_64\", target_os = \"linux\")]\n-#[link(name = \"LLVMInstrumentation\", kind = \"static\")]\n-#[link(name = \"LLVMInterpreter\", kind = \"static\")]\n-#[link(name = \"LLVMMCJIT\", kind = \"static\")]\n-#[link(name = \"LLVMRuntimeDyld\", kind = \"static\")]\n-#[link(name = \"LLVMJIT\", kind = \"static\")]\n-#[link(name = \"LLVMExecutionEngine\", kind = \"static\")]\n-#[link(name = \"LLVMAsmParser\", kind = \"static\")]\n-#[link(name = \"LLVMLinker\", kind = \"static\")]\n-#[link(name = \"LLVMBitWriter\", kind = \"static\")]\n-#[link(name = \"LLVMipo\", kind = \"static\")]\n-#[link(name = \"LLVMVectorize\", kind = \"static\")]\n-#[link(name = \"LLVMMipsDisassembler\", kind = \"static\")]\n-#[link(name = \"LLVMMipsCodeGen\", kind = \"static\")]\n-#[link(name = \"LLVMMipsAsmParser\", kind = \"static\")]\n-#[link(name = \"LLVMMipsDesc\", kind = \"static\")]\n-#[link(name = \"LLVMMipsInfo\", kind = \"static\")]\n-#[link(name = \"LLVMMipsAsmPrinter\", kind = \"static\")]\n-#[link(name = \"LLVMARMDisassembler\", kind = \"static\")]\n-#[link(name = \"LLVMARMCodeGen\", kind = \"static\")]\n-#[link(name = \"LLVMARMAsmParser\", kind = \"static\")]\n-#[link(name = \"LLVMARMDesc\", kind = \"static\")]\n-#[link(name = \"LLVMARMInfo\", kind = \"static\")]\n-#[link(name = \"LLVMARMAsmPrinter\", kind = \"static\")]\n-#[link(name = \"LLVMX86Disassembler\", kind = \"static\")]\n-#[link(name = \"LLVMX86AsmParser\", kind = \"static\")]\n-#[link(name = \"LLVMX86CodeGen\", kind = \"static\")]\n-#[link(name = \"LLVMSelectionDAG\", kind = \"static\")]\n-#[link(name = \"LLVMAsmPrinter\", kind = \"static\")]\n-#[link(name = \"LLVMMCParser\", kind = \"static\")]\n-#[link(name = \"LLVMCodeGen\", kind = \"static\")]\n-#[link(name = \"LLVMScalarOpts\", kind = \"static\")]\n-#[link(name = \"LLVMInstCombine\", kind = \"static\")]\n-#[link(name = \"LLVMTransformUtils\", kind = \"static\")]\n-#[link(name = \"LLVMipa\", kind = \"static\")]\n-#[link(name = \"LLVMAnalysis\", kind = \"static\")]\n-#[link(name = \"LLVMTarget\", kind = \"static\")]\n-#[link(name = \"LLVMX86Desc\", kind = \"static\")]\n-#[link(name = \"LLVMX86Info\", kind = \"static\")]\n-#[link(name = \"LLVMX86AsmPrinter\", kind = \"static\")]\n-#[link(name = \"LLVMMC\", kind = \"static\")]\n-#[link(name = \"LLVMObject\", kind = \"static\")]\n-#[link(name = \"LLVMBitReader\", kind = \"static\")]\n-#[link(name = \"LLVMCore\", kind = \"static\")]\n-#[link(name = \"LLVMX86Utils\", kind = \"static\")]\n-#[link(name = \"LLVMSupport\", kind = \"static\")]\n-#[link(name = \"pthread\")]\n-#[link(name = \"dl\")]\n-#[link(name = \"m\")]\n-#[link(name = \"stdc++\")]\n-extern {}"}, {"sha": "b992a11bc64830764041a68198ae7b2b91b472dd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -361,7 +361,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     }\n     if default_passes {\n         for name in DEFAULT_PASSES.iter().rev() {\n-            passes.unshift(name.to_string());\n+            passes.insert(0, name.to_string());\n         }\n     }\n "}, {"sha": "416018cadd2a883b4d0d379b871e4f13380a2f12", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -136,7 +136,7 @@ pub fn test(input: &str, libs: HashSet<Path>, externs: core::Externs,\n \n     let mut collector = Collector::new(input.to_string(), libs, externs, true);\n     find_testable_code(input_str.as_slice(), &mut collector);\n-    test_args.unshift(\"rustdoctest\".to_string());\n+    test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(test_args.as_slice(), collector.tests);\n     0\n }"}, {"sha": "aef6af1677ab0d67b2f32c1eb0cb9ea96b370e37", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -97,7 +97,7 @@ pub fn run(input: &str,\n                                        false);\n     collector.fold_crate(krate);\n \n-    test_args.unshift(\"rustdoctest\".to_string());\n+    test_args.insert(0, \"rustdoctest\".to_string());\n \n     testing::test_main(test_args.as_slice(),\n                        collector.tests.move_iter().collect());"}, {"sha": "c9188e81975c614f9bcd93f384012d9841b03299", "filename": "src/librustrt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustrt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustrt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fat_exit_imp.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -15,6 +15,7 @@\n use core::prelude::*;\n \n use alloc::boxed::Box;\n+use collections::MutableSeq;\n use collections::vec::Vec;\n use core::atomics;\n use core::mem;"}, {"sha": "b7366f440d0348ace6c011cd5aa81b359b384cc8", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -41,6 +41,7 @@ assert_eq!(*key_vector.get().unwrap(), vec![4]);\n use core::prelude::*;\n \n use alloc::boxed::Box;\n+use collections::MutableSeq;\n use collections::vec::Vec;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "bcbcde3fba515f810af30b5634ba1f8672d9ced9", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -114,7 +114,7 @@ impl<'a> Drop for Guard<'a> {\n             mem::transmute(self.access.inner.get())\n         };\n \n-        match inner.queue.shift() {\n+        match inner.queue.remove(0) {\n             // Here we have found a task that was waiting for access, and we\n             // current have the \"access lock\" we need to relinquish access to\n             // this sleeping task."}, {"sha": "79166935a5e7f4764a8c0a17f783773e8bc7269e", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -15,7 +15,7 @@ use std::default::Default;\n use std::hash::{Hash, Hasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n-use std::collections::{DList, RingBuf, TreeMap, TreeSet, Deque, HashMap, HashSet,\n+use std::collections::{DList, RingBuf, TreeMap, TreeSet, HashMap, HashSet,\n                        TrieMap, TrieSet};\n use std::collections::enum_set::{EnumSet, CLike};\n \n@@ -39,7 +39,7 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for DList<T> {\n         d.read_seq(|d, len| {\n             let mut list = DList::new();\n             for i in range(0u, len) {\n-                list.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n+                list.push(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(list)\n         })\n@@ -66,7 +66,7 @@ impl<E, D:Decoder<E>,T:Decodable<D, E>> Decodable<D, E> for RingBuf<T> {\n         d.read_seq(|d, len| {\n             let mut deque: RingBuf<T> = RingBuf::new();\n             for i in range(0u, len) {\n-                deque.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n+                deque.push(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));\n             }\n             Ok(deque)\n         })"}, {"sha": "922858e963c0a70bd628fd58c05fb242a5364ecd", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -1291,7 +1291,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///         // new value based on the first letter of the key.\n     ///         |key, already, new| {\n     ///             if key.as_slice().starts_with(\"z\") {\n-    ///                 already.unshift(new);\n+    ///                 already.insert(0, new);\n     ///             } else {\n     ///                 already.push(new);\n     ///             }"}, {"sha": "d98d490a84b2741edf740cfac18235c007dd5ba8", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -15,7 +15,7 @@\n #![experimental]\n \n pub use core_collections::{Collection, Mutable, Map, MutableMap};\n-pub use core_collections::{Set, MutableSet, Deque};\n+pub use core_collections::{Set, MutableSet, Deque, MutableSeq};\n pub use core_collections::{Bitv, BitvSet, BTree, DList, EnumSet};\n pub use core_collections::{PriorityQueue, RingBuf, SmallIntMap};\n pub use core_collections::{TreeMap, TreeSet, TrieMap, TrieSet};"}, {"sha": "5980245fa79a24e53f445b0192e920a67b8b01bf", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -20,6 +20,7 @@ A simple wrapper over the platform's dynamic library facilities\n #![allow(missing_doc)]\n \n use clone::Clone;\n+use collections::MutableSeq;\n use c_str::ToCStr;\n use iter::Iterator;\n use mem;"}, {"sha": "5215aec5dfbfa6e314bd481a22169e3f978cea25", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -15,7 +15,7 @@\n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately\n \n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use iter::Iterator;\n use option::{Option, Some, None};\n use result::{Ok, Err};"}, {"sha": "c7dec49a76d1fe0f2b82568300b81ab11488a1dc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -53,7 +53,7 @@ fs::unlink(&path);\n \n use c_str::ToCStr;\n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use io::standard_error;\n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};"}, {"sha": "cb754135bc152d8cf6fa48fd13e94e008ef3d7b1", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -18,6 +18,7 @@\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n use clone::Clone;\n+use collections::MutableSeq;\n use io::IoResult;\n use iter::Iterator;\n use slice::ImmutableVector;"}, {"sha": "c126866e7159ae67f1d33f84af6bbd25923912df", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -20,6 +20,7 @@ definitions for a number of signals.\n */\n \n use clone::Clone;\n+use collections::MutableSeq;\n use comm::{Sender, Receiver, channel};\n use io;\n use iter::Iterator;"}, {"sha": "125c3fdf5d90c02b0f2dfc6614d0bb33c5038c7f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -288,4 +288,6 @@ mod std {\n     #[cfg(test)] pub use os = realstd::os;\n     // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n     #[cfg(test)] pub use slice;\n+\n+    pub use collections; // vec!() uses MutableSeq\n }"}, {"sha": "c8528e752e89a114ebca84ad381bcedf3fddb89b", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -14,7 +14,7 @@\n \n use char;\n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "f71f1d22d009d0f95e07d1d15f7c4576c542a6ac", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -32,7 +32,7 @@\n #![allow(non_snake_case_functions)]\n \n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use fmt;\n use io::{IoResult, IoError};\n use iter::Iterator;"}, {"sha": "0c93f8e6de979cde2a8cee3e15a80982e83c48e7", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -65,7 +65,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![experimental]\n \n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use c_str::CString;\n use clone::Clone;\n use fmt;"}, {"sha": "877ca2c7e013fa03135f6878ed7a0d8b108b05c3", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -13,7 +13,7 @@\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "d9b802b38fdeb4840e7e31351f5bc5c551868b60", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -16,7 +16,7 @@ use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "0ce7497cf300e7ef3776cb2603ef963fa59e57ed", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -63,7 +63,7 @@\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap};\n+#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap, MutableSeq};\n #[doc(no_inline)] pub use collections::{Set, MutableSet};\n #[doc(no_inline)] pub use iter::{FromIterator, Extendable, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};"}, {"sha": "c541cc02774e0d3f5d4e503cc23970b992757156", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -55,7 +55,7 @@ use core::prelude::*;\n use alloc::arc::Arc;\n use alloc::heap::{allocate, deallocate};\n use alloc::boxed::Box;\n-use collections::Vec;\n+use collections::{Vec, MutableSeq};\n use core::kinds::marker;\n use core::mem::{forget, min_align_of, size_of, transmute};\n use core::ptr;"}, {"sha": "1bdf24ea7dd5166ad7d0ab006a1b4e228d73f837", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -22,7 +22,7 @@ use core::finally::Finally;\n use core::kinds::marker;\n use core::mem;\n use core::ty::Unsafe;\n-use collections::Vec;\n+use collections::{Vec, MutableSeq};\n \n use mutex;\n use comm::{Receiver, Sender, channel};"}, {"sha": "1410f225a298b0e28464d19afb63aaa3e9f0fdf2", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb72c4767fa423649feeb197b50385c1fa0a6fd5/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=fb72c4767fa423649feeb197b50385c1fa0a6fd5", "patch": "@@ -514,12 +514,12 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                 FormatDigit => {\n                     if flags.space && !(s[0] == '-' as u8 ||\n                                         s[0] == '+' as u8) {\n-                        s.unshift(' ' as u8);\n+                        s.insert(0, ' ' as u8);\n                     }\n                 }\n                 FormatOctal => {\n                     if flags.alternate && s[0] != '0' as u8 {\n-                        s.unshift('0' as u8);\n+                        s.insert(0, '0' as u8);\n                     }\n                 }\n                 FormatHex => {"}]}