{"sha": "5e8f934149772b781bb04e796be73446f63f99d2", "node_id": "C_kwDOAAsO6NoAKDVlOGY5MzQxNDk3NzJiNzgxYmIwNGU3OTZiZTczNDQ2ZjYzZjk5ZDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T10:28:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T10:28:07Z"}, "message": "Rollup merge of #92032 - petrochenkov:extblockpath, r=oli-obk\n\nhir: Do not introduce dummy type names for `extern` blocks in def paths\n\nUse a separate nameless `DefPathData` variant instead.\n\nExtracted from https://github.com/rust-lang/rust/pull/91795.", "tree": {"sha": "9ff612ddbc6eeac84ac256cbcf92ccd5e088afb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff612ddbc6eeac84ac256cbcf92ccd5e088afb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8f934149772b781bb04e796be73446f63f99d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvbe4CRBK7hj4Ov3rIwAAgQwIAI0lOm30vLH7irR/DtVt39V4\nRGEAU2WEH172TTvNwndIxtZ8A99E0GqT9gX53Opy3iucelvxb7Ra9zZS2YWpUiBU\nZ5HRO05NGmSk7DC/4UpgMhHcC1DM63jPmSj87MkUlosTKXpljRRYAI3T6CT8O8zP\nqMbRoa9kBT6ke4eVVVaG3U467OyfFvGvWv7H7tmv1TizmMSRoFHnUzaP9BZrSFTT\niRKLU9f97m13njX0NYNZjk81eUCLgztuXLsKvUA3QuwF3TDrBGvebcSv/3cMflyd\nUkjZMU9dtJbz04OKp8s2n6VFuPZcv+lsdycUqp9DsXEt0wiMHgqk01VplwHChpk=\n=SLGU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ff612ddbc6eeac84ac256cbcf92ccd5e088afb4\nparent a391d545cf91f975b6ed4cb65c217e66f46c1ea0\nparent 0d61852cc5e3c9c441e861acd31a1fc72f584c5b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639823287 +0100\ncommitter GitHub <noreply@github.com> 1639823287 +0100\n\nRollup merge of #92032 - petrochenkov:extblockpath, r=oli-obk\n\nhir: Do not introduce dummy type names for `extern` blocks in def paths\n\nUse a separate nameless `DefPathData` variant instead.\n\nExtracted from https://github.com/rust-lang/rust/pull/91795.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f934149772b781bb04e796be73446f63f99d2", "html_url": "https://github.com/rust-lang/rust/commit/5e8f934149772b781bb04e796be73446f63f99d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f934149772b781bb04e796be73446f63f99d2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a391d545cf91f975b6ed4cb65c217e66f46c1ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a391d545cf91f975b6ed4cb65c217e66f46c1ea0", "html_url": "https://github.com/rust-lang/rust/commit/a391d545cf91f975b6ed4cb65c217e66f46c1ea0"}, {"sha": "0d61852cc5e3c9c441e861acd31a1fc72f584c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d61852cc5e3c9c441e861acd31a1fc72f584c5b", "html_url": "https://github.com/rust-lang/rust/commit/0d61852cc5e3c9c441e861acd31a1fc72f584c5b"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "40071c6df8ccaa2b439fea85bcaae52c9eb60430", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -267,6 +267,8 @@ pub enum DefPathData {\n     // Different kinds of items and item-like things:\n     /// An impl.\n     Impl,\n+    /// An `extern` block.\n+    ForeignMod,\n     /// Something in the type namespace.\n     TypeNs(Symbol),\n     /// Something in the value namespace.\n@@ -469,7 +471,9 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            Impl | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => None,\n+            Impl | ForeignMod | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => {\n+                None\n+            }\n         }\n     }\n \n@@ -482,6 +486,7 @@ impl DefPathData {\n             // Note that this does not show up in user print-outs.\n             CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n             Impl => DefPathDataName::Anon { namespace: kw::Impl },\n+            ForeignMod => DefPathDataName::Anon { namespace: kw::Extern },\n             Misc => DefPathDataName::Anon { namespace: sym::misc },\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },"}, {"sha": "c065ff37722090ccbc30e24950e895bab6b55f81", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -1030,8 +1030,8 @@ impl<'tcx> LateContext<'tcx> {\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n \n-                // Skip `::{{constructor}}` on tuple/unit structs.\n-                if let DefPathData::Ctor = disambiguated_data.data {\n+                // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+                if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n                     return Ok(path);\n                 }\n "}, {"sha": "b3b8183d313f36b7c50d507cf68657ee48bd7f67", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -1740,30 +1740,26 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Skip `::{{constructor}}` on tuple/unit structs.\n-        if let DefPathData::Ctor = disambiguated_data.data {\n+        // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+        if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n             return Ok(self);\n         }\n \n-        // FIXME(eddyb) `name` should never be empty, but it\n-        // currently is for `extern { ... }` \"foreign modules\".\n         let name = disambiguated_data.data.name();\n-        if name != DefPathDataName::Named(kw::Empty) {\n-            if !self.empty_path {\n-                write!(self, \"::\")?;\n-            }\n+        if !self.empty_path {\n+            write!(self, \"::\")?;\n+        }\n \n-            if let DefPathDataName::Named(name) = name {\n-                if Ident::with_dummy_span(name).is_raw_guess() {\n-                    write!(self, \"r#\")?;\n-                }\n+        if let DefPathDataName::Named(name) = name {\n+            if Ident::with_dummy_span(name).is_raw_guess() {\n+                write!(self, \"r#\")?;\n             }\n+        }\n \n-            let verbose = self.tcx.sess.verbose();\n-            disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n+        let verbose = self.tcx.sess.verbose();\n+        disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n \n-            self.empty_path = false;\n-        }\n+        self.empty_path = false;\n \n         Ok(self)\n     }"}, {"sha": "688b7b1a8c6d25593472d8beb5c436c1d5be0760", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -92,14 +92,14 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         // information we encapsulate into, the better\n         let def_data = match &i.kind {\n             ItemKind::Impl { .. } => DefPathData::Impl,\n+            ItemKind::ForeignMod(..) => DefPathData::ForeignMod,\n             ItemKind::Mod(..)\n             | ItemKind::Trait(..)\n             | ItemKind::TraitAlias(..)\n             | ItemKind::Enum(..)\n             | ItemKind::Struct(..)\n             | ItemKind::Union(..)\n             | ItemKind::ExternCrate(..)\n-            | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) => {\n                 DefPathData::ValueNs(i.ident.name)"}, {"sha": "0232aace6d78c1b5c0d13e888410a61d58c00cfe", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -311,8 +311,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Skip `::{{constructor}}` on tuple/unit structs.\n-        if let DefPathData::Ctor = disambiguated_data.data {\n+        // Skip `::{{extern}}` blocks and `::{{constructor}}` on tuple/unit structs.\n+        if let DefPathData::ForeignMod | DefPathData::Ctor = disambiguated_data.data {\n             return Ok(self);\n         }\n "}, {"sha": "ea6366c407e218fd7f049ca65fcc4dff45cc013e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -771,6 +771,10 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         let ns = match disambiguated_data.data {\n+            // FIXME: It shouldn't be necessary to add anything for extern block segments,\n+            // but we add 't' for backward compatibility.\n+            DefPathData::ForeignMod => 't',\n+\n             // Uppercase categories are more stable than lowercase ones.\n             DefPathData::TypeNs(_) => 't',\n             DefPathData::ValueNs(_) => 'v',"}, {"sha": "57621f4f18cfe0529efa9f5815aa14573c03aa0f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -165,9 +166,8 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n-        // extern blocks have an empty name\n-        let s = elem.data.to_string();\n-        if !s.is_empty() { Some(s) } else { None }\n+        // Filter out extern blocks\n+        (elem.data != DefPathData::ForeignMod).then(|| elem.data.to_string())\n     });\n     let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro"}, {"sha": "ea7372761ba311fe49eb7a65596736b65a2ddd02", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f934149772b781bb04e796be73446f63f99d2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f934149772b781bb04e796be73446f63f99d2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5e8f934149772b781bb04e796be73446f63f99d2", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::Node;\n use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n@@ -45,9 +46,8 @@ impl Module<'hir> {\n fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<String> {\n     let crate_name = tcx.crate_name(did.krate).to_string();\n     let relative = tcx.def_path(did).data.into_iter().filter_map(|elem| {\n-        // extern blocks have an empty name\n-        let s = elem.data.to_string();\n-        if !s.is_empty() { Some(s) } else { None }\n+        // Filter out extern blocks\n+        (elem.data != DefPathData::ForeignMod).then(|| elem.data.to_string())\n     });\n     std::iter::once(crate_name).chain(relative).collect()\n }"}]}