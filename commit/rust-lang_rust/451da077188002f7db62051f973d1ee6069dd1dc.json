{"sha": "451da077188002f7db62051f973d1ee6069dd1dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWRhMDc3MTg4MDAyZjdkYjYyMDUxZjk3M2QxZWU2MDY5ZGQxZGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-04T23:40:11Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-04T23:41:19Z"}, "message": "Allow anonymous extern mods\n\nNow you can write:\n\nextern {\n  f() -> int;\n}\n\nand f will be accessible in the enclosing scope.", "tree": {"sha": "cb5ce613fdccf096201353c651a18be02c26bb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb5ce613fdccf096201353c651a18be02c26bb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451da077188002f7db62051f973d1ee6069dd1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451da077188002f7db62051f973d1ee6069dd1dc", "html_url": "https://github.com/rust-lang/rust/commit/451da077188002f7db62051f973d1ee6069dd1dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451da077188002f7db62051f973d1ee6069dd1dc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c491bf939ee715b8624000e5b6fb033acda26826", "url": "https://api.github.com/repos/rust-lang/rust/commits/c491bf939ee715b8624000e5b6fb033acda26826", "html_url": "https://github.com/rust-lang/rust/commit/c491bf939ee715b8624000e5b6fb033acda26826"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "c131c7d57ad08500c9887c0ed75a7a70eb49f84e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/451da077188002f7db62051f973d1ee6069dd1dc/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451da077188002f7db62051f973d1ee6069dd1dc/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=451da077188002f7db62051f973d1ee6069dd1dc", "patch": "@@ -239,7 +239,14 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n             cx.map.insert(nitem.id,\n                           node_foreign_item(nitem, abi,\n                                            /* FIXME (#2543) */\n-                                           extend(cx, i.ident)));\n+                                            if nm.sort == ast::named {\n+                                                extend(cx, i.ident)\n+                                            }\n+                                            else {\n+                                                /* Anonymous extern mods go\n+                                                in the parent scope */\n+                                                @copy cx.path\n+                                            }));\n         }\n       }\n       item_class(struct_def, _) => {"}, {"sha": "444662ae0e2a82e72436e3ea9dd853c1df7fb005", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/451da077188002f7db62051f973d1ee6069dd1dc/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451da077188002f7db62051f973d1ee6069dd1dc/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=451da077188002f7db62051f973d1ee6069dd1dc", "patch": "@@ -109,7 +109,7 @@ fn visit_view_item(e: env, i: @ast::view_item) {\n \n fn visit_item(e: env, i: @ast::item) {\n     match i.node {\n-      ast::item_foreign_mod(_) => {\n+      ast::item_foreign_mod(fm) => {\n         match attr::foreign_abi(i.attrs) {\n           either::Right(abi) => {\n             if abi != ast::foreign_abi_cdecl &&\n@@ -119,27 +119,36 @@ fn visit_item(e: env, i: @ast::item) {\n         }\n \n         let cstore = e.cstore;\n-        let foreign_name =\n-            match attr::first_attr_value_str_by_name(i.attrs, ~\"link_name\") {\n-              Some(nn) => {\n-                if nn == ~\"\" {\n-                    e.diag.span_fatal(\n-                        i.span,\n-                        ~\"empty #[link_name] not allowed; use #[nolink].\");\n-                }\n-                nn\n-              }\n-              None => *e.intr.get(i.ident)\n-            };\n         let mut already_added = false;\n-        if vec::len(attr::find_attrs_by_name(i.attrs, ~\"nolink\")) == 0u {\n-            already_added = !cstore::add_used_library(cstore, foreign_name);\n-        }\n         let link_args = attr::find_attrs_by_name(i.attrs, ~\"link_args\");\n-        if vec::len(link_args) > 0u && already_added {\n-            e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n-                              ~\"' already added: can't specify link_args.\");\n+\n+        match fm.sort {\n+          ast::named => {\n+            let foreign_name =\n+               match attr::first_attr_value_str_by_name(i.attrs,\n+                                                        ~\"link_name\") {\n+                 Some(nn) => {\n+                   if nn == ~\"\" {\n+                      e.diag.span_fatal(\n+                          i.span,\n+                          ~\"empty #[link_name] not allowed; use #[nolink].\");\n+                   }\n+                   nn\n+                 }\n+                None => *e.intr.get(i.ident)\n+            };\n+            if attr::find_attrs_by_name(i.attrs, ~\"nolink\").is_empty() {\n+                already_added = !cstore::add_used_library(cstore,\n+                                                          foreign_name);\n+            }\n+            if link_args.is_not_empty() && already_added {\n+                e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n+                           ~\"' already added: can't specify link_args.\");\n+            }\n+          }\n+          ast::anonymous => { /* do nothing */ }\n         }\n+\n         for link_args.each |a| {\n             match attr::get_meta_item_value_str(attr::attr_meta(a)) {\n               Some(linkarg) => {"}, {"sha": "b1eb013bd6b490dc78204d2bec8738456ebb3aaf", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/451da077188002f7db62051f973d1ee6069dd1dc/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451da077188002f7db62051f973d1ee6069dd1dc/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=451da077188002f7db62051f973d1ee6069dd1dc", "patch": "@@ -0,0 +1,9 @@\n+#[abi = \"cdecl\"];\n+#[link_name = \"rustrt\"];\n+#[link(name = \"anonexternmod\",\n+       vers = \"0.1\")];\n+\n+#[crate_type = \"lib\"];\n+extern {\n+  fn last_os_error() -> ~str;\n+}"}, {"sha": "559749c9573304d82625b902c1ac671a9e2e28e6", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451da077188002f7db62051f973d1ee6069dd1dc/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451da077188002f7db62051f973d1ee6069dd1dc/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=451da077188002f7db62051f973d1ee6069dd1dc", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:anon-extern-mod-cross-crate-1.rs\n+use anonexternmod;\n+\n+import anonexternmod::*;\n+\n+fn main() {\n+  last_os_error();\n+}"}]}