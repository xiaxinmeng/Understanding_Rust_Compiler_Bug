{"sha": "b6449eba518d6714c05a96d2645655303556c737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDQ5ZWJhNTE4ZDY3MTRjMDVhOTZkMjY0NTY1NTMwMzU1NmM3Mzc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-30T22:20:03Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-30T22:20:03Z"}, "message": "Rollup merge of #28753 - steveklabnik:gh28572, r=alexcrichton\n\nThis is part of #28572, but doesn't complete it. Amongst other things,\r\nthis patch:\r\n\r\n* Increases consistency in the way feature flags are used with other\r\n  docs.\r\n* Removes the ignores, which is nice: we actually had some syntax errors\r\n  in the examples :sob:.\r\n* Mentions #![no_core]\r\n\r\nRealistically, this document used to be in the order of least to most:\r\nnothing, then adding core. But with the changes in RFC 1184, this is\r\nbackwards: it now shows stuff that uses core from the beginning. In the\r\nfuture, I'd like to revamp this to go from 'most to least', but I'd like\r\nto see the discussion in https://github.com/rust-lang/rust/issues/27701\r\ngoes before I write more.", "tree": {"sha": "adf622e506e05f8ada69b670f5a9a0fd482155ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf622e506e05f8ada69b670f5a9a0fd482155ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6449eba518d6714c05a96d2645655303556c737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6449eba518d6714c05a96d2645655303556c737", "html_url": "https://github.com/rust-lang/rust/commit/b6449eba518d6714c05a96d2645655303556c737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6449eba518d6714c05a96d2645655303556c737/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c788d0a9a623221da12437b01a35ea899a03d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c788d0a9a623221da12437b01a35ea899a03d9b", "html_url": "https://github.com/rust-lang/rust/commit/1c788d0a9a623221da12437b01a35ea899a03d9b"}, {"sha": "4632ad889686006c6c52f165c360fe6d4d381f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/4632ad889686006c6c52f165c360fe6d4d381f98", "html_url": "https://github.com/rust-lang/rust/commit/4632ad889686006c6c52f165c360fe6d4d381f98"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "5fca05d5340068b543c5f24cc33cf5f30b42bf0a", "filename": "src/doc/trpl/no-stdlib.md", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b6449eba518d6714c05a96d2645655303556c737/src%2Fdoc%2Ftrpl%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6449eba518d6714c05a96d2645655303556c737/src%2Fdoc%2Ftrpl%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fno-stdlib.md?ref=b6449eba518d6714c05a96d2645655303556c737", "patch": "@@ -4,14 +4,6 @@ By default, `std` is linked to every Rust crate. In some contexts,\n this is undesirable, and can be avoided with the `#![no_std]`\n attribute attached to the crate.\n \n-```ignore\n-// a minimal library\n-#![crate_type=\"lib\"]\n-#![feature(no_std)]\n-#![no_std]\n-# // fn main() {} tricked you, rustdoc!\n-```\n-\n Obviously there's more to life than just libraries: one can use\n `#[no_std]` with an executable, controlling the entry point is\n possible in two ways: the `#[start]` attribute, or overriding the\n@@ -21,7 +13,10 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```rust\n-#![feature(lang_items, start, no_std, libc)]\n+# #![feature(libc)]\n+#![feature(lang_items)]\n+#![feature(start)]\n+#![feature(no_std)]\n #![no_std]\n \n // Pull in the system libc library for what crt0.o likely requires\n@@ -47,11 +42,13 @@ with `#![no_main]` and then create the appropriate symbol with the\n correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n-```ignore\n+```rust\n+# #![feature(libc)]\n #![feature(no_std)]\n+#![feature(lang_items)]\n+#![feature(start)]\n #![no_std]\n #![no_main]\n-#![feature(lang_items, start)]\n \n extern crate libc;\n \n@@ -92,19 +89,24 @@ instead.\n \n The core library has very few dependencies and is much more portable than the\n standard library itself. Additionally, the core library has most of the\n-necessary functionality for writing idiomatic and effective Rust code.\n+necessary functionality for writing idiomatic and effective Rust code. When\n+using `#![no_std]`, Rust will automatically inject the `core` crate, just like\n+we do for `std` when we\u2019re using it.\n \n As an example, here is a program that will calculate the dot product of two\n vectors provided from C, using idiomatic Rust practices.\n \n-```ignore\n-#![feature(lang_items, start, no_std, core, libc)]\n+```rust\n+# #![feature(libc)]\n+#![feature(lang_items)]\n+#![feature(start)]\n+#![feature(no_std)]\n+#![feature(core)]\n+#![feature(core_slice_ext)]\n+#![feature(raw)]\n #![no_std]\n \n-# extern crate libc;\n-extern crate core;\n-\n-use core::prelude::*;\n+extern crate libc;\n \n use core::mem;\n "}]}