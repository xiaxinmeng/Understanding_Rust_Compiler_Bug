{"sha": "7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "node_id": "C_kwDOAAsO6NoAKDc5NTJkMmVkODMzODc5NmFhOWI1ZjBkYTVhMzdjN2RkOGU5MzYxODI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T13:20:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T11:58:29Z"}, "message": "resolve vars in node substs", "tree": {"sha": "65ff7a54e19f7c9186e8e92a5c730cdf26bbbff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ff7a54e19f7c9186e8e92a5c730cdf26bbbff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "html_url": "https://github.com/rust-lang/rust/commit/7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef34a648b9471658ee08101bc65a6a299e12f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef34a648b9471658ee08101bc65a6a299e12f1c", "html_url": "https://github.com/rust-lang/rust/commit/eef34a648b9471658ee08101bc65a6a299e12f1c"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "036692c43dc854f0d319e481f54ceee3963589eb", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "patch": "@@ -692,6 +692,11 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn node_substs_opt(&self, hir_id: HirId) -> Option<SubstsRef<'tcx>> {\n+        let substs = self.typeck_results.node_substs_opt(hir_id);\n+        self.infcx.resolve_vars_if_possible(substs)\n+    }\n+\n     fn opt_node_type(&self, hir_id: HirId) -> Option<Ty<'tcx>> {\n         let ty = self.typeck_results.node_type_opt(hir_id);\n         self.infcx.resolve_vars_if_possible(ty)\n@@ -774,7 +779,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n         match expr.kind {\n             hir::ExprKind::Path(ref path) => {\n-                if let Some(substs) = self.typeck_results.node_substs_opt(expr.hir_id) {\n+                if let Some(substs) = self.node_substs_opt(expr.hir_id) {\n                     return self.path_inferred_subst_iter(expr.hir_id, substs, path);\n                 }\n             }\n@@ -802,7 +807,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                         if generics.has_impl_trait() {\n                             None?\n                         }\n-                        let substs = self.typeck_results.node_substs_opt(expr.hir_id)?;\n+                        let substs = self.node_substs_opt(expr.hir_id)?;\n                         let span = tcx.hir().span(segment.hir_id?);\n                         let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                         InsertableGenericArgs {\n@@ -1074,7 +1079,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n             .any(|generics| generics.has_impl_trait())\n         };\n         if let ExprKind::MethodCall(path, args, span) = expr.kind\n-            && let Some(substs) = self.typeck_results.node_substs_opt(expr.hir_id)\n+            && let Some(substs) = self.node_substs_opt(expr.hir_id)\n             && substs.iter().any(|arg| self.generic_arg_contains_target(arg))\n             && let Some(def_id) = self.typeck_results.type_dependent_def_id(expr.hir_id)\n             && self.infcx.tcx.trait_of_item(def_id).is_some()"}, {"sha": "9cbe221de1393f86ee5b6cb3d70350b24acee14b", "filename": "src/test/ui/inference/ambiguous_type_parameter.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr?ref=7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "patch": "@@ -2,7 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/ambiguous_type_parameter.rs:16:19\n    |\n LL |     InMemoryStore.get_raw(&String::default());\n-   |                   ^^^^^^^ cannot infer type for type parameter `K`\n+   |                   ^^^^^^^\n+   |\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <InMemoryStore as Store<String, HashMap<K, String>>>::get_raw(&InMemoryStore, &String::default());\n+   |     +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++             ~\n \n error: aborting due to previous error\n "}, {"sha": "e0f8a5447b081b884cf4640562efe0cd8ff1a4db", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7952d2ed8338796aa9b5f0da5a37c7dd8e936182/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=7952d2ed8338796aa9b5f0da5a37c7dd8e936182", "patch": "@@ -13,7 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:26:7\n    |\n LL |     x.foo();\n-   |       ^^^ cannot infer type for struct `Vec<_>`\n+   |       ^^^\n    |\n note: multiple `impl`s satisfying `Vec<_>: Foo` found\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:9:1\n@@ -23,6 +23,10 @@ LL | impl Foo for Vec<usize> {\n ...\n LL | impl Foo for Vec<isize> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <Vec<T> as Foo>::foo(&x);\n+   |     ++++++++++++++++++++++ ~\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}]}