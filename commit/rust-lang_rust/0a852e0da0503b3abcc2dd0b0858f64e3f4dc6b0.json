{"sha": "0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODUyZTBkYTA1MDNiM2FiY2MyZGQwYjA4NThmNjRlM2Y0ZGM2YjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-06T00:24:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-06T00:24:28Z"}, "message": "rustc: Make \"priv\" work on enum variants", "tree": {"sha": "e1d6c11cf6636762c27044d56c362a91ba7da86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d6c11cf6636762c27044d56c362a91ba7da86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "html_url": "https://github.com/rust-lang/rust/commit/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9097410b433c0d7c7dca8f9296161b3074a8d21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9097410b433c0d7c7dca8f9296161b3074a8d21e", "html_url": "https://github.com/rust-lang/rust/commit/9097410b433c0d7c7dca8f9296161b3074a8d21e"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "05872159f8caadd31c98c8b71b713875dabea785", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "patch": "@@ -1091,23 +1091,24 @@ struct Resolver {\n         let atom = variant.node.name;\n         let (child, _) = self.add_child(atom, parent, ~[ValueNS],\n                                         variant.span);\n+        let privacy = self.visibility_to_privacy(variant.node.vis);\n \n         match variant.node.kind {\n             tuple_variant_kind(_) => {\n-                (*child).define_value(Public,\n+                (*child).define_value(privacy,\n                                       def_variant(item_id,\n                                                   local_def(variant.node.id)),\n                                       variant.span);\n             }\n             struct_variant_kind(_) => {\n-                (*child).define_type(Public,\n+                (*child).define_type(privacy,\n                                      def_variant(item_id,\n                                                  local_def(variant.node.id)),\n                                      variant.span);\n                 self.structs.insert(local_def(variant.node.id), false);\n             }\n             enum_variant_kind(enum_definition) => {\n-                (*child).define_type(Public,\n+                (*child).define_type(privacy,\n                                      def_ty(local_def(variant.node.id)),\n                                      variant.span);\n                 for enum_definition.variants.each |variant| {"}, {"sha": "2b31b550e248aa966bae18188838b76918581087", "filename": "src/test/compile-fail/private-variant.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs?ref=0a852e0da0503b3abcc2dd0b0858f64e3f4dc6b0", "patch": "@@ -0,0 +1,11 @@\n+mod a {\n+    enum Waffle {\n+        Belgian,\n+        Brussels,\n+        priv Liege\n+    }\n+}\n+\n+fn main() {\n+    let x = a::Liege;   //~ ERROR unresolved name\n+}"}]}