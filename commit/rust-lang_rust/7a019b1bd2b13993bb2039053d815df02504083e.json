{"sha": "7a019b1bd2b13993bb2039053d815df02504083e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDE5YjFiZDJiMTM5OTNiYjIwMzkwNTNkODE1ZGYwMjUwNDA4M2U=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T22:03:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-19T05:03:28Z"}, "message": "Check for trait methods on concrete types in const checking", "tree": {"sha": "bb20db102cd26a03ecac2c7e16c39f59756c1b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb20db102cd26a03ecac2c7e16c39f59756c1b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a019b1bd2b13993bb2039053d815df02504083e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a019b1bd2b13993bb2039053d815df02504083e", "html_url": "https://github.com/rust-lang/rust/commit/7a019b1bd2b13993bb2039053d815df02504083e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a019b1bd2b13993bb2039053d815df02504083e/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e422efba1be879633c7be7ad178915f2ace7f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e422efba1be879633c7be7ad178915f2ace7f04", "html_url": "https://github.com/rust-lang/rust/commit/5e422efba1be879633c7be7ad178915f2ace7f04"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "1a1c34e1c6742f540913138c722c80d76f7eb408", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a019b1bd2b13993bb2039053d815df02504083e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a019b1bd2b13993bb2039053d815df02504083e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=7a019b1bd2b13993bb2039053d815df02504083e", "patch": "@@ -4,7 +4,7 @@ use rustc::middle::lang_items;\n use rustc::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, Instance, InstanceDef, TyCtxt};\n use rustc_errors::struct_span_err;\n use rustc_hir::{def_id::DefId, HirId};\n use rustc_index::bit_set::BitSet;\n@@ -501,8 +501,8 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             TerminatorKind::Call { func, .. } => {\n                 let fn_ty = func.ty(*self.body, self.tcx);\n \n-                let def_id = match fn_ty.kind {\n-                    ty::FnDef(def_id, _) => def_id,\n+                let (def_id, substs) = match fn_ty.kind {\n+                    ty::FnDef(def_id, substs) => (def_id, substs),\n \n                     ty::FnPtr(_) => {\n                         self.check_op(ops::FnCallIndirect);\n@@ -519,6 +519,20 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                     return;\n                 }\n \n+                // See if this is a trait method for a concrete type whose impl of that trait is\n+                // `const`.\n+                if self.tcx.features().const_trait_impl {\n+                    let instance = Instance::resolve(self.tcx, self.param_env, def_id, substs);\n+                    debug!(\"Resolving ({:?}) -> {:?}\", def_id, instance);\n+                    if let Some(func) = instance {\n+                        if let InstanceDef::Item(def_id) = func.def {\n+                            if is_const_fn(self.tcx, def_id) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 if is_lang_panic_fn(self.tcx, def_id) {\n                     self.check_op(ops::Panic);\n                 } else if let Some(feature) = is_unstable_const_fn(self.tcx, def_id) {"}]}