{"sha": "5ac2045d1eb3f32157928ade47fbed5ea10c8e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzIwNDVkMWViM2YzMjE1NzkyOGFkZTQ3ZmJlZDVlYTEwYzhlOTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T18:49:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T10:56:46Z"}, "message": "use ImmTy::from_uint in a few more spots", "tree": {"sha": "449e0978a4921a7c9f80f7f9d2a0c2c723f9257c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449e0978a4921a7c9f80f7f9d2a0c2c723f9257c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac2045d1eb3f32157928ade47fbed5ea10c8e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac2045d1eb3f32157928ade47fbed5ea10c8e91", "html_url": "https://github.com/rust-lang/rust/commit/5ac2045d1eb3f32157928ade47fbed5ea10c8e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac2045d1eb3f32157928ade47fbed5ea10c8e91/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edf0992662522e041bb56288c0f112159382ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edf0992662522e041bb56288c0f112159382ec9", "html_url": "https://github.com/rust-lang/rust/commit/3edf0992662522e041bb56288c0f112159382ec9"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "98d8ca58ee1647d671f0baf1305f71cf17153167", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ac2045d1eb3f32157928ade47fbed5ea10c8e91/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac2045d1eb3f32157928ade47fbed5ea10c8e91/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5ac2045d1eb3f32157928ade47fbed5ea10c8e91", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n-    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,\n+    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n use crate::interpret::{\n@@ -396,30 +396,21 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 if let ty::Slice(_) = mplace.layout.ty.sty {\n                     let len = mplace.meta.unwrap().to_usize(&self.ecx).unwrap();\n \n-                    Some(ImmTy {\n-                        imm: Immediate::Scalar(\n-                            Scalar::from_uint(\n-                                len,\n-                                Size::from_bits(\n-                                    self.tcx.sess.target.usize_ty.bit_width().unwrap() as u64\n-                                )\n-                            ).into(),\n-                        ),\n-                        layout: self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n-                    }.into())\n+                    Some(ImmTy::from_uint(\n+                        len,\n+                        self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n+                    ).into())\n                 } else {\n                     trace!(\"not slice: {:?}\", mplace.layout.ty.sty);\n                     None\n                 }\n             },\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                 type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n-                    ImmTy {\n-                        imm: Immediate::Scalar(\n-                            Scalar::from_uint(n, self.tcx.data_layout.pointer_size).into()\n-                        ),\n-                        layout: self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n-                    }.into()\n+                    ImmTy::from_uint(\n+                        n,\n+                        self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n+                    ).into()\n                 ))\n             }\n             Rvalue::UnaryOp(op, ref arg) => {"}]}