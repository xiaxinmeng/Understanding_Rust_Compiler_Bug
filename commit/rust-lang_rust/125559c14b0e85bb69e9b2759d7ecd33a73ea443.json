{"sha": "125559c14b0e85bb69e9b2759d7ecd33a73ea443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTU1OWMxNGIwZTg1YmI2OWU5YjI3NTlkN2VjZDMzYTczZWE0NDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T16:15:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T16:15:57Z"}, "message": "Move use tree lowering to a separate module", "tree": {"sha": "ea972dab855942de813cea4f477299a4746a3de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea972dab855942de813cea4f477299a4746a3de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125559c14b0e85bb69e9b2759d7ecd33a73ea443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125559c14b0e85bb69e9b2759d7ecd33a73ea443", "html_url": "https://github.com/rust-lang/rust/commit/125559c14b0e85bb69e9b2759d7ecd33a73ea443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125559c14b0e85bb69e9b2759d7ecd33a73ea443/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254c8efc5b34484d503b68ecc5c8ed6802117435", "url": "https://api.github.com/repos/rust-lang/rust/commits/254c8efc5b34484d503b68ecc5c8ed6802117435", "html_url": "https://github.com/rust-lang/rust/commit/254c8efc5b34484d503b68ecc5c8ed6802117435"}], "stats": {"total": 222, "additions": 118, "deletions": 104}, "files": [{"sha": "ddb53ee7cc2750cac48977a5d73800a7e3b98b2b", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 3, "deletions": 104, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/125559c14b0e85bb69e9b2759d7ecd33a73ea443/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125559c14b0e85bb69e9b2759d7ecd33a73ea443/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=125559c14b0e85bb69e9b2759d7ecd33a73ea443", "patch": "@@ -1,4 +1,5 @@\n //! A desugared representation of paths like `crate::foo` or `<Type as Trait>::bar`.\n+mod lower_use;\n \n use std::{iter, sync::Arc};\n \n@@ -9,7 +10,7 @@ use hir_expand::{\n };\n use ra_db::CrateId;\n use ra_syntax::{\n-    ast::{self, NameOwner, TypeAscriptionOwner},\n+    ast::{self, TypeAscriptionOwner},\n     AstNode,\n };\n \n@@ -72,7 +73,7 @@ impl Path {\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item_src.value.use_tree() {\n-            expand_use_tree(None, tree, hygiene, &mut cb);\n+            lower_use::lower_use_tree(None, tree, hygiene, &mut cb);\n         }\n     }\n \n@@ -296,108 +297,6 @@ impl From<Name> for Path {\n     }\n }\n \n-fn expand_use_tree(\n-    prefix: Option<Path>,\n-    tree: ast::UseTree,\n-    hygiene: &Hygiene,\n-    cb: &mut dyn FnMut(Path, &ast::UseTree, bool, Option<Name>),\n-) {\n-    if let Some(use_tree_list) = tree.use_tree_list() {\n-        let prefix = match tree.path() {\n-            // E.g. use something::{{{inner}}};\n-            None => prefix,\n-            // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n-            // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n-            Some(path) => match convert_path(prefix, path, hygiene) {\n-                Some(it) => Some(it),\n-                None => return, // FIXME: report errors somewhere\n-            },\n-        };\n-        for child_tree in use_tree_list.use_trees() {\n-            expand_use_tree(prefix.clone(), child_tree, hygiene, cb);\n-        }\n-    } else {\n-        let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n-        if let Some(ast_path) = tree.path() {\n-            // Handle self in a path.\n-            // E.g. `use something::{self, <...>}`\n-            if ast_path.qualifier().is_none() {\n-                if let Some(segment) = ast_path.segment() {\n-                    if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n-                        if let Some(prefix) = prefix {\n-                            cb(prefix, &tree, false, alias);\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-            if let Some(path) = convert_path(prefix, ast_path, hygiene) {\n-                let is_glob = tree.has_star();\n-                cb(path, &tree, is_glob, alias)\n-            }\n-            // FIXME: report errors somewhere\n-            // We get here if we do\n-        }\n-    }\n-}\n-\n-fn convert_path(prefix: Option<Path>, path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n-    let prefix = if let Some(qual) = path.qualifier() {\n-        Some(convert_path(prefix, qual, hygiene)?)\n-    } else {\n-        prefix\n-    };\n-\n-    let segment = path.segment()?;\n-    let res = match segment.kind()? {\n-        ast::PathSegmentKind::Name(name_ref) => {\n-            match hygiene.name_ref_to_name(name_ref) {\n-                Either::Left(name) => {\n-                    // no type args in use\n-                    let mut res = prefix.unwrap_or_else(|| Path {\n-                        kind: PathKind::Plain,\n-                        segments: Vec::with_capacity(1),\n-                    });\n-                    res.segments.push(PathSegment {\n-                        name,\n-                        args_and_bindings: None, // no type args in use\n-                    });\n-                    res\n-                }\n-                Either::Right(crate_id) => {\n-                    return Some(Path::from_simple_segments(\n-                        PathKind::DollarCrate(crate_id),\n-                        iter::empty(),\n-                    ))\n-                }\n-            }\n-        }\n-        ast::PathSegmentKind::CrateKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path::from_simple_segments(PathKind::Crate, iter::empty())\n-        }\n-        ast::PathSegmentKind::SelfKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path::from_simple_segments(PathKind::Self_, iter::empty())\n-        }\n-        ast::PathSegmentKind::SuperKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path::from_simple_segments(PathKind::Super, iter::empty())\n-        }\n-        ast::PathSegmentKind::Type { .. } => {\n-            // not allowed in imports\n-            return None;\n-        }\n-    };\n-    Some(res)\n-}\n-\n pub mod known {\n     use hir_expand::name;\n "}, {"sha": "e2e1f716dc89c64d0dc7aadb15023f7672e2d684", "filename": "crates/ra_hir_def/src/path/lower_use.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/125559c14b0e85bb69e9b2759d7ecd33a73ea443/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125559c14b0e85bb69e9b2759d7ecd33a73ea443/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower_use.rs?ref=125559c14b0e85bb69e9b2759d7ecd33a73ea443", "patch": "@@ -0,0 +1,115 @@\n+//! Lowers a single complex use like `use foo::{bar, baz};` into a list of paths like\n+//! `foo::bar`, `foo::baz`;\n+\n+use std::iter;\n+\n+use either::Either;\n+use hir_expand::{\n+    hygiene::Hygiene,\n+    name::{AsName, Name},\n+};\n+use ra_syntax::ast::{self, NameOwner};\n+\n+use crate::path::{Path, PathKind, PathSegment};\n+\n+pub(crate) fn lower_use_tree(\n+    prefix: Option<Path>,\n+    tree: ast::UseTree,\n+    hygiene: &Hygiene,\n+    cb: &mut dyn FnMut(Path, &ast::UseTree, bool, Option<Name>),\n+) {\n+    if let Some(use_tree_list) = tree.use_tree_list() {\n+        let prefix = match tree.path() {\n+            // E.g. use something::{{{inner}}};\n+            None => prefix,\n+            // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n+            // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n+            Some(path) => match convert_path(prefix, path, hygiene) {\n+                Some(it) => Some(it),\n+                None => return, // FIXME: report errors somewhere\n+            },\n+        };\n+        for child_tree in use_tree_list.use_trees() {\n+            lower_use_tree(prefix.clone(), child_tree, hygiene, cb);\n+        }\n+    } else {\n+        let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n+        if let Some(ast_path) = tree.path() {\n+            // Handle self in a path.\n+            // E.g. `use something::{self, <...>}`\n+            if ast_path.qualifier().is_none() {\n+                if let Some(segment) = ast_path.segment() {\n+                    if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n+                        if let Some(prefix) = prefix {\n+                            cb(prefix, &tree, false, alias);\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+            if let Some(path) = convert_path(prefix, ast_path, hygiene) {\n+                let is_glob = tree.has_star();\n+                cb(path, &tree, is_glob, alias)\n+            }\n+            // FIXME: report errors somewhere\n+            // We get here if we do\n+        }\n+    }\n+}\n+\n+fn convert_path(prefix: Option<Path>, path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n+    let prefix = if let Some(qual) = path.qualifier() {\n+        Some(convert_path(prefix, qual, hygiene)?)\n+    } else {\n+        prefix\n+    };\n+\n+    let segment = path.segment()?;\n+    let res = match segment.kind()? {\n+        ast::PathSegmentKind::Name(name_ref) => {\n+            match hygiene.name_ref_to_name(name_ref) {\n+                Either::Left(name) => {\n+                    // no type args in use\n+                    let mut res = prefix.unwrap_or_else(|| Path {\n+                        kind: PathKind::Plain,\n+                        segments: Vec::with_capacity(1),\n+                    });\n+                    res.segments.push(PathSegment {\n+                        name,\n+                        args_and_bindings: None, // no type args in use\n+                    });\n+                    res\n+                }\n+                Either::Right(crate_id) => {\n+                    return Some(Path::from_simple_segments(\n+                        PathKind::DollarCrate(crate_id),\n+                        iter::empty(),\n+                    ))\n+                }\n+            }\n+        }\n+        ast::PathSegmentKind::CrateKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path::from_simple_segments(PathKind::Crate, iter::empty())\n+        }\n+        ast::PathSegmentKind::SelfKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path::from_simple_segments(PathKind::Self_, iter::empty())\n+        }\n+        ast::PathSegmentKind::SuperKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path::from_simple_segments(PathKind::Super, iter::empty())\n+        }\n+        ast::PathSegmentKind::Type { .. } => {\n+            // not allowed in imports\n+            return None;\n+        }\n+    };\n+    Some(res)\n+}"}]}