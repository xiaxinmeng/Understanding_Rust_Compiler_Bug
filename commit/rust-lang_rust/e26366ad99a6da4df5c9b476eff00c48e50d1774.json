{"sha": "e26366ad99a6da4df5c9b476eff00c48e50d1774", "node_id": "C_kwDOAAsO6NoAKGUyNjM2NmFkOTlhNmRhNGRmNWM5YjQ3NmVmZjAwYzQ4ZTUwZDE3NzQ", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-13T19:03:22Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-12-28T01:59:21Z"}, "message": "[WIP] UPDATE - migrate intrinsic.rs to new diagnostic infrastructure\n\nWIP - replacing span_invalid_monomorphization_error function. Still in progress due to its use in codegen_llvm inside macros", "tree": {"sha": "9e49dc2ff0bb1f0f76c9eaafa752e4abed816d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e49dc2ff0bb1f0f76c9eaafa752e4abed816d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e26366ad99a6da4df5c9b476eff00c48e50d1774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e26366ad99a6da4df5c9b476eff00c48e50d1774", "html_url": "https://github.com/rust-lang/rust/commit/e26366ad99a6da4df5c9b476eff00c48e50d1774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e26366ad99a6da4df5c9b476eff00c48e50d1774/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d41112a8c5f0b85649b4f0e1663edf15f7f2601e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41112a8c5f0b85649b4f0e1663edf15f7f2601e", "html_url": "https://github.com/rust-lang/rust/commit/d41112a8c5f0b85649b4f0e1663edf15f7f2601e"}], "stats": {"total": 134, "additions": 74, "deletions": 60}, "files": [{"sha": "82c6c3894947808c2e8bbc233dc9527257cd33e3", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e26366ad99a6da4df5c9b476eff00c48e50d1774", "patch": "@@ -10,6 +10,7 @@ use crate::value::Value;\n use rustc_codegen_ssa::base::{compare_simd_types, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n+use rustc_codegen_ssa::errors::InvalidMonomorphization;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n@@ -284,15 +285,11 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                         _ => bug!(),\n                     },\n                     None => {\n-                        span_invalid_monomorphization_error(\n-                            tcx.sess,\n+                        tcx.sess.emit_err(InvalidMonomorphization::BasicIntegerType {\n                             span,\n-                            &format!(\n-                                \"invalid monomorphization of `{}` intrinsic: \\\n-                                      expected basic integer type, found `{}`\",\n-                                name, ty\n-                            ),\n-                        );\n+                            name,\n+                            ty,\n+                        });\n                         return;\n                     }\n                 }"}, {"sha": "7303ab9679759583b8cef9fdb8fb24c90185fb93", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=e26366ad99a6da4df5c9b476eff00c48e50d1774", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{\n     IntoDiagnosticArg,\n };\n use rustc_macros::Diagnostic;\n+use rustc_middle::ty::Ty;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n use std::io::Error;\n@@ -589,3 +590,45 @@ pub struct ShuffleIndicesEvaluation {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_missing_memory_ordering)]\n+pub struct MissingMemoryOrdering;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unknown_atomic_ordering)]\n+pub struct UnknownAtomicOrdering;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_atomic_compare_exchange)]\n+pub struct AtomicCompareExchange;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unknown_atomic_operation)]\n+pub struct UnknownAtomicOperation;\n+\n+#[derive(Diagnostic)]\n+pub enum InvalidMonomorphization<'tcx> {\n+    #[diag(codegen_ssa_invalid_monomorphization_basic_integer_type, code = \"E0511\")]\n+    BasicIntegerType {\n+        #[primary_span]\n+        span: Span,\n+        name: Symbol,\n+        ty: Ty<'tcx>,\n+    },\n+\n+    #[diag(codegen_ssa_invalid_monomorphization_basic_float_type, code = \"E0511\")]\n+    BasicFloatType {\n+        #[primary_span]\n+        span: Span,\n+        name: Symbol,\n+        ty: Ty<'tcx>,\n+    },\n+\n+    #[diag(codegen_ssa_invalid_monomorphization_float_to_int_unchecked, code = \"E0511\")]\n+    FloatToIntUnchecked {\n+        #[primary_span]\n+        span: Span,\n+        ty: Ty<'tcx>,\n+    },\n+}"}, {"sha": "766dc74cbbb6a39e66dd5dbacd6c82b80a821125", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 52, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=e26366ad99a6da4df5c9b476eff00c48e50d1774", "patch": "@@ -1,7 +1,9 @@\n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n use super::FunctionCx;\n-use crate::common::{span_invalid_monomorphization_error, IntPredicate};\n+use crate::common::IntPredicate;\n+use crate::errors;\n+use crate::errors::InvalidMonomorphization;\n use crate::glue;\n use crate::meth;\n use crate::traits::*;\n@@ -305,15 +307,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         _ => bug!(),\n                     },\n                     None => {\n-                        span_invalid_monomorphization_error(\n-                            bx.tcx().sess,\n-                            span,\n-                            &format!(\n-                                \"invalid monomorphization of `{}` intrinsic: \\\n-                                      expected basic integer type, found `{}`\",\n-                                name, ty\n-                            ),\n-                        );\n+                        bx.tcx().sess.emit_err(InvalidMonomorphization::BasicIntegerType { span, name, ty });\n                         return;\n                     }\n                 }\n@@ -329,45 +323,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         _ => bug!(),\n                     },\n                     None => {\n-                        span_invalid_monomorphization_error(\n-                            bx.tcx().sess,\n-                            span,\n-                            &format!(\n-                                \"invalid monomorphization of `{}` intrinsic: \\\n-                                      expected basic float type, found `{}`\",\n-                                name, arg_tys[0]\n-                            ),\n-                        );\n+                        bx.tcx().sess.emit_err(InvalidMonomorphization::BasicFloatType { span, name, ty: arg_tys[0] });\n                         return;\n                     }\n                 }\n             }\n \n             sym::float_to_int_unchecked => {\n                 if float_type_width(arg_tys[0]).is_none() {\n-                    span_invalid_monomorphization_error(\n-                        bx.tcx().sess,\n-                        span,\n-                        &format!(\n-                            \"invalid monomorphization of `float_to_int_unchecked` \\\n-                                  intrinsic: expected basic float type, \\\n-                                  found `{}`\",\n-                            arg_tys[0]\n-                        ),\n-                    );\n+                    bx.tcx().sess.emit_err(InvalidMonomorphization::FloatToIntUnchecked { span, ty: arg_tys[0] });\n                     return;\n                 }\n                 let Some((_width, signed)) = int_type_width_signed(ret_ty, bx.tcx()) else {\n-                    span_invalid_monomorphization_error(\n-                        bx.tcx().sess,\n-                        span,\n-                        &format!(\n-                            \"invalid monomorphization of `float_to_int_unchecked` \\\n-                                    intrinsic:  expected basic integer type, \\\n-                                    found `{}`\",\n-                            ret_ty\n-                        ),\n-                    );\n+                    bx.tcx().sess.emit_err(InvalidMonomorphization::FloatToIntUnchecked { span, ty: ret_ty });\n                     return;\n                 };\n                 if signed {\n@@ -402,7 +370,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 use crate::common::{AtomicRmwBinOp, SynchronizationScope};\n \n                 let Some((instruction, ordering)) = atomic.split_once('_') else {\n-                    bx.sess().fatal(\"Atomic intrinsic missing memory ordering\");\n+                    bx.sess().emit_fatal(errors::MissingMemoryOrdering);\n                 };\n \n                 let parse_ordering = |bx: &Bx, s| match s {\n@@ -412,25 +380,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     \"release\" => Release,\n                     \"acqrel\" => AcquireRelease,\n                     \"seqcst\" => SequentiallyConsistent,\n-                    _ => bx.sess().fatal(\"unknown ordering in atomic intrinsic\"),\n+                    _ => bx.sess().emit_fatal(errors::UnknownAtomicOrdering),\n                 };\n \n                 let invalid_monomorphization = |ty| {\n-                    span_invalid_monomorphization_error(\n-                        bx.tcx().sess,\n-                        span,\n-                        &format!(\n-                            \"invalid monomorphization of `{}` intrinsic: \\\n-                                  expected basic integer type, found `{}`\",\n-                            name, ty\n-                        ),\n-                    );\n+                    bx.tcx().sess.emit_err(InvalidMonomorphization::BasicIntegerType { span, name, ty });\n                 };\n \n                 match instruction {\n                     \"cxchg\" | \"cxchgweak\" => {\n                         let Some((success, failure)) = ordering.split_once('_') else {\n-                            bx.sess().fatal(\"Atomic compare-exchange intrinsic missing failure memory ordering\");\n+                            bx.sess().emit_fatal(errors::AtomicCompareExchange);\n                         };\n                         let ty = substs.type_at(0);\n                         if int_type_width_signed(ty, bx.tcx()).is_some() || ty.is_unsafe_ptr() {\n@@ -529,7 +489,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             \"min\" => AtomicRmwBinOp::AtomicMin,\n                             \"umax\" => AtomicRmwBinOp::AtomicUMax,\n                             \"umin\" => AtomicRmwBinOp::AtomicUMin,\n-                            _ => bx.sess().fatal(\"unknown atomic operation\"),\n+                            _ => bx.sess().emit_fatal(errors::UnknownAtomicOperation),\n                         };\n \n                         let ty = substs.type_at(0);"}, {"sha": "889d290037190f60fac7a36d953efbe69a5e338f", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e26366ad99a6da4df5c9b476eff00c48e50d1774/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=e26366ad99a6da4df5c9b476eff00c48e50d1774", "patch": "@@ -205,3 +205,17 @@ codegen_ssa_invalid_windows_subsystem = invalid windows subsystem `{$subsystem}`\n codegen_ssa_erroneous_constant = erroneous constant encountered\n \n codegen_ssa_shuffle_indices_evaluation = could not evaluate shuffle_indices at compile time\n+\n+codegen_ssa_missing_memory_ordering = Atomic intrinsic missing memory ordering\n+\n+codegen_ssa_unknown_atomic_ordering = unknown ordering in atomic intrinsic\n+\n+codegen_ssa_atomic_compare_exchange = Atomic compare-exchange intrinsic missing failure memory ordering\n+\n+codegen_ssa_unknown_atomic_operation = unknown atomic operation\n+\n+codegen_ssa_invalid_monomorphization_basic_integer_type = invalid monomorphization of `{$name}` intrinsic: expected basic integer type, found `{$ty}`\n+\n+codegen_ssa_invalid_monomorphization_basic_float_type = invalid monomorphization of `{$name}` intrinsic: expected basic float type, found `{$ty}`\n+\n+codegen_ssa_invalid_monomorphization_float_to_int_unchecked = invalid monomorphization of `float_to_int_unchecked` intrinsic: expected basic float type, found `{$ty}`"}]}