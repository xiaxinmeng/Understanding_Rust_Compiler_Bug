{"sha": "a924b8a8fbb59d704082437d2aa2e445ec6da14b", "node_id": "C_kwDOAAsO6NoAKGE5MjRiOGE4ZmJiNTlkNzA0MDgyNDM3ZDJhYTJlNDQ1ZWM2ZGExNGI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-09-17T17:45:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-09-17T17:48:06Z"}, "message": "Release notes update\n\nCo-authored-by: Tyler Mandry <tmandry@gmail.com>\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "727b9031eaf0d4b4a919ab4e13d64d68f196c990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727b9031eaf0d4b4a919ab4e13d64d68f196c990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a924b8a8fbb59d704082437d2aa2e445ec6da14b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a924b8a8fbb59d704082437d2aa2e445ec6da14b", "html_url": "https://github.com/rust-lang/rust/commit/a924b8a8fbb59d704082437d2aa2e445ec6da14b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a924b8a8fbb59d704082437d2aa2e445ec6da14b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672831a5c890f51d3222511ab2575ca7a86c8e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/672831a5c890f51d3222511ab2575ca7a86c8e20", "html_url": "https://github.com/rust-lang/rust/commit/672831a5c890f51d3222511ab2575ca7a86c8e20"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "51c25030cad64d363aecabb50567ac3ab7cf287b", "filename": "RELEASES.md", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/a924b8a8fbb59d704082437d2aa2e445ec6da14b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a924b8a8fbb59d704082437d2aa2e445ec6da14b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a924b8a8fbb59d704082437d2aa2e445ec6da14b", "patch": "@@ -1,3 +1,155 @@\n+Version 1.64.0 (2022-09-22)\n+===========================\n+\n+Language\n+--------\n+- [make `const_err` show up in future breakage reports](https://github.com/rust-lang/rust/pull/97743/)\n+- [allow unions with mutable references and tuples of allowed types](https://github.com/rust-lang/rust/pull/97995/)\n+- It is now considered valid to deallocate memory pointed to by a shared reference `&T` [if every byte in `T` is inside an `UnsafeCell`](https://github.com/rust-lang/rust/pull/98017/)\n+- Unused tuple struct fields are now warned against in an allow-by-default lint, [`unused_tuple_struct_fields`](https://github.com/rust-lang/rust/pull/95977/), similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.\n+\n+Compiler\n+--------\n+- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n+- [Keep unstable target features for asm feature checking](https://github.com/rust-lang/rust/pull/99155/)\n+- [Add Nintendo Switch as tier 3 target](https://github.com/rust-lang/rust/pull/88991/)\n+  - Refer to Rust's [platform support page][platform-support-doc] for more\n+    information on Rust's tiered platform support.\n+- [Only compile #[used] as llvm.compiler.used for ELF targets](https://github.com/rust-lang/rust/pull/93718/)\n+- [sess: stabilize `-Zterminal-width` as `--diagnostic-width`](https://github.com/rust-lang/rust/pull/95635/)\n+- [Fix repr(align) enum handling](https://github.com/rust-lang/rust/pull/96814/)\n+- [Suggest defining variable as mutable on `&mut _` type mismatch in pats](https://github.com/rust-lang/rust/pull/98431/)\n+- [Emit warning when named arguments are used positionally in format](https://github.com/rust-lang/rust/pull/98580/)\n+- [Add support for link-flavor rust-lld for iOS, tvOS and watchOS](https://github.com/rust-lang/rust/pull/98771/)\n+- [Do not mention private types from other crates as impl candidates](https://github.com/rust-lang/rust/pull/99091/)\n+\n+Libraries\n+---------\n+- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n+- [Remove restrictions on compare-exchange memory ordering.](https://github.com/rust-lang/rust/pull/98383/)\n+- You can now `write!` or `writeln!` into an `OsString`: [Implement `fmt::Write` for `OsString`](https://github.com/rust-lang/rust/pull/97915/)\n+- [Enforce that layout size fits in isize in Layout](https://github.com/rust-lang/rust/pull/95295/)\n+- [Make RwLockReadGuard covariant](https://github.com/rust-lang/rust/pull/96820/)\n+- [Implement `FusedIterator` for `std::net::[Into]Incoming`](https://github.com/rust-lang/rust/pull/97300/)\n+- [`impl<T: AsRawFd> AsRawFd for {Arc,Box}<T>`](https://github.com/rust-lang/rust/pull/97437/)\n+- [ptr::copy and ptr::swap are doing untyped copies](https://github.com/rust-lang/rust/pull/97712/)\n+- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n+- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n+- [Add cgroupv1 support to `available_parallelism`](https://github.com/rust-lang/rust/pull/97925/)\n+- [mem::uninitialized: mitigate many incorrect uses of this function](https://github.com/rust-lang/rust/pull/99182/)\n+\n+Stabilized APIs\n+---------------\n+\n+- [`ffi::CStr`](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html)\n+- [`ffi::CString`](https://doc.rust-lang.org/stable/std/ffi/struct.CString.html)\n+- [`ffi::FromBytesWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromBytesWithNulError.html)\n+- [`ffi::FromVecWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromVecWithNulError.html)\n+- [`ffi::IntoStringError`](https://doc.rust-lang.org/stable/std/ffi/struct.IntoStringError.html)\n+- [`ffi::NulError`](https://doc.rust-lang.org/stable/std/ffi/struct.NulError.html)\n+- [`ffi::c_char`](https://doc.rust-lang.org/stable/std/ffi/type.c_char.html)\n+- [`ffi::c_double`](https://doc.rust-lang.org/stable/std/ffi/type.c_double.html)\n+- [`ffi::c_float`](https://doc.rust-lang.org/stable/std/ffi/type.c_float.html)\n+- [`ffi::c_int`](https://doc.rust-lang.org/stable/std/ffi/type.c_int.html)\n+- [`ffi::c_long`](https://doc.rust-lang.org/stable/std/ffi/type.c_long.html)\n+- [`ffi::c_longlong`](https://doc.rust-lang.org/stable/std/ffi/type.c_longlong.html)\n+- [`ffi::c_schar`](https://doc.rust-lang.org/stable/std/ffi/type.c_schar.html)\n+- [`ffi::c_short`](https://doc.rust-lang.org/stable/std/ffi/type.c_short.html)\n+- [`ffi::c_uchar`](https://doc.rust-lang.org/stable/std/ffi/type.c_uchar.html)\n+- [`ffi::c_uint`](https://doc.rust-lang.org/stable/std/ffi/type.c_uint.html)\n+- [`ffi::c_ulong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulong.html)\n+- [`ffi::c_ulonglong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulonglong.html)\n+- [`ffi::c_ushort`](https://doc.rust-lang.org/stable/std/ffi/type.c_ushort.html)\n+- [`future::IntoFuture`](https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html)\n+- [`future::poll_fn`](https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html)\n+- [`task::ready!`](https://doc.rust-lang.org/stable/std/task/macro.ready.html)\n+- [`num::NonZero*::checked_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_mul)\n+- [`num::NonZero*::checked_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_pow)\n+- [`num::NonZero*::saturating_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_mul)\n+- [`num::NonZero*::saturating_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_pow)\n+- [`num::NonZeroI*::abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.abs)\n+- [`num::NonZeroI*::checked_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.checked_abs)\n+- [`num::NonZeroI*::overflowing_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.overflowing_abs)\n+- [`num::NonZeroI*::saturating_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.saturating_abs)\n+- [`num::NonZeroI*::unsigned_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.unsigned_abs)\n+- [`num::NonZeroI*::wrapping_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.wrapping_abs)\n+- [`num::NonZeroU*::checked_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_add)\n+- [`num::NonZeroU*::checked_next_power_of_two`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_next_power_of_two)\n+- [`num::NonZeroU*::saturating_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_add)\n+- [`os::unix::process::CommandExt::process_group`](https://doc.rust-lang.org/stable/std/os/unix/process/trait.CommandExt.html#tymethod.process_group)\n+- [`os::windows::fs::FileTypeExt::is_symlink_dir`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir)\n+- [`os::windows::fs::FileTypeExt::is_symlink_file`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file)\n+\n+These APIs are now usable in const contexts:\n+\n+- [`slice::from_raw_parts`](https://doc.rust-lang.org/stable/core/slice/fn.from_raw_parts.html)\n+\n+Cargo\n+-----\n+- Packages can now inherit settings from the workspace so that the settings\n+  can be centralized in one place. See\n+  [`workspace.package`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacepackage-table)\n+  and\n+  [`workspace.dependencies`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacedependencies-table)\n+  for more details on how to define these common settings.\n+  [#10859](https://github.com/rust-lang/cargo/pull/10859)\n+- Cargo commands can now accept multiple `--target` flags to build for\n+  multiple targets at once, and the\n+  [`build.target`](https://doc.rust-lang.org/nightly/cargo/reference/config.html#buildtarget)\n+  config option may now take an array of multiple targets.\n+  [#10766](https://github.com/rust-lang/cargo/pull/10766)\n+- The `--jobs` argument can now take a negative number to count backwards from\n+  the max CPUs.\n+  [#10844](https://github.com/rust-lang/cargo/pull/10844)\n+- `cargo add` will now update `Cargo.lock`.\n+  [#10902](https://github.com/rust-lang/cargo/pull/10902)\n+- Added the\n+  [`--crate-type`](https://doc.rust-lang.org/nightly/cargo/commands/cargo-rustc.html#option-cargo-rustc---crate-type)\n+  flag to `cargo rustc` to override the crate type.\n+  [#10838](https://github.com/rust-lang/cargo/pull/10838)\n+- Significantly improved the performance fetching git dependencies from GitHub\n+  when using a hash in the `rev` field.\n+  [#10079](https://github.com/rust-lang/cargo/pull/10079)\n+\n+Misc\n+----\n+- [Let rust-analyzer ship on stable, non-preview](https://github.com/rust-lang/rust/pull/98640/)\n+\n+Compatibility Notes\n+-------------------\n+- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n+- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n+- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n+- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n+- [The Drop behavior of C-like enums cast to ints has changed](https://github.com/rust-lang/rust/pull/96862/). These are already discouraged by a compiler warning.\n+- [Relate late-bound closure lifetimes to parent fn in NLL](https://github.com/rust-lang/rust/pull/98835/)\n+- [Errors at const-eval time are now in future incompatibility reports](https://github.com/rust-lang/rust/pull/97743/)\n+- On the `thumbv6m-none-eabi` target, some incorrect `asm!` statements were erroneously accepted if they used the high registers (r8 to r14) as an input/output operand. [This is no longer accepted](https://github.com/rust-lang/rust/pull/99155/).\n+- [`impl Trait` was accidentally accepted as the associated type value of return-position `impl Trait`](https://github.com/rust-lang/rust/pull/97346/), without fulfilling all the trait bounds of that associated type, as long as the hidden type satisfies said bounds. This has been fixed.\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- Windows builds now use profile-guided optimization, providing 10-20% improvements to compiler performance: [Utilize PGO for windows x64 rustc dist builds](https://github.com/rust-lang/rust/pull/96978/)\n+- [Stop keeping metadata in memory before writing it to disk](https://github.com/rust-lang/rust/pull/96544/)\n+- [compiletest: strip debuginfo by default for mode=ui](https://github.com/rust-lang/rust/pull/98140/)\n+- Many improvements to generated code for derives, including performance improvements:\n+  - [Don't use match-destructuring for derived ops on structs.](https://github.com/rust-lang/rust/pull/98446/)\n+  - [Many small deriving cleanups](https://github.com/rust-lang/rust/pull/98741/)\n+  - [More derive output improvements](https://github.com/rust-lang/rust/pull/98758/)\n+  - [Clarify deriving code](https://github.com/rust-lang/rust/pull/98915/)\n+  - [Final derive output improvements](https://github.com/rust-lang/rust/pull/99046/)\n+  - [Stop injecting `#[allow(unused_qualifications)]` in generated `derive` implementations](https://github.com/rust-lang/rust/pull/99485/)\n+  - [Improve `derive(Debug)`](https://github.com/rust-lang/rust/pull/98190/)\n+- [Bump to clap 3](https://github.com/rust-lang/rust/pull/98213/)\n+- [fully move dropck to mir](https://github.com/rust-lang/rust/pull/98641/)\n+- [Optimize `Vec::insert` for the case where `index == len`.](https://github.com/rust-lang/rust/pull/98755/)\n+- [Convert rust-analyzer to an in-tree tool](https://github.com/rust-lang/rust/pull/99603/)\n+\n Version 1.63.0 (2022-08-11)\n ==========================\n "}]}