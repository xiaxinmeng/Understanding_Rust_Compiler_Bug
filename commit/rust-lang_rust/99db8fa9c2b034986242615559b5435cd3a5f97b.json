{"sha": "99db8fa9c2b034986242615559b5435cd3a5f97b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZGI4ZmE5YzJiMDM0OTg2MjQyNjE1NTU5YjU0MzVjZDNhNWY5N2I=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-05T03:36:38Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-18T07:31:51Z"}, "message": "Remove box syntax from rustc_mir", "tree": {"sha": "fe498d87b6598c6a6f7b9fc177a769c14ccd98e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe498d87b6598c6a6f7b9fc177a769c14ccd98e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99db8fa9c2b034986242615559b5435cd3a5f97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99db8fa9c2b034986242615559b5435cd3a5f97b", "html_url": "https://github.com/rust-lang/rust/commit/99db8fa9c2b034986242615559b5435cd3a5f97b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99db8fa9c2b034986242615559b5435cd3a5f97b/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdadc4d8d905065eaa88245010585cbfbb6cc92", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdadc4d8d905065eaa88245010585cbfbb6cc92", "html_url": "https://github.com/rust-lang/rust/commit/dcdadc4d8d905065eaa88245010585cbfbb6cc92"}], "stats": {"total": 220, "additions": 119, "deletions": 101}, "files": [{"sha": "9f7decad969004ef2e2b72c766e2d87cc8967f0a", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -464,12 +464,12 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let body_with_facts = if return_body_with_facts {\n         let output_facts = mbcx.polonius_output.expect(\"Polonius output was not computed\");\n-        Some(box BodyWithBorrowckFacts {\n+        Some(Box::new(BodyWithBorrowckFacts {\n             body: body_owned,\n             input_facts: *polonius_input.expect(\"Polonius input facts were not generated\"),\n             output_facts,\n             location_table: location_table_owned,\n-        })\n+        }))\n     } else {\n         None\n     };"}, {"sha": "e439a247c7f6cbdd036dc0f66be9c4ca94f49b5a", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -11,7 +11,6 @@ Rust MIR: a lowered representation of Rust.\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]"}, {"sha": "8c3d828894c8ef4f105d35474a4d49991e46dbaf", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -174,7 +174,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n                 0,\n                 Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::Raw, box (dropee_ptr)),\n+                    kind: StatementKind::Retag(RetagKind::Raw, Box::new(dropee_ptr)),\n                 },\n             );\n         }\n@@ -388,10 +388,10 @@ impl CloneShimBuilder<'tcx> {\n \n     fn copy_shim(&mut self) {\n         let rcvr = self.tcx.mk_place_deref(Place::from(Local::new(1 + 0)));\n-        let ret_statement = self.make_statement(StatementKind::Assign(box (\n+        let ret_statement = self.make_statement(StatementKind::Assign(Box::new((\n             Place::return_place(),\n             Rvalue::Use(Operand::Copy(rcvr)),\n-        )));\n+        ))));\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n     }\n \n@@ -418,22 +418,22 @@ impl CloneShimBuilder<'tcx> {\n \n         // `func == Clone::clone(&ty) -> ty`\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n-        let func = Operand::Constant(box Constant {\n+        let func = Operand::Constant(Box::new(Constant {\n             span: self.span,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, func_ty).into(),\n-        });\n+        }));\n \n         let ref_loc = self.make_place(\n             Mutability::Not,\n             tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut { ty, mutbl: hir::Mutability::Not }),\n         );\n \n         // `let ref_loc: &ty = &src;`\n-        let statement = self.make_statement(StatementKind::Assign(box (\n+        let statement = self.make_statement(StatementKind::Assign(Box::new((\n             ref_loc,\n             Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src),\n-        )));\n+        ))));\n \n         // `let loc = Clone::clone(ref_loc);`\n         self.block(\n@@ -461,10 +461,10 @@ impl CloneShimBuilder<'tcx> {\n         let tcx = self.tcx;\n \n         let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n-        let compute_cond = self.make_statement(StatementKind::Assign(box (\n+        let compute_cond = self.make_statement(StatementKind::Assign(Box::new((\n             cond,\n-            Rvalue::BinaryOp(BinOp::Ne, box (Operand::Copy(end), Operand::Copy(beg))),\n-        )));\n+            Rvalue::BinaryOp(BinOp::Ne, Box::new((Operand::Copy(end), Operand::Copy(beg)))),\n+        ))));\n \n         // `if end != beg { goto loop_body; } else { goto loop_end; }`\n         self.block(\n@@ -475,11 +475,11 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn make_usize(&self, value: u64) -> Box<Constant<'tcx>> {\n-        box Constant {\n+        Box::new(Constant {\n             span: self.span,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx, value).into(),\n-        }\n+        })\n     }\n \n     fn array_shim(\n@@ -500,18 +500,18 @@ impl CloneShimBuilder<'tcx> {\n         // `let end = len;`\n         // `goto #1;`\n         let inits = vec![\n-            self.make_statement(StatementKind::Assign(box (\n+            self.make_statement(StatementKind::Assign(Box::new((\n                 Place::from(beg),\n                 Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-            ))),\n-            self.make_statement(StatementKind::Assign(box (\n+            )))),\n+            self.make_statement(StatementKind::Assign(Box::new((\n                 end,\n-                Rvalue::Use(Operand::Constant(box Constant {\n+                Rvalue::Use(Operand::Constant(Box::new(Constant {\n                     span: self.span,\n                     user_ty: None,\n                     literal: len.into(),\n-                })),\n-            ))),\n+                }))),\n+            )))),\n         ];\n         self.block(inits, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n \n@@ -532,13 +532,13 @@ impl CloneShimBuilder<'tcx> {\n         // BB #3\n         // `beg = beg + 1;`\n         // `goto #1`;\n-        let statements = vec![self.make_statement(StatementKind::Assign(box (\n+        let statements = vec![self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n+                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n             ),\n-        )))];\n+        ))))];\n         self.block(statements, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n \n         // BB #4\n@@ -551,10 +551,10 @@ impl CloneShimBuilder<'tcx> {\n         // goto #6;\n         let end = beg;\n         let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n-        let init = self.make_statement(StatementKind::Assign(box (\n+        let init = self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-        )));\n+        ))));\n         self.block(vec![init], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n \n         // BB #6 (cleanup): loop {\n@@ -585,13 +585,13 @@ impl CloneShimBuilder<'tcx> {\n         // BB #8 (cleanup)\n         // `beg = beg + 1;`\n         // `goto #6;`\n-        let statement = self.make_statement(StatementKind::Assign(box (\n+        let statement = self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n+                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n             ),\n-        )));\n+        ))));\n         self.block(vec![statement], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n \n         // BB #9 (resume)\n@@ -748,10 +748,10 @@ fn build_call_shim<'tcx>(\n             let borrow_kind = BorrowKind::Mut { allow_two_phase_borrow: false };\n             statements.push(Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (\n+                kind: StatementKind::Assign(Box::new((\n                     Place::from(ref_rcvr),\n                     Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_place()),\n-                )),\n+                ))),\n             });\n             Operand::Move(Place::from(ref_rcvr))\n         }\n@@ -765,11 +765,11 @@ fn build_call_shim<'tcx>(\n         CallKind::Direct(def_id) => {\n             let ty = tcx.type_of(def_id);\n             (\n-                Operand::Constant(box Constant {\n+                Operand::Constant(Box::new(Constant {\n                     span,\n                     user_ty: None,\n                     literal: ty::Const::zero_sized(tcx, ty).into(),\n-                }),\n+                })),\n                 rcvr.into_iter().collect::<Vec<_>>(),\n             )\n         }"}, {"sha": "cb608819ea8acd5def7099ad8c6cc9bf06278ed4", "filename": "compiler/rustc_mir/src/transform/add_retag.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 0..0,\n                 places.map(|place| Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::FnEntry, box (place)),\n+                    kind: StatementKind::Retag(RetagKind::FnEntry, Box::new(place)),\n                 }),\n             );\n         }\n@@ -137,7 +137,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 0,\n                 Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::Default, box (dest_place)),\n+                    kind: StatementKind::Retag(RetagKind::Default, Box::new(dest_place)),\n                 },\n             );\n         }\n@@ -175,7 +175,10 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 let source_info = block_data.statements[i].source_info;\n                 block_data.statements.insert(\n                     i + 1,\n-                    Statement { source_info, kind: StatementKind::Retag(retag_kind, box (place)) },\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Retag(retag_kind, Box::new(place)),\n+                    },\n                 );\n             }\n         }"}, {"sha": "d78ad6ce97fa23697cb768ba90ed40efecaa81df", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -491,15 +491,19 @@ fn bcb_filtered_successors<'a, 'tcx>(\n     term_kind: &'tcx TerminatorKind<'tcx>,\n ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a> {\n     let mut successors = term_kind.successors();\n-    box match &term_kind {\n-        // SwitchInt successors are never unwind, and all of them should be traversed.\n-        TerminatorKind::SwitchInt { .. } => successors,\n-        // For all other kinds, return only the first successor, if any, and ignore unwinds.\n-        // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n-        // `next().into_iter()`) into the `mir::Successors` aliased type.\n-        _ => successors.next().into_iter().chain(&[]),\n-    }\n-    .filter(move |&&successor| body[successor].terminator().kind != TerminatorKind::Unreachable)\n+    Box::new(\n+        match &term_kind {\n+            // SwitchInt successors are never unwind, and all of them should be traversed.\n+            TerminatorKind::SwitchInt { .. } => successors,\n+            // For all other kinds, return only the first successor, if any, and ignore unwinds.\n+            // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n+            // `next().into_iter()`) into the `mir::Successors` aliased type.\n+            _ => successors.next().into_iter().chain(&[]),\n+        }\n+        .filter(move |&&successor| {\n+            body[successor].terminator().kind != TerminatorKind::Unreachable\n+        }),\n+    )\n }\n \n /// Maintains separate worklists for each loop in the BasicCoverageBlock CFG, plus one for the"}, {"sha": "406a8832d267b89c974d2b1a68f02045fc029b79", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -478,10 +478,10 @@ fn inject_statement(\n     let source_info = data.terminator().source_info;\n     let statement = Statement {\n         source_info,\n-        kind: StatementKind::Coverage(box Coverage {\n+        kind: StatementKind::Coverage(Box::new(Coverage {\n             kind: counter_kind,\n             code_region: some_code_region,\n-        }),\n+        })),\n     };\n     data.statements.insert(0, statement);\n }\n@@ -495,7 +495,7 @@ fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: Co\n     let source_info = data.terminator().source_info;\n     let statement = Statement {\n         source_info,\n-        kind: StatementKind::Coverage(box Coverage { kind: expression, code_region: None }),\n+        kind: StatementKind::Coverage(Box::new(Coverage { kind: expression, code_region: None })),\n     };\n     data.statements.push(statement);\n }"}, {"sha": "14dd0a8b9245bdd83f121f616d6b356443ed53ec", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -44,11 +44,11 @@ const TEMP_BLOCK: BasicBlock = BasicBlock::MAX;\n \n fn dummy_ty() -> &'static TyS<'static> {\n     thread_local! {\n-        static DUMMY_TYS: &'static TyS<'static> = Box::leak(box TyS::make_for_test(\n+        static DUMMY_TYS: &'static TyS<'static> = Box::leak(Box::new(TyS::make_for_test(\n             ty::Bool,\n             TypeFlags::empty(),\n             DebruijnIndex::from_usize(0),\n-        ));\n+        )));\n     }\n \n     &DUMMY_TYS.with(|tys| *tys)"}, {"sha": "e507bcb0f812c94be1884433e8ad091795270916", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -96,14 +96,14 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 opt_to_apply.infos[0].first_switch_info.discr_used_in_switch;\n             let not_equal_rvalue = Rvalue::BinaryOp(\n                 not_equal,\n-                box (\n+                Box::new((\n                     Operand::Copy(Place::from(second_discriminant_temp)),\n                     Operand::Copy(first_descriminant_place),\n-                ),\n+                )),\n             );\n             patch.add_statement(\n                 end_of_block_location,\n-                StatementKind::Assign(box (Place::from(not_equal_temp), not_equal_rvalue)),\n+                StatementKind::Assign(Box::new((Place::from(not_equal_temp), not_equal_rvalue))),\n             );\n \n             let new_targets = opt_to_apply"}, {"sha": "9b44af06b7dee5efa298f0b91c88134b9890fc82", "filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -409,7 +409,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(box (place, Rvalue::Use(value.clone()))),\n+            kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value.clone())))),\n             source_info: terminator.source_info,\n         };\n "}, {"sha": "963f93a1acec1d32fd4bc9eace81795dba5f1005", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -274,7 +274,7 @@ impl TransformVisitor<'tcx> {\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant {\n-                place: box self_place,\n+                place: Box::new(self_place),\n                 variant_index: state_disc,\n             },\n         }\n@@ -289,7 +289,7 @@ impl TransformVisitor<'tcx> {\n         let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n             source_info: SourceInfo::outermost(body.span),\n-            kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n+            kind: StatementKind::Assign(Box::new((temp, Rvalue::Discriminant(self_place)))),\n         };\n         (assign, temp)\n     }\n@@ -954,7 +954,7 @@ fn create_generator_drop_shim<'tcx>(\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(SELF_ARG)),\n+                kind: StatementKind::Retag(RetagKind::Raw, Box::new(Place::from(SELF_ARG))),\n             },\n         )\n     }\n@@ -984,11 +984,11 @@ fn insert_panic_block<'tcx>(\n ) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Assert {\n-        cond: Operand::Constant(box Constant {\n+        cond: Operand::Constant(Box::new(Constant {\n             span: body.span,\n             user_ty: None,\n             literal: ty::Const::from_bool(tcx, false).into(),\n-        }),\n+        })),\n         expected: true,\n         msg: message,\n         target: assert_block,\n@@ -1207,10 +1207,10 @@ fn create_cases<'tcx>(\n                     let resume_arg = Local::new(2); // 0 = return, 1 = self\n                     statements.push(Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             point.resume_arg,\n                             Rvalue::Use(Operand::Move(resume_arg.into())),\n-                        )),\n+                        ))),\n                     });\n                 }\n \n@@ -1287,10 +1287,10 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (\n+                kind: StatementKind::Assign(Box::new((\n                     new_resume_local.into(),\n                     Rvalue::Use(Operand::Move(resume_local.into())),\n-                )),\n+                ))),\n             },\n         );\n "}, {"sha": "c333667b3ad135490357a6fc74e15925409dc072", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -520,7 +520,7 @@ impl Inliner<'tcx> {\n                         let temp = Place::from(self.new_call_temp(caller_body, &callsite, dest_ty));\n                         caller_body[callsite.block].statements.push(Statement {\n                             source_info: callsite.source_info,\n-                            kind: StatementKind::Assign(box (temp, dest)),\n+                            kind: StatementKind::Assign(Box::new((temp, dest))),\n                         });\n                         self.tcx.mk_place_deref(temp)\n                     } else {\n@@ -729,7 +729,7 @@ impl Inliner<'tcx> {\n         let local = self.new_call_temp(caller_body, callsite, arg_ty);\n         caller_body[callsite.block].statements.push(Statement {\n             source_info: callsite.source_info,\n-            kind: StatementKind::Assign(box (Place::from(local), Rvalue::Use(arg))),\n+            kind: StatementKind::Assign(Box::new((Place::from(local), Rvalue::Use(arg)))),\n         });\n         local\n     }"}, {"sha": "805f546104caede090a29ee3b99d0d597a2dbaf6", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -124,7 +124,7 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n \n                 let constant =\n                     Constant { span: source_info.span, literal: len.into(), user_ty: None };\n-                *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+                *rvalue = Rvalue::Use(Operand::Constant(Box::new(constant)));\n             }\n         }\n     }"}, {"sha": "e9f1d4f2ce827f7cb54437ba1ab943007de16b2a", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -29,14 +29,14 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         if let Some((destination, target)) = *destination {\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::Use(Operand::Constant(box Constant {\n+                                    Rvalue::Use(Operand::Constant(Box::new(Constant {\n                                         span: terminator.source_info.span,\n                                         user_ty: None,\n                                         literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n-                                    })),\n-                                )),\n+                                    }))),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -46,13 +46,13 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n-                            kind: StatementKind::CopyNonOverlapping(\n-                                box rustc_middle::mir::CopyNonOverlapping {\n+                            kind: StatementKind::CopyNonOverlapping(Box::new(\n+                                rustc_middle::mir::CopyNonOverlapping {\n                                     src: args.next().unwrap(),\n                                     dst: args.next().unwrap(),\n                                     count: args.next().unwrap(),\n                                 },\n-                            ),\n+                            )),\n                         });\n                         assert_eq!(\n                             args.next(),\n@@ -79,10 +79,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             };\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::BinaryOp(bin_op, box (lhs, rhs)),\n-                                )),\n+                                    Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -97,10 +97,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             let tp_ty = substs.type_at(0);\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n                                     Rvalue::NullaryOp(NullOp::SizeOf, tp_ty),\n-                                )),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -112,10 +112,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             let arg = tcx.mk_place_deref(arg);\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n                                     Rvalue::Discriminant(arg),\n-                                )),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }"}, {"sha": "37a3fa50a52ddc6212b8bceacbaeff9907ba89b8", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -140,11 +140,11 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };\n                             let rhs = Rvalue::BinaryOp(\n                                 op,\n-                                box (Operand::Copy(Place::from(discr_local)), const_cmp),\n+                                Box::new((Operand::Copy(Place::from(discr_local)), const_cmp)),\n                             );\n                             Statement {\n                                 source_info: f.source_info,\n-                                kind: StatementKind::Assign(box (*lhs, rhs)),\n+                                kind: StatementKind::Assign(Box::new((*lhs, rhs))),\n                             }\n                         }\n                     }\n@@ -157,7 +157,10 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                 .push(Statement { source_info, kind: StatementKind::StorageLive(discr_local) });\n             from.statements.push(Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (Place::from(discr_local), Rvalue::Use(discr))),\n+                kind: StatementKind::Assign(Box::new((\n+                    Place::from(discr_local),\n+                    Rvalue::Use(discr),\n+                ))),\n             });\n             from.statements.extend(new_stmts);\n             from.statements"}, {"sha": "822b422985cb3e009f9016f2cd619e11dc71849e", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -719,7 +719,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n             source_info: SourceInfo::outermost(span),\n-            kind: StatementKind::Assign(box (Place::from(dest), rvalue)),\n+            kind: StatementKind::Assign(Box::new((Place::from(dest), rvalue))),\n         });\n     }\n \n@@ -774,11 +774,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     if self.keep_original {\n                         rhs.clone()\n                     } else {\n-                        let unit = Rvalue::Use(Operand::Constant(box Constant {\n+                        let unit = Rvalue::Use(Operand::Constant(Box::new(Constant {\n                             span: statement.source_info.span,\n                             user_ty: None,\n                             literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit).into(),\n-                        }));\n+                        })));\n                         mem::replace(rhs, unit)\n                     },\n                     statement.source_info,"}, {"sha": "3ecb5133e3b482c90de66670b44f2d9617c2cddd", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -382,10 +382,10 @@ fn save_unreachable_coverage(\n     for (source_info, code_region) in dropped_coverage {\n         start_block.statements.push(Statement {\n             source_info,\n-            kind: StatementKind::Coverage(box Coverage {\n+            kind: StatementKind::Coverage(Box::new(Coverage {\n                 kind: CoverageKind::Unreachable,\n                 code_region: Some(code_region),\n-            }),\n+            })),\n         })\n     }\n }"}, {"sha": "7c35dab694f3cc6968120d66a0c136a08e07c936", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -420,10 +420,10 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n                 let stmt = &mut bb.statements[opt_info.stmt_to_overwrite];\n                 stmt.source_info = opt_info.source_info;\n-                stmt.kind = StatementKind::Assign(box (\n+                stmt.kind = StatementKind::Assign(Box::new((\n                     opt_info.local_0.into(),\n                     Rvalue::Use(Operand::Move(opt_info.local_1.into())),\n-                ));\n+                )));\n \n                 bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n "}, {"sha": "4bc0357cab8047c65b2defe905c5ad78d86b29ea", "filename": "compiler/rustc_mir/src/util/aggregate.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -25,7 +25,7 @@ pub fn expand_aggregate<'tcx>(\n         AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n+                    kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n                     source_info,\n                 });\n                 lhs = tcx.mk_place_downcast(lhs, adt_def, variant_index);\n@@ -37,7 +37,7 @@ pub fn expand_aggregate<'tcx>(\n             // variant 0 (Unresumed).\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n+                kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n                 source_info,\n             });\n \n@@ -66,7 +66,10 @@ pub fn expand_aggregate<'tcx>(\n                 let field = Field::new(active_field_index.unwrap_or(i));\n                 tcx.mk_place_field(lhs, field, ty)\n             };\n-            Statement { source_info, kind: StatementKind::Assign(box (lhs_field, Rvalue::Use(op))) }\n+            Statement {\n+                source_info,\n+                kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n+            }\n         })\n         .chain(set_discriminant)\n }"}, {"sha": "50756fc15fb85f3c38f0a0e722b06994895ee3a9", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -680,12 +680,12 @@ where\n         let (ptr_next, cur_next) = if ptr_based {\n             (\n                 Rvalue::Use(copy(cur.into())),\n-                Rvalue::BinaryOp(BinOp::Offset, box (move_(cur.into()), one)),\n+                Rvalue::BinaryOp(BinOp::Offset, Box::new((move_(cur.into()), one))),\n             )\n         } else {\n             (\n                 Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n-                Rvalue::BinaryOp(BinOp::Add, box (move_(cur.into()), one)),\n+                Rvalue::BinaryOp(BinOp::Add, Box::new((move_(cur.into()), one))),\n             )\n         };\n \n@@ -703,7 +703,10 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![self.assign(\n                 can_go,\n-                Rvalue::BinaryOp(BinOp::Eq, box (copy(Place::from(cur)), copy(length_or_end))),\n+                Rvalue::BinaryOp(\n+                    BinOp::Eq,\n+                    Box::new((copy(Place::from(cur)), copy(length_or_end))),\n+                ),\n             )],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -821,7 +824,7 @@ where\n                     length_or_end,\n                     Rvalue::BinaryOp(\n                         BinOp::Offset,\n-                        box (Operand::Copy(cur), Operand::Move(length)),\n+                        Box::new((Operand::Copy(cur), Operand::Move(length))),\n                     ),\n                 ),\n             ]\n@@ -1032,14 +1035,17 @@ where\n     }\n \n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n-        Operand::Constant(box Constant {\n+        Operand::Constant(Box::new(Constant {\n             span: self.source_info.span,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx(), val.into()).into(),\n-        })\n+        }))\n     }\n \n     fn assign(&self, lhs: Place<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> {\n-        Statement { source_info: self.source_info, kind: StatementKind::Assign(box (lhs, rhs)) }\n+        Statement {\n+            source_info: self.source_info,\n+            kind: StatementKind::Assign(Box::new((lhs, rhs))),\n+        }\n     }\n }"}, {"sha": "1f571a36441be101cd22eed473dd2bac343e488f", "filename": "compiler/rustc_mir/src/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99db8fa9c2b034986242615559b5435cd3a5f97b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs?ref=99db8fa9c2b034986242615559b5435cd3a5f97b", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn add_assign(&mut self, loc: Location, place: Place<'tcx>, rv: Rvalue<'tcx>) {\n-        self.add_statement(loc, StatementKind::Assign(box (place, rv)));\n+        self.add_statement(loc, StatementKind::Assign(Box::new((place, rv))));\n     }\n \n     pub fn apply(self, body: &mut Body<'tcx>) {"}]}