{"sha": "8a1c86473c7e5d6437398e683ed2adcad164b535", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWM4NjQ3M2M3ZTVkNjQzNzM5OGU2ODNlZDJhZGNhZDE2NGI1MzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-19T08:50:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-19T08:50:39Z"}, "message": "Remove CValue::Func", "tree": {"sha": "bd99873e4a0b070367fd641653a91e091dc4e07a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd99873e4a0b070367fd641653a91e091dc4e07a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1c86473c7e5d6437398e683ed2adcad164b535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1c86473c7e5d6437398e683ed2adcad164b535", "html_url": "https://github.com/rust-lang/rust/commit/8a1c86473c7e5d6437398e683ed2adcad164b535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1c86473c7e5d6437398e683ed2adcad164b535/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f48776a14731516e3ae2baefe8d7ea371a4654", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f48776a14731516e3ae2baefe8d7ea371a4654", "html_url": "https://github.com/rust-lang/rust/commit/72f48776a14731516e3ae2baefe8d7ea371a4654"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "f76aaba1d95b110c22cb96dca6cea3bc2e5fc8a1", "filename": "src/abi.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=8a1c86473c7e5d6437398e683ed2adcad164b535", "patch": "@@ -472,9 +472,15 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             }\n         })).collect::<Vec<_>>();\n \n-    let inst = match trans_operand(fx, func) {\n-        CValue::Func(func, _) => fx.bcx.ins().call(func, &call_args),\n-        func => {\n+    let call_inst = match fn_ty.sty {\n+        TypeVariants::TyFnDef(def_id, substs) => {\n+            let func_ref = fx.get_function_ref(\n+                Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n+            );\n+            fx.bcx.ins().call(func_ref, &call_args)\n+        }\n+        _ => {\n+            let func = trans_operand(fx, func);\n             let func = func.load_value(fx);\n             let sig = fx.bcx.import_signature(cton_sig_from_fn_ty(fx.tcx, fn_ty));\n             fx.bcx.ins().call_indirect(sig, func, &call_args)\n@@ -485,7 +491,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n         PassMode::NoPass => {}\n         PassMode::ByVal(_) => {\n             if let Some((ret_place, _)) = destination {\n-                let results = fx.bcx.inst_results(inst);\n+                let results = fx.bcx.inst_results(call_inst);\n                 ret_place.write_cvalue(fx, CValue::ByVal(results[0], ret_layout));\n             }\n         }"}, {"sha": "8227f93f43bcb693afb994b5582ea1e6ebd5a6f1", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=8a1c86473c7e5d6437398e683ed2adcad164b535", "patch": "@@ -71,13 +71,12 @@ fn codegen_field<'a, 'tcx: 'a>(\n pub enum CValue<'tcx> {\n     ByRef(Value, TyLayout<'tcx>),\n     ByVal(Value, TyLayout<'tcx>),\n-    Func(FuncRef, TyLayout<'tcx>),\n }\n \n impl<'tcx> CValue<'tcx> {\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n-            CValue::ByRef(_, layout) | CValue::ByVal(_, layout) | CValue::Func(_, layout) => layout,\n+            CValue::ByRef(_, layout) | CValue::ByVal(_, layout) => layout,\n         }\n     }\n \n@@ -96,10 +95,6 @@ impl<'tcx> CValue<'tcx> {\n                 fx.bcx.ins().stack_store(value, stack_slot, 0);\n                 fx.bcx.ins().stack_addr(types::I64, stack_slot, 0)\n             }\n-            CValue::Func(func, ty) => {\n-                let func = fx.bcx.ins().func_addr(types::I64, func);\n-                CValue::ByVal(func, ty).force_stack(fx)\n-            }\n         }\n     }\n \n@@ -115,15 +110,13 @@ impl<'tcx> CValue<'tcx> {\n                 fx.bcx.ins().load(cton_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,\n-            CValue::Func(func, _layout) => fx.bcx.ins().func_addr(types::I64, func),\n         }\n     }\n \n     pub fn expect_byref(self) -> (Value, TyLayout<'tcx>) {\n         match self {\n             CValue::ByRef(value, layout) => (value, layout),\n             CValue::ByVal(_, _) => bug!(\"Expected CValue::ByRef, found CValue::ByVal: {:?}\", self),\n-            CValue::Func(_, _) => bug!(\"Expected CValue::ByRef, found CValue::Func: {:?}\", self),\n         }\n     }\n \n@@ -161,7 +154,6 @@ impl<'tcx> CValue<'tcx> {\n         match self {\n             CValue::ByRef(addr, _) => CValue::ByRef(addr, layout),\n             CValue::ByVal(val, _) => CValue::ByVal(val, layout),\n-            CValue::Func(fun, _) => CValue::Func(fun, layout),\n         }\n     }\n }"}, {"sha": "3bbf74b0a314b8a327df2f6d806f943f52b3a6a4", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1c86473c7e5d6437398e683ed2adcad164b535/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=8a1c86473c7e5d6437398e683ed2adcad164b535", "patch": "@@ -109,7 +109,8 @@ fn trans_const_value<'a, 'tcx: 'a>(\n             let func_ref = fx.get_function_ref(\n                 Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n             );\n-            CValue::Func(func_ref, layout)\n+            let func_addr = fx.bcx.ins().func_addr(types::I64, func_ref);\n+            CValue::ByVal(func_addr, layout)\n         }\n         _ => trans_const_place(fx, const_).to_cvalue(fx),\n     }"}]}