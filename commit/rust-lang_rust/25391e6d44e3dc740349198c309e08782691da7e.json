{"sha": "25391e6d44e3dc740349198c309e08782691da7e", "node_id": "C_kwDOAAsO6NoAKDI1MzkxZTZkNDRlM2RjNzQwMzQ5MTk4YzMwOWUwODc4MjY5MWRhN2U", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-20T09:49:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-20T09:49:36Z"}, "message": "Only clear diagnostics of workspaces who have been flychecked", "tree": {"sha": "a7d3fa1b98d3705bfa778ef14d972334b3695f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d3fa1b98d3705bfa778ef14d972334b3695f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25391e6d44e3dc740349198c309e08782691da7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25391e6d44e3dc740349198c309e08782691da7e", "html_url": "https://github.com/rust-lang/rust/commit/25391e6d44e3dc740349198c309e08782691da7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25391e6d44e3dc740349198c309e08782691da7e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63b5d3c846b74b917b8029aa00cb448faba409f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63b5d3c846b74b917b8029aa00cb448faba409f", "html_url": "https://github.com/rust-lang/rust/commit/a63b5d3c846b74b917b8029aa00cb448faba409f"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "7f14fe5798a02249ef3e3396bcac71008b3d8865", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -86,7 +86,7 @@ impl FlycheckHandle {\n \n pub enum Message {\n     /// Request adding a diagnostic with fixes included to a file\n-    AddDiagnostic { workspace_root: AbsPathBuf, diagnostic: Diagnostic },\n+    AddDiagnostic { id: usize, workspace_root: AbsPathBuf, diagnostic: Diagnostic },\n \n     /// Request check progress notification to client\n     Progress {\n@@ -99,8 +99,9 @@ pub enum Message {\n impl fmt::Debug for Message {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Message::AddDiagnostic { workspace_root, diagnostic } => f\n+            Message::AddDiagnostic { id, workspace_root, diagnostic } => f\n                 .debug_struct(\"AddDiagnostic\")\n+                .field(\"id\", id)\n                 .field(\"workspace_root\", workspace_root)\n                 .field(\"diagnostic_code\", &diagnostic.code.as_ref().map(|it| &it.code))\n                 .finish(),\n@@ -186,7 +187,7 @@ impl FlycheckActor {\n                     }\n                 }\n                 Event::CheckEvent(None) => {\n-                    tracing::debug!(\"flycheck finished\");\n+                    tracing::debug!(flycheck_id = self.id, \"flycheck finished\");\n \n                     // Watcher finished\n                     let cargo_handle = self.cargo_handle.take().unwrap();\n@@ -206,6 +207,7 @@ impl FlycheckActor {\n \n                     CargoMessage::Diagnostic(msg) => {\n                         self.send(Message::AddDiagnostic {\n+                            id: self.id,\n                             workspace_root: self.workspace_root.clone(),\n                             diagnostic: msg,\n                         });"}, {"sha": "7917ced666a815ebb147c02a60716e874559b41b", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::lsp_ext;\n \n-pub(crate) type CheckFixes = Arc<FxHashMap<FileId, Vec<Fix>>>;\n+pub(crate) type CheckFixes = Arc<FxHashMap<usize, FxHashMap<FileId, Vec<Fix>>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsMapConfig {\n@@ -22,7 +22,7 @@ pub(crate) struct DiagnosticCollection {\n     // FIXME: should be FxHashMap<FileId, Vec<ra_id::Diagnostic>>\n     pub(crate) native: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n     // FIXME: should be Vec<flycheck::Diagnostic>\n-    pub(crate) check: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    pub(crate) check: FxHashMap<usize, FxHashMap<FileId, Vec<lsp_types::Diagnostic>>>,\n     pub(crate) check_fixes: CheckFixes,\n     changes: FxHashSet<FileId>,\n }\n@@ -35,9 +35,19 @@ pub(crate) struct Fix {\n }\n \n impl DiagnosticCollection {\n-    pub(crate) fn clear_check(&mut self) {\n+    pub(crate) fn clear_check(&mut self, flycheck_id: usize) {\n+        if let Some(it) = Arc::make_mut(&mut self.check_fixes).get_mut(&flycheck_id) {\n+            it.clear();\n+        }\n+        if let Some(it) = self.check.get_mut(&flycheck_id) {\n+            self.changes.extend(it.drain().map(|(key, _value)| key));\n+        }\n+    }\n+\n+    pub(crate) fn clear_check_all(&mut self) {\n         Arc::make_mut(&mut self.check_fixes).clear();\n-        self.changes.extend(self.check.drain().map(|(key, _value)| key))\n+        self.changes\n+            .extend(self.check.values_mut().flat_map(|it| it.drain().map(|(key, _value)| key)))\n     }\n \n     pub(crate) fn clear_native_for(&mut self, file_id: FileId) {\n@@ -47,20 +57,22 @@ impl DiagnosticCollection {\n \n     pub(crate) fn add_check_diagnostic(\n         &mut self,\n+        flycheck_id: usize,\n         file_id: FileId,\n         diagnostic: lsp_types::Diagnostic,\n         fix: Option<Fix>,\n     ) {\n-        let diagnostics = self.check.entry(file_id).or_default();\n+        let diagnostics = self.check.entry(flycheck_id).or_default().entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {\n             if are_diagnostics_equal(existing_diagnostic, &diagnostic) {\n                 return;\n             }\n         }\n \n         let check_fixes = Arc::make_mut(&mut self.check_fixes);\n-        check_fixes.entry(file_id).or_default().extend(fix);\n+        check_fixes.entry(flycheck_id).or_default().entry(file_id).or_default().extend(fix);\n         diagnostics.push(diagnostic);\n+        tracing::warn!(?flycheck_id, ?file_id, \"add_check_diagnostic changes pushed\");\n         self.changes.insert(file_id);\n     }\n \n@@ -89,7 +101,8 @@ impl DiagnosticCollection {\n         file_id: FileId,\n     ) -> impl Iterator<Item = &lsp_types::Diagnostic> {\n         let native = self.native.get(&file_id).into_iter().flatten();\n-        let check = self.check.get(&file_id).into_iter().flatten();\n+        let check =\n+            self.check.values().filter_map(move |it| it.get(&file_id)).into_iter().flatten();\n         native.chain(check)\n     }\n "}, {"sha": "2cd2044aeff04cc1da2d58241440f632ec649208", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -201,6 +201,7 @@ impl GlobalState {\n                     }\n                 }\n \n+                // Clear native diagnostics when their file gets deleted\n                 if !file.exists() {\n                     self.diagnostics.clear_native_for(file.file_id);\n                 }"}, {"sha": "a64dc57ec644892eff5b5d03e185c242278e2a9b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -1094,7 +1094,9 @@ pub(crate) fn handle_code_action(\n     }\n \n     // Fixes from `cargo check`.\n-    for fix in snap.check_fixes.get(&frange.file_id).into_iter().flatten() {\n+    for fix in\n+        snap.check_fixes.values().filter_map(|it| it.get(&frange.file_id)).into_iter().flatten()\n+    {\n         // FIXME: this mapping is awkward and shouldn't exist. Refactor\n         // `snap.check_fixes` to not convert to LSP prematurely.\n         let intersect_fix_range = fix"}, {"sha": "572466cdfa7ffa2bbb98b188e7700c632991171c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -372,7 +372,7 @@ impl GlobalState {\n                 let _p = profile::span(\"GlobalState::handle_event/flycheck\");\n                 loop {\n                     match task {\n-                        flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n+                        flycheck::Message::AddDiagnostic { id, workspace_root, diagnostic } => {\n                             let snap = self.snapshot();\n                             let diagnostics =\n                                 crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n@@ -384,6 +384,7 @@ impl GlobalState {\n                             for diag in diagnostics {\n                                 match url_to_file_id(&self.vfs.read().0, &diag.url) {\n                                     Ok(file_id) => self.diagnostics.add_check_diagnostic(\n+                                        id,\n                                         file_id,\n                                         diag.diagnostic,\n                                         diag.fix,\n@@ -401,7 +402,7 @@ impl GlobalState {\n                         flycheck::Message::Progress { id, progress } => {\n                             let (state, message) = match progress {\n                                 flycheck::Progress::DidStart => {\n-                                    self.diagnostics.clear_check();\n+                                    self.diagnostics.clear_check(id);\n                                     (Progress::Begin, None)\n                                 }\n                                 flycheck::Progress::DidCheckCrate(target) => {"}, {"sha": "579ba380273ab608be0ae957747d13407e3c6a1a", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25391e6d44e3dc740349198c309e08782691da7e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=25391e6d44e3dc740349198c309e08782691da7e", "patch": "@@ -417,7 +417,7 @@ impl GlobalState {\n             Some(it) => it,\n             None => {\n                 self.flycheck = Vec::new();\n-                self.diagnostics.clear_check();\n+                self.diagnostics.clear_check_all();\n                 return;\n             }\n         };"}]}