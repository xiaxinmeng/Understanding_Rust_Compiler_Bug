{"sha": "5fa078f26fed1d951e949df09da82567e9e12404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTA3OGYyNmZlZDFkOTUxZTk0OWRmMDlkYTgyNTY3ZTllMTI0MDQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-19T10:54:17Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-19T10:54:17Z"}, "message": "Add a slightly better fuzzy search heuristics", "tree": {"sha": "746a7cfa285577927f1c4f3a6a4235232227eab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746a7cfa285577927f1c4f3a6a4235232227eab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa078f26fed1d951e949df09da82567e9e12404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa078f26fed1d951e949df09da82567e9e12404", "html_url": "https://github.com/rust-lang/rust/commit/5fa078f26fed1d951e949df09da82567e9e12404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa078f26fed1d951e949df09da82567e9e12404/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd270cbc024f56596c315061d10732ebbe16eef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd270cbc024f56596c315061d10732ebbe16eef9", "html_url": "https://github.com/rust-lang/rust/commit/bd270cbc024f56596c315061d10732ebbe16eef9"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "5a7a6e83d52f7a2b6063e846f814bfb4d6197bff", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5fa078f26fed1d951e949df09da82567e9e12404/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa078f26fed1d951e949df09da82567e9e12404/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=5fa078f26fed1d951e949df09da82567e9e12404", "patch": "@@ -1,7 +1,7 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use either::Either;\n-use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use hir::{Adt, ModPath, ModuleDef, ScopeDef, Type};\n use ide_db::helpers::insert_use::ImportScope;\n use ide_db::imports_locator;\n use syntax::AstNode;\n@@ -147,36 +147,49 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     .collect::<Vec<_>>();\n \n     all_mod_paths.sort_by_cached_key(|(mod_path, _)| {\n-        if let Some(name) = mod_path.segments.last().map(|name| name.to_string().to_lowercase()) {\n-            if name.contains(&potential_import_name.to_lowercase()) {\n-                return 0;\n-            }\n-        }\n-        1\n+        compute_fuzzy_completion_order_key(mod_path, &potential_import_name)\n     });\n \n     acc.add_all(all_mod_paths.into_iter().filter_map(|(import_path, definition)| {\n         render_resolution_with_import(\n             RenderContext::new(ctx),\n-            ImportEdit { import_path, import_scope: import_scope.clone() },\n+            ImportEdit { import_path: import_path, import_scope: import_scope.clone() },\n             &definition,\n         )\n     }));\n     Some(())\n }\n \n+// todo kb add tet marks for the completion order test + the sotring description\n+fn compute_fuzzy_completion_order_key(proposed_mod_path: &ModPath, user_input: &str) -> usize {\n+    let proposed_import_name = match proposed_mod_path.segments.last() {\n+        Some(name) => name.to_string().to_lowercase(),\n+        None => return usize::MAX,\n+    };\n+    let user_input = user_input.to_lowercase();\n+\n+    match proposed_import_name.match_indices(&user_input).next() {\n+        Some((first_matching_index, _)) => first_matching_index,\n+        None => usize::MAX,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, completion_list},\n+        test_utils::{check_edit, check_edit_with_config, completion_list_with_config},\n         CompletionConfig, CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        check_with_config(CompletionConfig::default(), ra_fixture, expect);\n+    }\n+\n+    fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n@@ -877,4 +890,43 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fuzzy_completions_come_in_specific_order() {\n+        let mut completion_config = CompletionConfig::default();\n+        completion_config\n+            .active_resolve_capabilities\n+            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n+\n+        check_with_config(\n+            completion_config,\n+            r#\"\n+//- /lib.rs crate:dep\n+pub struct FirstStruct;\n+pub mod some_module {\n+    pub struct SecondStruct;\n+\n+    pub struct ThiiiiiirdStruct;\n+    pub struct AfterThirdStruct;\n+    pub struct ThirdStruct;\n+}\n+\n+//- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n+fn main() {\n+    hir<|>\n+}\n+\"#,\n+            expect![[r#\"\n+                st FirstStruct\n+                st SecondStruct\n+                md dep\n+                st dep::some_module::ThirdStruct\n+                st dep::some_module::AfterThirdStruct\n+                st dep::some_module::ThiiiiiirdStruct\n+                fn main()           fn main()\n+            \"#]],\n+        );\n+    }\n }"}]}