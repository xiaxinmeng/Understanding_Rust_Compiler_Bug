{"sha": "053666f9062d71091ea7970dcbad5963097191a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MzY2NmY5MDYyZDcxMDkxZWE3OTcwZGNiYWQ1OTYzMDk3MTkxYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-08T23:17:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-08T23:17:06Z"}, "message": "Auto merge of #61672 - Centril:rollup-jxo89ir, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #61646 (Remove useless allocations in macro_rules follow logic.)\n - #61658 (remove useless ident() functions in const tests)\n - #61660 (Minimize use of `#![feature(custom_attribute)]`)\n - #61666 (Add test for trait ICE)\n - #61669 ( syntax: Remove `Deref` impl from `Token`)\n - #61670 (Update RLS)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fa334bba0a1d0e0b7546d5e3a2c51242d0245e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa334bba0a1d0e0b7546d5e3a2c51242d0245e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053666f9062d71091ea7970dcbad5963097191a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053666f9062d71091ea7970dcbad5963097191a3", "html_url": "https://github.com/rust-lang/rust/commit/053666f9062d71091ea7970dcbad5963097191a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053666f9062d71091ea7970dcbad5963097191a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "html_url": "https://github.com/rust-lang/rust/commit/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9"}, {"sha": "e0c825cc72e3d7834e3493e12e673c25606c8293", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c825cc72e3d7834e3493e12e673c25606c8293", "html_url": "https://github.com/rust-lang/rust/commit/e0c825cc72e3d7834e3493e12e673c25606c8293"}], "stats": {"total": 1978, "additions": 927, "deletions": 1051}, "files": [{"sha": "7f35b7344dfed31d636d89b777bc781047437a37", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1277,7 +1277,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jsonrpc-core\"\n-version = \"10.0.1\"\n+version = \"12.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1407,7 +1407,7 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.57.0\"\n+version = \"0.57.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2266,7 +2266,7 @@ name = \"rls\"\n version = \"1.36.0\"\n dependencies = [\n  \"cargo 0.38.0\",\n- \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy_lints 0.0.212\",\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2276,11 +2276,11 @@ dependencies = [\n  \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jsonrpc-core 10.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jsonrpc-core 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-codec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lsp-types 0.57.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ordslice 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2295,7 +2295,7 @@ dependencies = [\n  \"rls-vfs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n- \"rustc_tools_util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_tools_util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 1.2.2\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3030,12 +3030,12 @@ dependencies = [\n \n [[package]]\n name = \"rustc_tools_util\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+version = \"0.2.0\"\n \n [[package]]\n name = \"rustc_tools_util\"\n version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc_traits\"\n@@ -4229,7 +4229,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum jemalloc-sys 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bef0d4ce37578dfd80b466e3d8324bd9de788e249f1accebb0c472ea4b52bdc\"\n \"checksum jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3d51e24009d966c8285d524dbaf6d60926636b2a89caee9ce0bd612494ddc16\"\n \"checksum json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad0485404155f45cce53a40d4b2d6ac356418300daed05273d9e26f91c390be\"\n-\"checksum jsonrpc-core 10.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a5152c3fda235dfd68341b3edf4121bc4428642c93acbd6de88c26bf95fc5d7\"\n+\"checksum jsonrpc-core 12.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"288dca7f9713710a29e485076b9340156cb701edb46a881f5d0c31aa4f5b9143\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n@@ -4243,7 +4243,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n \"checksum log_settings 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19af41f0565d7c19b2058153ad0b42d4d5ce89ec4dbf06ed6741114a8b63e7cd\"\n \"checksum lsp-codec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"169d737ad89cf8ddd82d1804d9122f54568c49377665157277cc90d747b1d31a\"\n-\"checksum lsp-types 0.57.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d220de1fbbb12b60df17898272579c22329375fc4baa960402fbd17cf0cdd165\"\n+\"checksum lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b62b77309737b1e262b3bbf37ff8faa740562c633b14702afe9be85dbcb6f88a\"\n \"checksum lzma-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1eaa027402541975218bb0eec67d6b0412f6233af96e0d096d31dbdfd22e614\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n \"checksum macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2c4deaccc2ead6a28c16c0ba82f07d52b6475397415ce40876e559b0b0ea510\"\n@@ -4350,7 +4350,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"526e7b6d2707a5b9bec3927d424ad70fa3cfc68e0ac1b75e46cdbbc95adc5108\"\n \"checksum rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79d38ca7cbc22fa59f09d8534ea4b27f67b0facf0cbe274433aceea227a02543\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum rustc_tools_util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c5a95edfa0c893236ae4778bb7c4752760e4c0d245e19b5eff33c5aa5eb9dc\"\n+\"checksum rustc_tools_util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b725dadae9fabc488df69a287f5a99c5eaf5d10853842a8a3dfac52476f544ee\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum rustfix 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af7c21531a91512a4a51b490be6ba1c8eff34fdda0dc5bf87dc28d86748aac56\"\n \"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\""}, {"sha": "6d4aa024c75b4ffa1ad23055e0f0af4fca25b400", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -728,19 +728,17 @@ This lint detects attributes that were not used by the compiler. Some\n example code that triggers this lint:\n \n ```rust\n-#![feature(custom_attribute)]\n-\n-#![mutable_doc]\n+#![macro_export]\n ```\n \n This will produce:\n \n ```text\n warning: unused attribute\n- --> src/main.rs:4:1\n+ --> src/main.rs:1:1\n   |\n-4 | #![mutable_doc]\n-  | ^^^^^^^^^^^^^^^\n+1 | #![macro_export]\n+  | ^^^^^^^^^^^^^^^^\n   |\n ```\n "}, {"sha": "755feb849620357dda2d109220b5b5bf2e7536ff", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -15,7 +15,8 @@ extern \"Rust\" {\n     // them from the `#[global_allocator]` attribute if there is one, or uses the\n     // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n-    #[allocator]\n+    #[cfg_attr(bootstrap, allocator)]\n+    #[cfg_attr(not(bootstrap), rustc_allocator)]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]"}, {"sha": "c530ac24275c2bb5f85b7431a28f43d009805bd3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -79,7 +79,7 @@\n #![feature(coerce_unsized)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n+#![cfg_attr(bootstrap, feature(custom_attribute))]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]"}, {"sha": "030f4f1d12cc824a734b17a32e384ed9ad742efb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -75,7 +75,6 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n-#![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n #![feature(extern_types)]"}, {"sha": "27ee664aa5f580ed7dc178c040caf80419fd11cf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -2574,7 +2574,7 @@ bitflags! {\n         /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n         /// the hot path.\n         const COLD                      = 1 << 0;\n-        /// `#[allocator]`: a hint to LLVM that the pointer returned from this\n+        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n         /// function is never null.\n         const ALLOCATOR                 = 1 << 1;\n         /// `#[unwind]`: an indicator that this function may unwind despite what"}, {"sha": "8391f02fc69ec07bcf3a62d7f779ad40504de64f", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -10,7 +10,6 @@\n #![feature(box_syntax)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n-#![feature(custom_attribute)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![allow(unused_attributes)]"}, {"sha": "97de0d823b32229833ee340e465ea930433f4b40", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -3,7 +3,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n #![feature(libc)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "38d1719e7763ea46d116681878e9733c1b2321f9", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -8,7 +8,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n #![feature(never_type)]\n #![feature(nll)]\n #![allow(unused_attributes)]"}, {"sha": "cc3180c783bdf9c22296cbed3b7181fc36c076a0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]"}, {"sha": "a695a90f2ae640a93347aa6f1ba66fcbe4a1ea3f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(custom_attribute)]\n #![feature(nll)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]"}, {"sha": "f738f90b31eb6320a47357939ef8bcbfe82edf19", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -2445,7 +2445,7 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n     for attr in attrs.iter() {\n         if attr.check_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n-        } else if attr.check_name(sym::allocator) {\n+        } else if attr.check_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.check_name(sym::unwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::UNWIND;"}, {"sha": "99ca8c43cfbe202b577e848f0752d03d83aad3f1", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -257,7 +257,7 @@ impl<'a> Classifier<'a> {\n             token::Question => Class::QuestionMark,\n \n             token::Dollar => {\n-                if self.lexer.peek().kind.is_ident() {\n+                if self.lexer.peek().is_ident() {\n                     self.in_macro_nonterminal = true;\n                     Class::MacroNonTerminal\n                 } else {"}, {"sha": "d7e43f645df7bbb05fd3fa27c90bcae5ea935ebb", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -20,7 +20,7 @@ use crate::source_map::{BytePos, Spanned, dummy_spanned};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n-use crate::parse::token::{self, Token, TokenKind};\n+use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n@@ -467,8 +467,7 @@ impl MetaItem {\n                                              segment.ident.span.ctxt());\n                 idents.push(TokenTree::token(token::ModSep, mod_sep_span).into());\n             }\n-            idents.push(TokenTree::token(TokenKind::from_ast_ident(segment.ident),\n-                                         segment.ident.span).into());\n+            idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());\n             last_pos = segment.ident.span.hi();\n         }\n         self.node.tokens(self.span).append_to_tree_and_joint_vec(&mut idents);"}, {"sha": "4758b6a50e520f8a4f3c5b9ff3e77b16a0fe65fa", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -78,7 +78,7 @@ use crate::ast::{Ident, Name};\n use crate::ext::tt::quoted::{self, TokenTree};\n use crate::parse::{Directory, ParseSess};\n use crate::parse::parser::{Parser, PathStyle};\n-use crate::parse::token::{self, DocComment, Nonterminal, Token, TokenKind};\n+use crate::parse::token::{self, DocComment, Nonterminal, Token};\n use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream};\n@@ -199,7 +199,7 @@ struct MatcherPos<'root, 'tt: 'root> {\n     seq_op: Option<quoted::KleeneOp>,\n \n     /// The separator if we are in a repetition.\n-    sep: Option<TokenKind>,\n+    sep: Option<Token>,\n \n     /// The \"parent\" matcher position if we are in a repetition. That is, the matcher position just\n     /// before we enter the sequence.\n@@ -417,24 +417,24 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n \n /// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n /// other tokens, this is \"unexpected token...\".\n-pub fn parse_failure_msg(tok: TokenKind) -> String {\n-    match tok {\n+pub fn parse_failure_msg(tok: &Token) -> String {\n+    match tok.kind {\n         token::Eof => \"unexpected end of macro invocation\".to_string(),\n         _ => format!(\n             \"no rules expected the token `{}`\",\n-            pprust::token_to_string(&tok)\n+            pprust::token_to_string(tok)\n         ),\n     }\n }\n \n /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n-fn token_name_eq(t1: &TokenKind, t2: &TokenKind) -> bool {\n-    if let (Some((name1, is_raw1)), Some((name2, is_raw2))) = (t1.ident_name(), t2.ident_name()) {\n-        name1 == name2 && is_raw1 == is_raw2\n-    } else if let (Some(name1), Some(name2)) = (t1.lifetime_name(), t2.lifetime_name()) {\n-        name1 == name2\n+fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n+    if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {\n+        ident1.name == ident2.name && is_raw1 == is_raw2\n+    } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {\n+        ident1.name == ident2.name\n     } else {\n-        *t1 == *t2\n+        t1.kind == t2.kind\n     }\n }\n \n@@ -712,7 +712,7 @@ pub fn parse(\n \n         // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,\n         // either the parse is ambiguous (which should never happen) or there is a syntax error.\n-        if token_name_eq(&parser.token, &token::Eof) {\n+        if parser.token == token::Eof {\n             if eof_items.len() == 1 {\n                 let matches = eof_items[0]\n                     .matches\n@@ -804,8 +804,8 @@ pub fn parse(\n \n /// The token is an identifier, but not `_`.\n /// We prohibit passing `_` to macros expecting `ident` for now.\n-fn get_macro_name(token: &TokenKind) -> Option<(Name, bool)> {\n-    match *token {\n+fn get_macro_name(token: &Token) -> Option<(Name, bool)> {\n+    match token.kind {\n         token::Ident(name, is_raw) if name != kw::Underscore => Some((name, is_raw)),\n         _ => None,\n     }"}, {"sha": "6f82f5094651ea5c4beca1f5bf0f18d3e3897b0b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -17,7 +17,7 @@ use crate::symbol::{Symbol, kw, sym};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::Ident};\n+use syntax_pos::{Span, symbol::Ident};\n use log::debug;\n \n use rustc_data_structures::fx::{FxHashMap};\n@@ -200,7 +200,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt<'_>,\n \n     let (token, label) = best_failure.expect(\"ran no matchers\");\n     let span = token.span.substitute_dummy(sp);\n-    let mut err = cx.struct_span_err(span, &parse_failure_msg(token.kind));\n+    let mut err = cx.struct_span_err(span, &parse_failure_msg(&token));\n     err.span_label(span, label);\n     if let Some(sp) = def_span {\n         if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n@@ -266,17 +266,19 @@ pub fn compile(\n     let argument_gram = vec![\n         quoted::TokenTree::Sequence(DelimSpan::dummy(), Lrc::new(quoted::SequenceRepetition {\n             tts: vec![\n-                quoted::TokenTree::MetaVarDecl(DUMMY_SP, lhs_nm, ast::Ident::from_str(\"tt\")),\n-                quoted::TokenTree::token(token::FatArrow, DUMMY_SP),\n-                quoted::TokenTree::MetaVarDecl(DUMMY_SP, rhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::MetaVarDecl(def.span, lhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::token(token::FatArrow, def.span),\n+                quoted::TokenTree::MetaVarDecl(def.span, rhs_nm, ast::Ident::from_str(\"tt\")),\n             ],\n-            separator: Some(if body.legacy { token::Semi } else { token::Comma }),\n+            separator: Some(Token::new(\n+                if body.legacy { token::Semi } else { token::Comma }, def.span\n+            )),\n             op: quoted::KleeneOp::OneOrMore,\n             num_captures: 2,\n         })),\n         // to phase into semicolon-termination instead of semicolon-separation\n         quoted::TokenTree::Sequence(DelimSpan::dummy(), Lrc::new(quoted::SequenceRepetition {\n-            tts: vec![quoted::TokenTree::token(token::Semi, DUMMY_SP)],\n+            tts: vec![quoted::TokenTree::token(token::Semi, def.span)],\n             separator: None,\n             op: quoted::KleeneOp::ZeroOrMore,\n             num_captures: 0\n@@ -286,7 +288,7 @@ pub fn compile(\n     let argument_map = match parse(sess, body.stream(), &argument_gram, None, true) {\n         Success(m) => m,\n         Failure(token, msg) => {\n-            let s = parse_failure_msg(token.kind);\n+            let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n             let mut err = sess.span_diagnostic.struct_span_fatal(sp, &s);\n             err.span_label(sp, msg);\n@@ -608,9 +610,8 @@ impl FirstSets {\n                         // If the sequence contents can be empty, then the first\n                         // token could be the separator token itself.\n \n-                        if let (Some(ref sep), true) = (seq_rep.separator.clone(),\n-                                                        subfirst.maybe_empty) {\n-                            first.add_one_maybe(TokenTree::token(sep.clone(), sp.entire()));\n+                        if let (Some(sep), true) = (&seq_rep.separator, subfirst.maybe_empty) {\n+                            first.add_one_maybe(TokenTree::Token(sep.clone()));\n                         }\n \n                         // Reverse scan: Sequence comes before `first`.\n@@ -658,9 +659,8 @@ impl FirstSets {\n                             // If the sequence contents can be empty, then the first\n                             // token could be the separator token itself.\n \n-                            if let (Some(ref sep), true) = (seq_rep.separator.clone(),\n-                                                            subfirst.maybe_empty) {\n-                                first.add_one_maybe(TokenTree::token(sep.clone(), sp.entire()));\n+                            if let (Some(sep), true) = (&seq_rep.separator, subfirst.maybe_empty) {\n+                                first.add_one_maybe(TokenTree::Token(sep.clone()));\n                             }\n \n                             assert!(first.maybe_empty);\n@@ -851,7 +851,7 @@ fn check_matcher_core(sess: &ParseSess,\n                 // against SUFFIX\n                 continue 'each_token;\n             }\n-            TokenTree::Sequence(sp, ref seq_rep) => {\n+            TokenTree::Sequence(_, ref seq_rep) => {\n                 suffix_first = build_suffix_first();\n                 // The trick here: when we check the interior, we want\n                 // to include the separator (if any) as a potential\n@@ -864,9 +864,9 @@ fn check_matcher_core(sess: &ParseSess,\n                 // work of cloning it? But then again, this way I may\n                 // get a \"tighter\" span?\n                 let mut new;\n-                let my_suffix = if let Some(ref u) = seq_rep.separator {\n+                let my_suffix = if let Some(sep) = &seq_rep.separator {\n                     new = suffix_first.clone();\n-                    new.add_one_maybe(TokenTree::token(u.clone(), sp.entire()));\n+                    new.add_one_maybe(TokenTree::Token(sep.clone()));\n                     &new\n                 } else {\n                     &suffix_first\n@@ -909,7 +909,7 @@ fn check_matcher_core(sess: &ParseSess,\n                             continue 'each_last;\n                         }\n                         IsInFollow::Yes => {}\n-                        IsInFollow::No(ref possible) => {\n+                        IsInFollow::No(possible) => {\n                             let may_be = if last.tokens.len() == 1 &&\n                                 suffix_first.tokens.len() == 1\n                             {\n@@ -933,7 +933,7 @@ fn check_matcher_core(sess: &ParseSess,\n                                 format!(\"not allowed after `{}` fragments\", frag_spec),\n                             );\n                             let msg = \"allowed there are: \";\n-                            match &possible[..] {\n+                            match possible {\n                                 &[] => {}\n                                 &[t] => {\n                                     err.note(&format!(\n@@ -997,7 +997,7 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n \n enum IsInFollow {\n     Yes,\n-    No(Vec<&'static str>),\n+    No(&'static [&'static str]),\n     Invalid(String, &'static str),\n }\n \n@@ -1029,28 +1029,28 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n                 IsInFollow::Yes\n             },\n             \"stmt\" | \"expr\"  => {\n-                let tokens = vec![\"`=>`\", \"`,`\", \"`;`\"];\n+                const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`;`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         FatArrow | Comma | Semi => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"pat\" => {\n-                let tokens = vec![\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n+                const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         FatArrow | Comma | Eq | BinOp(token::Or) => IsInFollow::Yes,\n                         Ident(name, false) if name == kw::If || name == kw::In => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"path\" | \"ty\" => {\n-                let tokens = vec![\n+                const TOKENS: &[&str] = &[\n                     \"`{`\", \"`[`\", \"`=>`\", \"`,`\", \"`>`\",\"`=`\", \"`:`\", \"`;`\", \"`|`\", \"`as`\",\n                     \"`where`\",\n                 ];\n@@ -1062,11 +1062,11 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n                         BinOp(token::Or) => IsInFollow::Yes,\n                         Ident(name, false) if name == kw::As ||\n                                               name == kw::Where => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == sym::block =>\n                         IsInFollow::Yes,\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"ident\" | \"lifetime\" => {\n@@ -1084,22 +1084,22 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n             },\n             \"vis\" => {\n                 // Explicitly disallow `priv`, on the off chance it comes back.\n-                let tokens = vec![\"`,`\", \"an ident\", \"a type\"];\n+                const TOKENS: &[&str] = &[\"`,`\", \"an ident\", \"a type\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         Comma => IsInFollow::Yes,\n                         Ident(name, is_raw) if is_raw || name != kw::Priv => IsInFollow::Yes,\n                         _ => if token.can_begin_type() {\n                             IsInFollow::Yes\n                         } else {\n-                            IsInFollow::No(tokens)\n+                            IsInFollow::No(TOKENS)\n                         }\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == sym::ident\n                                                        || frag.name == sym::ty\n                                                        || frag.name == sym::path =>\n                         IsInFollow::Yes,\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"\" => IsInFollow::Yes, // kw::Invalid"}, {"sha": "707fb65bcc52bfb363c18689714a81d449456a92", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -23,24 +23,14 @@ pub struct Delimited {\n }\n \n impl Delimited {\n-    /// Returns the opening delimiter (possibly `NoDelim`).\n-    pub fn open_token(&self) -> TokenKind {\n-        token::OpenDelim(self.delim)\n-    }\n-\n-    /// Returns the closing delimiter (possibly `NoDelim`).\n-    pub fn close_token(&self) -> TokenKind {\n-        token::CloseDelim(self.delim)\n-    }\n-\n     /// Returns a `self::TokenTree` with a `Span` corresponding to the opening delimiter.\n     pub fn open_tt(&self, span: Span) -> TokenTree {\n         let open_span = if span.is_dummy() {\n             span\n         } else {\n             span.with_lo(span.lo() + BytePos(self.delim.len() as u32))\n         };\n-        TokenTree::token(self.open_token(), open_span)\n+        TokenTree::token(token::OpenDelim(self.delim), open_span)\n     }\n \n     /// Returns a `self::TokenTree` with a `Span` corresponding to the closing delimiter.\n@@ -50,7 +40,7 @@ impl Delimited {\n         } else {\n             span.with_lo(span.hi() - BytePos(self.delim.len() as u32))\n         };\n-        TokenTree::token(self.close_token(), close_span)\n+        TokenTree::token(token::CloseDelim(self.delim), close_span)\n     }\n }\n \n@@ -59,7 +49,7 @@ pub struct SequenceRepetition {\n     /// The sequence of token trees\n     pub tts: Vec<TokenTree>,\n     /// The optional separator\n-    pub separator: Option<TokenKind>,\n+    pub separator: Option<Token>,\n     /// Whether the sequence can be repeated zero (*), or one or more times (+)\n     pub op: KleeneOp,\n     /// The number of `Match`s that appear in the sequence (and subsequences)\n@@ -282,7 +272,7 @@ where\n             Some(tokenstream::TokenTree::Delimited(span, delim, tts)) => {\n                 // Must have `(` not `{` or `[`\n                 if delim != token::Paren {\n-                    let tok = pprust::token_to_string(&token::OpenDelim(delim));\n+                    let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n                     let msg = format!(\"expected `(`, found `{}`\", tok);\n                     sess.span_diagnostic.span_err(span.entire(), &msg);\n                 }\n@@ -371,8 +361,8 @@ where\n \n /// Takes a token and returns `Some(KleeneOp)` if the token is `+` `*` or `?`. Otherwise, return\n /// `None`.\n-fn kleene_op(token: &TokenKind) -> Option<KleeneOp> {\n-    match *token {\n+fn kleene_op(token: &Token) -> Option<KleeneOp> {\n+    match token.kind {\n         token::BinOp(token::Star) => Some(KleeneOp::ZeroOrMore),\n         token::BinOp(token::Plus) => Some(KleeneOp::OneOrMore),\n         token::Question => Some(KleeneOp::ZeroOrOne),\n@@ -424,7 +414,7 @@ fn parse_sep_and_kleene_op<I>(\n     attrs: &[ast::Attribute],\n     edition: Edition,\n     macro_node_id: NodeId,\n-) -> (Option<TokenKind>, KleeneOp)\n+) -> (Option<Token>, KleeneOp)\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n {\n@@ -449,7 +439,7 @@ fn parse_sep_and_kleene_op_2015<I>(\n     _features: &Features,\n     _attrs: &[ast::Attribute],\n     macro_node_id: NodeId,\n-) -> (Option<TokenKind>, KleeneOp)\n+) -> (Option<Token>, KleeneOp)\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n {\n@@ -502,7 +492,7 @@ where\n                              a hard error in an upcoming edition\",\n                         );\n \n-                        return (Some(token::Question), op);\n+                        return (Some(Token::new(token::Question, op1_span)), op);\n                     }\n \n                     // #2 is a random token (this is an error) :(\n@@ -541,7 +531,7 @@ where\n             }\n \n             // #2 is a KleeneOp :D\n-            Ok(Ok((op, _))) => return (Some(token.kind), op),\n+            Ok(Ok((op, _))) => return (Some(token), op),\n \n             // #2 is a random token :(\n             Ok(Err(token)) => token.span,\n@@ -567,7 +557,7 @@ fn parse_sep_and_kleene_op_2018<I>(\n     sess: &ParseSess,\n     _features: &Features,\n     _attrs: &[ast::Attribute],\n-) -> (Option<TokenKind>, KleeneOp)\n+) -> (Option<Token>, KleeneOp)\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n {\n@@ -596,7 +586,7 @@ where\n             }\n \n             // #2 is a KleeneOp :D\n-            Ok(Ok((op, _))) => return (Some(token.kind), op),\n+            Ok(Ok((op, _))) => return (Some(token), op),\n \n             // #2 is a random token :(\n             Ok(Err(token)) => token.span,"}, {"sha": "c51f4b20c31c04689e7d2f5f68606adf259450f5", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -4,11 +4,10 @@ use crate::ext::expand::Marker;\n use crate::ext::tt::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n use crate::ext::tt::quoted;\n use crate::mut_visit::noop_visit_tt;\n-use crate::parse::token::{self, NtTT, TokenKind};\n+use crate::parse::token::{self, NtTT, Token};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::DUMMY_SP;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -18,7 +17,7 @@ use std::rc::Rc;\n /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n enum Frame {\n     Delimited { forest: Lrc<quoted::Delimited>, idx: usize, span: DelimSpan },\n-    Sequence { forest: Lrc<quoted::SequenceRepetition>, idx: usize, sep: Option<TokenKind> },\n+    Sequence { forest: Lrc<quoted::SequenceRepetition>, idx: usize, sep: Option<Token> },\n }\n \n impl Frame {\n@@ -109,17 +108,13 @@ pub fn transcribe(\n         else {\n             // Otherwise, if we have just reached the end of a sequence and we can keep repeating,\n             // go back to the beginning of the sequence.\n-            if let Frame::Sequence { ref mut idx, ref sep, .. } = *stack.last_mut().unwrap() {\n-                let (ref mut repeat_idx, repeat_len) = *repeats.last_mut().unwrap();\n+            if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {\n+                let (repeat_idx, repeat_len) = repeats.last_mut().unwrap();\n                 *repeat_idx += 1;\n-                if *repeat_idx < repeat_len {\n+                if repeat_idx < repeat_len {\n                     *idx = 0;\n-                    if let Some(sep) = sep.clone() {\n-                        let prev_span = match result.last() {\n-                            Some((tt, _)) => tt.span(),\n-                            None => DUMMY_SP,\n-                        };\n-                        result.push(TokenTree::token(sep, prev_span).into());\n+                    if let Some(sep) = sep {\n+                        result.push(TokenTree::Token(sep.clone()).into());\n                     }\n                     continue;\n                 }\n@@ -242,7 +237,7 @@ pub fn transcribe(\n                         Ident::new(ident.name, ident.span.apply_mark(cx.current_expansion.mark));\n                     sp = sp.apply_mark(cx.current_expansion.mark);\n                     result.push(TokenTree::token(token::Dollar, sp).into());\n-                    result.push(TokenTree::token(TokenKind::from_ast_ident(ident), sp).into());\n+                    result.push(TokenTree::Token(Token::from_ast_ident(ident)).into());\n                 }\n             }\n "}, {"sha": "7119fd13fbbfb0ba2c223d08a989edb270210147", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1331,6 +1331,16 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n+    (sym::rustc_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n+    (sym::rustc_dummy, Normal, template!(Word /* doesn't matter*/), Gated(Stability::Unstable,\n+                                         sym::rustc_attrs,\n+                                         \"used by the test suite\",\n+                                         cfg_fn!(rustc_attrs))),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n         sym::doc,\n@@ -1957,12 +1967,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match attr_info {\n-            Some(&(name, _, template, _)) => self.check_builtin_attribute(\n-                attr,\n-                name,\n-                template\n-            ),\n-            None => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n+            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n+                self.check_builtin_attribute(attr, name, template),\n+            _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n                     attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();"}, {"sha": "9d2ac5b4b51688a82c2e94f86f4c3f650b3da221", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -729,7 +729,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         t: &TokenKind,\n     ) -> PResult<'a, bool /* recovered */> {\n-        let token_str = pprust::token_to_string(t);\n+        let token_str = pprust::token_kind_to_string(t);\n         let this_token_str = self.this_token_descr();\n         let (prev_sp, sp) = match (&self.token.kind, self.subparser_name) {\n             // Point at the end of the macro call when reaching end of macro arguments."}, {"sha": "2f4c48d4bf9e0c5581c96d39bf2226f88ecb9233", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1501,7 +1501,7 @@ fn char_at(s: &str, byte: usize) -> char {\n mod tests {\n     use super::*;\n \n-    use crate::ast::{Ident, CrateConfig};\n+    use crate::ast::CrateConfig;\n     use crate::symbol::Symbol;\n     use crate::source_map::{SourceMap, FilePathMapping};\n     use crate::feature_gate::UnstableFeatures;\n@@ -1562,7 +1562,7 @@ mod tests {\n             assert_eq!(string_reader.next_token(), token::Whitespace);\n             let tok1 = string_reader.next_token();\n             let tok2 = Token::new(\n-                token::Ident(Symbol::intern(\"fn\"), false),\n+                mk_ident(\"fn\"),\n                 Span::new(BytePos(21), BytePos(23), NO_EXPANSION),\n             );\n             assert_eq!(tok1.kind, tok2.kind);\n@@ -1593,7 +1593,7 @@ mod tests {\n \n     // make the identifier by looking up the string in the interner\n     fn mk_ident(id: &str) -> TokenKind {\n-        TokenKind::from_ast_ident(Ident::from_str(id))\n+        token::Ident(Symbol::intern(id), false)\n     }\n \n     fn mk_lit(kind: token::LitKind, symbol: &str, suffix: Option<&str>) -> TokenKind {"}, {"sha": "99d9d40a45b931b353ee3e8eb037e206c51269f0", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -211,7 +211,7 @@ impl<'a> TokenTreesReader<'a> {\n                 let raw = self.string_reader.peek_span_src_raw;\n                 self.real_token();\n                 let is_joint = raw.hi() == self.string_reader.peek_span_src_raw.lo()\n-                    && token::is_op(&self.token);\n+                    && self.token.is_op();\n                 Ok((tt, if is_joint { Joint } else { NonJoint }))\n             }\n         }"}, {"sha": "cde35681988db905f0188fab5343ba82d7a62037", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -9,7 +9,7 @@ use crate::parse::parser::emit_unclosed_delims;\n use crate::parse::token::TokenKind;\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n-use crate::print::pprust::token_to_string;\n+use crate::print::pprust;\n \n use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::{Lrc, Lock};\n@@ -312,7 +312,7 @@ pub fn maybe_file_to_stream(\n             for unmatched in unmatched_braces {\n                 let mut db = sess.span_diagnostic.struct_span_err(unmatched.found_span, &format!(\n                     \"incorrect close delimiter: `{}`\",\n-                    token_to_string(&token::CloseDelim(unmatched.found_delim)),\n+                    pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n                 ));\n                 db.span_label(unmatched.found_span, \"incorrect close delimiter\");\n                 if let Some(sp) = unmatched.candidate_span {"}, {"sha": "d9eba3bbadb687a1964868c433541c8431766981", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -401,7 +401,7 @@ crate enum TokenType {\n impl TokenType {\n     crate fn to_string(&self) -> String {\n         match *self {\n-            TokenType::Token(ref t) => format!(\"`{}`\", pprust::token_to_string(t)),\n+            TokenType::Token(ref t) => format!(\"`{}`\", pprust::token_kind_to_string(t)),\n             TokenType::Keyword(kw) => format!(\"`{}`\", kw),\n             TokenType::Operator => \"an operator\".to_string(),\n             TokenType::Lifetime => \"lifetime\".to_string(),\n@@ -418,7 +418,7 @@ impl TokenType {\n ///\n /// Types can also be of the form `IDENT(u8, u8) -> u8`, however this assumes\n /// that `IDENT` is not the ident of a fn trait.\n-fn can_continue_type_after_non_fn_ident(t: &TokenKind) -> bool {\n+fn can_continue_type_after_non_fn_ident(t: &Token) -> bool {\n     t == &token::ModSep || t == &token::Lt ||\n     t == &token::BinOp(token::Shl)\n }\n@@ -586,10 +586,10 @@ impl<'a> Parser<'a> {\n         edible: &[TokenKind],\n         inedible: &[TokenKind],\n     ) -> PResult<'a, bool /* recovered */> {\n-        if edible.contains(&self.token) {\n+        if edible.contains(&self.token.kind) {\n             self.bump();\n             Ok(false)\n-        } else if inedible.contains(&self.token) {\n+        } else if inedible.contains(&self.token.kind) {\n             // leave it in the input\n             Ok(false)\n         } else if self.last_unexpected_token_span == Some(self.token.span) {\n@@ -951,7 +951,7 @@ impl<'a> Parser<'a> {\n                         Err(mut e) => {\n                             // Attempt to keep parsing if it was a similar separator\n                             if let Some(ref tokens) = t.similar_tokens() {\n-                                if tokens.contains(&self.token) {\n+                                if tokens.contains(&self.token.kind) {\n                                     self.bump();\n                                 }\n                             }\n@@ -1756,7 +1756,7 @@ impl<'a> Parser<'a> {\n     fn parse_path_segment(&mut self, style: PathStyle) -> PResult<'a, PathSegment> {\n         let ident = self.parse_path_segment_ident()?;\n \n-        let is_args_start = |token: &TokenKind| match *token {\n+        let is_args_start = |token: &Token| match token.kind {\n             token::Lt | token::BinOp(token::Shl) | token::OpenDelim(token::Paren)\n             | token::LArrow => true,\n             _ => false,\n@@ -2627,9 +2627,11 @@ impl<'a> Parser<'a> {\n                     token::Ident(name, _) => name,\n                     _ => unreachable!()\n                 };\n-                let mut err = self.fatal(&format!(\"unknown macro variable `{}`\", name));\n-                err.span_label(self.token.span, \"unknown macro variable\");\n-                err.emit();\n+                let span = self.prev_span.to(self.token.span);\n+                self.diagnostic()\n+                    .struct_span_fatal(span, &format!(\"unknown macro variable `{}`\", name))\n+                    .span_label(span, \"unknown macro variable\")\n+                    .emit();\n                 self.bump();\n                 return\n             }\n@@ -2820,7 +2822,7 @@ impl<'a> Parser<'a> {\n                 LhsExpr::AttributesParsed(attrs) => Some(attrs),\n                 _ => None,\n             };\n-            if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token) {\n+            if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {\n                 return self.parse_prefix_range_expr(attrs);\n             } else {\n                 self.parse_prefix_expr(attrs)?\n@@ -3097,7 +3099,7 @@ impl<'a> Parser<'a> {\n             self.err_dotdotdot_syntax(self.token.span);\n         }\n \n-        debug_assert!([token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token),\n+        debug_assert!([token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind),\n                       \"parse_prefix_range_expr: token {:?} is not DotDot/DotDotEq\",\n                       self.token);\n         let tok = self.token.clone();\n@@ -7865,7 +7867,7 @@ pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler:\n     for unmatched in unclosed_delims.iter() {\n         let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n             \"incorrect close delimiter: `{}`\",\n-            pprust::token_to_string(&token::CloseDelim(unmatched.found_delim)),\n+            pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n         ));\n         err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n         if let Some(sp) = unmatched.candidate_span {"}, {"sha": "cc34883e2e8151fde9b682c6635c59995dae2f46", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 73, "deletions": 122, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -17,7 +17,6 @@ use log::info;\n \n use std::fmt;\n use std::mem;\n-use std::ops::Deref;\n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n@@ -242,20 +241,57 @@ pub struct Token {\n }\n \n impl TokenKind {\n-    /// Recovers a `TokenKind` from an `ast::Ident`. This creates a raw identifier if necessary.\n-    pub fn from_ast_ident(ident: ast::Ident) -> TokenKind {\n-        Ident(ident.name, ident.is_raw_guess())\n+    pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {\n+        Literal(Lit::new(kind, symbol, suffix))\n     }\n \n-    crate fn is_like_plus(&self) -> bool {\n+    /// Returns tokens that are likely to be typed accidentally instead of the current token.\n+    /// Enables better error recovery when the wrong token is found.\n+    crate fn similar_tokens(&self) -> Option<Vec<TokenKind>> {\n         match *self {\n-            BinOp(Plus) | BinOpEq(Plus) => true,\n-            _ => false,\n+            Comma => Some(vec![Dot, Lt, Semi]),\n+            Semi => Some(vec![Colon, Comma]),\n+            _ => None\n         }\n     }\n }\n \n impl Token {\n+    crate fn new(kind: TokenKind, span: Span) -> Self {\n+        Token { kind, span }\n+    }\n+\n+    /// Some token that will be thrown away later.\n+    crate fn dummy() -> Self {\n+        Token::new(TokenKind::Whitespace, DUMMY_SP)\n+    }\n+\n+    /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n+    crate fn from_ast_ident(ident: ast::Ident) -> Self {\n+        Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)\n+    }\n+\n+    /// Return this token by value and leave a dummy token in its place.\n+    crate fn take(&mut self) -> Self {\n+        mem::replace(self, Token::dummy())\n+    }\n+\n+    crate fn is_op(&self) -> bool {\n+        match self.kind {\n+            OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) |\n+            Ident(..) | Lifetime(..) | Interpolated(..) |\n+            Whitespace | Comment | Shebang(..) | Eof => false,\n+            _ => true,\n+        }\n+    }\n+\n+    crate fn is_like_plus(&self) -> bool {\n+        match self.kind {\n+            BinOp(Plus) | BinOpEq(Plus) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if the token can appear at the start of an expression.\n     crate fn can_begin_expr(&self) -> bool {\n         match self.kind {\n@@ -310,12 +346,10 @@ impl Token {\n             _ => false,\n         }\n     }\n-}\n \n-impl TokenKind {\n     /// Returns `true` if the token can appear at the start of a const param.\n-    pub fn can_begin_const_arg(&self) -> bool {\n-        match self {\n+    crate fn can_begin_const_arg(&self) -> bool {\n+        match self.kind {\n             OpenDelim(Brace) => true,\n             Interpolated(ref nt) => match **nt {\n                 NtExpr(..) => true,\n@@ -326,31 +360,23 @@ impl TokenKind {\n             _ => self.can_begin_literal_or_bool(),\n         }\n     }\n-}\n \n-impl Token {\n     /// Returns `true` if the token can appear at the start of a generic bound.\n     crate fn can_begin_bound(&self) -> bool {\n         self.is_path_start() || self.is_lifetime() || self.is_keyword(kw::For) ||\n         self == &Question || self == &OpenDelim(Paren)\n     }\n-}\n-\n-impl TokenKind {\n-    pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {\n-        Literal(Lit::new(kind, symbol, suffix))\n-    }\n \n     /// Returns `true` if the token is any literal\n     crate fn is_lit(&self) -> bool {\n-        match *self {\n+        match self.kind {\n             Literal(..) => true,\n             _           => false,\n         }\n     }\n \n     crate fn expect_lit(&self) -> Lit {\n-        match *self {\n+        match self.kind {\n             Literal(lit) => lit,\n             _=> panic!(\"`expect_lit` called on non-literal\"),\n         }\n@@ -359,7 +385,7 @@ impl TokenKind {\n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n     crate fn can_begin_literal_or_bool(&self) -> bool {\n-        match *self {\n+        match self.kind {\n             Literal(..)  => true,\n             BinOp(Minus) => true,\n             Ident(name, false) if name == kw::True => true,\n@@ -371,9 +397,7 @@ impl TokenKind {\n             _            => false,\n         }\n     }\n-}\n \n-impl Token {\n     /// Returns an identifier if this token is an identifier.\n     pub fn ident(&self) -> Option<(ast::Ident, /* is_raw */ bool)> {\n         match self.kind {\n@@ -397,49 +421,25 @@ impl Token {\n             _ => None,\n         }\n     }\n-}\n \n-impl TokenKind {\n-    /// Returns an identifier name if this token is an identifier.\n-    pub fn ident_name(&self) -> Option<(ast::Name, /* is_raw */ bool)> {\n-        match *self {\n-            Ident(name, is_raw) => Some((name, is_raw)),\n-            Interpolated(ref nt) => match **nt {\n-                NtIdent(ident, is_raw) => Some((ident.name, is_raw)),\n-                _ => None,\n-            },\n-            _ => None,\n-        }\n-    }\n-    /// Returns a lifetime name if this token is a lifetime.\n-    pub fn lifetime_name(&self) -> Option<ast::Name> {\n-        match *self {\n-            Lifetime(name) => Some(name),\n-            Interpolated(ref nt) => match **nt {\n-                NtLifetime(ident) => Some(ident.name),\n-                _ => None,\n-            },\n-            _ => None,\n-        }\n-    }\n     /// Returns `true` if the token is an identifier.\n     pub fn is_ident(&self) -> bool {\n-        self.ident_name().is_some()\n+        self.ident().is_some()\n     }\n     /// Returns `true` if the token is a lifetime.\n     crate fn is_lifetime(&self) -> bool {\n-        self.lifetime_name().is_some()\n+        self.lifetime().is_some()\n     }\n \n     /// Returns `true` if the token is a identifier whose name is the given\n     /// string slice.\n     crate fn is_ident_named(&self, name: Symbol) -> bool {\n-        self.ident_name().map_or(false, |(ident_name, _)| ident_name == name)\n+        self.ident().map_or(false, |(ident, _)| ident.name == name)\n     }\n \n     /// Returns `true` if the token is an interpolated path.\n     fn is_path(&self) -> bool {\n-        if let Interpolated(ref nt) = *self {\n+        if let Interpolated(ref nt) = self.kind {\n             if let NtPath(..) = **nt {\n                 return true;\n             }\n@@ -456,33 +456,27 @@ impl TokenKind {\n     crate fn is_qpath_start(&self) -> bool {\n         self == &Lt || self == &BinOp(Shl)\n     }\n-}\n \n-impl Token {\n     crate fn is_path_start(&self) -> bool {\n         self == &ModSep || self.is_qpath_start() || self.is_path() ||\n         self.is_path_segment_keyword() || self.is_ident() && !self.is_reserved_ident()\n     }\n-}\n \n-impl TokenKind {\n     /// Returns `true` if the token is a given keyword, `kw`.\n     pub fn is_keyword(&self, kw: Symbol) -> bool {\n-        self.ident_name().map(|(name, is_raw)| name == kw && !is_raw).unwrap_or(false)\n+        self.ident().map(|(id, is_raw)| id.name == kw && !is_raw).unwrap_or(false)\n     }\n \n-    pub fn is_path_segment_keyword(&self) -> bool {\n-        match self.ident_name() {\n-            Some((name, false)) => name.is_path_segment_keyword(),\n+    crate fn is_path_segment_keyword(&self) -> bool {\n+        match self.ident() {\n+            Some((id, false)) => id.is_path_segment_keyword(),\n             _ => false,\n         }\n     }\n-}\n \n-impl Token {\n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n-    pub fn is_special_ident(&self) -> bool {\n+    crate fn is_special_ident(&self) -> bool {\n         match self.ident() {\n             Some((id, false)) => id.is_special(),\n             _ => false,\n@@ -512,55 +506,53 @@ impl Token {\n             _ => false,\n         }\n     }\n-}\n \n-impl TokenKind {\n-    crate fn glue(self, joint: TokenKind) -> Option<TokenKind> {\n-        Some(match self {\n-            Eq => match joint {\n+    crate fn glue(self, joint: Token) -> Option<Token> {\n+        let kind = match self.kind {\n+            Eq => match joint.kind {\n                 Eq => EqEq,\n                 Gt => FatArrow,\n                 _ => return None,\n             },\n-            Lt => match joint {\n+            Lt => match joint.kind {\n                 Eq => Le,\n                 Lt => BinOp(Shl),\n                 Le => BinOpEq(Shl),\n                 BinOp(Minus) => LArrow,\n                 _ => return None,\n             },\n-            Gt => match joint {\n+            Gt => match joint.kind {\n                 Eq => Ge,\n                 Gt => BinOp(Shr),\n                 Ge => BinOpEq(Shr),\n                 _ => return None,\n             },\n-            Not => match joint {\n+            Not => match joint.kind {\n                 Eq => Ne,\n                 _ => return None,\n             },\n-            BinOp(op) => match joint {\n+            BinOp(op) => match joint.kind {\n                 Eq => BinOpEq(op),\n                 BinOp(And) if op == And => AndAnd,\n                 BinOp(Or) if op == Or => OrOr,\n                 Gt if op == Minus => RArrow,\n                 _ => return None,\n             },\n-            Dot => match joint {\n+            Dot => match joint.kind {\n                 Dot => DotDot,\n                 DotDot => DotDotDot,\n                 _ => return None,\n             },\n-            DotDot => match joint {\n+            DotDot => match joint.kind {\n                 Dot => DotDotDot,\n                 Eq => DotDotEq,\n                 _ => return None,\n             },\n-            Colon => match joint {\n+            Colon => match joint.kind {\n                 Colon => ModSep,\n                 _ => return None,\n             },\n-            SingleQuote => match joint {\n+            SingleQuote => match joint.kind {\n                 Ident(name, false) => Lifetime(Symbol::intern(&format!(\"'{}\", name))),\n                 _ => return None,\n             },\n@@ -570,26 +562,18 @@ impl TokenKind {\n             Question | OpenDelim(..) | CloseDelim(..) |\n             Literal(..) | Ident(..) | Lifetime(..) | Interpolated(..) | DocComment(..) |\n             Whitespace | Comment | Shebang(..) | Eof => return None,\n-        })\n-    }\n+        };\n \n-    /// Returns tokens that are likely to be typed accidentally instead of the current token.\n-    /// Enables better error recovery when the wrong token is found.\n-    crate fn similar_tokens(&self) -> Option<Vec<TokenKind>> {\n-        match *self {\n-            Comma => Some(vec![Dot, Lt, Semi]),\n-            Semi => Some(vec![Colon, Comma]),\n-            _ => None\n-        }\n+        Some(Token::new(kind, self.span.to(joint.span)))\n     }\n \n     // See comments in `Nonterminal::to_tokenstream` for why we care about\n     // *probably* equal here rather than actual equality\n-    crate fn probably_equal_for_proc_macro(&self, other: &TokenKind) -> bool {\n-        if mem::discriminant(self) != mem::discriminant(other) {\n+    crate fn probably_equal_for_proc_macro(&self, other: &Token) -> bool {\n+        if mem::discriminant(&self.kind) != mem::discriminant(&other.kind) {\n             return false\n         }\n-        match (self, other) {\n+        match (&self.kind, &other.kind) {\n             (&Eq, &Eq) |\n             (&Lt, &Lt) |\n             (&Le, &Le) |\n@@ -643,36 +627,12 @@ impl TokenKind {\n     }\n }\n \n-impl Token {\n-    crate fn new(kind: TokenKind, span: Span) -> Self {\n-        Token { kind, span }\n-    }\n-\n-    /// Some token that will be thrown away later.\n-    crate fn dummy() -> Self {\n-        Token::new(TokenKind::Whitespace, DUMMY_SP)\n-    }\n-\n-    /// Return this token by value and leave a dummy token in its place.\n-    crate fn take(&mut self) -> Self {\n-        mem::replace(self, Token::dummy())\n-    }\n-}\n-\n impl PartialEq<TokenKind> for Token {\n     fn eq(&self, rhs: &TokenKind) -> bool {\n         self.kind == *rhs\n     }\n }\n \n-// FIXME: Remove this after all necessary methods are moved from `TokenKind` to `Token`.\n-impl Deref for Token {\n-    type Target = TokenKind;\n-    fn deref(&self) -> &Self::Target {\n-        &self.kind\n-    }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n@@ -812,15 +772,6 @@ impl Nonterminal {\n     }\n }\n \n-crate fn is_op(tok: &TokenKind) -> bool {\n-    match *tok {\n-        OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) |\n-        Ident(..) | Lifetime(..) | Interpolated(..) |\n-        Whitespace | Comment | Shebang(..) | Eof => false,\n-        _ => true,\n-    }\n-}\n-\n fn prepend_attrs(sess: &ParseSess,\n                  attrs: &[ast::Attribute],\n                  tokens: Option<&tokenstream::TokenStream>,"}, {"sha": "4cbe590d44bfee9da94ac36e265f07c7bba801c6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -6,7 +6,7 @@ use crate::ast::{Attribute, MacDelimiter, GenericArg};\n use crate::util::parser::{self, AssocOp, Fixity};\n use crate::attr;\n use crate::source_map::{self, SourceMap, Spanned};\n-use crate::parse::token::{self, BinOpToken, Nonterminal, TokenKind};\n+use crate::parse::token::{self, BinOpToken, Nonterminal, Token, TokenKind};\n use crate::parse::lexer::comments;\n use crate::parse::{self, ParseSess};\n use crate::print::pp::{self, Breaks};\n@@ -189,7 +189,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     out\n }\n \n-pub fn token_to_string(tok: &TokenKind) -> String {\n+pub fn token_kind_to_string(tok: &TokenKind) -> String {\n     match *tok {\n         token::Eq                   => \"=\".to_string(),\n         token::Lt                   => \"<\".to_string(),\n@@ -250,6 +250,10 @@ pub fn token_to_string(tok: &TokenKind) -> String {\n     }\n }\n \n+pub fn token_to_string(token: &Token) -> String {\n+    token_kind_to_string(&token.kind)\n+}\n+\n pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     match *nt {\n         token::NtExpr(ref e)        => expr_to_string(e),\n@@ -734,11 +738,11 @@ pub trait PrintState<'a> {\n                 }\n             }\n             TokenTree::Delimited(_, delim, tts) => {\n-                self.writer().word(token_to_string(&token::OpenDelim(delim)))?;\n+                self.writer().word(token_kind_to_string(&token::OpenDelim(delim)))?;\n                 self.writer().space()?;\n                 self.print_tts(tts)?;\n                 self.writer().space()?;\n-                self.writer().word(token_to_string(&token::CloseDelim(delim)))\n+                self.writer().word(token_kind_to_string(&token::CloseDelim(delim)))\n             },\n         }\n     }"}, {"sha": "2daec9702798fd1ef5c97e2a2a5231929743f168", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -126,14 +126,6 @@ impl TokenTree {\n         }\n     }\n \n-    /// Indicates if the stream is a token that is equal to the provided token.\n-    pub fn eq_token(&self, t: TokenKind) -> bool {\n-        match self {\n-            TokenTree::Token(token) => *token == t,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn joint(self) -> TokenStream {\n         TokenStream::new(vec![(self, Joint)])\n     }\n@@ -430,11 +422,10 @@ impl TokenStreamBuilder {\n         let last_tree_if_joint = self.0.last().and_then(TokenStream::last_tree_if_joint);\n         if let Some(TokenTree::Token(last_token)) = last_tree_if_joint {\n             if let Some((TokenTree::Token(token), is_joint)) = stream.first_tree_and_joint() {\n-                if let Some(glued_tok) = last_token.kind.glue(token.kind) {\n+                if let Some(glued_tok) = last_token.glue(token) {\n                     let last_stream = self.0.pop().unwrap();\n                     self.push_all_but_last_tree(&last_stream);\n-                    let glued_span = last_token.span.to(token.span);\n-                    let glued_tt = TokenTree::token(glued_tok, glued_span);\n+                    let glued_tt = TokenTree::Token(glued_tok);\n                     let glued_tokenstream = TokenStream::new(vec![(glued_tt, is_joint)]);\n                     self.0.push(glued_tokenstream);\n                     self.push_all_but_first_tree(&stream);"}, {"sha": "69dd96625cc020d694e9aaa039f51658237745ab", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,4 +1,4 @@\n-use crate::parse::token::{self, TokenKind, BinOpToken};\n+use crate::parse::token::{self, Token, BinOpToken};\n use crate::symbol::kw;\n use crate::ast::{self, BinOpKind};\n \n@@ -69,9 +69,9 @@ pub enum Fixity {\n \n impl AssocOp {\n     /// Creates a new AssocOP from a token\n-    pub fn from_token(t: &TokenKind) -> Option<AssocOp> {\n+    pub fn from_token(t: &Token) -> Option<AssocOp> {\n         use AssocOp::*;\n-        match *t {\n+        match t.kind {\n             token::BinOpEq(k) => Some(AssignOp(k)),\n             token::Eq => Some(Assign),\n             token::BinOp(BinOpToken::Star) => Some(Multiply),"}, {"sha": "8f5595968a73820e40145664052838dd00e105a7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -11,7 +11,6 @@\n \n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n-#![feature(custom_attribute)]\n #![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]"}, {"sha": "302b3c75263cf687c32a56660d1cb8c667e7f3ac", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -513,6 +513,7 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n@@ -526,6 +527,7 @@ symbols! {\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_doc_only_macro,\n+        rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,"}, {"sha": "3b5ac7baf20bd29b3c0d6213ee86045d4b9fa3cb", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -38,9 +38,6 @@\n #![deny(rust_2018_idioms)]\n \n #![cfg_attr(windows, feature(libc))]\n-// Handle rustfmt skips\n-#![feature(custom_attribute)]\n-#![allow(unused_attributes)]\n \n use std::io::prelude::*;\n use std::io::{self, Stdout, Stderr};"}, {"sha": "bd121ef24adae1db555cffc70af3c327d564c2b0", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -2,7 +2,7 @@\n // ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n pub struct S {\n   _field: [i32; 8],\n@@ -146,7 +146,7 @@ pub fn enum_id_2(x: Option<u8>) -> Option<u8> {\n \n // CHECK: noalias i8* @allocator()\n #[no_mangle]\n-#[allocator]\n+#[rustc_allocator]\n pub fn allocator() -> *const i8 {\n   std::ptr::null()\n }"}, {"sha": "0a745e7d34fc1bcab326efa5a9dc39a9ef0e4b76", "filename": "src/test/pretty/attr-fn-inner.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,15 +1,16 @@\n-// pp-exact\n // Testing that both the inner item and next outer item are\n // preserved, and that the first outer item parsed in main is not\n // accidentally carried over to each inner function\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![inner_attr]\n-    #[outer_attr]\n+    #![rustc_dummy]\n+    #[rustc_dummy]\n     fn f() { }\n \n-    #[outer_attr]\n+    #[rustc_dummy]\n     fn g() { }\n }"}, {"sha": "44d2c5db3e668e67fad55215387a9710a4aeb250", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,13 +1,14 @@\n-// pp-exact\n // Tests literals in attributes.\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![hello(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n-    #[align = 8]\n+    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n+    #[rustc_dummy = 8]\n     fn f() { }\n \n-    #[vector(1, 2, 3)]\n+    #[rustc_dummy(1, 2, 3)]\n     fn g() { }\n }"}, {"sha": "d81485b555fa6c502a699f52e2ca5308d0d46be4", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 134, "deletions": 145, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,84 +1,84 @@\n // pp-exact\n \n-#![feature(custom_attribute)]\n #![feature(box_syntax)]\n+#![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n \n fn main() { }\n \n fn _0() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     foo();\n }\n \n fn _1() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     unsafe {\n         // code\n     }\n }\n \n fn _2() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     { foo(); }\n \n     {\n-        #![attr]\n+        #![rustc_dummy]\n \n         foo()\n     }\n }\n \n fn _3() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () { _ => { } }\n }\n \n fn _4() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () {\n-        #![attr]\n+        #![rustc_dummy]\n         _ => (),\n     }\n \n     let _ =\n-        #[attr] match () {\n-                    #![attr]\n-                    () => (),\n-                };\n+        #[rustc_dummy] match () {\n+                           #![rustc_dummy]\n+                           () => (),\n+                       };\n }\n \n fn _5() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     let x = 1;\n \n-    let x = #[attr] 1;\n+    let x = #[rustc_dummy] 1;\n \n     let y = ();\n     let z = ();\n \n-    foo3(x, #[attr] y, z);\n+    foo3(x, #[rustc_dummy] y, z);\n \n-    qux(3 + #[attr] 2);\n+    qux(3 + #[rustc_dummy] 2);\n }\n \n fn _6() {\n \n-    #[attr]\n-    [#![attr] 1, 2, 3];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1, 2, 3];\n \n-    let _ = #[attr] [#![attr] 1, 2, 3];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1, 2, 3];\n \n-    #[attr]\n-    [#![attr] 1; 4];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1; 4];\n \n-    let _ = #[attr] [#![attr] 1; 4];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1; 4];\n }\n \n struct Foo {\n@@ -89,184 +89,173 @@ struct Bar(());\n \n fn _7() {\n \n-    #[attr]\n-    Foo{#![attr] data: (),};\n+    #[rustc_dummy]\n+    Foo{#![rustc_dummy] data: (),};\n \n-    let _ = #[attr] Foo{#![attr] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n }\n \n fn _8() {\n \n-    #[attr]\n-    (#![attr] );\n+    #[rustc_dummy]\n+    (#![rustc_dummy] );\n \n-    #[attr]\n-    (#![attr] 0);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0);\n \n-    #[attr]\n-    (#![attr] 0,);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0,);\n \n-    #[attr]\n-    (#![attr] 0, 1);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0, 1);\n }\n \n fn _9() {\n     macro_rules! stmt_mac((  ) => { let _ = (  ) ; });\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n \n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-\n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!{ };\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac![];\n \n-    #[attr]\n-    stmt_mac!{ } // pre-existing pp bug: compiler ICEs with a None unwrap\n-    */\n+    #[rustc_dummy]\n+    stmt_mac!{ }\n \n     let _ = ();\n }\n \n macro_rules! expr_mac((  ) => { (  ) });\n \n fn _10() {\n-\n-    let _ = #[attr] expr_mac!();\n-\n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n }\n \n fn _11() {\n-    let _ = #[attr] box 0;\n-    let _: [(); 0] = #[attr] [#![attr] ];\n-    let _ = #[attr] [#![attr] 0, 0];\n-    let _ = #[attr] [#![attr] 0; 0];\n-    let _ = #[attr] foo();\n-    let _ = #[attr] 1i32.clone();\n-    let _ = #[attr] (#![attr] );\n-    let _ = #[attr] (#![attr] 0);\n-    let _ = #[attr] (#![attr] 0,);\n-    let _ = #[attr] (#![attr] 0, 0);\n-    let _ = #[attr] 0 + #[attr] 0;\n-    let _ = #[attr] !0;\n-    let _ = #[attr] -0i32;\n-    let _ = #[attr] false;\n-    let _ = #[attr] 'c';\n-    let _ = #[attr] 0;\n-    let _ = #[attr] 0 as usize;\n+    let _ = #[rustc_dummy] box 0;\n+    let _: [(); 0] = #[rustc_dummy] [#![rustc_dummy] ];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0, 0];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0; 0];\n+    let _ = #[rustc_dummy] foo();\n+    let _ = #[rustc_dummy] 1i32.clone();\n+    let _ = #[rustc_dummy] (#![rustc_dummy] );\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0,);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0, 0);\n+    let _ = #[rustc_dummy] 0 + #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] !0;\n+    let _ = #[rustc_dummy] -0i32;\n+    let _ = #[rustc_dummy] false;\n+    let _ = #[rustc_dummy] 'c';\n+    let _ = #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n-        #[attr] while false {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while false {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] while let None = Some(()) {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while let None = Some(()) {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] for _ in 0..0 {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] for _ in 0..0 {\n+                           #![rustc_dummy]\n+                       };\n     // FIXME: pp bug, two spaces after the loop\n     let _ =\n-        #[attr] loop  {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] loop  {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] match false {\n-                    #![attr]\n-                    _ => (),\n-                };\n-    let _ = #[attr] || #[attr] ();\n-    let _ = #[attr] move || #[attr] ();\n+        #[rustc_dummy] match false {\n+                           #![rustc_dummy]\n+                           _ => (),\n+                       };\n+    let _ = #[rustc_dummy] || #[rustc_dummy] ();\n+    let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n-        #[attr] ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] move ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] move ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    ()\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                           ()\n+                       };\n     let mut x = 0;\n-    let _ = #[attr] x = 15;\n-    let _ = #[attr] x += 15;\n+    let _ = #[rustc_dummy] x = 15;\n+    let _ = #[rustc_dummy] x += 15;\n     let s = Foo{data: (),};\n-    let _ = #[attr] s.data;\n-    let _ = (#[attr] s).data;\n+    let _ = #[rustc_dummy] s.data;\n+    let _ = (#[rustc_dummy] s).data;\n     let t = Bar(());\n-    let _ = #[attr] t.0;\n-    let _ = (#[attr] t).0;\n+    let _ = #[rustc_dummy] t.0;\n+    let _ = (#[rustc_dummy] t).0;\n     let v = vec!(0);\n-    let _ = #[attr] v[0];\n-    let _ = (#[attr] v)[0];\n-    let _ = #[attr] 0..#[attr] 0;\n-    let _ = #[attr] 0..;\n-    let _ = #[attr] (0..0);\n-    let _ = #[attr] (0..);\n-    let _ = #[attr] (..0);\n-    let _ = #[attr] (..);\n-    let _: fn(&u32) -> u32 = #[attr] std::clone::Clone::clone;\n-    let _ = #[attr] &0;\n-    let _ = #[attr] &mut 0;\n-    let _ = #[attr] &#[attr] 0;\n-    let _ = #[attr] &mut #[attr] 0;\n+    let _ = #[rustc_dummy] v[0];\n+    let _ = (#[rustc_dummy] v)[0];\n+    let _ = #[rustc_dummy] 0..#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0..;\n+    let _ = #[rustc_dummy] (0..0);\n+    let _ = #[rustc_dummy] (0..);\n+    let _ = #[rustc_dummy] (..0);\n+    let _ = #[rustc_dummy] (..);\n+    let _: fn(&u32) -> u32 = #[rustc_dummy] std::clone::Clone::clone;\n+    let _ = #[rustc_dummy] &0;\n+    let _ = #[rustc_dummy] &mut 0;\n+    let _ = #[rustc_dummy] &#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] &mut #[rustc_dummy] 0;\n     // FIXME: pp bug, extra space after keyword?\n-    while false { let _ = #[attr] continue ; }\n-    while true { let _ = #[attr] break ; }\n-    || #[attr] return;\n-    let _ = #[attr] expr_mac!();\n-    /* FIXME: pp bug, losing delimiter styles\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n-    let _ = #[attr] Foo{#![attr] data: (),};\n-    let _ = #[attr] Foo{#![attr] ..s};\n-    let _ = #[attr] Foo{#![attr] data: (), ..s};\n-    let _ = #[attr] (#![attr] 0);\n+    while false { let _ = #[rustc_dummy] continue ; }\n+    while true { let _ = #[rustc_dummy] break ; }\n+    || #[rustc_dummy] return;\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] ..s};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (), ..s};\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n }\n \n fn _12() {\n-    #[attr]\n+    #[rustc_dummy]\n     let _ = 0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     expr_mac!();\n \n-    #[attr]\n+    #[rustc_dummy]\n     {\n-        #![attr]\n+        #![rustc_dummy]\n     }\n }\n "}, {"sha": "14b4189684f9c317f055be035a21ec353c47ee15", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,11 +0,0 @@\n-#![allow(unused_attributes)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute, test)]\n-\n-#[foo = \"bar\"]\n-extern crate test;\n-\n-pub fn main() {\n-}"}, {"sha": "6fc1e35d47ac511ac5440152f6f65728372da2e6", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,13 +0,0 @@\n-#![allow(unused_attributes)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute, test)]\n-\n-mod m {\n-    #[foo = \"bar\"]\n-    extern crate test;\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "223a434dbb9e7e976a566a26678f3d9125af3f70", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,14 +0,0 @@\n-#![allow(unused_attributes)]\n-#![allow(unknown_lints)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![allow(unused_attribute)]\n-#![feature(custom_attribute)]\n-\n-#[foo(bar)]\n-mod foo {\n-  #![feature(globs)]\n-}\n-\n-pub fn main() {}"}, {"sha": "bedf3020c8be0fd8363f1f7d1bd47f9e78a80093", "filename": "src/test/run-pass/auxiliary/allocator-dummy.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,59 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![feature(allocator, core_intrinsics, panic_unwind)]\n-#![allocator]\n-#![crate_type = \"rlib\"]\n-#![no_std]\n-\n-extern crate unwind;\n-\n-pub static mut HITS: usize = 0;\n-\n-type size_t = usize;\n-\n-extern {\n-    fn malloc(size: usize) -> *mut u8;\n-    fn free(ptr: *mut u8);\n-    fn calloc(size: usize, amt: usize) -> *mut u8;\n-    fn realloc(ptr: *mut u8, size: usize) -> *mut u8;\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n-    unsafe {\n-        HITS += 1;\n-        malloc(size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate_zeroed(size: usize, _align: usize) -> *mut u8 {\n-    unsafe { calloc(size as size_t, 1) as *mut u8 }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n-    unsafe {\n-        HITS += 1;\n-        free(ptr as *mut _)\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize,\n-                                align: usize) -> *mut u8 {\n-    unsafe {\n-        realloc(ptr as *mut _, size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate_inplace(ptr: *mut u8, old_size: usize,\n-                                        size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}"}, {"sha": "361f8a1d3406ec142914ba2ccb147bf736938361", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -6,7 +6,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate check_static_recursion_foreign_helper;\n extern crate libc;"}, {"sha": "1d3123d216ebfb53ae63ebe190c6961c5f30c6de", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -8,16 +8,12 @@ const TO_BE_BYTES: [u8; 4] = 0x12_34_56_78_i32.to_be_bytes();\n const TO_LE_BYTES: [u8; 4] = 0x12_34_56_78_i32.to_le_bytes();\n const TO_NE_BYTES: [u8; 4] = i32::min_value().to_be().to_ne_bytes();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(REVERSE, ident(0x1e6a2c48));\n-    assert_eq!(FROM_BE_BYTES, ident(0x12_34_56_78));\n-    assert_eq!(FROM_LE_BYTES, ident(0x78_56_34_12));\n-    assert_eq!(FROM_NE_BYTES, ident(i32::min_value()));\n-    assert_eq!(TO_BE_BYTES, ident([0x12, 0x34, 0x56, 0x78]));\n-    assert_eq!(TO_LE_BYTES, ident([0x78, 0x56, 0x34, 0x12]));\n-    assert_eq!(TO_NE_BYTES, ident([0x80, 0, 0, 0]));\n+    assert_eq!(REVERSE, 0x1e6a2c48);\n+    assert_eq!(FROM_BE_BYTES, 0x12_34_56_78);\n+    assert_eq!(FROM_LE_BYTES, 0x78_56_34_12);\n+    assert_eq!(FROM_NE_BYTES, i32::min_value());\n+    assert_eq!(TO_BE_BYTES, [0x12, 0x34, 0x56, 0x78]);\n+    assert_eq!(TO_LE_BYTES, [0x78, 0x56, 0x34, 0x12]);\n+    assert_eq!(TO_NE_BYTES, [0x80, 0, 0, 0]);\n }"}, {"sha": "9597393df72d27940010170a42fc6edcdbf61584", "filename": "src/test/run-pass/const-int-overflowing.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -16,26 +16,22 @@ const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(ADD_A, ident((7, false)));\n-    assert_eq!(ADD_B, ident((0, true)));\n+    assert_eq!(ADD_A, (7, false));\n+    assert_eq!(ADD_B, (0, true));\n \n-    assert_eq!(SUB_A, ident((3, false)));\n-    assert_eq!(SUB_B, ident((u32::max_value(), true)));\n+    assert_eq!(SUB_A, (3, false));\n+    assert_eq!(SUB_B, (u32::max_value(), true));\n \n-    assert_eq!(MUL_A, ident((10, false)));\n-    assert_eq!(MUL_B, ident((1410065408, true)));\n+    assert_eq!(MUL_A, (10, false));\n+    assert_eq!(MUL_B, (1410065408, true));\n \n-    assert_eq!(SHL_A, ident((0x10, false)));\n-    assert_eq!(SHL_B, ident((0x10, true)));\n+    assert_eq!(SHL_A, (0x10, false));\n+    assert_eq!(SHL_B, (0x10, true));\n \n-    assert_eq!(SHR_A, ident((0x1, false)));\n-    assert_eq!(SHR_B, ident((0x1, true)));\n+    assert_eq!(SHR_A, (0x1, false));\n+    assert_eq!(SHR_B, (0x1, true));\n \n-    assert_eq!(NEG_A, ident((0, false)));\n-    assert_eq!(NEG_B, ident((1, true)));\n+    assert_eq!(NEG_A, (0, false));\n+    assert_eq!(NEG_B, (1, true));\n }"}, {"sha": "16946eadd632aeb7c6dd1d652c729ab47b8fd9cc", "filename": "src/test/run-pass/const-int-rotate.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -21,25 +21,21 @@ const ZERO_ROTATE_RIGHT: i8 = 0b0111_1001i8.rotate_right(0);\n const MULTIPLE_ROTATE_LEFT: i32 = 0b0010_0001i32.rotate_left(128);\n const MULTIPLE_ROTATE_RIGHT: i32 = 0b0010_0001i32.rotate_right(128);\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(LEFT, ident(0xb301));\n-    assert_eq!(RIGHT, ident(0x0100_00b3));\n+    assert_eq!(LEFT, 0xb301);\n+    assert_eq!(RIGHT, 0x0100_00b3);\n \n-    assert_eq!(LEFT_OVERFLOW, ident(0));\n-    assert_eq!(RIGHT_OVERFLOW, ident(0));\n-    assert_eq!(ONE_LEFT_OVERFLOW, ident(0b0001_0000_0000_0000));\n-    assert_eq!(ONE_RIGHT_OVERFLOW, ident(0b0001_0000));\n+    assert_eq!(LEFT_OVERFLOW, 0);\n+    assert_eq!(RIGHT_OVERFLOW, 0);\n+    assert_eq!(ONE_LEFT_OVERFLOW, 0b0001_0000_0000_0000);\n+    assert_eq!(ONE_RIGHT_OVERFLOW, 0b0001_0000);\n \n-    assert_eq!(NON_ZERO_LEFT_OVERFLOW, ident(0b0010_0000_0000_0000));\n-    assert_eq!(NON_ZERO_RIGHT_OVERFLOW, ident(0b0000_0000_0010_0000));\n+    assert_eq!(NON_ZERO_LEFT_OVERFLOW, 0b0010_0000_0000_0000);\n+    assert_eq!(NON_ZERO_RIGHT_OVERFLOW, 0b0000_0000_0010_0000);\n \n-    assert_eq!(ZERO_ROTATE_LEFT, ident(0b0010_0001));\n-    assert_eq!(ZERO_ROTATE_RIGHT, ident(0b0111_1001));\n+    assert_eq!(ZERO_ROTATE_LEFT, 0b0010_0001);\n+    assert_eq!(ZERO_ROTATE_RIGHT, 0b0111_1001);\n \n-    assert_eq!(MULTIPLE_ROTATE_LEFT, ident(0b0010_0001));\n-    assert_eq!(MULTIPLE_ROTATE_RIGHT, ident(0b0010_0001));\n+    assert_eq!(MULTIPLE_ROTATE_LEFT, 0b0010_0001);\n+    assert_eq!(MULTIPLE_ROTATE_RIGHT, 0b0010_0001);\n }"}, {"sha": "db86c25194f08585d3e6824242a0dd807531461e", "filename": "src/test/run-pass/const-int-wrapping.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -16,26 +16,22 @@ const SHR_B: u32 = 128u32.wrapping_shr(128);\n const NEG_A: u32 = 5u32.wrapping_neg();\n const NEG_B: u32 = 1234567890u32.wrapping_neg();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(ADD_A, ident(255));\n-    assert_eq!(ADD_B, ident(199));\n+    assert_eq!(ADD_A, 255);\n+    assert_eq!(ADD_B, 199);\n \n-    assert_eq!(SUB_A, ident(0));\n-    assert_eq!(SUB_B, ident(101));\n+    assert_eq!(SUB_A, 0);\n+    assert_eq!(SUB_B, 101);\n \n-    assert_eq!(MUL_A, ident(120));\n-    assert_eq!(MUL_B, ident(44));\n+    assert_eq!(MUL_A, 120);\n+    assert_eq!(MUL_B, 44);\n \n-    assert_eq!(SHL_A, ident(128));\n-    assert_eq!(SHL_B, ident(1));\n+    assert_eq!(SHL_A, 128);\n+    assert_eq!(SHL_B, 1);\n \n-    assert_eq!(SHR_A, ident(1));\n-    assert_eq!(SHR_B, ident(128));\n+    assert_eq!(SHR_A, 1);\n+    assert_eq!(SHR_B, 128);\n \n-    assert_eq!(NEG_A, ident(4294967291));\n-    assert_eq!(NEG_B, ident(3060399406));\n+    assert_eq!(NEG_A, 4294967291);\n+    assert_eq!(NEG_B, 3060399406);\n }"}, {"sha": "936f31954d3dd446b8b000f43def12caf4e93df8", "filename": "src/test/run-pass/consts/const-endianess.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -2,7 +2,7 @@\n #![feature(test)]\n \n extern crate test;\n-use test::black_box as b;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n \n const BE_U32: u32 = 55u32.to_be();\n const LE_U32: u32 = 55u32.to_le();"}, {"sha": "67d52ad08246a38f4f84c5b726ecab0516613bb9", "filename": "src/test/run-pass/consts/const-ptr-nonnull.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,15 +1,17 @@\n // run-pass\n \n+#![feature(ptr_internals, test)]\n+\n+extern crate test;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n+\n use std::ptr::NonNull;\n \n const DANGLING: NonNull<u32> = NonNull::dangling();\n const CASTED: NonNull<u32> = NonNull::cast(NonNull::<i32>::dangling());\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n pub fn main() {\n-    assert_eq!(DANGLING, ident(NonNull::dangling()));\n-    assert_eq!(CASTED, ident(NonNull::dangling()));\n+    // Be super-extra paranoid and cast the fn items to fn pointers before blackboxing them.\n+    assert_eq!(DANGLING, b::<fn() -> _>(NonNull::dangling)());\n+    assert_eq!(CASTED, b::<fn() -> _>(NonNull::dangling)());\n }"}, {"sha": "e8735e1a32c2ce3b1b111530617630ed97234d22", "filename": "src/test/run-pass/consts/const-ptr-unique.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,15 +1,16 @@\n // run-pass\n \n-#![feature(ptr_internals)]\n+#![feature(ptr_internals, test)]\n+\n+extern crate test;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n \n use std::ptr::Unique;\n \n-const PTR: *mut u32 = Unique::empty().as_ptr();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n+const PTR: *mut u32 = Unique::empty().as_ptr();\n \n pub fn main() {\n-    assert_eq!(PTR, ident(Unique::<u32>::empty().as_ptr()));\n+    // Be super-extra paranoid and cast the fn items to fn pointers before blackboxing them.\n+    assert_eq!(PTR, b::<fn() -> _>(Unique::<u32>::empty)().as_ptr());\n }"}, {"sha": "d382e8b719713dacd439b9e95abeb3a4b492b5dd", "filename": "src/test/run-pass/macros/macro-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(custom_attribute)]\n \n macro_rules! compiles_fine {\n     (#[$at:meta]) => {"}, {"sha": "c7d8b3b1403ab774c2f761f2300e08e64cfc8cf2", "filename": "src/test/run-pass/methods/method-attributes.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-// pp-exact - Make sure we print all the attributes\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute)]\n-\n-#[frobable]\n-trait frobable {\n-    #[frob_attr]\n-    fn frob(&self);\n-    #[defrob_attr]\n-    fn defrob(&self);\n-}\n-\n-#[int_frobable]\n-impl frobable for isize {\n-    #[frob_attr1]\n-    fn frob(&self) {\n-        #![frob_attr2]\n-    }\n-\n-    #[defrob_attr1]\n-    fn defrob(&self) {\n-        #![defrob_attr2]\n-    }\n-}\n-\n-pub fn main() { }"}, {"sha": "11ea29ece8a021bd4e7a9681b01e29cf4bc024b0", "filename": "src/test/run-pass/structs-enums/class-attributes-1.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-// pp-exact - Make sure we actually print the attributes\n-#![feature(custom_attribute)]\n-\n-struct cat {\n-    name: String,\n-}\n-\n-impl Drop for cat {\n-    #[cat_dropper]\n-    fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n-}\n-\n-\n-#[cat_maker]\n-fn cat(name: String) -> cat { cat{name: name,} }\n-\n-pub fn main() { let _kitty = cat(\"Spotty\".to_string()); }"}, {"sha": "d6cf63e62fea2d6da5b93a5d4d864d12e352086a", "filename": "src/test/run-pass/structs-enums/class-attributes-2.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-#![feature(custom_attribute)]\n-\n-struct cat {\n-  name: String,\n-}\n-\n-impl Drop for cat {\n-    #[cat_dropper]\n-    /**\n-       Actually, cats don't always land on their feet when you drop them.\n-    */\n-    fn drop(&mut self) {\n-        println!(\"{} landed on hir feet\", self.name);\n-    }\n-}\n-\n-#[cat_maker]\n-/**\n-Maybe it should technically be a kitten_maker.\n-*/\n-fn cat(name: String) -> cat {\n-    cat {\n-        name: name\n-    }\n-}\n-\n-pub fn main() {\n-  let _kitty = cat(\"Spotty\".to_string());\n-}"}, {"sha": "c301492b9e21a52bae33c540475f00f0aba2921f", "filename": "src/test/ui/attr-eq-token-tree.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,4 +1,2 @@\n-#![feature(custom_attribute)]\n-\n #[my_attr = !] //~ ERROR unexpected token: `!`\n fn main() {}"}, {"sha": "bb37c2e0cc4734b1d499bbc4416a2e5cc9a1365d", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `!`\n-  --> $DIR/attr-eq-token-tree.rs:3:13\n+  --> $DIR/attr-eq-token-tree.rs:1:13\n    |\n LL | #[my_attr = !]\n    |             ^"}, {"sha": "fc040bd1a5d10a01dc81aa4ac19103d224335d7b", "filename": "src/test/ui/attributes/attr-before-view-item.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n+\n+#[rustc_dummy = \"bar\"]\n+extern crate test;\n+\n+fn main() {}"}, {"sha": "c7fad3802e9d6d2ee778b8bc4961121faafc49b3", "filename": "src/test/ui/attributes/attr-before-view-item2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n+\n+mod m {\n+    #[rustc_dummy = \"bar\"]\n+    extern crate test;\n+}\n+\n+fn main() {}"}, {"sha": "d9cb551096092f6298d79ea32c6a42afd97c4180", "filename": "src/test/ui/attributes/attr-mix-new.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_dummy(bar)]\n+mod foo {\n+  #![feature(globs)]\n+}\n+\n+fn main() {}"}, {"sha": "ca5fdd9da859bae78bde7f472c409a9b310ec95e", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.rs"}, {"sha": "55e7a9877846f271a79ac78561a15a13a9823d9c", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr"}, {"sha": "c795612acf08c13a59b92d967a4d332905182ec9", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.rs"}, {"sha": "acd0ae3678a7c275d10f09d059b3cc1b30eeb670", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr"}, {"sha": "3cfc70b41850a07ed2836bb10bdfa04b5f51fe6c", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs"}, {"sha": "b9ca00974677b4a835f0654e8e381a639db79c0e", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr"}, {"sha": "7808367f2c10f9e3b77e09d47e1c8f4bd5cabb9c", "filename": "src/test/ui/attributes/class-attributes-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,19 @@\n+// compile-pass\n+// pp-exact - Make sure we actually print the attributes\n+\n+#![feature(rustc_attrs)]\n+\n+struct Cat {\n+    name: String,\n+}\n+\n+impl Drop for Cat {\n+    #[rustc_dummy]\n+    fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n+}\n+\n+\n+#[rustc_dummy]\n+fn cat(name: String) -> Cat { Cat{name: name,} }\n+\n+fn main() { let _kitty = cat(\"Spotty\".to_string()); }"}, {"sha": "348c70f35c328c8d359c37e883de70ca951e65cc", "filename": "src/test/ui/attributes/class-attributes-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,31 @@\n+// compile-pass\n+\n+#![feature(rustc_attrs)]\n+\n+struct Cat {\n+    name: String,\n+}\n+\n+impl Drop for Cat {\n+    #[rustc_dummy]\n+    /**\n+       Actually, cats don't always land on their feet when you drop them.\n+    */\n+    fn drop(&mut self) {\n+        println!(\"{} landed on hir feet\", self.name);\n+    }\n+}\n+\n+#[rustc_dummy]\n+/**\n+Maybe it should technically be a kitten_maker.\n+*/\n+fn cat(name: String) -> Cat {\n+    Cat {\n+        name: name\n+    }\n+}\n+\n+fn main() {\n+    let _kitty = cat(\"Spotty\".to_string());\n+}"}, {"sha": "72c9a35dc07f049650835e28fe3eba078f7d5e08", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "renamed", "additions": 57, "deletions": 60, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,80 +1,77 @@\n-#![allow(non_camel_case_types)]\n-#![allow(non_upper_case_globals)]\n-#![allow(unused_attributes)]\n-#![allow(dead_code)]\n-#![allow(unknown_lints)]\n // These are attributes of the implicit crate. Really this just needs to parse\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-#![feature(custom_attribute)]\n-#![allow(unused_attribute)]\n-#![attr1 = \"val\"]\n-#![attr2 = \"val\"]\n-#![attr3]\n-#![attr4(attr5)]\n+// compile-pass\n+\n+#![feature(rustc_attrs)]\n+\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy]\n+#![rustc_dummy(attr5)]\n \n #![crate_id=\"foobar#0.1\"]\n \n // These are attributes of the following mod\n-#[attr1 = \"val\"]\n-#[attr2 = \"val\"]\n+#[rustc_dummy = \"val\"]\n+#[rustc_dummy = \"val\"]\n mod test_first_item_in_file_mod {}\n \n mod test_single_attr_outer {\n-    #[attr = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n }\n \n mod test_multi_attr_outer {\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    struct t {x: isize}\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    struct T {x: isize}\n }\n \n mod test_stmt_single_attr_outer {\n     pub fn f() {\n-        #[attr = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -84,22 +81,22 @@ mod test_stmt_single_attr_outer {\n mod test_stmt_multi_attr_outer {\n     pub fn f() {\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr1 = \"val\"]\n-            #[attr2 = \"val\"]\n+            #[rustc_dummy = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -109,54 +106,54 @@ mod test_stmt_multi_attr_outer {\n mod test_attr_inner {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n     }\n }\n \n mod test_attr_inner_then_outer {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_attr_inner_then_outer_multi {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr1 = \"val\"]\n-        #![attr2 = \"val\"]\n+        #![rustc_dummy = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_distinguish_syntax_ext {\n     pub fn f() {\n         format!(\"test{}\", \"s\");\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn g() { }\n     }\n }\n \n mod test_other_forms {\n-    #[attr]\n-    #[attr(word)]\n-    #[attr(attr(word))]\n-    #[attr(key1 = \"val\", key2 = \"val\", attr)]\n+    #[rustc_dummy]\n+    #[rustc_dummy(word)]\n+    #[rustc_dummy(attr(word))]\n+    #[rustc_dummy(key1 = \"val\", key2 = \"val\", attr)]\n     pub fn f() { }\n }\n \n mod test_foreign_items {\n     pub mod rustrt {\n         extern {\n-            #![attr]\n+            #![rustc_dummy]\n \n-            #[attr]\n+            #[rustc_dummy]\n             fn rust_get_test_int() -> u32;\n         }\n     }\n@@ -178,7 +175,7 @@ mod test_foreign_items {\n }*/\n \n fn test_fn_inner() {\n-    #![inner_fn_attr]\n+    #![rustc_dummy]\n }\n \n-pub fn main() { }\n+fn main() {}", "previous_filename": "src/test/run-pass/item-attributes.rs"}, {"sha": "2d608acc71f71dd1c2d34816ca0a446d21d7bcf5", "filename": "src/test/ui/attributes/method-attributes.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,28 @@\n+// compile-pass\n+// pp-exact - Make sure we print all the attributes\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_dummy]\n+trait Frobable {\n+    #[rustc_dummy]\n+    fn frob(&self);\n+    #[rustc_dummy]\n+    fn defrob(&self);\n+}\n+\n+#[rustc_dummy]\n+impl Frobable for isize {\n+    #[rustc_dummy]\n+    fn frob(&self) {\n+        #![rustc_dummy]\n+    }\n+\n+    #[rustc_dummy]\n+    fn defrob(&self) {\n+        #![rustc_dummy]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "89e2ad2669cbe0e6d8fe3d9b52966a0cb1fe4203", "filename": "src/test/ui/attributes/obsolete-attr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,7 @@\n+// Obsolete attributes fall back to feature gated custom attributes.\n+\n+#[ab_isize=\"stdcall\"] extern {} //~ ERROR attribute `ab_isize` is currently unknown\n+\n+#[fixed_stack_segment] fn f() {} //~ ERROR attribute `fixed_stack_segment` is currently unknown\n+\n+fn main() {}"}, {"sha": "2ed7f87935fca7872c6bfc6c2ad43f9b91194ee7", "filename": "src/test/ui/attributes/obsolete-attr.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: The attribute `fixed_stack_segment` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/obsolete-attr.rs:5:3\n+   |\n+LL | #[fixed_stack_segment] fn f() {}\n+   |   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `ab_isize` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/obsolete-attr.rs:3:3\n+   |\n+LL | #[ab_isize=\"stdcall\"] extern {}\n+   |   ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e2a4f3226d5626c10f303474381e0d34c975b4d9", "filename": "src/test/ui/attributes/unknown-attr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,9 @@\n+// Unknown attributes fall back to feature gated custom attributes.\n+\n+#![feature(custom_inner_attributes)]\n+\n+#![mutable_doc] //~ ERROR attribute `mutable_doc` is currently unknown\n+\n+#[dance] mod a {} //~ ERROR attribute `dance` is currently unknown\n+\n+#[dance] fn main() {} //~ ERROR attribute `dance` is currently unknown"}, {"sha": "d0ac58108fc8d7e994c5ecfb60b58c07e7d739a6", "filename": "src/test/ui/attributes/unknown-attr.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: The attribute `mutable_doc` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:5:4\n+   |\n+LL | #![mutable_doc]\n+   |    ^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `dance` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:7:3\n+   |\n+LL | #[dance] mod a {}\n+   |   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `dance` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:9:3\n+   |\n+LL | #[dance] fn main() {}\n+   |   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a910340f4a06d01e7bca58bd59bc4d4f5765e2af", "filename": "src/test/ui/attributes/variant-attributes.rs", "status": "renamed", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,38 +1,37 @@\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n+// compile-pass\n // pp-exact - Make sure we actually print the attributes\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute)]\n+#![allow(non_camel_case_types)]\n+#![feature(rustc_attrs)]\n \n enum crew_of_enterprise_d {\n \n-    #[captain]\n+    #[rustc_dummy]\n     jean_luc_picard,\n \n-    #[oldcommander]\n+    #[rustc_dummy]\n     william_t_riker,\n \n-    #[chief_medical_officer]\n+    #[rustc_dummy]\n     beverly_crusher,\n \n-    #[ships_councellor]\n+    #[rustc_dummy]\n     deanna_troi,\n \n-    #[lieutenant_oldcommander]\n+    #[rustc_dummy]\n     data,\n \n-    #[chief_of_security]\n+    #[rustc_dummy]\n     worf,\n \n-    #[chief_engineer]\n+    #[rustc_dummy]\n     geordi_la_forge,\n }\n \n fn boldly_go(_crew_member: crew_of_enterprise_d, _where: String) { }\n \n-pub fn main() {\n+fn main() {\n     boldly_go(crew_of_enterprise_d::worf,\n               \"where no one has gone before\".to_string());\n }", "previous_filename": "src/test/run-pass/variant-attributes.rs"}, {"sha": "2434921390245d13248e18dea565fc31ab5bc82f", "filename": "src/test/ui/custom-attribute-multisegment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,7 +1,5 @@\n // Unresolved multi-segment attributes are not treated as custom.\n \n-#![feature(custom_attribute)]\n-\n mod existent {}\n \n #[existent::nonexistent] //~ ERROR failed to resolve: could not find `nonexistent` in `existent`"}, {"sha": "57eca211ed10eb5e34f04338c24259c79fd4d40e", "filename": "src/test/ui/custom-attribute-multisegment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,5 +1,5 @@\n error[E0433]: failed to resolve: could not find `nonexistent` in `existent`\n-  --> $DIR/custom-attribute-multisegment.rs:7:13\n+  --> $DIR/custom-attribute-multisegment.rs:5:13\n    |\n LL | #[existent::nonexistent]\n    |             ^^^^^^^^^^^ could not find `nonexistent` in `existent`"}, {"sha": "c98fd7ffea8bee3c461dbe87915a956a257b5724", "filename": "src/test/ui/expanded-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpanded-cfg.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,6 +1,6 @@\n // skip-codegen\n // compile-pass\n-#![feature(custom_attribute)]\n+\n macro_rules! mac {\n     {} => {\n         #[cfg(attr)]"}, {"sha": "2424a1c92cd644a80981c1f7f204f7a379babf85", "filename": "src/test/ui/issues/issue-24434.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,8 +1,7 @@\n // compile-pass\n-#![allow(unused_attributes)]\n // compile-flags:--cfg set1\n \n-#![cfg_attr(set1, feature(custom_attribute))]\n+#![cfg_attr(set1, feature(rustc_attrs))]\n+#![rustc_dummy]\n \n-#![foobar]\n fn main() {}"}, {"sha": "149948b5a6da23ffd665c12a7e7dd384b9a60b42", "filename": "src/test/ui/lint/lint-obsolete-attr.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,12 +0,0 @@\n-// When denying at the crate level, be sure to not get random warnings from the\n-// injected intrinsics by the compiler.\n-\n-#![deny(unused_attributes)]\n-#![allow(dead_code)]\n-#![feature(custom_attribute)]\n-\n-#[ab_isize=\"stdcall\"] extern {} //~ ERROR unused attribute\n-\n-#[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n-\n-fn main() {}"}, {"sha": "c06bd26df2b96d5cfec59e8f6c8e0b54825299e1", "filename": "src/test/ui/lint/lint-obsolete-attr.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,20 +0,0 @@\n-error: unused attribute\n-  --> $DIR/lint-obsolete-attr.rs:8:1\n-   |\n-LL | #[ab_isize=\"stdcall\"] extern {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-obsolete-attr.rs:4:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-obsolete-attr.rs:10:1\n-   |\n-LL | #[fixed_stack_segment] fn f() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "828b869c12e23a0f2408ef84767ef7aacb312185", "filename": "src/test/ui/lint/lint-unknown-attr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,11 +0,0 @@\n-// When denying at the crate level, be sure to not get random warnings from the\n-// injected intrinsics by the compiler.\n-\n-#![feature(custom_attribute)]\n-#![deny(unused_attributes)]\n-\n-#![mutable_doc] //~ ERROR unused attribute\n-\n-#[dance] mod a {} //~ ERROR unused attribute\n-\n-#[dance] fn main() {} //~ ERROR unused attribute"}, {"sha": "9817760c2247aca11b4ecb7ca615985ba1d0235b", "filename": "src/test/ui/lint/lint-unknown-attr.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr?ref=991c719a1d0f95c37ed7ea56bdb38bcc2a6246b9", "patch": "@@ -1,26 +0,0 @@\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:9:1\n-   |\n-LL | #[dance] mod a {}\n-   | ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-unknown-attr.rs:5:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:11:1\n-   |\n-LL | #[dance] fn main() {}\n-   | ^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:7:1\n-   |\n-LL | #![mutable_doc]\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "56a902315661293e21971ce57cf9ea0003e2ce8d", "filename": "src/test/ui/macros/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -12,7 +12,7 @@ test!(b,\n       #[cfg(not(qux))],\n       pub fn bar() { });\n \n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar();\n     //~^ ERROR failed to resolve: use of undeclared type or module `a`"}, {"sha": "542486927dfd115f2bb7d9b33c5369ca2a83cc3b", "filename": "src/test/ui/macros/macro-input-future-proofing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -55,10 +55,10 @@ LL |     ($($a:ty, $b:ty)* -) => ();\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$ty:ty` is followed by `-`, which is not allowed for `ty` fragments\n-  --> $DIR/macro-input-future-proofing.rs:18:7\n+  --> $DIR/macro-input-future-proofing.rs:18:15\n    |\n LL |     ($($ty:ty)-+) => ();\n-   |       ^^^^^^^^ not allowed after `ty` fragments\n+   |               ^ not allowed after `ty` fragments\n    |\n    = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n "}, {"sha": "0752f7e3153c19e5b7ac870bf4185b4fa6235a12", "filename": "src/test/ui/macros/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -13,7 +13,7 @@ test!(b,\n       pub fn bar() { });\n \n // test1!(#[bar])\n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar(); //~ ERROR cannot find function `bar` in module `a`\n     b::bar();"}, {"sha": "5101b5caeea09c31df69bf6a56586e7979b02bf2", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,9 +1,9 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! check {\n     ($expr: expr) => (\n-        #[my_attr = $expr] //~ ERROR unexpected token: `-0`\n-                           //~| ERROR unexpected token: `0 + 0`\n+        #[rustc_dummy = $expr] //~ ERROR unexpected token: `-0`\n+                               //~| ERROR unexpected token: `0 + 0`\n         use main as _;\n     );\n }"}, {"sha": "bcd2ef545d815ed93bbb93eca31d21059563a167", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -7,19 +7,19 @@ LL | check!(0u8);\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: unexpected token: `-0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(-0); // ERROR, see above\n    | ----------- in this macro invocation\n \n error: unexpected token: `0 + 0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(0 + 0); // ERROR, see above\n    | -------------- in this macro invocation"}, {"sha": "1298c08df846df8994685f19c1ee2f433bc77947", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -2,8 +2,6 @@\n // aux-build:derive-clona.rs\n // aux-build:test-macros.rs\n \n-#![feature(custom_attribute)]\n-\n #[macro_use]\n extern crate derive_foo;\n #[macro_use]\n@@ -25,10 +23,12 @@ macro_rules! attr_proc_mac {\n //~^ ERROR cannot find\n struct Foo;\n \n-#[attr_proc_macra] // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[attr_proc_macra] //~ ERROR attribute `attr_proc_macra` is currently unknown\n struct Bar;\n \n-#[FooWithLongNan]  // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[FooWithLongNan] //~ ERROR attribute `FooWithLongNan` is currently unknown\n struct Asdf;\n \n #[derive(Dlone)]"}, {"sha": "f9f116c15dcc7fff9905a6018b560837dc99f5ed", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,5 +1,23 @@\n+error[E0658]: The attribute `attr_proc_macra` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/resolve-error.rs:27:3\n+   |\n+LL | #[attr_proc_macra]\n+   |   ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `FooWithLongNan` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/resolve-error.rs:31:3\n+   |\n+LL | #[FooWithLongNan]\n+   |   ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:24:10\n+  --> $DIR/resolve-error.rs:22:10\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n@@ -46,5 +64,6 @@ error: cannot find macro `bang_proc_macrp!` in this scope\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "674a5ed18cee3ab5033e6d7842dc94d8afb1f5da", "filename": "src/test/ui/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! stmt_mac {\n     () => {\n@@ -7,44 +7,45 @@ macro_rules! stmt_mac {\n }\n \n fn main() {\n-    #[attr]\n+    #[rustc_dummy]\n     fn a() {}\n \n-    #[attr] //~ ERROR attributes on expressions are experimental\n+    // Bug: built-in attrs like `rustc_dummy` are not gated on blocks, but other attrs are.\n+    #[rustfmt::skip] //~ ERROR attributes on expressions are experimental\n     {\n \n     }\n \n-    #[attr]\n+    #[rustc_dummy]\n     5;\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n }\n \n // Check that cfg works right\n \n #[cfg(unset)]\n fn c() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg(not(unset))]\n fn j() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg_attr(not(unset), cfg(unset))]\n fn d() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n #[cfg_attr(not(unset), cfg(not(unset)))]\n fn i() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n@@ -53,30 +54,30 @@ fn i() {\n macro_rules! item_mac {\n     ($e:ident) => {\n         fn $e() {\n-            #[attr]\n+            #[rustc_dummy]\n             42;\n \n             #[cfg(unset)]\n             fn f() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg(not(unset))]\n             fn k() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg_attr(not(unset), cfg(unset))]\n             fn g() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n             #[cfg_attr(not(unset), cfg(not(unset)))]\n             fn h() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n@@ -90,51 +91,51 @@ item_mac!(e);\n \n extern {\n     #[cfg(unset)]\n-    fn x(a: [u8; #[attr] 5]);\n-    fn y(a: [u8; #[attr] 5]); //~ ERROR attributes on expressions are experimental\n+    fn x(a: [u8; #[rustc_dummy] 5]);\n+    fn y(a: [u8; #[rustc_dummy] 5]); //~ ERROR attributes on expressions are experimental\n }\n \n struct Foo;\n impl Foo {\n     #[cfg(unset)]\n-    const X: u8 = #[attr] 5;\n-    const Y: u8 = #[attr] 5; //~ ERROR attributes on expressions are experimental\n+    const X: u8 = #[rustc_dummy] 5;\n+    const Y: u8 = #[rustc_dummy] 5; //~ ERROR attributes on expressions are experimental\n }\n \n trait Bar {\n     #[cfg(unset)]\n-    const X: [u8; #[attr] 5];\n-    const Y: [u8; #[attr] 5]; //~ ERROR attributes on expressions are experimental\n+    const X: [u8; #[rustc_dummy] 5];\n+    const Y: [u8; #[rustc_dummy] 5]; //~ ERROR attributes on expressions are experimental\n }\n \n struct Joyce {\n     #[cfg(unset)]\n-    field: [u8; #[attr] 5],\n-    field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    field: [u8; #[rustc_dummy] 5],\n+    field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n }\n \n struct Walky(\n-    #[cfg(unset)] [u8; #[attr] 5],\n-    [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+    [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n );\n \n enum Mike {\n     Happy(\n-        #[cfg(unset)] [u8; #[attr] 5],\n-        [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+        [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     ),\n     Angry {\n         #[cfg(unset)]\n-        field: [u8; #[attr] 5],\n-        field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        field: [u8; #[rustc_dummy] 5],\n+        field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     }\n }\n \n fn pat() {\n     match 5 {\n         #[cfg(unset)]\n-        5 => #[attr] (),\n-        6 => #[attr] (), //~ ERROR attributes on expressions are experimental\n+        5 => #[rustc_dummy] (),\n+        6 => #[rustc_dummy] (), //~ ERROR attributes on expressions are experimental\n         _ => (),\n     }\n }"}, {"sha": "01372cc164b62f63884aa2b31e31e2abcad7df28", "filename": "src/test/ui/stmt_expr_attrs_no_feature.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,80 +1,80 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:13:5\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:14:5\n    |\n-LL |     #[attr]\n-   |     ^^^^^^^\n+LL |     #[rustfmt::skip]\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:94:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:95:18\n    |\n-LL |     fn y(a: [u8; #[attr] 5]);\n-   |                  ^^^^^^^\n+LL |     fn y(a: [u8; #[rustc_dummy] 5]);\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:101:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:102:19\n    |\n-LL |     const Y: u8 = #[attr] 5;\n-   |                   ^^^^^^^\n+LL |     const Y: u8 = #[rustc_dummy] 5;\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:107:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:108:19\n    |\n-LL |     const Y: [u8; #[attr] 5];\n-   |                   ^^^^^^^\n+LL |     const Y: [u8; #[rustc_dummy] 5];\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:113:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:114:18\n    |\n-LL |     field2: [u8; #[attr] 5]\n-   |                  ^^^^^^^\n+LL |     field2: [u8; #[rustc_dummy] 5]\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:118:10\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:119:10\n    |\n-LL |     [u8; #[attr] 5]\n-   |          ^^^^^^^\n+LL |     [u8; #[rustc_dummy] 5]\n+   |          ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:124:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:125:14\n    |\n-LL |         [u8; #[attr] 5]\n-   |              ^^^^^^^\n+LL |         [u8; #[rustc_dummy] 5]\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:129:22\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:130:22\n    |\n-LL |         field2: [u8; #[attr] 5]\n-   |                      ^^^^^^^\n+LL |         field2: [u8; #[rustc_dummy] 5]\n+   |                      ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:137:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:138:14\n    |\n-LL |         6 => #[attr] (),\n-   |              ^^^^^^^\n+LL |         6 => #[rustc_dummy] (),\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable"}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,15 +1,15 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n-fn main() { }\n+#[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+fn main() {}"}, {"sha": "83de173b1a703a4e553c0b160022108436947e73", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,96 +1,96 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:3:13\n+  --> $DIR/suffixed-literal-meta.rs:3:17\n    |\n-LL | #[my_attr = 1usize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1usize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:4:13\n+  --> $DIR/suffixed-literal-meta.rs:4:17\n    |\n-LL | #[my_attr = 1u8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1u8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:13\n+  --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n-LL | #[my_attr = 1u16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:6:13\n+  --> $DIR/suffixed-literal-meta.rs:6:17\n    |\n-LL | #[my_attr = 1u32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:13\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n-LL | #[my_attr = 1u64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:8:13\n+  --> $DIR/suffixed-literal-meta.rs:8:17\n    |\n-LL | #[my_attr = 1isize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1isize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:13\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n-LL | #[my_attr = 1i8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1i8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:10:13\n+  --> $DIR/suffixed-literal-meta.rs:10:17\n    |\n-LL | #[my_attr = 1i16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:13\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n-LL | #[my_attr = 1i32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:12:13\n+  --> $DIR/suffixed-literal-meta.rs:12:17\n    |\n-LL | #[my_attr = 1i64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:13\n+  --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n-LL | #[my_attr = 1.0f32]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f32]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:14:13\n+  --> $DIR/suffixed-literal-meta.rs:14:17\n    |\n-LL | #[my_attr = 1.0f64]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f64]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n "}, {"sha": "ce902b7e7d28a8d9fb7513114f1c1e985b58b130", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,12 +1,11 @@\n-#![feature(custom_attribute)]\n-\n type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n \n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n \n-#[rustfmt] // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[rustfmt] //~ ERROR attribute `rustfmt` is currently unknown\n fn check() {}\n \n #[rustfmt::skip] // OK"}, {"sha": "1df9821f2444092a0f05e9a917b1d0502cb60977", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,39 +1,49 @@\n+error[E0658]: The attribute `rustfmt` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/tool-attributes-misplaced-1.rs:8:3\n+   |\n+LL | #[rustfmt]\n+   |   ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error: cannot find derive macro `rustfmt` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:6:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:4:10\n    |\n LL | #[derive(rustfmt)]\n    |          ^^^^^^^\n \n error: cannot find macro `rustfmt!` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:15:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n    |\n LL |     rustfmt!();\n    |     ^^^^^^^\n \n error[E0573]: expected type, found tool module `rustfmt`\n-  --> $DIR/tool-attributes-misplaced-1.rs:3:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:1:10\n    |\n LL | type A = rustfmt;\n    |          ^^^^^^^ not a type\n \n error[E0573]: expected type, found tool attribute `rustfmt::skip`\n-  --> $DIR/tool-attributes-misplaced-1.rs:4:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:2:10\n    |\n LL | type B = rustfmt::skip;\n    |          ^^^^^^^^^^^^^ not a type\n \n error[E0423]: expected value, found tool module `rustfmt`\n-  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:13:5\n    |\n LL |     rustfmt;\n    |     ^^^^^^^ not a value\n \n error[E0423]: expected value, found tool attribute `rustfmt::skip`\n-  --> $DIR/tool-attributes-misplaced-1.rs:17:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:16:5\n    |\n LL |     rustfmt::skip;\n    |     ^^^^^^^^^^^^^ not a value\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0423`.\n+Some errors have detailed explanations: E0423, E0658.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "86d6585bc614316270b75ca6ba96c952c474bd3a", "filename": "src/test/ui/traits/trait-with-dst.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftraits%2Ftrait-with-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Ftraits%2Ftrait-with-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-with-dst.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -0,0 +1,22 @@\n+// compile-pass\n+// #55266\n+\n+struct VTable<DST: ?Sized> {\n+    _to_dst_ptr: fn(*mut ()) -> *mut DST,\n+}\n+\n+trait HasVTableFor<DST: ?Sized + 'static> {\n+    const VTABLE: &'static VTable<DST>;\n+}\n+\n+impl<T, DST: ?Sized + 'static> HasVTableFor<DST> for T {\n+    const VTABLE: &'static VTable<DST> = &VTable {\n+        _to_dst_ptr: |_: *mut ()| unsafe { std::mem::zeroed() },\n+    };\n+}\n+\n+pub fn push<DST: ?Sized + 'static, T>() {\n+    <T as HasVTableFor<DST>>::VTABLE;\n+}\n+\n+fn main() {}"}, {"sha": "b07ab96bce13fe55ce2a4d58c9926c0c7f456a3c", "filename": "src/test/ui/unrestricted-attribute-tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,8 +1,8 @@\n // compile-pass\n \n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr(a b c d)]\n-#[my_attr[a b c d]]\n-#[my_attr{a b c d}]\n+#[rustc_dummy(a b c d)]\n+#[rustc_dummy[a b c d]]\n+#[rustc_dummy{a b c d}]\n fn main() {}"}, {"sha": "cb8ac0e6a05c0837433fae4b7ff3df756421c165", "filename": "src/test/ui/unused/unused-attr.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.rs?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,49 +1,48 @@\n #![deny(unused_attributes)]\n-#![allow(dead_code, unused_imports, unused_extern_crates)]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#![foo] //~ ERROR unused attribute\n+#![rustc_dummy] //~ ERROR unused attribute\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern crate core;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n use std::collections;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern \"C\" {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn foo();\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n mod foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     pub enum Foo {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         Bar,\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n fn bar(f: foo::Foo) {\n     match f {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         foo::Foo::Bar => {}\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n struct Foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     a: isize\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n trait Baz {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah(&self);\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah2(&self) {}\n }\n "}, {"sha": "956b870715eb2fcd6280c154596b2f7b402cf3b7", "filename": "src/test/ui/unused/unused-attr.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053666f9062d71091ea7970dcbad5963097191a3/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1,8 +1,8 @@\n error: unused attribute\n-  --> $DIR/unused-attr.rs:7:1\n+  --> $DIR/unused-attr.rs:6:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/unused-attr.rs:1:9\n@@ -11,88 +11,88 @@ LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:10:1\n+  --> $DIR/unused-attr.rs:9:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:15:5\n+  --> $DIR/unused-attr.rs:14:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:13:1\n+  --> $DIR/unused-attr.rs:12:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:23:9\n+  --> $DIR/unused-attr.rs:22:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:21:5\n+  --> $DIR/unused-attr.rs:20:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:19:1\n+  --> $DIR/unused-attr.rs:18:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:31:9\n+  --> $DIR/unused-attr.rs:30:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:28:1\n+  --> $DIR/unused-attr.rs:27:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:38:5\n+  --> $DIR/unused-attr.rs:37:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:36:1\n+  --> $DIR/unused-attr.rs:35:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:44:5\n+  --> $DIR/unused-attr.rs:43:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:46:5\n+  --> $DIR/unused-attr.rs:45:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:42:1\n+  --> $DIR/unused-attr.rs:41:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:5:1\n+  --> $DIR/unused-attr.rs:4:1\n    |\n-LL | #![foo]\n-   | ^^^^^^^\n+LL | #![rustc_dummy]\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 15 previous errors\n "}, {"sha": "d1e20280dc188f542c083a738f8da3fef25af478", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=053666f9062d71091ea7970dcbad5963097191a3", "patch": "@@ -1 +1 @@\n-Subproject commit 9692ca8fd82a8f96a4113dc4b88c1fb1d79c1c60\n+Subproject commit d1e20280dc188f542c083a738f8da3fef25af478"}]}