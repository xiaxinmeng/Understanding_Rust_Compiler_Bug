{"sha": "915fa57a931d044005cdf749eb4cba43d7d3e67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNWZhNTdhOTMxZDA0NDAwNWNkZjc0OWViNGNiYTQzZDdkM2U2N2Q=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-05-12T15:12:05Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-05-13T16:54:06Z"}, "message": "Make AtomicBool the same size as bool", "tree": {"sha": "4a9fc059bbe7c50afcd99c3d2b450fcf56936798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9fc059bbe7c50afcd99c3d2b450fcf56936798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915fa57a931d044005cdf749eb4cba43d7d3e67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915fa57a931d044005cdf749eb4cba43d7d3e67d", "html_url": "https://github.com/rust-lang/rust/commit/915fa57a931d044005cdf749eb4cba43d7d3e67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915fa57a931d044005cdf749eb4cba43d7d3e67d/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37f8593e42335829e98fed27b8ececbad61a05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37f8593e42335829e98fed27b8ececbad61a05d", "html_url": "https://github.com/rust-lang/rust/commit/e37f8593e42335829e98fed27b8ececbad61a05d"}], "stats": {"total": 94, "additions": 36, "deletions": 58}, "files": [{"sha": "49b923286d88894c3d9ba347378675680a6886d5", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 36, "deletions": 58, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/915fa57a931d044005cdf749eb4cba43d7d3e67d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915fa57a931d044005cdf749eb4cba43d7d3e67d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=915fa57a931d044005cdf749eb4cba43d7d3e67d", "patch": "@@ -83,22 +83,22 @@ use default::Default;\n use fmt;\n \n /// A boolean type which can be safely shared between threads.\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicBool {\n-    v: UnsafeCell<usize>,\n+    v: UnsafeCell<u8>,\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     fn default() -> Self {\n-        Self::new(Default::default())\n+        Self::new(false)\n     }\n }\n \n // Send is implicitly implemented for AtomicBool.\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicBool {}\n \n@@ -162,15 +162,11 @@ pub enum Ordering {\n }\n \n /// An `AtomicBool` initialized to `false`.\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n-// NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n-const UINT_TRUE: usize = !0;\n-\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n impl AtomicBool {\n     /// Creates a new `AtomicBool`.\n     ///\n@@ -185,7 +181,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new(v: bool) -> AtomicBool {\n-        AtomicBool { v: UnsafeCell::new(-(v as isize) as usize) }\n+        AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n     /// Loads a value from the bool.\n@@ -208,7 +204,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn load(&self, order: Ordering) -> bool {\n-        unsafe { atomic_load(self.v.get(), order) > 0 }\n+        unsafe { atomic_load(self.v.get(), order) != 0 }\n     }\n \n     /// Stores a value into the bool.\n@@ -232,9 +228,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: bool, order: Ordering) {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_store(self.v.get(), val, order); }\n+        unsafe { atomic_store(self.v.get(), val as u8, order); }\n     }\n \n     /// Stores a value into the bool, returning the old value.\n@@ -254,9 +248,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn swap(&self, val: bool, order: Ordering) -> bool {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_swap(self.v.get(), val, order) > 0 }\n+        unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }\n     }\n \n     /// Stores a value into the `bool` if the current value is the same as the `current` value.\n@@ -327,12 +319,10 @@ impl AtomicBool {\n                             new: bool,\n                             success: Ordering,\n                             failure: Ordering) -> Result<bool, bool> {\n-        let current = if current { UINT_TRUE } else { 0 };\n-        let new = if new { UINT_TRUE } else { 0 };\n-\n-        match unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) } {\n-            Ok(x) => Ok(x > 0),\n-            Err(x) => Err(x > 0),\n+        match unsafe { atomic_compare_exchange(self.v.get(), current as u8, new as u8,\n+                                               success, failure) } {\n+            Ok(x) => Ok(x != 0),\n+            Err(x) => Err(x != 0),\n         }\n     }\n \n@@ -373,13 +363,10 @@ impl AtomicBool {\n                                  new: bool,\n                                  success: Ordering,\n                                  failure: Ordering) -> Result<bool, bool> {\n-        let current = if current { UINT_TRUE } else { 0 };\n-        let new = if new { UINT_TRUE } else { 0 };\n-\n-        match unsafe { atomic_compare_exchange_weak(self.v.get(), current, new,\n+        match unsafe { atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8,\n                                                     success, failure) } {\n-            Ok(x) => Ok(x > 0),\n-            Err(x) => Err(x > 0),\n+            Ok(x) => Ok(x != 0),\n+            Err(x) => Err(x != 0),\n         }\n     }\n \n@@ -410,9 +397,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_and(&self, val: bool, order: Ordering) -> bool {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_and(self.v.get(), val, order) > 0 }\n+        unsafe { atomic_and(self.v.get(), val as u8, order) != 0 }\n     }\n \n     /// Logical \"nand\" with a boolean value.\n@@ -443,9 +428,20 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_nand(&self, val: bool, order: Ordering) -> bool {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_nand(self.v.get(), val, order) > 0 }\n+        // We can't use atomic_nand here because it can result in a bool with\n+        // an invalid value. This happens because the atomic operation is done\n+        // with an 8-bit integer internally, which would set the upper 7 bits.\n+        // So we just use a compare-exchange loop instead, which is what the\n+        // intrinsic actually expands to anyways on many platforms.\n+        let mut old = self.load(Relaxed);\n+        loop {\n+            let new = !(old && val);\n+            match self.compare_exchange_weak(old, new, order, Relaxed) {\n+                Ok(_) => break,\n+                Err(x) => old = x,\n+            }\n+        }\n+        old\n     }\n \n     /// Logical \"or\" with a boolean value.\n@@ -475,9 +471,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_or(self.v.get(), val, order) > 0 }\n+        unsafe { atomic_or(self.v.get(), val as u8, order) != 0 }\n     }\n \n     /// Logical \"xor\" with a boolean value.\n@@ -507,9 +501,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn fetch_xor(&self, val: bool, order: Ordering) -> bool {\n-        let val = if val { UINT_TRUE } else { 0 };\n-\n-        unsafe { atomic_xor(self.v.get(), val, order) > 0 }\n+        unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n }\n \n@@ -1263,18 +1255,6 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-#[inline]\n-unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_nand_acq(dst, val),\n-        Release => intrinsics::atomic_nand_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_nand_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n-        SeqCst  => intrinsics::atomic_nand(dst, val)\n-    }\n-}\n-\n-\n #[inline]\n unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -1286,7 +1266,6 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-\n #[inline]\n unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -1298,7 +1277,6 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-\n /// An atomic fence.\n ///\n /// A fence 'A' which has `Release` ordering semantics, synchronizes with a\n@@ -1334,7 +1312,7 @@ pub fn fence(order: Ordering) {\n }\n \n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(any(stage0, target_has_atomic = \"8\"))]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}]}