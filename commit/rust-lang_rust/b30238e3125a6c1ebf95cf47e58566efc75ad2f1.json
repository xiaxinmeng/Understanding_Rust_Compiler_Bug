{"sha": "b30238e3125a6c1ebf95cf47e58566efc75ad2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDIzOGUzMTI1YTZjMWViZjk1Y2Y0N2U1ODU2NmVmYzc1YWQyZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T14:26:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T14:26:16Z"}, "message": "Rollup merge of #64386 - tspiteri:const-abs2, r=oli-obk\n\nuse `sign` variable in abs and wrapping_abs methods\n\nThis also makes the code easier to understand by hinting at the significance of `self >> ($BITS - 1)`.\n\nAlso, now `overflowing_abs` simply uses `wrapping_abs`, which is clearer and avoids a potential performance regression in the LLVM IR.\n\nThis PR follows from the discussion from #63786.\n\nr? @eddyb\ncc @nikic", "tree": {"sha": "944f34fe94128685e9af27ebe5b2ed552208291a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944f34fe94128685e9af27ebe5b2ed552208291a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30238e3125a6c1ebf95cf47e58566efc75ad2f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi3kICRBK7hj4Ov3rIwAAdHIIAESLMiCcMuUCI90RVMoS4P4z\n9jcL7B1YdiG/EvjCXtF4nHXinkbg7c9g5k9Lgefc0RpOXc3l3z4Vi6p3jBydFXPU\nzmDJy6skqSflbz+wBhBB2QcHd5wjZ0FRpANf8c2Jl8JQQPF+JY0LFisMIrjmlJ4v\nTNVkjC+33bnZBVgThNcA3YbsGd2SRBLv2UUWm/W2OCUdOG8QX2GI66Ghpr7qC7io\nGqLv1l8oduW2YPSrpeFenAxW+clGBYhPYJZTEYU8HCbncspqnlqu/4O5+gvcwyby\n4V5GrV8LOrrs5TbH1NV3HVuWmQz5337/HpbMuKgdxroWBL+80/PUXiEuh+oRVAo=\n=Tgg7\n-----END PGP SIGNATURE-----\n", "payload": "tree 944f34fe94128685e9af27ebe5b2ed552208291a\nparent c26f1296d2d7a5f0c6e0b4f5cc00d59b341bcf09\nparent 562903a0a684860c0e51971ea11f1ce97795d6a2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569421576 +0200\ncommitter GitHub <noreply@github.com> 1569421576 +0200\n\nRollup merge of #64386 - tspiteri:const-abs2, r=oli-obk\n\nuse `sign` variable in abs and wrapping_abs methods\n\nThis also makes the code easier to understand by hinting at the significance of `self >> ($BITS - 1)`.\n\nAlso, now `overflowing_abs` simply uses `wrapping_abs`, which is clearer and avoids a potential performance regression in the LLVM IR.\n\nThis PR follows from the discussion from #63786.\n\nr? @eddyb\ncc @nikic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30238e3125a6c1ebf95cf47e58566efc75ad2f1", "html_url": "https://github.com/rust-lang/rust/commit/b30238e3125a6c1ebf95cf47e58566efc75ad2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30238e3125a6c1ebf95cf47e58566efc75ad2f1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26f1296d2d7a5f0c6e0b4f5cc00d59b341bcf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26f1296d2d7a5f0c6e0b4f5cc00d59b341bcf09", "html_url": "https://github.com/rust-lang/rust/commit/c26f1296d2d7a5f0c6e0b4f5cc00d59b341bcf09"}, {"sha": "562903a0a684860c0e51971ea11f1ce97795d6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/562903a0a684860c0e51971ea11f1ce97795d6a2", "html_url": "https://github.com/rust-lang/rust/commit/562903a0a684860c0e51971ea11f1ce97795d6a2"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "6658e3f779235df8036b6dfd5009264f3cbeac46", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b30238e3125a6c1ebf95cf47e58566efc75ad2f1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30238e3125a6c1ebf95cf47e58566efc75ad2f1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b30238e3125a6c1ebf95cf47e58566efc75ad2f1", "patch": "@@ -1402,7 +1402,16 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n-                (self ^ (self >> ($BITS - 1))).wrapping_sub(self >> ($BITS - 1))\n+                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n+                let sign = self >> ($BITS - 1);\n+                // For positive self, sign == 0 so the expression is simply\n+                // (self ^ 0).wrapping_sub(0) == self == abs(self).\n+                //\n+                // For negative self, self ^ sign == self ^ all_ones.\n+                // But all_ones ^ self == all_ones - self == -1 - self.\n+                // So for negative numbers, (self ^ sign).wrapping_sub(sign) is\n+                // (-1 - self).wrapping_sub(-1) == -self == abs(self).\n+                (self ^ sign).wrapping_sub(sign)\n             }\n         }\n \n@@ -1761,7 +1770,7 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n             pub const fn overflowing_abs(self) -> (Self, bool) {\n-                (self ^ (self >> ($BITS - 1))).overflowing_sub(self >> ($BITS - 1))\n+                (self.wrapping_abs(), self == Self::min_value())\n             }\n         }\n \n@@ -1969,7 +1978,21 @@ $EndFeature, \"\n                 // Note that the #[inline] above means that the overflow\n                 // semantics of the subtraction depend on the crate we're being\n                 // inlined into.\n-                (self ^ (self >> ($BITS - 1))) - (self >> ($BITS - 1))\n+\n+                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n+                let sign = self >> ($BITS - 1);\n+                // For positive self, sign == 0 so the expression is simply\n+                // (self ^ 0) - 0 == self == abs(self).\n+                //\n+                // For negative self, self ^ sign == self ^ all_ones.\n+                // But all_ones ^ self == all_ones - self == -1 - self.\n+                // So for negative numbers, (self ^ sign) - sign is\n+                // (-1 - self) - -1 == -self == abs(self).\n+                //\n+                // The subtraction overflows when self is min_value(), because\n+                // (-1 - min_value()) - -1 is max_value() - -1 which overflows.\n+                // This is exactly when we want self.abs() to overflow.\n+                (self ^ sign) - sign\n             }\n         }\n "}]}