{"sha": "4cadff61ef395f3937d950e35304969ced2ea0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWRmZjYxZWYzOTVmMzkzN2Q5NTBlMzUzMDQ5NjljZWQyZWEwYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T09:23:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T09:23:28Z"}, "message": "Auto merge of #40775 - estebank:variant-as-type, r=petrochenkov\n\nSuggest using enum when a variant is used as a type\n\nGiven a file:\n\n```rust\nenum Fruit {\n    Apple(i64),\n    Orange(i64),\n}\n\nfn should_return_fruit() -> Apple {\n    Apple(5)\n}\n```\n\nProvide the following output:\n\n```rust\nerror[E0412]: cannot find type `Apple` in this scope\n  --> file.rs:16:29\n   |\n16 | fn should_return_fruit() -> Apple {\n   |                             ^^^^^ not found in this scope\n   |\nhelp: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n  --> file.rs:12:5\n   |\n12 |     Apple(i64),\n   |     ^^^^^^^^^^\n\nerror[E0425]: cannot find function `Apple` in this scope\n  --> file.rs:17:5\n   |\n17 |     Apple(5)\n   |     ^^^^^ not found in this scope\n   |\n   = help: possible candidate is found in another module, you can import it into scope:\n             `use Fruit::Apple;`\n```\n\nFix #35675.", "tree": {"sha": "1b2004649c34ad8c3056aaf1d433dfc2e7a86bd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2004649c34ad8c3056aaf1d433dfc2e7a86bd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cadff61ef395f3937d950e35304969ced2ea0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cadff61ef395f3937d950e35304969ced2ea0b0", "html_url": "https://github.com/rust-lang/rust/commit/4cadff61ef395f3937d950e35304969ced2ea0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cadff61ef395f3937d950e35304969ced2ea0b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3178d4318c669eb0a7bf985e2d603a8e9e1917e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3178d4318c669eb0a7bf985e2d603a8e9e1917e7", "html_url": "https://github.com/rust-lang/rust/commit/3178d4318c669eb0a7bf985e2d603a8e9e1917e7"}, {"sha": "2b2eeda0831401935a45c70667cf4c3eaedafe7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2eeda0831401935a45c70667cf4c3eaedafe7d", "html_url": "https://github.com/rust-lang/rust/commit/2b2eeda0831401935a45c70667cf4c3eaedafe7d"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "c94f63329d1ff1ec3c104835d630fac5a8d06722", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4cadff61ef395f3937d950e35304969ced2ea0b0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cadff61ef395f3937d950e35304969ced2ea0b0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4cadff61ef395f3937d950e35304969ced2ea0b0", "patch": "@@ -2222,6 +2222,7 @@ impl<'a> Resolver<'a> {\n                                    -> PathResolution {\n         let ns = source.namespace();\n         let is_expected = &|def| source.is_expected(def);\n+        let is_enum_variant = &|def| if let Def::Variant(..) = def { true } else { false };\n \n         // Base error is amended with one short label and possibly some longer helps/notes.\n         let report_errors = |this: &mut Self, def: Option<Def>| {\n@@ -2272,6 +2273,21 @@ impl<'a> Resolver<'a> {\n             if !candidates.is_empty() {\n                 // Report import candidates as help and proceed searching for labels.\n                 show_candidates(&mut err, &candidates, def.is_some());\n+            } else if is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n+                let enum_candidates = this.lookup_import_candidates(name, ns, is_enum_variant);\n+                let mut enum_candidates = enum_candidates.iter()\n+                    .map(|suggestion| import_candidate_to_paths(&suggestion)).collect::<Vec<_>>();\n+                enum_candidates.sort();\n+                for (sp, variant_path, enum_path) in enum_candidates {\n+                    let msg = format!(\"there is an enum variant `{}`, did you mean to use `{}`?\",\n+                                      variant_path,\n+                                      enum_path);\n+                    if sp == DUMMY_SP {\n+                        err.help(&msg);\n+                    } else {\n+                        err.span_help(sp, &msg);\n+                    }\n+                }\n             }\n             if path.len() == 1 && this.self_type_is_available() {\n                 if let Some(candidate) = this.lookup_assoc_candidate(name, ns, is_expected) {\n@@ -3424,6 +3440,22 @@ fn path_names_to_string(path: &Path) -> String {\n     names_to_string(&path.segments.iter().map(|seg| seg.identifier).collect::<Vec<_>>())\n }\n \n+/// Get the path for an enum and the variant from an `ImportSuggestion` for an enum variant.\n+fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, String) {\n+    let variant_path = &suggestion.path;\n+    let variant_path_string = path_names_to_string(variant_path);\n+\n+    let path_len = suggestion.path.segments.len();\n+    let enum_path = ast::Path {\n+        span: suggestion.path.span,\n+        segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+    };\n+    let enum_path_string = path_names_to_string(&enum_path);\n+\n+    (suggestion.path.span, variant_path_string, enum_path_string)\n+}\n+\n+\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way"}, {"sha": "f990c2c42fe1431a266970a5837e9b7f2646dc40", "filename": "src/test/compile-fail/issue-35675.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4cadff61ef395f3937d950e35304969ced2ea0b0/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cadff61ef395f3937d950e35304969ced2ea0b0/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs?ref=4cadff61ef395f3937d950e35304969ced2ea0b0", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Fruit {\n+    Apple(i64),\n+    //~^ HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+    //~| HELP there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+    Orange(i64),\n+}\n+\n+fn should_return_fruit() -> Apple {\n+    //~^ ERROR cannot find type `Apple` in this scope\n+    //~| NOTE not found in this scope\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+    //~| HELP possible candidate is found in another module, you can import it into scope\n+}\n+\n+fn should_return_fruit_too() -> Fruit::Apple {\n+    //~^ ERROR expected type, found variant `Fruit::Apple`\n+    //~| NOTE not a type\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+    //~| HELP possible candidate is found in another module, you can import it into scope\n+}\n+\n+fn foo() -> Ok {\n+    //~^ ERROR expected type, found variant `Ok`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Ok(())\n+}\n+\n+fn bar() -> Variant3 {\n+    //~^ ERROR cannot find type `Variant3` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn qux() -> Some {\n+    //~^ ERROR expected type, found variant `Some`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Some(1)\n+}\n+\n+fn main() {}\n+\n+mod x {\n+    enum Enum {\n+        Variant1,\n+        Variant2(),\n+        Variant3(usize),\n+        //~^ HELP there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?\n+        Variant4 {},\n+    }\n+}"}]}