{"sha": "f497325b13fea12b5771b0f123880847598dd9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OTczMjViMTNmZWExMmI1NzcxYjBmMTIzODgwODQ3NTk4ZGQ5ZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T10:51:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T10:51:17Z"}, "message": "Rollup merge of #69776 - ssomers:fix69769, r=Mark-Simulacrum\n\nFix & test leak of some BTreeMap nodes on panic during `into_iter`\n\nFixes #69769", "tree": {"sha": "432dc13538a752e1674ca2b6581b0f4c9fe18f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432dc13538a752e1674ca2b6581b0f4c9fe18f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f497325b13fea12b5771b0f123880847598dd9d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZM4lCRBK7hj4Ov3rIwAAdHIIAIanMCThsNnGV5aFyX+OX8ts\nAbP3IeRj5tOPt1i1xshGZOt+82OpK52TyDcQHu747pvduvfTcGBCbOo9/XQwjGzh\nmIprDH3C67LqyED9B/ruqmREZEAqOlultqvBufLyun83zQfsKoBz4RZSWCY/gAd1\n2C/pF+tLwsIDxO9DuqflbO4o0Q4bzKcrP+8iG8mU1ykHkEO7cp5PCv0mtkDHivW8\nwx9ZypfkSBcJPmWmkOw5QEczmECPyD2a8QuXX+CLpMibrIr0Hc7X020diP4Ixime\ngBLXOPFOQf6HXgTCK66uh3gNeGPbUs1XqxYIhpk5bvpF2ZVzvXKmXIcH1Q1zRJA=\n=CkQ8\n-----END PGP SIGNATURE-----\n", "payload": "tree 432dc13538a752e1674ca2b6581b0f4c9fe18f47\nparent 5adfa4bd482d23c52d95e11d8b31926bad100fce\nparent 44c97c43b5d3df5d76381f80fb8ad0042c6ccf55\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583664677 +0100\ncommitter GitHub <noreply@github.com> 1583664677 +0100\n\nRollup merge of #69776 - ssomers:fix69769, r=Mark-Simulacrum\n\nFix & test leak of some BTreeMap nodes on panic during `into_iter`\n\nFixes #69769\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f497325b13fea12b5771b0f123880847598dd9d1", "html_url": "https://github.com/rust-lang/rust/commit/f497325b13fea12b5771b0f123880847598dd9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f497325b13fea12b5771b0f123880847598dd9d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adfa4bd482d23c52d95e11d8b31926bad100fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adfa4bd482d23c52d95e11d8b31926bad100fce", "html_url": "https://github.com/rust-lang/rust/commit/5adfa4bd482d23c52d95e11d8b31926bad100fce"}, {"sha": "44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "html_url": "https://github.com/rust-lang/rust/commit/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "9da324ba2d4f14c3d73fc910394c000658cbd12b", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f497325b13fea12b5771b0f123880847598dd9d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f497325b13fea12b5771b0f123880847598dd9d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f497325b13fea12b5771b0f123880847598dd9d1", "patch": "@@ -1477,6 +1477,14 @@ impl<K, V> Drop for IntoIter<K, V> {\n                 // Continue the same loop we perform below. This only runs when unwinding, so we\n                 // don't have to care about panics this time (they'll abort).\n                 while let Some(_) = self.0.next() {}\n+\n+                // No need to avoid the shared root, because the tree was definitely not empty.\n+                unsafe {\n+                    let mut node = ptr::read(&self.0.front).into_node().forget_type();\n+                    while let Some(parent) = node.deallocate_and_ascend() {\n+                        node = parent.into_node().forget_type();\n+                    }\n+                }\n             }\n         }\n \n@@ -1491,7 +1499,8 @@ impl<K, V> Drop for IntoIter<K, V> {\n             if node.is_shared_root() {\n                 return;\n             }\n-\n+            // Most of the nodes have been deallocated while traversing\n+            // but one pile from a leaf up to the root is left standing.\n             while let Some(parent) = node.deallocate_and_ascend() {\n                 node = parent.into_node().forget_type();\n             }"}, {"sha": "d05eec19346de86e9ea93deaba8b492a837d6fae", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f497325b13fea12b5771b0f123880847598dd9d1/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f497325b13fea12b5771b0f123880847598dd9d1/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=f497325b13fea12b5771b0f123880847598dd9d1", "patch": "@@ -1021,7 +1021,7 @@ fn test_split_off_large_random_sorted() {\n }\n \n #[test]\n-fn test_into_iter_drop_leak() {\n+fn test_into_iter_drop_leak_1() {\n     static DROPS: AtomicU32 = AtomicU32::new(0);\n \n     struct D;\n@@ -1045,3 +1045,27 @@ fn test_into_iter_drop_leak() {\n \n     assert_eq!(DROPS.load(Ordering::SeqCst), 5);\n }\n+\n+#[test]\n+fn test_into_iter_drop_leak_2() {\n+    let size = 12; // to obtain tree with 2 levels (having edges to leaf nodes)\n+    static DROPS: AtomicU32 = AtomicU32::new(0);\n+    static PANIC_POINT: AtomicU32 = AtomicU32::new(0);\n+\n+    struct D;\n+    impl Drop for D {\n+        fn drop(&mut self) {\n+            if DROPS.fetch_add(1, Ordering::SeqCst) == PANIC_POINT.load(Ordering::SeqCst) {\n+                panic!(\"panic in `drop`\");\n+            }\n+        }\n+    }\n+\n+    for panic_point in vec![0, 1, size - 2, size - 1] {\n+        DROPS.store(0, Ordering::SeqCst);\n+        PANIC_POINT.store(panic_point, Ordering::SeqCst);\n+        let map: BTreeMap<_, _> = (0..size).map(|i| (i, D)).collect();\n+        catch_unwind(move || drop(map.into_iter())).ok();\n+        assert_eq!(DROPS.load(Ordering::SeqCst), size);\n+    }\n+}"}]}