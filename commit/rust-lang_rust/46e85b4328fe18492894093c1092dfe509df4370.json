{"sha": "46e85b4328fe18492894093c1092dfe509df4370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTg1YjQzMjhmZTE4NDkyODk0MDkzYzEwOTJkZmU1MDlkZjQzNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T18:40:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T18:40:28Z"}, "message": "Auto merge of #72539 - RalfJung:rollup-8yfidi8, r=RalfJung\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72402 (Remove all uses of `NodeId` in `ResolverOutputs`)\n - #72527 (bootstrap: propagate test-args to miri and clippy test suites)\n - #72530 (Clean up E0602 explanation)\n - #72532 (Use `dyn` trait syntax in more comments and docs)\n - #72535 (Use sort_unstable_by in its own docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d5cac7ea345302d9a89e0531f20a0ddc2ec1c798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5cac7ea345302d9a89e0531f20a0ddc2ec1c798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e85b4328fe18492894093c1092dfe509df4370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e85b4328fe18492894093c1092dfe509df4370", "html_url": "https://github.com/rust-lang/rust/commit/46e85b4328fe18492894093c1092dfe509df4370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e85b4328fe18492894093c1092dfe509df4370/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff991d60349201a90ca15202dd0323ebdfab8745", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff991d60349201a90ca15202dd0323ebdfab8745", "html_url": "https://github.com/rust-lang/rust/commit/ff991d60349201a90ca15202dd0323ebdfab8745"}, {"sha": "134a165b6c55bd16a0431749da12c3e75477cf63", "url": "https://api.github.com/repos/rust-lang/rust/commits/134a165b6c55bd16a0431749da12c3e75477cf63", "html_url": "https://github.com/rust-lang/rust/commit/134a165b6c55bd16a0431749da12c3e75477cf63"}], "stats": {"total": 197, "additions": 130, "deletions": 67}, "files": [{"sha": "ed50f950fb697cd1b451ddec777c26ef07ea68fd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -439,6 +439,8 @@ impl Step for Miri {\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI_PATH\", miri);\n \n+            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+\n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n             if !try_run(builder, &mut cargo.into()) {\n@@ -545,6 +547,8 @@ impl Step for Clippy {\n             // clippy tests need to find the driver\n             cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n \n+            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+\n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n             try_run(builder, &mut cargo.into());"}, {"sha": "741a9dc8797becd6351f4599905e7f1b9139f1a3", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -9,15 +9,15 @@\n //! Their definition should always match the ABI defined in\n //! `rustc_middle::ty::layout`.\n \n-/// The representation of a trait object like `&SomeTrait`.\n+/// The representation of a trait object like `&dyn SomeTrait`.\n ///\n-/// This struct has the same layout as types like `&SomeTrait` and\n+/// This struct has the same layout as types like `&dyn SomeTrait` and\n /// `Box<dyn AnotherTrait>`.\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g., the fields are not directly accessible\n-/// on a `&SomeTrait`) nor does it control that layout (changing the\n-/// definition will not change the layout of a `&SomeTrait`). It is\n+/// on a `&dyn SomeTrait`) nor does it control that layout (changing the\n+/// definition will not change the layout of a `&dyn SomeTrait`). It is\n /// only designed to be used by unsafe code that needs to manipulate\n /// the low-level details.\n ///"}, {"sha": "2361749f166450b6ba6d636a720f6205ba9fcb12", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -1654,7 +1654,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\n-    /// floats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n+    /// floats.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\n     /// assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n     /// ```\n     ///"}, {"sha": "dcaf251a96b5b23bc2c2bde3ab60175215fce721", "filename": "src/librustc_error_codes/error_codes/E0602.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_error_codes%2Ferror_codes%2FE0602.md", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_error_codes%2Ferror_codes%2FE0602.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0602.md?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -1,9 +1,9 @@\n An unknown lint was used on the command line.\n \n-Erroneous example:\n+Erroneous code example:\n \n ```sh\n-rustc -D bogus omse_file.rs\n+rustc -D bogus rust_file.rs\n ```\n \n Maybe you just misspelled the lint name or the lint doesn't exist anymore."}, {"sha": "c7a0822d27dd62c91e9af85fbeaaf19426a96cca", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -327,7 +327,9 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap()\n+        self.opt_local_def_id(node).unwrap_or_else(|| {\n+            panic!(\"no entry for node id: `{:?}` / `{:?}`\", node, self.opt_node_id_to_hir_id(node))\n+        })\n     }\n \n     #[inline]"}, {"sha": "5b53ab1778e3f93a24bf190a5dbdf8eae47c4d82", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -35,7 +35,6 @@ use crate::ty::{InferTy, ParamTy, PolyFnSig, ProjectionTy};\n use crate::ty::{List, TyKind, TyS};\n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -926,7 +925,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     /// Resolutions of `extern crate` items produced by resolver.\n-    extern_crate_map: NodeMap<CrateNum>,\n+    extern_crate_map: FxHashMap<DefId, CrateNum>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n@@ -1116,13 +1115,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (k, v) in resolutions.trait_map {\n-            let hir_id = definitions.node_id_to_hir_id(k);\n+        for (hir_id, v) in resolutions.trait_map.into_iter() {\n             let map = trait_map.entry(hir_id.owner).or_default();\n-            let v = v\n-                .into_iter()\n-                .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                .collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n \n@@ -1139,32 +1133,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             consts: common_consts,\n             extern_crate_map: resolutions.extern_crate_map,\n             trait_map,\n-            export_map: resolutions\n-                .export_map\n-                .into_iter()\n-                .map(|(k, v)| {\n-                    let exports: Vec<_> = v\n-                        .into_iter()\n-                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect();\n-                    (k, exports)\n-                })\n-                .collect(),\n-            maybe_unused_trait_imports: resolutions\n-                .maybe_unused_trait_imports\n-                .into_iter()\n-                .map(|id| definitions.local_def_id(id))\n-                .collect(),\n-            maybe_unused_extern_crates: resolutions\n-                .maybe_unused_extern_crates\n-                .into_iter()\n-                .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n-                .collect(),\n-            glob_map: resolutions\n-                .glob_map\n-                .into_iter()\n-                .map(|(id, names)| (definitions.local_def_id(id), names))\n-                .collect(),\n+            export_map: resolutions.export_map,\n+            maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n+            glob_map: resolutions.glob_map,\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n             definitions,\n@@ -2729,10 +2701,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n         tcx.stability().local_deprecation_entry(id)\n     };\n-    providers.extern_mod_stmt_cnum = |tcx, id| {\n-        let id = tcx.hir().as_local_node_id(id).unwrap();\n-        tcx.extern_crate_map.get(&id).cloned()\n-    };\n+    providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n     providers.all_crate_nums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())"}, {"sha": "aad3c6889c3ce013a2cc5ddf9710be18334927a9", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -17,11 +17,11 @@ use crate::ty;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use rustc_ast::ast;\n-use rustc_ast::node_id::{NodeId, NodeMap, NodeSet};\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -31,7 +31,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::{FnMutTraitLangItem, FnOnceTraitLangItem, FnTraitLangItem};\n-use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -120,12 +120,12 @@ mod sty;\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n-    pub extern_crate_map: NodeMap<CrateNum>,\n-    pub trait_map: TraitMap<NodeId>,\n-    pub maybe_unused_trait_imports: NodeSet,\n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n-    pub export_map: ExportMap<NodeId>,\n-    pub glob_map: GlobMap,\n+    pub extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n+    pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    pub maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    pub export_map: ExportMap<hir::HirId>,\n+    pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,"}, {"sha": "63a4cdfbf29285e5e9215d0151fb304278355e77", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 101, "deletions": 13, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e85b4328fe18492894093c1092dfe509df4370/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=46e85b4328fe18492894093c1092dfe509df4370", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! This crate is responsible for the part of name resolution that doesn't require type checker.\n //!\n //! Module structure of the crate is built here.\n@@ -1266,15 +1268,60 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n+        let definitions = self.definitions;\n+        let extern_crate_map = self\n+            .extern_crate_map\n+            .into_iter()\n+            .map(|(k, v)| (definitions.local_def_id(k).to_def_id(), v))\n+            .collect();\n+        let export_map = self\n+            .export_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n+                    k,\n+                    v.into_iter()\n+                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n+                        .collect(),\n+                )\n+            })\n+            .collect();\n+        let trait_map = self\n+            .trait_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n+                    definitions.node_id_to_hir_id(k),\n+                    v.into_iter()\n+                        .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n+                        .collect(),\n+                )\n+            })\n+            .collect();\n+        let maybe_unused_trait_imports = self\n+            .maybe_unused_trait_imports\n+            .into_iter()\n+            .map(|id| definitions.local_def_id(id))\n+            .collect();\n+        let maybe_unused_extern_crates = self\n+            .maybe_unused_extern_crates\n+            .into_iter()\n+            .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n+            .collect();\n+        let glob_map = self\n+            .glob_map\n+            .into_iter()\n+            .map(|(id, names)| (definitions.local_def_id(id), names))\n+            .collect();\n         ResolverOutputs {\n-            definitions: self.definitions,\n+            definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n-            extern_crate_map: self.extern_crate_map,\n-            export_map: self.export_map,\n-            trait_map: self.trait_map,\n-            glob_map: self.glob_map,\n-            maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n-            maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n+            extern_crate_map,\n+            export_map,\n+            trait_map,\n+            glob_map,\n+            maybe_unused_trait_imports,\n+            maybe_unused_extern_crates,\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()\n@@ -1287,12 +1334,53 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self.export_map.clone(),\n-            trait_map: self.trait_map.clone(),\n-            glob_map: self.glob_map.clone(),\n-            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n-            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n+            extern_crate_map: self\n+                .extern_crate_map\n+                .iter()\n+                .map(|(&k, &v)| (self.definitions.local_def_id(k).to_def_id(), v))\n+                .collect(),\n+            export_map: self\n+                .export_map\n+                .iter()\n+                .map(|(&k, v)| {\n+                    (\n+                        k,\n+                        v.iter()\n+                            .map(|e| e.map_id(|id| self.definitions.node_id_to_hir_id(id)))\n+                            .collect(),\n+                    )\n+                })\n+                .collect(),\n+            trait_map: self\n+                .trait_map\n+                .iter()\n+                .map(|(&k, v)| {\n+                    (\n+                        self.definitions.node_id_to_hir_id(k),\n+                        v.iter()\n+                            .cloned()\n+                            .map(|tc| {\n+                                tc.map_import_ids(|id| self.definitions.node_id_to_hir_id(id))\n+                            })\n+                            .collect(),\n+                    )\n+                })\n+                .collect(),\n+            glob_map: self\n+                .glob_map\n+                .iter()\n+                .map(|(&id, names)| (self.definitions.local_def_id(id), names.clone()))\n+                .collect(),\n+            maybe_unused_trait_imports: self\n+                .maybe_unused_trait_imports\n+                .iter()\n+                .map(|&id| self.definitions.local_def_id(id))\n+                .collect(),\n+            maybe_unused_extern_crates: self\n+                .maybe_unused_extern_crates\n+                .iter()\n+                .map(|&(id, sp)| (self.definitions.local_def_id(id).to_def_id(), sp))\n+                .collect(),\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()"}]}