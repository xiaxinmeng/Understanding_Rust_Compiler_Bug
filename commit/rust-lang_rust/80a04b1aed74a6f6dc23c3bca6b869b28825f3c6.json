{"sha": "80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYTA0YjFhZWQ3NGE2ZjZkYzIzYzNiY2E2Yjg2OWIyODgyNWYzYzY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T23:03:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "librustc_trans: fix fallout", "tree": {"sha": "cc5fd507465c1cc722dca372de06af115ef39a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5fd507465c1cc722dca372de06af115ef39a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "html_url": "https://github.com/rust-lang/rust/commit/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/comments", "author": null, "committer": null, "parents": [{"sha": "e66ba157643420c6a46f07c68e9b817a66a64b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66ba157643420c6a46f07c68e9b817a66a64b4f", "html_url": "https://github.com/rust-lang/rust/commit/e66ba157643420c6a46f07c68e9b817a66a64b4f"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "05b1a86b72b05171a3f88ce1b2408ca3a3c220a8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "patch": "@@ -25,6 +25,7 @@\n #![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unboxed_closures)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "7a7a708fcc509830f404f5b20f43e9a82f19e688", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "patch": "@@ -771,7 +771,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         }\n     };\n \n-    let column_contains_any_nonwild_patterns: |&uint| -> bool = |&col| {\n+    let column_contains_any_nonwild_patterns = |&: &col: &uint| -> bool {\n         m.iter().any(|row| match row.pats[col].node {\n             ast::PatWild(_) => false,\n             _ => true"}, {"sha": "dca106a3897fb3fc68eeb52a254b4f2254dce8e2", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "patch": "@@ -17,7 +17,12 @@ pub struct BasicBlock(pub BasicBlockRef);\n \n impl Copy for BasicBlock {}\n \n-pub type Preds<'a> = Map<Value, BasicBlock, Filter<'a, Value, Users>, fn(Value) -> BasicBlock>;\n+pub type Preds = Map<\n+    Value,\n+    BasicBlock,\n+    Filter<Value, Users, fn(&Value) -> bool>,\n+    fn(Value) -> BasicBlock,\n+>;\n \n /// Wrapper for LLVM BasicBlockRef\n impl BasicBlock {\n@@ -31,11 +36,12 @@ impl BasicBlock {\n         }\n     }\n \n-    pub fn pred_iter(self) -> Preds<'static> {\n+    pub fn pred_iter(self) -> Preds {\n+        fn is_a_terminator_inst(user: &Value) -> bool { user.is_a_terminator_inst() }\n         fn get_parent(user: Value) -> BasicBlock { user.get_parent().unwrap() }\n \n         self.as_value().user_iter()\n-            .filter(|user| user.is_a_terminator_inst())\n+            .filter(is_a_terminator_inst)\n             .map(get_parent)\n     }\n "}]}