{"sha": "308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "node_id": "C_kwDOAAsO6NoAKDMwOGZkNTlmNDJkZmY4OWU1NWRmZjFjN2E4NWZhOWZhMjQxMWNhYjM", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-06T04:17:35Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-06T04:17:35Z"}, "message": "Stop enabling `in_band_lifetimes` in rustc_data_structures\n\nThere's a conversation in the tracking issue about possibly unaccepting `in_band_lifetimes`, but it's used heavily in the compiler, and thus there'd need to be a bunch of PRs like this if that were to happen.\n\nSo here's one to see how much of an impact it has.\n\n(Oh, and I removed `nll` while I was here too, since it didn't seem needed.  Let me know if I should put that back.)", "tree": {"sha": "8225260b030ecb9b41f2db4a423f4fe2dbf60d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8225260b030ecb9b41f2db4a423f4fe2dbf60d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "html_url": "https://github.com/rust-lang/rust/commit/308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "html_url": "https://github.com/rust-lang/rust/commit/2a9e0831d6603d87220cedd1b1293e2eb82ef55c"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "bf09b2f8eef37dfb530628aa665e24f466dda93e", "filename": "compiler/rustc_data_structures/src/binary_search_util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fbinary_search_util%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fbinary_search_util%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fbinary_search_util%2Fmod.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -6,7 +6,7 @@ mod tests;\n /// function finds the range of elements that match the key. `data`\n /// must have been sorted as if by a call to `sort_by_key` for this to\n /// work.\n-pub fn binary_search_slice<E, K>(data: &'d [E], key_fn: impl Fn(&E) -> K, key: &K) -> &'d [E]\n+pub fn binary_search_slice<'d, E, K>(data: &'d [E], key_fn: impl Fn(&E) -> K, key: &K) -> &'d [E]\n where\n     K: Ord,\n {"}, {"sha": "57007611a76c3b3d12a4fe43142eb2e3c775d284", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -79,7 +79,7 @@ where\n     visited: BitSet<G::Node>,\n }\n \n-impl<G> DepthFirstSearch<'graph, G>\n+impl<'graph, G> DepthFirstSearch<'graph, G>\n where\n     G: ?Sized + DirectedGraph + WithNumNodes + WithSuccessors,\n {\n@@ -209,7 +209,7 @@ where\n     settled: BitSet<G::Node>,\n }\n \n-impl<G> TriColorDepthFirstSearch<'graph, G>\n+impl<'graph, G> TriColorDepthFirstSearch<'graph, G>\n where\n     G: ?Sized + DirectedGraph + WithNumNodes + WithSuccessors,\n {\n@@ -276,7 +276,7 @@ where\n     }\n }\n \n-impl<G> TriColorDepthFirstSearch<'graph, G>\n+impl<G> TriColorDepthFirstSearch<'_, G>\n where\n     G: ?Sized + DirectedGraph + WithNumNodes + WithSuccessors + WithStartNode,\n {"}, {"sha": "508a084b311f54eedb9390db8e628739f8a31c7c", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -97,7 +97,7 @@ impl<N: Idx, S: Idx> WithNumEdges for Sccs<N, S> {\n     }\n }\n \n-impl<N: Idx, S: Idx> GraphSuccessors<'graph> for Sccs<N, S> {\n+impl<'graph, N: Idx, S: Idx> GraphSuccessors<'graph> for Sccs<N, S> {\n     type Item = S;\n \n     type Iter = std::iter::Cloned<std::slice::Iter<'graph, S>>;"}, {"sha": "5d9bc1b2e5168791e9df752caea863da8cab5d7c", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -94,7 +94,7 @@ impl<N: Idx> WithNumEdges for VecGraph<N> {\n     }\n }\n \n-impl<N: Idx> GraphSuccessors<'graph> for VecGraph<N> {\n+impl<'graph, N: Idx> GraphSuccessors<'graph> for VecGraph<N> {\n     type Item = N;\n \n     type Iter = std::iter::Cloned<std::slice::Iter<'graph, N>>;"}, {"sha": "e17724b72f8b8f0dd1f18e31988ecde8b5cbc90d", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -15,13 +15,11 @@\n #![feature(core_intrinsics)]\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n-#![feature(in_band_lifetimes)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(type_alias_impl_trait)]\n #![feature(new_uninit)]\n-#![feature(nll)]\n #![feature(once_cell)]\n #![feature(test)]\n #![feature(thread_id_value)]"}, {"sha": "593316e2699fade06477c3c71367cd723dcc7977", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -84,7 +84,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n     #[inline]\n-    pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n+    pub fn get_by_key(&self, key: K) -> impl Iterator<Item = &V> + '_ {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n \n@@ -94,7 +94,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n     #[inline]\n-    pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n+    pub fn get_by_key_enumerated(&self, key: K) -> impl Iterator<Item = (I, &V)> + '_ {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {\n             let (k, v) = &self.items[i];"}, {"sha": "ec6a62016a87cffad47430832d96f4554d5567aa", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -423,14 +423,14 @@ impl<K, V> IntoIterator for SsoHashMap<K, V> {\n \n /// adapts Item of array reference iterator to Item of hashmap reference iterator.\n #[inline(always)]\n-fn adapt_array_ref_it<K, V>(pair: &'a (K, V)) -> (&'a K, &'a V) {\n+fn adapt_array_ref_it<K, V>(pair: &(K, V)) -> (&K, &V) {\n     let (a, b) = pair;\n     (a, b)\n }\n \n /// adapts Item of array mut reference iterator to Item of hashmap mut reference iterator.\n #[inline(always)]\n-fn adapt_array_mut_it<K, V>(pair: &'a mut (K, V)) -> (&'a K, &'a mut V) {\n+fn adapt_array_mut_it<K, V>(pair: &mut (K, V)) -> (&K, &mut V) {\n     let (a, b) = pair;\n     (a, b)\n }"}, {"sha": "f71522d37148ad8b86217000570356f4b0540a2b", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -75,7 +75,7 @@ impl<T> SsoHashSet<T> {\n     /// An iterator visiting all elements in arbitrary order.\n     /// The iterator element type is `&'a T`.\n     #[inline]\n-    pub fn iter(&'a self) -> impl Iterator<Item = &'a T> {\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n         self.into_iter()\n     }\n "}, {"sha": "ce60d40b24b44e1087a5428c02d214c0379f8e89", "filename": "compiler/rustc_data_structures/src/vec_linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308fd59f42dff89e55dff1c7a85fa9fa2411cab3/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs?ref=308fd59f42dff89e55dff1c7a85fa9fa2411cab3", "patch": "@@ -2,8 +2,8 @@ use rustc_index::vec::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,\n-    links: &'a Ls,\n-) -> impl Iterator<Item = Ls::LinkIndex> + 'a\n+    links: &Ls,\n+) -> impl Iterator<Item = Ls::LinkIndex> + '_\n where\n     Ls: Links,\n {"}]}