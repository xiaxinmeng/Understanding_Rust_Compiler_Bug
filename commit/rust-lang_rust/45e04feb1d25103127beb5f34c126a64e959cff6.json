{"sha": "45e04feb1d25103127beb5f34c126a64e959cff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTA0ZmViMWQyNTEwMzEyN2JlYjVmMzRjMTI2YTY0ZTk1OWNmZjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T00:47:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T00:47:26Z"}, "message": "Rollup merge of #70845 - varkor:const-generics-derive-eq-diagnostic, r=estebank\n\nMake the `structural_match` error diagnostic for const generics clearer\n\nThe previous diagnostic caused confusion (https://github.com/rust-lang/rust/issues/70790), so this changes the message to be closer to the message for using non-`structural_match` constants in patterns, explicitly mentioning `#[derive(PartialEq, Eq)]`.\n\nFixes https://github.com/rust-lang/rust/issues/70790.\n\nr? @estebank", "tree": {"sha": "90f834e5b5fb98e84882462a3c7212942c0d12f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f834e5b5fb98e84882462a3c7212942c0d12f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e04feb1d25103127beb5f34c126a64e959cff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeojceCRBK7hj4Ov3rIwAAdHIIAHJRnrPzIIlPW0s4PMAS+l6o\nP+Z/v2dKbQbGhf6O7OU5uriH1gaTMttSG924dv/sC+G3UjeEwECgN/GzFyFi0CZz\nbcvwfsO+R55pamOpvohVqeG2XjqFbYTQXUlJpNQ8BhDXRCdvOkUEIDkvj7JgNtGP\nC1mGiyRd2tWOM97tktsfIYstBnQsB85oQTCiK3kkq1uHDH0GWzxoou6f34dI7nRb\ntsajSMXYWZKJ8SbQa6It5krjJYJmP1ZQfmuQKQw05gZS9QbQOJVhZmyT2d2NV+Hx\n+YApb+zx5lYXkV1nCjBLN5GSzyG9uJsOlm57XIiyo7hypitFg2GYMpgHQTzq9Ug=\n=Bgc4\n-----END PGP SIGNATURE-----\n", "payload": "tree 90f834e5b5fb98e84882462a3c7212942c0d12f0\nparent 14b15521c52549ebbb113173b4abecd124b5a823\nparent f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587689246 +0200\ncommitter GitHub <noreply@github.com> 1587689246 +0200\n\nRollup merge of #70845 - varkor:const-generics-derive-eq-diagnostic, r=estebank\n\nMake the `structural_match` error diagnostic for const generics clearer\n\nThe previous diagnostic caused confusion (https://github.com/rust-lang/rust/issues/70790), so this changes the message to be closer to the message for using non-`structural_match` constants in patterns, explicitly mentioning `#[derive(PartialEq, Eq)]`.\n\nFixes https://github.com/rust-lang/rust/issues/70790.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e04feb1d25103127beb5f34c126a64e959cff6", "html_url": "https://github.com/rust-lang/rust/commit/45e04feb1d25103127beb5f34c126a64e959cff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e04feb1d25103127beb5f34c126a64e959cff6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b15521c52549ebbb113173b4abecd124b5a823", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b15521c52549ebbb113173b4abecd124b5a823", "html_url": "https://github.com/rust-lang/rust/commit/14b15521c52549ebbb113173b4abecd124b5a823"}, {"sha": "f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "html_url": "https://github.com/rust-lang/rust/commit/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "4991e0bf9333f8494eadff26d446f6c535e7b8fe", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -341,17 +341,45 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()\n                 {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        hir_ty.span,\n-                        E0741,\n-                        \"the types of const generic parameters must derive `PartialEq` and `Eq`\",\n-                    )\n-                    .span_label(\n-                        hir_ty.span,\n-                        format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n-                    )\n-                    .emit();\n+                    // We use the same error code in both branches, because this is really the same\n+                    // issue: we just special-case the message for type parameters to make it\n+                    // clearer.\n+                    if let ty::Param(_) = ty.peel_refs().kind {\n+                        // Const parameters may not have type parameters as their types,\n+                        // because we cannot be sure that the type parameter derives `PartialEq`\n+                        // and `Eq` (just implementing them is not enough for `structural_match`).\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n+                             used as the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .note(\n+                            \"it is not currently possible to use a type parameter as the type of a \\\n+                             const parameter\",\n+                        )\n+                        .emit();\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n+                             the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .emit();\n+                    }\n                 }\n                 ty\n             }"}, {"sha": "86ab8075896aa6c51fc503bd809f6d989ed7ebfa", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "92a7edf96bccb504f52437e35a89fd5b9c0a24c1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -7,11 +7,13 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7468020366cecb6fb4493d808cc777483c00d565", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -7,6 +7,6 @@\n // details.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "9f20b06813e378361f7f6d79102ffbe8f5368b84", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -6,11 +6,13 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "a30cdc3efdf436c92d6387905c67bb182c83b222", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -8,6 +8,6 @@ struct B<const X: A>; // ok\n \n struct C;\n \n-struct D<const X: C>; //~ ERROR the types of const generic parameters must derive\n+struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "4f343146263ba1b115d51b6e85a9e0e0de5de4ec", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e04feb1d25103127beb5f34c126a64e959cff6/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=45e04feb1d25103127beb5f34c126a64e959cff6", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/forbid-non-structural_match-types.rs:11:19\n    |\n LL | struct D<const X: C>;"}]}