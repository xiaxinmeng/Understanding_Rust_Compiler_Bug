{"sha": "fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTA4OGFlMjNjZDJmM2VhMjYxZTFkMGMwNGU3OTlhMjkxOGJiNmY=", "commit": {"author": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-14T18:49:08Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-18T08:46:06Z"}, "message": "Now also displays portability tags.", "tree": {"sha": "426d2e5666b5b53be372ec71bb79d34dc4b11edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/426d2e5666b5b53be372ec71bb79d34dc4b11edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "html_url": "https://github.com/rust-lang/rust/commit/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/comments", "author": null, "committer": null, "parents": [{"sha": "1e2ab998c378e3c9b532e811a8f93b6a65711f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2ab998c378e3c9b532e811a8f93b6a65711f92", "html_url": "https://github.com/rust-lang/rust/commit/1e2ab998c378e3c9b532e811a8f93b6a65711f92"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "598d6da390a3bdfdb859b247a17cc936794b6c60", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "patch": "@@ -477,6 +477,7 @@ fn build_module(\n                                 }],\n                             },\n                             did: None,\n+                            attrs: None,\n                         },\n                         true,\n                     )),"}, {"sha": "75c541a50ed593a267189592b7345b446f705310", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "patch": "@@ -2081,6 +2081,7 @@ crate enum ImportKind {\n crate struct ImportSource {\n     crate path: Path,\n     crate did: Option<DefId>,\n+    crate attrs: Option<Attributes>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "898a5b0df5db29163557660889919a03ae41b07f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "patch": "@@ -468,10 +468,10 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n }\n \n crate fn resolve_use_source(cx: &mut DocContext<'_>, path: Path) -> ImportSource {\n-    ImportSource {\n-        did: if path.res.opt_def_id().is_none() { None } else { Some(register_res(cx, path.res)) },\n-        path,\n-    }\n+    let did = if path.res.opt_def_id().is_none() { None } else { Some(register_res(cx, path.res)) };\n+    let attrs = did.map(|did| cx.tcx.get_attrs(did).clean(cx));\n+\n+    ImportSource { did, path, attrs }\n }\n \n crate fn enter_impl_trait<F, R>(cx: &mut DocContext<'_>, f: F) -> R"}, {"sha": "045ff5b4b897bda1c19bc9179c5c60b260526f41", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "patch": "@@ -282,9 +282,14 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n             }\n \n             clean::ImportItem(ref import) => {\n-                let (stab, stab_tags) = if let Some(def_id) = import.source.did {\n-                    // Just need an item with the correct def_id\n-                    let import_item = clean::Item { def_id, ..myitem.clone() };\n+                let (stab, stab_tags) = if let (Some(def_id), Some(attrs)) =\n+                    (import.source.did, import.source.attrs.clone())\n+                {\n+                    let attrs = Box::new(attrs);\n+\n+                    // Just need an item with the correct def_id and attrs\n+                    let import_item = clean::Item { def_id, attrs, ..myitem.clone() };\n+\n                     let stab = import_item.stability_class(cx.tcx());\n                     let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n                     (stab, stab_tags)"}, {"sha": "a00401fbe09f07b771365959da7af2573d4ec8c7", "filename": "src/test/rustdoc/issue-83832.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Ftest%2Frustdoc%2Fissue-83832.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca088ae23cd2f3ea261e1d0c04e799a2918bb6f/src%2Ftest%2Frustdoc%2Fissue-83832.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-83832.rs?ref=fca088ae23cd2f3ea261e1d0c04e799a2918bb6f", "patch": "@@ -1,21 +1,36 @@\n #![crate_name = \"foo\"]\n+#![feature(doc_cfg)]\n \n-pub mod io {\n+pub mod tag {\n     #[deprecated(since = \"0.1.8\", note = \"Use bar() instead\")]\n-    pub trait Reader {}\n-    pub trait Writer {}\n+    pub trait Deprecated {}\n+\n+    #[doc(cfg(feature = \"sync\"))]\n+    pub trait Portability {}\n+\n+    pub trait Unstable {}\n }\n \n // @has foo/mod1/index.html\n pub mod mod1 {\n-    // @has - '//code' 'pub use io::Reader;'\n+    // @has - '//code' 'pub use tag::Deprecated;'\n     // @has - '//span' 'Deprecated'\n-    pub use io::Reader;\n+    // @!has - '//span' 'sync'\n+    pub use tag::Deprecated;\n }\n \n // @has foo/mod2/index.html\n pub mod mod2 {\n-    // @has - '//code' 'pub use io::Writer;'\n+    // @has - '//code' 'pub use tag::Portability;'\n+    // @!has - '//span' 'Deprecated'\n+    // @has - '//span' 'sync'\n+    pub use tag::Portability;\n+}\n+\n+// @has foo/mod3/index.html\n+pub mod mod3 {\n+    // @has - '//code' 'pub use tag::Unstable;'\n     // @!has - '//span' 'Deprecated'\n-    pub use io::Writer;\n+    // @!has - '//span' 'sync'\n+    pub use tag::Unstable;\n }"}]}