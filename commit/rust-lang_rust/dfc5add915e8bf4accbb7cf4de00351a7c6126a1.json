{"sha": "dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "node_id": "C_kwDOAAsO6NoAKGRmYzVhZGQ5MTVlOGJmNGFjY2JiN2NmNGRlMDAzNTFhN2M2MTI2YTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T20:36:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T20:36:10Z"}, "message": "Auto merge of #89555 - oli-obk:nll_member_constraint_diag, r=estebank\n\nRemove textual span from diagnostic string\n\nThis is an unnecessary repetition, as the diagnostic prints the span anyway in the source path right below the message.\n\nI further removed the identification of the node, as that does not give any new information in any of the cases that are changed in tests.\n\nEDIT: also inserted a suggestion that other diagnostics were already emitting", "tree": {"sha": "fe62477fc3e8210930c77de6a1ccd78853108ae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe62477fc3e8210930c77de6a1ccd78853108ae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "html_url": "https://github.com/rust-lang/rust/commit/dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "html_url": "https://github.com/rust-lang/rust/commit/eeb16a2a892c2a29b1da3085e29f39efa3486e1c"}, {"sha": "20d6aadff7148cdce8d453b8d87b47610b1d0e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/20d6aadff7148cdce8d453b8d87b47610b1d0e41", "html_url": "https://github.com/rust-lang/rust/commit/20d6aadff7148cdce8d453b8d87b47610b1d0e41"}], "stats": {"total": 1013, "additions": 511, "deletions": 502}, "files": [{"sha": "11d0178e93ba447b7b17722bb5b78245566b8755", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -2235,8 +2235,7 @@ pub enum TyKind<'hir> {\n     ///\n     /// Type parameters may be stored in each `PathSegment`.\n     Path(QPath<'hir>),\n-    /// An opaque type definition itself. This is currently only used for the\n-    /// `opaque type Foo: Trait` item that `impl Trait` in desugars to.\n+    /// An opaque type definition itself. This is only used for `impl Trait`.\n     ///\n     /// The generic argument list contains the lifetimes (and in the future\n     /// possibly parameters) that are actually bound on the `impl Trait`."}, {"sha": "126c25f0c38c7819164eebe6f65ac658f11ef73a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 37, "deletions": 56, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -116,7 +116,7 @@ pub(super) fn note_and_explain_region(\n     emit_msg_span(err, prefix, description, span, suffix);\n }\n \n-pub(super) fn note_and_explain_free_region(\n+fn explain_free_region(\n     tcx: TyCtxt<'tcx>,\n     err: &mut DiagnosticBuilder<'_>,\n     prefix: &str,\n@@ -125,7 +125,7 @@ pub(super) fn note_and_explain_free_region(\n ) {\n     let (description, span) = msg_span_from_free_region(tcx, region, None);\n \n-    emit_msg_span(err, prefix, description, span, suffix);\n+    label_msg_span(err, prefix, description, span, suffix);\n }\n \n fn msg_span_from_free_region(\n@@ -135,7 +135,8 @@ fn msg_span_from_free_region(\n ) -> (String, Option<Span>) {\n     match *region {\n         ty::ReEarlyBound(_) | ty::ReFree(_) => {\n-            msg_span_from_early_bound_and_free_regions(tcx, region)\n+            let (msg, span) = msg_span_from_early_bound_and_free_regions(tcx, region);\n+            (msg, Some(span))\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n         ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"an empty lifetime\".to_owned(), alt_span),\n@@ -147,28 +148,20 @@ fn msg_span_from_free_region(\n fn msg_span_from_early_bound_and_free_regions(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n-) -> (String, Option<Span>) {\n+) -> (String, Span) {\n     let sm = tcx.sess.source_map();\n \n     let scope = region.free_region_binding_scope(tcx);\n     let node = tcx.hir().local_def_id_to_hir_id(scope.expect_local());\n-    let tag = match tcx.hir().find(node) {\n-        Some(Node::Block(_) | Node::Expr(_)) => \"body\",\n-        Some(Node::Item(it)) => item_scope_tag(&it),\n-        Some(Node::TraitItem(it)) => trait_item_scope_tag(&it),\n-        Some(Node::ImplItem(it)) => impl_item_scope_tag(&it),\n-        Some(Node::ForeignItem(it)) => foreign_item_scope_tag(&it),\n-        _ => unreachable!(),\n-    };\n-    let (prefix, span) = match *region {\n+    match *region {\n         ty::ReEarlyBound(ref br) => {\n             let mut sp = sm.guess_head_span(tcx.hir().span(node));\n             if let Some(param) =\n                 tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(br.name))\n             {\n                 sp = param.span;\n             }\n-            (format!(\"the lifetime `{}` as defined on\", br.name), sp)\n+            (format!(\"the lifetime `{}` as defined here\", br.name), sp)\n         }\n         ty::ReFree(ty::FreeRegion {\n             bound_region: ty::BoundRegionKind::BrNamed(_, name), ..\n@@ -179,28 +172,26 @@ fn msg_span_from_early_bound_and_free_regions(\n             {\n                 sp = param.span;\n             }\n-            (format!(\"the lifetime `{}` as defined on\", name), sp)\n+            (format!(\"the lifetime `{}` as defined here\", name), sp)\n         }\n         ty::ReFree(ref fr) => match fr.bound_region {\n             ty::BrAnon(idx) => {\n                 if let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region) {\n-                    (\"the anonymous lifetime defined on\".to_string(), ty.span)\n+                    (\"the anonymous lifetime defined here\".to_string(), ty.span)\n                 } else {\n                     (\n-                        format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                        format!(\"the anonymous lifetime #{} defined here\", idx + 1),\n                         tcx.hir().span(node),\n                     )\n                 }\n             }\n             _ => (\n-                format!(\"the lifetime `{}` as defined on\", region),\n+                format!(\"the lifetime `{}` as defined here\", region),\n                 sm.guess_head_span(tcx.hir().span(node)),\n             ),\n         },\n         _ => bug!(),\n-    };\n-    let (msg, opt_span) = explain_span(tcx, tag, span);\n-    (format!(\"{} {}\", prefix, msg), opt_span)\n+    }\n }\n \n fn emit_msg_span(\n@@ -219,44 +210,22 @@ fn emit_msg_span(\n     }\n }\n \n-fn item_scope_tag(item: &hir::Item<'_>) -> &'static str {\n-    match item.kind {\n-        hir::ItemKind::Impl { .. } => \"impl\",\n-        hir::ItemKind::Struct(..) => \"struct\",\n-        hir::ItemKind::Union(..) => \"union\",\n-        hir::ItemKind::Enum(..) => \"enum\",\n-        hir::ItemKind::Trait(..) => \"trait\",\n-        hir::ItemKind::Fn(..) => \"function body\",\n-        _ => \"item\",\n-    }\n-}\n-\n-fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n-    match item.kind {\n-        hir::TraitItemKind::Fn(..) => \"method body\",\n-        hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\",\n-    }\n-}\n-\n-fn impl_item_scope_tag(item: &hir::ImplItem<'_>) -> &'static str {\n-    match item.kind {\n-        hir::ImplItemKind::Fn(..) => \"method body\",\n-        hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(..) => \"associated item\",\n-    }\n-}\n+fn label_msg_span(\n+    err: &mut DiagnosticBuilder<'_>,\n+    prefix: &str,\n+    description: String,\n+    span: Option<Span>,\n+    suffix: &str,\n+) {\n+    let message = format!(\"{}{}{}\", prefix, description, suffix);\n \n-fn foreign_item_scope_tag(item: &hir::ForeignItem<'_>) -> &'static str {\n-    match item.kind {\n-        hir::ForeignItemKind::Fn(..) => \"method body\",\n-        hir::ForeignItemKind::Static(..) | hir::ForeignItemKind::Type => \"associated item\",\n+    if let Some(span) = span {\n+        err.span_label(span, &message);\n+    } else {\n+        err.note(&message);\n     }\n }\n \n-fn explain_span(tcx: TyCtxt<'tcx>, heading: &str, span: Span) -> (String, Option<Span>) {\n-    let lo = tcx.sess.source_map().lookup_char_pos(span.lo());\n-    (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1), Some(span))\n-}\n-\n pub fn unexpected_hidden_region_diagnostic(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n@@ -291,13 +260,25 @@ pub fn unexpected_hidden_region_diagnostic(\n             //\n             // (*) if not, the `tainted_by_errors` field would be set to\n             // `Some(ErrorReported)` in any case, so we wouldn't be here at all.\n-            note_and_explain_free_region(\n+            explain_free_region(\n                 tcx,\n                 &mut err,\n                 &format!(\"hidden type `{}` captures \", hidden_ty),\n                 hidden_region,\n                 \"\",\n             );\n+            if let Some(reg_info) = tcx.is_suitable_region(hidden_region) {\n+                let fn_returns = tcx.return_type_impl_or_dyn_traits(reg_info.def_id);\n+                nice_region_error::suggest_new_region_bound(\n+                    tcx,\n+                    &mut err,\n+                    fn_returns,\n+                    hidden_region.to_string(),\n+                    None,\n+                    format!(\"captures {}\", hidden_region),\n+                    None,\n+                )\n+            }\n         }\n         _ => {\n             // Ugh. This is a painful case: the hidden region is not one"}, {"sha": "6a3309770028f6cbef5ecb6060f925c1d8958b5c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -14,6 +14,8 @@ mod static_impl_trait;\n mod trait_impl_difference;\n mod util;\n \n+pub use static_impl_trait::suggest_new_region_bound;\n+\n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     pub fn try_report_nice_region_error(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         NiceRegionError::new(self, error.clone()).try_report().is_some()"}, {"sha": "7fba6a823d75ee4e40a62365a655dee1aed4c99e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 120, "deletions": 89, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -217,128 +217,159 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ));\n         }\n \n-        debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n-        // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n-        let consider = \"consider changing the\";\n-        let declare = \"to declare that the\";\n         let arg = match param.param.pat.simple_ident() {\n             Some(simple_ident) => format!(\"argument `{}`\", simple_ident),\n             None => \"the argument\".to_string(),\n         };\n-        let explicit = format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n-        let explicit_static = format!(\"explicit `'static` bound to the lifetime of {}\", arg);\n         let captures = format!(\"captures data from {}\", arg);\n-        let add_static_bound = \"alternatively, add an explicit `'static` bound to this reference\";\n-        let plus_lt = format!(\" + {}\", lifetime_name);\n-        for fn_return in fn_returns {\n-            if fn_return.span.desugaring_kind().is_some() {\n-                // Skip `async` desugaring `impl Future`.\n-                continue;\n-            }\n-            match fn_return.kind {\n-                TyKind::OpaqueDef(item_id, _) => {\n-                    let item = tcx.hir().item(item_id);\n-                    let opaque = if let ItemKind::OpaqueTy(opaque) = &item.kind {\n-                        opaque\n-                    } else {\n-                        err.emit();\n-                        return Some(ErrorReported);\n-                    };\n+        suggest_new_region_bound(\n+            tcx,\n+            &mut err,\n+            fn_returns,\n+            lifetime_name,\n+            Some(arg),\n+            captures,\n+            Some((param.param_ty_span, param.param_ty.to_string())),\n+        );\n \n-                    if let Some(span) = opaque\n-                        .bounds\n-                        .iter()\n-                        .filter_map(|arg| match arg {\n-                            GenericBound::Outlives(Lifetime {\n-                                name: LifetimeName::Static,\n-                                span,\n-                                ..\n-                            }) => Some(*span),\n-                            _ => None,\n-                        })\n-                        .next()\n-                    {\n+        err.emit();\n+        Some(ErrorReported)\n+    }\n+}\n+\n+pub fn suggest_new_region_bound(\n+    tcx: TyCtxt<'tcx>,\n+    err: &mut DiagnosticBuilder<'_>,\n+    fn_returns: Vec<&rustc_hir::Ty<'_>>,\n+    lifetime_name: String,\n+    arg: Option<String>,\n+    captures: String,\n+    param: Option<(Span, String)>,\n+) {\n+    debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n+    // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n+    let consider = \"consider changing the\";\n+    let declare = \"to declare that the\";\n+    let explicit = format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n+    let explicit_static =\n+        arg.map(|arg| format!(\"explicit `'static` bound to the lifetime of {}\", arg));\n+    let add_static_bound = \"alternatively, add an explicit `'static` bound to this reference\";\n+    let plus_lt = format!(\" + {}\", lifetime_name);\n+    for fn_return in fn_returns {\n+        if fn_return.span.desugaring_kind().is_some() {\n+            // Skip `async` desugaring `impl Future`.\n+            continue;\n+        }\n+        match fn_return.kind {\n+            TyKind::OpaqueDef(item_id, _) => {\n+                let item = tcx.hir().item(item_id);\n+                let opaque = if let ItemKind::OpaqueTy(opaque) = &item.kind {\n+                    opaque\n+                } else {\n+                    return;\n+                };\n+\n+                if let Some(span) = opaque\n+                    .bounds\n+                    .iter()\n+                    .filter_map(|arg| match arg {\n+                        GenericBound::Outlives(Lifetime {\n+                            name: LifetimeName::Static,\n+                            span,\n+                            ..\n+                        }) => Some(*span),\n+                        _ => None,\n+                    })\n+                    .next()\n+                {\n+                    if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             span,\n                             &format!(\"{} `impl Trait`'s {}\", consider, explicit_static),\n                             lifetime_name.clone(),\n                             Applicability::MaybeIncorrect,\n                         );\n+                    }\n+                    if let Some((param_span, param_ty)) = param.clone() {\n                         err.span_suggestion_verbose(\n-                            param.param_ty_span,\n+                            param_span,\n                             add_static_bound,\n-                            param.param_ty.to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else if opaque\n-                        .bounds\n-                        .iter()\n-                        .filter_map(|arg| match arg {\n-                            GenericBound::Outlives(Lifetime { name, span, .. })\n-                                if name.ident().to_string() == lifetime_name =>\n-                            {\n-                                Some(*span)\n-                            }\n-                            _ => None,\n-                        })\n-                        .next()\n-                        .is_some()\n-                    {\n-                    } else {\n-                        err.span_suggestion_verbose(\n-                            fn_return.span.shrink_to_hi(),\n-                            &format!(\n-                                \"{declare} `impl Trait` {captures}, {explicit}\",\n-                                declare = declare,\n-                                captures = captures,\n-                                explicit = explicit,\n-                            ),\n-                            plus_lt.clone(),\n+                            param_ty,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n+                } else if opaque\n+                    .bounds\n+                    .iter()\n+                    .filter_map(|arg| match arg {\n+                        GenericBound::Outlives(Lifetime { name, span, .. })\n+                            if name.ident().to_string() == lifetime_name =>\n+                        {\n+                            Some(*span)\n+                        }\n+                        _ => None,\n+                    })\n+                    .next()\n+                    .is_some()\n+                {\n+                } else {\n+                    err.span_suggestion_verbose(\n+                        fn_return.span.shrink_to_hi(),\n+                        &format!(\n+                            \"{declare} `impl Trait` {captures}, {explicit}\",\n+                            declare = declare,\n+                            captures = captures,\n+                            explicit = explicit,\n+                        ),\n+                        plus_lt.clone(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n-                TyKind::TraitObject(_, lt, _) => match lt.name {\n-                    LifetimeName::ImplicitObjectLifetimeDefault => {\n-                        err.span_suggestion_verbose(\n-                            fn_return.span.shrink_to_hi(),\n-                            &format!(\n-                                \"{declare} trait object {captures}, {explicit}\",\n-                                declare = declare,\n-                                captures = captures,\n-                                explicit = explicit,\n-                            ),\n-                            plus_lt.clone(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    name if name.ident().to_string() != lifetime_name => {\n-                        // With this check we avoid suggesting redundant bounds. This\n-                        // would happen if there are nested impl/dyn traits and only\n-                        // one of them has the bound we'd suggest already there, like\n-                        // in `impl Foo<X = dyn Bar> + '_`.\n+            }\n+            TyKind::TraitObject(_, lt, _) => match lt.name {\n+                LifetimeName::ImplicitObjectLifetimeDefault => {\n+                    err.span_suggestion_verbose(\n+                        fn_return.span.shrink_to_hi(),\n+                        &format!(\n+                            \"{declare} trait object {captures}, {explicit}\",\n+                            declare = declare,\n+                            captures = captures,\n+                            explicit = explicit,\n+                        ),\n+                        plus_lt.clone(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                name if name.ident().to_string() != lifetime_name => {\n+                    // With this check we avoid suggesting redundant bounds. This\n+                    // would happen if there are nested impl/dyn traits and only\n+                    // one of them has the bound we'd suggest already there, like\n+                    // in `impl Foo<X = dyn Bar> + '_`.\n+                    if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             lt.span,\n                             &format!(\"{} trait object's {}\", consider, explicit_static),\n                             lifetime_name.clone(),\n                             Applicability::MaybeIncorrect,\n                         );\n+                    }\n+                    if let Some((param_span, param_ty)) = param.clone() {\n                         err.span_suggestion_verbose(\n-                            param.param_ty_span,\n+                            param_span,\n                             add_static_bound,\n-                            param.param_ty.to_string(),\n+                            param_ty,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                    _ => {}\n-                },\n+                }\n                 _ => {}\n-            }\n+            },\n+            _ => {}\n         }\n-        err.emit();\n-        Some(ErrorReported)\n     }\n+}\n \n+impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     fn get_impl_ident_and_self_ty_from_trait(\n         &self,\n         def_id: DefId,"}, {"sha": "f71fb2ee18aa1beb8c80e6012e7fc3be56bb8991", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     const NAME: &'a str = \"unit\";\n    |\n    = note: expected reference `&'static str`\n               found reference `&'a str`\n-note: the lifetime `'a` as defined on the impl at 6:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:6:6\n    |\n LL | impl<'a> Foo for &'a () {"}, {"sha": "536fd43ef75e83fa14fd64cb52aaa7e1639a60df", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -24,12 +24,12 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |\n    = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n               found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n-note: the lifetime `'c` as defined on the method body at 27:24...\n+note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n-note: ...does not necessarily outlive the lifetime `'c` as defined on the method body at 27:24\n+note: ...does not necessarily outlive the lifetime `'c` as defined here\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n@@ -43,12 +43,12 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |\n    = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n               found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n-note: the lifetime `'c` as defined on the method body at 27:24...\n+note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n-note: ...does not necessarily outlive the lifetime `'c` as defined on the method body at 27:24\n+note: ...does not necessarily outlive the lifetime `'c` as defined here\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {"}, {"sha": "5d119bb8557a4d40480a9ede8c127953223e520d", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -84,12 +84,12 @@ error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the\n LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 10:16\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/issue-86053-1.rs:10:16\n    |\n LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n    |                ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 10:21\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/issue-86053-1.rs:10:21\n    |\n LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,"}, {"sha": "815b06e770890ece8dd0c882033ae46eccb9e1fe", "filename": "src/test/ui/c-variadic/issue-86053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL | unsafe extern \"C\" fn ordering4<'a, F: H<&'static &'a ()>>(_: (), ...) {}\n    |                                       ^^^^^^^^^^^^^^^^^^\n    |\n    = note: the pointer is valid for the static lifetime\n-note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 8:32\n+note: but the referenced data is only valid for the lifetime `'a` as defined here\n   --> $DIR/issue-86053-2.rs:8:32\n    |\n LL | unsafe extern \"C\" fn ordering4<'a, F: H<&'static &'a ()>>(_: (), ...) {}"}, {"sha": "b25a7ab3dc6c737f09c6fac36938e4adb2d96615", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the anonymous lifetime #1 defined on the body at 16:48...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 13:36\n+note: ...does not necessarily outlive the lifetime `'x` as defined here\n   --> $DIR/expect-fn-supply-fn.rs:13:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n@@ -25,12 +25,12 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the lifetime `'x` as defined on the function body at 13:36...\n+note: the lifetime `'x` as defined here...\n   --> $DIR/expect-fn-supply-fn.rs:13:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 16:48\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});"}, {"sha": "f584b0c8382d0c8ed7435cd083824d30a58d54dd", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n-note: the anonymous lifetime #1 defined on the body at 14:29...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n@@ -18,7 +18,7 @@ LL | |\n LL | |         f = Some(x);\n LL | |     });\n    | |_____^\n-note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 9:30\n+note: ...does not necessarily outlive the lifetime `'x` as defined here\n   --> $DIR/expect-region-supply-region-2.rs:9:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n@@ -32,12 +32,12 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n-note: the lifetime `'x` as defined on the function body at 9:30...\n+note: the lifetime `'x` as defined here...\n   --> $DIR/expect-region-supply-region-2.rs:9:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 14:29\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {"}, {"sha": "8dbde9d417df095da5466d3e6ce6418329ef1ed8", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -30,7 +30,7 @@ LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } }\n    |\n    = note: expected struct `N<'n>`\n               found struct `N<'static>`\n-note: the lifetime `'n` as defined on the struct at 7:10...\n+note: the lifetime `'n` as defined here...\n   --> $DIR/reject-specialized-drops-8142.rs:7:10\n    |\n LL | struct N<'n> { x: &'n i8 }\n@@ -91,12 +91,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw`\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 16:10...\n+note: first, the lifetime cannot outlive the lifetime `'l1` as defined here...\n   --> $DIR/reject-specialized-drops-8142.rs:16:10\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 16:15...\n+note: ...but the lifetime must also be valid for the lifetime `'l2` as defined here...\n   --> $DIR/reject-specialized-drops-8142.rs:16:15\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }"}, {"sha": "5c1dcb4d4f9b34a8984157b9c73eea45e283b9c8", "filename": "src/test/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL | impl Eq for &dyn DynEq {}\n    |\n    = note: expected trait `<&dyn DynEq as PartialEq>`\n               found trait `<&(dyn DynEq + 'static) as PartialEq>`\n-note: the lifetime `'_` as defined on the impl at 9:13...\n+note: the lifetime `'_` as defined here...\n   --> $DIR/E0308-2.rs:9:13\n    |\n LL | impl Eq for &dyn DynEq {}"}, {"sha": "ec650085a2b9dc044fa9a57de4ce96cce1ef1b60", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     child: Box<dyn Wedding<'kiss> + 'SnowWhite>,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'SnowWhite` as defined on the struct at 3:22\n+note: lifetime parameter instantiated with the lifetime `'SnowWhite` as defined here\n   --> $DIR/E0478.rs:3:22\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {\n    |                      ^^^^^^^^^^\n-note: but lifetime parameter must outlive the lifetime `'kiss` as defined on the struct at 3:15\n+note: but lifetime parameter must outlive the lifetime `'kiss` as defined here\n   --> $DIR/E0478.rs:3:15\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {"}, {"sha": "96e99bd88a497e9abcca3f3f505ea69cb18b8e14", "filename": "src/test/ui/error-codes/E0490.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0490]: a value of type `&'b ()` is borrowed for too long\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n-note: the type is valid for the lifetime `'a` as defined on the function body at 1:6\n+note: the type is valid for the lifetime `'a` as defined here\n   --> $DIR/E0490.rs:1:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n-note: but the borrow lasts for the lifetime `'b` as defined on the function body at 1:10\n+note: but the borrow lasts for the lifetime `'b` as defined here\n   --> $DIR/E0490.rs:1:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n@@ -21,7 +21,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 1:10...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n   --> $DIR/E0490.rs:1:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n@@ -31,7 +31,7 @@ note: ...so that the type `&'b ()` is not borrowed for too long\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/E0490.rs:1:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n@@ -48,7 +48,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 1:10...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n   --> $DIR/E0490.rs:1:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n@@ -60,7 +60,7 @@ LL |     let x: &'a _ = &y;\n    |                    ^^\n    = note: expected `&'a &()`\n               found `&'a &'b ()`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/E0490.rs:1:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {"}, {"sha": "d5ffa8f1b2fb105bc0a15f8fc39eb74362209ce5", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |            Foo<'b,'a>\n    |\n    = note: expected struct `Foo<'a, 'b>`\n               found struct `Foo<'b, 'a>`\n-note: the lifetime `'b` as defined on the impl at 6:9...\n+note: the lifetime `'b` as defined here...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n    |         ^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 6:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n@@ -25,12 +25,12 @@ LL |            Foo<'b,'a>\n    |\n    = note: expected struct `Foo<'a, 'b>`\n               found struct `Foo<'b, 'a>`\n-note: the lifetime `'a` as defined on the impl at 6:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 6:9\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n LL | impl<'a,'b> Foo<'a,'b> {"}, {"sha": "5e60e33584e104955e0444431becd0569ead7def", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     test(gen);\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n-note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined on the body at 11:15\n+note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined here\n   --> $DIR/resume-arg-late-bound.rs:11:15\n    |\n LL |       let gen = |arg: &mut bool| {\n@@ -29,7 +29,7 @@ LL |     test(gen);\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n-note: the anonymous lifetime #1 defined on the body at 11:15 doesn't meet the lifetime requirements\n+note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/resume-arg-late-bound.rs:11:15\n    |\n LL |       let gen = |arg: &mut bool| {"}, {"sha": "649eadec515d0c3df7aa01b2285e0972b2ce55d6", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -22,12 +22,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 17:12\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/impl_bounds.rs:17:12\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 17:16\n+note: but lifetime parameter must outlive the lifetime `'b` as defined here\n   --> $DIR/impl_bounds.rs:17:16\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());"}, {"sha": "24be83024b4585f18045722bf91555ff353b9ae1", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -9,7 +9,7 @@ note: because this has an unmet lifetime requirement\n    |\n LL |     type T<'a>: A;\n    |                 ^ introduces a `'static` lifetime requirement\n-note: the lifetime `'a` as defined on the associated item at 17:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:17:12\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n@@ -36,7 +36,7 @@ note: because this has an unmet lifetime requirement\n    |\n LL |     type T<'a>: C;\n    |                 ^ introduces a `'static` lifetime requirement\n-note: the lifetime `'a` as defined on the associated item at 27:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:12\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n@@ -58,7 +58,7 @@ note: because this has an unmet lifetime requirement\n    |\n LL |     type T<'a>: E;\n    |                 ^ introduces a `'static` lifetime requirement\n-note: the lifetime `'a` as defined on the associated item at 37:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:12\n    |\n LL |     type T<'a> = (Box<dyn A + 'a>, Box<dyn A + 'a>);"}, {"sha": "4f0a023ee39c3f25495dfe9cd626cf530f0748c2", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -12,7 +12,7 @@ error[E0478]: lifetime bound not satisfied\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 12:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/unsatified-item-lifetime-bound.rs:12:10\n    |\n LL | struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n@@ -25,7 +25,7 @@ error[E0478]: lifetime bound not satisfied\n LL |     f: <T as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 17:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/unsatified-item-lifetime-bound.rs:17:10\n    |\n LL | struct C<'a, T: X> {\n@@ -38,7 +38,7 @@ error[E0478]: lifetime bound not satisfied\n LL |     f: <() as X>::Y<'a>,\n    |        ^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 22:10\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/unsatified-item-lifetime-bound.rs:22:10\n    |\n LL | struct D<'a> {"}, {"sha": "ebb4789345733bce1b5206310869d6e3bc45fb95", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'a` as defined on the associated item at 8:15 as required by this binding\n+note: type must outlive the lifetime `'a` as defined here as required by this binding\n   --> $DIR/unsatisfied-outlives-bound.rs:8:15\n    |\n LL |     type Item<'a> = &'b ();"}, {"sha": "9f200357222abc85426e9f4829e39e4f5c9fe269", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -10,7 +10,7 @@ LL | | fn(Inv<'y>)) }\n    |\n    = note: expected enum `Option<fn(Inv<'y>)>`\n               found enum `Option<fn(Inv<'x>)>`\n-note: the lifetime `'x` as defined on the function body at 38:20...\n+note: the lifetime `'x` as defined here...\n   --> $DIR/hr-subtype.rs:38:20\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n@@ -19,7 +19,7 @@ LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 38:24\n+note: ...does not necessarily outlive the lifetime `'y` as defined here\n   --> $DIR/hr-subtype.rs:38:24\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n@@ -42,7 +42,7 @@ LL | | fn(Inv<'y>)) }\n    |\n    = note: expected enum `Option<fn(Inv<'x>)>`\n               found enum `Option<fn(Inv<'y>)>`\n-note: the lifetime `'x` as defined on the function body at 44:22...\n+note: the lifetime `'x` as defined here...\n   --> $DIR/hr-subtype.rs:44:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n@@ -51,7 +51,7 @@ LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 44:26\n+note: ...does not necessarily outlive the lifetime `'y` as defined here\n   --> $DIR/hr-subtype.rs:44:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {"}, {"sha": "07add3d91a018fa375a7da78b0437bd3a44b402f", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -10,7 +10,7 @@ LL | | fn(&'y u32)) }\n    |\n    = note: expected enum `Option<fn(&'x u32)>`\n               found enum `Option<fn(&'y u32)>`\n-note: the lifetime `'x` as defined on the function body at 44:22...\n+note: the lifetime `'x` as defined here...\n   --> $DIR/hr-subtype.rs:44:22\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n@@ -19,7 +19,7 @@ LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 44:26\n+note: ...does not necessarily outlive the lifetime `'y` as defined here\n   --> $DIR/hr-subtype.rs:44:26\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {"}, {"sha": "60d3409a8accf14989cdca1a5cfe5971c2eac7b9", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -2,25 +2,27 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/hidden-lifetimes.rs:28:54\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n-   |                                                      ^^^^^^^^^^^^^^\n+   |                 --                                   ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `&'a mut &'b T` captures the lifetime `'b` as defined on the function body at 28:17\n-  --> $DIR/hidden-lifetimes.rs:28:17\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n-   |                 ^^\n+LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n+   |                                                                     ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/hidden-lifetimes.rs:45:70\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n-   |                                                                      ^^^^^^^^^^^^^^\n+   |                        --                                            ^^^^^^^^^^^^^^\n+   |                        |\n+   |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined on the function body at 45:24\n-  --> $DIR/hidden-lifetimes.rs:45:24\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n-   |                        ^^\n+LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n+   |                                                                                     ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72e9d96da3677fdd96650f93dacd0f477ec5b358", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags:-Zborrowck=mir\n-\n-#![feature(member_constraints)]\n #![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]"}, {"sha": "40bec0da2707d589d419fa88b82f9cb64b575084", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,14 +1,10 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:13:60\n+  --> $DIR/error-handling-2.rs:10:60\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |                                                            ^^^^^^^^^\n-   |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 13:8\n-  --> $DIR/error-handling-2.rs:13:8\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        ^^\n+   |        --                                                  ^^^^^^^^^\n+   |        |\n+   |        hidden type `*mut &'a i32` captures the lifetime `'a` as defined here\n \n error: aborting due to previous error\n "}, {"sha": "367e7f4e6eafbb003e43fd8e18a94530f45f22d1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags:-Zborrowck=mir\n-\n #![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]"}, {"sha": "01d9f506a0c58edf730a1d4032e0c78f6c1a2cca", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:22:16\n+  --> $DIR/error-handling.rs:20:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "bfe656c7e2b491ae5f380e880b95f2562d532a95", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -2,13 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                                                                          ^^^^^^^^^^^^^^^^^^\n+   |                     --                                                   ^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `Ordinary<'b>` captures the lifetime `'b` as defined on the function body at 16:21\n-  --> $DIR/ordinary-bounds-unrelated.rs:16:21\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                     ^^\n+LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n+   |                                                                                             ++++\n \n error: aborting due to previous error\n "}, {"sha": "75c2dd8e9d39edea0a964b8582c13032e588b45b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -2,13 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                                                              ^^^^^^^^^^^^^^^^^^\n+   |                     --                                       ^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-note: hidden type `Ordinary<'b>` captures the lifetime `'b` as defined on the function body at 18:21\n-  --> $DIR/ordinary-bounds-unsuited.rs:18:21\n+help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n    |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                     ^^\n+LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n+   |                                                                                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "9dc2ea5bc82a1cc0b8ffec2db20e2da58c8bd138", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -3,12 +3,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n+LL |\n+LL | where 'x: 'y\n+   |       -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n    |\n-note: hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined on the function body at 17:7\n-  --> $DIR/region-escape-via-bound.rs:17:7\n+help: to declare that the `impl Trait` captures 'x, you can add an explicit `'x` lifetime bound\n    |\n-LL | where 'x: 'y\n-   |       ^^\n+LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n+   |                                            ++++\n \n error: aborting due to previous error\n "}, {"sha": "a80b0ba5e91513271bc5b5e1d29cb7971a883398", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,15 +4,15 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x\n    |         ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 2:69...\n+note: ...the reference is valid for the anonymous lifetime #1 defined here...\n   --> $DIR/issue-10291.rs:2:69\n    |\n LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n    |  _____________________________________________________________________^\n LL | |         x\n LL | |     }));\n    | |_____^\n-note: ...but the borrowed content is only valid for the lifetime `'x` as defined on the function body at 1:9\n+note: ...but the borrowed content is only valid for the lifetime `'x` as defined here\n   --> $DIR/issue-10291.rs:1:9\n    |\n LL | fn test<'x>(x: &'x isize) {"}, {"sha": "d4e18df8de324c7f7bf4e5f1fe87619fcb3b6d02", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.a();\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 3:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-16683.rs:3:10\n    |\n LL |     fn b(&self) {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         self.a();\n    |         ^^^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the trait at 1:9...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/issue-16683.rs:1:9\n    |\n LL | trait T<'a> {"}, {"sha": "d177380415591357f3f42735e33f42a061d4aa97", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected struct `Foo<'a>`\n               found struct `Foo<'_>`\n-note: the anonymous lifetime defined on the method body at 6:23...\n+note: the anonymous lifetime defined here...\n   --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n    |                       ^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/issue-17740.rs:5:7\n    |\n LL | impl <'a> Foo<'a>{\n@@ -25,12 +25,12 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected struct `Foo<'a>`\n               found struct `Foo<'_>`\n-note: the lifetime `'a` as defined on the impl at 5:7...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-17740.rs:5:7\n    |\n LL | impl <'a> Foo<'a>{\n    |       ^^\n-note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 6:23\n+note: ...does not necessarily outlive the anonymous lifetime defined here\n   --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {"}, {"sha": "711217033a1f7826f46f7130c78303e5b8713784", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.foo();\n    |              ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 6:12...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-17758.rs:6:12\n    |\n LL |     fn bar(&self) {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         self.foo();\n    |         ^^^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the trait at 4:11...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/issue-17758.rs:4:11\n    |\n LL | trait Foo<'a> {"}, {"sha": "c68265f71f2594e3f94e18c3acba17d9afcbbe69", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the anonymous lifetime defined on the method body at 8:24...\n+note: the anonymous lifetime defined here...\n   --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                        ^^^^\n-note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n+note: ...does not necessarily outlive the lifetime `'_` as defined here\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,\n@@ -25,12 +25,12 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the lifetime `'_` as defined on the impl at 5:5...\n+note: the lifetime `'_` as defined here...\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,\n    |     ^\n-note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 8:24\n+note: ...does not necessarily outlive the anonymous lifetime defined here\n   --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {"}, {"sha": "57f9575bdbd2937b1faa72f4b3e559c0cbb429dc", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |        ^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 28:58...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-20831-debruijn.rs:28:58\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined here...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {"}, {"sha": "a0126b68fdcd622bf2e0663eb63c34943a0bb265", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the anonymous lifetime defined on the method body at 5:15...\n+note: the anonymous lifetime defined here...\n   --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n    |               ^^^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the trait at 3:18\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/issue-27942.rs:3:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n@@ -25,12 +25,12 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the lifetime `'a` as defined on the trait at 3:18...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-27942.rs:3:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n-note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 5:15\n+note: ...does not necessarily outlive the anonymous lifetime defined here\n   --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;"}, {"sha": "cd84b6ef48471418c1126169e05944118a148479", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -11,12 +11,12 @@ LL | |     }\n    |\n    = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n               found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n-note: the anonymous lifetime #1 defined on the method body at 6:5...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |\n LL |     fn next(&'a mut self) -> Option<Self::Item>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 3:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/issue-37884.rs:3:6\n    |\n LL | impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {"}, {"sha": "aef5e258a1b0693d369534c1643871090d774fb7", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     match (&t,) {\n    |           ^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 1:23...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/issue-52213.rs:1:23\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n@@ -16,7 +16,7 @@ LL |     match (&t,) {\n    |           ^^^^^\n    = note: expected `(&&(T,),)`\n               found `(&&'a (T,),)`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/issue-52213.rs:1:27\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {"}, {"sha": "475c7d0b48bfb8c3b1b6b4b58aa1dd4c34513281", "filename": "src/test/ui/issues/issue-52533-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     gimme(|x, y| y)\n    |\n    = note: expected reference `&Foo<'_, '_, u32>`\n               found reference `&Foo<'_, '_, u32>`\n-note: the anonymous lifetime #3 defined on the body at 9:11...\n+note: the anonymous lifetime #3 defined here...\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)\n    |           ^^^^^^^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 9:11\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined here\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)"}, {"sha": "ccedbcfec7a285b85199d94b41555b8ac8ba6fd2", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |     foo(|a, b| b)\n    |                ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 5:9...\n+note: ...the reference is valid for the anonymous lifetime #1 defined here...\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)\n    |         ^^^^^^^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the body at 5:9\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined here\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)"}, {"sha": "304339657f0a96a5b4da1acec6a52973d182af8a", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {\n@@ -29,7 +29,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {"}, {"sha": "bfeb38d6471e420bc65ac31f3998b35e247397fc", "filename": "src/test/ui/issues/issue-65230.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL | impl T1 for &dyn T2 {}\n    |\n    = note: expected trait `<&dyn T2 as T0>`\n               found trait `<&(dyn T2 + 'static) as T0>`\n-note: the lifetime `'_` as defined on the impl at 8:13...\n+note: the lifetime `'_` as defined here...\n   --> $DIR/issue-65230.rs:8:13\n    |\n LL | impl T1 for &dyn T2 {}"}, {"sha": "bf271ab78f7ee1c40b48f49d402440711acd6436", "filename": "src/test/ui/issues/issue-75777.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     Box::new(move |_| fut)\n    |              ^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 11:11...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/issue-75777.rs:11:11\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {"}, {"sha": "2aca8faff9f2c51bf00128d7323b7d499f0e2ab1", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -25,7 +25,7 @@ LL |     take_foo(|a: &i32| a);\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n-note: the anonymous lifetime #1 defined on the body at 9:14 doesn't meet the lifetime requirements\n+note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:9:14\n    |\n LL |     take_foo(|a: &i32| a);\n@@ -44,7 +44,7 @@ LL |     take_foo(|a: &i32| -> &i32 { a });\n    |\n    = note: expected reference `&i32`\n               found reference `&i32`\n-note: the anonymous lifetime #1 defined on the body at 10:14 doesn't meet the lifetime requirements\n+note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:10:14\n    |\n LL |     take_foo(|a: &i32| -> &i32 { a });"}, {"sha": "bb691fc072b5afa0934dc2824482ab5ec5a8077c", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     ref_obj(x)\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n-note: the lifetime `'a` as defined on the function body at 32:10...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n@@ -21,7 +21,7 @@ LL |     lib::ref_obj(x)\n    |\n    = note: expected reference `&Box<(dyn Fn() + 'static)>`\n               found reference `&Box<(dyn Fn() + 'a)>`\n-note: the lifetime `'a` as defined on the function body at 37:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {"}, {"sha": "a12c48582c79e88e9542f7d5766c9249e05719c7", "filename": "src/test/ui/lub-if.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flub-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flub-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 23:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/lub-if.rs:23:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n@@ -18,7 +18,7 @@ LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 32:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/lub-if.rs:32:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {"}, {"sha": "04d50f5ebf471af17cad8cc3671aa0ccf29e6acc", "filename": "src/test/ui/lub-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flub-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Flub-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 25:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/lub-match.rs:25:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n@@ -18,7 +18,7 @@ LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 35:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/lub-match.rs:35:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {"}, {"sha": "f9271cb3d068ce16498bd43c7bbb1f3c4a4ff96b", "filename": "src/test/ui/match/match-ref-mut-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |         match self.0 { ref mut x => x }\n    |\n    = note: expected mutable reference `&'a mut &'a i32`\n               found mutable reference `&'a mut &'b i32`\n-note: the lifetime `'a` as defined on the method body at 9:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/match-ref-mut-invariance.rs:9:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 8:6\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/match-ref-mut-invariance.rs:8:6\n    |\n LL | impl<'b> S<'b> {"}, {"sha": "c021a5a91f5c0c885acee992f6a080d22108024f", "filename": "src/test/ui/match/match-ref-mut-let-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |         x\n    |\n    = note: expected mutable reference `&'a mut &'a i32`\n               found mutable reference `&'a mut &'b i32`\n-note: the lifetime `'a` as defined on the method body at 9:12...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/match-ref-mut-let-invariance.rs:9:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 8:6\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/match-ref-mut-let-invariance.rs:8:6\n    |\n LL | impl<'b> S<'b> {"}, {"sha": "0ec282dac45e21a45579eb3f02f5c3c4a46d77cb", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -30,7 +30,7 @@ LL |     baz(f);\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n-note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n+note: the required lifetime does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/closure-arg-type-mismatch.rs:9:10\n    |\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n@@ -58,7 +58,7 @@ LL |     baz(f);\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n-note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n+note: the lifetime `'a` as defined here doesn't meet the lifetime requirements\n   --> $DIR/closure-arg-type-mismatch.rs:9:10\n    |\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {"}, {"sha": "be68d252f32f07cef86555a7dfae7a6c36d9752c", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = *s;\n    |\n    = note: expected type `<<&'a T as A>::X as Sized>`\n               found type `<<&'static T as A>::X as Sized>`\n-note: the lifetime `'a` as defined on the function body at 9:8...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/issue-50716.rs:9:8\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)"}, {"sha": "3f8481219a9adce9b2a447da9606463695625a19", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         self.y = b.z\n    |                  ^^^\n    |\n-note: ...the reference is valid for the lifetime `'_` as defined on the impl at 12:10...\n+note: ...the reference is valid for the lifetime `'_` as defined here...\n   --> $DIR/issue-52742.rs:12:10\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime defined on the method body at 13:31\n+note: ...but the borrowed content is only valid for the anonymous lifetime defined here\n   --> $DIR/issue-52742.rs:13:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {"}, {"sha": "197f8dfa2abe772a17c6f1f95665c9c404b10fde", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` d\n LL |         Foo { bar }\n    |         ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 8:17...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/issue-55394.rs:8:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         Foo { bar }\n    |               ^^^\n-note: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 7:10...\n+note: but, the lifetime must be valid for the lifetime `'_` as defined here...\n   --> $DIR/issue-55394.rs:7:10\n    |\n LL | impl Foo<'_> {"}, {"sha": "55c51d532e77981b172f07c98b3cbf04aa1ef296", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |     *y\n    |     ^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 1:47\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/issue-55401.rs:1:47\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {"}, {"sha": "6da3d5d96925df2666995ce535955690634d232a", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` d\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |    ^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'d` as defined on the function body at 12:14...\n+note: first, the lifetime cannot outlive the lifetime `'d` as defined here...\n   --> $DIR/normalization-bounds-error.rs:12:14\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |              ^^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the function body at 12:18...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined here...\n   --> $DIR/normalization-bounds-error.rs:12:18\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}"}, {"sha": "000ebc716572a9fa039b336fb8b828ccdfc5a025", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     const AC: Option<&'c str> = None;\n    |\n    = note: expected enum `Option<&'b str>`\n               found enum `Option<&'c str>`\n-note: the lifetime `'c` as defined on the impl at 20:18...\n+note: the lifetime `'c` as defined here...\n   --> $DIR/trait-associated-constant.rs:20:18\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct {\n    |                  ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 20:14\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/trait-associated-constant.rs:20:14\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct {"}, {"sha": "71f5f8fb1766853e165837d9996bebdf85cfb333", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |         C { f: b }\n    |         ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 16:24...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/type-alias-free-regions.rs:16:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n@@ -16,7 +16,7 @@ LL |         C { f: b }\n    |                ^\n    = note: expected `Box<Box<&isize>>`\n               found `Box<Box<&isize>>`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n@@ -35,7 +35,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 26:23...\n+note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n   --> $DIR/type-alias-free-regions.rs:26:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n@@ -47,7 +47,7 @@ LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n    = note: expected `Box<&isize>`\n               found `Box<&isize>`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {"}, {"sha": "d33c4584214064c46e8afb226bda3461b4daa10c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 17:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/constant-in-expr-normalize.rs:17:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "3ec3a2af8cab3445b62b0ca15bba8d3658d2112c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 9:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "b36bc3bdd9cdb38cb491432183d4ff27c9d7d42e", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 9:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {"}, {"sha": "806492b71f4495ce098cc9f0cbad093474d9c5bb", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     T::C\n    |     ^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {"}, {"sha": "5af4c5bdfaed37cdcc3c3ba67bde056dae9a091e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for automatic coercion due to\n LL |     ss\n    |     ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 54:10...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/object-lifetime-default-elision.rs:54:10\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     ss\n    |     ^^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 54:13...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/object-lifetime-default-elision.rs:54:13\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -33,7 +33,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     ss\n    |     ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 54:10...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/object-lifetime-default-elision.rs:54:10\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -43,7 +43,7 @@ note: ...so that the declared lifetime parameter bounds are satisfied\n    |\n LL |     ss\n    |     ^^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 54:13...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/object-lifetime-default-elision.rs:54:13\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {"}, {"sha": "e7fab9ecefcd1322953d96b37cb426a36c10e6e2", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     ss.t = t;\n    |\n    = note: expected reference `&'a Box<(dyn Test + 'static)>`\n               found reference `&'a Box<(dyn Test + 'a)>`\n-note: the lifetime `'a` as defined on the function body at 14:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/object-lifetime-default-from-rptr-box-error.rs:14:6\n    |\n LL | fn c<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {"}, {"sha": "07c321ed8c3449a317b50f601b57e9de11e47add", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     ss.t = t;\n    |\n    = note: expected reference `&'a MyBox<(dyn Test + 'static)>`\n               found reference `&'a MyBox<(dyn Test + 'a)>`\n-note: the lifetime `'a` as defined on the function body at 20:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:6\n    |\n LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {"}, {"sha": "4c5fb452ebe4212582a251b36f43dc83892f14a3", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -18,7 +18,7 @@ LL |     load0(ss)\n    |\n    = note: expected reference `&MyBox<(dyn SomeTrait + 'static)>`\n               found reference `&MyBox<(dyn SomeTrait + 'a)>`\n-note: the lifetime `'a` as defined on the function body at 30:10...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/object-lifetime-default-mybox.rs:30:10\n    |\n LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {"}, {"sha": "afa0c9c76b2c511f9def207f3608cd94b527fe54", "filename": "src/test/ui/regions/issue-28848.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-28848.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     Foo::<'a, 'b>::xmute(u)\n    |     ^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the function body at 9:16\n+note: lifetime parameter instantiated with the lifetime `'b` as defined here\n   --> $DIR/issue-28848.rs:9:16\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the function body at 9:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-28848.rs:9:12\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {"}, {"sha": "dcb67e6a654921f631529b72363abd0eddbefb5e", "filename": "src/test/ui/regions/issue-78262.default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.default.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let f = |x: &dyn TT| x.func();\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 14:13...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/issue-78262.rs:14:13\n    |\n LL |     let f = |x: &dyn TT| x.func();"}, {"sha": "2ec2ca49b11426f961472c34f632a6290a967f06", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -10,12 +10,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     z: Box<dyn Is<'a>+'b+'c>,\n    |        ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 11:15\n+note: lifetime parameter instantiated with the lifetime `'b` as defined here\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:15\n    |\n LL | struct Foo<'a,'b,'c> {\n    |               ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the struct at 11:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined here\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:12\n    |\n LL | struct Foo<'a,'b,'c> {"}, {"sha": "34287070eec773066faf9a25f5bf96b4641e55a7", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -13,7 +13,7 @@ LL | |     };\n    |\n    = note: expected struct `Invariant<'a>`\n               found struct `Invariant<'static>`\n-note: the lifetime `'a` as defined on the function body at 13:10...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/region-invariant-static-error-reporting.rs:13:10\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {"}, {"sha": "380e27ab0e01134c51c99d290930940b244e2734", "filename": "src/test/ui/regions/region-object-lifetime-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:42...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/region-object-lifetime-2.rs:9:42\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x.borrowed()\n    |     ^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 9:45...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/region-object-lifetime-2.rs:9:45\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {"}, {"sha": "b59163ef13b3110d3528002070d153605dbd4ba5", "filename": "src/test/ui/regions/region-object-lifetime-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 11:41...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/region-object-lifetime-4.rs:11:41\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x.borrowed()\n    |     ^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 11:44...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/region-object-lifetime-4.rs:11:44\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {"}, {"sha": "04d22e58a1dc5c308c8d7425d81c3112eec4f713", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -52,7 +52,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     Box::new(v)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/region-object-lifetime-in-coercion.rs:22:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n@@ -64,7 +64,7 @@ LL |     Box::new(v)\n    |              ^\n    = note: expected `&[u8]`\n               found `&'a [u8]`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 22:9...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/region-object-lifetime-in-coercion.rs:22:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {"}, {"sha": "f638064ef83781d69f227bc9e66f41a976a73524", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 7:18...\n+note: first, the lifetime cannot outlive the lifetime `'_` as defined here...\n   --> $DIR/regions-addr-of-upvar-self.rs:7:18\n    |\n LL |         let _f = || {"}, {"sha": "6ae70ec672ce1210b4371b7e3fd9f7e92cdd2c56", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 33:15\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 33:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:18\n    |\n LL | fn with_assoc<'a,'b>() {"}, {"sha": "f4153b2a8166d52eb9504f7031a421126415a46e", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -16,7 +16,7 @@ error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'b` as defined on the impl at 19:10 as required by this binding\n+note: type must outlive the lifetime `'b` as defined here as required by this binding\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:10\n    |\n LL | impl<'a, 'b> Foo<'b> for &'a i64 {"}, {"sha": "90227e574ad47051b5de264c130bd0063b6a02ca", "filename": "src/test/ui/regions/regions-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     return e;\n    |\n    = note: expected struct `TupleStruct<'b>`\n               found struct `TupleStruct<'a>`\n-note: the lifetime `'a` as defined on the function body at 8:10...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/regions-bounds.rs:8:10\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/regions-bounds.rs:8:13\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n@@ -25,12 +25,12 @@ LL |     return e;\n    |\n    = note: expected struct `Struct<'b>`\n               found struct `Struct<'a>`\n-note: the lifetime `'a` as defined on the function body at 12:10...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/regions-bounds.rs:12:10\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 12:13\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/regions-bounds.rs:12:13\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {"}, {"sha": "aa22fd96deb649c83d99d2043da5411fc8a5b9ec", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 18:20...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:20\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n@@ -14,7 +14,7 @@ note: ...so that the declared lifetime parameter bounds are satisfied\n    |\n LL |     Box::new(v) as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: but, the lifetime must be valid for the lifetime `'c` as defined on the function body at 18:26...\n+note: but, the lifetime must be valid for the lifetime `'c` as defined here...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:26\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {"}, {"sha": "8b1b90f5b1a84d1e95235935c989896b4832a4f7", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 6:16...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-creating-enums4.rs:6:16\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n@@ -16,7 +16,7 @@ LL |     Ast::Add(x, y)\n    |              ^\n    = note: expected `&Ast<'_>`\n               found `&Ast<'a>`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {"}, {"sha": "99a5f0ce4cd80d0c8e45cfc0c9d0803382e9bd85", "filename": "src/test/ui/regions/regions-early-bound-error-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         g2.get()\n    |         ^^^^^^^^\n    |\n-note: ...the reference is valid for the lifetime `'a` as defined on the impl at 18:6...\n+note: ...the reference is valid for the lifetime `'a` as defined here...\n   --> $DIR/regions-early-bound-error-method.rs:18:6\n    |\n LL | impl<'a> Box<'a> {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the method body at 19:11\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-early-bound-error-method.rs:19:11\n    |\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {"}, {"sha": "df9e979eacf0fdd61d2aab3b6607661bcb3f59fe", "filename": "src/test/ui/regions/regions-early-bound-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |     g1.get()\n    |     ^^^^^^^^\n    |\n-note: ...the reference is valid for the lifetime `'b` as defined on the function body at 18:11...\n+note: ...the reference is valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-early-bound-error.rs:18:11\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |           ^^\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 18:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/regions-early-bound-error.rs:18:8\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {"}, {"sha": "1df7ca0e3e900fa836a2538b3a35aaebf4b607ca", "filename": "src/test/ui/regions/regions-free-region-ordering-callee-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n    |                                                                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 5:14\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:14\n    |\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n    |              ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 5:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:18\n    |\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {"}, {"sha": "c0f3b24f68cfec2f6d55fa7223896f13b7b500cc", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'b &'a usize`, reference has a longer lifetime than the\n LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'b` as defined on the function body at 10:14\n+note: the pointer is valid for the lifetime `'b` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:10:14\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |              ^^\n-note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 10:10\n+note: but the referenced data is only valid for the lifetime `'a` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:10:10\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n@@ -21,12 +21,12 @@ error[E0491]: in type `&'b Paramd<'a>`, reference has a longer lifetime than the\n LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'b` as defined on the function body at 15:14\n+note: the pointer is valid for the lifetime `'b` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:15:14\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |              ^^\n-note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 15:10\n+note: but the referenced data is only valid for the lifetime `'a` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:15:10\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n@@ -38,12 +38,12 @@ error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the\n LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 21:10\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:21:10\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 21:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-free-region-ordering-caller.rs:21:14\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {"}, {"sha": "b0a8f4af3973d8be6a0820cfa54713bc11102924", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the method body at 14:12...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-free-region-ordering-incorrect.rs:14:12\n    |\n LL |     fn get<'a>(&'a self) -> &'b T {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 13:6...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-free-region-ordering-incorrect.rs:13:6\n    |\n LL | impl<'b, T> Node<'b, T> {"}, {"sha": "afd522aa0031647dc0476f5d7c90fa2de7daec85", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n-note: the lifetime `'r` as defined on the function body at 11:23...\n+note: the lifetime `'r` as defined here...\n   --> $DIR/regions-infer-invariance-due-to-decl.rs:11:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "bb594f3676e37318757a1263d0b91809c4875900", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n-note: the lifetime `'r` as defined on the function body at 9:23...\n+note: the lifetime `'r` as defined here...\n   --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:9:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "04d11b5b7c71c484db4f0e74530f4c12b9a996a0", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'r>`\n-note: the lifetime `'r` as defined on the function body at 9:23...\n+note: the lifetime `'r` as defined here...\n   --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:9:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "a23bdeb834fad29c81b828bddf509e6890893a00", "filename": "src/test/ui/regions/regions-infer-not-param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |\n    = note: expected struct `Direct<'b>`\n               found struct `Direct<'a>`\n-note: the lifetime `'a` as defined on the function body at 15:16...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/regions-infer-not-param.rs:15:16\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 15:19\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/regions-infer-not-param.rs:15:19\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n@@ -25,12 +25,12 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |\n    = note: expected struct `Indirect2<'b>`\n               found struct `Indirect2<'a>`\n-note: the lifetime `'a` as defined on the function body at 19:19...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/regions-infer-not-param.rs:19:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 19:22\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/regions-infer-not-param.rs:19:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n@@ -44,12 +44,12 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |\n    = note: expected struct `Indirect2<'b>`\n               found struct `Indirect2<'a>`\n-note: the lifetime `'b` as defined on the function body at 19:22...\n+note: the lifetime `'b` as defined here...\n   --> $DIR/regions-infer-not-param.rs:19:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                      ^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the function body at 19:19\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/regions-infer-not-param.rs:19:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }"}, {"sha": "d2b369fb07b9cd8c638ba531f21ae67c39931525", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |         self.f = b;\n    |\n    = note: expected struct `Box<Box<&'a isize>>`\n               found struct `Box<Box<&isize>>`\n-note: the anonymous lifetime defined on the method body at 21:36...\n+note: the anonymous lifetime defined here...\n   --> $DIR/regions-infer-paramd-indirect.rs:21:36\n    |\n LL |     fn set_f_bad(&mut self, b: Box<B>) {\n    |                                    ^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |\n LL | impl<'a> SetF<'a> for C<'a> {"}, {"sha": "11affcaaa79ca8d5aca05ad74ac1541d93c78667", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     let mut ay = &y;\n    |                  ^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 7:58...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n   --> $DIR/regions-nested-fns.rs:7:58\n    |\n LL |       ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n@@ -19,7 +19,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         ay = z;\n    |              ^\n-note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the body at 13:72...\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined here...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n@@ -48,7 +48,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         if false { return x; }\n    |                           ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 13:72...\n+note: ...the reference is valid for the anonymous lifetime #1 defined here...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n@@ -58,7 +58,7 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-note: ...but the borrowed content is only valid for the lifetime `'x` as defined on the function body at 3:11\n+note: ...but the borrowed content is only valid for the lifetime `'x` as defined here\n   --> $DIR/regions-nested-fns.rs:3:11\n    |\n LL | fn nested<'x>(x: &'x isize) {"}, {"sha": "2bb58b5ec2df5669130e65cefcde64eef27db289", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -8,12 +8,12 @@ LL | | where\n LL | |     <() as Project<'a, 'b>>::Item: Eq,\n    | |______________________________________^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 24:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:8\n    |\n LL | fn bar<'a, 'b>()\n    |        ^^\n-note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 24:12...\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:12\n    |\n LL | fn bar<'a, 'b>()\n@@ -36,12 +36,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL | fn bar<'a, 'b>()\n    |    ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 24:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:8\n    |\n LL | fn bar<'a, 'b>()\n    |        ^^\n-note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 24:12...\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:12\n    |\n LL | fn bar<'a, 'b>()"}, {"sha": "60c115b3f5939e2c5b61f37586457d7953973f3b", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lif\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 27:15\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 27:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n@@ -21,12 +21,12 @@ error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 46:19\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:46:19\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 46:22\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:46:22\n    |\n LL | fn with_assoc_sub<'a,'b>() {"}, {"sha": "8430b69f998326f36e2b9177f7aa5539329a2f98", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 27:15\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container-wc.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 27:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container-wc.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {"}, {"sha": "8c2b2c1e24ae1de0bf12bc5d0de32d954a544e08", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 28:15\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:28:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 28:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:28:18\n    |\n LL | fn with_assoc<'a,'b>() {\n@@ -21,12 +21,12 @@ error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer li\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 50:18\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:50:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 50:21\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:50:21\n    |\n LL | fn without_assoc<'a,'b>() {\n@@ -38,12 +38,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 58:20\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:58:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 58:23\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:58:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n@@ -55,12 +55,12 @@ error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer li\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the function body at 67:23\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:67:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 67:26\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-projection-container.rs:67:26\n    |\n LL | fn call_without_assoc<'a,'b>() {"}, {"sha": "86df7bfeb7062cab700e396cb98eee329f3181f0", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 10:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n   --> $DIR/regions-ret-borrowed-1.rs:10:10\n    |\n LL |     with(|o| o)\n@@ -16,7 +16,7 @@ LL |     with(|o| o)\n    |              ^\n    = note: expected `&isize`\n               found `&isize`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |\n LL | fn return_it<'a>() -> &'a isize {"}, {"sha": "b9a06d974334c419772b2404ab1cf6c3e0239820", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 13:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined here...\n   --> $DIR/regions-ret-borrowed.rs:13:10\n    |\n LL |     with(|o| o)\n@@ -16,7 +16,7 @@ LL |     with(|o| o)\n    |              ^\n    = note: expected `&isize`\n               found `&isize`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |\n LL | fn return_it<'a>() -> &'a isize {"}, {"sha": "8f11e148220d6b9d1801cb195a4d32efc9653d58", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -5,7 +5,7 @@ LL |     t\n    |     ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 8:24\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n   --> $DIR/regions-static-bound.rs:8:24\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {"}, {"sha": "d45ca94ad27fae575d1728612d6498522038f055", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     x\n    |     ^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the function body at 13:9\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/regions-trait-object-subtyping.rs:13:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined on the function body at 13:12\n+note: but lifetime parameter must outlive the lifetime `'b` as defined here\n   --> $DIR/regions-trait-object-subtyping.rs:13:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -21,7 +21,7 @@ error[E0495]: cannot infer an appropriate lifetime for automatic coercion due to\n LL |     x\n    |     ^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 13:9...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/regions-trait-object-subtyping.rs:13:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -31,7 +31,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x\n    |     ^\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 13:12...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n   --> $DIR/regions-trait-object-subtyping.rs:13:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -52,12 +52,12 @@ LL |     x\n    |\n    = note: expected struct `Wrapper<&'b mut (dyn Dummy + 'b)>`\n               found struct `Wrapper<&'a mut (dyn Dummy + 'a)>`\n-note: the lifetime `'b` as defined on the function body at 20:15...\n+note: the lifetime `'b` as defined here...\n   --> $DIR/regions-trait-object-subtyping.rs:20:15\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n    |               ^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the function body at 20:9\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/regions-trait-object-subtyping.rs:20:9\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {"}, {"sha": "7801517595d330f480eabccf976c8e5fe2245869", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Invariant<'static> = c;\n    |\n    = note: expected struct `Invariant<'static>`\n               found struct `Invariant<'b>`\n-note: the lifetime `'b` as defined on the function body at 11:9...\n+note: the lifetime `'b` as defined here...\n   --> $DIR/regions-variance-invariant-use-covariant.rs:11:9\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {"}, {"sha": "f6006ca046a88e5671c618912c445e978a82faf6", "filename": "src/test/ui/regions/regions-wf-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     x: Box<dyn TheTrait<'a>+'b>\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 6:15\n+note: lifetime parameter instantiated with the lifetime `'b` as defined here\n   --> $DIR/regions-wf-trait-object.rs:6:15\n    |\n LL | struct Foo<'a,'b> {\n    |               ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the struct at 6:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined here\n   --> $DIR/regions-wf-trait-object.rs:6:12\n    |\n LL | struct Foo<'a,'b> {"}, {"sha": "5dff4c8fffcafb51edbc1d2d901ed363db355230", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the da\n LL |         type Out = &'a Foo<'b>;\n    |                    ^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "975776cddffb4cbcd4fcc73c014bb4c2e31a4995", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the da\n LL |         type Out = &'a Foo<'b>;\n    |                    ^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "be05ecec0c9b0f220e7be0c604afd1629edb8a08", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than t\n LL |         type Out = &'a Foo<&'b i32>;\n    |                    ^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "4ba1778d6443fc75199a6e364e852b148d27c499", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than t\n LL |         type Out = &'a Foo<&'b i32>;\n    |                    ^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "f886126299120aebbccf8d98a5a11b2c1e84212a", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -26,12 +26,12 @@ error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data\n LL |     type Out = &'a &'b T;\n    |                ^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime `'a` as defined on the impl at 24:6\n+note: the pointer is valid for the lifetime `'a` as defined here\n   --> $DIR/regions-struct-not-wf.rs:24:6\n    |\n LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n    |      ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 24:10\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n   --> $DIR/regions-struct-not-wf.rs:24:10\n    |\n LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {"}, {"sha": "4af3370c799448eee1a2db4ff7841cfffbad12dd", "filename": "src/test/ui/static/static-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,7 +4,7 @@ error[E0478]: lifetime bound not satisfied\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}\n    |                    ^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 3:6\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/static-lifetime.rs:3:6\n    |\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}"}, {"sha": "536494c73445ceeaf3a6113d0bbda805afd51626", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -7,7 +7,7 @@ LL | |         t.test();\n LL | |     });\n    | |______^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n   --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {"}, {"sha": "0cf0074dc3d255ade32cbe7ab4a9b0eddc160d2f", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL | fn func<T: Test>(foo: &Foo, t: T) {\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n   --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {"}, {"sha": "5572c6515ff9228b77b489c990debbc3b639f147", "filename": "src/test/ui/traits/impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 24:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n   --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |      ^^\n-note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the impl at 24:9...\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined here...\n   --> $DIR/impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:9\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {"}, {"sha": "de1c878a51311cbc0c865bc707a932cba48d2f76", "filename": "src/test/ui/traits/matching-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     fn foo(x: Foo<'b,'a>) {\n    |\n    = note: expected fn pointer `fn(Foo<'a, 'b>)`\n               found fn pointer `fn(Foo<'b, 'a>)`\n-note: the lifetime `'b` as defined on the impl at 13:9...\n+note: the lifetime `'b` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |         ^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 13:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n@@ -25,12 +25,12 @@ LL |     fn foo(x: Foo<'b,'a>) {\n    |\n    = note: expected fn pointer `fn(Foo<'a, 'b>)`\n               found fn pointer `fn(Foo<'b, 'a>)`\n-note: the lifetime `'a` as defined on the impl at 13:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |      ^^\n-note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 13:9\n+note: ...does not necessarily outlive the lifetime `'b` as defined here\n   --> $DIR/matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {"}, {"sha": "641e5c97c10fb3f427fb91bb444466bd2dea6185", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = x as &dyn Bar<'a>; // Error\n    |\n    = note: expected trait object `dyn Bar<'a>`\n               found trait object `dyn Bar<'static>`\n-note: the lifetime `'a` as defined on the function body at 12:16...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/type-checking-test-3.rs:12:16\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n@@ -21,7 +21,7 @@ LL |     let _ = x as &dyn Bar<'static>; // Error\n    |\n    = note: expected trait object `dyn Bar<'static>`\n               found trait object `dyn Bar<'a>`\n-note: the lifetime `'a` as defined on the function body at 17:16...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/type-checking-test-3.rs:17:16\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {"}, {"sha": "4967f3dc2c8cf85a68de2743ab9c69c5b16891c5", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n    |\n    = note: expected trait object `dyn Bar<'static, 'a>`\n               found trait object `dyn Bar<'static, 'static>`\n-note: the lifetime `'a` as defined on the function body at 16:16...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/type-checking-test-4.rs:16:16\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n@@ -21,7 +21,7 @@ LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n    |\n    = note: expected trait object `dyn Bar<'a, 'static>`\n               found trait object `dyn Bar<'static, 'static>`\n-note: the lifetime `'a` as defined on the function body at 21:16...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/type-checking-test-4.rs:21:16\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {"}, {"sha": "da9f81d6bd370cbebfb09a3d4b95c9fa89cd9d4e", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -14,7 +14,7 @@ LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |\n    = note: expected trait `From<&'a str>`\n               found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 6:8...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/bounds-are-checked.rs:6:8\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;"}, {"sha": "d26ca5c3ead38cdc045ff6db63621571db69589a", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,4 +1,3 @@\n-#![feature(member_constraints)]\n #![feature(type_alias_impl_trait)]\n \n pub trait A {"}, {"sha": "f15d0a069ca8ae705ca58247e428e34a2dd836ba", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -1,11 +1,11 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761-2.rs:8:6\n+  --> $DIR/issue-74761-2.rs:7:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761-2.rs:8:10\n+  --> $DIR/issue-74761-2.rs:7:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "f325d1d8182f1ebc4989328c7a16b4a1f0bcb1c3", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -33,12 +33,12 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime defined on the method body at 37:21...\n+note: the anonymous lifetime defined here...\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n    |                     ^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n@@ -52,12 +52,12 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the lifetime `'a` as defined on the impl at 35:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 37:21\n+note: ...does not necessarily outlive the anonymous lifetime defined here\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -71,12 +71,12 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime defined on the method body at 39:22...\n+note: the anonymous lifetime defined here...\n   --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n    |                      ^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined here\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n@@ -90,12 +90,12 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the lifetime `'a` as defined on the impl at 35:6...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 39:22\n+note: ...does not necessarily outlive the anonymous lifetime defined here\n   --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}"}, {"sha": "d7813338f68cbddffc25b8c241c9c0487cb6a954", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,15 +4,15 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x.set(y);\n    |               ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 16:14...\n+note: ...the reference is valid for the anonymous lifetime #2 defined here...\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n LL | |     });\n    | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 16:14\n+note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined here\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {"}, {"sha": "af4f2a7c2a066b953ac0d3b185da35832e6fcaf2", "filename": "src/test/ui/variance/variance-associated-types2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |\n    = note: expected trait object `dyn Foo<Bar = &'a u32>`\n               found trait object `dyn Foo<Bar = &'static u32>`\n-note: the lifetime `'a` as defined on the function body at 12:9...\n+note: the lifetime `'a` as defined here...\n   --> $DIR/variance-associated-types2.rs:12:9\n    |\n LL | fn take<'a>(_: &'a u32) {"}, {"sha": "df519e25641c396e46a30f1a94a7932c7004e6ce", "filename": "src/test/ui/variance/variance-btree-invariant-types.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n-note: the lifetime `'new` as defined on the function body at 3:21...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:3:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n@@ -21,7 +21,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n-note: the lifetime `'new` as defined on the function body at 6:21...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:6:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n@@ -36,7 +36,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n-note: the lifetime `'new` as defined on the function body at 9:24...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:9:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n@@ -51,7 +51,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n-note: the lifetime `'new` as defined on the function body at 12:24...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:12:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n@@ -66,7 +66,7 @@ LL |     v\n    |\n    = note: expected struct `RangeMut<'_, &'new (), _>`\n               found struct `RangeMut<'_, &'static (), _>`\n-note: the lifetime `'new` as defined on the function body at 16:22...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:16:22\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n@@ -81,7 +81,7 @@ LL |     v\n    |\n    = note: expected struct `RangeMut<'_, _, &'new ()>`\n               found struct `RangeMut<'_, _, &'static ()>`\n-note: the lifetime `'new` as defined on the function body at 19:22...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:19:22\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n@@ -96,7 +96,7 @@ LL |     v\n    |\n    = note: expected struct `RangeMut<'_, &'static (), _>`\n               found struct `RangeMut<'_, &'new (), _>`\n-note: the lifetime `'new` as defined on the function body at 22:25...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:22:25\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n@@ -111,7 +111,7 @@ LL |     v\n    |\n    = note: expected struct `RangeMut<'_, _, &'static ()>`\n               found struct `RangeMut<'_, _, &'new ()>`\n-note: the lifetime `'new` as defined on the function body at 25:25...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:25:25\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n@@ -126,7 +126,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n-note: the lifetime `'new` as defined on the function body at 29:20...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:29:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n@@ -141,7 +141,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n-note: the lifetime `'new` as defined on the function body at 33:20...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:33:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n@@ -156,7 +156,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n-note: the lifetime `'new` as defined on the function body at 37:23...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:37:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n@@ -171,7 +171,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n-note: the lifetime `'new` as defined on the function body at 41:23...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:41:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n@@ -186,7 +186,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n-note: the lifetime `'new` as defined on the function body at 46:20...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:46:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n@@ -201,7 +201,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n-note: the lifetime `'new` as defined on the function body at 50:20...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:50:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n@@ -216,7 +216,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n-note: the lifetime `'new` as defined on the function body at 54:23...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:54:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n@@ -231,7 +231,7 @@ LL |     v\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n-note: the lifetime `'new` as defined on the function body at 58:23...\n+note: the lifetime `'new` as defined here...\n   --> $DIR/variance-btree-invariant-types.rs:58:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)"}, {"sha": "16583fa793109464947fa0069d465b27bfb15708", "filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-arg-object.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-arg-object.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-arg-object.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-arg-object.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "370e57f73df10ae05e6d1e224b333e8f522ed49c", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 16:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 16:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "ab14faaa50728861486d43a6ae03da5327dbade1", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n-note: the lifetime `'min` as defined on the function body at 16:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 16:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "d590a4dc2d9d5125752be3d1120f1e7a142347c5", "filename": "src/test/ui/variance/variance-covariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-arg-object.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-arg-object.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 18:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-arg-object.rs:18:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 18:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-arg-object.rs:18:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "eb1766b096c07628fb3fef764048c175c7340e5a", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "b0bcb2e8422e446deb1625c2907d4f19af5deab0", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n-note: the lifetime `'min` as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-self-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-self-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n-note: the lifetime `'min` as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-covariant-self-trait-match.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-covariant-self-trait-match.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "6c1b07e6677e3c3632f069d3bf64a91a274a73af", "filename": "src/test/ui/variance/variance-invariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-arg-object.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-arg-object.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 14:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-arg-object.rs:14:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 14:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-arg-object.rs:14:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "0328496546eb7078ca8c64156c7c377488b48a98", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime `'min` as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime `'min` as defined on the function body at 13:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 13:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "c553581b564a0307c7d9cd966ce70861dbe2010a", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n-note: the lifetime `'min` as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-self-trait-match.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-self-trait-match.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n-note: the lifetime `'min` as defined on the function body at 13:21...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-invariant-self-trait-match.rs:13:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 13:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-invariant-self-trait-match.rs:13:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "ec0cb22cdb6ba0d070af46f439b954b7842b8e49", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n-note: the lifetime `'min` as defined on the function body at 8:8...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)"}, {"sha": "0c0071cf9e16fe7754f2d398c6108363365e2974", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n-note: the lifetime `'min` as defined on the function body at 6:8...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-use-covariant-struct-1.rs:6:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 6:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-use-covariant-struct-1.rs:6:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)"}, {"sha": "76e4bd76b998f095d80964473ab6e8efb5943d07", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n-note: the lifetime `'min` as defined on the function body at 8:8...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-use-invariant-struct-1.rs:8:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-use-invariant-struct-1.rs:8:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n-note: the lifetime `'min` as defined on the function body at 15:8...\n+note: the lifetime `'min` as defined here...\n   --> $DIR/variance-use-invariant-struct-1.rs:15:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 15:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined here\n   --> $DIR/variance-use-invariant-struct-1.rs:15:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)"}, {"sha": "d3593d8c1eb6799649d4f6cd0922b8c7010895a9", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -17,7 +17,7 @@ note: because this has an unmet lifetime requirement\n    |\n LL | pub struct Wrapper<T: Trait>(T);\n    |                       ^^^^^ introduces a `'static` lifetime requirement\n-note: the anonymous lifetime #1 defined on the method body at 16:5...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:5\n    |\n LL |     pub fn repro(_: Wrapper<Ref>);"}, {"sha": "c663931c5d60568660bbef1fc4d7194ac04a8526", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         u\n    |         ^\n    |\n-note: ...the reference is valid for the lifetime `'a` as defined on the impl at 14:6...\n+note: ...the reference is valid for the lifetime `'a` as defined here...\n   --> $DIR/wf-static-method.rs:14:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the impl at 14:10\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n   --> $DIR/wf-static-method.rs:14:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n@@ -21,12 +21,12 @@ error[E0478]: lifetime bound not satisfied\n LL |         let me = Self::make_me();\n    |                  ^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 23:10\n+note: lifetime parameter instantiated with the lifetime `'b` as defined here\n   --> $DIR/wf-static-method.rs:23:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the impl at 23:6\n+note: but lifetime parameter must outlive the lifetime `'a` as defined here\n   --> $DIR/wf-static-method.rs:23:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n@@ -38,12 +38,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         u\n    |         ^\n    |\n-note: ...the reference is valid for the lifetime `'a` as defined on the impl at 31:6...\n+note: ...the reference is valid for the lifetime `'a` as defined here...\n   --> $DIR/wf-static-method.rs:31:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the impl at 31:10\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n   --> $DIR/wf-static-method.rs:31:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n@@ -55,7 +55,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 40:13...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n   --> $DIR/wf-static-method.rs:40:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -65,7 +65,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 40:9...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/wf-static-method.rs:40:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -82,7 +82,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 44:22...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n   --> $DIR/wf-static-method.rs:44:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -92,7 +92,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 44:18...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/wf-static-method.rs:44:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -109,7 +109,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 49:22...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n   --> $DIR/wf-static-method.rs:49:22\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -119,7 +119,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     <Evil>::inherent_evil(b)\n    |                           ^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 49:18...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n   --> $DIR/wf-static-method.rs:49:18\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {"}, {"sha": "ae4e6cad3328bb120e160dcae2d72384d0285acb", "filename": "src/tools/clippy/tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc5add915e8bf4accbb7cf4de00351a7c6126a1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "patch": "@@ -6,7 +6,7 @@ LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 13:13...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/ice-6256.rs:13:13\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types"}]}