{"sha": "3328a0a11bac22629e00e45fd82aadc1396cb40b", "node_id": "C_kwDOAAsO6NoAKDMzMjhhMGExMWJhYzIyNjI5ZTAwZTQ1ZmQ4MmFhZGMxMzk2Y2I0MGI", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-12T15:17:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-12T15:17:31Z"}, "message": "Fix trait impl completions' `lookup_by` text", "tree": {"sha": "163bb07d30afbfbdd17e43b9b97448c5f537a048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/163bb07d30afbfbdd17e43b9b97448c5f537a048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3328a0a11bac22629e00e45fd82aadc1396cb40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3328a0a11bac22629e00e45fd82aadc1396cb40b", "html_url": "https://github.com/rust-lang/rust/commit/3328a0a11bac22629e00e45fd82aadc1396cb40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3328a0a11bac22629e00e45fd82aadc1396cb40b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12fb8ab3b2dd5544e3a67be63e1bf569b0c944c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/12fb8ab3b2dd5544e3a67be63e1bf569b0c944c5", "html_url": "https://github.com/rust-lang/rust/commit/12fb8ab3b2dd5544e3a67be63e1bf569b0c944c5"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "8c15aee0ddde1332035a47e93e0ce7957d6eb89c", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3328a0a11bac22629e00e45fd82aadc1396cb40b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3328a0a11bac22629e00e45fd82aadc1396cb40b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=3328a0a11bac22629e00e45fd82aadc1396cb40b", "patch": "@@ -167,7 +167,7 @@ fn add_function_impl(\n     };\n \n     let mut item = CompletionItem::new(completion_kind, replacement_range, label);\n-    item.lookup_by(fn_name)\n+    item.lookup_by(format!(\"fn {}\", fn_name))\n         .set_documentation(func.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n \n@@ -232,7 +232,7 @@ fn add_type_alias_impl(\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, replacement_range, label);\n     item.text_edit(TextEdit::replace(replacement_range, snippet))\n-        .lookup_by(alias_name)\n+        .lookup_by(format!(\"type {}\", alias_name))\n         .set_documentation(type_alias.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n     item.add_to(acc);\n@@ -261,7 +261,7 @@ fn add_const_impl(\n \n                 let mut item = CompletionItem::new(SymbolKind::Const, replacement_range, label);\n                 item.text_edit(TextEdit::replace(replacement_range, snippet))\n-                    .lookup_by(const_name)\n+                    .lookup_by(format!(\"const {}\", const_name))\n                     .set_documentation(const_.docs(ctx.db))\n                     .set_relevance(CompletionRelevance {\n                         is_item_from_trait: true,\n@@ -549,7 +549,7 @@ impl Test for T {\n     #[test]\n     fn name_ref_single_function() {\n         check_edit(\n-            \"test\",\n+            \"fn test\",\n             r#\"\n trait Test {\n     fn test();\n@@ -578,7 +578,7 @@ impl Test for T {\n     #[test]\n     fn single_function() {\n         check_edit(\n-            \"test\",\n+            \"fn test\",\n             r#\"\n trait Test {\n     fn test();\n@@ -607,7 +607,7 @@ impl Test for T {\n     #[test]\n     fn generic_fn() {\n         check_edit(\n-            \"foo\",\n+            \"fn foo\",\n             r#\"\n trait Test {\n     fn foo<T>();\n@@ -632,7 +632,7 @@ impl Test for T {\n \"#,\n         );\n         check_edit(\n-            \"foo\",\n+            \"fn foo\",\n             r#\"\n trait Test {\n     fn foo<T>() where T: Into<String>;\n@@ -662,7 +662,7 @@ where T: Into<String> {\n     #[test]\n     fn associated_type() {\n         check_edit(\n-            \"SomeType\",\n+            \"type SomeType\",\n             r#\"\n trait Test {\n     type SomeType;\n@@ -687,7 +687,7 @@ impl Test for () {\n     #[test]\n     fn associated_const() {\n         check_edit(\n-            \"SOME_CONST\",\n+            \"const SOME_CONST\",\n             r#\"\n trait Test {\n     const SOME_CONST: u16;\n@@ -709,7 +709,7 @@ impl Test for () {\n         );\n \n         check_edit(\n-            \"SOME_CONST\",\n+            \"const SOME_CONST\",\n             r#\"\n trait Test {\n     const SOME_CONST: u16 = 92;\n@@ -783,9 +783,9 @@ impl Test for T {{\n             \"default type OtherType = i32;\",\n             \"default const OTHER_CONST: i32 = 0;\",\n         ] {\n-            test(\"bar\", \"fn $0\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n-            test(\"Foo\", \"type $0\", \"type Foo = \", next_sibling);\n-            test(\"CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n+            test(\"fn bar\", \"fn $0\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n+            test(\"type Foo\", \"type $0\", \"type Foo = \", next_sibling);\n+            test(\"const CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n         }\n     }\n \n@@ -830,15 +830,15 @@ impl Foo for T {{\n                 ),\n             )\n         };\n-        test(\"function\", \"fn f$0\", \"fn function() {\\n    $0\\n}\");\n-        test(\"Type\", \"type T$0\", \"type Type = \");\n-        test(\"CONST\", \"const C$0\", \"const CONST: i32 = \");\n+        test(\"fn function\", \"fn f$0\", \"fn function() {\\n    $0\\n}\");\n+        test(\"type Type\", \"type T$0\", \"type Type = \");\n+        test(\"const CONST\", \"const C$0\", \"const CONST: i32 = \");\n     }\n \n     #[test]\n     fn generics_are_inlined_in_return_type() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function() -> T;\n@@ -867,7 +867,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_in_parameter() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function(bar: T);\n@@ -896,7 +896,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_when_part_of_other_types() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function(bar: Vec<T>);\n@@ -925,7 +925,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_complex() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T, U, V> {\n     fn function(bar: Vec<T>, baz: U) -> Arc<Vec<V>>;\n@@ -954,7 +954,7 @@ impl Foo<u32, Vec<usize>, u8> for Bar {\n     #[test]\n     fn generics_are_inlined_in_associated_const() {\n         check_edit(\n-            \"BAR\",\n+            \"const BAR\",\n             r#\"\n trait Foo<T> {\n     const BAR: T;\n@@ -981,7 +981,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_in_where_clause() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait SomeTrait<T> {}\n "}]}