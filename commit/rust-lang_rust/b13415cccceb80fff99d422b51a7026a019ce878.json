{"sha": "b13415cccceb80fff99d422b51a7026a019ce878", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzQxNWNjY2NlYjgwZmZmOTlkNDIyYjUxYTcwMjZhMDE5Y2U4Nzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-10-24T20:50:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-10-24T20:50:21Z"}, "message": "libextra: Make arc::get and arc::new inline too.\n\nShould be a 2x improvement in a Servo test case.", "tree": {"sha": "e1ac12c775bbd8a39db97e716c9b8fcc4c64bf75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ac12c775bbd8a39db97e716c9b8fcc4c64bf75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13415cccceb80fff99d422b51a7026a019ce878", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13415cccceb80fff99d422b51a7026a019ce878", "html_url": "https://github.com/rust-lang/rust/commit/b13415cccceb80fff99d422b51a7026a019ce878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13415cccceb80fff99d422b51a7026a019ce878/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76287ccbb097d9b351657de8f514c5dd7c5955d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/76287ccbb097d9b351657de8f514c5dd7c5955d5", "html_url": "https://github.com/rust-lang/rust/commit/76287ccbb097d9b351657de8f514c5dd7c5955d5"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "df67b1c9cc1df6a3119ec48ea2c3263f62a2b6fa", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b13415cccceb80fff99d422b51a7026a019ce878/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13415cccceb80fff99d422b51a7026a019ce878/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b13415cccceb80fff99d422b51a7026a019ce878", "patch": "@@ -117,10 +117,12 @@ pub struct Arc<T> { priv x: UnsafeArc<T> }\n  */\n impl<T:Freeze+Send> Arc<T> {\n     /// Create an atomically reference counted wrapper.\n+    #[inline]\n     pub fn new(data: T) -> Arc<T> {\n         Arc { x: UnsafeArc::new(data) }\n     }\n \n+    #[inline]\n     pub fn get<'a>(&'a self) -> &'a T {\n         unsafe { &*self.x.get_immut() }\n     }"}]}