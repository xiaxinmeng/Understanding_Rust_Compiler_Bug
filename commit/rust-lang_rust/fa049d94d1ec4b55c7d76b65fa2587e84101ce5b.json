{"sha": "fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "node_id": "C_kwDOAAsO6NoAKGZhMDQ5ZDk0ZDFlYzRiNTVjN2Q3NmI2NWZhMjU4N2U4NDEwMWNlNWI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:52:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:52:05Z"}, "message": "add top-level tests for expressions", "tree": {"sha": "4f30df37f64d6a4ce9fd9c2fcb2329733589c109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f30df37f64d6a4ce9fd9c2fcb2329733589c109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "html_url": "https://github.com/rust-lang/rust/commit/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640cc27ff07e36d45dd2259b4a37ce797df0559e", "url": "https://api.github.com/repos/rust-lang/rust/commits/640cc27ff07e36d45dd2259b4a37ce797df0559e", "html_url": "https://github.com/rust-lang/rust/commit/640cc27ff07e36d45dd2259b4a37ce797df0559e"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "c6c111c9a87764c3e7eed2e65bacefc03320bdf1", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "patch": "@@ -135,6 +135,19 @@ pub(crate) mod entry {\n             }\n             m.complete(p, ERROR);\n         }\n+\n+        pub(crate) fn expr(p: &mut Parser) {\n+            let m = p.start();\n+            expressions::expr(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n "}, {"sha": "491a657a34dbc3755290ba3a794e087a26939c21", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "patch": "@@ -123,8 +123,8 @@ impl TopEntryPoint {\n             TopEntryPoint::MacroItems => grammar::entry::top::macro_items,\n             TopEntryPoint::Pattern => grammar::entry::top::pattern,\n             TopEntryPoint::Type => grammar::entry::top::type_,\n+            TopEntryPoint::Expr => grammar::entry::top::expr,\n             // FIXME\n-            TopEntryPoint::Expr => grammar::entry::prefix::expr,\n             TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         };\n         let mut p = parser::Parser::new(input);"}, {"sha": "0ba22cf2411df4e4589e180d36ae50fddf056902", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "patch": "@@ -224,6 +224,46 @@ fn type_() {\n     );\n }\n \n+#[test]\n+fn expr() {\n+    check(\n+        TopEntryPoint::Expr,\n+        \"2 + 2 == 5\",\n+        expect![[r#\"\n+        BIN_EXPR\n+          BIN_EXPR\n+            LITERAL\n+              INT_NUMBER \"2\"\n+            WHITESPACE \" \"\n+            PLUS \"+\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"2\"\n+          WHITESPACE \" \"\n+          EQ2 \"==\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"5\"\n+    \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Expr,\n+        \"let _ = 0;\",\n+        expect![[r#\"\n+        ERROR\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          INT_NUMBER \"0\"\n+          SEMICOLON \";\"\n+        error 0: expected expression\n+    \"#]],\n+    );\n+}\n+\n #[track_caller]\n fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n     let (parsed, _errors) = super::parse(entry, input);"}]}