{"sha": "3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDlhMDRiZjc5ZmU3NWZmNDhmZDdhYTQ4Zjc4NTg0NzJlZTM3ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T16:57:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T16:57:55Z"}, "message": "auto merge of #5778 : jld/rust/reflect-abstract-enum, r=graydon\n\nThis takes care of one of the last remnants of assumptions about enum layout.  A type visitor is now passed a function to read a value's discriminant, then accesses fields by being passed a byte offset for each one.  The latter may not be fully general, despite the constraints imposed on representations by borrowed pointers, but works for any representations currently planned and is relatively simple.\r\n\r\nCloses #5652.", "tree": {"sha": "b6cfefc764f4e23ca1e67b9dcda1ac2612afb6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6cfefc764f4e23ca1e67b9dcda1ac2612afb6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "html_url": "https://github.com/rust-lang/rust/commit/3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b152baddfec6c4c475cb51b8428108c8c41af27", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b152baddfec6c4c475cb51b8428108c8c41af27", "html_url": "https://github.com/rust-lang/rust/commit/7b152baddfec6c4c475cb51b8428108c8c41af27"}, {"sha": "e9a52f5af576ffd517284813858b6d06910460ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a52f5af576ffd517284813858b6d06910460ea", "html_url": "https://github.com/rust-lang/rust/commit/e9a52f5af576ffd517284813858b6d06910460ea"}], "stats": {"total": 229, "additions": 201, "deletions": 28}, "files": [{"sha": "9a0526b4351ba3ac314fa5cb3cf5cef2fcef888b", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "patch": "@@ -15,6 +15,7 @@ Runtime type reflection\n */\n \n use intrinsic::{TyDesc, TyVisitor};\n+#[cfg(not(stage0))] use intrinsic::Opaque;\n use libc::c_void;\n use sys;\n use vec;\n@@ -393,6 +394,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enter_enum(&self, n_variants: uint, sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n@@ -402,25 +404,47 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n+                     -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        true\n+    }\n+\n     fn visit_enter_enum_variant(&self, variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n-        self.inner.push_ptr();\n+        self.inner.push_ptr(); // NOTE remove after next snapshot\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n                                                  n_fields, name) {\n             return false;\n         }\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n         unsafe { self.align((*inner).align); }\n         if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n         unsafe { self.bump((*inner).size); }\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool {\n+        self.inner.push_ptr();\n+        self.bump(offset);\n+        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n+        self.inner.pop_ptr();\n+        true\n+    }\n+\n     fn visit_leave_enum_variant(&self, variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n@@ -429,10 +453,11 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n                                                  n_fields, name) {\n             return false;\n         }\n-        self.inner.pop_ptr();\n+        self.inner.pop_ptr(); // NOTE remove after next snapshot\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_leave_enum(&self, n_variants: uint, sz: uint, align: uint)\n                      -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, sz, align) {\n@@ -442,6 +467,17 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        self.bump(sz);\n+        true\n+    }\n+\n     fn visit_trait(&self) -> bool {\n         self.align_to::<@TyVisitor>();\n         if ! self.inner.visit_trait() { return false; }"}, {"sha": "530f80ef764cd1ad59c425ad5cf34b0ede040643", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "patch": "@@ -18,6 +18,7 @@ use cast::transmute;\n use char;\n use intrinsic;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n+#[cfg(not(stage0))] use intrinsic::Opaque;\n use io::{Writer, WriterUtil};\n use libc::c_void;\n use managed;\n@@ -137,12 +138,20 @@ impl Repr for char {\n \n // New implementation using reflect::MovePtr\n \n+#[cfg(stage0)]\n enum VariantState {\n     Degenerate,\n     TagMatch,\n     TagMismatch,\n }\n \n+#[cfg(not(stage0))]\n+enum VariantState {\n+    SearchingFor(int),\n+    Matched,\n+    AlreadyFound\n+}\n+\n pub struct ReprVisitor {\n     mut ptr: *c_void,\n     mut ptr_stk: ~[*c_void],\n@@ -181,14 +190,14 @@ pub impl ReprVisitor {\n         true\n     }\n \n-    #[inline(always)]\n+    #[cfg(stage0)] #[inline(always)]\n     fn bump(&self, sz: uint) {\n       do self.move_ptr() |p| {\n             ((p as uint) + sz) as *c_void\n       };\n     }\n \n-    #[inline(always)]\n+    #[cfg(stage0)] #[inline(always)]\n     fn bump_past<T>(&self) {\n         self.bump(sys::size_of::<T>());\n     }\n@@ -458,6 +467,7 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enter_enum(&self, n_variants: uint,\n                         _sz: uint, _align: uint) -> bool {\n         if n_variants == 1 {\n@@ -468,6 +478,16 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _sz: uint, _align: uint) -> bool {\n+        let disr = unsafe { get_disr(transmute(self.ptr)) };\n+        self.var_stk.push(SearchingFor(disr));\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n     fn visit_enter_enum_variant(&self, _variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n@@ -500,6 +520,36 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum_variant(&self, _variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        let mut write = false;\n+        match self.var_stk.pop() {\n+            SearchingFor(sought) => {\n+                if disr_val == sought {\n+                    self.var_stk.push(Matched);\n+                    write = true;\n+                } else {\n+                    self.var_stk.push(SearchingFor(sought));\n+                }\n+            }\n+            Matched | AlreadyFound => {\n+                self.var_stk.push(AlreadyFound);\n+            }\n+        }\n+\n+        if write {\n+            self.writer.write_str(name);\n+            if n_fields > 0 {\n+                self.writer.write_char('(');\n+            }\n+        }\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n     fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n         match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n             Degenerate | TagMatch => {\n@@ -515,6 +565,23 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enum_variant_field(&self, i: uint, _offset: uint, inner: *TyDesc) -> bool {\n+        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+            Matched => {\n+                if i != 0 {\n+                    self.writer.write_str(\", \");\n+                }\n+                if ! self.visit_inner(inner) {\n+                    return false;\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 n_fields: uint,\n@@ -530,12 +597,39 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_leave_enum_variant(&self, _variant: uint,\n+                                _disr_val: int,\n+                                n_fields: uint,\n+                                _name: &str) -> bool {\n+        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+            Matched => {\n+                if n_fields > 0 {\n+                    self.writer.write_char(')');\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n     fn visit_leave_enum(&self, _n_variants: uint,\n                         _sz: uint, _align: uint) -> bool {\n         self.var_stk.pop();\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_leave_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _sz: uint, _align: uint) -> bool {\n+        match self.var_stk.pop() {\n+            SearchingFor(*) => fail!(~\"enum value matched no variant\"),\n+            _ => true\n+        }\n+    }\n+\n     fn visit_enter_fn(&self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n     fn visit_fn_input(&self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool {"}, {"sha": "dcf300bd31da604bc67f3026556b167c21b2737e", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "patch": "@@ -28,6 +28,8 @@ pub mod intrinsic {\n         // Remaining fields not listed\n     }\n \n+    pub enum Opaque { }\n+\n     pub trait TyVisitor {\n         fn visit_bot(&self) -> bool;\n         fn visit_nil(&self) -> bool;\n@@ -91,17 +93,19 @@ pub mod intrinsic {\n                            sz: uint, align: uint) -> bool;\n \n         fn visit_enter_enum(&self, n_variants: uint,\n+                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                             sz: uint, align: uint) -> bool;\n         fn visit_enter_enum_variant(&self, variant: uint,\n                                     disr_val: int,\n                                     n_fields: uint,\n                                     name: &str) -> bool;\n-        fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool;\n+        fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_enum_variant(&self, variant: uint,\n                                     disr_val: int,\n                                     n_fields: uint,\n                                     name: &str) -> bool;\n         fn visit_leave_enum(&self, n_variants: uint,\n+                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                             sz: uint, align: uint) -> bool;\n \n         fn visit_enter_fn(&self, purity: uint, proto: uint,"}, {"sha": "596c55a68f872fa5602029c02877000ec2149428", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use lib::llvm::{TypeRef, ValueRef};\n+use back::link::mangle_internal_name_by_path_and_seq;\n+use lib::llvm::{TypeRef, ValueRef, llvm};\n+use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::{ArgVals, DontAutorefArg};\n@@ -24,10 +25,13 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::libc::c_uint;\n use core::option::None;\n use core::vec;\n use syntax::ast::def_id;\n use syntax::ast;\n+use syntax::ast_map::path_name;\n+use syntax::parse::token::special_idents;\n \n pub struct Reflector {\n     visitor_val: ValueRef,\n@@ -266,23 +270,52 @@ pub impl Reflector {\n           // variant?\n           ty::ty_enum(did, ref substs) => {\n             let bcx = self.bcx;\n-            let tcx = bcx.ccx().tcx;\n-            let variants = ty::substd_enum_variants(tcx, did, substs);\n+            let ccx = bcx.ccx();\n+            let repr = adt::represent_type(bcx.ccx(), t);\n+            let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n+            let llptrty = T_ptr(type_of(ccx, t));\n+            let (_, opaquety) = *(ccx.tcx.intrinsic_defs.find(&ccx.sess.ident_of(~\"Opaque\"))\n+                                      .expect(\"Failed to resolve intrinsic::Opaque\"));\n+            let opaqueptrty = ty::mk_ptr(ccx.tcx, ty::mt { ty: opaquety, mutbl: ast::m_imm });\n+\n+            let make_get_disr = || {\n+                let sub_path = bcx.fcx.path + ~[path_name(special_idents::anon)];\n+                let sym = mangle_internal_name_by_path_and_seq(ccx, sub_path, ~\"get_disr\");\n+                let args = [ty::arg { mode: ast::expl(ast::by_copy),\n+                                      ty: opaqueptrty }];\n+                let llfty = type_of_fn(ccx, args, ty::mk_int(ccx.tcx));\n+                let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n+                let arg = unsafe {\n+                    llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n+                };\n+                let fcx = new_fn_ctxt(ccx, ~[], llfdecl, None);\n+                let bcx = top_scope_block(fcx, None);\n+                let arg = BitCast(bcx, arg, llptrty);\n+                let ret = adt::trans_get_discr(bcx, repr, arg);\n+                Store(bcx, ret, fcx.llretptr);\n+                cleanup_and_Br(bcx, bcx, fcx.llreturn);\n+                finish_fn(fcx, bcx.llbb);\n+                llfdecl\n+            };\n \n-            let extra = ~[self.c_uint(vec::len(variants))]\n+            let enum_args = ~[self.c_uint(vec::len(variants)), make_get_disr()]\n                 + self.c_size_and_align(t);\n-            do self.bracketed(~\"enum\", extra) |this| {\n+            do self.bracketed(~\"enum\", enum_args) |this| {\n                 for variants.eachi |i, v| {\n-                    let extra1 = ~[this.c_uint(i),\n-                                   this.c_int(v.disr_val),\n-                                   this.c_uint(vec::len(v.args)),\n-                                   this.c_slice(\n-                                       bcx.ccx().sess.str_of(v.name))];\n-                    do this.bracketed(~\"enum_variant\", extra1) |this| {\n+                    let variant_args = ~[this.c_uint(i),\n+                                         this.c_int(v.disr_val),\n+                                         this.c_uint(vec::len(v.args)),\n+                                         this.c_slice(ccx.sess.str_of(v.name))];\n+                    do this.bracketed(~\"enum_variant\", variant_args) |this| {\n                         for v.args.eachi |j, a| {\n-                            let extra = ~[this.c_uint(j),\n-                                          this.c_tydesc(*a)];\n-                            this.visit(~\"enum_variant_field\", extra);\n+                            let bcx = this.bcx;\n+                            let null = C_null(llptrty);\n+                            let offset = p2i(ccx, adt::trans_field_ptr(bcx, repr, null,\n+                                                                       v.disr_val, j));\n+                            let field_args = ~[this.c_uint(j),\n+                                               offset,\n+                                               this.c_tydesc(*a)];\n+                            this.visit(~\"enum_variant_field\", field_args);\n                         }\n                     }\n                 }"}, {"sha": "8f3a1dd90c24c708f72613ac6910d2adbdc5b941", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3809a04bf79fe75ff48fd7aa48f7858472ee37f5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=3809a04bf79fe75ff48fd7aa48f7858472ee37f5", "patch": "@@ -13,7 +13,7 @@\n use core::bool;\n use core::libc::c_void;\n use core::vec::UnboxedVecRepr;\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n+use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n \n@@ -376,10 +376,12 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enter_enum(&self, n_variants: uint, sz: uint, align: uint)\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_enum(n_variants, sz, align) { return false; }\n+        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) { return false; }\n         true\n     }\n \n@@ -394,8 +396,8 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool {\n+        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n         true\n     }\n \n@@ -410,9 +412,11 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_leave_enum(&self, n_variants: uint, sz: uint, align: uint)\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n                      -> bool {\n-        if ! self.inner.visit_leave_enum(n_variants, sz, align) { return false; }\n+        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) { return false; }\n         true\n     }\n \n@@ -586,6 +590,7 @@ impl TyVisitor for my_visitor {\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool {\n         // FIXME (#3732): this needs to rewind between enum variants, or something.\n         true\n@@ -594,14 +599,15 @@ impl TyVisitor for my_visitor {\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(&self, _i: uint, inner: *TyDesc) -> bool {\n+    fn visit_enum_variant_field(&self, _i: uint, _offset: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_leave_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_fn(&self, _purity: uint, _proto: uint,"}]}