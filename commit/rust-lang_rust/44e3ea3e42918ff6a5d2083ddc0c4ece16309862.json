{"sha": "44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "node_id": "C_kwDOAAsO6NoAKDQ0ZTNlYTNlNDI5MThmZjZhNWQyMDgzZGRjMGM0ZWNlMTYzMDk4NjI", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-10-08T20:05:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-08T20:05:48Z"}, "message": "Merge pull request #229 from rust-lang/fix/fmaddsub\n\nFix/fmaddsub", "tree": {"sha": "bdc36d3ddd02fc654b0af8388d38222005f937d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdc36d3ddd02fc654b0af8388d38222005f937d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQdgcCRBK7hj4Ov3rIwAAwM8IABodybp3QnTKKAlj0yyphvsh\nTOQbv7T4ij4sMvBJ5F5C4OEuAw4N+VVmjBaxpHzpW87nlayi1zRC6Wpui1ObsYbz\n4mrhynPpgLWe9bNAiMUReR6A3Xq+Ff75UzHNUS4O5u/gDkhDckM6fpwfm9WijN3n\nRtGJzChfUtORtxv4/qtBc9eJelVqv66as18mhs8PJ/C2v2C9sprLxFgTRKZ1CfhT\n8IphBDx6YL2jRmAmRY7l3R9p6kF+1Jsxm90FpFPz8948uGn8xubOLACDlenDjnk3\nDdX75I8/8ta48WI3CiVPU37g9hEAHgiSowCHpiYY8dtGczMELxJt0BcbT8Bq4I4=\n=n/qC\n-----END PGP SIGNATURE-----\n", "payload": "tree bdc36d3ddd02fc654b0af8388d38222005f937d9\nparent 235414efaeea5f2cb14eb417f2b5caddb6211168\nparent 74dac5d970fa3f5c070d7d656622068cadfb0feb\nauthor antoyo <antoyo@users.noreply.github.com> 1665259548 -0400\ncommitter GitHub <noreply@github.com> 1665259548 -0400\n\nMerge pull request #229 from rust-lang/fix/fmaddsub\n\nFix/fmaddsub"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "html_url": "https://github.com/rust-lang/rust/commit/44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235414efaeea5f2cb14eb417f2b5caddb6211168", "url": "https://api.github.com/repos/rust-lang/rust/commits/235414efaeea5f2cb14eb417f2b5caddb6211168", "html_url": "https://github.com/rust-lang/rust/commit/235414efaeea5f2cb14eb417f2b5caddb6211168"}, {"sha": "74dac5d970fa3f5c070d7d656622068cadfb0feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dac5d970fa3f5c070d7d656622068cadfb0feb", "html_url": "https://github.com/rust-lang/rust/commit/74dac5d970fa3f5c070d7d656622068cadfb0feb"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "6e1ad9f5315199c09f39d84a0d68666caacfaa78", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "patch": "@@ -126,6 +126,9 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n             context.add_command_line_option(\"-fdata-sections\");\n         }\n \n+        if env::var(\"CG_GCCJIT_DUMP_RTL\").as_deref() == Ok(\"1\") {\n+            context.add_command_line_option(\"-fdump-rtl-vregs\");\n+        }\n         if env::var(\"CG_GCCJIT_DUMP_TREE_ALL\").as_deref() == Ok(\"1\") {\n             context.add_command_line_option(\"-fdump-tree-all\");\n         }"}, {"sha": "f3933a2d7061bdc98299c4f1031c2e5407a7b6af", "filename": "src/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "patch": "@@ -280,7 +280,11 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         let func_name = format!(\"{:?}\", func_ptr);\n         let previous_arg_count = args.len();\n         let orig_args = args;\n-        let args = llvm::adjust_intrinsic_arguments(&self, gcc_func, args.into(), &func_name);\n+        let args = {\n+            let function_address_names = self.function_address_names.borrow();\n+            let original_function_name = function_address_names.get(&func_ptr);\n+            llvm::adjust_intrinsic_arguments(&self, gcc_func, args.into(), &func_name, original_function_name)\n+        };\n         let args_adjusted = args.len() != previous_arg_count;\n         let args = self.check_ptr_call(\"call\", func_ptr, &*args);\n "}, {"sha": "5f34ddd92bac4487484d485db17e6f28a7bda50f", "filename": "src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "patch": "@@ -33,6 +33,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     // TODO(bjorn3): Can this field be removed?\n     pub current_func: RefCell<Option<Function<'gcc>>>,\n     pub normal_function_addresses: RefCell<FxHashSet<RValue<'gcc>>>,\n+    pub function_address_names: RefCell<FxHashMap<RValue<'gcc>, String>>,\n \n     pub functions: RefCell<FxHashMap<String, Function<'gcc>>>,\n     pub intrinsics: RefCell<FxHashMap<String, Function<'gcc>>>,\n@@ -192,6 +193,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             context,\n             current_func: RefCell::new(None),\n             normal_function_addresses: Default::default(),\n+            function_address_names: Default::default(),\n             functions: RefCell::new(functions),\n             intrinsics: RefCell::new(FxHashMap::default()),\n \n@@ -345,6 +347,7 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // FIXME(antoyo): the rustc API seems to call get_fn_addr() when not needed (e.g. for FFI).\n \n         self.normal_function_addresses.borrow_mut().insert(ptr);\n+        self.function_address_names.borrow_mut().insert(ptr, func_name.to_string());\n \n         ptr\n     }"}, {"sha": "621ef328a8cfbc5ee561389bf946a74fb88a32ee", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e3ea3e42918ff6a5d2083ddc0c4ece16309862/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=44e3ea3e42918ff6a5d2083ddc0c4ece16309862", "patch": "@@ -5,7 +5,7 @@ use rustc_codegen_ssa::traits::BuilderMethods;\n \n use crate::{context::CodegenCx, builder::Builder};\n \n-pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc, 'tcx>, gcc_func: FunctionPtrType<'gcc>, mut args: Cow<'b, [RValue<'gcc>]>, func_name: &str) -> Cow<'b, [RValue<'gcc>]> {\n+pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc, 'tcx>, gcc_func: FunctionPtrType<'gcc>, mut args: Cow<'b, [RValue<'gcc>]>, func_name: &str, original_function_name: Option<&String>) -> Cow<'b, [RValue<'gcc>]> {\n     // Some LLVM intrinsics do not map 1-to-1 to GCC intrinsics, so we add the missing\n     // arguments here.\n     if gcc_func.get_param_count() != args.len() {\n@@ -277,11 +277,23 @@ pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc\n                 let c = builder.context.new_rvalue_from_vector(None, arg3_type, &[new_args[2]; 2]);\n                 args = vec![a, b, c, new_args[3]].into();\n             },\n-            \"__builtin_ia32_vfmaddsubpd256\" | \"__builtin_ia32_vfmaddsubps\" | \"__builtin_ia32_vfmaddsubps256\" => {\n-                let mut new_args = args.to_vec();\n-                let arg3 = &mut new_args[2];\n-                *arg3 = builder.context.new_unary_op(None, UnaryOp::Minus, arg3.get_type(), *arg3);\n-                args = new_args.into();\n+            \"__builtin_ia32_vfmaddsubpd256\" | \"__builtin_ia32_vfmaddsubps\" | \"__builtin_ia32_vfmaddsubps256\"\n+                | \"__builtin_ia32_vfmaddsubpd\" => {\n+                if let Some(original_function_name) = original_function_name {\n+                    match &**original_function_name {\n+                        \"llvm.x86.fma.vfmsubadd.pd.256\" | \"llvm.x86.fma.vfmsubadd.ps\" | \"llvm.x86.fma.vfmsubadd.ps.256\"\n+                            | \"llvm.x86.fma.vfmsubadd.pd\" => {\n+                            // NOTE: since both llvm.x86.fma.vfmsubadd.ps and llvm.x86.fma.vfmaddsub.ps maps to\n+                            // __builtin_ia32_vfmaddsubps, only add minus if this comes from a\n+                            // subadd LLVM intrinsic, e.g. _mm256_fmsubadd_pd.\n+                            let mut new_args = args.to_vec();\n+                            let arg3 = &mut new_args[2];\n+                            *arg3 = builder.context.new_unary_op(None, UnaryOp::Minus, arg3.get_type(), *arg3);\n+                            args = new_args.into();\n+                        },\n+                        _ => (),\n+                    }\n+                }\n             },\n             \"__builtin_ia32_ldmxcsr\" => {\n                 // The builtin __builtin_ia32_ldmxcsr takes an integer value while llvm.x86.sse.ldmxcsr takes a pointer,\n@@ -583,6 +595,8 @@ pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function\n         \"llvm.fshr.v32i16\" => \"__builtin_ia32_vpshrdv_v32hi\",\n         \"llvm.fshr.v16i16\" => \"__builtin_ia32_vpshrdv_v16hi\",\n         \"llvm.fshr.v8i16\" => \"__builtin_ia32_vpshrdv_v8hi\",\n+        \"llvm.x86.fma.vfmadd.sd\" => \"__builtin_ia32_vfmaddsd3\",\n+        \"llvm.x86.fma.vfmadd.ss\" => \"__builtin_ia32_vfmaddss3\",\n \n         // The above doc points to unknown builtins for the following, so override them:\n         \"llvm.x86.avx2.gather.d.d\" => \"__builtin_ia32_gathersiv4si\","}]}